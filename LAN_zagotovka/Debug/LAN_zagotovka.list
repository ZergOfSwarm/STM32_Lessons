
LAN_zagotovka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000192ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b0ac  0801947c  0801947c  0002947c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024528  08024528  00040510  2**0
                  CONTENTS
  4 .ARM          00000008  08024528  08024528  00034528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024530  08024530  00040510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024530  08024530  00034530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024534  08024534  00034534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000510  20000000  08024538  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040510  2**0
                  CONTENTS
 10 .bss          0000f62c  20000510  20000510  00040510  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000fb3c  2000fb3c  00040510  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040510  2**0
                  CONTENTS, READONLY
 13 .debug_info   00044072  00000000  00000000  00040540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007dcf  00000000  00000000  000845b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f8  00000000  00000000  0008c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002000  00000000  00000000  0008e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031b5f  00000000  00000000  00090480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035f5e  00000000  00000000  000c1fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed269  00000000  00000000  000f7f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001e51a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009508  00000000  00000000  001e51fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000510 	.word	0x20000510
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019464 	.word	0x08019464

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000514 	.word	0x20000514
 80001cc:	08019464 	.word	0x08019464

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff fe1f 	bl	80001e4 <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <Send_Uart+0x28>)
 80005b2:	f006 fbdc 	bl	8006d6e <HAL_UART_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200073d0 	.word	0x200073d0

080005c4 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005cc:	2201      	movs	r2, #1
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <Mount_SD+0x38>)
 80005d2:	f00a f95d 	bl	800a890 <f_mount>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <Mount_SD+0x3c>)
 80005dc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <Mount_SD+0x3c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <Mount_SD+0x2a>
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <Mount_SD+0x40>)
 80005e8:	f7ff ffd6 	bl	8000598 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80005ec:	e002      	b.n	80005f4 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <Mount_SD+0x44>)
 80005f0:	f7ff ffd2 	bl	8000598 <Send_Uart>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000b94 	.word	0x20000b94
 8000600:	20001bd8 	.word	0x20001bd8
 8000604:	0801947c 	.word	0x0801947c
 8000608:	080194a0 	.word	0x080194a0

0800060c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	2000      	movs	r0, #0
 800061a:	f00a f939 	bl	800a890 <f_mount>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <Unmount_SD+0x38>)
 8000624:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <Unmount_SD+0x38>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d103      	bne.n	8000636 <Unmount_SD+0x2a>
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <Unmount_SD+0x3c>)
 8000630:	f7ff ffb2 	bl	8000598 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000634:	e002      	b.n	800063c <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <Unmount_SD+0x40>)
 8000638:	f7ff ffae 	bl	8000598 <Send_Uart>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20001bd8 	.word	0x20001bd8
 8000648:	080194c4 	.word	0x080194c4
 800064c:	080194ec 	.word	0x080194ec

08000650 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000658:	4943      	ldr	r1, [pc, #268]	; (8000768 <Create_File+0x118>)
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f00a fd66 	bl	800b12c <f_stat>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b41      	ldr	r3, [pc, #260]	; (800076c <Create_File+0x11c>)
 8000666:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000668:	4b40      	ldr	r3, [pc, #256]	; (800076c <Create_File+0x11c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d112      	bne.n	8000696 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000670:	2064      	movs	r0, #100	; 0x64
 8000672:	f017 fb23 	bl	8017cbc <malloc>
 8000676:	4603      	mov	r3, r0
 8000678:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	493c      	ldr	r1, [pc, #240]	; (8000770 <Create_File+0x120>)
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f017 fd26 	bl	80180d0 <siprintf>
		Send_Uart(buf);
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f7ff ff87 	bl	8000598 <Send_Uart>
		free(buf);
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f017 fb1e 	bl	8017ccc <free>
	    return fresult;
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <Create_File+0x11c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	e063      	b.n	800075e <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000696:	220b      	movs	r2, #11
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	4836      	ldr	r0, [pc, #216]	; (8000774 <Create_File+0x124>)
 800069c:	f00a f93e 	bl	800a91c <f_open>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b31      	ldr	r3, [pc, #196]	; (800076c <Create_File+0x11c>)
 80006a6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80006a8:	4b30      	ldr	r3, [pc, #192]	; (800076c <Create_File+0x11c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d015      	beq.n	80006dc <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f017 fb03 	bl	8017cbc <malloc>
 80006b6:	4603      	mov	r3, r0
 80006b8:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <Create_File+0x11c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	492d      	ldr	r1, [pc, #180]	; (8000778 <Create_File+0x128>)
 80006c4:	6938      	ldr	r0, [r7, #16]
 80006c6:	f017 fd03 	bl	80180d0 <siprintf>
			Send_Uart(buf);
 80006ca:	6938      	ldr	r0, [r7, #16]
 80006cc:	f7ff ff64 	bl	8000598 <Send_Uart>
			free(buf);
 80006d0:	6938      	ldr	r0, [r7, #16]
 80006d2:	f017 fafb 	bl	8017ccc <free>
		    return fresult;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <Create_File+0x11c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	e040      	b.n	800075e <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f017 faed 	bl	8017cbc <malloc>
 80006e2:	4603      	mov	r3, r0
 80006e4:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4924      	ldr	r1, [pc, #144]	; (800077c <Create_File+0x12c>)
 80006ea:	69f8      	ldr	r0, [r7, #28]
 80006ec:	f017 fcf0 	bl	80180d0 <siprintf>
			Send_Uart(buf);
 80006f0:	69f8      	ldr	r0, [r7, #28]
 80006f2:	f7ff ff51 	bl	8000598 <Send_Uart>
			free(buf);
 80006f6:	69f8      	ldr	r0, [r7, #28]
 80006f8:	f017 fae8 	bl	8017ccc <free>
		}

		fresult = f_close(&fil);
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <Create_File+0x124>)
 80006fe:	f00a fceb 	bl	800b0d8 <f_close>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <Create_File+0x11c>)
 8000708:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <Create_File+0x11c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d013      	beq.n	800073a <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f017 fad2 	bl	8017cbc <malloc>
 8000718:	4603      	mov	r3, r0
 800071a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <Create_File+0x11c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4916      	ldr	r1, [pc, #88]	; (8000780 <Create_File+0x130>)
 8000726:	6978      	ldr	r0, [r7, #20]
 8000728:	f017 fcd2 	bl	80180d0 <siprintf>
			Send_Uart(buf);
 800072c:	6978      	ldr	r0, [r7, #20]
 800072e:	f7ff ff33 	bl	8000598 <Send_Uart>
			free(buf);
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f017 faca 	bl	8017ccc <free>
 8000738:	e00f      	b.n	800075a <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800073a:	2064      	movs	r0, #100	; 0x64
 800073c:	f017 fabe 	bl	8017cbc <malloc>
 8000740:	4603      	mov	r3, r0
 8000742:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	490f      	ldr	r1, [pc, #60]	; (8000784 <Create_File+0x134>)
 8000748:	69b8      	ldr	r0, [r7, #24]
 800074a:	f017 fcc1 	bl	80180d0 <siprintf>
			Send_Uart(buf);
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	f7ff ff22 	bl	8000598 <Send_Uart>
			free(buf);
 8000754:	69b8      	ldr	r0, [r7, #24]
 8000756:	f017 fab9 	bl	8017ccc <free>
		}
	}
    return fresult;
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <Create_File+0x11c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000b7c 	.word	0x20000b7c
 800076c:	20001bd8 	.word	0x20001bd8
 8000770:	08019718 	.word	0x08019718
 8000774:	20001be0 	.word	0x20001be0
 8000778:	08019750 	.word	0x08019750
 800077c:	08019778 	.word	0x08019778
 8000780:	080197b8 	.word	0x080197b8
 8000784:	080196f8 	.word	0x080196f8

08000788 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000792:	4956      	ldr	r1, [pc, #344]	; (80008ec <Update_File+0x164>)
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f00a fcc9 	bl	800b12c <f_stat>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b54      	ldr	r3, [pc, #336]	; (80008f0 <Update_File+0x168>)
 80007a0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80007a2:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <Update_File+0x168>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d012      	beq.n	80007d0 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80007aa:	2064      	movs	r0, #100	; 0x64
 80007ac:	f017 fa86 	bl	8017cbc <malloc>
 80007b0:	4603      	mov	r3, r0
 80007b2:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	494f      	ldr	r1, [pc, #316]	; (80008f4 <Update_File+0x16c>)
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f017 fc89 	bl	80180d0 <siprintf>
		Send_Uart (buf);
 80007be:	68b8      	ldr	r0, [r7, #8]
 80007c0:	f7ff feea 	bl	8000598 <Send_Uart>
		free(buf);
 80007c4:	68b8      	ldr	r0, [r7, #8]
 80007c6:	f017 fa81 	bl	8017ccc <free>
	    return fresult;
 80007ca:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <Update_File+0x168>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	e088      	b.n	80008e2 <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80007d0:	2232      	movs	r2, #50	; 0x32
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4848      	ldr	r0, [pc, #288]	; (80008f8 <Update_File+0x170>)
 80007d6:	f00a f8a1 	bl	800a91c <f_open>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <Update_File+0x168>)
 80007e0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <Update_File+0x168>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d015      	beq.n	8000816 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f017 fa66 	bl	8017cbc <malloc>
 80007f0:	4603      	mov	r3, r0
 80007f2:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80007f4:	4b3e      	ldr	r3, [pc, #248]	; (80008f0 <Update_File+0x168>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	493f      	ldr	r1, [pc, #252]	; (80008fc <Update_File+0x174>)
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f017 fc66 	bl	80180d0 <siprintf>
	    	Send_Uart(buf);
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f7ff fec7 	bl	8000598 <Send_Uart>
	        free(buf);
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f017 fa5e 	bl	8017ccc <free>
	        return fresult;
 8000810:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <Update_File+0x168>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	e065      	b.n	80008e2 <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8000816:	6838      	ldr	r0, [r7, #0]
 8000818:	f7ff fce4 	bl	80001e4 <strlen>
 800081c:	4602      	mov	r2, r0
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <Update_File+0x178>)
 8000820:	6839      	ldr	r1, [r7, #0]
 8000822:	4835      	ldr	r0, [pc, #212]	; (80008f8 <Update_File+0x170>)
 8000824:	f00a fa46 	bl	800acb4 <f_write>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <Update_File+0x168>)
 800082e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <Update_File+0x168>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d013      	beq.n	8000860 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000838:	2064      	movs	r0, #100	; 0x64
 800083a:	f017 fa3f 	bl	8017cbc <malloc>
 800083e:	4603      	mov	r3, r0
 8000840:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <Update_File+0x168>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	492e      	ldr	r1, [pc, #184]	; (8000904 <Update_File+0x17c>)
 800084c:	69b8      	ldr	r0, [r7, #24]
 800084e:	f017 fc3f 	bl	80180d0 <siprintf>
	    	Send_Uart(buf);
 8000852:	69b8      	ldr	r0, [r7, #24]
 8000854:	f7ff fea0 	bl	8000598 <Send_Uart>
	    	free(buf);
 8000858:	69b8      	ldr	r0, [r7, #24]
 800085a:	f017 fa37 	bl	8017ccc <free>
 800085e:	e00f      	b.n	8000880 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000860:	2064      	movs	r0, #100	; 0x64
 8000862:	f017 fa2b 	bl	8017cbc <malloc>
 8000866:	4603      	mov	r3, r0
 8000868:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4926      	ldr	r1, [pc, #152]	; (8000908 <Update_File+0x180>)
 800086e:	69f8      	ldr	r0, [r7, #28]
 8000870:	f017 fc2e 	bl	80180d0 <siprintf>
	    	Send_Uart(buf);
 8000874:	69f8      	ldr	r0, [r7, #28]
 8000876:	f7ff fe8f 	bl	8000598 <Send_Uart>
	    	free(buf);
 800087a:	69f8      	ldr	r0, [r7, #28]
 800087c:	f017 fa26 	bl	8017ccc <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000880:	481d      	ldr	r0, [pc, #116]	; (80008f8 <Update_File+0x170>)
 8000882:	f00a fc29 	bl	800b0d8 <f_close>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <Update_File+0x168>)
 800088c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <Update_File+0x168>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d013      	beq.n	80008be <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000896:	2064      	movs	r0, #100	; 0x64
 8000898:	f017 fa10 	bl	8017cbc <malloc>
 800089c:	4603      	mov	r3, r0
 800089e:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <Update_File+0x168>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4918      	ldr	r1, [pc, #96]	; (800090c <Update_File+0x184>)
 80008aa:	6938      	ldr	r0, [r7, #16]
 80008ac:	f017 fc10 	bl	80180d0 <siprintf>
	    	Send_Uart(buf);
 80008b0:	6938      	ldr	r0, [r7, #16]
 80008b2:	f7ff fe71 	bl	8000598 <Send_Uart>
	    	free(buf);
 80008b6:	6938      	ldr	r0, [r7, #16]
 80008b8:	f017 fa08 	bl	8017ccc <free>
 80008bc:	e00f      	b.n	80008de <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008be:	2064      	movs	r0, #100	; 0x64
 80008c0:	f017 f9fc 	bl	8017cbc <malloc>
 80008c4:	4603      	mov	r3, r0
 80008c6:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4911      	ldr	r1, [pc, #68]	; (8000910 <Update_File+0x188>)
 80008cc:	6978      	ldr	r0, [r7, #20]
 80008ce:	f017 fbff 	bl	80180d0 <siprintf>
	    	Send_Uart(buf);
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f7ff fe60 	bl	8000598 <Send_Uart>
	    	free(buf);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f017 f9f7 	bl	8017ccc <free>
	     }
	}
    return fresult;
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <Update_File+0x168>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000b7c 	.word	0x20000b7c
 80008f0:	20001bd8 	.word	0x20001bd8
 80008f4:	080195a0 	.word	0x080195a0
 80008f8:	20001be0 	.word	0x20001be0
 80008fc:	080195c0 	.word	0x080195c0
 8000900:	20001bd0 	.word	0x20001bd0
 8000904:	080197dc 	.word	0x080197dc
 8000908:	08019804 	.word	0x08019804
 800090c:	080196d0 	.word	0x080196d0
 8000910:	080196f8 	.word	0x080196f8

08000914 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f00a fc3e 	bl	800b19e <f_mkdir>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <Create_Dir+0x74>)
 8000928:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <Create_Dir+0x74>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d110      	bne.n	8000954 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8000932:	2064      	movs	r0, #100	; 0x64
 8000934:	f017 f9c2 	bl	8017cbc <malloc>
 8000938:	4603      	mov	r3, r0
 800093a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4913      	ldr	r1, [pc, #76]	; (800098c <Create_Dir+0x78>)
 8000940:	68b8      	ldr	r0, [r7, #8]
 8000942:	f017 fbc5 	bl	80180d0 <siprintf>
    	Send_Uart (buf);
 8000946:	68b8      	ldr	r0, [r7, #8]
 8000948:	f7ff fe26 	bl	8000598 <Send_Uart>
    	free(buf);
 800094c:	68b8      	ldr	r0, [r7, #8]
 800094e:	f017 f9bd 	bl	8017ccc <free>
 8000952:	e012      	b.n	800097a <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8000954:	2064      	movs	r0, #100	; 0x64
 8000956:	f017 f9b1 	bl	8017cbc <malloc>
 800095a:	4603      	mov	r3, r0
 800095c:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <Create_Dir+0x74>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	490a      	ldr	r1, [pc, #40]	; (8000990 <Create_Dir+0x7c>)
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f017 fbb1 	bl	80180d0 <siprintf>
    	Send_Uart(buf);
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff fe12 	bl	8000598 <Send_Uart>
    	free(buf);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f017 f9a9 	bl	8017ccc <free>
    }
    return fresult;
 800097a:	4b03      	ldr	r3, [pc, #12]	; (8000988 <Create_Dir+0x74>)
 800097c:	781b      	ldrb	r3, [r3, #0]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20001bd8 	.word	0x20001bd8
 800098c:	08019864 	.word	0x08019864
 8000990:	08019888 	.word	0x08019888

08000994 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const* TAGCHAR[]={"json","formjson","menu"};
char const **TAGS = TAGCHAR;
int f = 0;
//
uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen, u16_t current_tag_part, u16_t *next_tag_part) {
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	b097      	sub	sp, #92	; 0x5c
 8000998:	af0c      	add	r7, sp, #48	; 0x30
 800099a:	6278      	str	r0, [r7, #36]	; 0x24
 800099c:	6239      	str	r1, [r7, #32]
 800099e:	61fa      	str	r2, [r7, #28]
 80009a0:	837b      	strh	r3, [r7, #26]
	//printf("+++ jsongo +++ %d \n", jsongo);
	switch (iIndex) {
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	f000 85cc 	beq.w	8001542 <ssi_handler+0xbae>
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	f300 85d2 	bgt.w	8001556 <ssi_handler+0xbc2>
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d005      	beq.n	80009c4 <ssi_handler+0x30>
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	f000 844c 	beq.w	8001258 <ssi_handler+0x8c4>
		case 2:
			sprintf(pcInsert,"<a href=\"index.shtml\">Home</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"tab3.shtml\">Connection</a> | <a href=\"select.shtml\">Select pin</a>");
			return strlen(pcInsert);
			break;
		default :
			break;
 80009c0:	f000 bdc9 	b.w	8001556 <ssi_handler+0xbc2>
		if (variable == numpin) {
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <ssi_handler+0x4c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b3a      	cmp	r3, #58	; 0x3a
 80009ca:	d104      	bne.n	80009d6 <ssi_handler+0x42>
			variable = 0;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <ssi_handler+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
			break;
 80009d2:	f000 bdc1 	b.w	8001558 <ssi_handler+0xbc4>
			if(jsongo == 1){
 80009d6:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <ssi_handler+0x50>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d17d      	bne.n	8000ada <ssi_handler+0x146>
				while(variable3 <= numpintopin-1){
 80009de:	e075      	b.n	8000acc <ssi_handler+0x138>
 80009e0:	20000530 	.word	0x20000530
 80009e4:	20000534 	.word	0x20000534
						if(variable3 == 0) {
 80009e8:	4baa      	ldr	r3, [pc, #680]	; (8000c94 <ssi_handler+0x300>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10b      	bne.n	8000a08 <ssi_handler+0x74>
							strcat(listaction, "{");
 80009f0:	48a9      	ldr	r0, [pc, #676]	; (8000c98 <ssi_handler+0x304>)
 80009f2:	f7ff fbf7 	bl	80001e4 <strlen>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	4ba7      	ldr	r3, [pc, #668]	; (8000c98 <ssi_handler+0x304>)
 80009fc:	4413      	add	r3, r2
 80009fe:	49a7      	ldr	r1, [pc, #668]	; (8000c9c <ssi_handler+0x308>)
 8000a00:	461a      	mov	r2, r3
 8000a02:	460b      	mov	r3, r1
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	8013      	strh	r3, [r2, #0]
						if(variable == TO[variable3].idin && TO[variable3].flag == 1){
 8000a08:	4ba2      	ldr	r3, [pc, #648]	; (8000c94 <ssi_handler+0x300>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	49a4      	ldr	r1, [pc, #656]	; (8000ca0 <ssi_handler+0x30c>)
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	440b      	add	r3, r1
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4ba2      	ldr	r3, [pc, #648]	; (8000ca4 <ssi_handler+0x310>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d125      	bne.n	8000a6e <ssi_handler+0xda>
 8000a22:	4b9c      	ldr	r3, [pc, #624]	; (8000c94 <ssi_handler+0x300>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	499e      	ldr	r1, [pc, #632]	; (8000ca0 <ssi_handler+0x30c>)
 8000a28:	4613      	mov	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	440b      	add	r3, r1
 8000a32:	3308      	adds	r3, #8
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d119      	bne.n	8000a6e <ssi_handler+0xda>
							sprintf(name3, "\"%s\":%d,",tp[TO[variable3].idout].pins, variable3);
 8000a3a:	4b96      	ldr	r3, [pc, #600]	; (8000c94 <ssi_handler+0x300>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4998      	ldr	r1, [pc, #608]	; (8000ca0 <ssi_handler+0x30c>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	440b      	add	r3, r1
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4a94      	ldr	r2, [pc, #592]	; (8000ca8 <ssi_handler+0x314>)
 8000a58:	441a      	add	r2, r3
 8000a5a:	4b8e      	ldr	r3, [pc, #568]	; (8000c94 <ssi_handler+0x300>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4993      	ldr	r1, [pc, #588]	; (8000cac <ssi_handler+0x318>)
 8000a60:	4893      	ldr	r0, [pc, #588]	; (8000cb0 <ssi_handler+0x31c>)
 8000a62:	f017 fb35 	bl	80180d0 <siprintf>
							strcat(listaction, name3);
 8000a66:	4992      	ldr	r1, [pc, #584]	; (8000cb0 <ssi_handler+0x31c>)
 8000a68:	488b      	ldr	r0, [pc, #556]	; (8000c98 <ssi_handler+0x304>)
 8000a6a:	f017 fb51 	bl	8018110 <strcat>
						if(variable3 == numpintopin-1 &&  strcmp(listaction[strlen(listaction)-1], '{') > 0){
 8000a6e:	4b89      	ldr	r3, [pc, #548]	; (8000c94 <ssi_handler+0x300>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b45      	cmp	r3, #69	; 0x45
 8000a74:	d115      	bne.n	8000aa2 <ssi_handler+0x10e>
 8000a76:	4888      	ldr	r0, [pc, #544]	; (8000c98 <ssi_handler+0x304>)
 8000a78:	f7ff fbb4 	bl	80001e4 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	4a85      	ldr	r2, [pc, #532]	; (8000c98 <ssi_handler+0x304>)
 8000a82:	5cd3      	ldrb	r3, [r2, r3]
 8000a84:	217b      	movs	r1, #123	; 0x7b
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fba2 	bl	80001d0 <strcmp>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	dd07      	ble.n	8000aa2 <ssi_handler+0x10e>
							listaction[strlen(listaction)-1] = '\0';
 8000a92:	4881      	ldr	r0, [pc, #516]	; (8000c98 <ssi_handler+0x304>)
 8000a94:	f7ff fba6 	bl	80001e4 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	4a7e      	ldr	r2, [pc, #504]	; (8000c98 <ssi_handler+0x304>)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	54d1      	strb	r1, [r2, r3]
						if(variable3 == numpintopin-1) {
 8000aa2:	4b7c      	ldr	r3, [pc, #496]	; (8000c94 <ssi_handler+0x300>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b45      	cmp	r3, #69	; 0x45
 8000aa8:	d10b      	bne.n	8000ac2 <ssi_handler+0x12e>
							strcat(listaction, "}");
 8000aaa:	487b      	ldr	r0, [pc, #492]	; (8000c98 <ssi_handler+0x304>)
 8000aac:	f7ff fb9a 	bl	80001e4 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b78      	ldr	r3, [pc, #480]	; (8000c98 <ssi_handler+0x304>)
 8000ab6:	4413      	add	r3, r2
 8000ab8:	497e      	ldr	r1, [pc, #504]	; (8000cb4 <ssi_handler+0x320>)
 8000aba:	461a      	mov	r2, r3
 8000abc:	460b      	mov	r3, r1
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	8013      	strh	r3, [r2, #0]
						variable3++;
 8000ac2:	4b74      	ldr	r3, [pc, #464]	; (8000c94 <ssi_handler+0x300>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	4a72      	ldr	r2, [pc, #456]	; (8000c94 <ssi_handler+0x300>)
 8000aca:	6013      	str	r3, [r2, #0]
				while(variable3 <= numpintopin-1){
 8000acc:	4b71      	ldr	r3, [pc, #452]	; (8000c94 <ssi_handler+0x300>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b45      	cmp	r3, #69	; 0x45
 8000ad2:	dd89      	ble.n	80009e8 <ssi_handler+0x54>
				variable3 = 0;
 8000ad4:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <ssi_handler+0x300>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
			if (variable == 0) {
 8000ada:	4b72      	ldr	r3, [pc, #456]	; (8000ca4 <ssi_handler+0x310>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8144 	bne.w	8000d6c <ssi_handler+0x3d8>
				if(jsongo == 1){
 8000ae4:	4b74      	ldr	r3, [pc, #464]	; (8000cb8 <ssi_handler+0x324>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d17e      	bne.n	8000bea <ssi_handler+0x256>
				sprintf(pcInsert,
 8000aec:	4b6d      	ldr	r3, [pc, #436]	; (8000ca4 <ssi_handler+0x310>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a72      	ldr	r2, [pc, #456]	; (8000cbc <ssi_handler+0x328>)
 8000af2:	2168      	movs	r1, #104	; 0x68
 8000af4:	fb01 f303 	mul.w	r3, r1, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	4b69      	ldr	r3, [pc, #420]	; (8000ca4 <ssi_handler+0x310>)
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000b04:	4b67      	ldr	r3, [pc, #412]	; (8000ca4 <ssi_handler+0x310>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4413      	add	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4a65      	ldr	r2, [pc, #404]	; (8000ca8 <ssi_handler+0x314>)
 8000b12:	1899      	adds	r1, r3, r2
 8000b14:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 8000b16:	4b63      	ldr	r3, [pc, #396]	; (8000ca4 <ssi_handler+0x310>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2268      	movs	r2, #104	; 0x68
 8000b1c:	fb02 f303 	mul.w	r3, r2, r3
 8000b20:	3318      	adds	r3, #24
 8000b22:	4a66      	ldr	r2, [pc, #408]	; (8000cbc <ssi_handler+0x328>)
 8000b24:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <ssi_handler+0x310>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a64      	ldr	r2, [pc, #400]	; (8000cbc <ssi_handler+0x328>)
 8000b2c:	2168      	movs	r1, #104	; 0x68
 8000b2e:	fb01 f303 	mul.w	r3, r1, r3
 8000b32:	4413      	add	r3, r2
 8000b34:	332c      	adds	r3, #44	; 0x2c
 8000b36:	681d      	ldr	r5, [r3, #0]
 8000b38:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <ssi_handler+0x310>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a5f      	ldr	r2, [pc, #380]	; (8000cbc <ssi_handler+0x328>)
 8000b3e:	2168      	movs	r1, #104	; 0x68
 8000b40:	fb01 f303 	mul.w	r3, r1, r3
 8000b44:	4413      	add	r3, r2
 8000b46:	3330      	adds	r3, #48	; 0x30
 8000b48:	681e      	ldr	r6, [r3, #0]
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <ssi_handler+0x310>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a5b      	ldr	r2, [pc, #364]	; (8000cbc <ssi_handler+0x328>)
 8000b50:	2168      	movs	r1, #104	; 0x68
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	3334      	adds	r3, #52	; 0x34
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	60ba      	str	r2, [r7, #8]
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <ssi_handler+0x310>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a56      	ldr	r2, [pc, #344]	; (8000cbc <ssi_handler+0x328>)
 8000b64:	2168      	movs	r1, #104	; 0x68
 8000b66:	fb01 f303 	mul.w	r3, r1, r3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	3338      	adds	r3, #56	; 0x38
 8000b6e:	6819      	ldr	r1, [r3, #0]
 8000b70:	6079      	str	r1, [r7, #4]
 8000b72:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <ssi_handler+0x310>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a51      	ldr	r2, [pc, #324]	; (8000cbc <ssi_handler+0x328>)
 8000b78:	2168      	movs	r1, #104	; 0x68
 8000b7a:	fb01 f303 	mul.w	r3, r1, r3
 8000b7e:	4413      	add	r3, r2
 8000b80:	333c      	adds	r3, #60	; 0x3c
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <ssi_handler+0x310>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a4c      	ldr	r2, [pc, #304]	; (8000cbc <ssi_handler+0x328>)
 8000b8c:	2168      	movs	r1, #104	; 0x68
 8000b8e:	fb01 f303 	mul.w	r3, r1, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	3340      	adds	r3, #64	; 0x40
 8000b96:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <ssi_handler+0x310>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2268      	movs	r2, #104	; 0x68
 8000b9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ba2:	3340      	adds	r3, #64	; 0x40
 8000ba4:	4a45      	ldr	r2, [pc, #276]	; (8000cbc <ssi_handler+0x328>)
 8000ba6:	4413      	add	r3, r2
 8000ba8:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 8000baa:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <ssi_handler+0x310>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4843      	ldr	r0, [pc, #268]	; (8000cbc <ssi_handler+0x328>)
 8000bb0:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000bb4:	fb0c f303 	mul.w	r3, ip, r3
 8000bb8:	4403      	add	r3, r0
 8000bba:	3364      	adds	r3, #100	; 0x64
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8000bc0:	9209      	str	r2, [sp, #36]	; 0x24
 8000bc2:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <ssi_handler+0x304>)
 8000bc4:	9308      	str	r3, [sp, #32]
 8000bc6:	9107      	str	r1, [sp, #28]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	9306      	str	r3, [sp, #24]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	9105      	str	r1, [sp, #20]
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	9204      	str	r2, [sp, #16]
 8000bd4:	9603      	str	r6, [sp, #12]
 8000bd6:	9502      	str	r5, [sp, #8]
 8000bd8:	9401      	str	r4, [sp, #4]
 8000bda:	68f9      	ldr	r1, [r7, #12]
 8000bdc:	9100      	str	r1, [sp, #0]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	4937      	ldr	r1, [pc, #220]	; (8000cc0 <ssi_handler+0x32c>)
 8000be4:	6a38      	ldr	r0, [r7, #32]
 8000be6:	f017 fa73 	bl	80180d0 <siprintf>
				if(jsongo == 2){
 8000bea:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <ssi_handler+0x324>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	f040 8091 	bne.w	8000d16 <ssi_handler+0x382>
				sprintf(pcInsert,
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <ssi_handler+0x310>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <ssi_handler+0x328>)
 8000bfa:	2168      	movs	r1, #104	; 0x68
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <ssi_handler+0x310>)
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <ssi_handler+0x310>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <ssi_handler+0x314>)
 8000c1a:	4413      	add	r3, r2
						T[variable].ptype,
 8000c1c:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <ssi_handler+0x310>)
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	2168      	movs	r1, #104	; 0x68
 8000c22:	fb01 f202 	mul.w	r2, r1, r2
 8000c26:	3218      	adds	r2, #24
 8000c28:	4924      	ldr	r1, [pc, #144]	; (8000cbc <ssi_handler+0x328>)
 8000c2a:	440a      	add	r2, r1
				sprintf(pcInsert,
 8000c2c:	491d      	ldr	r1, [pc, #116]	; (8000ca4 <ssi_handler+0x310>)
 8000c2e:	6809      	ldr	r1, [r1, #0]
 8000c30:	4822      	ldr	r0, [pc, #136]	; (8000cbc <ssi_handler+0x328>)
 8000c32:	2468      	movs	r4, #104	; 0x68
 8000c34:	fb04 f101 	mul.w	r1, r4, r1
 8000c38:	4401      	add	r1, r0
 8000c3a:	3104      	adds	r1, #4
 8000c3c:	6809      	ldr	r1, [r1, #0]
 8000c3e:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <ssi_handler+0x310>)
 8000c40:	6800      	ldr	r0, [r0, #0]
 8000c42:	4c1e      	ldr	r4, [pc, #120]	; (8000cbc <ssi_handler+0x328>)
 8000c44:	2568      	movs	r5, #104	; 0x68
 8000c46:	fb05 f000 	mul.w	r0, r5, r0
 8000c4a:	4420      	add	r0, r4
 8000c4c:	3008      	adds	r0, #8
 8000c4e:	6800      	ldr	r0, [r0, #0]
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	4c14      	ldr	r4, [pc, #80]	; (8000ca4 <ssi_handler+0x310>)
 8000c54:	6824      	ldr	r4, [r4, #0]
 8000c56:	4d19      	ldr	r5, [pc, #100]	; (8000cbc <ssi_handler+0x328>)
 8000c58:	2668      	movs	r6, #104	; 0x68
 8000c5a:	fb06 f404 	mul.w	r4, r6, r4
 8000c5e:	442c      	add	r4, r5
 8000c60:	340c      	adds	r4, #12
 8000c62:	6820      	ldr	r0, [r4, #0]
 8000c64:	60b8      	str	r0, [r7, #8]
 8000c66:	4d0f      	ldr	r5, [pc, #60]	; (8000ca4 <ssi_handler+0x310>)
 8000c68:	682d      	ldr	r5, [r5, #0]
 8000c6a:	4e14      	ldr	r6, [pc, #80]	; (8000cbc <ssi_handler+0x328>)
 8000c6c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000c70:	fb0c f505 	mul.w	r5, ip, r5
 8000c74:	4435      	add	r5, r6
 8000c76:	3510      	adds	r5, #16
 8000c78:	682d      	ldr	r5, [r5, #0]
 8000c7a:	4e0a      	ldr	r6, [pc, #40]	; (8000ca4 <ssi_handler+0x310>)
 8000c7c:	6836      	ldr	r6, [r6, #0]
 8000c7e:	480f      	ldr	r0, [pc, #60]	; (8000cbc <ssi_handler+0x328>)
 8000c80:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000c84:	fb0c f606 	mul.w	r6, ip, r6
 8000c88:	4406      	add	r6, r0
 8000c8a:	3614      	adds	r6, #20
 8000c8c:	6836      	ldr	r6, [r6, #0]
						T[variable].info,
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <ssi_handler+0x310>)
 8000c90:	6800      	ldr	r0, [r0, #0]
 8000c92:	e017      	b.n	8000cc4 <ssi_handler+0x330>
 8000c94:	2000052c 	.word	0x2000052c
 8000c98:	20006ffc 	.word	0x20006ffc
 8000c9c:	08019908 	.word	0x08019908
 8000ca0:	20002c14 	.word	0x20002c14
 8000ca4:	20000530 	.word	0x20000530
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	0801990c 	.word	0x0801990c
 8000cb0:	20002f5c 	.word	0x20002f5c
 8000cb4:	08019918 	.word	0x08019918
 8000cb8:	20000534 	.word	0x20000534
 8000cbc:	20002f68 	.word	0x20002f68
 8000cc0:	0801991c 	.word	0x0801991c
 8000cc4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000cc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000ccc:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000cd0:	4820      	ldr	r0, [pc, #128]	; (8000d54 <ssi_handler+0x3c0>)
 8000cd2:	4484      	add	ip, r0
 8000cd4:	f10c 0004 	add.w	r0, ip, #4
 8000cd8:	6078      	str	r0, [r7, #4]
				sprintf(pcInsert,
 8000cda:	481f      	ldr	r0, [pc, #124]	; (8000d58 <ssi_handler+0x3c4>)
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	4c1d      	ldr	r4, [pc, #116]	; (8000d54 <ssi_handler+0x3c0>)
 8000ce0:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000ce4:	fb0c fc00 	mul.w	ip, ip, r0
 8000ce8:	44a4      	add	ip, r4
 8000cea:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000cee:	f8dc 0000 	ldr.w	r0, [ip]
 8000cf2:	9008      	str	r0, [sp, #32]
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	9007      	str	r0, [sp, #28]
 8000cf8:	9606      	str	r6, [sp, #24]
 8000cfa:	9505      	str	r5, [sp, #20]
 8000cfc:	68b8      	ldr	r0, [r7, #8]
 8000cfe:	9004      	str	r0, [sp, #16]
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	9003      	str	r0, [sp, #12]
 8000d04:	9102      	str	r1, [sp, #8]
 8000d06:	9201      	str	r2, [sp, #4]
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	4913      	ldr	r1, [pc, #76]	; (8000d5c <ssi_handler+0x3c8>)
 8000d10:	6a38      	ldr	r0, [r7, #32]
 8000d12:	f017 f9dd 	bl	80180d0 <siprintf>
				if(jsongo == 3){
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <ssi_handler+0x3cc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	f040 8276 	bne.w	800120c <ssi_handler+0x878>
					sprintf(pcInsert,
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <ssi_handler+0x3c4>)
 8000d22:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <ssi_handler+0x3c4>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <ssi_handler+0x3d0>)
 8000d32:	441a      	add	r2, r3
					sprintf(pcInsert,
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <ssi_handler+0x3c4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <ssi_handler+0x3c0>)
 8000d3a:	2468      	movs	r4, #104	; 0x68
 8000d3c:	fb04 f303 	mul.w	r3, r4, r3
 8000d40:	4403      	add	r3, r0
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	4613      	mov	r3, r2
 8000d48:	460a      	mov	r2, r1
 8000d4a:	4907      	ldr	r1, [pc, #28]	; (8000d68 <ssi_handler+0x3d4>)
 8000d4c:	6a38      	ldr	r0, [r7, #32]
 8000d4e:	f017 f9bf 	bl	80180d0 <siprintf>
 8000d52:	e25b      	b.n	800120c <ssi_handler+0x878>
 8000d54:	20002f68 	.word	0x20002f68
 8000d58:	20000530 	.word	0x20000530
 8000d5c:	080199b8 	.word	0x080199b8
 8000d60:	20000534 	.word	0x20000534
 8000d64:	20000000 	.word	0x20000000
 8000d68:	08019a34 	.word	0x08019a34
			} else if (variable == numpin-1) {
 8000d6c:	4b91      	ldr	r3, [pc, #580]	; (8000fb4 <ssi_handler+0x620>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b39      	cmp	r3, #57	; 0x39
 8000d72:	f040 812f 	bne.w	8000fd4 <ssi_handler+0x640>
				if(jsongo == 1){
 8000d76:	4b90      	ldr	r3, [pc, #576]	; (8000fb8 <ssi_handler+0x624>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d17e      	bne.n	8000e7c <ssi_handler+0x4e8>
				sprintf(pcInsert,
 8000d7e:	4b8d      	ldr	r3, [pc, #564]	; (8000fb4 <ssi_handler+0x620>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a8e      	ldr	r2, [pc, #568]	; (8000fbc <ssi_handler+0x628>)
 8000d84:	2168      	movs	r1, #104	; 0x68
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	4b88      	ldr	r3, [pc, #544]	; (8000fb4 <ssi_handler+0x620>)
 8000d92:	6819      	ldr	r1, [r3, #0]
 8000d94:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000d96:	4b87      	ldr	r3, [pc, #540]	; (8000fb4 <ssi_handler+0x620>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4a87      	ldr	r2, [pc, #540]	; (8000fc0 <ssi_handler+0x62c>)
 8000da4:	1899      	adds	r1, r3, r2
 8000da6:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 8000da8:	4b82      	ldr	r3, [pc, #520]	; (8000fb4 <ssi_handler+0x620>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2268      	movs	r2, #104	; 0x68
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	3318      	adds	r3, #24
 8000db4:	4a81      	ldr	r2, [pc, #516]	; (8000fbc <ssi_handler+0x628>)
 8000db6:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 8000db8:	4b7e      	ldr	r3, [pc, #504]	; (8000fb4 <ssi_handler+0x620>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a7f      	ldr	r2, [pc, #508]	; (8000fbc <ssi_handler+0x628>)
 8000dbe:	2168      	movs	r1, #104	; 0x68
 8000dc0:	fb01 f303 	mul.w	r3, r1, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	332c      	adds	r3, #44	; 0x2c
 8000dc8:	681d      	ldr	r5, [r3, #0]
 8000dca:	4b7a      	ldr	r3, [pc, #488]	; (8000fb4 <ssi_handler+0x620>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7b      	ldr	r2, [pc, #492]	; (8000fbc <ssi_handler+0x628>)
 8000dd0:	2168      	movs	r1, #104	; 0x68
 8000dd2:	fb01 f303 	mul.w	r3, r1, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3330      	adds	r3, #48	; 0x30
 8000dda:	681e      	ldr	r6, [r3, #0]
 8000ddc:	4b75      	ldr	r3, [pc, #468]	; (8000fb4 <ssi_handler+0x620>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a76      	ldr	r2, [pc, #472]	; (8000fbc <ssi_handler+0x628>)
 8000de2:	2168      	movs	r1, #104	; 0x68
 8000de4:	fb01 f303 	mul.w	r3, r1, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	3334      	adds	r3, #52	; 0x34
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	60ba      	str	r2, [r7, #8]
 8000df0:	4b70      	ldr	r3, [pc, #448]	; (8000fb4 <ssi_handler+0x620>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <ssi_handler+0x628>)
 8000df6:	2168      	movs	r1, #104	; 0x68
 8000df8:	fb01 f303 	mul.w	r3, r1, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3338      	adds	r3, #56	; 0x38
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	6079      	str	r1, [r7, #4]
 8000e04:	4b6b      	ldr	r3, [pc, #428]	; (8000fb4 <ssi_handler+0x620>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a6c      	ldr	r2, [pc, #432]	; (8000fbc <ssi_handler+0x628>)
 8000e0a:	2168      	movs	r1, #104	; 0x68
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	4413      	add	r3, r2
 8000e12:	333c      	adds	r3, #60	; 0x3c
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4b66      	ldr	r3, [pc, #408]	; (8000fb4 <ssi_handler+0x620>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a67      	ldr	r2, [pc, #412]	; (8000fbc <ssi_handler+0x628>)
 8000e1e:	2168      	movs	r1, #104	; 0x68
 8000e20:	fb01 f303 	mul.w	r3, r1, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	3340      	adds	r3, #64	; 0x40
 8000e28:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 8000e2a:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <ssi_handler+0x620>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2268      	movs	r2, #104	; 0x68
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	3340      	adds	r3, #64	; 0x40
 8000e36:	4a61      	ldr	r2, [pc, #388]	; (8000fbc <ssi_handler+0x628>)
 8000e38:	4413      	add	r3, r2
 8000e3a:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 8000e3c:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <ssi_handler+0x620>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	485e      	ldr	r0, [pc, #376]	; (8000fbc <ssi_handler+0x628>)
 8000e42:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000e46:	fb0c f303 	mul.w	r3, ip, r3
 8000e4a:	4403      	add	r3, r0
 8000e4c:	3364      	adds	r3, #100	; 0x64
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	930a      	str	r3, [sp, #40]	; 0x28
 8000e52:	9209      	str	r2, [sp, #36]	; 0x24
 8000e54:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <ssi_handler+0x630>)
 8000e56:	9308      	str	r3, [sp, #32]
 8000e58:	9107      	str	r1, [sp, #28]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	9306      	str	r3, [sp, #24]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	9105      	str	r1, [sp, #20]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	9204      	str	r2, [sp, #16]
 8000e66:	9603      	str	r6, [sp, #12]
 8000e68:	9502      	str	r5, [sp, #8]
 8000e6a:	9401      	str	r4, [sp, #4]
 8000e6c:	68f9      	ldr	r1, [r7, #12]
 8000e6e:	9100      	str	r1, [sp, #0]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4954      	ldr	r1, [pc, #336]	; (8000fc8 <ssi_handler+0x634>)
 8000e76:	6a38      	ldr	r0, [r7, #32]
 8000e78:	f017 f92a 	bl	80180d0 <siprintf>
				if(jsongo == 2){
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <ssi_handler+0x624>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d177      	bne.n	8000f74 <ssi_handler+0x5e0>
					sprintf(pcInsert,
 8000e84:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <ssi_handler+0x620>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <ssi_handler+0x628>)
 8000e8a:	2168      	movs	r1, #104	; 0x68
 8000e8c:	fb01 f303 	mul.w	r3, r1, r3
 8000e90:	4413      	add	r3, r2
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <ssi_handler+0x620>)
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	6139      	str	r1, [r7, #16]
							tp[variable].pins,
 8000e9c:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <ssi_handler+0x620>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <ssi_handler+0x62c>)
 8000eaa:	4413      	add	r3, r2
							T[variable].ptype,
 8000eac:	4a41      	ldr	r2, [pc, #260]	; (8000fb4 <ssi_handler+0x620>)
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	2168      	movs	r1, #104	; 0x68
 8000eb2:	fb01 f202 	mul.w	r2, r1, r2
 8000eb6:	3218      	adds	r2, #24
 8000eb8:	4940      	ldr	r1, [pc, #256]	; (8000fbc <ssi_handler+0x628>)
 8000eba:	440a      	add	r2, r1
					sprintf(pcInsert,
 8000ebc:	493d      	ldr	r1, [pc, #244]	; (8000fb4 <ssi_handler+0x620>)
 8000ebe:	6809      	ldr	r1, [r1, #0]
 8000ec0:	483e      	ldr	r0, [pc, #248]	; (8000fbc <ssi_handler+0x628>)
 8000ec2:	2468      	movs	r4, #104	; 0x68
 8000ec4:	fb04 f101 	mul.w	r1, r4, r1
 8000ec8:	4401      	add	r1, r0
 8000eca:	3104      	adds	r1, #4
 8000ecc:	6809      	ldr	r1, [r1, #0]
 8000ece:	4839      	ldr	r0, [pc, #228]	; (8000fb4 <ssi_handler+0x620>)
 8000ed0:	6800      	ldr	r0, [r0, #0]
 8000ed2:	4c3a      	ldr	r4, [pc, #232]	; (8000fbc <ssi_handler+0x628>)
 8000ed4:	2568      	movs	r5, #104	; 0x68
 8000ed6:	fb05 f000 	mul.w	r0, r5, r0
 8000eda:	4420      	add	r0, r4
 8000edc:	3008      	adds	r0, #8
 8000ede:	6800      	ldr	r0, [r0, #0]
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	4c34      	ldr	r4, [pc, #208]	; (8000fb4 <ssi_handler+0x620>)
 8000ee4:	6824      	ldr	r4, [r4, #0]
 8000ee6:	4d35      	ldr	r5, [pc, #212]	; (8000fbc <ssi_handler+0x628>)
 8000ee8:	2668      	movs	r6, #104	; 0x68
 8000eea:	fb06 f404 	mul.w	r4, r6, r4
 8000eee:	442c      	add	r4, r5
 8000ef0:	340c      	adds	r4, #12
 8000ef2:	6820      	ldr	r0, [r4, #0]
 8000ef4:	60b8      	str	r0, [r7, #8]
 8000ef6:	4d2f      	ldr	r5, [pc, #188]	; (8000fb4 <ssi_handler+0x620>)
 8000ef8:	682d      	ldr	r5, [r5, #0]
 8000efa:	4e30      	ldr	r6, [pc, #192]	; (8000fbc <ssi_handler+0x628>)
 8000efc:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000f00:	fb0c f505 	mul.w	r5, ip, r5
 8000f04:	4435      	add	r5, r6
 8000f06:	3510      	adds	r5, #16
 8000f08:	682d      	ldr	r5, [r5, #0]
 8000f0a:	4e2a      	ldr	r6, [pc, #168]	; (8000fb4 <ssi_handler+0x620>)
 8000f0c:	6836      	ldr	r6, [r6, #0]
 8000f0e:	482b      	ldr	r0, [pc, #172]	; (8000fbc <ssi_handler+0x628>)
 8000f10:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000f14:	fb0c f606 	mul.w	r6, ip, r6
 8000f18:	4406      	add	r6, r0
 8000f1a:	3614      	adds	r6, #20
 8000f1c:	6836      	ldr	r6, [r6, #0]
							T[variable].info,
 8000f1e:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <ssi_handler+0x620>)
 8000f20:	6800      	ldr	r0, [r0, #0]
 8000f22:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000f26:	fb0c fc00 	mul.w	ip, ip, r0
 8000f2a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <ssi_handler+0x628>)
 8000f30:	4484      	add	ip, r0
 8000f32:	f10c 0004 	add.w	r0, ip, #4
 8000f36:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 8000f38:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <ssi_handler+0x620>)
 8000f3a:	6800      	ldr	r0, [r0, #0]
 8000f3c:	4c1f      	ldr	r4, [pc, #124]	; (8000fbc <ssi_handler+0x628>)
 8000f3e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000f42:	fb0c fc00 	mul.w	ip, ip, r0
 8000f46:	44a4      	add	ip, r4
 8000f48:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000f4c:	f8dc 0000 	ldr.w	r0, [ip]
 8000f50:	9008      	str	r0, [sp, #32]
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	9007      	str	r0, [sp, #28]
 8000f56:	9606      	str	r6, [sp, #24]
 8000f58:	9505      	str	r5, [sp, #20]
 8000f5a:	68b8      	ldr	r0, [r7, #8]
 8000f5c:	9004      	str	r0, [sp, #16]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	9003      	str	r0, [sp, #12]
 8000f62:	9102      	str	r1, [sp, #8]
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4917      	ldr	r1, [pc, #92]	; (8000fcc <ssi_handler+0x638>)
 8000f6e:	6a38      	ldr	r0, [r7, #32]
 8000f70:	f017 f8ae 	bl	80180d0 <siprintf>
				if(jsongo == 3){
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <ssi_handler+0x624>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	f040 8147 	bne.w	800120c <ssi_handler+0x878>
					sprintf(pcInsert,
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <ssi_handler+0x620>)
 8000f80:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <ssi_handler+0x620>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <ssi_handler+0x62c>)
 8000f90:	441a      	add	r2, r3
					sprintf(pcInsert,
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <ssi_handler+0x620>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <ssi_handler+0x628>)
 8000f98:	2468      	movs	r4, #104	; 0x68
 8000f9a:	fb04 f303 	mul.w	r3, r4, r3
 8000f9e:	4403      	add	r3, r0
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	460a      	mov	r2, r1
 8000fa8:	4909      	ldr	r1, [pc, #36]	; (8000fd0 <ssi_handler+0x63c>)
 8000faa:	6a38      	ldr	r0, [r7, #32]
 8000fac:	f017 f890 	bl	80180d0 <siprintf>
 8000fb0:	e12c      	b.n	800120c <ssi_handler+0x878>
 8000fb2:	bf00      	nop
 8000fb4:	20000530 	.word	0x20000530
 8000fb8:	20000534 	.word	0x20000534
 8000fbc:	20002f68 	.word	0x20002f68
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20006ffc 	.word	0x20006ffc
 8000fc8:	08019a58 	.word	0x08019a58
 8000fcc:	08019af4 	.word	0x08019af4
 8000fd0:	08019b70 	.word	0x08019b70
				if(jsongo == 1){
 8000fd4:	4b98      	ldr	r3, [pc, #608]	; (8001238 <ssi_handler+0x8a4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d17e      	bne.n	80010da <ssi_handler+0x746>
				sprintf(pcInsert,
 8000fdc:	4b97      	ldr	r3, [pc, #604]	; (800123c <ssi_handler+0x8a8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a97      	ldr	r2, [pc, #604]	; (8001240 <ssi_handler+0x8ac>)
 8000fe2:	2168      	movs	r1, #104	; 0x68
 8000fe4:	fb01 f303 	mul.w	r3, r1, r3
 8000fe8:	4413      	add	r3, r2
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	4b93      	ldr	r3, [pc, #588]	; (800123c <ssi_handler+0x8a8>)
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000ff4:	4b91      	ldr	r3, [pc, #580]	; (800123c <ssi_handler+0x8a8>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a90      	ldr	r2, [pc, #576]	; (8001244 <ssi_handler+0x8b0>)
 8001002:	1899      	adds	r1, r3, r2
 8001004:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 8001006:	4b8d      	ldr	r3, [pc, #564]	; (800123c <ssi_handler+0x8a8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2268      	movs	r2, #104	; 0x68
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	3318      	adds	r3, #24
 8001012:	4a8b      	ldr	r2, [pc, #556]	; (8001240 <ssi_handler+0x8ac>)
 8001014:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 8001016:	4b89      	ldr	r3, [pc, #548]	; (800123c <ssi_handler+0x8a8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a89      	ldr	r2, [pc, #548]	; (8001240 <ssi_handler+0x8ac>)
 800101c:	2168      	movs	r1, #104	; 0x68
 800101e:	fb01 f303 	mul.w	r3, r1, r3
 8001022:	4413      	add	r3, r2
 8001024:	332c      	adds	r3, #44	; 0x2c
 8001026:	681d      	ldr	r5, [r3, #0]
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <ssi_handler+0x8a8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a84      	ldr	r2, [pc, #528]	; (8001240 <ssi_handler+0x8ac>)
 800102e:	2168      	movs	r1, #104	; 0x68
 8001030:	fb01 f303 	mul.w	r3, r1, r3
 8001034:	4413      	add	r3, r2
 8001036:	3330      	adds	r3, #48	; 0x30
 8001038:	681e      	ldr	r6, [r3, #0]
 800103a:	4b80      	ldr	r3, [pc, #512]	; (800123c <ssi_handler+0x8a8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a80      	ldr	r2, [pc, #512]	; (8001240 <ssi_handler+0x8ac>)
 8001040:	2168      	movs	r1, #104	; 0x68
 8001042:	fb01 f303 	mul.w	r3, r1, r3
 8001046:	4413      	add	r3, r2
 8001048:	3334      	adds	r3, #52	; 0x34
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	4b7b      	ldr	r3, [pc, #492]	; (800123c <ssi_handler+0x8a8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <ssi_handler+0x8ac>)
 8001054:	2168      	movs	r1, #104	; 0x68
 8001056:	fb01 f303 	mul.w	r3, r1, r3
 800105a:	4413      	add	r3, r2
 800105c:	3338      	adds	r3, #56	; 0x38
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	6079      	str	r1, [r7, #4]
 8001062:	4b76      	ldr	r3, [pc, #472]	; (800123c <ssi_handler+0x8a8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a76      	ldr	r2, [pc, #472]	; (8001240 <ssi_handler+0x8ac>)
 8001068:	2168      	movs	r1, #104	; 0x68
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	4413      	add	r3, r2
 8001070:	333c      	adds	r3, #60	; 0x3c
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b71      	ldr	r3, [pc, #452]	; (800123c <ssi_handler+0x8a8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a71      	ldr	r2, [pc, #452]	; (8001240 <ssi_handler+0x8ac>)
 800107c:	2168      	movs	r1, #104	; 0x68
 800107e:	fb01 f303 	mul.w	r3, r1, r3
 8001082:	4413      	add	r3, r2
 8001084:	3340      	adds	r3, #64	; 0x40
 8001086:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 8001088:	4b6c      	ldr	r3, [pc, #432]	; (800123c <ssi_handler+0x8a8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2268      	movs	r2, #104	; 0x68
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	3340      	adds	r3, #64	; 0x40
 8001094:	4a6a      	ldr	r2, [pc, #424]	; (8001240 <ssi_handler+0x8ac>)
 8001096:	4413      	add	r3, r2
 8001098:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <ssi_handler+0x8a8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4868      	ldr	r0, [pc, #416]	; (8001240 <ssi_handler+0x8ac>)
 80010a0:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80010a4:	fb0c f303 	mul.w	r3, ip, r3
 80010a8:	4403      	add	r3, r0
 80010aa:	3364      	adds	r3, #100	; 0x64
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	930a      	str	r3, [sp, #40]	; 0x28
 80010b0:	9209      	str	r2, [sp, #36]	; 0x24
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <ssi_handler+0x8b4>)
 80010b4:	9308      	str	r3, [sp, #32]
 80010b6:	9107      	str	r1, [sp, #28]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	9306      	str	r3, [sp, #24]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	9105      	str	r1, [sp, #20]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	9204      	str	r2, [sp, #16]
 80010c4:	9603      	str	r6, [sp, #12]
 80010c6:	9502      	str	r5, [sp, #8]
 80010c8:	9401      	str	r4, [sp, #4]
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	9100      	str	r1, [sp, #0]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	495e      	ldr	r1, [pc, #376]	; (800124c <ssi_handler+0x8b8>)
 80010d4:	6a38      	ldr	r0, [r7, #32]
 80010d6:	f016 fffb 	bl	80180d0 <siprintf>
				if(jsongo == 2){
 80010da:	4b57      	ldr	r3, [pc, #348]	; (8001238 <ssi_handler+0x8a4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d177      	bne.n	80011d2 <ssi_handler+0x83e>
					sprintf(pcInsert,
 80010e2:	4b56      	ldr	r3, [pc, #344]	; (800123c <ssi_handler+0x8a8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a56      	ldr	r2, [pc, #344]	; (8001240 <ssi_handler+0x8ac>)
 80010e8:	2168      	movs	r1, #104	; 0x68
 80010ea:	fb01 f303 	mul.w	r3, r1, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	4b51      	ldr	r3, [pc, #324]	; (800123c <ssi_handler+0x8a8>)
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	6139      	str	r1, [r7, #16]
							tp[variable].pins,
 80010fa:	4b50      	ldr	r3, [pc, #320]	; (800123c <ssi_handler+0x8a8>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4a4f      	ldr	r2, [pc, #316]	; (8001244 <ssi_handler+0x8b0>)
 8001108:	4413      	add	r3, r2
							T[variable].ptype,
 800110a:	4a4c      	ldr	r2, [pc, #304]	; (800123c <ssi_handler+0x8a8>)
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	2168      	movs	r1, #104	; 0x68
 8001110:	fb01 f202 	mul.w	r2, r1, r2
 8001114:	3218      	adds	r2, #24
 8001116:	494a      	ldr	r1, [pc, #296]	; (8001240 <ssi_handler+0x8ac>)
 8001118:	440a      	add	r2, r1
					sprintf(pcInsert,
 800111a:	4948      	ldr	r1, [pc, #288]	; (800123c <ssi_handler+0x8a8>)
 800111c:	6809      	ldr	r1, [r1, #0]
 800111e:	4848      	ldr	r0, [pc, #288]	; (8001240 <ssi_handler+0x8ac>)
 8001120:	2468      	movs	r4, #104	; 0x68
 8001122:	fb04 f101 	mul.w	r1, r4, r1
 8001126:	4401      	add	r1, r0
 8001128:	3104      	adds	r1, #4
 800112a:	6809      	ldr	r1, [r1, #0]
 800112c:	4843      	ldr	r0, [pc, #268]	; (800123c <ssi_handler+0x8a8>)
 800112e:	6800      	ldr	r0, [r0, #0]
 8001130:	4c43      	ldr	r4, [pc, #268]	; (8001240 <ssi_handler+0x8ac>)
 8001132:	2568      	movs	r5, #104	; 0x68
 8001134:	fb05 f000 	mul.w	r0, r5, r0
 8001138:	4420      	add	r0, r4
 800113a:	3008      	adds	r0, #8
 800113c:	6800      	ldr	r0, [r0, #0]
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	4c3e      	ldr	r4, [pc, #248]	; (800123c <ssi_handler+0x8a8>)
 8001142:	6824      	ldr	r4, [r4, #0]
 8001144:	4d3e      	ldr	r5, [pc, #248]	; (8001240 <ssi_handler+0x8ac>)
 8001146:	2668      	movs	r6, #104	; 0x68
 8001148:	fb06 f404 	mul.w	r4, r6, r4
 800114c:	442c      	add	r4, r5
 800114e:	340c      	adds	r4, #12
 8001150:	6820      	ldr	r0, [r4, #0]
 8001152:	60b8      	str	r0, [r7, #8]
 8001154:	4d39      	ldr	r5, [pc, #228]	; (800123c <ssi_handler+0x8a8>)
 8001156:	682d      	ldr	r5, [r5, #0]
 8001158:	4e39      	ldr	r6, [pc, #228]	; (8001240 <ssi_handler+0x8ac>)
 800115a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800115e:	fb0c f505 	mul.w	r5, ip, r5
 8001162:	4435      	add	r5, r6
 8001164:	3510      	adds	r5, #16
 8001166:	682d      	ldr	r5, [r5, #0]
 8001168:	4e34      	ldr	r6, [pc, #208]	; (800123c <ssi_handler+0x8a8>)
 800116a:	6836      	ldr	r6, [r6, #0]
 800116c:	4834      	ldr	r0, [pc, #208]	; (8001240 <ssi_handler+0x8ac>)
 800116e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001172:	fb0c f606 	mul.w	r6, ip, r6
 8001176:	4406      	add	r6, r0
 8001178:	3614      	adds	r6, #20
 800117a:	6836      	ldr	r6, [r6, #0]
							T[variable].info,
 800117c:	482f      	ldr	r0, [pc, #188]	; (800123c <ssi_handler+0x8a8>)
 800117e:	6800      	ldr	r0, [r0, #0]
 8001180:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001184:	fb0c fc00 	mul.w	ip, ip, r0
 8001188:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800118c:	482c      	ldr	r0, [pc, #176]	; (8001240 <ssi_handler+0x8ac>)
 800118e:	4484      	add	ip, r0
 8001190:	f10c 0004 	add.w	r0, ip, #4
 8001194:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 8001196:	4829      	ldr	r0, [pc, #164]	; (800123c <ssi_handler+0x8a8>)
 8001198:	6800      	ldr	r0, [r0, #0]
 800119a:	4c29      	ldr	r4, [pc, #164]	; (8001240 <ssi_handler+0x8ac>)
 800119c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80011a0:	fb0c fc00 	mul.w	ip, ip, r0
 80011a4:	44a4      	add	ip, r4
 80011a6:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 80011aa:	f8dc 0000 	ldr.w	r0, [ip]
 80011ae:	9008      	str	r0, [sp, #32]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	9007      	str	r0, [sp, #28]
 80011b4:	9606      	str	r6, [sp, #24]
 80011b6:	9505      	str	r5, [sp, #20]
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	9004      	str	r0, [sp, #16]
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	9003      	str	r0, [sp, #12]
 80011c0:	9102      	str	r1, [sp, #8]
 80011c2:	9201      	str	r2, [sp, #4]
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4921      	ldr	r1, [pc, #132]	; (8001250 <ssi_handler+0x8bc>)
 80011cc:	6a38      	ldr	r0, [r7, #32]
 80011ce:	f016 ff7f 	bl	80180d0 <siprintf>
				if(jsongo == 3){
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <ssi_handler+0x8a4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d118      	bne.n	800120c <ssi_handler+0x878>
					sprintf(pcInsert,
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <ssi_handler+0x8a8>)
 80011dc:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <ssi_handler+0x8a8>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <ssi_handler+0x8b0>)
 80011ec:	441a      	add	r2, r3
					sprintf(pcInsert,
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <ssi_handler+0x8a8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4813      	ldr	r0, [pc, #76]	; (8001240 <ssi_handler+0x8ac>)
 80011f4:	2468      	movs	r4, #104	; 0x68
 80011f6:	fb04 f303 	mul.w	r3, r4, r3
 80011fa:	4403      	add	r3, r0
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	460a      	mov	r2, r1
 8001204:	4913      	ldr	r1, [pc, #76]	; (8001254 <ssi_handler+0x8c0>)
 8001206:	6a38      	ldr	r0, [r7, #32]
 8001208:	f016 ff62 	bl	80180d0 <siprintf>
			memset(listaction, '\0', sizeof(listaction));
 800120c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001210:	2100      	movs	r1, #0
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <ssi_handler+0x8b4>)
 8001214:	f016 fd98 	bl	8017d48 <memset>
			*next_tag_part = variable;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <ssi_handler+0x8a8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	b29a      	uxth	r2, r3
 800121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001220:	801a      	strh	r2, [r3, #0]
			variable++;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <ssi_handler+0x8a8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <ssi_handler+0x8a8>)
 800122a:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 800122c:	6a38      	ldr	r0, [r7, #32]
 800122e:	f7fe ffd9 	bl	80001e4 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29b      	uxth	r3, r3
 8001236:	e190      	b.n	800155a <ssi_handler+0xbc6>
 8001238:	20000534 	.word	0x20000534
 800123c:	20000530 	.word	0x20000530
 8001240:	20002f68 	.word	0x20002f68
 8001244:	20000000 	.word	0x20000000
 8001248:	20006ffc 	.word	0x20006ffc
 800124c:	08019b94 	.word	0x08019b94
 8001250:	08019c30 	.word	0x08019c30
 8001254:	08019cac 	.word	0x08019cac
			if(idtab == 1){
 8001258:	4b84      	ldr	r3, [pc, #528]	; (800146c <ssi_handler+0xad8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d17c      	bne.n	800135a <ssi_handler+0x9c6>
			sprintf(pcInsert,
 8001260:	4b83      	ldr	r3, [pc, #524]	; (8001470 <ssi_handler+0xadc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a83      	ldr	r2, [pc, #524]	; (8001474 <ssi_handler+0xae0>)
 8001266:	2168      	movs	r1, #104	; 0x68
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <ssi_handler+0xadc>)
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	6139      	str	r1, [r7, #16]
					tp[id].pins,
 8001278:	4b7d      	ldr	r3, [pc, #500]	; (8001470 <ssi_handler+0xadc>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4a7c      	ldr	r2, [pc, #496]	; (8001478 <ssi_handler+0xae4>)
 8001286:	1899      	adds	r1, r3, r2
 8001288:	60f9      	str	r1, [r7, #12]
					T[id].ptype,
 800128a:	4b79      	ldr	r3, [pc, #484]	; (8001470 <ssi_handler+0xadc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2268      	movs	r2, #104	; 0x68
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	3318      	adds	r3, #24
 8001296:	4a77      	ldr	r2, [pc, #476]	; (8001474 <ssi_handler+0xae0>)
 8001298:	189c      	adds	r4, r3, r2
			sprintf(pcInsert,
 800129a:	4b75      	ldr	r3, [pc, #468]	; (8001470 <ssi_handler+0xadc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	; (8001474 <ssi_handler+0xae0>)
 80012a0:	2168      	movs	r1, #104	; 0x68
 80012a2:	fb01 f303 	mul.w	r3, r1, r3
 80012a6:	4413      	add	r3, r2
 80012a8:	332c      	adds	r3, #44	; 0x2c
 80012aa:	681d      	ldr	r5, [r3, #0]
 80012ac:	4b70      	ldr	r3, [pc, #448]	; (8001470 <ssi_handler+0xadc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a70      	ldr	r2, [pc, #448]	; (8001474 <ssi_handler+0xae0>)
 80012b2:	2168      	movs	r1, #104	; 0x68
 80012b4:	fb01 f303 	mul.w	r3, r1, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	3330      	adds	r3, #48	; 0x30
 80012bc:	681e      	ldr	r6, [r3, #0]
 80012be:	4b6c      	ldr	r3, [pc, #432]	; (8001470 <ssi_handler+0xadc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	; (8001474 <ssi_handler+0xae0>)
 80012c4:	2168      	movs	r1, #104	; 0x68
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	3334      	adds	r3, #52	; 0x34
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <ssi_handler+0xadc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a67      	ldr	r2, [pc, #412]	; (8001474 <ssi_handler+0xae0>)
 80012d8:	2168      	movs	r1, #104	; 0x68
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	4413      	add	r3, r2
 80012e0:	3338      	adds	r3, #56	; 0x38
 80012e2:	6819      	ldr	r1, [r3, #0]
 80012e4:	6079      	str	r1, [r7, #4]
 80012e6:	4b62      	ldr	r3, [pc, #392]	; (8001470 <ssi_handler+0xadc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a62      	ldr	r2, [pc, #392]	; (8001474 <ssi_handler+0xae0>)
 80012ec:	2168      	movs	r1, #104	; 0x68
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	333c      	adds	r3, #60	; 0x3c
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <ssi_handler+0xadc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a5d      	ldr	r2, [pc, #372]	; (8001474 <ssi_handler+0xae0>)
 8001300:	2168      	movs	r1, #104	; 0x68
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	3340      	adds	r3, #64	; 0x40
 800130a:	6819      	ldr	r1, [r3, #0]
					T[id].info,
 800130c:	4b58      	ldr	r3, [pc, #352]	; (8001470 <ssi_handler+0xadc>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2268      	movs	r2, #104	; 0x68
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	3340      	adds	r3, #64	; 0x40
 8001318:	4a56      	ldr	r2, [pc, #344]	; (8001474 <ssi_handler+0xae0>)
 800131a:	4413      	add	r3, r2
 800131c:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert,
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <ssi_handler+0xadc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4854      	ldr	r0, [pc, #336]	; (8001474 <ssi_handler+0xae0>)
 8001324:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001328:	fb0c f303 	mul.w	r3, ip, r3
 800132c:	4403      	add	r3, r0
 800132e:	3364      	adds	r3, #100	; 0x64
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	9309      	str	r3, [sp, #36]	; 0x24
 8001334:	9208      	str	r2, [sp, #32]
 8001336:	9107      	str	r1, [sp, #28]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	9306      	str	r3, [sp, #24]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	9105      	str	r1, [sp, #20]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	9204      	str	r2, [sp, #16]
 8001344:	9603      	str	r6, [sp, #12]
 8001346:	9502      	str	r5, [sp, #8]
 8001348:	9401      	str	r4, [sp, #4]
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	9100      	str	r1, [sp, #0]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	494a      	ldr	r1, [pc, #296]	; (800147c <ssi_handler+0xae8>)
 8001354:	6a38      	ldr	r0, [r7, #32]
 8001356:	f016 febb 	bl	80180d0 <siprintf>
			if(idtab == 2){
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <ssi_handler+0xad8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d177      	bne.n	8001452 <ssi_handler+0xabe>
			sprintf(pcInsert,
 8001362:	4b43      	ldr	r3, [pc, #268]	; (8001470 <ssi_handler+0xadc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a43      	ldr	r2, [pc, #268]	; (8001474 <ssi_handler+0xae0>)
 8001368:	2168      	movs	r1, #104	; 0x68
 800136a:	fb01 f303 	mul.w	r3, r1, r3
 800136e:	4413      	add	r3, r2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <ssi_handler+0xadc>)
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	6139      	str	r1, [r7, #16]
					tp[id].pins,
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <ssi_handler+0xadc>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <ssi_handler+0xae4>)
 8001388:	4413      	add	r3, r2
					T[id].ptype,
 800138a:	4a39      	ldr	r2, [pc, #228]	; (8001470 <ssi_handler+0xadc>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	2168      	movs	r1, #104	; 0x68
 8001390:	fb01 f202 	mul.w	r2, r1, r2
 8001394:	3218      	adds	r2, #24
 8001396:	4937      	ldr	r1, [pc, #220]	; (8001474 <ssi_handler+0xae0>)
 8001398:	440a      	add	r2, r1
			sprintf(pcInsert,
 800139a:	4935      	ldr	r1, [pc, #212]	; (8001470 <ssi_handler+0xadc>)
 800139c:	6809      	ldr	r1, [r1, #0]
 800139e:	4835      	ldr	r0, [pc, #212]	; (8001474 <ssi_handler+0xae0>)
 80013a0:	2468      	movs	r4, #104	; 0x68
 80013a2:	fb04 f101 	mul.w	r1, r4, r1
 80013a6:	4401      	add	r1, r0
 80013a8:	3104      	adds	r1, #4
 80013aa:	6809      	ldr	r1, [r1, #0]
 80013ac:	4830      	ldr	r0, [pc, #192]	; (8001470 <ssi_handler+0xadc>)
 80013ae:	6800      	ldr	r0, [r0, #0]
 80013b0:	4c30      	ldr	r4, [pc, #192]	; (8001474 <ssi_handler+0xae0>)
 80013b2:	2568      	movs	r5, #104	; 0x68
 80013b4:	fb05 f000 	mul.w	r0, r5, r0
 80013b8:	4420      	add	r0, r4
 80013ba:	3008      	adds	r0, #8
 80013bc:	6800      	ldr	r0, [r0, #0]
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	4c2b      	ldr	r4, [pc, #172]	; (8001470 <ssi_handler+0xadc>)
 80013c2:	6824      	ldr	r4, [r4, #0]
 80013c4:	4d2b      	ldr	r5, [pc, #172]	; (8001474 <ssi_handler+0xae0>)
 80013c6:	2668      	movs	r6, #104	; 0x68
 80013c8:	fb06 f404 	mul.w	r4, r6, r4
 80013cc:	442c      	add	r4, r5
 80013ce:	340c      	adds	r4, #12
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	60b8      	str	r0, [r7, #8]
 80013d4:	4d26      	ldr	r5, [pc, #152]	; (8001470 <ssi_handler+0xadc>)
 80013d6:	682d      	ldr	r5, [r5, #0]
 80013d8:	4e26      	ldr	r6, [pc, #152]	; (8001474 <ssi_handler+0xae0>)
 80013da:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80013de:	fb0c f505 	mul.w	r5, ip, r5
 80013e2:	4435      	add	r5, r6
 80013e4:	3510      	adds	r5, #16
 80013e6:	682d      	ldr	r5, [r5, #0]
 80013e8:	4e21      	ldr	r6, [pc, #132]	; (8001470 <ssi_handler+0xadc>)
 80013ea:	6836      	ldr	r6, [r6, #0]
 80013ec:	4821      	ldr	r0, [pc, #132]	; (8001474 <ssi_handler+0xae0>)
 80013ee:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80013f2:	fb0c f606 	mul.w	r6, ip, r6
 80013f6:	4406      	add	r6, r0
 80013f8:	3614      	adds	r6, #20
 80013fa:	6836      	ldr	r6, [r6, #0]
					T[id].info,
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <ssi_handler+0xadc>)
 80013fe:	6800      	ldr	r0, [r0, #0]
 8001400:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001404:	fb0c fc00 	mul.w	ip, ip, r0
 8001408:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800140c:	4819      	ldr	r0, [pc, #100]	; (8001474 <ssi_handler+0xae0>)
 800140e:	4484      	add	ip, r0
 8001410:	f10c 0004 	add.w	r0, ip, #4
 8001414:	6078      	str	r0, [r7, #4]
			sprintf(pcInsert,
 8001416:	4816      	ldr	r0, [pc, #88]	; (8001470 <ssi_handler+0xadc>)
 8001418:	6800      	ldr	r0, [r0, #0]
 800141a:	4c16      	ldr	r4, [pc, #88]	; (8001474 <ssi_handler+0xae0>)
 800141c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001420:	fb0c fc00 	mul.w	ip, ip, r0
 8001424:	44a4      	add	ip, r4
 8001426:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 800142a:	f8dc 0000 	ldr.w	r0, [ip]
 800142e:	9008      	str	r0, [sp, #32]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	9007      	str	r0, [sp, #28]
 8001434:	9606      	str	r6, [sp, #24]
 8001436:	9505      	str	r5, [sp, #20]
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	9004      	str	r0, [sp, #16]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	9003      	str	r0, [sp, #12]
 8001440:	9102      	str	r1, [sp, #8]
 8001442:	9201      	str	r2, [sp, #4]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <ssi_handler+0xaec>)
 800144c:	6a38      	ldr	r0, [r7, #32]
 800144e:	f016 fe3f 	bl	80180d0 <siprintf>
			if(idtab == 3){
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <ssi_handler+0xad8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d167      	bne.n	800152a <ssi_handler+0xb96>
				sprintf(jsonrp, "{");
 800145a:	490a      	ldr	r1, [pc, #40]	; (8001484 <ssi_handler+0xaf0>)
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <ssi_handler+0xaf4>)
 800145e:	f016 fe37 	bl	80180d0 <siprintf>
				strcat(bufervar, jsonrp);
 8001462:	4909      	ldr	r1, [pc, #36]	; (8001488 <ssi_handler+0xaf4>)
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <ssi_handler+0xaf8>)
 8001466:	f016 fe53 	bl	8018110 <strcat>
			while(variable <= numpin-1){
 800146a:	e036      	b.n	80014da <ssi_handler+0xb46>
 800146c:	2000053c 	.word	0x2000053c
 8001470:	20000538 	.word	0x20000538
 8001474:	20002f68 	.word	0x20002f68
 8001478:	20000000 	.word	0x20000000
 800147c:	08019cd0 	.word	0x08019cd0
 8001480:	08019d60 	.word	0x08019d60
 8001484:	08019908 	.word	0x08019908
 8001488:	20007190 	.word	0x20007190
 800148c:	200046f8 	.word	0x200046f8
				if(T[variable].topin == 2){
 8001490:	4b34      	ldr	r3, [pc, #208]	; (8001564 <ssi_handler+0xbd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a34      	ldr	r2, [pc, #208]	; (8001568 <ssi_handler+0xbd4>)
 8001496:	2168      	movs	r1, #104	; 0x68
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d115      	bne.n	80014d0 <ssi_handler+0xb3c>
					sprintf(jsonrp, "\"%s\":%d,", tp[variable].pins, variable);
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <ssi_handler+0xbd0>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4a2e      	ldr	r2, [pc, #184]	; (800156c <ssi_handler+0xbd8>)
 80014b2:	441a      	add	r2, r3
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <ssi_handler+0xbd0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	492d      	ldr	r1, [pc, #180]	; (8001570 <ssi_handler+0xbdc>)
 80014ba:	482e      	ldr	r0, [pc, #184]	; (8001574 <ssi_handler+0xbe0>)
 80014bc:	f016 fe08 	bl	80180d0 <siprintf>
				    strcat(bufervar, jsonrp);
 80014c0:	492c      	ldr	r1, [pc, #176]	; (8001574 <ssi_handler+0xbe0>)
 80014c2:	482d      	ldr	r0, [pc, #180]	; (8001578 <ssi_handler+0xbe4>)
 80014c4:	f016 fe24 	bl	8018110 <strcat>
					printf("%s \r\n",  jsonrp);
 80014c8:	492a      	ldr	r1, [pc, #168]	; (8001574 <ssi_handler+0xbe0>)
 80014ca:	482c      	ldr	r0, [pc, #176]	; (800157c <ssi_handler+0xbe8>)
 80014cc:	f016 fcee 	bl	8017eac <iprintf>
				variable++;
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <ssi_handler+0xbd0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <ssi_handler+0xbd0>)
 80014d8:	6013      	str	r3, [r2, #0]
			while(variable <= numpin-1){
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <ssi_handler+0xbd0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b39      	cmp	r3, #57	; 0x39
 80014e0:	ddd6      	ble.n	8001490 <ssi_handler+0xafc>
				bufervar[strlen(bufervar)-1] = '\0';
 80014e2:	4825      	ldr	r0, [pc, #148]	; (8001578 <ssi_handler+0xbe4>)
 80014e4:	f7fe fe7e 	bl	80001e4 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	3b01      	subs	r3, #1
 80014ec:	4a22      	ldr	r2, [pc, #136]	; (8001578 <ssi_handler+0xbe4>)
 80014ee:	2100      	movs	r1, #0
 80014f0:	54d1      	strb	r1, [r2, r3]
				sprintf(jsonrp, "}");
 80014f2:	4923      	ldr	r1, [pc, #140]	; (8001580 <ssi_handler+0xbec>)
 80014f4:	481f      	ldr	r0, [pc, #124]	; (8001574 <ssi_handler+0xbe0>)
 80014f6:	f016 fdeb 	bl	80180d0 <siprintf>
				strcat(bufervar, jsonrp);
 80014fa:	491e      	ldr	r1, [pc, #120]	; (8001574 <ssi_handler+0xbe0>)
 80014fc:	481e      	ldr	r0, [pc, #120]	; (8001578 <ssi_handler+0xbe4>)
 80014fe:	f016 fe07 	bl	8018110 <strcat>
				variable = 0;
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <ssi_handler+0xbd0>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id, tp[id].pins, bufervar);
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <ssi_handler+0xbf0>)
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <ssi_handler+0xbf0>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <ssi_handler+0xbd8>)
 800151a:	4413      	add	r3, r2
 800151c:	4a16      	ldr	r2, [pc, #88]	; (8001578 <ssi_handler+0xbe4>)
 800151e:	9200      	str	r2, [sp, #0]
 8001520:	460a      	mov	r2, r1
 8001522:	4919      	ldr	r1, [pc, #100]	; (8001588 <ssi_handler+0xbf4>)
 8001524:	6a38      	ldr	r0, [r7, #32]
 8001526:	f016 fdd3 	bl	80180d0 <siprintf>
			memset(bufervar, '\0', sizeof(bufervar));
 800152a:	f642 1204 	movw	r2, #10500	; 0x2904
 800152e:	2100      	movs	r1, #0
 8001530:	4811      	ldr	r0, [pc, #68]	; (8001578 <ssi_handler+0xbe4>)
 8001532:	f016 fc09 	bl	8017d48 <memset>
			return strlen(pcInsert);
 8001536:	6a38      	ldr	r0, [r7, #32]
 8001538:	f7fe fe54 	bl	80001e4 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29b      	uxth	r3, r3
 8001540:	e00b      	b.n	800155a <ssi_handler+0xbc6>
			sprintf(pcInsert,"<a href=\"index.shtml\">Home</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"tab3.shtml\">Connection</a> | <a href=\"select.shtml\">Select pin</a>");
 8001542:	4912      	ldr	r1, [pc, #72]	; (800158c <ssi_handler+0xbf8>)
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f016 fdc3 	bl	80180d0 <siprintf>
			return strlen(pcInsert);
 800154a:	6a38      	ldr	r0, [r7, #32]
 800154c:	f7fe fe4a 	bl	80001e4 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	b29b      	uxth	r3, r3
 8001554:	e001      	b.n	800155a <ssi_handler+0xbc6>
			break;
 8001556:	bf00      	nop
	}
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	372c      	adds	r7, #44	; 0x2c
 800155e:	46bd      	mov	sp, r7
 8001560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001562:	bf00      	nop
 8001564:	20000530 	.word	0x20000530
 8001568:	20002f68 	.word	0x20002f68
 800156c:	20000000 	.word	0x20000000
 8001570:	0801990c 	.word	0x0801990c
 8001574:	20007190 	.word	0x20007190
 8001578:	200046f8 	.word	0x200046f8
 800157c:	08019dd8 	.word	0x08019dd8
 8001580:	08019918 	.word	0x08019918
 8001584:	20000538 	.word	0x20000538
 8001588:	08019de0 	.word	0x08019de0
 800158c:	08019e04 	.word	0x08019e04

08001590 <CGIForm_Handler>:
};

const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));

//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI
const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 0) {
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d120      	bne.n	80015e6 <CGIForm_Handler+0x56>
		for (int i = 0; i < iNumParams; i++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e019      	b.n	80015de <CGIForm_Handler+0x4e>
			if (strcmp(pcParam[i], "jsongo") == 0)  // if the fname string is found
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <CGIForm_Handler+0x60>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe fe0a 	bl	80001d0 <strcmp>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10a      	bne.n	80015d8 <CGIForm_Handler+0x48>
					{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f016 fb4d 	bl	8017c6c <atoi>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <CGIForm_Handler+0x64>)
 80015d6:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dbe1      	blt.n	80015aa <CGIForm_Handler+0x1a>
			}
		}
	}
	return "/json.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <CGIForm_Handler+0x68>)
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08019f04 	.word	0x08019f04
 80015f4:	20000534 	.word	0x20000534
 80015f8:	08019ebc 	.word	0x08019ebc

080015fc <CGIForm_Handler1>:

const char* CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
	//printf("GET 1 OK  \n");
	if (iIndex == 1 || iIndex == 2 || iIndex == 3) {
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <CGIForm_Handler1+0x20>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d002      	beq.n	800161c <CGIForm_Handler1+0x20>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d137      	bne.n	800168c <CGIForm_Handler1+0x90>
		for (int i = 0; i < iNumParams; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e030      	b.n	8001684 <CGIForm_Handler1+0x88>
			if (strcmp(pcParam[i], "id") == 0)  // if the fname string is found
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4921      	ldr	r1, [pc, #132]	; (80016b4 <CGIForm_Handler1+0xb8>)
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fdce 	bl	80001d0 <strcmp>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10a      	bne.n	8001650 <CGIForm_Handler1+0x54>
					{
				id = atoi(pcValue[i]);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f016 fb11 	bl	8017c6c <atoi>
 800164a:	4603      	mov	r3, r0
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <CGIForm_Handler1+0xbc>)
 800164e:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the fname string is found
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4918      	ldr	r1, [pc, #96]	; (80016bc <CGIForm_Handler1+0xc0>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fdb7 	bl	80001d0 <strcmp>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10a      	bne.n	800167e <CGIForm_Handler1+0x82>
					{
				idtab = atoi(pcValue[i]);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	4413      	add	r3, r2
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f016 fafa 	bl	8017c6c <atoi>
 8001678:	4603      	mov	r3, r0
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <CGIForm_Handler1+0xc4>)
 800167c:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbca      	blt.n	8001622 <CGIForm_Handler1+0x26>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <CGIForm_Handler1+0x9a>
		return "/form1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <CGIForm_Handler1+0xc8>)
 8001694:	e00a      	b.n	80016ac <CGIForm_Handler1+0xb0>
	} else if (iIndex == 2) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d101      	bne.n	80016a0 <CGIForm_Handler1+0xa4>
		return "/form2.shtml";
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <CGIForm_Handler1+0xcc>)
 800169e:	e005      	b.n	80016ac <CGIForm_Handler1+0xb0>
	} else if (iIndex == 3) {
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d101      	bne.n	80016aa <CGIForm_Handler1+0xae>
			return "/form3.shtml";
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <CGIForm_Handler1+0xd0>)
 80016a8:	e000      	b.n	80016ac <CGIForm_Handler1+0xb0>
	} else {
		return "/404.html";
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <CGIForm_Handler1+0xd4>)
	}
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08019f0c 	.word	0x08019f0c
 80016b8:	20000538 	.word	0x20000538
 80016bc:	08019f10 	.word	0x08019f10
 80016c0:	2000053c 	.word	0x2000053c
 80016c4:	08019ec8 	.word	0x08019ec8
 80016c8:	08019ed8 	.word	0x08019ed8
 80016cc:	08019ee8 	.word	0x08019ee8
 80016d0:	08019f14 	.word	0x08019f14

080016d4 <CGIForm_Handler2>:

const char *CGIForm_Handler2(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
	printf("GET OK 1 \n");
 80016e2:	4826      	ldr	r0, [pc, #152]	; (800177c <CGIForm_Handler2+0xa8>)
 80016e4:	f016 fc68 	bl	8017fb8 <puts>
	if (iIndex == 4)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d140      	bne.n	8001770 <CGIForm_Handler2+0x9c>
	{
		for (int i=0; i<iNumParams; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e039      	b.n	8001768 <CGIForm_Handler2+0x94>
		{
			if (strcmp(pcParam[i], "del") == 0)  // if the fname string is found
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4920      	ldr	r1, [pc, #128]	; (8001780 <CGIForm_Handler2+0xac>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fd65 	bl	80001d0 <strcmp>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d12a      	bne.n	8001762 <CGIForm_Handler2+0x8e>
			{
				id = atoi(pcValue[i]);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	4413      	add	r3, r2
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f016 faa8 	bl	8017c6c <atoi>
 800171c:	4603      	mov	r3, r0
 800171e:	4a19      	ldr	r2, [pc, #100]	; (8001784 <CGIForm_Handler2+0xb0>)
 8001720:	6013      	str	r3, [r2, #0]
				TO[id].idout = 0;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <CGIForm_Handler2+0xb0>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4918      	ldr	r1, [pc, #96]	; (8001788 <CGIForm_Handler2+0xb4>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3304      	adds	r3, #4
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
				TO[id].idin = 0;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <CGIForm_Handler2+0xb0>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4912      	ldr	r1, [pc, #72]	; (8001788 <CGIForm_Handler2+0xb4>)
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
				TO[id].flag = 0;
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <CGIForm_Handler2+0xb0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	490d      	ldr	r1, [pc, #52]	; (8001788 <CGIForm_Handler2+0xb4>)
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	3308      	adds	r3, #8
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
		for (int i=0; i<iNumParams; i++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbc1      	blt.n	80016f4 <CGIForm_Handler2+0x20>
			}
		}
	}
	return "/tab1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <CGIForm_Handler2+0xb8>)
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	08019f20 	.word	0x08019f20
 8001780:	08019f2c 	.word	0x08019f2c
 8001784:	20000538 	.word	0x20000538
 8001788:	20002c14 	.word	0x20002c14
 800178c:	08019ef8 	.word	0x08019ef8

08001790 <httpd_post_begin>:
static void *current_connection;
static void *valid_connection;
int http_post_content_len;
// char *urls;
char urls[30] = { 0 };
err_t httpd_post_begin(void *connection, const char *uri, const char *http_request, uint16_t http_request_len, int content_len, char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	807b      	strh	r3, [r7, #2]
	//LWIP_UNUSED_ARG(connection);
	//LWIP_UNUSED_ARG(http_request);
	//LWIP_UNUSED_ARG(http_request_len);
	//LWIP_UNUSED_ARG(content_len);
	//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 800179e:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <httpd_post_begin+0x44>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6013      	str	r3, [r2, #0]
	//urls = uri;
	strncpy(urls, uri, 15);
 80017a4:	220f      	movs	r2, #15
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <httpd_post_begin+0x48>)
 80017aa:	f016 fce7 	bl	801817c <strncpy>
	//printf("+++++++++uri %s +++++++++++------- \r\n",uri);  // Вывод /select.shtml +
	//printf("httpd_post_begin: Post Content: %s\n",  http_request);
	//printf("%d \r\n",  http_post_content_len);
	if (current_connection != connection) {
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <httpd_post_begin+0x4c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d007      	beq.n	80017c8 <httpd_post_begin+0x38>
		current_connection = connection;
 80017b8:	4a08      	ldr	r2, [pc, #32]	; (80017dc <httpd_post_begin+0x4c>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <httpd_post_begin+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e001      	b.n	80017cc <httpd_post_begin+0x3c>
	}
	return ERR_VAL;
 80017c8:	f06f 0305 	mvn.w	r3, #5
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20002c10 	.word	0x20002c10
 80017d8:	20000548 	.word	0x20000548
 80017dc:	20000540 	.word	0x20000540
 80017e0:	20000544 	.word	0x20000544

080017e4 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	printf("OK POST 2 \r\n");
 80017ee:	4817      	ldr	r0, [pc, #92]	; (800184c <httpd_post_receive_data+0x68>)
 80017f0:	f016 fbe2 	bl	8017fb8 <puts>
	char *data;
	if (current_connection == connection && p != NULL) {
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <httpd_post_receive_data+0x6c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d117      	bne.n	800182e <httpd_post_receive_data+0x4a>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d014      	beq.n	800182e <httpd_post_receive_data+0x4a>
		data = p->payload;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	60fb      	str	r3, [r7, #12]
		printf("DATA %s \r\n", data);
 800180a:	68f9      	ldr	r1, [r7, #12]
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <httpd_post_receive_data+0x70>)
 800180e:	f016 fb4d 	bl	8017eac <iprintf>
		strcat(bufervar, data);
 8001812:	68f9      	ldr	r1, [r7, #12]
 8001814:	4810      	ldr	r0, [pc, #64]	; (8001858 <httpd_post_receive_data+0x74>)
 8001816:	f016 fc7b 	bl	8018110 <strcat>
		pbuf_free(p);
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	f00d f97e 	bl	800eb1c <pbuf_free>
		memset(data, '\0', sizeof(*data));
 8001820:	2201      	movs	r2, #1
 8001822:	2100      	movs	r1, #0
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f016 fa8f 	bl	8017d48 <memset>
		return ERR_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e00a      	b.n	8001844 <httpd_post_receive_data+0x60>
	}
	if (p != NULL) {
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <httpd_post_receive_data+0x5c>
		printf("END \r\n");
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <httpd_post_receive_data+0x78>)
 8001836:	f016 fbbf 	bl	8017fb8 <puts>
		pbuf_free(p);
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f00d f96e 	bl	800eb1c <pbuf_free>
	}
	return ERR_VAL;
 8001840:	f06f 0305 	mvn.w	r3, #5
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	08019f30 	.word	0x08019f30
 8001850:	20000540 	.word	0x20000540
 8001854:	08019f3c 	.word	0x08019f3c
 8001858:	200046f8 	.word	0x200046f8
 800185c:	08019f48 	.word	0x08019f48

08001860 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 8001860:	b580      	push	{r7, lr}
 8001862:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8001866:	af00      	add	r7, sp, #0
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	6018      	str	r0, [r3, #0]
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	6019      	str	r1, [r3, #0]
 8001874:	1dbb      	adds	r3, r7, #6
 8001876:	801a      	strh	r2, [r3, #0]
	printf("OK POST 3 \r\n");
 8001878:	48cd      	ldr	r0, [pc, #820]	; (8001bb0 <httpd_post_finished+0x350>)
 800187a:	f016 fb9d 	bl	8017fb8 <puts>

	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	int id;
	int variable1 = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	//char urlline[http_post_content_len];
	char urlline[1000];
	char name0[50];
	char nametoken[50];

	memset(name0, '\0', sizeof(name0));
 800188a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800188e:	2232      	movs	r2, #50	; 0x32
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f016 fa58 	bl	8017d48 <memset>
	//memset(urlline, '\0', sizeof(urlline));
	strncpy(urlline, bufervar, http_post_content_len);
 8001898:	4bc6      	ldr	r3, [pc, #792]	; (8001bb4 <httpd_post_finished+0x354>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018a2:	49c5      	ldr	r1, [pc, #788]	; (8001bb8 <httpd_post_finished+0x358>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f016 fc69 	bl	801817c <strncpy>

	printf("%s \r\n", urlline);
 80018aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018ae:	4619      	mov	r1, r3
 80018b0:	48c2      	ldr	r0, [pc, #776]	; (8001bbc <httpd_post_finished+0x35c>)
 80018b2:	f016 fafb 	bl	8017eac <iprintf>
	printf("COUNT %d \r\n", http_post_content_len);
 80018b6:	4bbf      	ldr	r3, [pc, #764]	; (8001bb4 <httpd_post_finished+0x354>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4619      	mov	r1, r3
 80018bc:	48c0      	ldr	r0, [pc, #768]	; (8001bc0 <httpd_post_finished+0x360>)
 80018be:	f016 faf5 	bl	8017eac <iprintf>
	char *rest = urlline;
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018ca:	601a      	str	r2, [r3, #0]
	while ((token = strtok_r(rest, "&", &rest))) {
 80018cc:	e26d      	b.n	8001daa <httpd_post_finished+0x54a>
		//printf("%s\n", token);
		char *rest1 = token;
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80018d6:	601a      	str	r2, [r3, #0]
		strcat(name0, token); // решение с пустой строкой
 80018d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018dc:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80018e0:	4618      	mov	r0, r3
 80018e2:	f016 fc15 	bl	8018110 <strcat>
		y = 0;
 80018e6:	4bb7      	ldr	r3, [pc, #732]	; (8001bc4 <httpd_post_finished+0x364>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 80018ec:	e219      	b.n	8001d22 <httpd_post_finished+0x4c2>
			z = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			if (y == 0) {
 80018f4:	4bb3      	ldr	r3, [pc, #716]	; (8001bc4 <httpd_post_finished+0x364>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d12b      	bne.n	8001954 <httpd_post_finished+0xf4>
				//printf("NAME %s\n", token1);
				// получение id
				char *rest2 = token1;
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8001904:	601a      	str	r2, [r3, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8001906:	e016      	b.n	8001936 <httpd_post_finished+0xd6>
					if (z == 0) {
 8001908:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800190c:	2b00      	cmp	r3, #0
 800190e:	d103      	bne.n	8001918 <httpd_post_finished+0xb8>
						name1 = token2;
 8001910:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8001914:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
					}
					if (z == 1) {
 8001918:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800191c:	2b01      	cmp	r3, #1
 800191e:	d105      	bne.n	800192c <httpd_post_finished+0xcc>
						id = atoi(token2);
 8001920:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8001924:	f016 f9a2 	bl	8017c6c <atoi>
 8001928:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
						//printf("ID %d\n", id);
					}
					z++;
 800192c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001930:	3301      	adds	r3, #1
 8001932:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f107 0214 	add.w	r2, r7, #20
 8001940:	49a1      	ldr	r1, [pc, #644]	; (8001bc8 <httpd_post_finished+0x368>)
 8001942:	4618      	mov	r0, r3
 8001944:	f016 fc6c 	bl	8018220 <strtok_r>
 8001948:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
 800194c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1d9      	bne.n	8001908 <httpd_post_finished+0xa8>
				}
			}
			if(y == 1){
 8001954:	4b9b      	ldr	r3, [pc, #620]	; (8001bc4 <httpd_post_finished+0x364>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	f040 81dd 	bne.w	8001d18 <httpd_post_finished+0x4b8>
				// значение переменной
				//printf("VAL %s\n", token1);

				// пишем в структуру
				if (strcmp(name1, "ptype") == 0) {
 800195e:	499b      	ldr	r1, [pc, #620]	; (8001bcc <httpd_post_finished+0x36c>)
 8001960:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001964:	f7fe fc34 	bl	80001d0 <strcmp>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10d      	bne.n	800198a <httpd_post_finished+0x12a>
					strcpy(T[id].ptype, token1);
 800196e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001972:	2268      	movs	r2, #104	; 0x68
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	3318      	adds	r3, #24
 800197a:	4a95      	ldr	r2, [pc, #596]	; (8001bd0 <httpd_post_finished+0x370>)
 800197c:	4413      	add	r3, r2
 800197e:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8001982:	4618      	mov	r0, r3
 8001984:	f016 fbe0 	bl	8018148 <strcpy>
 8001988:	e1c6      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "topin") == 0) {
 800198a:	4992      	ldr	r1, [pc, #584]	; (8001bd4 <httpd_post_finished+0x374>)
 800198c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001990:	f7fe fc1e 	bl	80001d0 <strcmp>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <httpd_post_finished+0x156>
					T[id].topin = atoi(token1);
 800199a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800199e:	f016 f965 	bl	8017c6c <atoi>
 80019a2:	4602      	mov	r2, r0
 80019a4:	498a      	ldr	r1, [pc, #552]	; (8001bd0 <httpd_post_finished+0x370>)
 80019a6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80019aa:	2068      	movs	r0, #104	; 0x68
 80019ac:	fb00 f303 	mul.w	r3, r0, r3
 80019b0:	440b      	add	r3, r1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e1b0      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "binter") == 0) {
 80019b6:	4988      	ldr	r1, [pc, #544]	; (8001bd8 <httpd_post_finished+0x378>)
 80019b8:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80019bc:	f7fe fc08 	bl	80001d0 <strcmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10e      	bne.n	80019e4 <httpd_post_finished+0x184>
					T[id].binter = atoi(token1);
 80019c6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80019ca:	f016 f94f 	bl	8017c6c <atoi>
 80019ce:	4602      	mov	r2, r0
 80019d0:	497f      	ldr	r1, [pc, #508]	; (8001bd0 <httpd_post_finished+0x370>)
 80019d2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80019d6:	2068      	movs	r0, #104	; 0x68
 80019d8:	fb00 f303 	mul.w	r3, r0, r3
 80019dc:	440b      	add	r3, r1
 80019de:	332c      	adds	r3, #44	; 0x2c
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e199      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "hinter") == 0) {
 80019e4:	497d      	ldr	r1, [pc, #500]	; (8001bdc <httpd_post_finished+0x37c>)
 80019e6:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80019ea:	f7fe fbf1 	bl	80001d0 <strcmp>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10e      	bne.n	8001a12 <httpd_post_finished+0x1b2>
					T[id].hinter = atoi(token1);
 80019f4:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80019f8:	f016 f938 	bl	8017c6c <atoi>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4974      	ldr	r1, [pc, #464]	; (8001bd0 <httpd_post_finished+0x370>)
 8001a00:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001a04:	2068      	movs	r0, #104	; 0x68
 8001a06:	fb00 f303 	mul.w	r3, r0, r3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3330      	adds	r3, #48	; 0x30
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e182      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "repeat") == 0) {
 8001a12:	4973      	ldr	r1, [pc, #460]	; (8001be0 <httpd_post_finished+0x380>)
 8001a14:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001a18:	f7fe fbda 	bl	80001d0 <strcmp>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10e      	bne.n	8001a40 <httpd_post_finished+0x1e0>
					T[id].repeat = atoi(token1);
 8001a22:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001a26:	f016 f921 	bl	8017c6c <atoi>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4968      	ldr	r1, [pc, #416]	; (8001bd0 <httpd_post_finished+0x370>)
 8001a2e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001a32:	2068      	movs	r0, #104	; 0x68
 8001a34:	fb00 f303 	mul.w	r3, r0, r3
 8001a38:	440b      	add	r3, r1
 8001a3a:	3334      	adds	r3, #52	; 0x34
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e16b      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "rinter") == 0) {
 8001a40:	4968      	ldr	r1, [pc, #416]	; (8001be4 <httpd_post_finished+0x384>)
 8001a42:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001a46:	f7fe fbc3 	bl	80001d0 <strcmp>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10e      	bne.n	8001a6e <httpd_post_finished+0x20e>
					T[id].rinter = atoi(token1);
 8001a50:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001a54:	f016 f90a 	bl	8017c6c <atoi>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	495d      	ldr	r1, [pc, #372]	; (8001bd0 <httpd_post_finished+0x370>)
 8001a5c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001a60:	2068      	movs	r0, #104	; 0x68
 8001a62:	fb00 f303 	mul.w	r3, r0, r3
 8001a66:	440b      	add	r3, r1
 8001a68:	3338      	adds	r3, #56	; 0x38
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e154      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "dcinter") == 0) {
 8001a6e:	495e      	ldr	r1, [pc, #376]	; (8001be8 <httpd_post_finished+0x388>)
 8001a70:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001a74:	f7fe fbac 	bl	80001d0 <strcmp>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10e      	bne.n	8001a9c <httpd_post_finished+0x23c>
					T[id].dcinter = atoi(token1);
 8001a7e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001a82:	f016 f8f3 	bl	8017c6c <atoi>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4951      	ldr	r1, [pc, #324]	; (8001bd0 <httpd_post_finished+0x370>)
 8001a8a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001a8e:	2068      	movs	r0, #104	; 0x68
 8001a90:	fb00 f303 	mul.w	r3, r0, r3
 8001a94:	440b      	add	r3, r1
 8001a96:	333c      	adds	r3, #60	; 0x3c
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e13d      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "pclick") == 0) {
 8001a9c:	4953      	ldr	r1, [pc, #332]	; (8001bec <httpd_post_finished+0x38c>)
 8001a9e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001aa2:	f7fe fb95 	bl	80001d0 <strcmp>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10e      	bne.n	8001aca <httpd_post_finished+0x26a>
					T[id].pclick = atoi(token1);
 8001aac:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001ab0:	f016 f8dc 	bl	8017c6c <atoi>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4946      	ldr	r1, [pc, #280]	; (8001bd0 <httpd_post_finished+0x370>)
 8001ab8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001abc:	2068      	movs	r0, #104	; 0x68
 8001abe:	fb00 f303 	mul.w	r3, r0, r3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3340      	adds	r3, #64	; 0x40
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e126      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "info") == 0) {
 8001aca:	4949      	ldr	r1, [pc, #292]	; (8001bf0 <httpd_post_finished+0x390>)
 8001acc:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001ad0:	f7fe fb7e 	bl	80001d0 <strcmp>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10e      	bne.n	8001af8 <httpd_post_finished+0x298>
					//memset(T[id].info, '\0', sizeof(T[id].info));
					strcpy(T[id].info, token1);
 8001ada:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001ade:	2268      	movs	r2, #104	; 0x68
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	3340      	adds	r3, #64	; 0x40
 8001ae6:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <httpd_post_finished+0x370>)
 8001ae8:	4413      	add	r3, r2
 8001aea:	3304      	adds	r3, #4
 8001aec:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8001af0:	4618      	mov	r0, r3
 8001af2:	f016 fb29 	bl	8018148 <strcpy>
 8001af6:	e10f      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "onoff") == 0) {
 8001af8:	493e      	ldr	r1, [pc, #248]	; (8001bf4 <httpd_post_finished+0x394>)
 8001afa:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001afe:	f7fe fb67 	bl	80001d0 <strcmp>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10e      	bne.n	8001b26 <httpd_post_finished+0x2c6>
					T[id].onoff = atoi(token1);
 8001b08:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001b0c:	f016 f8ae 	bl	8017c6c <atoi>
 8001b10:	4602      	mov	r2, r0
 8001b12:	492f      	ldr	r1, [pc, #188]	; (8001bd0 <httpd_post_finished+0x370>)
 8001b14:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001b18:	2068      	movs	r0, #104	; 0x68
 8001b1a:	fb00 f303 	mul.w	r3, r0, r3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3364      	adds	r3, #100	; 0x64
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e0f8      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "pwm") == 0) {
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <httpd_post_finished+0x398>)
 8001b28:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001b2c:	f7fe fb50 	bl	80001d0 <strcmp>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10e      	bne.n	8001b54 <httpd_post_finished+0x2f4>
					T[id].pwm = atoi(token1);
 8001b36:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001b3a:	f016 f897 	bl	8017c6c <atoi>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4923      	ldr	r1, [pc, #140]	; (8001bd0 <httpd_post_finished+0x370>)
 8001b42:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001b46:	2068      	movs	r0, #104	; 0x68
 8001b48:	fb00 f303 	mul.w	r3, r0, r3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3304      	adds	r3, #4
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e0e1      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "on") == 0) {
 8001b54:	4929      	ldr	r1, [pc, #164]	; (8001bfc <httpd_post_finished+0x39c>)
 8001b56:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001b5a:	f7fe fb39 	bl	80001d0 <strcmp>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10e      	bne.n	8001b82 <httpd_post_finished+0x322>
					T[id].on = atoi(token1);
 8001b64:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001b68:	f016 f880 	bl	8017c6c <atoi>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <httpd_post_finished+0x370>)
 8001b70:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001b74:	2068      	movs	r0, #104	; 0x68
 8001b76:	fb00 f303 	mul.w	r3, r0, r3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e0ca      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "istate") == 0) {
 8001b82:	491f      	ldr	r1, [pc, #124]	; (8001c00 <httpd_post_finished+0x3a0>)
 8001b84:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001b88:	f7fe fb22 	bl	80001d0 <strcmp>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d138      	bne.n	8001c04 <httpd_post_finished+0x3a4>
					T[id].istate = atoi(token1);
 8001b92:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001b96:	f016 f869 	bl	8017c6c <atoi>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <httpd_post_finished+0x370>)
 8001b9e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001ba2:	2068      	movs	r0, #104	; 0x68
 8001ba4:	fb00 f303 	mul.w	r3, r0, r3
 8001ba8:	440b      	add	r3, r1
 8001baa:	330c      	adds	r3, #12
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e0b3      	b.n	8001d18 <httpd_post_finished+0x4b8>
 8001bb0:	08019f50 	.word	0x08019f50
 8001bb4:	20002c10 	.word	0x20002c10
 8001bb8:	200046f8 	.word	0x200046f8
 8001bbc:	08019dd8 	.word	0x08019dd8
 8001bc0:	08019f5c 	.word	0x08019f5c
 8001bc4:	2000718c 	.word	0x2000718c
 8001bc8:	08019f68 	.word	0x08019f68
 8001bcc:	08019f6c 	.word	0x08019f6c
 8001bd0:	20002f68 	.word	0x20002f68
 8001bd4:	08019f74 	.word	0x08019f74
 8001bd8:	08019f7c 	.word	0x08019f7c
 8001bdc:	08019f84 	.word	0x08019f84
 8001be0:	08019f8c 	.word	0x08019f8c
 8001be4:	08019f94 	.word	0x08019f94
 8001be8:	08019f9c 	.word	0x08019f9c
 8001bec:	08019fa4 	.word	0x08019fa4
 8001bf0:	08019fac 	.word	0x08019fac
 8001bf4:	08019fb4 	.word	0x08019fb4
 8001bf8:	08019fbc 	.word	0x08019fbc
 8001bfc:	08019fc0 	.word	0x08019fc0
 8001c00:	08019fc4 	.word	0x08019fc4
				} else if (strcmp(name1, "dvalue") == 0) {
 8001c04:	498e      	ldr	r1, [pc, #568]	; (8001e40 <httpd_post_finished+0x5e0>)
 8001c06:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001c0a:	f7fe fae1 	bl	80001d0 <strcmp>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10e      	bne.n	8001c32 <httpd_post_finished+0x3d2>
					T[id].dvalue = atoi(token1);
 8001c14:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001c18:	f016 f828 	bl	8017c6c <atoi>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4989      	ldr	r1, [pc, #548]	; (8001e44 <httpd_post_finished+0x5e4>)
 8001c20:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001c24:	2068      	movs	r0, #104	; 0x68
 8001c26:	fb00 f303 	mul.w	r3, r0, r3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3310      	adds	r3, #16
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e072      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "ponr") == 0) {
 8001c32:	4985      	ldr	r1, [pc, #532]	; (8001e48 <httpd_post_finished+0x5e8>)
 8001c34:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001c38:	f7fe faca 	bl	80001d0 <strcmp>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10e      	bne.n	8001c60 <httpd_post_finished+0x400>
					T[id].ponr = atoi(token1);
 8001c42:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001c46:	f016 f811 	bl	8017c6c <atoi>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	497d      	ldr	r1, [pc, #500]	; (8001e44 <httpd_post_finished+0x5e4>)
 8001c4e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001c52:	2068      	movs	r0, #104	; 0x68
 8001c54:	fb00 f303 	mul.w	r3, r0, r3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3314      	adds	r3, #20
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e05b      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "idin") == 0) {
 8001c60:	497a      	ldr	r1, [pc, #488]	; (8001e4c <httpd_post_finished+0x5ec>)
 8001c62:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001c66:	f7fe fab3 	bl	80001d0 <strcmp>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d139      	bne.n	8001ce4 <httpd_post_finished+0x484>
					//printf("idin------- %d \r\n", atoi(token1));
					while(variable1 <= numpintopin-1){
 8001c70:	e030      	b.n	8001cd4 <httpd_post_finished+0x474>
						if(TO[variable1].flag == 0){
 8001c72:	4977      	ldr	r1, [pc, #476]	; (8001e50 <httpd_post_finished+0x5f0>)
 8001c74:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	3308      	adds	r3, #8
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11f      	bne.n	8001cca <httpd_post_finished+0x46a>
							TO[variable1].idin = atoi(token1);
 8001c8a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001c8e:	f015 ffed 	bl	8017c6c <atoi>
 8001c92:	4601      	mov	r1, r0
 8001c94:	486e      	ldr	r0, [pc, #440]	; (8001e50 <httpd_post_finished+0x5f0>)
 8001c96:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4403      	add	r3, r0
 8001ca4:	6019      	str	r1, [r3, #0]
							variable2 = variable1;
 8001ca6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001caa:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
							TO[variable1].flag = 1;
 8001cae:	4968      	ldr	r1, [pc, #416]	; (8001e50 <httpd_post_finished+0x5f0>)
 8001cb0:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
							variable1 = numpintopin;
 8001cc4:	2346      	movs	r3, #70	; 0x46
 8001cc6:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
						}
						variable1++;
 8001cca:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
					while(variable1 <= numpintopin-1){
 8001cd4:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001cd8:	2b45      	cmp	r3, #69	; 0x45
 8001cda:	ddca      	ble.n	8001c72 <httpd_post_finished+0x412>
					}
					variable1 = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8001ce2:	e019      	b.n	8001d18 <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "idout") == 0) {
 8001ce4:	495b      	ldr	r1, [pc, #364]	; (8001e54 <httpd_post_finished+0x5f4>)
 8001ce6:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001cea:	f7fe fa71 	bl	80001d0 <strcmp>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d111      	bne.n	8001d18 <httpd_post_finished+0x4b8>
					TO[variable2].idout = atoi(token1);
 8001cf4:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001cf8:	f015 ffb8 	bl	8017c6c <atoi>
 8001cfc:	4601      	mov	r1, r0
 8001cfe:	4854      	ldr	r0, [pc, #336]	; (8001e50 <httpd_post_finished+0x5f0>)
 8001d00:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4403      	add	r3, r0
 8001d0e:	3304      	adds	r3, #4
 8001d10:	6019      	str	r1, [r3, #0]
					variable2 = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
//					}
//					variable1 = 0;
					//////////////
				}
			}
			y++;
 8001d18:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <httpd_post_finished+0x5f8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a4e      	ldr	r2, [pc, #312]	; (8001e58 <httpd_post_finished+0x5f8>)
 8001d20:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f107 0218 	add.w	r2, r7, #24
 8001d2c:	494b      	ldr	r1, [pc, #300]	; (8001e5c <httpd_post_finished+0x5fc>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f016 fa76 	bl	8018220 <strtok_r>
 8001d34:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 8001d38:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f add6 	bne.w	80018ee <httpd_post_finished+0x8e>
		}
		// решение с пустой строкой
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то, его заполняем "null".
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8001d4a:	4945      	ldr	r1, [pc, #276]	; (8001e60 <httpd_post_finished+0x600>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f016 f9bf 	bl	80180d0 <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 8001d52:	f107 0220 	add.w	r2, r7, #32
 8001d56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fa37 	bl	80001d0 <strcmp>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10d      	bne.n	8001d84 <httpd_post_finished+0x524>
			strcpy(T[id].info, "null");
 8001d68:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001d6c:	2268      	movs	r2, #104	; 0x68
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	3340      	adds	r3, #64	; 0x40
 8001d74:	4a33      	ldr	r2, [pc, #204]	; (8001e44 <httpd_post_finished+0x5e4>)
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <httpd_post_finished+0x604>)
 8001d7c:	6810      	ldr	r0, [r2, #0]
 8001d7e:	6018      	str	r0, [r3, #0]
 8001d80:	7912      	ldrb	r2, [r2, #4]
 8001d82:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		memset(name0, '\0', sizeof(name0));
 8001d84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d88:	2232      	movs	r2, #50	; 0x32
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f015 ffdb 	bl	8017d48 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2232      	movs	r2, #50	; 0x32
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f015 ffd4 	bl	8017d48 <memset>
		z++;
 8001da0:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001da4:	3301      	adds	r3, #1
 8001da6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	while ((token = strtok_r(rest, "&", &rest))) {
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f107 021c 	add.w	r2, r7, #28
 8001db4:	492c      	ldr	r1, [pc, #176]	; (8001e68 <httpd_post_finished+0x608>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f016 fa32 	bl	8018220 <strtok_r>
 8001dbc:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 8001dc0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f47f ad82 	bne.w	80018ce <httpd_post_finished+0x6e>
	}

	memset(urlline, '\0', sizeof(urlline));
 8001dca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f015 ffb7 	bl	8017d48 <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 8001dda:	f642 1204 	movw	r2, #10500	; 0x2904
 8001dde:	2100      	movs	r1, #0
 8001de0:	4822      	ldr	r0, [pc, #136]	; (8001e6c <httpd_post_finished+0x60c>)
 8001de2:	f015 ffb1 	bl	8017d48 <memset>
	//memset(json, '\0', sizeof(json));
	//printf("----------- %s ------- \r\n", urls);
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
 8001de6:	1dbb      	adds	r3, r7, #6
 8001de8:	8819      	ldrh	r1, [r3, #0]
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <httpd_post_finished+0x610>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f016 f939 	bl	8018068 <sniprintf>
	if (current_connection == connection) {
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <httpd_post_finished+0x614>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f107 020c 	add.w	r2, r7, #12
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d114      	bne.n	8001e2e <httpd_post_finished+0x5ce>
		if (valid_connection == connection) {
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <httpd_post_finished+0x618>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f107 020c 	add.w	r2, r7, #12
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d107      	bne.n	8001e22 <httpd_post_finished+0x5c2>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
 8001e12:	1dbb      	adds	r3, r7, #6
 8001e14:	8819      	ldrh	r1, [r3, #0]
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <httpd_post_finished+0x610>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f016 f923 	bl	8018068 <sniprintf>
		}
		current_connection = NULL;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <httpd_post_finished+0x614>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <httpd_post_finished+0x618>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	08019fcc 	.word	0x08019fcc
 8001e44:	20002f68 	.word	0x20002f68
 8001e48:	08019fd4 	.word	0x08019fd4
 8001e4c:	08019fdc 	.word	0x08019fdc
 8001e50:	20002c14 	.word	0x20002c14
 8001e54:	08019fe4 	.word	0x08019fe4
 8001e58:	2000718c 	.word	0x2000718c
 8001e5c:	08019fec 	.word	0x08019fec
 8001e60:	08019ff0 	.word	0x08019ff0
 8001e64:	0801a000 	.word	0x0801a000
 8001e68:	0801a008 	.word	0x0801a008
 8001e6c:	200046f8 	.word	0x200046f8
 8001e70:	20000548 	.word	0x20000548
 8001e74:	20000540 	.word	0x20000540
 8001e78:	20000544 	.word	0x20000544

08001e7c <http_server_init>:

//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	httpd_init();
 8001e80:	f00b fa28 	bl	800d2d4 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <http_server_init+0x24>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <http_server_init+0x28>)
 8001e8e:	f00b fa41 	bl	800d314 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8001e92:	2305      	movs	r3, #5
 8001e94:	4619      	mov	r1, r3
 8001e96:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <http_server_init+0x2c>)
 8001e98:	f00b fa7e 	bl	800d398 <http_set_cgi_handlers>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000494 	.word	0x20000494
 8001ea4:	08000995 	.word	0x08000995
 8001ea8:	0801d230 	.word	0x0801d230

08001eac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001eb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001eb8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ec4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ec8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001ecc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ed4:	e000      	b.n	8001ed8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001ed6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ed8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f9      	beq.n	8001ed6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ee2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <_write>:
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	2332      	movs	r3, #50	; 0x32
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <_write+0x48>)
 8001f12:	f004 ff2c 	bl	8006d6e <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ffc1 	bl	8001eac <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x20>
	}
	return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200073d0 	.word	0x200073d0

08001f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4c:	f000 fc98 	bl	8002880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f50:	f000 f848 	bl	8001fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f54:	f000 f922 	bl	800219c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001f58:	f000 f8ce 	bl	80020f8 <MX_USART6_UART_Init>
  MX_DMA_Init();
 8001f5c:	f000 f8f6 	bl	800214c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001f60:	f000 f8aa 	bl	80020b8 <MX_SDIO_SD_Init>
  MX_LWIP_Init();
 8001f64:	f006 f986 	bl	8008274 <MX_LWIP_Init>
  MX_FATFS_Init();
 8001f68:	f005 ff3e 	bl	8007de8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8001f6c:	f7ff ff86 	bl	8001e7c <http_server_init>

  /*---------------------------- For SDIO ---------------------------------*/
   Mount_SD("/");
 8001f70:	4813      	ldr	r0, [pc, #76]	; (8001fc0 <main+0x78>)
 8001f72:	f7fe fb27 	bl	80005c4 <Mount_SD>
   //Format_SD();
   Create_Dir("Buttons");// В названии нельзя испоьзовать символы "_"!
 8001f76:	4813      	ldr	r0, [pc, #76]	; (8001fc4 <main+0x7c>)
 8001f78:	f7fe fccc 	bl	8000914 <Create_Dir>
   Create_File("Buttons/B_config.txt");
 8001f7c:	4812      	ldr	r0, [pc, #72]	; (8001fc8 <main+0x80>)
 8001f7e:	f7fe fb67 	bl	8000650 <Create_File>
   sprintf(buffer, "Buttons hello!");
 8001f82:	4912      	ldr	r1, [pc, #72]	; (8001fcc <main+0x84>)
 8001f84:	4812      	ldr	r0, [pc, #72]	; (8001fd0 <main+0x88>)
 8001f86:	f016 f8a3 	bl	80180d0 <siprintf>
   Update_File("Buttons/B_config.txt",buffer);
 8001f8a:	4911      	ldr	r1, [pc, #68]	; (8001fd0 <main+0x88>)
 8001f8c:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <main+0x80>)
 8001f8e:	f7fe fbfb 	bl	8000788 <Update_File>
   Create_Dir("Relays"); // В названии нельзя испоьзовать символы "_"!
 8001f92:	4810      	ldr	r0, [pc, #64]	; (8001fd4 <main+0x8c>)
 8001f94:	f7fe fcbe 	bl	8000914 <Create_Dir>
   Create_File("Relays/R_config.txt");
 8001f98:	480f      	ldr	r0, [pc, #60]	; (8001fd8 <main+0x90>)
 8001f9a:	f7fe fb59 	bl	8000650 <Create_File>
   sprintf(buffer, "Relays hello!");
 8001f9e:	490f      	ldr	r1, [pc, #60]	; (8001fdc <main+0x94>)
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <main+0x88>)
 8001fa2:	f016 f895 	bl	80180d0 <siprintf>
   Update_File("Relays/R_config.txt",buffer);
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <main+0x88>)
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <main+0x90>)
 8001faa:	f7fe fbed 	bl	8000788 <Update_File>
//   Read_File ("Relays/Rconfig.txt");

//   char buff[256];
//   strcpy(buff, "/");
//   Scan_files(buff);
   Unmount_SD("/");
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <main+0x78>)
 8001fb0:	f7fe fb2c 	bl	800060c <Unmount_SD>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);/* Read a received packet from the Ethernet buffers and send it
 8001fb4:	480a      	ldr	r0, [pc, #40]	; (8001fe0 <main+0x98>)
 8001fb6:	f006 fd35 	bl	8008a24 <ethernetif_input>
       to the lwIP for handling */
	  sys_check_timeouts();/* Handle timeouts */
 8001fba:	f013 f99b 	bl	80152f4 <sys_check_timeouts>
	  ethernetif_input(&gnetif);/* Read a received packet from the Ethernet buffers and send it
 8001fbe:	e7f9      	b.n	8001fb4 <main+0x6c>
 8001fc0:	0801a00c 	.word	0x0801a00c
 8001fc4:	0801a010 	.word	0x0801a010
 8001fc8:	0801a018 	.word	0x0801a018
 8001fcc:	0801a030 	.word	0x0801a030
 8001fd0:	20007288 	.word	0x20007288
 8001fd4:	0801a040 	.word	0x0801a040
 8001fd8:	0801a048 	.word	0x0801a048
 8001fdc:	0801a05c 	.word	0x0801a05c
 8001fe0:	20007254 	.word	0x20007254

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b094      	sub	sp, #80	; 0x50
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	2230      	movs	r2, #48	; 0x30
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f015 fea8 	bl	8017d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <SystemClock_Config+0xcc>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <SystemClock_Config+0xcc>)
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <SystemClock_Config+0xcc>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <SystemClock_Config+0xd0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <SystemClock_Config+0xd0>)
 800202e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <SystemClock_Config+0xd0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002040:	2301      	movs	r3, #1
 8002042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204a:	2302      	movs	r3, #2
 800204c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800204e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002054:	2304      	movs	r3, #4
 8002056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002058:	23a8      	movs	r3, #168	; 0xa8
 800205a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800205c:	2302      	movs	r3, #2
 800205e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002060:	2307      	movs	r3, #7
 8002062:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002064:	f107 0320 	add.w	r3, r7, #32
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fbb1 	bl	80047d0 <HAL_RCC_OscConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002074:	f000 f8f6 	bl	8002264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002078:	230f      	movs	r3, #15
 800207a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002084:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800208a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2105      	movs	r1, #5
 8002096:	4618      	mov	r0, r3
 8002098:	f002 fe12 	bl	8004cc0 <HAL_RCC_ClockConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020a2:	f000 f8df 	bl	8002264 <Error_Handler>
  }
}
 80020a6:	bf00      	nop
 80020a8:	3750      	adds	r7, #80	; 0x50
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40007000 	.word	0x40007000

080020b8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_SDIO_SD_Init+0x38>)
 80020be:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <MX_SDIO_SD_Init+0x3c>)
 80020c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_SDIO_SD_Init+0x38>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_SDIO_SD_Init+0x38>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_SDIO_SD_Init+0x38>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_SDIO_SD_Init+0x38>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <MX_SDIO_SD_Init+0x38>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <MX_SDIO_SD_Init+0x38>)
 80020e2:	2205      	movs	r2, #5
 80020e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	2000734c 	.word	0x2000734c
 80020f4:	40012c00 	.word	0x40012c00

080020f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <MX_USART6_UART_Init+0x50>)
 8002100:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 8002104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002108:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_USART6_UART_Init+0x4c>)
 8002130:	f004 fdd0 	bl	8006cd4 <HAL_UART_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800213a:	f000 f893 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200073d0 	.word	0x200073d0
 8002148:	40011400 	.word	0x40011400

0800214c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_DMA_Init+0x4c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <MX_DMA_Init+0x4c>)
 800215c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <MX_DMA_Init+0x4c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	203b      	movs	r0, #59	; 0x3b
 8002174:	f000 fca2 	bl	8002abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002178:	203b      	movs	r0, #59	; 0x3b
 800217a:	f000 fcbb 	bl	8002af4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2045      	movs	r0, #69	; 0x45
 8002184:	f000 fc9a 	bl	8002abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002188:	2045      	movs	r0, #69	; 0x45
 800218a:	f000 fcb3 	bl	8002af4 <HAL_NVIC_EnableIRQ>

}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <MX_GPIO_Init+0xa0>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a24      	ldr	r2, [pc, #144]	; (800223c <MX_GPIO_Init+0xa0>)
 80021ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <MX_GPIO_Init+0xa0>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <MX_GPIO_Init+0xa0>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a1d      	ldr	r2, [pc, #116]	; (800223c <MX_GPIO_Init+0xa0>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_GPIO_Init+0xa0>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_GPIO_Init+0xa0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a16      	ldr	r2, [pc, #88]	; (800223c <MX_GPIO_Init+0xa0>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_GPIO_Init+0xa0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <MX_GPIO_Init+0xa0>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a0f      	ldr	r2, [pc, #60]	; (800223c <MX_GPIO_Init+0xa0>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <MX_GPIO_Init+0xa0>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_GPIO_Init+0xa0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <MX_GPIO_Init+0xa0>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_GPIO_Init+0xa0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]

}
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800

08002240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002252:	f000 fb37 	bl	80028c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40002000 	.word	0x40002000

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800226c:	e7fe      	b.n	800226c <Error_Handler+0x8>
	...

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_MspInit+0x4c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <HAL_MspInit+0x4c>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_MspInit+0x4c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_MspInit+0x4c>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_MspInit+0x4c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a70      	ldr	r2, [pc, #448]	; (80024a0 <HAL_SD_MspInit+0x1e0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	f040 80da 	bne.w	8002498 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	4b6e      	ldr	r3, [pc, #440]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	4a6d      	ldr	r2, [pc, #436]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 80022ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f2:	6453      	str	r3, [r2, #68]	; 0x44
 80022f4:	4b6b      	ldr	r3, [pc, #428]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	4b67      	ldr	r3, [pc, #412]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4a66      	ldr	r2, [pc, #408]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6313      	str	r3, [r2, #48]	; 0x30
 8002310:	4b64      	ldr	r3, [pc, #400]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	4b60      	ldr	r3, [pc, #384]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4a5f      	ldr	r2, [pc, #380]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 8002326:	f043 0308 	orr.w	r3, r3, #8
 800232a:	6313      	str	r3, [r2, #48]	; 0x30
 800232c:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_SD_MspInit+0x1e4>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002338:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002342:	2301      	movs	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800234a:	230c      	movs	r3, #12
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4854      	ldr	r0, [pc, #336]	; (80024a8 <HAL_SD_MspInit+0x1e8>)
 8002356:	f002 f89f 	bl	8004498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800235a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800236c:	230c      	movs	r3, #12
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	484c      	ldr	r0, [pc, #304]	; (80024a8 <HAL_SD_MspInit+0x1e8>)
 8002378:	f002 f88e 	bl	8004498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800237c:	2304      	movs	r3, #4
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002384:	2301      	movs	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800238c:	230c      	movs	r3, #12
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4845      	ldr	r0, [pc, #276]	; (80024ac <HAL_SD_MspInit+0x1ec>)
 8002398:	f002 f87e 	bl	8004498 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800239c:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 800239e:	4a45      	ldr	r2, [pc, #276]	; (80024b4 <HAL_SD_MspInit+0x1f4>)
 80023a0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80023a2:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023a8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b0:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023b6:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023bc:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023c6:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023cc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023d0:	2220      	movs	r2, #32
 80023d2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023da:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023dc:	2204      	movs	r2, #4
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023e0:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023e2:	2203      	movs	r2, #3
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80023e6:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80023f6:	482e      	ldr	r0, [pc, #184]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 80023f8:	f000 fb8a 	bl	8002b10 <HAL_DMA_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002402:	f7ff ff2f 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
 800240c:	4a28      	ldr	r2, [pc, #160]	; (80024b0 <HAL_SD_MspInit+0x1f0>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_SD_MspInit+0x1fc>)
 8002416:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 800241a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800241e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 800242e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002432:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002436:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800243a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 800243e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002442:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002446:	2220      	movs	r2, #32
 8002448:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002452:	2204      	movs	r2, #4
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002458:	2203      	movs	r2, #3
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 800245e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002466:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800246c:	4812      	ldr	r0, [pc, #72]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 800246e:	f000 fb4f 	bl	8002b10 <HAL_DMA_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002478:	f7ff fef4 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002480:	63da      	str	r2, [r3, #60]	; 0x3c
 8002482:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_SD_MspInit+0x1f8>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	2031      	movs	r0, #49	; 0x31
 800248e:	f000 fb15 	bl	8002abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002492:	2031      	movs	r0, #49	; 0x31
 8002494:	f000 fb2e 	bl	8002af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020c00 	.word	0x40020c00
 80024b0:	200071f4 	.word	0x200071f4
 80024b4:	40026458 	.word	0x40026458
 80024b8:	200072ec 	.word	0x200072ec
 80024bc:	400264a0 	.word	0x400264a0

080024c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_UART_MspInit+0x84>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12b      	bne.n	800253a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_UART_MspInit+0x88>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_UART_MspInit+0x88>)
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_UART_MspInit+0x88>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_UART_MspInit+0x88>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <HAL_UART_MspInit+0x88>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_UART_MspInit+0x88>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800251a:	23c0      	movs	r3, #192	; 0xc0
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800252a:	2308      	movs	r3, #8
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4805      	ldr	r0, [pc, #20]	; (800254c <HAL_UART_MspInit+0x8c>)
 8002536:	f001 ffaf 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40011400 	.word	0x40011400
 8002548:	40023800 	.word	0x40023800
 800254c:	40020800 	.word	0x40020800

08002550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	202d      	movs	r0, #45	; 0x2d
 8002566:	f000 faa9 	bl	8002abc <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800256a:	202d      	movs	r0, #45	; 0x2d
 800256c:	f000 fac2 	bl	8002af4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_InitTick+0xa4>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_InitTick+0xa4>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257e:	6413      	str	r3, [r2, #64]	; 0x40
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_InitTick+0xa4>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800258c:	f107 0210 	add.w	r2, r7, #16
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fd8e 	bl	80050b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800259c:	f002 fd64 	bl	8005068 <HAL_RCC_GetPCLK1Freq>
 80025a0:	4603      	mov	r3, r0
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_InitTick+0xa8>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	3b01      	subs	r3, #1
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_InitTick+0xac>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <HAL_InitTick+0xb0>)
 80025b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_InitTick+0xac>)
 80025bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025c0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_InitTick+0xac>)
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_InitTick+0xac>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_InitTick+0xac>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <HAL_InitTick+0xac>)
 80025d6:	f004 f8d0 	bl	800677a <HAL_TIM_Base_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80025e0:	4806      	ldr	r0, [pc, #24]	; (80025fc <HAL_InitTick+0xac>)
 80025e2:	f004 f923 	bl	800682c <HAL_TIM_Base_Start_IT>
 80025e6:	4603      	mov	r3, r0
 80025e8:	e000      	b.n	80025ec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3730      	adds	r7, #48	; 0x30
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	20007414 	.word	0x20007414
 8002600:	40002000 	.word	0x40002000

08002604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <NMI_Handler+0x4>

0800260a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <HardFault_Handler+0x4>

08002610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <MemManage_Handler+0x4>

08002616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <UsageFault_Handler+0x4>

08002622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002662:	f004 f953 	bl	800690c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20007414 	.word	0x20007414

08002670 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <SDIO_IRQHandler+0x10>)
 8002676:	f002 ffc7 	bl	8005608 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	2000734c 	.word	0x2000734c

08002684 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <DMA2_Stream3_IRQHandler+0x10>)
 800268a:	f000 fb69 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200071f4 	.word	0x200071f4

08002698 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <DMA2_Stream6_IRQHandler+0x10>)
 800269e:	f000 fb5f 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200072ec 	.word	0x200072ec

080026ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
	return 1;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_kill>:

int _kill(int pid, int sig)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <_kill+0x20>)
 80026c8:	2216      	movs	r2, #22
 80026ca:	601a      	str	r2, [r3, #0]
	return -1;
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	2000fb2c 	.word	0x2000fb2c

080026e0 <_exit>:

void _exit (int status)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffe5 	bl	80026bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80026f2:	e7fe      	b.n	80026f2 <_exit+0x12>

080026f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e00a      	b.n	800271c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002706:	f3af 8000 	nop.w
 800270a:	4601      	mov	r1, r0
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	60ba      	str	r2, [r7, #8]
 8002712:	b2ca      	uxtb	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	dbf0      	blt.n	8002706 <_read+0x12>
	}

return len;
 8002724:	687b      	ldr	r3, [r7, #4]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_close>:
	}
	return len;
}

int _close(int file)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
	return -1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002756:	605a      	str	r2, [r3, #4]
	return 0;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <_isatty>:

int _isatty(int file)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
	return 1;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
	return 0;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <_sbrk+0x5c>)
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <_sbrk+0x60>)
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <_sbrk+0x64>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <_sbrk+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d205      	bcs.n	80027d4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <_sbrk+0x6c>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027d2:	e009      	b.n	80027e8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a06      	ldr	r2, [pc, #24]	; (80027fc <_sbrk+0x64>)
 80027e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	20020000 	.word	0x20020000
 80027f8:	00000400 	.word	0x00000400
 80027fc:	20000568 	.word	0x20000568
 8002800:	2000fb40 	.word	0x2000fb40
 8002804:	2000fb2c 	.word	0x2000fb2c

08002808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <SystemInit+0x20>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	4a05      	ldr	r2, [pc, #20]	; (8002828 <SystemInit+0x20>)
 8002814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002832:	490e      	ldr	r1, [pc, #56]	; (800286c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002848:	4c0b      	ldr	r4, [pc, #44]	; (8002878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002856:	f7ff ffd7 	bl	8002808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285a:	f015 fa0b 	bl	8017c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7ff fb73 	bl	8001f48 <main>
  bx  lr    
 8002862:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	20000510 	.word	0x20000510
  ldr r2, =_sidata
 8002870:	08024538 	.word	0x08024538
  ldr r2, =_sbss
 8002874:	20000510 	.word	0x20000510
  ldr r4, =_ebss
 8002878:	2000fb3c 	.word	0x2000fb3c

0800287c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC_IRQHandler>
	...

08002880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <HAL_Init+0x40>)
 800288a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_Init+0x40>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <HAL_Init+0x40>)
 8002896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_Init+0x40>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <HAL_Init+0x40>)
 80028a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f000 f8fc 	bl	8002aa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ae:	200f      	movs	r0, #15
 80028b0:	f7ff fe4e 	bl	8002550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b4:	f7ff fcdc 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023c00 	.word	0x40023c00

080028c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x20>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x24>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_IncTick+0x24>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	200004a0 	.word	0x200004a0
 80028e8:	2000745c 	.word	0x2000745c

080028ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_GetTick+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	2000745c 	.word	0x2000745c

08002904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff ffee 	bl	80028ec <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291c:	d005      	beq.n	800292a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_Delay+0x44>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800292a:	bf00      	nop
 800292c:	f7ff ffde 	bl	80028ec <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8f7      	bhi.n	800292c <HAL_Delay+0x28>
  {
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200004a0 	.word	0x200004a0

0800294c <__NVIC_SetPriorityGrouping>:
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_GetPriorityGrouping>:
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <__NVIC_GetPriorityGrouping+0x18>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	f003 0307 	and.w	r3, r3, #7
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_EnableIRQ>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db0b      	blt.n	80029da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4907      	ldr	r1, [pc, #28]	; (80029e8 <__NVIC_EnableIRQ+0x38>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2001      	movs	r0, #1
 80029d2:	fa00 f202 	lsl.w	r2, r0, r2
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000e100 	.word	0xe000e100

080029ec <__NVIC_SetPriority>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	db0a      	blt.n	8002a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	490c      	ldr	r1, [pc, #48]	; (8002a38 <__NVIC_SetPriority+0x4c>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a14:	e00a      	b.n	8002a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4908      	ldr	r1, [pc, #32]	; (8002a3c <__NVIC_SetPriority+0x50>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	3b04      	subs	r3, #4
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	440b      	add	r3, r1
 8002a2a:	761a      	strb	r2, [r3, #24]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000e100 	.word	0xe000e100
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <NVIC_EncodePriority>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf28      	it	cs
 8002a5e:	2304      	movcs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d902      	bls.n	8002a70 <NVIC_EncodePriority+0x30>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3b03      	subs	r3, #3
 8002a6e:	e000      	b.n	8002a72 <NVIC_EncodePriority+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	4313      	orrs	r3, r2
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ff4c 	bl	800294c <__NVIC_SetPriorityGrouping>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ace:	f7ff ff61 	bl	8002994 <__NVIC_GetPriorityGrouping>
 8002ad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	6978      	ldr	r0, [r7, #20]
 8002ada:	f7ff ffb1 	bl	8002a40 <NVIC_EncodePriority>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff80 	bl	80029ec <__NVIC_SetPriority>
}
 8002aec:	bf00      	nop
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff54 	bl	80029b0 <__NVIC_EnableIRQ>
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fee6 	bl	80028ec <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e099      	b.n	8002c60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4c:	e00f      	b.n	8002b6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b4e:	f7ff fecd 	bl	80028ec <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d908      	bls.n	8002b6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e078      	b.n	8002c60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e8      	bne.n	8002b4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <HAL_DMA_Init+0x158>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d107      	bne.n	8002bd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0307 	bic.w	r3, r3, #7
 8002bee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d117      	bne.n	8002c32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fa9d 	bl	8003154 <DMA_CheckFifoParam>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e016      	b.n	8002c60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa54 	bl	80030e8 <DMA_CalcBaseAndBitshift>
 8002c40:	4603      	mov	r3, r0
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	223f      	movs	r2, #63	; 0x3f
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	f010803f 	.word	0xf010803f

08002c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_DMA_Start_IT+0x26>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e040      	b.n	8002d14 <HAL_DMA_Start_IT+0xa8>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d12f      	bne.n	8002d06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f9e6 	bl	800308c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	223f      	movs	r2, #63	; 0x3f
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0216 	orr.w	r2, r2, #22
 8002cda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0208 	orr.w	r2, r2, #8
 8002cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e005      	b.n	8002d12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d004      	beq.n	8002d3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00c      	b.n	8002d54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d6c:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_DMA_IRQHandler+0x258>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a92      	ldr	r2, [pc, #584]	; (8002fbc <HAL_DMA_IRQHandler+0x25c>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a9b      	lsrs	r3, r3, #10
 8002d78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01a      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0204 	bic.w	r2, r2, #4
 8002db2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	2208      	movs	r2, #8
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d012      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	2201      	movs	r2, #1
 8002df0:	409a      	lsls	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	2204      	movs	r2, #4
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d012      	beq.n	8002e38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	2204      	movs	r2, #4
 8002e26:	409a      	lsls	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0204 	orr.w	r2, r3, #4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d043      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d03c      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d018      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d108      	bne.n	8002e90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d024      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4798      	blx	r3
 8002e8e:	e01f      	b.n	8002ed0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01b      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
 8002ea0:	e016      	b.n	8002ed0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0208 	bic.w	r2, r2, #8
 8002ebe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 808e 	beq.w	8002ffe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8086 	beq.w	8002ffe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d136      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0216 	bic.w	r2, r2, #22
 8002f18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <HAL_DMA_IRQHandler+0x1da>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	223f      	movs	r2, #63	; 0x3f
 8002f50:	409a      	lsls	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d07d      	beq.n	800306a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
        }
        return;
 8002f76:	e078      	b.n	800306a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01c      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d108      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d030      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
 8002fa4:	e02b      	b.n	8002ffe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d027      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	e022      	b.n	8002ffe <HAL_DMA_IRQHandler+0x29e>
 8002fb8:	20000498 	.word	0x20000498
 8002fbc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0210 	bic.w	r2, r2, #16
 8002fdc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	2b00      	cmp	r3, #0
 8003004:	d032      	beq.n	800306c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d022      	beq.n	8003058 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2205      	movs	r2, #5
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3301      	adds	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	429a      	cmp	r2, r3
 8003034:	d307      	bcc.n	8003046 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f2      	bne.n	800302a <HAL_DMA_IRQHandler+0x2ca>
 8003044:	e000      	b.n	8003048 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003046:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
 8003068:	e000      	b.n	800306c <HAL_DMA_IRQHandler+0x30c>
        return;
 800306a:	bf00      	nop
    }
  }
}
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop

08003074 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d108      	bne.n	80030cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030ca:	e007      	b.n	80030dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	3b10      	subs	r3, #16
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <DMA_CalcBaseAndBitshift+0x64>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <DMA_CalcBaseAndBitshift+0x68>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d909      	bls.n	800312a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	1d1a      	adds	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	659a      	str	r2, [r3, #88]	; 0x58
 8003128:	e007      	b.n	800313a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	aaaaaaab 	.word	0xaaaaaaab
 8003150:	0801d270 	.word	0x0801d270

08003154 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d11f      	bne.n	80031ae <DMA_CheckFifoParam+0x5a>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d856      	bhi.n	8003222 <DMA_CheckFifoParam+0xce>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <DMA_CheckFifoParam+0x28>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	0800318d 	.word	0x0800318d
 8003180:	0800319f 	.word	0x0800319f
 8003184:	0800318d 	.word	0x0800318d
 8003188:	08003223 	.word	0x08003223
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d046      	beq.n	8003226 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319c:	e043      	b.n	8003226 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a6:	d140      	bne.n	800322a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ac:	e03d      	b.n	800322a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b6:	d121      	bne.n	80031fc <DMA_CheckFifoParam+0xa8>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d837      	bhi.n	800322e <DMA_CheckFifoParam+0xda>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <DMA_CheckFifoParam+0x70>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031db 	.word	0x080031db
 80031cc:	080031d5 	.word	0x080031d5
 80031d0:	080031ed 	.word	0x080031ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
      break;
 80031d8:	e030      	b.n	800323c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d025      	beq.n	8003232 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ea:	e022      	b.n	8003232 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031f4:	d11f      	bne.n	8003236 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031fa:	e01c      	b.n	8003236 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d903      	bls.n	800320a <DMA_CheckFifoParam+0xb6>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d003      	beq.n	8003210 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003208:	e018      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      break;
 800320e:	e015      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e00b      	b.n	800323a <DMA_CheckFifoParam+0xe6>
      break;
 8003222:	bf00      	nop
 8003224:	e00a      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e008      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
 800322c:	e006      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
 8003230:	e004      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;   
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <DMA_CheckFifoParam+0xe8>
      break;
 800323a:	bf00      	nop
    }
  } 
  
  return status; 
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop

0800324c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800325c:	4baa      	ldr	r3, [pc, #680]	; (8003508 <HAL_ETH_Init+0x2bc>)
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e183      	b.n	800357a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f005 f926 	bl	80084d8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	4b9e      	ldr	r3, [pc, #632]	; (800350c <HAL_ETH_Init+0x2c0>)
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	4a9d      	ldr	r2, [pc, #628]	; (800350c <HAL_ETH_Init+0x2c0>)
 8003296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800329a:	6453      	str	r3, [r2, #68]	; 0x44
 800329c:	4b9b      	ldr	r3, [pc, #620]	; (800350c <HAL_ETH_Init+0x2c0>)
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80032a8:	4b99      	ldr	r3, [pc, #612]	; (8003510 <HAL_ETH_Init+0x2c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a98      	ldr	r2, [pc, #608]	; (8003510 <HAL_ETH_Init+0x2c4>)
 80032ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032b2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80032b4:	4b96      	ldr	r3, [pc, #600]	; (8003510 <HAL_ETH_Init+0x2c4>)
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4994      	ldr	r1, [pc, #592]	; (8003510 <HAL_ETH_Init+0x2c4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80032da:	f7ff fb07 	bl	80028ec <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80032e0:	e011      	b.n	8003306 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80032e2:	f7ff fb03 	bl	80028ec <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032f0:	d909      	bls.n	8003306 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2203      	movs	r2, #3
 80032f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e139      	b.n	800357a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e4      	bne.n	80032e2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f023 031c 	bic.w	r3, r3, #28
 8003326:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003328:	f001 fe92 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 800332c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4a78      	ldr	r2, [pc, #480]	; (8003514 <HAL_ETH_Init+0x2c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d908      	bls.n	8003348 <HAL_ETH_Init+0xfc>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4a77      	ldr	r2, [pc, #476]	; (8003518 <HAL_ETH_Init+0x2cc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d804      	bhi.n	8003348 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e027      	b.n	8003398 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	4a73      	ldr	r2, [pc, #460]	; (8003518 <HAL_ETH_Init+0x2cc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d908      	bls.n	8003362 <HAL_ETH_Init+0x116>
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	4a6d      	ldr	r2, [pc, #436]	; (8003508 <HAL_ETH_Init+0x2bc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d204      	bcs.n	8003362 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f043 030c 	orr.w	r3, r3, #12
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	e01a      	b.n	8003398 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4a68      	ldr	r2, [pc, #416]	; (8003508 <HAL_ETH_Init+0x2bc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d303      	bcc.n	8003372 <HAL_ETH_Init+0x126>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4a6b      	ldr	r2, [pc, #428]	; (800351c <HAL_ETH_Init+0x2d0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d911      	bls.n	8003396 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4a69      	ldr	r2, [pc, #420]	; (800351c <HAL_ETH_Init+0x2d0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d908      	bls.n	800338c <HAL_ETH_Init+0x140>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4a68      	ldr	r2, [pc, #416]	; (8003520 <HAL_ETH_Init+0x2d4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d804      	bhi.n	800338c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e005      	b.n	8003398 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f043 0310 	orr.w	r3, r3, #16
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	e000      	b.n	8003398 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003396:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80033a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033a4:	2100      	movs	r1, #0
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fb98 	bl	8003adc <HAL_ETH_WritePHYRegister>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80033b6:	6939      	ldr	r1, [r7, #16]
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fd4d 	bl	8003e58 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0d7      	b.n	800357a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80033ca:	20ff      	movs	r0, #255	; 0xff
 80033cc:	f7ff fa9a 	bl	8002904 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a5 	beq.w	8003524 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80033da:	f7ff fa87 	bl	80028ec <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	461a      	mov	r2, r3
 80033e6:	2101      	movs	r1, #1
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fb0f 	bl	8003a0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80033ee:	f7ff fa7d 	bl	80028ec <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d90f      	bls.n	8003420 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003404:	6939      	ldr	r1, [r7, #16]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fd26 	bl	8003e58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0ac      	b.n	800357a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0da      	beq.n	80033e0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800342a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800342e:	2100      	movs	r1, #0
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fb53 	bl	8003adc <HAL_ETH_WritePHYRegister>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003440:	6939      	ldr	r1, [r7, #16]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fd08 	bl	8003e58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003450:	2301      	movs	r3, #1
 8003452:	e092      	b.n	800357a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003454:	f7ff fa4a 	bl	80028ec <HAL_GetTick>
 8003458:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800345a:	f107 030c 	add.w	r3, r7, #12
 800345e:	461a      	mov	r2, r3
 8003460:	2101      	movs	r1, #1
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fad2 	bl	8003a0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003468:	f7ff fa40 	bl	80028ec <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d90f      	bls.n	800349a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800347e:	6939      	ldr	r1, [r7, #16]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fce9 	bl	8003e58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e06f      	b.n	800357a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0da      	beq.n	800345a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	461a      	mov	r2, r3
 80034aa:	2110      	movs	r1, #16
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 faad 	bl	8003a0c <HAL_ETH_ReadPHYRegister>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80034bc:	6939      	ldr	r1, [r7, #16]
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fcca 	bl	8003e58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80034cc:	2301      	movs	r3, #1
 80034ce:	e054      	b.n	800357a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d004      	beq.n	80034e4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	e002      	b.n	80034ea <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	e035      	b.n	8003568 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	e030      	b.n	8003568 <HAL_ETH_Init+0x31c>
 8003506:	bf00      	nop
 8003508:	03938700 	.word	0x03938700
 800350c:	40023800 	.word	0x40023800
 8003510:	40013800 	.word	0x40013800
 8003514:	01312cff 	.word	0x01312cff
 8003518:	02160ebf 	.word	0x02160ebf
 800351c:	05f5e0ff 	.word	0x05f5e0ff
 8003520:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003534:	4313      	orrs	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	2100      	movs	r1, #0
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 facd 	bl	8003adc <HAL_ETH_WritePHYRegister>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800354c:	6939      	ldr	r1, [r7, #16]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fc82 	bl	8003e58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e00c      	b.n	800357a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003560:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003564:	f7ff f9ce 	bl	8002904 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003568:	6939      	ldr	r1, [r7, #16]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fc74 	bl	8003e58 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop

08003584 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_ETH_DMATxDescListInit+0x20>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e052      	b.n	800364a <HAL_ETH_DMATxDescListInit+0xc6>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e030      	b.n	8003622 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	015b      	lsls	r3, r3, #5
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	4413      	add	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035d8:	fb02 f303 	mul.w	r3, r2, r3
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	429a      	cmp	r2, r3
 8003602:	d208      	bcs.n	8003616 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3301      	adds	r3, #1
 8003608:	015b      	lsls	r3, r3, #5
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	4413      	add	r3, r2
 800360e:	461a      	mov	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	e002      	b.n	800361c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3301      	adds	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d3ca      	bcc.n	80035c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003634:	3310      	adds	r3, #16
 8003636:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003656:	b480      	push	{r7}
 8003658:	b087      	sub	sp, #28
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_ETH_DMARxDescListInit+0x20>
 8003672:	2302      	movs	r3, #2
 8003674:	e056      	b.n	8003724 <HAL_ETH_DMARxDescListInit+0xce>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e034      	b.n	80036fc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	015b      	lsls	r3, r3, #5
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036a2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80036aa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	461a      	mov	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d208      	bcs.n	80036f0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3301      	adds	r3, #1
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	4413      	add	r3, r2
 80036e8:	461a      	mov	r2, r3
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	e002      	b.n	80036f6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d3c6      	bcc.n	8003692 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370e:	330c      	adds	r3, #12
 8003710:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_ETH_TransmitFrame+0x24>
 8003750:	2302      	movs	r3, #2
 8003752:	e0cd      	b.n	80038f0 <HAL_ETH_TransmitFrame+0x1c0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800377a:	2301      	movs	r3, #1
 800377c:	e0b8      	b.n	80038f0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	da09      	bge.n	800379c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2212      	movs	r2, #18
 800378c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0a9      	b.n	80038f0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d915      	bls.n	80037d2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	4a54      	ldr	r2, [pc, #336]	; (80038fc <HAL_ETH_TransmitFrame+0x1cc>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0a9b      	lsrs	r3, r3, #10
 80037b0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4b51      	ldr	r3, [pc, #324]	; (80038fc <HAL_ETH_TransmitFrame+0x1cc>)
 80037b6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e001      	b.n	80037d6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80037d2:	2301      	movs	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d11c      	bne.n	8003816 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80037ea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80037f6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003806:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
 8003814:	e04b      	b.n	80038ae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e044      	b.n	80038a6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800382a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003840:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800384a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3b01      	subs	r3, #1
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	429a      	cmp	r2, r3
 8003854:	d116      	bne.n	8003884 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003864:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	4a25      	ldr	r2, [pc, #148]	; (8003900 <HAL_ETH_TransmitFrame+0x1d0>)
 800386a:	fb02 f203 	mul.w	r2, r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4413      	add	r3, r2
 8003872:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003876:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003882:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003892:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	461a      	mov	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	3301      	adds	r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d3b6      	bcc.n	800381c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b6:	3314      	adds	r3, #20
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ca:	3314      	adds	r3, #20
 80038cc:	2204      	movs	r2, #4
 80038ce:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d8:	3304      	adds	r3, #4
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	ac02b00b 	.word	0xac02b00b
 8003900:	fffffa0c 	.word	0xfffffa0c

08003904 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_ETH_GetReceivedFrame+0x1a>
 800391a:	2302      	movs	r3, #2
 800391c:	e070      	b.n	8003a00 <HAL_ETH_GetReceivedFrame+0xfc>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db5a      	blt.n	80039ee <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d030      	beq.n	80039a8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	2b01      	cmp	r3, #1
 8003956:	d103      	bne.n	8003960 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003974:	3b04      	subs	r3, #4
 8003976:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e02b      	b.n	8003a00 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d010      	beq.n	80039d8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
 80039d6:	e00a      	b.n	80039ee <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	461a      	mov	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	460b      	mov	r3, r1
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b82      	cmp	r3, #130	; 0x82
 8003a2c:	d101      	bne.n	8003a32 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e050      	b.n	8003ad4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2282      	movs	r2, #130	; 0x82
 8003a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 031c 	and.w	r3, r3, #28
 8003a48:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8a1b      	ldrh	r3, [r3, #16]
 8003a4e:	02db      	lsls	r3, r3, #11
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003a58:	897b      	ldrh	r3, [r7, #10]
 8003a5a:	019b      	lsls	r3, r3, #6
 8003a5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 0302 	bic.w	r3, r3, #2
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003a7e:	f7fe ff35 	bl	80028ec <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a84:	e015      	b.n	8003ab2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003a86:	f7fe ff31 	bl	80028ec <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d309      	bcc.n	8003aaa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e014      	b.n	8003ad4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e4      	bne.n	8003a86 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b42      	cmp	r3, #66	; 0x42
 8003afc:	d101      	bne.n	8003b02 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
 8003b00:	e04e      	b.n	8003ba0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2242      	movs	r2, #66	; 0x42
 8003b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 031c 	and.w	r3, r3, #28
 8003b18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8a1b      	ldrh	r3, [r3, #16]
 8003b1e:	02db      	lsls	r3, r3, #11
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003b28:	897b      	ldrh	r3, [r7, #10]
 8003b2a:	019b      	lsls	r3, r3, #6
 8003b2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b58:	f7fe fec8 	bl	80028ec <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b5e:	e015      	b.n	8003b8c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003b60:	f7fe fec4 	bl	80028ec <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6e:	d309      	bcc.n	8003b84 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e00d      	b.n	8003ba0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e4      	bne.n	8003b60 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_ETH_Start+0x16>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e01f      	b.n	8003bfe <HAL_ETH_Start+0x56>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fb44 	bl	800425c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fb7b 	bl	80042d0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fc12 	bl	8004404 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fbaf 	bl	8004344 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fbdc 	bl	80043a4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_ETH_Stop+0x16>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e01f      	b.n	8003c5c <HAL_ETH_Stop+0x56>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fba1 	bl	8004374 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fbce 	bl	80043d4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fb66 	bl	800430a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fbe0 	bl	8004404 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fb26 	bl	8004296 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_ETH_ConfigMAC+0x1c>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e0e4      	b.n	8003e4a <HAL_ETH_ConfigMAC+0x1e6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80b1 	beq.w	8003dfa <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4b6c      	ldr	r3, [pc, #432]	; (8003e54 <HAL_ETH_ConfigMAC+0x1f0>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003cb0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003cb6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003cbc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003cc2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003cc8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003cce:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003cd4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003cda:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003ce0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003ce6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003cec:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003cf2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f7fe fdfa 	bl	8002904 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003d20:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003d26:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003d2c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003d32:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003d38:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003d3e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003d4a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003d4c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d56:	2001      	movs	r0, #1
 8003d58:	f7fe fdd4 	bl	8002904 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d6c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d76:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d86:	4013      	ands	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003d94:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003d9a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003da0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003da6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003dac:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	f7fe fd9d 	bl	8002904 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dea:	2001      	movs	r0, #1
 8003dec:	f7fe fd8a 	bl	8002904 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	61da      	str	r2, [r3, #28]
 8003df8:	e01e      	b.n	8003e38 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003e08:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f7fe fd6a 	bl	8002904 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	ff20810f 	.word	0xff20810f

08003e58 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0b0      	sub	sp, #192	; 0xc0
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e74:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003e86:	2300      	movs	r3, #0
 8003e88:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea4:	e001      	b.n	8003eaa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003ec4:	2340      	movs	r3, #64	; 0x40
 8003ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f30:	4bac      	ldr	r3, [pc, #688]	; (80041e4 <ETH_MACDMAConfig+0x38c>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003f3c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003f40:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003f44:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003f4a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003f4e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003f52:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003f58:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003f5c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003f60:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003f64:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003f68:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003f6c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003f6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f80:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f7fe fcb9 	bl	8002904 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f9a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003f9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003fa0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003fa4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003fa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003faa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003fb0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003fb6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003fbc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003fc0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003fc8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003fca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f7fe fc94 	bl	8002904 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fe4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003ff8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004004:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004008:	f64f 7341 	movw	r3, #65345	; 0xff41
 800400c:	4013      	ands	r3, r2
 800400e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004012:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004016:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800401c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800401e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004022:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004028:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800402a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800402e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004034:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004036:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004048:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004054:	2001      	movs	r0, #1
 8004056:	f7fe fc55 	bl	8002904 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004062:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004064:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004068:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800407e:	2001      	movs	r0, #1
 8004080:	f7fe fc40 	bl	8002904 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800408c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004096:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800409c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040a0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80040b2:	2304      	movs	r3, #4
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80040b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80040bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80040c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80040c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80040d6:	2300      	movs	r3, #0
 80040d8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e2:	3318      	adds	r3, #24
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80040ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040ee:	4b3e      	ldr	r3, [pc, #248]	; (80041e8 <ETH_MACDMAConfig+0x390>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80040f6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80040f8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80040fa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80040fc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80040fe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004100:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004102:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004104:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004106:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004108:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800410a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800410c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800410e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004112:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004116:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004118:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412a:	3318      	adds	r3, #24
 800412c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004130:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413a:	3318      	adds	r3, #24
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004142:	2001      	movs	r0, #1
 8004144:	f7fe fbde 	bl	8002904 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004150:	3318      	adds	r3, #24
 8004152:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004156:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800415c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004160:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004164:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004168:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800416a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800416e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004172:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800417c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004180:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004190:	2001      	movs	r0, #1
 8004192:	f7fe fbb7 	bl	8002904 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041a2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d10f      	bne.n	80041cc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b4:	331c      	adds	r3, #28
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80041c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c8:	331c      	adds	r3, #28
 80041ca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	461a      	mov	r2, r3
 80041d2:	2100      	movs	r1, #0
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f809 	bl	80041ec <ETH_MACAddressConfig>
}
 80041da:	bf00      	nop
 80041dc:	37c0      	adds	r7, #192	; 0xc0
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	ff20810f 	.word	0xff20810f
 80041e8:	f8de3f23 	.word	0xf8de3f23

080041ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3305      	adds	r3, #5
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	3204      	adds	r2, #4
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <ETH_MACAddressConfig+0x68>)
 800420e:	4413      	add	r3, r2
 8004210:	461a      	mov	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3303      	adds	r3, #3
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	061a      	lsls	r2, r3, #24
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3302      	adds	r3, #2
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	041b      	lsls	r3, r3, #16
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3301      	adds	r3, #1
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	4313      	orrs	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <ETH_MACAddressConfig+0x6c>)
 800423e:	4413      	add	r3, r2
 8004240:	461a      	mov	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	6013      	str	r3, [r2, #0]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40028040 	.word	0x40028040
 8004258:	40028044 	.word	0x40028044

0800425c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0208 	orr.w	r2, r2, #8
 8004276:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004280:	2001      	movs	r0, #1
 8004282:	f000 f8e9 	bl	8004458 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0208 	bic.w	r2, r2, #8
 80042b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f000 f8cc 	bl	8004458 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	601a      	str	r2, [r3, #0]
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0204 	orr.w	r2, r2, #4
 80042ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80042f4:	2001      	movs	r0, #1
 80042f6:	f000 f8af 	bl	8004458 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0204 	bic.w	r2, r2, #4
 8004324:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800432e:	2001      	movs	r0, #1
 8004330:	f000 f892 	bl	8004458 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	601a      	str	r2, [r3, #0]
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	3318      	adds	r3, #24
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004364:	3318      	adds	r3, #24
 8004366:	601a      	str	r2, [r3, #0]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004384:	3318      	adds	r3, #24
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004394:	3318      	adds	r3, #24
 8004396:	601a      	str	r2, [r3, #0]
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b4:	3318      	adds	r3, #24
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0202 	orr.w	r2, r2, #2
 80043c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c4:	3318      	adds	r3, #24
 80043c6:	601a      	str	r2, [r3, #0]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e4:	3318      	adds	r3, #24
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0202 	bic.w	r2, r2, #2
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	3318      	adds	r3, #24
 80043f6:	601a      	str	r2, [r3, #0]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	3318      	adds	r3, #24
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004428:	3318      	adds	r3, #24
 800442a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004434:	3318      	adds	r3, #24
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800443a:	2001      	movs	r0, #1
 800443c:	f000 f80c 	bl	8004458 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444a:	3318      	adds	r3, #24
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <ETH_Delay+0x38>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <ETH_Delay+0x3c>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	0a5b      	lsrs	r3, r3, #9
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004474:	bf00      	nop
  } 
  while (Delay --);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1e5a      	subs	r2, r3, #1
 800447a:	60fa      	str	r2, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f9      	bne.n	8004474 <ETH_Delay+0x1c>
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000498 	.word	0x20000498
 8004494:	10624dd3 	.word	0x10624dd3

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e16b      	b.n	800478c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	f040 815a 	bne.w	8004786 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d005      	beq.n	80044ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d130      	bne.n	800454c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	2203      	movs	r2, #3
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004520:	2201      	movs	r2, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 0201 	and.w	r2, r3, #1
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d017      	beq.n	8004588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2203      	movs	r2, #3
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d123      	bne.n	80045dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	220f      	movs	r2, #15
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80b4 	beq.w	8004786 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b60      	ldr	r3, [pc, #384]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a5f      	ldr	r2, [pc, #380]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463a:	4a5b      	ldr	r2, [pc, #364]	; (80047a8 <HAL_GPIO_Init+0x310>)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	3302      	adds	r3, #2
 8004642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a52      	ldr	r2, [pc, #328]	; (80047ac <HAL_GPIO_Init+0x314>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02b      	beq.n	80046be <HAL_GPIO_Init+0x226>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a51      	ldr	r2, [pc, #324]	; (80047b0 <HAL_GPIO_Init+0x318>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d025      	beq.n	80046ba <HAL_GPIO_Init+0x222>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a50      	ldr	r2, [pc, #320]	; (80047b4 <HAL_GPIO_Init+0x31c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <HAL_GPIO_Init+0x21e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <HAL_GPIO_Init+0x320>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x21a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <HAL_GPIO_Init+0x324>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x216>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_GPIO_Init+0x328>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x212>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4c      	ldr	r2, [pc, #304]	; (80047c4 <HAL_GPIO_Init+0x32c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x20e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <HAL_GPIO_Init+0x330>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x20a>
 800469e:	2307      	movs	r3, #7
 80046a0:	e00e      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046a2:	2308      	movs	r3, #8
 80046a4:	e00c      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046a6:	2306      	movs	r3, #6
 80046a8:	e00a      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046aa:	2305      	movs	r3, #5
 80046ac:	e008      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046ae:	2304      	movs	r3, #4
 80046b0:	e006      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046b2:	2303      	movs	r3, #3
 80046b4:	e004      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e002      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046be:	2300      	movs	r3, #0
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f002 0203 	and.w	r2, r2, #3
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	4093      	lsls	r3, r2
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d0:	4935      	ldr	r1, [pc, #212]	; (80047a8 <HAL_GPIO_Init+0x310>)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3302      	adds	r3, #2
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046de:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_GPIO_Init+0x334>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004702:	4a32      	ldr	r2, [pc, #200]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <HAL_GPIO_Init+0x334>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <HAL_GPIO_Init+0x334>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_GPIO_Init+0x334>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004780:	4a12      	ldr	r2, [pc, #72]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	f67f ae90 	bls.w	80044b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3724      	adds	r7, #36	; 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40013800 	.word	0x40013800
 80047ac:	40020000 	.word	0x40020000
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40020800 	.word	0x40020800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40021400 	.word	0x40021400
 80047c4:	40021800 	.word	0x40021800
 80047c8:	40021c00 	.word	0x40021c00
 80047cc:	40013c00 	.word	0x40013c00

080047d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e264      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d075      	beq.n	80048da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ee:	4ba3      	ldr	r3, [pc, #652]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d00c      	beq.n	8004814 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fa:	4ba0      	ldr	r3, [pc, #640]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004802:	2b08      	cmp	r3, #8
 8004804:	d112      	bne.n	800482c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004806:	4b9d      	ldr	r3, [pc, #628]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004812:	d10b      	bne.n	800482c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004814:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d05b      	beq.n	80048d8 <HAL_RCC_OscConfig+0x108>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d157      	bne.n	80048d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e23f      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004834:	d106      	bne.n	8004844 <HAL_RCC_OscConfig+0x74>
 8004836:	4b91      	ldr	r3, [pc, #580]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a90      	ldr	r2, [pc, #576]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e01d      	b.n	8004880 <HAL_RCC_OscConfig+0xb0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800484c:	d10c      	bne.n	8004868 <HAL_RCC_OscConfig+0x98>
 800484e:	4b8b      	ldr	r3, [pc, #556]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a8a      	ldr	r2, [pc, #552]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a87      	ldr	r2, [pc, #540]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e00b      	b.n	8004880 <HAL_RCC_OscConfig+0xb0>
 8004868:	4b84      	ldr	r3, [pc, #528]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a83      	ldr	r2, [pc, #524]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 800486e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4b81      	ldr	r3, [pc, #516]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a80      	ldr	r2, [pc, #512]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 800487a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800487e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d013      	beq.n	80048b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fe f830 	bl	80028ec <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004890:	f7fe f82c 	bl	80028ec <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e204      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b76      	ldr	r3, [pc, #472]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0xc0>
 80048ae:	e014      	b.n	80048da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fe f81c 	bl	80028ec <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b8:	f7fe f818 	bl	80028ec <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e1f0      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0xe8>
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d063      	beq.n	80049ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048e6:	4b65      	ldr	r3, [pc, #404]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f2:	4b62      	ldr	r3, [pc, #392]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d11c      	bne.n	8004938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048fe:	4b5f      	ldr	r3, [pc, #380]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d116      	bne.n	8004938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490a:	4b5c      	ldr	r3, [pc, #368]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <HAL_RCC_OscConfig+0x152>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e1c4      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004922:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4952      	ldr	r1, [pc, #328]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004936:	e03a      	b.n	80049ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d020      	beq.n	8004982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004940:	4b4f      	ldr	r3, [pc, #316]	; (8004a80 <HAL_RCC_OscConfig+0x2b0>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd ffd1 	bl	80028ec <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800494e:	f7fd ffcd 	bl	80028ec <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e1a5      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	4b46      	ldr	r3, [pc, #280]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496c:	4b43      	ldr	r3, [pc, #268]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4940      	ldr	r1, [pc, #256]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]
 8004980:	e015      	b.n	80049ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004982:	4b3f      	ldr	r3, [pc, #252]	; (8004a80 <HAL_RCC_OscConfig+0x2b0>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fd ffb0 	bl	80028ec <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004990:	f7fd ffac 	bl	80028ec <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e184      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d030      	beq.n	8004a1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d016      	beq.n	80049f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c2:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <HAL_RCC_OscConfig+0x2b4>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fd ff90 	bl	80028ec <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d0:	f7fd ff8c 	bl	80028ec <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e164      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e2:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x200>
 80049ee:	e015      	b.n	8004a1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f0:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <HAL_RCC_OscConfig+0x2b4>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7fd ff79 	bl	80028ec <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049fe:	f7fd ff75 	bl	80028ec <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e14d      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a10:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f0      	bne.n	80049fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a0 	beq.w	8004b6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10f      	bne.n	8004a5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCC_OscConfig+0x2b8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d121      	bne.n	8004aaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_RCC_OscConfig+0x2b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <HAL_RCC_OscConfig+0x2b8>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fd ff3b 	bl	80028ec <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	e011      	b.n	8004a9e <HAL_RCC_OscConfig+0x2ce>
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	42470000 	.word	0x42470000
 8004a84:	42470e80 	.word	0x42470e80
 8004a88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8c:	f7fd ff2e 	bl	80028ec <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e106      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9e:	4b85      	ldr	r3, [pc, #532]	; (8004cb4 <HAL_RCC_OscConfig+0x4e4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d106      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x2f0>
 8004ab2:	4b81      	ldr	r3, [pc, #516]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a80      	ldr	r2, [pc, #512]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70
 8004abe:	e01c      	b.n	8004afa <HAL_RCC_OscConfig+0x32a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b05      	cmp	r3, #5
 8004ac6:	d10c      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x312>
 8004ac8:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	4a7a      	ldr	r2, [pc, #488]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ace:	f043 0304 	orr.w	r3, r3, #4
 8004ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad4:	4b78      	ldr	r3, [pc, #480]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	4a77      	ldr	r2, [pc, #476]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae0:	e00b      	b.n	8004afa <HAL_RCC_OscConfig+0x32a>
 8004ae2:	4b75      	ldr	r3, [pc, #468]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a74      	ldr	r2, [pc, #464]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
 8004aee:	4b72      	ldr	r3, [pc, #456]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	4a71      	ldr	r2, [pc, #452]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004af4:	f023 0304 	bic.w	r3, r3, #4
 8004af8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d015      	beq.n	8004b2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fd fef3 	bl	80028ec <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fd feef 	bl	80028ec <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e0c5      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	4b65      	ldr	r3, [pc, #404]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ee      	beq.n	8004b0a <HAL_RCC_OscConfig+0x33a>
 8004b2c:	e014      	b.n	8004b58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2e:	f7fd fedd 	bl	80028ec <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b34:	e00a      	b.n	8004b4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fd fed9 	bl	80028ec <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0af      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4c:	4b5a      	ldr	r3, [pc, #360]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1ee      	bne.n	8004b36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d105      	bne.n	8004b6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5e:	4b56      	ldr	r3, [pc, #344]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	4a55      	ldr	r2, [pc, #340]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 809b 	beq.w	8004caa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b74:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d05c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d141      	bne.n	8004c0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b88:	4b4c      	ldr	r3, [pc, #304]	; (8004cbc <HAL_RCC_OscConfig+0x4ec>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7fd fead 	bl	80028ec <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b96:	f7fd fea9 	bl	80028ec <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e081      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba8:	4b43      	ldr	r3, [pc, #268]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	019b      	lsls	r3, r3, #6
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	041b      	lsls	r3, r3, #16
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	061b      	lsls	r3, r3, #24
 8004bd8:	4937      	ldr	r1, [pc, #220]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bde:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <HAL_RCC_OscConfig+0x4ec>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fd fe82 	bl	80028ec <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fd fe7e 	bl	80028ec <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e056      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfe:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x41c>
 8004c0a:	e04e      	b.n	8004caa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <HAL_RCC_OscConfig+0x4ec>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fd fe6b 	bl	80028ec <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7fd fe67 	bl	80028ec <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e03f      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2c:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f0      	bne.n	8004c1a <HAL_RCC_OscConfig+0x44a>
 8004c38:	e037      	b.n	8004caa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e032      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c46:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <HAL_RCC_OscConfig+0x4e8>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d028      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d121      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d11a      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c76:	4013      	ands	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d111      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	42470060 	.word	0x42470060

08004cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0cc      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d90c      	bls.n	8004cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b63      	ldr	r3, [pc, #396]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0b8      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d020      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d14:	4b59      	ldr	r3, [pc, #356]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4a58      	ldr	r2, [pc, #352]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a52      	ldr	r2, [pc, #328]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d38:	4b50      	ldr	r3, [pc, #320]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	494d      	ldr	r1, [pc, #308]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d044      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d119      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e07f      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d003      	beq.n	8004d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7e:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e06f      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8e:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e067      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d9e:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f023 0203 	bic.w	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4934      	ldr	r1, [pc, #208]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004db0:	f7fd fd9c 	bl	80028ec <HAL_GetTick>
 8004db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	e00a      	b.n	8004dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db8:	f7fd fd98 	bl	80028ec <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e04f      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 020c 	and.w	r2, r3, #12
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1eb      	bne.n	8004db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d20c      	bcs.n	8004e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_RCC_ClockConfig+0x1b8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e032      	b.n	8004e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e14:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4916      	ldr	r1, [pc, #88]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	490e      	ldr	r1, [pc, #56]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e46:	f000 f821 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	490a      	ldr	r1, [pc, #40]	; (8004e80 <HAL_RCC_ClockConfig+0x1c0>)
 8004e58:	5ccb      	ldrb	r3, [r1, r3]
 8004e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5e:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_ClockConfig+0x1c8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fd fb72 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023c00 	.word	0x40023c00
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	0801d258 	.word	0x0801d258
 8004e84:	20000498 	.word	0x20000498
 8004e88:	2000049c 	.word	0x2000049c

08004e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ea4:	4b67      	ldr	r3, [pc, #412]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d00d      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x40>
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	f200 80bd 	bhi.w	8005030 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d003      	beq.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ebe:	e0b7      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ec0:	4b61      	ldr	r3, [pc, #388]	; (8005048 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ec2:	60bb      	str	r3, [r7, #8]
       break;
 8004ec4:	e0b7      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ec6:	4b61      	ldr	r3, [pc, #388]	; (800504c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ec8:	60bb      	str	r3, [r7, #8]
      break;
 8004eca:	e0b4      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ecc:	4b5d      	ldr	r3, [pc, #372]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04d      	beq.n	8004f7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee2:	4b58      	ldr	r3, [pc, #352]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ef2:	f04f 0100 	mov.w	r1, #0
 8004ef6:	ea02 0800 	and.w	r8, r2, r0
 8004efa:	ea03 0901 	and.w	r9, r3, r1
 8004efe:	4640      	mov	r0, r8
 8004f00:	4649      	mov	r1, r9
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	014b      	lsls	r3, r1, #5
 8004f0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f10:	0142      	lsls	r2, r0, #5
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	ebb0 0008 	subs.w	r0, r0, r8
 8004f1a:	eb61 0109 	sbc.w	r1, r1, r9
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	018b      	lsls	r3, r1, #6
 8004f28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f2c:	0182      	lsls	r2, r0, #6
 8004f2e:	1a12      	subs	r2, r2, r0
 8004f30:	eb63 0301 	sbc.w	r3, r3, r1
 8004f34:	f04f 0000 	mov.w	r0, #0
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	00d9      	lsls	r1, r3, #3
 8004f3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f42:	00d0      	lsls	r0, r2, #3
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	eb12 0208 	adds.w	r2, r2, r8
 8004f4c:	eb43 0309 	adc.w	r3, r3, r9
 8004f50:	f04f 0000 	mov.w	r0, #0
 8004f54:	f04f 0100 	mov.w	r1, #0
 8004f58:	0259      	lsls	r1, r3, #9
 8004f5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f5e:	0250      	lsls	r0, r2, #9
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	f7fb f996 	bl	80002a0 <__aeabi_uldivmod>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4613      	mov	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e04a      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	461a      	mov	r2, r3
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	ea02 0400 	and.w	r4, r2, r0
 8004f96:	ea03 0501 	and.w	r5, r3, r1
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	014b      	lsls	r3, r1, #5
 8004fa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fac:	0142      	lsls	r2, r0, #5
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	1b00      	subs	r0, r0, r4
 8004fb4:	eb61 0105 	sbc.w	r1, r1, r5
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	018b      	lsls	r3, r1, #6
 8004fc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fc6:	0182      	lsls	r2, r0, #6
 8004fc8:	1a12      	subs	r2, r2, r0
 8004fca:	eb63 0301 	sbc.w	r3, r3, r1
 8004fce:	f04f 0000 	mov.w	r0, #0
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	00d9      	lsls	r1, r3, #3
 8004fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fdc:	00d0      	lsls	r0, r2, #3
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	1912      	adds	r2, r2, r4
 8004fe4:	eb45 0303 	adc.w	r3, r5, r3
 8004fe8:	f04f 0000 	mov.w	r0, #0
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	0299      	lsls	r1, r3, #10
 8004ff2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ff6:	0290      	lsls	r0, r2, #10
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	461a      	mov	r2, r3
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	f7fb f94a 	bl	80002a0 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4613      	mov	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	3301      	adds	r3, #1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	60bb      	str	r3, [r7, #8]
      break;
 800502e:	e002      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005032:	60bb      	str	r3, [r7, #8]
      break;
 8005034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005036:	68bb      	ldr	r3, [r7, #8]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800
 8005048:	00f42400 	.word	0x00f42400
 800504c:	007a1200 	.word	0x007a1200

08005050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005054:	4b03      	ldr	r3, [pc, #12]	; (8005064 <HAL_RCC_GetHCLKFreq+0x14>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000498 	.word	0x20000498

08005068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800506c:	f7ff fff0 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	0a9b      	lsrs	r3, r3, #10
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <HAL_RCC_GetPCLK1Freq+0x24>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40023800 	.word	0x40023800
 800508c:	0801d268 	.word	0x0801d268

08005090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005094:	f7ff ffdc 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8005098:	4602      	mov	r2, r0
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	0b5b      	lsrs	r3, r3, #13
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	4903      	ldr	r1, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a6:	5ccb      	ldrb	r3, [r1, r3]
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40023800 	.word	0x40023800
 80050b4:	0801d268 	.word	0x0801d268

080050b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	220f      	movs	r2, #15
 80050c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050c8:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_RCC_GetClockConfig+0x5c>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0203 	and.w	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050d4:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <HAL_RCC_GetClockConfig+0x5c>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <HAL_RCC_GetClockConfig+0x5c>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <HAL_RCC_GetClockConfig+0x5c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <HAL_RCC_GetClockConfig+0x60>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0207 	and.w	r2, r3, #7
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800
 8005118:	40023c00 	.word	0x40023c00

0800511c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e022      	b.n	8005174 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fd f8bd 	bl	80022c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2203      	movs	r2, #3
 800514a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f814 	bl	800517c <HAL_SD_InitCard>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e00a      	b.n	8005174 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800517c:	b5b0      	push	{r4, r5, r7, lr}
 800517e:	b08e      	sub	sp, #56	; 0x38
 8005180:	af04      	add	r7, sp, #16
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005184:	2300      	movs	r3, #0
 8005186:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005198:	2376      	movs	r3, #118	; 0x76
 800519a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681d      	ldr	r5, [r3, #0]
 80051a0:	466c      	mov	r4, sp
 80051a2:	f107 0314 	add.w	r3, r7, #20
 80051a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051b4:	4628      	mov	r0, r5
 80051b6:	f002 f8a3 	bl	8007300 <SDIO_Init>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80051c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e04c      	b.n	8005266 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80051cc:	4b28      	ldr	r3, [pc, #160]	; (8005270 <HAL_SD_InitCard+0xf4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f002 f8db 	bl	8007392 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80051dc:	4b24      	ldr	r3, [pc, #144]	; (8005270 <HAL_SD_InitCard+0xf4>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f001 f804 	bl	80061f0 <SD_PowerON>
 80051e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e02e      	b.n	8005266 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 ff25 	bl	8006058 <SD_InitCard>
 800520e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e01b      	b.n	8005266 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005236:	4618      	mov	r0, r3
 8005238:	f002 f93e 	bl	80074b8 <SDMMC_CmdBlockLength>
 800523c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00f      	beq.n	8005264 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <HAL_SD_InitCard+0xf8>)
 800524a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3728      	adds	r7, #40	; 0x28
 800526a:	46bd      	mov	sp, r7
 800526c:	bdb0      	pop	{r4, r5, r7, pc}
 800526e:	bf00      	nop
 8005270:	422580a0 	.word	0x422580a0
 8005274:	004005ff 	.word	0x004005ff

08005278 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d107      	bne.n	80052a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0c0      	b.n	8005422 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f040 80b9 	bne.w	8005420 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80052b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	441a      	add	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	429a      	cmp	r2, r3
 80052c0:	d907      	bls.n	80052d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0a7      	b.n	8005422 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2203      	movs	r2, #3
 80052d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80052f0:	f043 0302 	orr.w	r3, r3, #2
 80052f4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	4a4c      	ldr	r2, [pc, #304]	; (800542c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80052fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	4a4b      	ldr	r2, [pc, #300]	; (8005430 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005304:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2200      	movs	r2, #0
 800530c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3380      	adds	r3, #128	; 0x80
 800533c:	4619      	mov	r1, r3
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	025b      	lsls	r3, r3, #9
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	f7fd fc91 	bl	8002c6c <HAL_DMA_Start_IT>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d017      	beq.n	8005380 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800535e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a33      	ldr	r2, [pc, #204]	; (8005434 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e050      	b.n	8005422 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	2b01      	cmp	r3, #1
 800538c:	d002      	beq.n	8005394 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	025b      	lsls	r3, r3, #9
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005398:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	025b      	lsls	r3, r3, #9
 800539e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80053a0:	2390      	movs	r3, #144	; 0x90
 80053a2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80053a4:	2302      	movs	r3, #2
 80053a6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f107 0210 	add.w	r2, r7, #16
 80053b8:	4611      	mov	r1, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f002 f850 	bl	8007460 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d90a      	bls.n	80053dc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2282      	movs	r2, #130	; 0x82
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053d2:	4618      	mov	r0, r3
 80053d4:	f002 f8b4 	bl	8007540 <SDMMC_CmdReadMultiBlock>
 80053d8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80053da:	e009      	b.n	80053f0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2281      	movs	r2, #129	; 0x81
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 f887 	bl	80074fc <SDMMC_CmdReadSingleBlock>
 80053ee:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d012      	beq.n	800541c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	431a      	orrs	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e002      	b.n	8005422 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	e000      	b.n	8005422 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8005420:	2302      	movs	r3, #2
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3730      	adds	r7, #48	; 0x30
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	08005e67 	.word	0x08005e67
 8005430:	08005ed9 	.word	0x08005ed9
 8005434:	004005ff 	.word	0x004005ff
 8005438:	4225858c 	.word	0x4225858c

0800543c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d107      	bne.n	8005464 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0c5      	b.n	80055f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	f040 80be 	bne.w	80055ee <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	441a      	add	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	429a      	cmp	r2, r3
 8005484:	d907      	bls.n	8005496 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0ac      	b.n	80055f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2203      	movs	r2, #3
 800549a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	4a4e      	ldr	r2, [pc, #312]	; (80055f8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80054c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	4a4d      	ldr	r2, [pc, #308]	; (80055fc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80054c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	2200      	movs	r2, #0
 80054d0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d002      	beq.n	80054e0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	025b      	lsls	r3, r3, #9
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d90a      	bls.n	80054fc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	22a0      	movs	r2, #160	; 0xa0
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f2:	4618      	mov	r0, r3
 80054f4:	f002 f868 	bl	80075c8 <SDMMC_CmdWriteMultiBlock>
 80054f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80054fa:	e009      	b.n	8005510 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2290      	movs	r2, #144	; 0x90
 8005500:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005508:	4618      	mov	r0, r3
 800550a:	f002 f83b 	bl	8007584 <SDMMC_CmdWriteSingleBlock>
 800550e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d012      	beq.n	800553c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a39      	ldr	r2, [pc, #228]	; (8005600 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e059      	b.n	80055f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800553c:	4b31      	ldr	r3, [pc, #196]	; (8005604 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005546:	2240      	movs	r2, #64	; 0x40
 8005548:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3380      	adds	r3, #128	; 0x80
 8005572:	461a      	mov	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	025b      	lsls	r3, r3, #9
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	f7fd fb77 	bl	8002c6c <HAL_DMA_Start_IT>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01c      	beq.n	80055be <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8005592:	f023 0302 	bic.w	r3, r3, #2
 8005596:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e018      	b.n	80055f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80055be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055c2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	025b      	lsls	r3, r3, #9
 80055c8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80055ca:	2390      	movs	r3, #144	; 0x90
 80055cc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80055d6:	2301      	movs	r3, #1
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f107 0210 	add.w	r2, r7, #16
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 ff3b 	bl	8007460 <SDIO_ConfigData>

      return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3730      	adds	r7, #48	; 0x30
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	08005e3d 	.word	0x08005e3d
 80055fc:	08005ed9 	.word	0x08005ed9
 8005600:	004005ff 	.word	0x004005ff
 8005604:	4225858c 	.word	0x4225858c

08005608 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_SD_IRQHandler+0x2e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fffd 	bl	800662e <SD_Read_IT>
 8005634:	e165      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 808f 	beq.w	8005764 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800565e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005662:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d039      	beq.n	80056f2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <HAL_SD_IRQHandler+0x8a>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f001 ffb8 	bl	800760c <SDMMC_CmdStopTransfer>
 800569c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d008      	beq.n	80056b6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f92f 	bl	8005914 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80056be:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <HAL_SD_IRQHandler+0xda>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f002 fc26 	bl	8007f34 <HAL_SD_RxCpltCallback>
 80056e8:	e10b      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f002 fc18 	bl	8007f20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80056f0:	e107      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8102 	beq.w	8005902 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d011      	beq.n	800572c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f001 ff7d 	bl	800760c <SDMMC_CmdStopTransfer>
 8005712:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f8f4 	bl	8005914 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	f040 80e5 	bne.w	8005902 <HAL_SD_IRQHandler+0x2fa>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 80df 	bne.w	8005902 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0208 	bic.w	r2, r2, #8
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f002 fbdf 	bl	8007f20 <HAL_SD_TxCpltCallback>
}
 8005762:	e0ce      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <HAL_SD_IRQHandler+0x17c>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 ffa7 	bl	80066d0 <SD_Write_IT>
 8005782:	e0be      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578a:	f240 233a 	movw	r3, #570	; 0x23a
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80b6 	beq.w	8005902 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	f043 0202 	orr.w	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f043 0208 	orr.w	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f043 0210 	orr.w	r2, r3, #16
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	f043 0208 	orr.w	r2, r3, #8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f240 723a 	movw	r2, #1850	; 0x73a
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005830:	f023 0302 	bic.w	r3, r3, #2
 8005834:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f001 fee6 	bl	800760c <SDMMC_CmdStopTransfer>
 8005840:	4602      	mov	r2, r0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f855 	bl	8005914 <HAL_SD_ErrorCallback>
}
 800586a:	e04a      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005872:	2b00      	cmp	r3, #0
 8005874:	d045      	beq.n	8005902 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <HAL_SD_IRQHandler+0x282>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d011      	beq.n	80058ae <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <HAL_SD_IRQHandler+0x304>)
 8005890:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	4618      	mov	r0, r3
 8005898:	f7fd fa40 	bl	8002d1c <HAL_DMA_Abort_IT>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d02f      	beq.n	8005902 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fb68 	bl	8005f7c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80058ac:	e029      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <HAL_SD_IRQHandler+0x2ba>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d011      	beq.n	80058e6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	4a12      	ldr	r2, [pc, #72]	; (8005910 <HAL_SD_IRQHandler+0x308>)
 80058c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fd fa24 	bl	8002d1c <HAL_DMA_Abort_IT>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d013      	beq.n	8005902 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb83 	bl	8005fea <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80058e4:	e00d      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f002 fb06 	bl	8007f0c <HAL_SD_AbortCallback>
}
 8005900:	e7ff      	b.n	8005902 <HAL_SD_IRQHandler+0x2fa>
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	08005f7d 	.word	0x08005f7d
 8005910:	08005feb 	.word	0x08005feb

08005914 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005936:	0f9b      	lsrs	r3, r3, #30
 8005938:	b2da      	uxtb	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005942:	0e9b      	lsrs	r3, r3, #26
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	b2da      	uxtb	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005954:	0e1b      	lsrs	r3, r3, #24
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	b2da      	uxtb	r2, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005966:	0c1b      	lsrs	r3, r3, #16
 8005968:	b2da      	uxtb	r2, r3
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	b2da      	uxtb	r2, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597e:	b2da      	uxtb	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005988:	0d1b      	lsrs	r3, r3, #20
 800598a:	b29a      	uxth	r2, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005994:	0c1b      	lsrs	r3, r3, #16
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	b2da      	uxtb	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a6:	0bdb      	lsrs	r3, r3, #15
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b8:	0b9b      	lsrs	r3, r3, #14
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ca:	0b5b      	lsrs	r3, r3, #13
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059dc:	0b1b      	lsrs	r3, r3, #12
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2200      	movs	r2, #0
 80059ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d163      	bne.n	8005ac0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fc:	009a      	lsls	r2, r3, #2
 80059fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a02:	4013      	ands	r3, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005a08:	0f92      	lsrs	r2, r2, #30
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a14:	0edb      	lsrs	r3, r3, #27
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	0e1b      	lsrs	r3, r3, #24
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a38:	0d5b      	lsrs	r3, r3, #21
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4a:	0c9b      	lsrs	r3, r3, #18
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a5c:	0bdb      	lsrs	r3, r3, #15
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	7e1b      	ldrb	r3, [r3, #24]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	3302      	adds	r3, #2
 8005a80:	2201      	movs	r2, #1
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005a8a:	fb02 f203 	mul.w	r2, r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	7a1b      	ldrb	r3, [r3, #8]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005aac:	0a52      	lsrs	r2, r2, #9
 8005aae:	fb02 f203 	mul.w	r2, r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005abc:	661a      	str	r2, [r3, #96]	; 0x60
 8005abe:	e031      	b.n	8005b24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d11d      	bne.n	8005b04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	029a      	lsls	r2, r3, #10
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	661a      	str	r2, [r3, #96]	; 0x60
 8005b02:	e00f      	b.n	8005b24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a58      	ldr	r2, [pc, #352]	; (8005c6c <HAL_SD_GetCardCSD+0x344>)
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e09d      	b.n	8005c60 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b28:	0b9b      	lsrs	r3, r3, #14
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3a:	09db      	lsrs	r3, r3, #7
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	0fdb      	lsrs	r3, r3, #31
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b68:	0f5b      	lsrs	r3, r3, #29
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	0e9b      	lsrs	r3, r3, #26
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	0d9b      	lsrs	r3, r3, #22
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	0d5b      	lsrs	r3, r3, #21
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	0bdb      	lsrs	r3, r3, #15
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	0b9b      	lsrs	r3, r3, #14
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	0b5b      	lsrs	r3, r3, #13
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	0b1b      	lsrs	r3, r3, #12
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	0a9b      	lsrs	r3, r3, #10
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	004005ff 	.word	0x004005ff

08005c70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005cc8:	b5b0      	push	{r4, r5, r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2203      	movs	r2, #3
 8005cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d02e      	beq.n	8005d46 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cee:	d106      	bne.n	8005cfe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8005cfc:	e029      	b.n	8005d52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d04:	d10a      	bne.n	8005d1c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fb28 	bl	800635c <SD_WideBus_Enable>
 8005d0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
 8005d1a:	e01a      	b.n	8005d52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fb65 	bl	80063f2 <SD_WideBus_Disable>
 8005d28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
 8005d36:	e00c      	b.n	8005d52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
 8005d44:	e005      	b.n	8005d52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d70:	e01f      	b.n	8005db2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681d      	ldr	r5, [r3, #0]
 8005d98:	466c      	mov	r4, sp
 8005d9a:	f107 0314 	add.w	r3, r7, #20
 8005d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005da6:	f107 0308 	add.w	r3, r7, #8
 8005daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dac:	4628      	mov	r0, r5
 8005dae:	f001 faa7 	bl	8007300 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 fb7c 	bl	80074b8 <SDMMC_CmdBlockLength>
 8005dc0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00c      	beq.n	8005de2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3728      	adds	r7, #40	; 0x28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bdb0      	pop	{r4, r5, r7, pc}
 8005df6:	bf00      	nop
 8005df8:	004005ff 	.word	0x004005ff

08005dfc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005e08:	f107 030c 	add.w	r3, r7, #12
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa7c 	bl	800630c <SD_SendStatus>
 8005e14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	0a5b      	lsrs	r3, r3, #9
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005e32:	693b      	ldr	r3, [r7, #16]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	2b82      	cmp	r3, #130	; 0x82
 8005e7a:	d111      	bne.n	8005ea0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 fbc3 	bl	800760c <SDMMC_CmdStopTransfer>
 8005e86:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff fd3a 	bl	8005914 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0208 	bic.w	r2, r2, #8
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f002 f833 	bl	8007f34 <HAL_SD_RxCpltCallback>
#endif
}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fd f8c4 	bl	8003074 <HAL_DMA_GetError>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d03e      	beq.n	8005f70 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d002      	beq.n	8005f0e <SD_DMAError+0x36>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d12d      	bne.n	8005f6a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <SD_DMAError+0xa0>)
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005f24:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005f32:	6978      	ldr	r0, [r7, #20]
 8005f34:	f7ff ff62 	bl	8005dfc <HAL_SD_GetCardState>
 8005f38:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d002      	beq.n	8005f46 <SD_DMAError+0x6e>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d10a      	bne.n	8005f5c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 fb5e 	bl	800760c <SDMMC_CmdStopTransfer>
 8005f50:	4602      	mov	r2, r0
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	431a      	orrs	r2, r3
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2200      	movs	r2, #0
 8005f68:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7ff fcd2 	bl	8005914 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	004005ff 	.word	0x004005ff

08005f7c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff ff31 	bl	8005dfc <HAL_SD_GetCardState>
 8005f9a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d002      	beq.n	8005fb6 <SD_DMATxAbort+0x3a>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d10a      	bne.n	8005fcc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fb26 	bl	800760c <SDMMC_CmdStopTransfer>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d103      	bne.n	8005fdc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f001 ff99 	bl	8007f0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005fda:	e002      	b.n	8005fe2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fc99 	bl	8005914 <HAL_SD_ErrorCallback>
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f240 523a 	movw	r2, #1338	; 0x53a
 8006000:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f7ff fefa 	bl	8005dfc <HAL_SD_GetCardState>
 8006008:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b06      	cmp	r3, #6
 800601c:	d002      	beq.n	8006024 <SD_DMARxAbort+0x3a>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b05      	cmp	r3, #5
 8006022:	d10a      	bne.n	800603a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f001 faef 	bl	800760c <SDMMC_CmdStopTransfer>
 800602e:	4602      	mov	r2, r0
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	431a      	orrs	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 ff62 	bl	8007f0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006048:	e002      	b.n	8006050 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff fc62 	bl	8005914 <HAL_SD_ErrorCallback>
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006058:	b5b0      	push	{r4, r5, r7, lr}
 800605a:	b094      	sub	sp, #80	; 0x50
 800605c:	af04      	add	r7, sp, #16
 800605e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006060:	2301      	movs	r3, #1
 8006062:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f001 f9a1 	bl	80073b0 <SDIO_GetPowerState>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006074:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006078:	e0b6      	b.n	80061e8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	2b03      	cmp	r3, #3
 8006080:	d02f      	beq.n	80060e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fbca 	bl	8007820 <SDMMC_CmdSendCID>
 800608c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800608e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <SD_InitCard+0x40>
    {
      return errorstate;
 8006094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006096:	e0a7      	b.n	80061e8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f9cb 	bl	800743a <SDIO_GetResponse>
 80060a4:	4602      	mov	r2, r0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2104      	movs	r1, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 f9c2 	bl	800743a <SDIO_GetResponse>
 80060b6:	4602      	mov	r2, r0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2108      	movs	r1, #8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f9b9 	bl	800743a <SDIO_GetResponse>
 80060c8:	4602      	mov	r2, r0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	210c      	movs	r1, #12
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 f9b0 	bl	800743a <SDIO_GetResponse>
 80060da:	4602      	mov	r2, r0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d00d      	beq.n	8006106 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f107 020e 	add.w	r2, r7, #14
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fbd0 	bl	800789a <SDMMC_CmdSetRelAdd>
 80060fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <SD_InitCard+0xae>
    {
      return errorstate;
 8006102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006104:	e070      	b.n	80061e8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	2b03      	cmp	r3, #3
 800610c:	d036      	beq.n	800617c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800610e:	89fb      	ldrh	r3, [r7, #14]
 8006110:	461a      	mov	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f001 fb9a 	bl	800785c <SDMMC_CmdSendCSD>
 8006128:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006132:	e059      	b.n	80061e8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f001 f97d 	bl	800743a <SDIO_GetResponse>
 8006140:	4602      	mov	r2, r0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2104      	movs	r1, #4
 800614c:	4618      	mov	r0, r3
 800614e:	f001 f974 	bl	800743a <SDIO_GetResponse>
 8006152:	4602      	mov	r2, r0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2108      	movs	r1, #8
 800615e:	4618      	mov	r0, r3
 8006160:	f001 f96b 	bl	800743a <SDIO_GetResponse>
 8006164:	4602      	mov	r2, r0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	210c      	movs	r1, #12
 8006170:	4618      	mov	r0, r3
 8006172:	f001 f962 	bl	800743a <SDIO_GetResponse>
 8006176:	4602      	mov	r2, r0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2104      	movs	r1, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f001 f959 	bl	800743a <SDIO_GetResponse>
 8006188:	4603      	mov	r3, r0
 800618a:	0d1a      	lsrs	r2, r3, #20
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006190:	f107 0310 	add.w	r3, r7, #16
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fbc6 	bl	8005928 <HAL_SD_GetCardCSD>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061a6:	e01f      	b.n	80061e8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	461a      	mov	r2, r3
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	4608      	mov	r0, r1
 80061ba:	f001 fa49 	bl	8007650 <SDMMC_CmdSelDesel>
 80061be:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80061c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <SD_InitCard+0x172>
  {
    return errorstate;
 80061c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c8:	e00e      	b.n	80061e8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681d      	ldr	r5, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	466c      	mov	r4, sp
 80061d2:	f103 0210 	add.w	r2, r3, #16
 80061d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80061d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061dc:	3304      	adds	r3, #4
 80061de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061e0:	4628      	mov	r0, r5
 80061e2:	f001 f88d 	bl	8007300 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3740      	adds	r7, #64	; 0x40
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bdb0      	pop	{r4, r5, r7, pc}

080061f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	2300      	movs	r3, #0
 8006202:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f001 fa44 	bl	8007696 <SDMMC_CmdGoIdleState>
 800620e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	e072      	b.n	8006300 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f001 fa57 	bl	80076d2 <SDMMC_CmdOperCond>
 8006224:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fa2d 	bl	8007696 <SDMMC_CmdGoIdleState>
 800623c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	e05b      	b.n	8006300 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	2b01      	cmp	r3, #1
 8006254:	d137      	bne.n	80062c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fa57 	bl	8007710 <SDMMC_CmdAppCommand>
 8006262:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d02d      	beq.n	80062c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800626a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800626e:	e047      	b.n	8006300 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2100      	movs	r1, #0
 8006276:	4618      	mov	r0, r3
 8006278:	f001 fa4a 	bl	8007710 <SDMMC_CmdAppCommand>
 800627c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <SD_PowerON+0x98>
    {
      return errorstate;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	e03b      	b.n	8006300 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	491e      	ldr	r1, [pc, #120]	; (8006308 <SD_PowerON+0x118>)
 800628e:	4618      	mov	r0, r3
 8006290:	f001 fa60 	bl	8007754 <SDMMC_CmdAppOperCommand>
 8006294:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800629c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062a0:	e02e      	b.n	8006300 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 f8c6 	bl	800743a <SDIO_GetResponse>
 80062ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	0fdb      	lsrs	r3, r3, #31
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <SD_PowerON+0xcc>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <SD_PowerON+0xce>
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]

    count++;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d802      	bhi.n	80062d6 <SD_PowerON+0xe6>
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0cc      	beq.n	8006270 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062dc:	4293      	cmp	r3, r2
 80062de:	d902      	bls.n	80062e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80062e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062e4:	e00c      	b.n	8006300 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
 80062f6:	e002      	b.n	80062fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	c1100000 	.word	0xc1100000

0800630c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800631c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006320:	e018      	b.n	8006354 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f001 fad4 	bl	80078dc <SDMMC_CmdSendStatus>
 8006334:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <SD_SendStatus+0x34>
  {
    return errorstate;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	e009      	b.n	8006354 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2100      	movs	r1, #0
 8006346:	4618      	mov	r0, r3
 8006348:	f001 f877 	bl	800743a <SDIO_GetResponse>
 800634c:	4602      	mov	r2, r0
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2100      	movs	r1, #0
 8006372:	4618      	mov	r0, r3
 8006374:	f001 f861 	bl	800743a <SDIO_GetResponse>
 8006378:	4603      	mov	r3, r0
 800637a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006382:	d102      	bne.n	800638a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006388:	e02f      	b.n	80063ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800638a:	f107 030c 	add.w	r3, r7, #12
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f879 	bl	8006488 <SD_FindSCR>
 8006396:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	e023      	b.n	80063ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01c      	beq.n	80063e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f001 f9a9 	bl	8007710 <SDMMC_CmdAppCommand>
 80063be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	e00f      	b.n	80063ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2102      	movs	r1, #2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 f9e2 	bl	800779a <SDMMC_CmdBusWidth>
 80063d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	e003      	b.n	80063ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e001      	b.n	80063ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80063e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b086      	sub	sp, #24
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	2300      	movs	r3, #0
 8006400:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2100      	movs	r1, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f816 	bl	800743a <SDIO_GetResponse>
 800640e:	4603      	mov	r3, r0
 8006410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006418:	d102      	bne.n	8006420 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800641a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800641e:	e02f      	b.n	8006480 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006420:	f107 030c 	add.w	r3, r7, #12
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f82e 	bl	8006488 <SD_FindSCR>
 800642c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	e023      	b.n	8006480 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01c      	beq.n	800647c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644a:	041b      	lsls	r3, r3, #16
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f001 f95e 	bl	8007710 <SDMMC_CmdAppCommand>
 8006454:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	e00f      	b.n	8006480 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f001 f997 	bl	800779a <SDMMC_CmdBusWidth>
 800646c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	e003      	b.n	8006480 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006478:	2300      	movs	r3, #0
 800647a:	e001      	b.n	8006480 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800647c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b08f      	sub	sp, #60	; 0x3c
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006492:	f7fc fa2b 	bl	80028ec <HAL_GetTick>
 8006496:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2108      	movs	r1, #8
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f802 	bl	80074b8 <SDMMC_CmdBlockLength>
 80064b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	e0b2      	b.n	8006626 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c8:	041b      	lsls	r3, r3, #16
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f001 f91f 	bl	8007710 <SDMMC_CmdAppCommand>
 80064d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <SD_FindSCR+0x56>
  {
    return errorstate;
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	e0a3      	b.n	8006626 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80064e4:	2308      	movs	r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80064e8:	2330      	movs	r3, #48	; 0x30
 80064ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80064ec:	2302      	movs	r3, #2
 80064ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f107 0210 	add.w	r2, r7, #16
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f000 ffac 	bl	8007460 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4618      	mov	r0, r3
 800650e:	f001 f966 	bl	80077de <SDMMC_CmdSendSCR>
 8006512:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d02a      	beq.n	8006570 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	e083      	b.n	8006626 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6819      	ldr	r1, [r3, #0]
 8006530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	f107 0208 	add.w	r2, r7, #8
 8006538:	18d4      	adds	r4, r2, r3
 800653a:	4608      	mov	r0, r1
 800653c:	f000 ff0b 	bl	8007356 <SDIO_ReadFIFO>
 8006540:	4603      	mov	r3, r0
 8006542:	6023      	str	r3, [r4, #0]
      index++;
 8006544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006546:	3301      	adds	r3, #1
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
 800654a:	e006      	b.n	800655a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d012      	beq.n	8006580 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800655a:	f7fc f9c7 	bl	80028ec <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006568:	d102      	bne.n	8006570 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800656a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800656e:	e05a      	b.n	8006626 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006576:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0cf      	beq.n	800651e <SD_FindSCR+0x96>
 800657e:	e000      	b.n	8006582 <SD_FindSCR+0xfa>
      break;
 8006580:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2208      	movs	r2, #8
 8006596:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006598:	2308      	movs	r3, #8
 800659a:	e044      	b.n	8006626 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d005      	beq.n	80065b6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2202      	movs	r2, #2
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80065b2:	2302      	movs	r3, #2
 80065b4:	e037      	b.n	8006626 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2220      	movs	r2, #32
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80065cc:	2320      	movs	r3, #32
 80065ce:	e02a      	b.n	8006626 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	061a      	lsls	r2, r3, #24
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	0a1b      	lsrs	r3, r3, #8
 80065ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	0e1b      	lsrs	r3, r3, #24
 80065f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	601a      	str	r2, [r3, #0]
    scr++;
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	3304      	adds	r3, #4
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	061a      	lsls	r2, r3, #24
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800660e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006618:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	0e1b      	lsrs	r3, r3, #24
 800661e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	373c      	adds	r7, #60	; 0x3c
 800662a:	46bd      	mov	sp, r7
 800662c:	bd90      	pop	{r4, r7, pc}

0800662e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d03f      	beq.n	80066c8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	e033      	b.n	80066b6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fe7f 	bl	8007356 <SDIO_ReadFIFO>
 8006658:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	3b01      	subs	r3, #1
 800666c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	b2da      	uxtb	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3b01      	subs	r3, #1
 8006682:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3301      	adds	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	3b01      	subs	r3, #1
 8006698:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	0e1b      	lsrs	r3, r3, #24
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	3301      	adds	r3, #1
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b07      	cmp	r3, #7
 80066ba:	d9c8      	bls.n	800664e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80066c8:	bf00      	nop
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d043      	beq.n	8006772 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80066ea:	2300      	movs	r3, #0
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	e037      	b.n	8006760 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3301      	adds	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4313      	orrs	r3, r2
 800670c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3b01      	subs	r3, #1
 8006718:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	041a      	lsls	r2, r3, #16
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4313      	orrs	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3b01      	subs	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	061a      	lsls	r2, r3, #24
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4313      	orrs	r3, r2
 800673c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3b01      	subs	r3, #1
 8006748:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f107 0208 	add.w	r2, r7, #8
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fe0b 	bl	8007370 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	3301      	adds	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b07      	cmp	r3, #7
 8006764:	d9c4      	bls.n	80066f0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006772:	bf00      	nop
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e041      	b.n	8006810 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f839 	bl	8006818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f000 f9d7 	bl	8006b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	d001      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e04e      	b.n	80068e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d022      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x80>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d01d      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x80>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1f      	ldr	r2, [pc, #124]	; (80068f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d018      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x80>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1e      	ldr	r2, [pc, #120]	; (80068f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x80>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <HAL_TIM_Base_Start_IT+0xd0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00e      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x80>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1b      	ldr	r2, [pc, #108]	; (8006900 <HAL_TIM_Base_Start_IT+0xd4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d009      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x80>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <HAL_TIM_Base_Start_IT+0xd8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x80>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <HAL_TIM_Base_Start_IT+0xdc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d111      	bne.n	80068d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b06      	cmp	r3, #6
 80068bc:	d010      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0201 	orr.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ce:	e007      	b.n	80068e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40000c00 	.word	0x40000c00
 8006900:	40010400 	.word	0x40010400
 8006904:	40014000 	.word	0x40014000
 8006908:	40001800 	.word	0x40001800

0800690c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b02      	cmp	r3, #2
 8006920:	d122      	bne.n	8006968 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b02      	cmp	r3, #2
 800692e:	d11b      	bne.n	8006968 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0202 	mvn.w	r2, #2
 8006938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f8ee 	bl	8006b30 <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f8e0 	bl	8006b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f8f1 	bl	8006b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b04      	cmp	r3, #4
 8006974:	d122      	bne.n	80069bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b04      	cmp	r3, #4
 8006982:	d11b      	bne.n	80069bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0204 	mvn.w	r2, #4
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8c4 	bl	8006b30 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f8b6 	bl	8006b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f8c7 	bl	8006b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b08      	cmp	r3, #8
 80069c8:	d122      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d11b      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0208 	mvn.w	r2, #8
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2204      	movs	r2, #4
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f89a 	bl	8006b30 <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f88c 	bl	8006b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f89d 	bl	8006b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b10      	cmp	r3, #16
 8006a1c:	d122      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d11b      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0210 	mvn.w	r2, #16
 8006a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2208      	movs	r2, #8
 8006a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f870 	bl	8006b30 <HAL_TIM_IC_CaptureCallback>
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f862 	bl	8006b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f873 	bl	8006b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d10e      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d107      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0201 	mvn.w	r2, #1
 8006a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fb fbd8 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d10e      	bne.n	8006abc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d107      	bne.n	8006abc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f902 	bl	8006cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b40      	cmp	r3, #64	; 0x40
 8006ac8:	d10e      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d107      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f838 	bl	8006b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d10e      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d107      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0220 	mvn.w	r2, #32
 8006b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8cc 	bl	8006cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a40      	ldr	r2, [pc, #256]	; (8006c80 <TIM_Base_SetConfig+0x114>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8a:	d00f      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3d      	ldr	r2, [pc, #244]	; (8006c84 <TIM_Base_SetConfig+0x118>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00b      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3c      	ldr	r2, [pc, #240]	; (8006c88 <TIM_Base_SetConfig+0x11c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3b      	ldr	r2, [pc, #236]	; (8006c8c <TIM_Base_SetConfig+0x120>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3a      	ldr	r2, [pc, #232]	; (8006c90 <TIM_Base_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d108      	bne.n	8006bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2f      	ldr	r2, [pc, #188]	; (8006c80 <TIM_Base_SetConfig+0x114>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d02b      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bcc:	d027      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2c      	ldr	r2, [pc, #176]	; (8006c84 <TIM_Base_SetConfig+0x118>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d023      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2b      	ldr	r2, [pc, #172]	; (8006c88 <TIM_Base_SetConfig+0x11c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01f      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2a      	ldr	r2, [pc, #168]	; (8006c8c <TIM_Base_SetConfig+0x120>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01b      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a29      	ldr	r2, [pc, #164]	; (8006c90 <TIM_Base_SetConfig+0x124>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d017      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a28      	ldr	r2, [pc, #160]	; (8006c94 <TIM_Base_SetConfig+0x128>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a27      	ldr	r2, [pc, #156]	; (8006c98 <TIM_Base_SetConfig+0x12c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00f      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a26      	ldr	r2, [pc, #152]	; (8006c9c <TIM_Base_SetConfig+0x130>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00b      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a25      	ldr	r2, [pc, #148]	; (8006ca0 <TIM_Base_SetConfig+0x134>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d007      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a24      	ldr	r2, [pc, #144]	; (8006ca4 <TIM_Base_SetConfig+0x138>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d003      	beq.n	8006c1e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a23      	ldr	r2, [pc, #140]	; (8006ca8 <TIM_Base_SetConfig+0x13c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d108      	bne.n	8006c30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <TIM_Base_SetConfig+0x114>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_Base_SetConfig+0xf8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a0c      	ldr	r2, [pc, #48]	; (8006c90 <TIM_Base_SetConfig+0x124>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d103      	bne.n	8006c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	691a      	ldr	r2, [r3, #16]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	615a      	str	r2, [r3, #20]
}
 8006c72:	bf00      	nop
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40000400 	.word	0x40000400
 8006c88:	40000800 	.word	0x40000800
 8006c8c:	40000c00 	.word	0x40000c00
 8006c90:	40010400 	.word	0x40010400
 8006c94:	40014000 	.word	0x40014000
 8006c98:	40014400 	.word	0x40014400
 8006c9c:	40014800 	.word	0x40014800
 8006ca0:	40001800 	.word	0x40001800
 8006ca4:	40001c00 	.word	0x40001c00
 8006ca8:	40002000 	.word	0x40002000

08006cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e03f      	b.n	8006d66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fb fbe0 	bl	80024c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2224      	movs	r2, #36	; 0x24
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f929 	bl	8006f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b08a      	sub	sp, #40	; 0x28
 8006d72:	af02      	add	r7, sp, #8
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	603b      	str	r3, [r7, #0]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d17c      	bne.n	8006e88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_UART_Transmit+0x2c>
 8006d94:	88fb      	ldrh	r3, [r7, #6]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e075      	b.n	8006e8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <HAL_UART_Transmit+0x3e>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e06e      	b.n	8006e8a <HAL_UART_Transmit+0x11c>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2221      	movs	r2, #33	; 0x21
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dc2:	f7fb fd93 	bl	80028ec <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	88fa      	ldrh	r2, [r7, #6]
 8006dd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ddc:	d108      	bne.n	8006df0 <HAL_UART_Transmit+0x82>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	e003      	b.n	8006df8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e00:	e02a      	b.n	8006e58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f840 	bl	8006e92 <UART_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e036      	b.n	8006e8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10b      	bne.n	8006e3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	3302      	adds	r3, #2
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	e007      	b.n	8006e4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	781a      	ldrb	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	3301      	adds	r3, #1
 8006e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1cf      	bne.n	8006e02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2140      	movs	r1, #64	; 0x40
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f810 	bl	8006e92 <UART_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e006      	b.n	8006e8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	e000      	b.n	8006e8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006e88:	2302      	movs	r3, #2
  }
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3720      	adds	r7, #32
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b090      	sub	sp, #64	; 0x40
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea2:	e050      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eaa:	d04c      	beq.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eb2:	f7fb fd1b 	bl	80028ec <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d241      	bcs.n	8006f46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ee2:	637a      	str	r2, [r7, #52]	; 0x34
 8006ee4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e5      	bne.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3314      	adds	r3, #20
 8006efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	613b      	str	r3, [r7, #16]
   return(result);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3314      	adds	r3, #20
 8006f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f16:	623a      	str	r2, [r7, #32]
 8006f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	69f9      	ldr	r1, [r7, #28]
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e5      	bne.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e00f      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	bf0c      	ite	eq
 8006f56:	2301      	moveq	r3, #1
 8006f58:	2300      	movne	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d09f      	beq.n	8006ea4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3740      	adds	r7, #64	; 0x40
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	b09f      	sub	sp, #124	; 0x7c
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f86:	68d9      	ldr	r1, [r3, #12]
 8006f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	ea40 0301 	orr.w	r3, r0, r1
 8006f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fb4:	f021 010c 	bic.w	r1, r1, #12
 8006fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fce:	6999      	ldr	r1, [r3, #24]
 8006fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	ea40 0301 	orr.w	r3, r0, r1
 8006fd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4bc5      	ldr	r3, [pc, #788]	; (80072f4 <UART_SetConfig+0x384>)
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d004      	beq.n	8006fee <UART_SetConfig+0x7e>
 8006fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4bc3      	ldr	r3, [pc, #780]	; (80072f8 <UART_SetConfig+0x388>)
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d103      	bne.n	8006ff6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fee:	f7fe f84f 	bl	8005090 <HAL_RCC_GetPCLK2Freq>
 8006ff2:	6778      	str	r0, [r7, #116]	; 0x74
 8006ff4:	e002      	b.n	8006ffc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ff6:	f7fe f837 	bl	8005068 <HAL_RCC_GetPCLK1Freq>
 8006ffa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007004:	f040 80b6 	bne.w	8007174 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700a:	461c      	mov	r4, r3
 800700c:	f04f 0500 	mov.w	r5, #0
 8007010:	4622      	mov	r2, r4
 8007012:	462b      	mov	r3, r5
 8007014:	1891      	adds	r1, r2, r2
 8007016:	6439      	str	r1, [r7, #64]	; 0x40
 8007018:	415b      	adcs	r3, r3
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007020:	1912      	adds	r2, r2, r4
 8007022:	eb45 0303 	adc.w	r3, r5, r3
 8007026:	f04f 0000 	mov.w	r0, #0
 800702a:	f04f 0100 	mov.w	r1, #0
 800702e:	00d9      	lsls	r1, r3, #3
 8007030:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007034:	00d0      	lsls	r0, r2, #3
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	1911      	adds	r1, r2, r4
 800703c:	6639      	str	r1, [r7, #96]	; 0x60
 800703e:	416b      	adcs	r3, r5
 8007040:	667b      	str	r3, [r7, #100]	; 0x64
 8007042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	461a      	mov	r2, r3
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	1891      	adds	r1, r2, r2
 800704e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007050:	415b      	adcs	r3, r3
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007058:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800705c:	f7f9 f920 	bl	80002a0 <__aeabi_uldivmod>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4ba5      	ldr	r3, [pc, #660]	; (80072fc <UART_SetConfig+0x38c>)
 8007066:	fba3 2302 	umull	r2, r3, r3, r2
 800706a:	095b      	lsrs	r3, r3, #5
 800706c:	011e      	lsls	r6, r3, #4
 800706e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007070:	461c      	mov	r4, r3
 8007072:	f04f 0500 	mov.w	r5, #0
 8007076:	4622      	mov	r2, r4
 8007078:	462b      	mov	r3, r5
 800707a:	1891      	adds	r1, r2, r2
 800707c:	6339      	str	r1, [r7, #48]	; 0x30
 800707e:	415b      	adcs	r3, r3
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
 8007082:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007086:	1912      	adds	r2, r2, r4
 8007088:	eb45 0303 	adc.w	r3, r5, r3
 800708c:	f04f 0000 	mov.w	r0, #0
 8007090:	f04f 0100 	mov.w	r1, #0
 8007094:	00d9      	lsls	r1, r3, #3
 8007096:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800709a:	00d0      	lsls	r0, r2, #3
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	1911      	adds	r1, r2, r4
 80070a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80070a4:	416b      	adcs	r3, r5
 80070a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	461a      	mov	r2, r3
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	1891      	adds	r1, r2, r2
 80070b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80070b6:	415b      	adcs	r3, r3
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80070c2:	f7f9 f8ed 	bl	80002a0 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4b8c      	ldr	r3, [pc, #560]	; (80072fc <UART_SetConfig+0x38c>)
 80070cc:	fba3 1302 	umull	r1, r3, r3, r2
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	2164      	movs	r1, #100	; 0x64
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	3332      	adds	r3, #50	; 0x32
 80070de:	4a87      	ldr	r2, [pc, #540]	; (80072fc <UART_SetConfig+0x38c>)
 80070e0:	fba2 2303 	umull	r2, r3, r2, r3
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070ec:	441e      	add	r6, r3
 80070ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f0:	4618      	mov	r0, r3
 80070f2:	f04f 0100 	mov.w	r1, #0
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	1894      	adds	r4, r2, r2
 80070fc:	623c      	str	r4, [r7, #32]
 80070fe:	415b      	adcs	r3, r3
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
 8007102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007106:	1812      	adds	r2, r2, r0
 8007108:	eb41 0303 	adc.w	r3, r1, r3
 800710c:	f04f 0400 	mov.w	r4, #0
 8007110:	f04f 0500 	mov.w	r5, #0
 8007114:	00dd      	lsls	r5, r3, #3
 8007116:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800711a:	00d4      	lsls	r4, r2, #3
 800711c:	4622      	mov	r2, r4
 800711e:	462b      	mov	r3, r5
 8007120:	1814      	adds	r4, r2, r0
 8007122:	653c      	str	r4, [r7, #80]	; 0x50
 8007124:	414b      	adcs	r3, r1
 8007126:	657b      	str	r3, [r7, #84]	; 0x54
 8007128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	461a      	mov	r2, r3
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	1891      	adds	r1, r2, r2
 8007134:	61b9      	str	r1, [r7, #24]
 8007136:	415b      	adcs	r3, r3
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800713e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007142:	f7f9 f8ad 	bl	80002a0 <__aeabi_uldivmod>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4b6c      	ldr	r3, [pc, #432]	; (80072fc <UART_SetConfig+0x38c>)
 800714c:	fba3 1302 	umull	r1, r3, r3, r2
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	2164      	movs	r1, #100	; 0x64
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	3332      	adds	r3, #50	; 0x32
 800715e:	4a67      	ldr	r2, [pc, #412]	; (80072fc <UART_SetConfig+0x38c>)
 8007160:	fba2 2303 	umull	r2, r3, r2, r3
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	f003 0207 	and.w	r2, r3, #7
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4432      	add	r2, r6
 8007170:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007172:	e0b9      	b.n	80072e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007176:	461c      	mov	r4, r3
 8007178:	f04f 0500 	mov.w	r5, #0
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	1891      	adds	r1, r2, r2
 8007182:	6139      	str	r1, [r7, #16]
 8007184:	415b      	adcs	r3, r3
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800718c:	1912      	adds	r2, r2, r4
 800718e:	eb45 0303 	adc.w	r3, r5, r3
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	00d9      	lsls	r1, r3, #3
 800719c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071a0:	00d0      	lsls	r0, r2, #3
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	eb12 0804 	adds.w	r8, r2, r4
 80071aa:	eb43 0905 	adc.w	r9, r3, r5
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f04f 0100 	mov.w	r1, #0
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	008b      	lsls	r3, r1, #2
 80071c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071c6:	0082      	lsls	r2, r0, #2
 80071c8:	4640      	mov	r0, r8
 80071ca:	4649      	mov	r1, r9
 80071cc:	f7f9 f868 	bl	80002a0 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4b49      	ldr	r3, [pc, #292]	; (80072fc <UART_SetConfig+0x38c>)
 80071d6:	fba3 2302 	umull	r2, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	011e      	lsls	r6, r3, #4
 80071de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e0:	4618      	mov	r0, r3
 80071e2:	f04f 0100 	mov.w	r1, #0
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	1894      	adds	r4, r2, r2
 80071ec:	60bc      	str	r4, [r7, #8]
 80071ee:	415b      	adcs	r3, r3
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071f6:	1812      	adds	r2, r2, r0
 80071f8:	eb41 0303 	adc.w	r3, r1, r3
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	f04f 0500 	mov.w	r5, #0
 8007204:	00dd      	lsls	r5, r3, #3
 8007206:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800720a:	00d4      	lsls	r4, r2, #3
 800720c:	4622      	mov	r2, r4
 800720e:	462b      	mov	r3, r5
 8007210:	1814      	adds	r4, r2, r0
 8007212:	64bc      	str	r4, [r7, #72]	; 0x48
 8007214:	414b      	adcs	r3, r1
 8007216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	f04f 0100 	mov.w	r1, #0
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	008b      	lsls	r3, r1, #2
 800722c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007230:	0082      	lsls	r2, r0, #2
 8007232:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007236:	f7f9 f833 	bl	80002a0 <__aeabi_uldivmod>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4b2f      	ldr	r3, [pc, #188]	; (80072fc <UART_SetConfig+0x38c>)
 8007240:	fba3 1302 	umull	r1, r3, r3, r2
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	2164      	movs	r1, #100	; 0x64
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	3332      	adds	r3, #50	; 0x32
 8007252:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <UART_SetConfig+0x38c>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800725e:	441e      	add	r6, r3
 8007260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007262:	4618      	mov	r0, r3
 8007264:	f04f 0100 	mov.w	r1, #0
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	1894      	adds	r4, r2, r2
 800726e:	603c      	str	r4, [r7, #0]
 8007270:	415b      	adcs	r3, r3
 8007272:	607b      	str	r3, [r7, #4]
 8007274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007278:	1812      	adds	r2, r2, r0
 800727a:	eb41 0303 	adc.w	r3, r1, r3
 800727e:	f04f 0400 	mov.w	r4, #0
 8007282:	f04f 0500 	mov.w	r5, #0
 8007286:	00dd      	lsls	r5, r3, #3
 8007288:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800728c:	00d4      	lsls	r4, r2, #3
 800728e:	4622      	mov	r2, r4
 8007290:	462b      	mov	r3, r5
 8007292:	eb12 0a00 	adds.w	sl, r2, r0
 8007296:	eb43 0b01 	adc.w	fp, r3, r1
 800729a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	f04f 0100 	mov.w	r1, #0
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	008b      	lsls	r3, r1, #2
 80072ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072b2:	0082      	lsls	r2, r0, #2
 80072b4:	4650      	mov	r0, sl
 80072b6:	4659      	mov	r1, fp
 80072b8:	f7f8 fff2 	bl	80002a0 <__aeabi_uldivmod>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <UART_SetConfig+0x38c>)
 80072c2:	fba3 1302 	umull	r1, r3, r3, r2
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	2164      	movs	r1, #100	; 0x64
 80072ca:	fb01 f303 	mul.w	r3, r1, r3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	3332      	adds	r3, #50	; 0x32
 80072d4:	4a09      	ldr	r2, [pc, #36]	; (80072fc <UART_SetConfig+0x38c>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	f003 020f 	and.w	r2, r3, #15
 80072e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4432      	add	r2, r6
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	bf00      	nop
 80072ea:	377c      	adds	r7, #124	; 0x7c
 80072ec:	46bd      	mov	sp, r7
 80072ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f2:	bf00      	nop
 80072f4:	40011000 	.word	0x40011000
 80072f8:	40011400 	.word	0x40011400
 80072fc:	51eb851f 	.word	0x51eb851f

08007300 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007300:	b084      	sub	sp, #16
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	f107 001c 	add.w	r0, r7, #28
 800730e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007316:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007318:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800731a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800731e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007322:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007326:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800732a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800733a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	b004      	add	sp, #16
 8007354:	4770      	bx	lr

08007356 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2203      	movs	r2, #3
 800739e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80073a0:	2002      	movs	r0, #2
 80073a2:	f7fb faaf 	bl	8002904 <HAL_Delay>
  
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0303 	and.w	r3, r3, #3
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80073ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80073f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80073f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007406:	f023 030f 	bic.w	r3, r3, #15
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	b2db      	uxtb	r3, r3
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3314      	adds	r3, #20
 8007448:	461a      	mov	r2, r3
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	4413      	add	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
}  
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007486:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800748c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007492:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0

}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80074c6:	2310      	movs	r3, #16
 80074c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074ca:	2340      	movs	r3, #64	; 0x40
 80074cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074ce:	2300      	movs	r3, #0
 80074d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074d8:	f107 0308 	add.w	r3, r7, #8
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff ff74 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80074e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e8:	2110      	movs	r1, #16
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa44 	bl	8007978 <SDMMC_GetCmdResp1>
 80074f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074f2:	69fb      	ldr	r3, [r7, #28]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800750a:	2311      	movs	r3, #17
 800750c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800750e:	2340      	movs	r3, #64	; 0x40
 8007510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800751a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800751c:	f107 0308 	add.w	r3, r7, #8
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff ff52 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007528:	f241 3288 	movw	r2, #5000	; 0x1388
 800752c:	2111      	movs	r1, #17
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa22 	bl	8007978 <SDMMC_GetCmdResp1>
 8007534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007536:	69fb      	ldr	r3, [r7, #28]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800754e:	2312      	movs	r3, #18
 8007550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007552:	2340      	movs	r3, #64	; 0x40
 8007554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800755a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800755e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007560:	f107 0308 	add.w	r3, r7, #8
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff ff30 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800756c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007570:	2112      	movs	r1, #18
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa00 	bl	8007978 <SDMMC_GetCmdResp1>
 8007578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800757a:	69fb      	ldr	r3, [r7, #28]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007592:	2318      	movs	r3, #24
 8007594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007596:	2340      	movs	r3, #64	; 0x40
 8007598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800759a:	2300      	movs	r3, #0
 800759c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800759e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075a4:	f107 0308 	add.w	r3, r7, #8
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff ff0e 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80075b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b4:	2118      	movs	r1, #24
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f9de 	bl	8007978 <SDMMC_GetCmdResp1>
 80075bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075be:	69fb      	ldr	r3, [r7, #28]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80075d6:	2319      	movs	r3, #25
 80075d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075da:	2340      	movs	r3, #64	; 0x40
 80075dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075e8:	f107 0308 	add.w	r3, r7, #8
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff feec 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80075f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f8:	2119      	movs	r1, #25
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9bc 	bl	8007978 <SDMMC_GetCmdResp1>
 8007600:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007602:	69fb      	ldr	r3, [r7, #28]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3720      	adds	r7, #32
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007618:	230c      	movs	r3, #12
 800761a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800761c:	2340      	movs	r3, #64	; 0x40
 800761e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007628:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800762a:	f107 0308 	add.w	r3, r7, #8
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff fecb 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007636:	4a05      	ldr	r2, [pc, #20]	; (800764c <SDMMC_CmdStopTransfer+0x40>)
 8007638:	210c      	movs	r1, #12
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f99c 	bl	8007978 <SDMMC_GetCmdResp1>
 8007640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007642:	69fb      	ldr	r3, [r7, #28]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	05f5e100 	.word	0x05f5e100

08007650 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	; 0x28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007660:	2307      	movs	r3, #7
 8007662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007664:	2340      	movs	r3, #64	; 0x40
 8007666:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800766c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007670:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007672:	f107 0310 	add.w	r3, r7, #16
 8007676:	4619      	mov	r1, r3
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff fea7 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800767e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007682:	2107      	movs	r1, #7
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f977 	bl	8007978 <SDMMC_GetCmdResp1>
 800768a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800768e:	4618      	mov	r0, r3
 8007690:	3728      	adds	r7, #40	; 0x28
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b088      	sub	sp, #32
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076b4:	f107 0308 	add.w	r3, r7, #8
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff fe86 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f92d 	bl	8007920 <SDMMC_GetCmdError>
 80076c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076c8:	69fb      	ldr	r3, [r7, #28]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b088      	sub	sp, #32
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80076da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80076de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80076e0:	2308      	movs	r3, #8
 80076e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fe67 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fb24 	bl	8007d4c <SDMMC_GetCmdResp7>
 8007704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007706:	69fb      	ldr	r3, [r7, #28]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800771e:	2337      	movs	r3, #55	; 0x37
 8007720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007722:	2340      	movs	r3, #64	; 0x40
 8007724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800772a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800772e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007730:	f107 0308 	add.w	r3, r7, #8
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff fe48 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800773c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007740:	2137      	movs	r1, #55	; 0x37
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f918 	bl	8007978 <SDMMC_GetCmdResp1>
 8007748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800774a:	69fb      	ldr	r3, [r7, #28]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800776a:	2329      	movs	r3, #41	; 0x29
 800776c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800776e:	2340      	movs	r3, #64	; 0x40
 8007770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800777c:	f107 0308 	add.w	r3, r7, #8
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff fe22 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa2b 	bl	8007be4 <SDMMC_GetCmdResp3>
 800778e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007790:	69fb      	ldr	r3, [r7, #28]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b088      	sub	sp, #32
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80077a8:	2306      	movs	r3, #6
 80077aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077ba:	f107 0308 	add.w	r3, r7, #8
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff fe03 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80077c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ca:	2106      	movs	r1, #6
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8d3 	bl	8007978 <SDMMC_GetCmdResp1>
 80077d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077d4:	69fb      	ldr	r3, [r7, #28]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b088      	sub	sp, #32
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80077ea:	2333      	movs	r3, #51	; 0x33
 80077ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077ee:	2340      	movs	r3, #64	; 0x40
 80077f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077fc:	f107 0308 	add.w	r3, r7, #8
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff fde2 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007808:	f241 3288 	movw	r2, #5000	; 0x1388
 800780c:	2133      	movs	r1, #51	; 0x33
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f8b2 	bl	8007978 <SDMMC_GetCmdResp1>
 8007814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007816:	69fb      	ldr	r3, [r7, #28]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3720      	adds	r7, #32
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800782c:	2302      	movs	r3, #2
 800782e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007830:	23c0      	movs	r3, #192	; 0xc0
 8007832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800783c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff fdc1 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f982 	bl	8007b54 <SDMMC_GetCmdResp2>
 8007850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007852:	69fb      	ldr	r3, [r7, #28]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3720      	adds	r7, #32
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800786a:	2309      	movs	r3, #9
 800786c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800786e:	23c0      	movs	r3, #192	; 0xc0
 8007870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800787a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800787c:	f107 0308 	add.w	r3, r7, #8
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fda2 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f963 	bl	8007b54 <SDMMC_GetCmdResp2>
 800788e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007890:	69fb      	ldr	r3, [r7, #28]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3720      	adds	r7, #32
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b088      	sub	sp, #32
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80078a8:	2303      	movs	r3, #3
 80078aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078ba:	f107 0308 	add.w	r3, r7, #8
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fd83 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	2103      	movs	r1, #3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9c8 	bl	8007c60 <SDMMC_GetCmdResp6>
 80078d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078d2:	69fb      	ldr	r3, [r7, #28]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80078ea:	230d      	movs	r3, #13
 80078ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078fc:	f107 0308 	add.w	r3, r7, #8
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fd62 	bl	80073cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007908:	f241 3288 	movw	r2, #5000	; 0x1388
 800790c:	210d      	movs	r1, #13
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f832 	bl	8007978 <SDMMC_GetCmdResp1>
 8007914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007916:	69fb      	ldr	r3, [r7, #28]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007928:	4b11      	ldr	r3, [pc, #68]	; (8007970 <SDMMC_GetCmdError+0x50>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a11      	ldr	r2, [pc, #68]	; (8007974 <SDMMC_GetCmdError+0x54>)
 800792e:	fba2 2303 	umull	r2, r3, r2, r3
 8007932:	0a5b      	lsrs	r3, r3, #9
 8007934:	f241 3288 	movw	r2, #5000	; 0x1388
 8007938:	fb02 f303 	mul.w	r3, r2, r3
 800793c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1e5a      	subs	r2, r3, #1
 8007942:	60fa      	str	r2, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800794c:	e009      	b.n	8007962 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f1      	beq.n	800793e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	22c5      	movs	r2, #197	; 0xc5
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000498 	.word	0x20000498
 8007974:	10624dd3 	.word	0x10624dd3

08007978 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	460b      	mov	r3, r1
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007986:	4b70      	ldr	r3, [pc, #448]	; (8007b48 <SDMMC_GetCmdResp1+0x1d0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a70      	ldr	r2, [pc, #448]	; (8007b4c <SDMMC_GetCmdResp1+0x1d4>)
 800798c:	fba2 2303 	umull	r2, r3, r2, r3
 8007990:	0a5a      	lsrs	r2, r3, #9
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	fb02 f303 	mul.w	r3, r2, r3
 8007998:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	1e5a      	subs	r2, r3, #1
 800799e:	61fa      	str	r2, [r7, #28]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079a8:	e0c9      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0ef      	beq.n	800799a <SDMMC_GetCmdResp1+0x22>
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1ea      	bne.n	800799a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2204      	movs	r2, #4
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079d6:	2304      	movs	r3, #4
 80079d8:	e0b1      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0a6      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	22c5      	movs	r2, #197	; 0xc5
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7ff fd12 	bl	8007420 <SDIO_GetCommandResponse>
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d001      	beq.n	8007a0a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e099      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff fd14 	bl	800743a <SDIO_GetResponse>
 8007a12:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4b4e      	ldr	r3, [pc, #312]	; (8007b50 <SDMMC_GetCmdResp1+0x1d8>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e08d      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	da02      	bge.n	8007a2e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a2c:	e087      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007a38:	2340      	movs	r3, #64	; 0x40
 8007a3a:	e080      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007a46:	2380      	movs	r3, #128	; 0x80
 8007a48:	e079      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a58:	e071      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a68:	e069      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a78:	e061      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a88:	e059      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a98:	e051      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aa8:	e049      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ab8:	e041      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ac8:	e039      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ad8:	e031      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ae8:	e029      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007af4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007af8:	e021      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007b04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b08:	e019      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007b14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b18:	e011      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007b24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b28:	e009      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007b34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b38:	e001      	b.n	8007b3e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000498 	.word	0x20000498
 8007b4c:	10624dd3 	.word	0x10624dd3
 8007b50:	fdffe008 	.word	0xfdffe008

08007b54 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b5c:	4b1f      	ldr	r3, [pc, #124]	; (8007bdc <SDMMC_GetCmdResp2+0x88>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1f      	ldr	r2, [pc, #124]	; (8007be0 <SDMMC_GetCmdResp2+0x8c>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	0a5b      	lsrs	r3, r3, #9
 8007b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b6c:	fb02 f303 	mul.w	r3, r2, r3
 8007b70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	1e5a      	subs	r2, r3, #1
 8007b76:	60fa      	str	r2, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b80:	e026      	b.n	8007bd0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0ef      	beq.n	8007b72 <SDMMC_GetCmdResp2+0x1e>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1ea      	bne.n	8007b72 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2204      	movs	r2, #4
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bae:	2304      	movs	r3, #4
 8007bb0:	e00e      	b.n	8007bd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e003      	b.n	8007bd0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	22c5      	movs	r2, #197	; 0xc5
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	20000498 	.word	0x20000498
 8007be0:	10624dd3 	.word	0x10624dd3

08007be4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <SDMMC_GetCmdResp3+0x74>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a1a      	ldr	r2, [pc, #104]	; (8007c5c <SDMMC_GetCmdResp3+0x78>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	0a5b      	lsrs	r3, r3, #9
 8007bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfc:	fb02 f303 	mul.w	r3, r2, r3
 8007c00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1e5a      	subs	r2, r3, #1
 8007c06:	60fa      	str	r2, [r7, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c10:	e01b      	b.n	8007c4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0ef      	beq.n	8007c02 <SDMMC_GetCmdResp3+0x1e>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1ea      	bne.n	8007c02 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c3e:	2304      	movs	r3, #4
 8007c40:	e003      	b.n	8007c4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	22c5      	movs	r2, #197	; 0xc5
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000498 	.word	0x20000498
 8007c5c:	10624dd3 	.word	0x10624dd3

08007c60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c6e:	4b35      	ldr	r3, [pc, #212]	; (8007d44 <SDMMC_GetCmdResp6+0xe4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a35      	ldr	r2, [pc, #212]	; (8007d48 <SDMMC_GetCmdResp6+0xe8>)
 8007c74:	fba2 2303 	umull	r2, r3, r2, r3
 8007c78:	0a5b      	lsrs	r3, r3, #9
 8007c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c7e:	fb02 f303 	mul.w	r3, r2, r3
 8007c82:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	1e5a      	subs	r2, r3, #1
 8007c88:	61fa      	str	r2, [r7, #28]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c92:	e052      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c98:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0ef      	beq.n	8007c84 <SDMMC_GetCmdResp6+0x24>
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1ea      	bne.n	8007c84 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d004      	beq.n	8007cc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	e03a      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d004      	beq.n	8007cda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e02f      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff fba0 	bl	8007420 <SDIO_GetCommandResponse>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d001      	beq.n	8007cee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e025      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	22c5      	movs	r2, #197	; 0xc5
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fb9f 	bl	800743a <SDIO_GetResponse>
 8007cfc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	0c1b      	lsrs	r3, r3, #16
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	e011      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d24:	e009      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d34:	e001      	b.n	8007d3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000498 	.word	0x20000498
 8007d48:	10624dd3 	.word	0x10624dd3

08007d4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d54:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <SDMMC_GetCmdResp7+0x94>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a22      	ldr	r2, [pc, #136]	; (8007de4 <SDMMC_GetCmdResp7+0x98>)
 8007d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5e:	0a5b      	lsrs	r3, r3, #9
 8007d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d64:	fb02 f303 	mul.w	r3, r2, r3
 8007d68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	60fa      	str	r2, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d78:	e02c      	b.n	8007dd4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0ef      	beq.n	8007d6a <SDMMC_GetCmdResp7+0x1e>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ea      	bne.n	8007d6a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007da6:	2304      	movs	r3, #4
 8007da8:	e014      	b.n	8007dd4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e009      	b.n	8007dd4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2240      	movs	r2, #64	; 0x40
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007dd2:	2300      	movs	r3, #0
  
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	20000498 	.word	0x20000498
 8007de4:	10624dd3 	.word	0x10624dd3

08007de8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007dec:	4904      	ldr	r1, [pc, #16]	; (8007e00 <MX_FATFS_Init+0x18>)
 8007dee:	4805      	ldr	r0, [pc, #20]	; (8007e04 <MX_FATFS_Init+0x1c>)
 8007df0:	f003 fb2e 	bl	800b450 <FATFS_LinkDriver>
 8007df4:	4603      	mov	r3, r0
 8007df6:	461a      	mov	r2, r3
 8007df8:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <MX_FATFS_Init+0x20>)
 8007dfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007dfc:	bf00      	nop
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20007464 	.word	0x20007464
 8007e04:	0801d278 	.word	0x0801d278
 8007e08:	20007460 	.word	0x20007460

08007e0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007e26:	f000 f896 	bl	8007f56 <BSP_SD_IsDetected>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d001      	beq.n	8007e34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e012      	b.n	8007e5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007e34:	480b      	ldr	r0, [pc, #44]	; (8007e64 <BSP_SD_Init+0x48>)
 8007e36:	f7fd f971 	bl	800511c <HAL_SD_Init>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007e44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e48:	4806      	ldr	r0, [pc, #24]	; (8007e64 <BSP_SD_Init+0x48>)
 8007e4a:	f7fd ff3d 	bl	8005cc8 <HAL_SD_ConfigWideBusOperation>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007e58:	79fb      	ldrb	r3, [r7, #7]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	2000734c 	.word	0x2000734c

08007e68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	68f9      	ldr	r1, [r7, #12]
 8007e7e:	4806      	ldr	r0, [pc, #24]	; (8007e98 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007e80:	f7fd f9fa 	bl	8005278 <HAL_SD_ReadBlocks_DMA>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	2000734c 	.word	0x2000734c

08007e9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	68f9      	ldr	r1, [r7, #12]
 8007eb2:	4806      	ldr	r0, [pc, #24]	; (8007ecc <BSP_SD_WriteBlocks_DMA+0x30>)
 8007eb4:	f7fd fac2 	bl	800543c <HAL_SD_WriteBlocks_DMA>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	2000734c 	.word	0x2000734c

08007ed0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007ed4:	4805      	ldr	r0, [pc, #20]	; (8007eec <BSP_SD_GetCardState+0x1c>)
 8007ed6:	f7fd ff91 	bl	8005dfc <HAL_SD_GetCardState>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	bf14      	ite	ne
 8007ee0:	2301      	movne	r3, #1
 8007ee2:	2300      	moveq	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	2000734c 	.word	0x2000734c

08007ef0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	4803      	ldr	r0, [pc, #12]	; (8007f08 <BSP_SD_GetCardInfo+0x18>)
 8007efc:	f7fd feb8 	bl	8005c70 <HAL_SD_GetCardInfo>
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	2000734c 	.word	0x2000734c

08007f0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007f14:	f000 f818 	bl	8007f48 <BSP_SD_AbortCallback>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007f28:	f000 f98c 	bl	8008244 <BSP_SD_WriteCpltCallback>
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007f3c:	f000 f98e 	bl	800825c <BSP_SD_ReadCpltCallback>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0

}
 8007f4c:	bf00      	nop
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	b2db      	uxtb	r3, r3
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007f78:	f7fa fcb8 	bl	80028ec <HAL_GetTick>
 8007f7c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007f7e:	e006      	b.n	8007f8e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f80:	f7ff ffa6 	bl	8007ed0 <BSP_SD_GetCardState>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e009      	b.n	8007fa2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007f8e:	f7fa fcad 	bl	80028ec <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d8f0      	bhi.n	8007f80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <SD_CheckStatus+0x38>)
 8007fb8:	2201      	movs	r2, #1
 8007fba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007fbc:	f7ff ff88 	bl	8007ed0 <BSP_SD_GetCardState>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d107      	bne.n	8007fd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <SD_CheckStatus+0x38>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <SD_CheckStatus+0x38>)
 8007fd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007fd6:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <SD_CheckStatus+0x38>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	b2db      	uxtb	r3, r3
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200004a1 	.word	0x200004a1

08007fe8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007ff2:	f7ff ff13 	bl	8007e1c <BSP_SD_Init>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d107      	bne.n	800800c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff ffd4 	bl	8007fac <SD_CheckStatus>
 8008004:	4603      	mov	r3, r0
 8008006:	461a      	mov	r2, r3
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <SD_initialize+0x34>)
 800800a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800800c:	4b03      	ldr	r3, [pc, #12]	; (800801c <SD_initialize+0x34>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	b2db      	uxtb	r3, r3
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	200004a1 	.word	0x200004a1

08008020 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff ffbd 	bl	8007fac <SD_CheckStatus>
 8008032:	4603      	mov	r3, r0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008050:	f247 5030 	movw	r0, #30000	; 0x7530
 8008054:	f7ff ff8c 	bl	8007f70 <SD_CheckStatusWithTimeout>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	da01      	bge.n	8008062 <SD_read+0x26>
  {
    return res;
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	e03b      	b.n	80080da <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	68b8      	ldr	r0, [r7, #8]
 8008068:	f7ff fefe 	bl	8007e68 <BSP_SD_ReadBlocks_DMA>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d132      	bne.n	80080d8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <SD_read+0xa8>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008078:	f7fa fc38 	bl	80028ec <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800807e:	bf00      	nop
 8008080:	4b18      	ldr	r3, [pc, #96]	; (80080e4 <SD_read+0xa8>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d108      	bne.n	800809a <SD_read+0x5e>
 8008088:	f7fa fc30 	bl	80028ec <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	f247 522f 	movw	r2, #29999	; 0x752f
 8008096:	4293      	cmp	r3, r2
 8008098:	d9f2      	bls.n	8008080 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800809a:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <SD_read+0xa8>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	75fb      	strb	r3, [r7, #23]
 80080a6:	e017      	b.n	80080d8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <SD_read+0xa8>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80080ae:	f7fa fc1d 	bl	80028ec <HAL_GetTick>
 80080b2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80080b4:	e007      	b.n	80080c6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80080b6:	f7ff ff0b 	bl	8007ed0 <BSP_SD_GetCardState>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d102      	bne.n	80080c6 <SD_read+0x8a>
          {
            res = RES_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80080c4:	e008      	b.n	80080d8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80080c6:	f7fa fc11 	bl	80028ec <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	f247 522f 	movw	r2, #29999	; 0x752f
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d9ee      	bls.n	80080b6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20000570 	.word	0x20000570

080080e8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	607a      	str	r2, [r7, #4]
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80080fc:	4b24      	ldr	r3, [pc, #144]	; (8008190 <SD_write+0xa8>)
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008102:	f247 5030 	movw	r0, #30000	; 0x7530
 8008106:	f7ff ff33 	bl	8007f70 <SD_CheckStatusWithTimeout>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	da01      	bge.n	8008114 <SD_write+0x2c>
  {
    return res;
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	e038      	b.n	8008186 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	68b8      	ldr	r0, [r7, #8]
 800811a:	f7ff febf 	bl	8007e9c <BSP_SD_WriteBlocks_DMA>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d12f      	bne.n	8008184 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008124:	f7fa fbe2 	bl	80028ec <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800812a:	bf00      	nop
 800812c:	4b18      	ldr	r3, [pc, #96]	; (8008190 <SD_write+0xa8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d108      	bne.n	8008146 <SD_write+0x5e>
 8008134:	f7fa fbda 	bl	80028ec <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008142:	4293      	cmp	r3, r2
 8008144:	d9f2      	bls.n	800812c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008146:	4b12      	ldr	r3, [pc, #72]	; (8008190 <SD_write+0xa8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
 8008152:	e017      	b.n	8008184 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008154:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <SD_write+0xa8>)
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800815a:	f7fa fbc7 	bl	80028ec <HAL_GetTick>
 800815e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008160:	e007      	b.n	8008172 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008162:	f7ff feb5 	bl	8007ed0 <BSP_SD_GetCardState>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <SD_write+0x8a>
          {
            res = RES_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	75fb      	strb	r3, [r7, #23]
            break;
 8008170:	e008      	b.n	8008184 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008172:	f7fa fbbb 	bl	80028ec <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008180:	4293      	cmp	r3, r2
 8008182:	d9ee      	bls.n	8008162 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	2000056c 	.word	0x2000056c

08008194 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08c      	sub	sp, #48	; 0x30
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	603a      	str	r2, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
 80081a0:	460b      	mov	r3, r1
 80081a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80081aa:	4b25      	ldr	r3, [pc, #148]	; (8008240 <SD_ioctl+0xac>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <SD_ioctl+0x28>
 80081b8:	2303      	movs	r3, #3
 80081ba:	e03c      	b.n	8008236 <SD_ioctl+0xa2>

  switch (cmd)
 80081bc:	79bb      	ldrb	r3, [r7, #6]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d834      	bhi.n	800822c <SD_ioctl+0x98>
 80081c2:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <SD_ioctl+0x34>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080081d9 	.word	0x080081d9
 80081cc:	080081e1 	.word	0x080081e1
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	08008213 	.word	0x08008213
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80081de:	e028      	b.n	8008232 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80081e0:	f107 030c 	add.w	r3, r7, #12
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff fe83 	bl	8007ef0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80081ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80081f6:	e01c      	b.n	8008232 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80081f8:	f107 030c 	add.w	r3, r7, #12
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fe77 	bl	8007ef0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	b29a      	uxth	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008210:	e00f      	b.n	8008232 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008212:	f107 030c 	add.w	r3, r7, #12
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff fe6a 	bl	8007ef0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	0a5a      	lsrs	r2, r3, #9
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800822a:	e002      	b.n	8008232 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800822c:	2304      	movs	r3, #4
 800822e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008236:	4618      	mov	r0, r3
 8008238:	3730      	adds	r7, #48	; 0x30
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200004a1 	.word	0x200004a1

08008244 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008248:	4b03      	ldr	r3, [pc, #12]	; (8008258 <BSP_SD_WriteCpltCallback+0x14>)
 800824a:	2201      	movs	r2, #1
 800824c:	601a      	str	r2, [r3, #0]
}
 800824e:	bf00      	nop
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	2000056c 	.word	0x2000056c

0800825c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008260:	4b03      	ldr	r3, [pc, #12]	; (8008270 <BSP_SD_ReadCpltCallback+0x14>)
 8008262:	2201      	movs	r2, #1
 8008264:	601a      	str	r2, [r3, #0]
}
 8008266:	bf00      	nop
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	20000570 	.word	0x20000570

08008274 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800827a:	4b8d      	ldr	r3, [pc, #564]	; (80084b0 <MX_LWIP_Init+0x23c>)
 800827c:	22c0      	movs	r2, #192	; 0xc0
 800827e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008280:	4b8b      	ldr	r3, [pc, #556]	; (80084b0 <MX_LWIP_Init+0x23c>)
 8008282:	22a8      	movs	r2, #168	; 0xa8
 8008284:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8008286:	4b8a      	ldr	r3, [pc, #552]	; (80084b0 <MX_LWIP_Init+0x23c>)
 8008288:	2212      	movs	r2, #18
 800828a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 800828c:	4b88      	ldr	r3, [pc, #544]	; (80084b0 <MX_LWIP_Init+0x23c>)
 800828e:	226f      	movs	r2, #111	; 0x6f
 8008290:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008292:	4b88      	ldr	r3, [pc, #544]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008294:	22ff      	movs	r2, #255	; 0xff
 8008296:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008298:	4b86      	ldr	r3, [pc, #536]	; (80084b4 <MX_LWIP_Init+0x240>)
 800829a:	22ff      	movs	r2, #255	; 0xff
 800829c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800829e:	4b85      	ldr	r3, [pc, #532]	; (80084b4 <MX_LWIP_Init+0x240>)
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80082a4:	4b83      	ldr	r3, [pc, #524]	; (80084b4 <MX_LWIP_Init+0x240>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80082aa:	4b83      	ldr	r3, [pc, #524]	; (80084b8 <MX_LWIP_Init+0x244>)
 80082ac:	22c0      	movs	r2, #192	; 0xc0
 80082ae:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80082b0:	4b81      	ldr	r3, [pc, #516]	; (80084b8 <MX_LWIP_Init+0x244>)
 80082b2:	22a8      	movs	r2, #168	; 0xa8
 80082b4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80082b6:	4b80      	ldr	r3, [pc, #512]	; (80084b8 <MX_LWIP_Init+0x244>)
 80082b8:	2212      	movs	r2, #18
 80082ba:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80082bc:	4b7e      	ldr	r3, [pc, #504]	; (80084b8 <MX_LWIP_Init+0x244>)
 80082be:	2201      	movs	r2, #1
 80082c0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80082c2:	f005 f9a5 	bl	800d610 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80082c6:	4b7a      	ldr	r3, [pc, #488]	; (80084b0 <MX_LWIP_Init+0x23c>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	061a      	lsls	r2, r3, #24
 80082cc:	4b78      	ldr	r3, [pc, #480]	; (80084b0 <MX_LWIP_Init+0x23c>)
 80082ce:	785b      	ldrb	r3, [r3, #1]
 80082d0:	041b      	lsls	r3, r3, #16
 80082d2:	431a      	orrs	r2, r3
 80082d4:	4b76      	ldr	r3, [pc, #472]	; (80084b0 <MX_LWIP_Init+0x23c>)
 80082d6:	789b      	ldrb	r3, [r3, #2]
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	4313      	orrs	r3, r2
 80082dc:	4a74      	ldr	r2, [pc, #464]	; (80084b0 <MX_LWIP_Init+0x23c>)
 80082de:	78d2      	ldrb	r2, [r2, #3]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	061a      	lsls	r2, r3, #24
 80082e4:	4b72      	ldr	r3, [pc, #456]	; (80084b0 <MX_LWIP_Init+0x23c>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	0619      	lsls	r1, r3, #24
 80082ea:	4b71      	ldr	r3, [pc, #452]	; (80084b0 <MX_LWIP_Init+0x23c>)
 80082ec:	785b      	ldrb	r3, [r3, #1]
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	4319      	orrs	r1, r3
 80082f2:	4b6f      	ldr	r3, [pc, #444]	; (80084b0 <MX_LWIP_Init+0x23c>)
 80082f4:	789b      	ldrb	r3, [r3, #2]
 80082f6:	021b      	lsls	r3, r3, #8
 80082f8:	430b      	orrs	r3, r1
 80082fa:	496d      	ldr	r1, [pc, #436]	; (80084b0 <MX_LWIP_Init+0x23c>)
 80082fc:	78c9      	ldrb	r1, [r1, #3]
 80082fe:	430b      	orrs	r3, r1
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008306:	431a      	orrs	r2, r3
 8008308:	4b69      	ldr	r3, [pc, #420]	; (80084b0 <MX_LWIP_Init+0x23c>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	0619      	lsls	r1, r3, #24
 800830e:	4b68      	ldr	r3, [pc, #416]	; (80084b0 <MX_LWIP_Init+0x23c>)
 8008310:	785b      	ldrb	r3, [r3, #1]
 8008312:	041b      	lsls	r3, r3, #16
 8008314:	4319      	orrs	r1, r3
 8008316:	4b66      	ldr	r3, [pc, #408]	; (80084b0 <MX_LWIP_Init+0x23c>)
 8008318:	789b      	ldrb	r3, [r3, #2]
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	430b      	orrs	r3, r1
 800831e:	4964      	ldr	r1, [pc, #400]	; (80084b0 <MX_LWIP_Init+0x23c>)
 8008320:	78c9      	ldrb	r1, [r1, #3]
 8008322:	430b      	orrs	r3, r1
 8008324:	0a1b      	lsrs	r3, r3, #8
 8008326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800832a:	431a      	orrs	r2, r3
 800832c:	4b60      	ldr	r3, [pc, #384]	; (80084b0 <MX_LWIP_Init+0x23c>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	0619      	lsls	r1, r3, #24
 8008332:	4b5f      	ldr	r3, [pc, #380]	; (80084b0 <MX_LWIP_Init+0x23c>)
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	4319      	orrs	r1, r3
 800833a:	4b5d      	ldr	r3, [pc, #372]	; (80084b0 <MX_LWIP_Init+0x23c>)
 800833c:	789b      	ldrb	r3, [r3, #2]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	430b      	orrs	r3, r1
 8008342:	495b      	ldr	r1, [pc, #364]	; (80084b0 <MX_LWIP_Init+0x23c>)
 8008344:	78c9      	ldrb	r1, [r1, #3]
 8008346:	430b      	orrs	r3, r1
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	4313      	orrs	r3, r2
 800834c:	4a5b      	ldr	r2, [pc, #364]	; (80084bc <MX_LWIP_Init+0x248>)
 800834e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008350:	4b58      	ldr	r3, [pc, #352]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	061a      	lsls	r2, r3, #24
 8008356:	4b57      	ldr	r3, [pc, #348]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	041b      	lsls	r3, r3, #16
 800835c:	431a      	orrs	r2, r3
 800835e:	4b55      	ldr	r3, [pc, #340]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008360:	789b      	ldrb	r3, [r3, #2]
 8008362:	021b      	lsls	r3, r3, #8
 8008364:	4313      	orrs	r3, r2
 8008366:	4a53      	ldr	r2, [pc, #332]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008368:	78d2      	ldrb	r2, [r2, #3]
 800836a:	4313      	orrs	r3, r2
 800836c:	061a      	lsls	r2, r3, #24
 800836e:	4b51      	ldr	r3, [pc, #324]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	0619      	lsls	r1, r3, #24
 8008374:	4b4f      	ldr	r3, [pc, #316]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	4319      	orrs	r1, r3
 800837c:	4b4d      	ldr	r3, [pc, #308]	; (80084b4 <MX_LWIP_Init+0x240>)
 800837e:	789b      	ldrb	r3, [r3, #2]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	430b      	orrs	r3, r1
 8008384:	494b      	ldr	r1, [pc, #300]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008386:	78c9      	ldrb	r1, [r1, #3]
 8008388:	430b      	orrs	r3, r1
 800838a:	021b      	lsls	r3, r3, #8
 800838c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008390:	431a      	orrs	r2, r3
 8008392:	4b48      	ldr	r3, [pc, #288]	; (80084b4 <MX_LWIP_Init+0x240>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	0619      	lsls	r1, r3, #24
 8008398:	4b46      	ldr	r3, [pc, #280]	; (80084b4 <MX_LWIP_Init+0x240>)
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	4319      	orrs	r1, r3
 80083a0:	4b44      	ldr	r3, [pc, #272]	; (80084b4 <MX_LWIP_Init+0x240>)
 80083a2:	789b      	ldrb	r3, [r3, #2]
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	430b      	orrs	r3, r1
 80083a8:	4942      	ldr	r1, [pc, #264]	; (80084b4 <MX_LWIP_Init+0x240>)
 80083aa:	78c9      	ldrb	r1, [r1, #3]
 80083ac:	430b      	orrs	r3, r1
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083b4:	431a      	orrs	r2, r3
 80083b6:	4b3f      	ldr	r3, [pc, #252]	; (80084b4 <MX_LWIP_Init+0x240>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	0619      	lsls	r1, r3, #24
 80083bc:	4b3d      	ldr	r3, [pc, #244]	; (80084b4 <MX_LWIP_Init+0x240>)
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	041b      	lsls	r3, r3, #16
 80083c2:	4319      	orrs	r1, r3
 80083c4:	4b3b      	ldr	r3, [pc, #236]	; (80084b4 <MX_LWIP_Init+0x240>)
 80083c6:	789b      	ldrb	r3, [r3, #2]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	430b      	orrs	r3, r1
 80083cc:	4939      	ldr	r1, [pc, #228]	; (80084b4 <MX_LWIP_Init+0x240>)
 80083ce:	78c9      	ldrb	r1, [r1, #3]
 80083d0:	430b      	orrs	r3, r1
 80083d2:	0e1b      	lsrs	r3, r3, #24
 80083d4:	4313      	orrs	r3, r2
 80083d6:	4a3a      	ldr	r2, [pc, #232]	; (80084c0 <MX_LWIP_Init+0x24c>)
 80083d8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80083da:	4b37      	ldr	r3, [pc, #220]	; (80084b8 <MX_LWIP_Init+0x244>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	061a      	lsls	r2, r3, #24
 80083e0:	4b35      	ldr	r3, [pc, #212]	; (80084b8 <MX_LWIP_Init+0x244>)
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	041b      	lsls	r3, r3, #16
 80083e6:	431a      	orrs	r2, r3
 80083e8:	4b33      	ldr	r3, [pc, #204]	; (80084b8 <MX_LWIP_Init+0x244>)
 80083ea:	789b      	ldrb	r3, [r3, #2]
 80083ec:	021b      	lsls	r3, r3, #8
 80083ee:	4313      	orrs	r3, r2
 80083f0:	4a31      	ldr	r2, [pc, #196]	; (80084b8 <MX_LWIP_Init+0x244>)
 80083f2:	78d2      	ldrb	r2, [r2, #3]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	061a      	lsls	r2, r3, #24
 80083f8:	4b2f      	ldr	r3, [pc, #188]	; (80084b8 <MX_LWIP_Init+0x244>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	0619      	lsls	r1, r3, #24
 80083fe:	4b2e      	ldr	r3, [pc, #184]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	041b      	lsls	r3, r3, #16
 8008404:	4319      	orrs	r1, r3
 8008406:	4b2c      	ldr	r3, [pc, #176]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008408:	789b      	ldrb	r3, [r3, #2]
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	430b      	orrs	r3, r1
 800840e:	492a      	ldr	r1, [pc, #168]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008410:	78c9      	ldrb	r1, [r1, #3]
 8008412:	430b      	orrs	r3, r1
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800841a:	431a      	orrs	r2, r3
 800841c:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <MX_LWIP_Init+0x244>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	0619      	lsls	r1, r3, #24
 8008422:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	041b      	lsls	r3, r3, #16
 8008428:	4319      	orrs	r1, r3
 800842a:	4b23      	ldr	r3, [pc, #140]	; (80084b8 <MX_LWIP_Init+0x244>)
 800842c:	789b      	ldrb	r3, [r3, #2]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	430b      	orrs	r3, r1
 8008432:	4921      	ldr	r1, [pc, #132]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008434:	78c9      	ldrb	r1, [r1, #3]
 8008436:	430b      	orrs	r3, r1
 8008438:	0a1b      	lsrs	r3, r3, #8
 800843a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800843e:	431a      	orrs	r2, r3
 8008440:	4b1d      	ldr	r3, [pc, #116]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	0619      	lsls	r1, r3, #24
 8008446:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	4319      	orrs	r1, r3
 800844e:	4b1a      	ldr	r3, [pc, #104]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008450:	789b      	ldrb	r3, [r3, #2]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	430b      	orrs	r3, r1
 8008456:	4918      	ldr	r1, [pc, #96]	; (80084b8 <MX_LWIP_Init+0x244>)
 8008458:	78c9      	ldrb	r1, [r1, #3]
 800845a:	430b      	orrs	r3, r1
 800845c:	0e1b      	lsrs	r3, r3, #24
 800845e:	4313      	orrs	r3, r2
 8008460:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <MX_LWIP_Init+0x250>)
 8008462:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008464:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <MX_LWIP_Init+0x254>)
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	4b18      	ldr	r3, [pc, #96]	; (80084cc <MX_LWIP_Init+0x258>)
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	2300      	movs	r3, #0
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <MX_LWIP_Init+0x250>)
 8008472:	4a13      	ldr	r2, [pc, #76]	; (80084c0 <MX_LWIP_Init+0x24c>)
 8008474:	4911      	ldr	r1, [pc, #68]	; (80084bc <MX_LWIP_Init+0x248>)
 8008476:	4816      	ldr	r0, [pc, #88]	; (80084d0 <MX_LWIP_Init+0x25c>)
 8008478:	f005 fd70 	bl	800df5c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800847c:	4814      	ldr	r0, [pc, #80]	; (80084d0 <MX_LWIP_Init+0x25c>)
 800847e:	f005 ff1f 	bl	800e2c0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008482:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <MX_LWIP_Init+0x25c>)
 8008484:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008488:	089b      	lsrs	r3, r3, #2
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008494:	480e      	ldr	r0, [pc, #56]	; (80084d0 <MX_LWIP_Init+0x25c>)
 8008496:	f005 ff23 	bl	800e2e0 <netif_set_up>
 800849a:	e002      	b.n	80084a2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800849c:	480c      	ldr	r0, [pc, #48]	; (80084d0 <MX_LWIP_Init+0x25c>)
 800849e:	f005 ff8b 	bl	800e3b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80084a2:	490c      	ldr	r1, [pc, #48]	; (80084d4 <MX_LWIP_Init+0x260>)
 80084a4:	480a      	ldr	r0, [pc, #40]	; (80084d0 <MX_LWIP_Init+0x25c>)
 80084a6:	f005 ffb9 	bl	800e41c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80084aa:	bf00      	nop
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	200094d8 	.word	0x200094d8
 80084b4:	200094d4 	.word	0x200094d4
 80084b8:	200094cc 	.word	0x200094cc
 80084bc:	200094d0 	.word	0x200094d0
 80084c0:	200094dc 	.word	0x200094dc
 80084c4:	200094e0 	.word	0x200094e0
 80084c8:	08017ac1 	.word	0x08017ac1
 80084cc:	08008a65 	.word	0x08008a65
 80084d0:	20007254 	.word	0x20007254
 80084d4:	08008ad1 	.word	0x08008ad1

080084d8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08e      	sub	sp, #56	; 0x38
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	605a      	str	r2, [r3, #4]
 80084ea:	609a      	str	r2, [r3, #8]
 80084ec:	60da      	str	r2, [r3, #12]
 80084ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a46      	ldr	r2, [pc, #280]	; (8008610 <HAL_ETH_MspInit+0x138>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	f040 8085 	bne.w	8008606 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80084fc:	2300      	movs	r3, #0
 80084fe:	623b      	str	r3, [r7, #32]
 8008500:	4b44      	ldr	r3, [pc, #272]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	4a43      	ldr	r2, [pc, #268]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800850a:	6313      	str	r3, [r2, #48]	; 0x30
 800850c:	4b41      	ldr	r3, [pc, #260]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008514:	623b      	str	r3, [r7, #32]
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	2300      	movs	r3, #0
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	4b3d      	ldr	r3, [pc, #244]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	4a3c      	ldr	r2, [pc, #240]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008522:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008526:	6313      	str	r3, [r2, #48]	; 0x30
 8008528:	4b3a      	ldr	r3, [pc, #232]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2300      	movs	r3, #0
 8008536:	61bb      	str	r3, [r7, #24]
 8008538:	4b36      	ldr	r3, [pc, #216]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	4a35      	ldr	r2, [pc, #212]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800853e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008542:	6313      	str	r3, [r2, #48]	; 0x30
 8008544:	4b33      	ldr	r3, [pc, #204]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800854c:	61bb      	str	r3, [r7, #24]
 800854e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	4b2f      	ldr	r3, [pc, #188]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008558:	4a2e      	ldr	r2, [pc, #184]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800855a:	f043 0304 	orr.w	r3, r3, #4
 800855e:	6313      	str	r3, [r2, #48]	; 0x30
 8008560:	4b2c      	ldr	r3, [pc, #176]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800856c:	2300      	movs	r3, #0
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	4b28      	ldr	r3, [pc, #160]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008574:	4a27      	ldr	r2, [pc, #156]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008576:	f043 0301 	orr.w	r3, r3, #1
 800857a:	6313      	str	r3, [r2, #48]	; 0x30
 800857c:	4b25      	ldr	r3, [pc, #148]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	4b21      	ldr	r3, [pc, #132]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	4a20      	ldr	r2, [pc, #128]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 8008592:	f043 0302 	orr.w	r3, r3, #2
 8008596:	6313      	str	r3, [r2, #48]	; 0x30
 8008598:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <HAL_ETH_MspInit+0x13c>)
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	f003 0302 	and.w	r3, r3, #2
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80085a4:	2332      	movs	r3, #50	; 0x32
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a8:	2302      	movs	r3, #2
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085b0:	2303      	movs	r3, #3
 80085b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085b4:	230b      	movs	r3, #11
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085bc:	4619      	mov	r1, r3
 80085be:	4816      	ldr	r0, [pc, #88]	; (8008618 <HAL_ETH_MspInit+0x140>)
 80085c0:	f7fb ff6a 	bl	8004498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80085c4:	2386      	movs	r3, #134	; 0x86
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c8:	2302      	movs	r3, #2
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085d0:	2303      	movs	r3, #3
 80085d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085d4:	230b      	movs	r3, #11
 80085d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085dc:	4619      	mov	r1, r3
 80085de:	480f      	ldr	r0, [pc, #60]	; (800861c <HAL_ETH_MspInit+0x144>)
 80085e0:	f7fb ff5a 	bl	8004498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80085e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ea:	2302      	movs	r3, #2
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f2:	2303      	movs	r3, #3
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085f6:	230b      	movs	r3, #11
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085fe:	4619      	mov	r1, r3
 8008600:	4807      	ldr	r0, [pc, #28]	; (8008620 <HAL_ETH_MspInit+0x148>)
 8008602:	f7fb ff49 	bl	8004498 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008606:	bf00      	nop
 8008608:	3738      	adds	r7, #56	; 0x38
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40028000 	.word	0x40028000
 8008614:	40023800 	.word	0x40023800
 8008618:	40020800 	.word	0x40020800
 800861c:	40020000 	.word	0x40020000
 8008620:	40020400 	.word	0x40020400

08008624 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008630:	4b4d      	ldr	r3, [pc, #308]	; (8008768 <low_level_init+0x144>)
 8008632:	4a4e      	ldr	r2, [pc, #312]	; (800876c <low_level_init+0x148>)
 8008634:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008636:	4b4c      	ldr	r3, [pc, #304]	; (8008768 <low_level_init+0x144>)
 8008638:	2201      	movs	r2, #1
 800863a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800863c:	4b4a      	ldr	r3, [pc, #296]	; (8008768 <low_level_init+0x144>)
 800863e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008642:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008644:	4b48      	ldr	r3, [pc, #288]	; (8008768 <low_level_init+0x144>)
 8008646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800864a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800864c:	4b46      	ldr	r3, [pc, #280]	; (8008768 <low_level_init+0x144>)
 800864e:	2201      	movs	r2, #1
 8008650:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008652:	2300      	movs	r3, #0
 8008654:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008656:	2380      	movs	r3, #128	; 0x80
 8008658:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800865a:	23e1      	movs	r3, #225	; 0xe1
 800865c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800865e:	2300      	movs	r3, #0
 8008660:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008662:	2300      	movs	r3, #0
 8008664:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008666:	2300      	movs	r3, #0
 8008668:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800866a:	4a3f      	ldr	r2, [pc, #252]	; (8008768 <low_level_init+0x144>)
 800866c:	f107 0308 	add.w	r3, r7, #8
 8008670:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008672:	4b3d      	ldr	r3, [pc, #244]	; (8008768 <low_level_init+0x144>)
 8008674:	2200      	movs	r2, #0
 8008676:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008678:	4b3b      	ldr	r3, [pc, #236]	; (8008768 <low_level_init+0x144>)
 800867a:	2200      	movs	r2, #0
 800867c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800867e:	4b3a      	ldr	r3, [pc, #232]	; (8008768 <low_level_init+0x144>)
 8008680:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008684:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008686:	4838      	ldr	r0, [pc, #224]	; (8008768 <low_level_init+0x144>)
 8008688:	f7fa fde0 	bl	800324c <HAL_ETH_Init>
 800868c:	4603      	mov	r3, r0
 800868e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d108      	bne.n	80086a8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800869c:	f043 0304 	orr.w	r3, r3, #4
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80086a8:	2304      	movs	r3, #4
 80086aa:	4a31      	ldr	r2, [pc, #196]	; (8008770 <low_level_init+0x14c>)
 80086ac:	4931      	ldr	r1, [pc, #196]	; (8008774 <low_level_init+0x150>)
 80086ae:	482e      	ldr	r0, [pc, #184]	; (8008768 <low_level_init+0x144>)
 80086b0:	f7fa ff68 	bl	8003584 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80086b4:	2304      	movs	r3, #4
 80086b6:	4a30      	ldr	r2, [pc, #192]	; (8008778 <low_level_init+0x154>)
 80086b8:	4930      	ldr	r1, [pc, #192]	; (800877c <low_level_init+0x158>)
 80086ba:	482b      	ldr	r0, [pc, #172]	; (8008768 <low_level_init+0x144>)
 80086bc:	f7fa ffcb 	bl	8003656 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2206      	movs	r2, #6
 80086c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80086c8:	4b27      	ldr	r3, [pc, #156]	; (8008768 <low_level_init+0x144>)
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	781a      	ldrb	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80086d4:	4b24      	ldr	r3, [pc, #144]	; (8008768 <low_level_init+0x144>)
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	785a      	ldrb	r2, [r3, #1]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80086e0:	4b21      	ldr	r3, [pc, #132]	; (8008768 <low_level_init+0x144>)
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	789a      	ldrb	r2, [r3, #2]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80086ec:	4b1e      	ldr	r3, [pc, #120]	; (8008768 <low_level_init+0x144>)
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	78da      	ldrb	r2, [r3, #3]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80086f8:	4b1b      	ldr	r3, [pc, #108]	; (8008768 <low_level_init+0x144>)
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	791a      	ldrb	r2, [r3, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008704:	4b18      	ldr	r3, [pc, #96]	; (8008768 <low_level_init+0x144>)
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	795a      	ldrb	r2, [r3, #5]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008716:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800871e:	f043 030a 	orr.w	r3, r3, #10
 8008722:	b2da      	uxtb	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800872a:	480f      	ldr	r0, [pc, #60]	; (8008768 <low_level_init+0x144>)
 800872c:	f7fb fa3c 	bl	8003ba8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008730:	f107 0310 	add.w	r3, r7, #16
 8008734:	461a      	mov	r2, r3
 8008736:	211d      	movs	r1, #29
 8008738:	480b      	ldr	r0, [pc, #44]	; (8008768 <low_level_init+0x144>)
 800873a:	f7fb f967 	bl	8003a0c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f043 030b 	orr.w	r3, r3, #11
 8008744:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	461a      	mov	r2, r3
 800874a:	211d      	movs	r1, #29
 800874c:	4806      	ldr	r0, [pc, #24]	; (8008768 <low_level_init+0x144>)
 800874e:	f7fb f9c5 	bl	8003adc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008752:	f107 0310 	add.w	r3, r7, #16
 8008756:	461a      	mov	r2, r3
 8008758:	211d      	movs	r1, #29
 800875a:	4803      	ldr	r0, [pc, #12]	; (8008768 <low_level_init+0x144>)
 800875c:	f7fb f956 	bl	8003a0c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008760:	bf00      	nop
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	2000adb4 	.word	0x2000adb4
 800876c:	40028000 	.word	0x40028000
 8008770:	2000adfc 	.word	0x2000adfc
 8008774:	200094e4 	.word	0x200094e4
 8008778:	20009564 	.word	0x20009564
 800877c:	2000ad34 	.word	0x2000ad34

08008780 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08a      	sub	sp, #40	; 0x28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800878a:	4b4b      	ldr	r3, [pc, #300]	; (80088b8 <low_level_output+0x138>)
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80087a2:	4b45      	ldr	r3, [pc, #276]	; (80088b8 <low_level_output+0x138>)
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	623b      	str	r3, [r7, #32]
 80087b0:	e05a      	b.n	8008868 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da03      	bge.n	80087c2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80087ba:	23f8      	movs	r3, #248	; 0xf8
 80087bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80087c0:	e05c      	b.n	800887c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	895b      	ldrh	r3, [r3, #10]
 80087c6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80087cc:	e02f      	b.n	800882e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	18d0      	adds	r0, r2, r3
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	18d1      	adds	r1, r2, r3
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80087e2:	3304      	adds	r3, #4
 80087e4:	461a      	mov	r2, r3
 80087e6:	f00f fa87 	bl	8017cf8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	da03      	bge.n	8008800 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80087f8:	23f8      	movs	r3, #248	; 0xf8
 80087fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80087fe:	e03d      	b.n	800887c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008810:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800881c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008828:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008838:	4293      	cmp	r3, r2
 800883a:	d8c8      	bhi.n	80087ce <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	18d0      	adds	r0, r2, r3
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4413      	add	r3, r2
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4619      	mov	r1, r3
 800884e:	f00f fa53 	bl	8017cf8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	623b      	str	r3, [r7, #32]
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1a1      	bne.n	80087b2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800886e:	6979      	ldr	r1, [r7, #20]
 8008870:	4811      	ldr	r0, [pc, #68]	; (80088b8 <low_level_output+0x138>)
 8008872:	f7fa ff5d 	bl	8003730 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800887c:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <low_level_output+0x138>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008884:	3314      	adds	r3, #20
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0320 	and.w	r3, r3, #32
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00d      	beq.n	80088ac <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <low_level_output+0x138>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008898:	3314      	adds	r3, #20
 800889a:	2220      	movs	r2, #32
 800889c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800889e:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <low_level_output+0x138>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a6:	3304      	adds	r3, #4
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80088ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3728      	adds	r7, #40	; 0x28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	2000adb4 	.word	0x2000adb4

080088bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08c      	sub	sp, #48	; 0x30
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80088dc:	2300      	movs	r3, #0
 80088de:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80088e0:	484f      	ldr	r0, [pc, #316]	; (8008a20 <low_level_input+0x164>)
 80088e2:	f7fb f80f 	bl	8003904 <HAL_ETH_GetReceivedFrame>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <low_level_input+0x34>

    return NULL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	e092      	b.n	8008a16 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80088f0:	4b4b      	ldr	r3, [pc, #300]	; (8008a20 <low_level_input+0x164>)
 80088f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80088f6:	4b4a      	ldr	r3, [pc, #296]	; (8008a20 <low_level_input+0x164>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80088fc:	89fb      	ldrh	r3, [r7, #14]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008902:	89fb      	ldrh	r3, [r7, #14]
 8008904:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008908:	4619      	mov	r1, r3
 800890a:	2000      	movs	r0, #0
 800890c:	f005 fe22 	bl	800e554 <pbuf_alloc>
 8008910:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d04b      	beq.n	80089b0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008918:	4b41      	ldr	r3, [pc, #260]	; (8008a20 <low_level_input+0x164>)
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	62bb      	str	r3, [r7, #40]	; 0x28
 8008926:	e040      	b.n	80089aa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	895b      	ldrh	r3, [r3, #10]
 800892c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008932:	e021      	b.n	8008978 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	18d0      	adds	r0, r2, r3
 800893c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	18d1      	adds	r1, r2, r3
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008948:	3304      	adds	r3, #4
 800894a:	461a      	mov	r2, r3
 800894c:	f00f f9d4 	bl	8017cf8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	4413      	add	r3, r2
 8008962:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008966:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008972:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008982:	4293      	cmp	r3, r2
 8008984:	d8d6      	bhi.n	8008934 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	18d0      	adds	r0, r2, r3
 800898e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	4619      	mov	r1, r3
 8008998:	f00f f9ae 	bl	8017cf8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	4413      	add	r3, r2
 80089a2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1bb      	bne.n	8008928 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80089b0:	4b1b      	ldr	r3, [pc, #108]	; (8008a20 <low_level_input+0x164>)
 80089b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80089b6:	2300      	movs	r3, #0
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	e00b      	b.n	80089d4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3301      	adds	r3, #1
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <low_level_input+0x164>)
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d3ee      	bcc.n	80089bc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80089de:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <low_level_input+0x164>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80089e4:	4b0e      	ldr	r3, [pc, #56]	; (8008a20 <low_level_input+0x164>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ec:	3314      	adds	r3, #20
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00d      	beq.n	8008a14 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80089f8:	4b09      	ldr	r3, [pc, #36]	; (8008a20 <low_level_input+0x164>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a00:	3314      	adds	r3, #20
 8008a02:	2280      	movs	r2, #128	; 0x80
 8008a04:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008a06:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <low_level_input+0x164>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0e:	3308      	adds	r3, #8
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3730      	adds	r7, #48	; 0x30
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	2000adb4 	.word	0x2000adb4

08008a24 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff ff45 	bl	80088bc <low_level_input>
 8008a32:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d010      	beq.n	8008a5c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	4798      	blx	r3
 8008a44:	4603      	mov	r3, r0
 8008a46:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008a48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d006      	beq.n	8008a5e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f006 f863 	bl	800eb1c <pbuf_free>
    p = NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	e000      	b.n	8008a5e <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008a5c:	bf00      	nop
  }
}
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <ethernetif_init+0x1c>
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <ethernetif_init+0x48>)
 8008a74:	f44f 7202 	mov.w	r2, #520	; 0x208
 8008a78:	490d      	ldr	r1, [pc, #52]	; (8008ab0 <ethernetif_init+0x4c>)
 8008a7a:	480e      	ldr	r0, [pc, #56]	; (8008ab4 <ethernetif_init+0x50>)
 8008a7c:	f00f fa16 	bl	8017eac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2273      	movs	r2, #115	; 0x73
 8008a84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2274      	movs	r2, #116	; 0x74
 8008a8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a09      	ldr	r2, [pc, #36]	; (8008ab8 <ethernetif_init+0x54>)
 8008a94:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a08      	ldr	r2, [pc, #32]	; (8008abc <ethernetif_init+0x58>)
 8008a9a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff fdc1 	bl	8008624 <low_level_init>

  return ERR_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	0801a06c 	.word	0x0801a06c
 8008ab0:	0801a088 	.word	0x0801a088
 8008ab4:	0801a098 	.word	0x0801a098
 8008ab8:	08015f85 	.word	0x08015f85
 8008abc:	08008781 	.word	0x08008781

08008ac0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008ac4:	f7f9 ff12 	bl	80028ec <HAL_GetTick>
 8008ac8:	4603      	mov	r3, r0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ae6:	089b      	lsrs	r3, r3, #2
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d05d      	beq.n	8008bae <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008af2:	4b34      	ldr	r3, [pc, #208]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d03f      	beq.n	8008b7a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008afe:	2100      	movs	r1, #0
 8008b00:	4830      	ldr	r0, [pc, #192]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b02:	f7fa ffeb 	bl	8003adc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008b06:	f7f9 fef1 	bl	80028ec <HAL_GetTick>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008b0e:	f107 0308 	add.w	r3, r7, #8
 8008b12:	461a      	mov	r2, r3
 8008b14:	2101      	movs	r1, #1
 8008b16:	482b      	ldr	r0, [pc, #172]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b18:	f7fa ff78 	bl	8003a0c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008b1c:	f7f9 fee6 	bl	80028ec <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b2a:	d828      	bhi.n	8008b7e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0eb      	beq.n	8008b0e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008b36:	f107 0308 	add.w	r3, r7, #8
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	2110      	movs	r1, #16
 8008b3e:	4821      	ldr	r0, [pc, #132]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b40:	f7fa ff64 	bl	8003a0c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d004      	beq.n	8008b58 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008b4e:	4b1d      	ldr	r3, [pc, #116]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b54:	60da      	str	r2, [r3, #12]
 8008b56:	e002      	b.n	8008b5e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008b58:	4b1a      	ldr	r3, [pc, #104]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008b68:	4b16      	ldr	r3, [pc, #88]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	609a      	str	r2, [r3, #8]
 8008b6e:	e016      	b.n	8008b9e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008b70:	4b14      	ldr	r3, [pc, #80]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b76:	609a      	str	r2, [r3, #8]
 8008b78:	e011      	b.n	8008b9e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008b7a:	bf00      	nop
 8008b7c:	e000      	b.n	8008b80 <ethernetif_update_config+0xb0>
          goto error;
 8008b7e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008b80:	4b10      	ldr	r3, [pc, #64]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	08db      	lsrs	r3, r3, #3
 8008b86:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008b88:	4b0e      	ldr	r3, [pc, #56]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008b90:	4313      	orrs	r3, r2
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	461a      	mov	r2, r3
 8008b96:	2100      	movs	r1, #0
 8008b98:	480a      	ldr	r0, [pc, #40]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008b9a:	f7fa ff9f 	bl	8003adc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	4808      	ldr	r0, [pc, #32]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008ba2:	f7fb f85f 	bl	8003c64 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008ba6:	4807      	ldr	r0, [pc, #28]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008ba8:	f7fa fffe 	bl	8003ba8 <HAL_ETH_Start>
 8008bac:	e002      	b.n	8008bb4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008bae:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <ethernetif_update_config+0xf4>)
 8008bb0:	f7fb f829 	bl	8003c06 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f807 	bl	8008bc8 <ethernetif_notify_conn_changed>
}
 8008bba:	bf00      	nop
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	2000adb4 	.word	0x2000adb4

08008bc8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	4a08      	ldr	r2, [pc, #32]	; (8008c0c <disk_status+0x30>)
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	79fa      	ldrb	r2, [r7, #7]
 8008bf4:	4905      	ldr	r1, [pc, #20]	; (8008c0c <disk_status+0x30>)
 8008bf6:	440a      	add	r2, r1
 8008bf8:	7a12      	ldrb	r2, [r2, #8]
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	4798      	blx	r3
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	2000059c 	.word	0x2000059c

08008c10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <disk_initialize+0x48>)
 8008c22:	5cd3      	ldrb	r3, [r2, r3]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d111      	bne.n	8008c4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	4a0b      	ldr	r2, [pc, #44]	; (8008c58 <disk_initialize+0x48>)
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c30:	79fb      	ldrb	r3, [r7, #7]
 8008c32:	4a09      	ldr	r2, [pc, #36]	; (8008c58 <disk_initialize+0x48>)
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	79fa      	ldrb	r2, [r7, #7]
 8008c3e:	4906      	ldr	r1, [pc, #24]	; (8008c58 <disk_initialize+0x48>)
 8008c40:	440a      	add	r2, r1
 8008c42:	7a12      	ldrb	r2, [r2, #8]
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	2000059c 	.word	0x2000059c

08008c5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c5c:	b590      	push	{r4, r7, lr}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	607a      	str	r2, [r7, #4]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <disk_read+0x3c>)
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	689c      	ldr	r4, [r3, #8]
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	4a07      	ldr	r2, [pc, #28]	; (8008c98 <disk_read+0x3c>)
 8008c7c:	4413      	add	r3, r2
 8008c7e:	7a18      	ldrb	r0, [r3, #8]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	47a0      	blx	r4
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd90      	pop	{r4, r7, pc}
 8008c96:	bf00      	nop
 8008c98:	2000059c 	.word	0x2000059c

08008c9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c9c:	b590      	push	{r4, r7, lr}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	607a      	str	r2, [r7, #4]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	4a0a      	ldr	r2, [pc, #40]	; (8008cd8 <disk_write+0x3c>)
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	68dc      	ldr	r4, [r3, #12]
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	4a07      	ldr	r2, [pc, #28]	; (8008cd8 <disk_write+0x3c>)
 8008cbc:	4413      	add	r3, r2
 8008cbe:	7a18      	ldrb	r0, [r3, #8]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	47a0      	blx	r4
 8008cc8:	4603      	mov	r3, r0
 8008cca:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd90      	pop	{r4, r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	2000059c 	.word	0x2000059c

08008cdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	603a      	str	r2, [r7, #0]
 8008ce6:	71fb      	strb	r3, [r7, #7]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <disk_ioctl+0x38>)
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	79fa      	ldrb	r2, [r7, #7]
 8008cfa:	4906      	ldr	r1, [pc, #24]	; (8008d14 <disk_ioctl+0x38>)
 8008cfc:	440a      	add	r2, r1
 8008cfe:	7a10      	ldrb	r0, [r2, #8]
 8008d00:	79b9      	ldrb	r1, [r7, #6]
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	4798      	blx	r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	73fb      	strb	r3, [r7, #15]
  return res;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	2000059c 	.word	0x2000059c

08008d18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3301      	adds	r3, #1
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d28:	89fb      	ldrh	r3, [r7, #14]
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	b21a      	sxth	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b21b      	sxth	r3, r3
 8008d34:	4313      	orrs	r3, r2
 8008d36:	b21b      	sxth	r3, r3
 8008d38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3303      	adds	r3, #3
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	3202      	adds	r2, #2
 8008d60:	7812      	ldrb	r2, [r2, #0]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	021b      	lsls	r3, r3, #8
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	3201      	adds	r2, #1
 8008d6e:	7812      	ldrb	r2, [r2, #0]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	7812      	ldrb	r2, [r2, #0]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008d80:	68fb      	ldr	r3, [r7, #12]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	460b      	mov	r3, r1
 8008d98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	887a      	ldrh	r2, [r7, #2]
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	887b      	ldrh	r3, [r7, #2]
 8008da8:	0a1b      	lsrs	r3, r3, #8
 8008daa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	607a      	str	r2, [r7, #4]
 8008db2:	887a      	ldrh	r2, [r7, #2]
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	701a      	strb	r2, [r3, #0]
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	607a      	str	r2, [r7, #4]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	0a1b      	lsrs	r3, r3, #8
 8008dde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	607a      	str	r2, [r7, #4]
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	701a      	strb	r2, [r3, #0]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	0a1b      	lsrs	r3, r3, #8
 8008df0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	0a1b      	lsrs	r3, r3, #8
 8008e02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	607a      	str	r2, [r7, #4]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	701a      	strb	r2, [r3, #0]
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00d      	beq.n	8008e52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	1c53      	adds	r3, r2, #1
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	1c59      	adds	r1, r3, #1
 8008e40:	6179      	str	r1, [r7, #20]
 8008e42:	7812      	ldrb	r2, [r2, #0]
 8008e44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	607b      	str	r3, [r7, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1f1      	bne.n	8008e36 <mem_cpy+0x1a>
	}
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e5e:	b480      	push	{r7}
 8008e60:	b087      	sub	sp, #28
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	617a      	str	r2, [r7, #20]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	b2d2      	uxtb	r2, r2
 8008e78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f3      	bne.n	8008e6e <mem_set+0x10>
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008e94:	b480      	push	{r7}
 8008e96:	b089      	sub	sp, #36	; 0x24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	61fa      	str	r2, [r7, #28]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	61ba      	str	r2, [r7, #24]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	1acb      	subs	r3, r1, r3
 8008ec0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	607b      	str	r3, [r7, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <mem_cmp+0x40>
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0eb      	beq.n	8008eac <mem_cmp+0x18>

	return r;
 8008ed4:	697b      	ldr	r3, [r7, #20]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3724      	adds	r7, #36	; 0x24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008eec:	e002      	b.n	8008ef4 <chk_chr+0x12>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	607b      	str	r3, [r7, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <chk_chr+0x26>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d1f2      	bne.n	8008eee <chk_chr+0xc>
	return *str;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f22:	2300      	movs	r3, #0
 8008f24:	60bb      	str	r3, [r7, #8]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	e029      	b.n	8008f80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008f2c:	4a27      	ldr	r2, [pc, #156]	; (8008fcc <chk_lock+0xb4>)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	011b      	lsls	r3, r3, #4
 8008f32:	4413      	add	r3, r2
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d01d      	beq.n	8008f76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f3a:	4a24      	ldr	r2, [pc, #144]	; (8008fcc <chk_lock+0xb4>)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	4413      	add	r3, r2
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d116      	bne.n	8008f7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008f4c:	4a1f      	ldr	r2, [pc, #124]	; (8008fcc <chk_lock+0xb4>)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	4413      	add	r3, r2
 8008f54:	3304      	adds	r3, #4
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d10c      	bne.n	8008f7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008f60:	4a1a      	ldr	r2, [pc, #104]	; (8008fcc <chk_lock+0xb4>)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	4413      	add	r3, r2
 8008f68:	3308      	adds	r3, #8
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d102      	bne.n	8008f7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008f74:	e007      	b.n	8008f86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008f76:	2301      	movs	r3, #1
 8008f78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d9d2      	bls.n	8008f2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d109      	bne.n	8008fa0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <chk_lock+0x80>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d101      	bne.n	8008f9c <chk_lock+0x84>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e010      	b.n	8008fbe <chk_lock+0xa6>
 8008f9c:	2312      	movs	r3, #18
 8008f9e:	e00e      	b.n	8008fbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d108      	bne.n	8008fb8 <chk_lock+0xa0>
 8008fa6:	4a09      	ldr	r2, [pc, #36]	; (8008fcc <chk_lock+0xb4>)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	4413      	add	r3, r2
 8008fae:	330c      	adds	r3, #12
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb6:	d101      	bne.n	8008fbc <chk_lock+0xa4>
 8008fb8:	2310      	movs	r3, #16
 8008fba:	e000      	b.n	8008fbe <chk_lock+0xa6>
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	2000057c 	.word	0x2000057c

08008fd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	607b      	str	r3, [r7, #4]
 8008fda:	e002      	b.n	8008fe2 <enq_lock+0x12>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d806      	bhi.n	8008ff6 <enq_lock+0x26>
 8008fe8:	4a09      	ldr	r2, [pc, #36]	; (8009010 <enq_lock+0x40>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	4413      	add	r3, r2
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1f2      	bne.n	8008fdc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	bf14      	ite	ne
 8008ffc:	2301      	movne	r3, #1
 8008ffe:	2300      	moveq	r3, #0
 8009000:	b2db      	uxtb	r3, r3
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	2000057c 	.word	0x2000057c

08009014 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	e01f      	b.n	8009064 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009024:	4a41      	ldr	r2, [pc, #260]	; (800912c <inc_lock+0x118>)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	4413      	add	r3, r2
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d113      	bne.n	800905e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009036:	4a3d      	ldr	r2, [pc, #244]	; (800912c <inc_lock+0x118>)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	4413      	add	r3, r2
 800903e:	3304      	adds	r3, #4
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009046:	429a      	cmp	r2, r3
 8009048:	d109      	bne.n	800905e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800904a:	4a38      	ldr	r2, [pc, #224]	; (800912c <inc_lock+0x118>)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	4413      	add	r3, r2
 8009052:	3308      	adds	r3, #8
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800905a:	429a      	cmp	r2, r3
 800905c:	d006      	beq.n	800906c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3301      	adds	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d9dc      	bls.n	8009024 <inc_lock+0x10>
 800906a:	e000      	b.n	800906e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800906c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d132      	bne.n	80090da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e002      	b.n	8009080 <inc_lock+0x6c>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3301      	adds	r3, #1
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d806      	bhi.n	8009094 <inc_lock+0x80>
 8009086:	4a29      	ldr	r2, [pc, #164]	; (800912c <inc_lock+0x118>)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	4413      	add	r3, r2
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1f2      	bne.n	800907a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d101      	bne.n	800909e <inc_lock+0x8a>
 800909a:	2300      	movs	r3, #0
 800909c:	e040      	b.n	8009120 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4922      	ldr	r1, [pc, #136]	; (800912c <inc_lock+0x118>)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	440b      	add	r3, r1
 80090aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	491e      	ldr	r1, [pc, #120]	; (800912c <inc_lock+0x118>)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	440b      	add	r3, r1
 80090b8:	3304      	adds	r3, #4
 80090ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	695a      	ldr	r2, [r3, #20]
 80090c0:	491a      	ldr	r1, [pc, #104]	; (800912c <inc_lock+0x118>)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	440b      	add	r3, r1
 80090c8:	3308      	adds	r3, #8
 80090ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80090cc:	4a17      	ldr	r2, [pc, #92]	; (800912c <inc_lock+0x118>)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	4413      	add	r3, r2
 80090d4:	330c      	adds	r3, #12
 80090d6:	2200      	movs	r2, #0
 80090d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d009      	beq.n	80090f4 <inc_lock+0xe0>
 80090e0:	4a12      	ldr	r2, [pc, #72]	; (800912c <inc_lock+0x118>)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	011b      	lsls	r3, r3, #4
 80090e6:	4413      	add	r3, r2
 80090e8:	330c      	adds	r3, #12
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <inc_lock+0xe0>
 80090f0:	2300      	movs	r3, #0
 80090f2:	e015      	b.n	8009120 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d108      	bne.n	800910c <inc_lock+0xf8>
 80090fa:	4a0c      	ldr	r2, [pc, #48]	; (800912c <inc_lock+0x118>)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	4413      	add	r3, r2
 8009102:	330c      	adds	r3, #12
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	3301      	adds	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	e001      	b.n	8009110 <inc_lock+0xfc>
 800910c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009110:	4906      	ldr	r1, [pc, #24]	; (800912c <inc_lock+0x118>)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	011b      	lsls	r3, r3, #4
 8009116:	440b      	add	r3, r1
 8009118:	330c      	adds	r3, #12
 800911a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	3301      	adds	r3, #1
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	2000057c 	.word	0x2000057c

08009130 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3b01      	subs	r3, #1
 800913c:	607b      	str	r3, [r7, #4]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d825      	bhi.n	8009190 <dec_lock+0x60>
		n = Files[i].ctr;
 8009144:	4a17      	ldr	r2, [pc, #92]	; (80091a4 <dec_lock+0x74>)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	011b      	lsls	r3, r3, #4
 800914a:	4413      	add	r3, r2
 800914c:	330c      	adds	r3, #12
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009152:	89fb      	ldrh	r3, [r7, #14]
 8009154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009158:	d101      	bne.n	800915e <dec_lock+0x2e>
 800915a:	2300      	movs	r3, #0
 800915c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800915e:	89fb      	ldrh	r3, [r7, #14]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <dec_lock+0x3a>
 8009164:	89fb      	ldrh	r3, [r7, #14]
 8009166:	3b01      	subs	r3, #1
 8009168:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800916a:	4a0e      	ldr	r2, [pc, #56]	; (80091a4 <dec_lock+0x74>)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	4413      	add	r3, r2
 8009172:	330c      	adds	r3, #12
 8009174:	89fa      	ldrh	r2, [r7, #14]
 8009176:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009178:	89fb      	ldrh	r3, [r7, #14]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d105      	bne.n	800918a <dec_lock+0x5a>
 800917e:	4a09      	ldr	r2, [pc, #36]	; (80091a4 <dec_lock+0x74>)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	4413      	add	r3, r2
 8009186:	2200      	movs	r2, #0
 8009188:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	737b      	strb	r3, [r7, #13]
 800918e:	e001      	b.n	8009194 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009190:	2302      	movs	r3, #2
 8009192:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009194:	7b7b      	ldrb	r3, [r7, #13]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	2000057c 	.word	0x2000057c

080091a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	e010      	b.n	80091d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091b6:	4a0d      	ldr	r2, [pc, #52]	; (80091ec <clear_lock+0x44>)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	011b      	lsls	r3, r3, #4
 80091bc:	4413      	add	r3, r2
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d105      	bne.n	80091d2 <clear_lock+0x2a>
 80091c6:	4a09      	ldr	r2, [pc, #36]	; (80091ec <clear_lock+0x44>)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	011b      	lsls	r3, r3, #4
 80091cc:	4413      	add	r3, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3301      	adds	r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d9eb      	bls.n	80091b6 <clear_lock+0xe>
	}
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	2000057c 	.word	0x2000057c

080091f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	78db      	ldrb	r3, [r3, #3]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d034      	beq.n	800926e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009208:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7858      	ldrb	r0, [r3, #1]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009214:	2301      	movs	r3, #1
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	f7ff fd40 	bl	8008c9c <disk_write>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009222:	2301      	movs	r3, #1
 8009224:	73fb      	strb	r3, [r7, #15]
 8009226:	e022      	b.n	800926e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	1ad2      	subs	r2, r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	429a      	cmp	r2, r3
 800923c:	d217      	bcs.n	800926e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	789b      	ldrb	r3, [r3, #2]
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	e010      	b.n	8009268 <sync_window+0x78>
					wsect += fs->fsize;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	4413      	add	r3, r2
 800924e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7858      	ldrb	r0, [r3, #1]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800925a:	2301      	movs	r3, #1
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	f7ff fd1d 	bl	8008c9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	3b01      	subs	r3, #1
 8009266:	613b      	str	r3, [r7, #16]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d8eb      	bhi.n	8009246 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d01b      	beq.n	80092c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff ffad 	bl	80091f0 <sync_window>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d113      	bne.n	80092c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7858      	ldrb	r0, [r3, #1]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092aa:	2301      	movs	r3, #1
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	f7ff fcd5 	bl	8008c5c <disk_read>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80092b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80092be:	2301      	movs	r3, #1
 80092c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff ff87 	bl	80091f0 <sync_window>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d159      	bne.n	80093a0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d149      	bne.n	8009388 <sync_fs+0xb4>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	791b      	ldrb	r3, [r3, #4]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d145      	bne.n	8009388 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	899b      	ldrh	r3, [r3, #12]
 8009306:	461a      	mov	r2, r3
 8009308:	2100      	movs	r1, #0
 800930a:	f7ff fda8 	bl	8008e5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3334      	adds	r3, #52	; 0x34
 8009312:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009316:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff fd37 	bl	8008d8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	3334      	adds	r3, #52	; 0x34
 8009324:	4921      	ldr	r1, [pc, #132]	; (80093ac <sync_fs+0xd8>)
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fd4c 	bl	8008dc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3334      	adds	r3, #52	; 0x34
 8009330:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009334:	491e      	ldr	r1, [pc, #120]	; (80093b0 <sync_fs+0xdc>)
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff fd44 	bl	8008dc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3334      	adds	r3, #52	; 0x34
 8009340:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7ff fd3a 	bl	8008dc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3334      	adds	r3, #52	; 0x34
 8009354:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	4619      	mov	r1, r3
 800935e:	4610      	mov	r0, r2
 8009360:	f7ff fd30 	bl	8008dc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7858      	ldrb	r0, [r3, #1]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800937c:	2301      	movs	r3, #1
 800937e:	f7ff fc8d 	bl	8008c9c <disk_write>
			fs->fsi_flag = 0;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	785b      	ldrb	r3, [r3, #1]
 800938c:	2200      	movs	r2, #0
 800938e:	2100      	movs	r1, #0
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff fca3 	bl	8008cdc <disk_ioctl>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <sync_fs+0xcc>
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	41615252 	.word	0x41615252
 80093b0:	61417272 	.word	0x61417272

080093b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	3b02      	subs	r3, #2
 80093c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	3b02      	subs	r3, #2
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d301      	bcc.n	80093d4 <clust2sect+0x20>
 80093d0:	2300      	movs	r3, #0
 80093d2:	e008      	b.n	80093e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	895b      	ldrh	r3, [r3, #10]
 80093d8:	461a      	mov	r2, r3
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	fb03 f202 	mul.w	r2, r3, r2
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	4413      	add	r3, r2
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b086      	sub	sp, #24
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d904      	bls.n	8009412 <get_fat+0x20>
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d302      	bcc.n	8009418 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009412:	2301      	movs	r3, #1
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e0bb      	b.n	8009590 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800941c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b03      	cmp	r3, #3
 8009424:	f000 8083 	beq.w	800952e <get_fat+0x13c>
 8009428:	2b03      	cmp	r3, #3
 800942a:	f300 80a7 	bgt.w	800957c <get_fat+0x18a>
 800942e:	2b01      	cmp	r3, #1
 8009430:	d002      	beq.n	8009438 <get_fat+0x46>
 8009432:	2b02      	cmp	r3, #2
 8009434:	d056      	beq.n	80094e4 <get_fat+0xf2>
 8009436:	e0a1      	b.n	800957c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	899b      	ldrh	r3, [r3, #12]
 800944e:	4619      	mov	r1, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	fbb3 f3f1 	udiv	r3, r3, r1
 8009456:	4413      	add	r3, r2
 8009458:	4619      	mov	r1, r3
 800945a:	6938      	ldr	r0, [r7, #16]
 800945c:	f7ff ff0c 	bl	8009278 <move_window>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 808d 	bne.w	8009582 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	60fa      	str	r2, [r7, #12]
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	8992      	ldrh	r2, [r2, #12]
 8009472:	fbb3 f1f2 	udiv	r1, r3, r2
 8009476:	fb02 f201 	mul.w	r2, r2, r1
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4413      	add	r3, r2
 8009480:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009484:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	899b      	ldrh	r3, [r3, #12]
 800948e:	4619      	mov	r1, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	fbb3 f3f1 	udiv	r3, r3, r1
 8009496:	4413      	add	r3, r2
 8009498:	4619      	mov	r1, r3
 800949a:	6938      	ldr	r0, [r7, #16]
 800949c:	f7ff feec 	bl	8009278 <move_window>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d16f      	bne.n	8009586 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	899b      	ldrh	r3, [r3, #12]
 80094aa:	461a      	mov	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80094b2:	fb02 f201 	mul.w	r2, r2, r1
 80094b6:	1a9b      	subs	r3, r3, r2
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	4413      	add	r3, r2
 80094bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	461a      	mov	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <get_fat+0xe8>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	091b      	lsrs	r3, r3, #4
 80094d8:	e002      	b.n	80094e0 <get_fat+0xee>
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094e0:	617b      	str	r3, [r7, #20]
			break;
 80094e2:	e055      	b.n	8009590 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	899b      	ldrh	r3, [r3, #12]
 80094ec:	085b      	lsrs	r3, r3, #1
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	4619      	mov	r1, r3
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80094f8:	4413      	add	r3, r2
 80094fa:	4619      	mov	r1, r3
 80094fc:	6938      	ldr	r0, [r7, #16]
 80094fe:	f7ff febb 	bl	8009278 <move_window>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d140      	bne.n	800958a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	8992      	ldrh	r2, [r2, #12]
 8009516:	fbb3 f0f2 	udiv	r0, r3, r2
 800951a:	fb02 f200 	mul.w	r2, r2, r0
 800951e:	1a9b      	subs	r3, r3, r2
 8009520:	440b      	add	r3, r1
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff fbf8 	bl	8008d18 <ld_word>
 8009528:	4603      	mov	r3, r0
 800952a:	617b      	str	r3, [r7, #20]
			break;
 800952c:	e030      	b.n	8009590 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	899b      	ldrh	r3, [r3, #12]
 8009536:	089b      	lsrs	r3, r3, #2
 8009538:	b29b      	uxth	r3, r3
 800953a:	4619      	mov	r1, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009542:	4413      	add	r3, r2
 8009544:	4619      	mov	r1, r3
 8009546:	6938      	ldr	r0, [r7, #16]
 8009548:	f7ff fe96 	bl	8009278 <move_window>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d11d      	bne.n	800958e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	8992      	ldrh	r2, [r2, #12]
 8009560:	fbb3 f0f2 	udiv	r0, r3, r2
 8009564:	fb02 f200 	mul.w	r2, r2, r0
 8009568:	1a9b      	subs	r3, r3, r2
 800956a:	440b      	add	r3, r1
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff fbeb 	bl	8008d48 <ld_dword>
 8009572:	4603      	mov	r3, r0
 8009574:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009578:	617b      	str	r3, [r7, #20]
			break;
 800957a:	e009      	b.n	8009590 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800957c:	2301      	movs	r3, #1
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e006      	b.n	8009590 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009582:	bf00      	nop
 8009584:	e004      	b.n	8009590 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009586:	bf00      	nop
 8009588:	e002      	b.n	8009590 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800958a:	bf00      	nop
 800958c:	e000      	b.n	8009590 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800958e:	bf00      	nop
		}
	}

	return val;
 8009590:	697b      	ldr	r3, [r7, #20]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800959a:	b590      	push	{r4, r7, lr}
 800959c:	b089      	sub	sp, #36	; 0x24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80095a6:	2302      	movs	r3, #2
 80095a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	f240 8102 	bls.w	80097b6 <put_fat+0x21c>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	f080 80fc 	bcs.w	80097b6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	f000 80b6 	beq.w	8009734 <put_fat+0x19a>
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	f300 80fd 	bgt.w	80097c8 <put_fat+0x22e>
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d003      	beq.n	80095da <put_fat+0x40>
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	f000 8083 	beq.w	80096de <put_fat+0x144>
 80095d8:	e0f6      	b.n	80097c8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	61bb      	str	r3, [r7, #24]
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	085b      	lsrs	r3, r3, #1
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	4413      	add	r3, r2
 80095e6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	899b      	ldrh	r3, [r3, #12]
 80095f0:	4619      	mov	r1, r3
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80095f8:	4413      	add	r3, r2
 80095fa:	4619      	mov	r1, r3
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f7ff fe3b 	bl	8009278 <move_window>
 8009602:	4603      	mov	r3, r0
 8009604:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009606:	7ffb      	ldrb	r3, [r7, #31]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f040 80d6 	bne.w	80097ba <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	61ba      	str	r2, [r7, #24]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	8992      	ldrh	r2, [r2, #12]
 800961e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009622:	fb02 f200 	mul.w	r2, r2, r0
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	440b      	add	r3, r1
 800962a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00d      	beq.n	8009652 <put_fat+0xb8>
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	b25b      	sxtb	r3, r3
 800963c:	f003 030f 	and.w	r3, r3, #15
 8009640:	b25a      	sxtb	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	011b      	lsls	r3, r3, #4
 8009648:	b25b      	sxtb	r3, r3
 800964a:	4313      	orrs	r3, r2
 800964c:	b25b      	sxtb	r3, r3
 800964e:	b2db      	uxtb	r3, r3
 8009650:	e001      	b.n	8009656 <put_fat+0xbc>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	b2db      	uxtb	r3, r3
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2201      	movs	r2, #1
 800965e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	899b      	ldrh	r3, [r3, #12]
 8009668:	4619      	mov	r1, r3
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009670:	4413      	add	r3, r2
 8009672:	4619      	mov	r1, r3
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff fdff 	bl	8009278 <move_window>
 800967a:	4603      	mov	r3, r0
 800967c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800967e:	7ffb      	ldrb	r3, [r7, #31]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f040 809c 	bne.w	80097be <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	899b      	ldrh	r3, [r3, #12]
 8009690:	461a      	mov	r2, r3
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	fbb3 f0f2 	udiv	r0, r3, r2
 8009698:	fb02 f200 	mul.w	r2, r2, r0
 800969c:	1a9b      	subs	r3, r3, r2
 800969e:	440b      	add	r3, r1
 80096a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <put_fat+0x11a>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	091b      	lsrs	r3, r3, #4
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	e00e      	b.n	80096d2 <put_fat+0x138>
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	b25b      	sxtb	r3, r3
 80096ba:	f023 030f 	bic.w	r3, r3, #15
 80096be:	b25a      	sxtb	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	b25b      	sxtb	r3, r3
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	b25b      	sxtb	r3, r3
 80096cc:	4313      	orrs	r3, r2
 80096ce:	b25b      	sxtb	r3, r3
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	70da      	strb	r2, [r3, #3]
			break;
 80096dc:	e074      	b.n	80097c8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	899b      	ldrh	r3, [r3, #12]
 80096e6:	085b      	lsrs	r3, r3, #1
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	4619      	mov	r1, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80096f2:	4413      	add	r3, r2
 80096f4:	4619      	mov	r1, r3
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7ff fdbe 	bl	8009278 <move_window>
 80096fc:	4603      	mov	r3, r0
 80096fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009700:	7ffb      	ldrb	r3, [r7, #31]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d15d      	bne.n	80097c2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	8992      	ldrh	r2, [r2, #12]
 8009714:	fbb3 f0f2 	udiv	r0, r3, r2
 8009718:	fb02 f200 	mul.w	r2, r2, r0
 800971c:	1a9b      	subs	r3, r3, r2
 800971e:	440b      	add	r3, r1
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	b292      	uxth	r2, r2
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff fb31 	bl	8008d8e <st_word>
			fs->wflag = 1;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	70da      	strb	r2, [r3, #3]
			break;
 8009732:	e049      	b.n	80097c8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	899b      	ldrh	r3, [r3, #12]
 800973c:	089b      	lsrs	r3, r3, #2
 800973e:	b29b      	uxth	r3, r3
 8009740:	4619      	mov	r1, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	fbb3 f3f1 	udiv	r3, r3, r1
 8009748:	4413      	add	r3, r2
 800974a:	4619      	mov	r1, r3
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f7ff fd93 	bl	8009278 <move_window>
 8009752:	4603      	mov	r3, r0
 8009754:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009756:	7ffb      	ldrb	r3, [r7, #31]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d134      	bne.n	80097c6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	8992      	ldrh	r2, [r2, #12]
 8009770:	fbb3 f0f2 	udiv	r0, r3, r2
 8009774:	fb02 f200 	mul.w	r2, r2, r0
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	440b      	add	r3, r1
 800977c:	4618      	mov	r0, r3
 800977e:	f7ff fae3 	bl	8008d48 <ld_dword>
 8009782:	4603      	mov	r3, r0
 8009784:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009788:	4323      	orrs	r3, r4
 800978a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	8992      	ldrh	r2, [r2, #12]
 800979a:	fbb3 f0f2 	udiv	r0, r3, r2
 800979e:	fb02 f200 	mul.w	r2, r2, r0
 80097a2:	1a9b      	subs	r3, r3, r2
 80097a4:	440b      	add	r3, r1
 80097a6:	6879      	ldr	r1, [r7, #4]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff fb0b 	bl	8008dc4 <st_dword>
			fs->wflag = 1;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	70da      	strb	r2, [r3, #3]
			break;
 80097b4:	e008      	b.n	80097c8 <put_fat+0x22e>
		}
	}
 80097b6:	bf00      	nop
 80097b8:	e006      	b.n	80097c8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80097ba:	bf00      	nop
 80097bc:	e004      	b.n	80097c8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80097be:	bf00      	nop
 80097c0:	e002      	b.n	80097c8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80097c2:	bf00      	nop
 80097c4:	e000      	b.n	80097c8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80097c6:	bf00      	nop
	return res;
 80097c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3724      	adds	r7, #36	; 0x24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd90      	pop	{r4, r7, pc}

080097d2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b088      	sub	sp, #32
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d904      	bls.n	80097f8 <remove_chain+0x26>
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d301      	bcc.n	80097fc <remove_chain+0x2a>
 80097f8:	2302      	movs	r3, #2
 80097fa:	e04b      	b.n	8009894 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00c      	beq.n	800981c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	69b8      	ldr	r0, [r7, #24]
 800980a:	f7ff fec6 	bl	800959a <put_fat>
 800980e:	4603      	mov	r3, r0
 8009810:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009812:	7ffb      	ldrb	r3, [r7, #31]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <remove_chain+0x4a>
 8009818:	7ffb      	ldrb	r3, [r7, #31]
 800981a:	e03b      	b.n	8009894 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800981c:	68b9      	ldr	r1, [r7, #8]
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff fde7 	bl	80093f2 <get_fat>
 8009824:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d031      	beq.n	8009890 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d101      	bne.n	8009836 <remove_chain+0x64>
 8009832:	2302      	movs	r3, #2
 8009834:	e02e      	b.n	8009894 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800983c:	d101      	bne.n	8009842 <remove_chain+0x70>
 800983e:	2301      	movs	r3, #1
 8009840:	e028      	b.n	8009894 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009842:	2200      	movs	r2, #0
 8009844:	68b9      	ldr	r1, [r7, #8]
 8009846:	69b8      	ldr	r0, [r7, #24]
 8009848:	f7ff fea7 	bl	800959a <put_fat>
 800984c:	4603      	mov	r3, r0
 800984e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009850:	7ffb      	ldrb	r3, [r7, #31]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <remove_chain+0x88>
 8009856:	7ffb      	ldrb	r3, [r7, #31]
 8009858:	e01c      	b.n	8009894 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	695a      	ldr	r2, [r3, #20]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	3b02      	subs	r3, #2
 8009864:	429a      	cmp	r2, r3
 8009866:	d20b      	bcs.n	8009880 <remove_chain+0xae>
			fs->free_clst++;
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	791b      	ldrb	r3, [r3, #4]
 8009876:	f043 0301 	orr.w	r3, r3, #1
 800987a:	b2da      	uxtb	r2, r3
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	429a      	cmp	r2, r3
 800988c:	d3c6      	bcc.n	800981c <remove_chain+0x4a>
 800988e:	e000      	b.n	8009892 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009890:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10d      	bne.n	80098ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <create_chain+0x2c>
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d31b      	bcc.n	8009900 <create_chain+0x64>
 80098c8:	2301      	movs	r3, #1
 80098ca:	61bb      	str	r3, [r7, #24]
 80098cc:	e018      	b.n	8009900 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff fd8e 	bl	80093f2 <get_fat>
 80098d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d801      	bhi.n	80098e2 <create_chain+0x46>
 80098de:	2301      	movs	r3, #1
 80098e0:	e070      	b.n	80099c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098e8:	d101      	bne.n	80098ee <create_chain+0x52>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	e06a      	b.n	80099c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d201      	bcs.n	80098fc <create_chain+0x60>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	e063      	b.n	80099c4 <create_chain+0x128>
		scl = clst;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	3301      	adds	r3, #1
 8009908:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	69fa      	ldr	r2, [r7, #28]
 8009910:	429a      	cmp	r2, r3
 8009912:	d307      	bcc.n	8009924 <create_chain+0x88>
				ncl = 2;
 8009914:	2302      	movs	r3, #2
 8009916:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009918:	69fa      	ldr	r2, [r7, #28]
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	429a      	cmp	r2, r3
 800991e:	d901      	bls.n	8009924 <create_chain+0x88>
 8009920:	2300      	movs	r3, #0
 8009922:	e04f      	b.n	80099c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009924:	69f9      	ldr	r1, [r7, #28]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff fd63 	bl	80093f2 <get_fat>
 800992c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00e      	beq.n	8009952 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d003      	beq.n	8009942 <create_chain+0xa6>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009940:	d101      	bne.n	8009946 <create_chain+0xaa>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	e03e      	b.n	80099c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	429a      	cmp	r2, r3
 800994c:	d1da      	bne.n	8009904 <create_chain+0x68>
 800994e:	2300      	movs	r3, #0
 8009950:	e038      	b.n	80099c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009952:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009958:	69f9      	ldr	r1, [r7, #28]
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f7ff fe1d 	bl	800959a <put_fat>
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d109      	bne.n	800997e <create_chain+0xe2>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d006      	beq.n	800997e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009970:	69fa      	ldr	r2, [r7, #28]
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6938      	ldr	r0, [r7, #16]
 8009976:	f7ff fe10 	bl	800959a <put_fat>
 800997a:	4603      	mov	r3, r0
 800997c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800997e:	7dfb      	ldrb	r3, [r7, #23]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d116      	bne.n	80099b2 <create_chain+0x116>
		fs->last_clst = ncl;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	69fa      	ldr	r2, [r7, #28]
 8009988:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	695a      	ldr	r2, [r3, #20]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	3b02      	subs	r3, #2
 8009994:	429a      	cmp	r2, r3
 8009996:	d804      	bhi.n	80099a2 <create_chain+0x106>
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	1e5a      	subs	r2, r3, #1
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	791b      	ldrb	r3, [r3, #4]
 80099a6:	f043 0301 	orr.w	r3, r3, #1
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	711a      	strb	r2, [r3, #4]
 80099b0:	e007      	b.n	80099c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d102      	bne.n	80099be <create_chain+0x122>
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099bc:	e000      	b.n	80099c0 <create_chain+0x124>
 80099be:	2301      	movs	r3, #1
 80099c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80099c2:	69fb      	ldr	r3, [r7, #28]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3720      	adds	r7, #32
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e0:	3304      	adds	r3, #4
 80099e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	899b      	ldrh	r3, [r3, #12]
 80099e8:	461a      	mov	r2, r3
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	8952      	ldrh	r2, [r2, #10]
 80099f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	1d1a      	adds	r2, r3, #4
 80099fe:	613a      	str	r2, [r7, #16]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <clmt_clust+0x42>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	e010      	b.n	8009a30 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d307      	bcc.n	8009a26 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	617b      	str	r3, [r7, #20]
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	3304      	adds	r3, #4
 8009a22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a24:	e7e9      	b.n	80099fa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009a26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	4413      	add	r3, r2
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a52:	d204      	bcs.n	8009a5e <dir_sdi+0x22>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	f003 031f 	and.w	r3, r3, #31
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e071      	b.n	8009b46 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <dir_sdi+0x46>
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d902      	bls.n	8009a82 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10c      	bne.n	8009aa2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	095b      	lsrs	r3, r3, #5
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	8912      	ldrh	r2, [r2, #8]
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d301      	bcc.n	8009a98 <dir_sdi+0x5c>
 8009a94:	2302      	movs	r3, #2
 8009a96:	e056      	b.n	8009b46 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	61da      	str	r2, [r3, #28]
 8009aa0:	e02d      	b.n	8009afe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	895b      	ldrh	r3, [r3, #10]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	899b      	ldrh	r3, [r3, #12]
 8009aac:	fb03 f302 	mul.w	r3, r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ab2:	e019      	b.n	8009ae8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6979      	ldr	r1, [r7, #20]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7ff fc9a 	bl	80093f2 <get_fat>
 8009abe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ac6:	d101      	bne.n	8009acc <dir_sdi+0x90>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e03c      	b.n	8009b46 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d904      	bls.n	8009adc <dir_sdi+0xa0>
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d301      	bcc.n	8009ae0 <dir_sdi+0xa4>
 8009adc:	2302      	movs	r3, #2
 8009ade:	e032      	b.n	8009b46 <dir_sdi+0x10a>
			ofs -= csz;
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d2e1      	bcs.n	8009ab4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009af0:	6979      	ldr	r1, [r7, #20]
 8009af2:	6938      	ldr	r0, [r7, #16]
 8009af4:	f7ff fc5e 	bl	80093b4 <clust2sect>
 8009af8:	4602      	mov	r2, r0
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	69db      	ldr	r3, [r3, #28]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <dir_sdi+0xd4>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e01a      	b.n	8009b46 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	69da      	ldr	r2, [r3, #28]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	899b      	ldrh	r3, [r3, #12]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b20:	441a      	add	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	899b      	ldrh	r3, [r3, #12]
 8009b30:	461a      	mov	r2, r3
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b38:	fb02 f200 	mul.w	r2, r2, r0
 8009b3c:	1a9b      	subs	r3, r3, r2
 8009b3e:	18ca      	adds	r2, r1, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b086      	sub	sp, #24
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	3320      	adds	r3, #32
 8009b64:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <dir_next+0x28>
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b74:	d301      	bcc.n	8009b7a <dir_next+0x2c>
 8009b76:	2304      	movs	r3, #4
 8009b78:	e0bb      	b.n	8009cf2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	899b      	ldrh	r3, [r3, #12]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b86:	fb02 f201 	mul.w	r2, r2, r1
 8009b8a:	1a9b      	subs	r3, r3, r2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f040 809d 	bne.w	8009ccc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10b      	bne.n	8009bbc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	095b      	lsrs	r3, r3, #5
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	8912      	ldrh	r2, [r2, #8]
 8009bac:	4293      	cmp	r3, r2
 8009bae:	f0c0 808d 	bcc.w	8009ccc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	61da      	str	r2, [r3, #28]
 8009bb8:	2304      	movs	r3, #4
 8009bba:	e09a      	b.n	8009cf2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	899b      	ldrh	r3, [r3, #12]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	8952      	ldrh	r2, [r2, #10]
 8009bcc:	3a01      	subs	r2, #1
 8009bce:	4013      	ands	r3, r2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d17b      	bne.n	8009ccc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7ff fc08 	bl	80093f2 <get_fat>
 8009be2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d801      	bhi.n	8009bee <dir_next+0xa0>
 8009bea:	2302      	movs	r3, #2
 8009bec:	e081      	b.n	8009cf2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bf4:	d101      	bne.n	8009bfa <dir_next+0xac>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e07b      	b.n	8009cf2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d359      	bcc.n	8009cb8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	61da      	str	r2, [r3, #28]
 8009c10:	2304      	movs	r3, #4
 8009c12:	e06e      	b.n	8009cf2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7ff fe3d 	bl	800989c <create_chain>
 8009c22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <dir_next+0xe0>
 8009c2a:	2307      	movs	r3, #7
 8009c2c:	e061      	b.n	8009cf2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d101      	bne.n	8009c38 <dir_next+0xea>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e05c      	b.n	8009cf2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c3e:	d101      	bne.n	8009c44 <dir_next+0xf6>
 8009c40:	2301      	movs	r3, #1
 8009c42:	e056      	b.n	8009cf2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff fad3 	bl	80091f0 <sync_window>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <dir_next+0x106>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e04e      	b.n	8009cf2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	899b      	ldrh	r3, [r3, #12]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	2100      	movs	r1, #0
 8009c62:	f7ff f8fc 	bl	8008e5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009c66:	2300      	movs	r3, #0
 8009c68:	613b      	str	r3, [r7, #16]
 8009c6a:	6979      	ldr	r1, [r7, #20]
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7ff fba1 	bl	80093b4 <clust2sect>
 8009c72:	4602      	mov	r2, r0
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	631a      	str	r2, [r3, #48]	; 0x30
 8009c78:	e012      	b.n	8009ca0 <dir_next+0x152>
						fs->wflag = 1;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f7ff fab5 	bl	80091f0 <sync_window>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <dir_next+0x142>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e030      	b.n	8009cf2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	3301      	adds	r3, #1
 8009c94:	613b      	str	r3, [r7, #16]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	895b      	ldrh	r3, [r3, #10]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d3e6      	bcc.n	8009c7a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	1ad2      	subs	r2, r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009cbe:	6979      	ldr	r1, [r7, #20]
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f7ff fb77 	bl	80093b4 <clust2sect>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	899b      	ldrh	r3, [r3, #12]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ce4:	fb02 f200 	mul.w	r2, r2, r0
 8009ce8:	1a9b      	subs	r3, r3, r2
 8009cea:	18ca      	adds	r2, r1, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff fe95 	bl	8009a3c <dir_sdi>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d12b      	bne.n	8009d74 <dir_alloc+0x7a>
		n = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	4619      	mov	r1, r3
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f7ff faa6 	bl	8009278 <move_window>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d11d      	bne.n	8009d72 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2be5      	cmp	r3, #229	; 0xe5
 8009d3e:	d004      	beq.n	8009d4a <dir_alloc+0x50>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d107      	bne.n	8009d5a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	613b      	str	r3, [r7, #16]
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d102      	bne.n	8009d5e <dir_alloc+0x64>
 8009d58:	e00c      	b.n	8009d74 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009d5e:	2101      	movs	r1, #1
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff fef4 	bl	8009b4e <dir_next>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0d7      	beq.n	8009d20 <dir_alloc+0x26>
 8009d70:	e000      	b.n	8009d74 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009d72:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	d101      	bne.n	8009d7e <dir_alloc+0x84>
 8009d7a:	2307      	movs	r3, #7
 8009d7c:	75fb      	strb	r3, [r7, #23]
	return res;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	331a      	adds	r3, #26
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe ffbe 	bl	8008d18 <ld_word>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d109      	bne.n	8009dbc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	3314      	adds	r3, #20
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe ffb3 	bl	8008d18 <ld_word>
 8009db2:	4603      	mov	r3, r0
 8009db4:	041b      	lsls	r3, r3, #16
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	331a      	adds	r3, #26
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	b292      	uxth	r2, r2
 8009dda:	4611      	mov	r1, r2
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fe ffd6 	bl	8008d8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d109      	bne.n	8009dfe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f103 0214 	add.w	r2, r3, #20
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	4619      	mov	r1, r3
 8009df8:	4610      	mov	r0, r2
 8009dfa:	f7fe ffc8 	bl	8008d8e <st_word>
	}
}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b086      	sub	sp, #24
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e14:	2100      	movs	r1, #0
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff fe10 	bl	8009a3c <dir_sdi>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <dir_find+0x24>
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	e03e      	b.n	8009ea8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6938      	ldr	r0, [r7, #16]
 8009e32:	f7ff fa21 	bl	8009278 <move_window>
 8009e36:	4603      	mov	r3, r0
 8009e38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d12f      	bne.n	8009ea0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d102      	bne.n	8009e54 <dir_find+0x4e>
 8009e4e:	2304      	movs	r3, #4
 8009e50:	75fb      	strb	r3, [r7, #23]
 8009e52:	e028      	b.n	8009ea6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	330b      	adds	r3, #11
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	330b      	adds	r3, #11
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	f003 0308 	and.w	r3, r3, #8
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10a      	bne.n	8009e8c <dir_find+0x86>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a18      	ldr	r0, [r3, #32]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3324      	adds	r3, #36	; 0x24
 8009e7e:	220b      	movs	r2, #11
 8009e80:	4619      	mov	r1, r3
 8009e82:	f7ff f807 	bl	8008e94 <mem_cmp>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff fe5d 	bl	8009b4e <dir_next>
 8009e94:	4603      	mov	r3, r0
 8009e96:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0c5      	beq.n	8009e2a <dir_find+0x24>
 8009e9e:	e002      	b.n	8009ea6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009ea0:	bf00      	nop
 8009ea2:	e000      	b.n	8009ea6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ea4:	bf00      	nop

	return res;
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff ff1a 	bl	8009cfa <dir_alloc>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d11c      	bne.n	8009f0a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	68b8      	ldr	r0, [r7, #8]
 8009ed8:	f7ff f9ce 	bl	8009278 <move_window>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d111      	bne.n	8009f0a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	2220      	movs	r2, #32
 8009eec:	2100      	movs	r1, #0
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe ffb5 	bl	8008e5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a18      	ldr	r0, [r3, #32]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3324      	adds	r3, #36	; 0x24
 8009efc:	220b      	movs	r2, #11
 8009efe:	4619      	mov	r1, r3
 8009f00:	f7fe ff8c 	bl	8008e1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2201      	movs	r2, #1
 8009f08:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2200      	movs	r2, #0
 8009f22:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	69db      	ldr	r3, [r3, #28]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d04e      	beq.n	8009fca <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009f34:	e021      	b.n	8009f7a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1a      	ldr	r2, [r3, #32]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	1c59      	adds	r1, r3, #1
 8009f3e:	6179      	str	r1, [r7, #20]
 8009f40:	4413      	add	r3, r2
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d100      	bne.n	8009f4e <get_fileinfo+0x3a>
 8009f4c:	e015      	b.n	8009f7a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	2b05      	cmp	r3, #5
 8009f52:	d101      	bne.n	8009f58 <get_fileinfo+0x44>
 8009f54:	23e5      	movs	r3, #229	; 0xe5
 8009f56:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2b09      	cmp	r3, #9
 8009f5c:	d106      	bne.n	8009f6c <get_fileinfo+0x58>
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	613a      	str	r2, [r7, #16]
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	4413      	add	r3, r2
 8009f68:	222e      	movs	r2, #46	; 0x2e
 8009f6a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	613a      	str	r2, [r7, #16]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	4413      	add	r3, r2
 8009f76:	7bfa      	ldrb	r2, [r7, #15]
 8009f78:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b0a      	cmp	r3, #10
 8009f7e:	d9da      	bls.n	8009f36 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	4413      	add	r3, r2
 8009f86:	3309      	adds	r3, #9
 8009f88:	2200      	movs	r2, #0
 8009f8a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	7ada      	ldrb	r2, [r3, #11]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	331c      	adds	r3, #28
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fe fed3 	bl	8008d48 <ld_dword>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	3316      	adds	r3, #22
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe feca 	bl	8008d48 <ld_dword>
 8009fb4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	80da      	strh	r2, [r3, #6]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	0c1b      	lsrs	r3, r3, #16
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	809a      	strh	r2, [r3, #4]
 8009fc8:	e000      	b.n	8009fcc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009fca:	bf00      	nop
}
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009fea:	220b      	movs	r2, #11
 8009fec:	2120      	movs	r1, #32
 8009fee:	68b8      	ldr	r0, [r7, #8]
 8009ff0:	f7fe ff35 	bl	8008e5e <mem_set>
	si = i = 0; ni = 8;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	613b      	str	r3, [r7, #16]
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	61fb      	str	r3, [r7, #28]
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	61fa      	str	r2, [r7, #28]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4413      	add	r3, r2
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a00e:	7efb      	ldrb	r3, [r7, #27]
 800a010:	2b20      	cmp	r3, #32
 800a012:	d94e      	bls.n	800a0b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a014:	7efb      	ldrb	r3, [r7, #27]
 800a016:	2b2f      	cmp	r3, #47	; 0x2f
 800a018:	d006      	beq.n	800a028 <create_name+0x54>
 800a01a:	7efb      	ldrb	r3, [r7, #27]
 800a01c:	2b5c      	cmp	r3, #92	; 0x5c
 800a01e:	d110      	bne.n	800a042 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a020:	e002      	b.n	800a028 <create_name+0x54>
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	3301      	adds	r3, #1
 800a026:	61fb      	str	r3, [r7, #28]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	4413      	add	r3, r2
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b2f      	cmp	r3, #47	; 0x2f
 800a032:	d0f6      	beq.n	800a022 <create_name+0x4e>
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	4413      	add	r3, r2
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2b5c      	cmp	r3, #92	; 0x5c
 800a03e:	d0f0      	beq.n	800a022 <create_name+0x4e>
			break;
 800a040:	e038      	b.n	800a0b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a042:	7efb      	ldrb	r3, [r7, #27]
 800a044:	2b2e      	cmp	r3, #46	; 0x2e
 800a046:	d003      	beq.n	800a050 <create_name+0x7c>
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d30c      	bcc.n	800a06a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b0b      	cmp	r3, #11
 800a054:	d002      	beq.n	800a05c <create_name+0x88>
 800a056:	7efb      	ldrb	r3, [r7, #27]
 800a058:	2b2e      	cmp	r3, #46	; 0x2e
 800a05a:	d001      	beq.n	800a060 <create_name+0x8c>
 800a05c:	2306      	movs	r3, #6
 800a05e:	e044      	b.n	800a0ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a060:	2308      	movs	r3, #8
 800a062:	613b      	str	r3, [r7, #16]
 800a064:	230b      	movs	r3, #11
 800a066:	617b      	str	r3, [r7, #20]
			continue;
 800a068:	e022      	b.n	800a0b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a06a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da04      	bge.n	800a07c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a072:	7efb      	ldrb	r3, [r7, #27]
 800a074:	3b80      	subs	r3, #128	; 0x80
 800a076:	4a1f      	ldr	r2, [pc, #124]	; (800a0f4 <create_name+0x120>)
 800a078:	5cd3      	ldrb	r3, [r2, r3]
 800a07a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a07c:	7efb      	ldrb	r3, [r7, #27]
 800a07e:	4619      	mov	r1, r3
 800a080:	481d      	ldr	r0, [pc, #116]	; (800a0f8 <create_name+0x124>)
 800a082:	f7fe ff2e 	bl	8008ee2 <chk_chr>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <create_name+0xbc>
 800a08c:	2306      	movs	r3, #6
 800a08e:	e02c      	b.n	800a0ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a090:	7efb      	ldrb	r3, [r7, #27]
 800a092:	2b60      	cmp	r3, #96	; 0x60
 800a094:	d905      	bls.n	800a0a2 <create_name+0xce>
 800a096:	7efb      	ldrb	r3, [r7, #27]
 800a098:	2b7a      	cmp	r3, #122	; 0x7a
 800a09a:	d802      	bhi.n	800a0a2 <create_name+0xce>
 800a09c:	7efb      	ldrb	r3, [r7, #27]
 800a09e:	3b20      	subs	r3, #32
 800a0a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	613a      	str	r2, [r7, #16]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	7efa      	ldrb	r2, [r7, #27]
 800a0ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a0b0:	e7a6      	b.n	800a000 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a0b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	441a      	add	r2, r3
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <create_name+0xf4>
 800a0c4:	2306      	movs	r3, #6
 800a0c6:	e010      	b.n	800a0ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2be5      	cmp	r3, #229	; 0xe5
 800a0ce:	d102      	bne.n	800a0d6 <create_name+0x102>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a0d6:	7efb      	ldrb	r3, [r7, #27]
 800a0d8:	2b20      	cmp	r3, #32
 800a0da:	d801      	bhi.n	800a0e0 <create_name+0x10c>
 800a0dc:	2204      	movs	r2, #4
 800a0de:	e000      	b.n	800a0e2 <create_name+0x10e>
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	330b      	adds	r3, #11
 800a0e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a0e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0801d28c 	.word	0x0801d28c
 800a0f8:	0801a0c0 	.word	0x0801a0c0

0800a0fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a110:	e002      	b.n	800a118 <follow_path+0x1c>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	603b      	str	r3, [r7, #0]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b2f      	cmp	r3, #47	; 0x2f
 800a11e:	d0f8      	beq.n	800a112 <follow_path+0x16>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b5c      	cmp	r3, #92	; 0x5c
 800a126:	d0f4      	beq.n	800a112 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	2200      	movs	r2, #0
 800a12c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b1f      	cmp	r3, #31
 800a134:	d80a      	bhi.n	800a14c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2280      	movs	r2, #128	; 0x80
 800a13a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a13e:	2100      	movs	r1, #0
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff fc7b 	bl	8009a3c <dir_sdi>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
 800a14a:	e048      	b.n	800a1de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a14c:	463b      	mov	r3, r7
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff ff3f 	bl	8009fd4 <create_name>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d139      	bne.n	800a1d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff fe50 	bl	8009e06 <dir_find>
 800a166:	4603      	mov	r3, r0
 800a168:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a170:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a172:	7dfb      	ldrb	r3, [r7, #23]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00a      	beq.n	800a18e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	d12c      	bne.n	800a1d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d127      	bne.n	800a1d8 <follow_path+0xdc>
 800a188:	2305      	movs	r3, #5
 800a18a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a18c:	e024      	b.n	800a1d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a18e:	7afb      	ldrb	r3, [r7, #11]
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	d121      	bne.n	800a1dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	799b      	ldrb	r3, [r3, #6]
 800a19c:	f003 0310 	and.w	r3, r3, #16
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a1a4:	2305      	movs	r3, #5
 800a1a6:	75fb      	strb	r3, [r7, #23]
 800a1a8:	e019      	b.n	800a1de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	8992      	ldrh	r2, [r2, #12]
 800a1b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1bc:	fb02 f200 	mul.w	r2, r2, r0
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fdde 	bl	8009d88 <ld_clust>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a1d2:	e7bb      	b.n	800a14c <follow_path+0x50>
			if (res != FR_OK) break;
 800a1d4:	bf00      	nop
 800a1d6:	e002      	b.n	800a1de <follow_path+0xe2>
				break;
 800a1d8:	bf00      	nop
 800a1da:	e000      	b.n	800a1de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1dc:	bf00      	nop
			}
		}
	}

	return res;
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a1f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d031      	beq.n	800a262 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	e002      	b.n	800a20c <get_ldnumber+0x24>
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	3301      	adds	r3, #1
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	2b20      	cmp	r3, #32
 800a212:	d903      	bls.n	800a21c <get_ldnumber+0x34>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b3a      	cmp	r3, #58	; 0x3a
 800a21a:	d1f4      	bne.n	800a206 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b3a      	cmp	r3, #58	; 0x3a
 800a222:	d11c      	bne.n	800a25e <get_ldnumber+0x76>
			tp = *path;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	60fa      	str	r2, [r7, #12]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	3b30      	subs	r3, #48	; 0x30
 800a234:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	2b09      	cmp	r3, #9
 800a23a:	d80e      	bhi.n	800a25a <get_ldnumber+0x72>
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	429a      	cmp	r2, r3
 800a242:	d10a      	bne.n	800a25a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d107      	bne.n	800a25a <get_ldnumber+0x72>
					vol = (int)i;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	3301      	adds	r3, #1
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	e002      	b.n	800a264 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a25e:	2300      	movs	r3, #0
 800a260:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a262:	693b      	ldr	r3, [r7, #16]
}
 800a264:	4618      	mov	r0, r3
 800a266:	371c      	adds	r7, #28
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	70da      	strb	r2, [r3, #3]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a286:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7fe fff4 	bl	8009278 <move_window>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <check_fs+0x2a>
 800a296:	2304      	movs	r3, #4
 800a298:	e038      	b.n	800a30c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3334      	adds	r3, #52	; 0x34
 800a29e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fd38 	bl	8008d18 <ld_word>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d001      	beq.n	800a2b8 <check_fs+0x48>
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e029      	b.n	800a30c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2be:	2be9      	cmp	r3, #233	; 0xe9
 800a2c0:	d009      	beq.n	800a2d6 <check_fs+0x66>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2c8:	2beb      	cmp	r3, #235	; 0xeb
 800a2ca:	d11e      	bne.n	800a30a <check_fs+0x9a>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a2d2:	2b90      	cmp	r3, #144	; 0x90
 800a2d4:	d119      	bne.n	800a30a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3334      	adds	r3, #52	; 0x34
 800a2da:	3336      	adds	r3, #54	; 0x36
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fe fd33 	bl	8008d48 <ld_dword>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a2e8:	4a0a      	ldr	r2, [pc, #40]	; (800a314 <check_fs+0xa4>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d101      	bne.n	800a2f2 <check_fs+0x82>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e00c      	b.n	800a30c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	3334      	adds	r3, #52	; 0x34
 800a2f6:	3352      	adds	r3, #82	; 0x52
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe fd25 	bl	8008d48 <ld_dword>
 800a2fe:	4603      	mov	r3, r0
 800a300:	4a05      	ldr	r2, [pc, #20]	; (800a318 <check_fs+0xa8>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d101      	bne.n	800a30a <check_fs+0x9a>
 800a306:	2300      	movs	r3, #0
 800a308:	e000      	b.n	800a30c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a30a:	2302      	movs	r3, #2
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	00544146 	.word	0x00544146
 800a318:	33544146 	.word	0x33544146

0800a31c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b096      	sub	sp, #88	; 0x58
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	4613      	mov	r3, r2
 800a328:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff ff59 	bl	800a1e8 <get_ldnumber>
 800a336:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	da01      	bge.n	800a342 <find_volume+0x26>
 800a33e:	230b      	movs	r3, #11
 800a340:	e265      	b.n	800a80e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a342:	4ab0      	ldr	r2, [pc, #704]	; (800a604 <find_volume+0x2e8>)
 800a344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a34a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <find_volume+0x3a>
 800a352:	230c      	movs	r3, #12
 800a354:	e25b      	b.n	800a80e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a35a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	f023 0301 	bic.w	r3, r3, #1
 800a362:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01a      	beq.n	800a3a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	785b      	ldrb	r3, [r3, #1]
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fc33 	bl	8008bdc <disk_status>
 800a376:	4603      	mov	r3, r0
 800a378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a37c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a380:	f003 0301 	and.w	r3, r3, #1
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10c      	bne.n	800a3a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d007      	beq.n	800a39e <find_volume+0x82>
 800a38e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a392:	f003 0304 	and.w	r3, r3, #4
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a39a:	230a      	movs	r3, #10
 800a39c:	e237      	b.n	800a80e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e235      	b.n	800a80e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe fc2b 	bl	8008c10 <disk_initialize>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a3c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e21e      	b.n	800a80e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <find_volume+0xca>
 800a3d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3da:	f003 0304 	and.w	r3, r3, #4
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a3e2:	230a      	movs	r3, #10
 800a3e4:	e213      	b.n	800a80e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	7858      	ldrb	r0, [r3, #1]
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	330c      	adds	r3, #12
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	2102      	movs	r1, #2
 800a3f2:	f7fe fc73 	bl	8008cdc <disk_ioctl>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <find_volume+0xe4>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e206      	b.n	800a80e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	899b      	ldrh	r3, [r3, #12]
 800a404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a408:	d80d      	bhi.n	800a426 <find_volume+0x10a>
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	899b      	ldrh	r3, [r3, #12]
 800a40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a412:	d308      	bcc.n	800a426 <find_volume+0x10a>
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	899b      	ldrh	r3, [r3, #12]
 800a418:	461a      	mov	r2, r3
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	899b      	ldrh	r3, [r3, #12]
 800a41e:	3b01      	subs	r3, #1
 800a420:	4013      	ands	r3, r2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <find_volume+0x10e>
 800a426:	2301      	movs	r3, #1
 800a428:	e1f1      	b.n	800a80e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a42e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a430:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a432:	f7ff ff1d 	bl	800a270 <check_fs>
 800a436:	4603      	mov	r3, r0
 800a438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a43c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a440:	2b02      	cmp	r3, #2
 800a442:	d14b      	bne.n	800a4dc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a444:	2300      	movs	r3, #0
 800a446:	643b      	str	r3, [r7, #64]	; 0x40
 800a448:	e01f      	b.n	800a48a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a458:	4413      	add	r3, r2
 800a45a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45e:	3304      	adds	r3, #4
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d006      	beq.n	800a474 <find_volume+0x158>
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	3308      	adds	r3, #8
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fc6c 	bl	8008d48 <ld_dword>
 800a470:	4602      	mov	r2, r0
 800a472:	e000      	b.n	800a476 <find_volume+0x15a>
 800a474:	2200      	movs	r2, #0
 800a476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a47e:	440b      	add	r3, r1
 800a480:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a486:	3301      	adds	r3, #1
 800a488:	643b      	str	r3, [r7, #64]	; 0x40
 800a48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a48c:	2b03      	cmp	r3, #3
 800a48e:	d9dc      	bls.n	800a44a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a490:	2300      	movs	r3, #0
 800a492:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <find_volume+0x184>
 800a49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a49c:	3b01      	subs	r3, #1
 800a49e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a4ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <find_volume+0x1a6>
 800a4b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4ba:	f7ff fed9 	bl	800a270 <check_fs>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	e000      	b.n	800a4c4 <find_volume+0x1a8>
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d905      	bls.n	800a4dc <find_volume+0x1c0>
 800a4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d9e1      	bls.n	800a4a0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a4dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d101      	bne.n	800a4e8 <find_volume+0x1cc>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e192      	b.n	800a80e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a4e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d901      	bls.n	800a4f4 <find_volume+0x1d8>
 800a4f0:	230d      	movs	r3, #13
 800a4f2:	e18c      	b.n	800a80e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	3334      	adds	r3, #52	; 0x34
 800a4f8:	330b      	adds	r3, #11
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fc0c 	bl	8008d18 <ld_word>
 800a500:	4603      	mov	r3, r0
 800a502:	461a      	mov	r2, r3
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	899b      	ldrh	r3, [r3, #12]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d001      	beq.n	800a510 <find_volume+0x1f4>
 800a50c:	230d      	movs	r3, #13
 800a50e:	e17e      	b.n	800a80e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	3334      	adds	r3, #52	; 0x34
 800a514:	3316      	adds	r3, #22
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fbfe 	bl	8008d18 <ld_word>
 800a51c:	4603      	mov	r3, r0
 800a51e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <find_volume+0x218>
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	3334      	adds	r3, #52	; 0x34
 800a52a:	3324      	adds	r3, #36	; 0x24
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fc0b 	bl	8008d48 <ld_dword>
 800a532:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a536:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a538:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a542:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	789b      	ldrb	r3, [r3, #2]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d005      	beq.n	800a558 <find_volume+0x23c>
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	789b      	ldrb	r3, [r3, #2]
 800a550:	2b02      	cmp	r3, #2
 800a552:	d001      	beq.n	800a558 <find_volume+0x23c>
 800a554:	230d      	movs	r3, #13
 800a556:	e15a      	b.n	800a80e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	789b      	ldrb	r3, [r3, #2]
 800a55c:	461a      	mov	r2, r3
 800a55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a560:	fb02 f303 	mul.w	r3, r2, r3
 800a564:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a570:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a574:	895b      	ldrh	r3, [r3, #10]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d008      	beq.n	800a58c <find_volume+0x270>
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	895b      	ldrh	r3, [r3, #10]
 800a57e:	461a      	mov	r2, r3
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	895b      	ldrh	r3, [r3, #10]
 800a584:	3b01      	subs	r3, #1
 800a586:	4013      	ands	r3, r2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <find_volume+0x274>
 800a58c:	230d      	movs	r3, #13
 800a58e:	e13e      	b.n	800a80e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	3334      	adds	r3, #52	; 0x34
 800a594:	3311      	adds	r3, #17
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe fbbe 	bl	8008d18 <ld_word>
 800a59c:	4603      	mov	r3, r0
 800a59e:	461a      	mov	r2, r3
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	891b      	ldrh	r3, [r3, #8]
 800a5a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5aa:	8992      	ldrh	r2, [r2, #12]
 800a5ac:	0952      	lsrs	r2, r2, #5
 800a5ae:	b292      	uxth	r2, r2
 800a5b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5b4:	fb02 f201 	mul.w	r2, r2, r1
 800a5b8:	1a9b      	subs	r3, r3, r2
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <find_volume+0x2a8>
 800a5c0:	230d      	movs	r3, #13
 800a5c2:	e124      	b.n	800a80e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	3334      	adds	r3, #52	; 0x34
 800a5c8:	3313      	adds	r3, #19
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe fba4 	bl	8008d18 <ld_word>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a5d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <find_volume+0x2cc>
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	3334      	adds	r3, #52	; 0x34
 800a5de:	3320      	adds	r3, #32
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fe fbb1 	bl	8008d48 <ld_dword>
 800a5e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	3334      	adds	r3, #52	; 0x34
 800a5ec:	330e      	adds	r3, #14
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe fb92 	bl	8008d18 <ld_word>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a5f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d104      	bne.n	800a608 <find_volume+0x2ec>
 800a5fe:	230d      	movs	r3, #13
 800a600:	e105      	b.n	800a80e <find_volume+0x4f2>
 800a602:	bf00      	nop
 800a604:	20000574 	.word	0x20000574

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a608:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a60c:	4413      	add	r3, r2
 800a60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a610:	8911      	ldrh	r1, [r2, #8]
 800a612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a614:	8992      	ldrh	r2, [r2, #12]
 800a616:	0952      	lsrs	r2, r2, #5
 800a618:	b292      	uxth	r2, r2
 800a61a:	fbb1 f2f2 	udiv	r2, r1, r2
 800a61e:	b292      	uxth	r2, r2
 800a620:	4413      	add	r3, r2
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	429a      	cmp	r2, r3
 800a62a:	d201      	bcs.n	800a630 <find_volume+0x314>
 800a62c:	230d      	movs	r3, #13
 800a62e:	e0ee      	b.n	800a80e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a638:	8952      	ldrh	r2, [r2, #10]
 800a63a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a63e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <find_volume+0x32e>
 800a646:	230d      	movs	r3, #13
 800a648:	e0e1      	b.n	800a80e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a64a:	2303      	movs	r3, #3
 800a64c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a656:	4293      	cmp	r3, r2
 800a658:	d802      	bhi.n	800a660 <find_volume+0x344>
 800a65a:	2302      	movs	r3, #2
 800a65c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a666:	4293      	cmp	r3, r2
 800a668:	d802      	bhi.n	800a670 <find_volume+0x354>
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	1c9a      	adds	r2, r3, #2
 800a674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a676:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a67c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a67e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a682:	441a      	add	r2, r3
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a688:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	441a      	add	r2, r3
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a692:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a696:	2b03      	cmp	r3, #3
 800a698:	d11e      	bne.n	800a6d8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	3334      	adds	r3, #52	; 0x34
 800a69e:	332a      	adds	r3, #42	; 0x2a
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe fb39 	bl	8008d18 <ld_word>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <find_volume+0x394>
 800a6ac:	230d      	movs	r3, #13
 800a6ae:	e0ae      	b.n	800a80e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	891b      	ldrh	r3, [r3, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <find_volume+0x3a0>
 800a6b8:	230d      	movs	r3, #13
 800a6ba:	e0a8      	b.n	800a80e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	3334      	adds	r3, #52	; 0x34
 800a6c0:	332c      	adds	r3, #44	; 0x2c
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fe fb40 	bl	8008d48 <ld_dword>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6d6:	e01f      	b.n	800a718 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	891b      	ldrh	r3, [r3, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <find_volume+0x3c8>
 800a6e0:	230d      	movs	r3, #13
 800a6e2:	e094      	b.n	800a80e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ea:	441a      	add	r2, r3
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d103      	bne.n	800a700 <find_volume+0x3e4>
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	005b      	lsls	r3, r3, #1
 800a6fe:	e00a      	b.n	800a716 <find_volume+0x3fa>
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	699a      	ldr	r2, [r3, #24]
 800a704:	4613      	mov	r3, r2
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	4413      	add	r3, r2
 800a70a:	085a      	lsrs	r2, r3, #1
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	f003 0301 	and.w	r3, r3, #1
 800a714:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a716:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	69da      	ldr	r2, [r3, #28]
 800a71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71e:	899b      	ldrh	r3, [r3, #12]
 800a720:	4619      	mov	r1, r3
 800a722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a724:	440b      	add	r3, r1
 800a726:	3b01      	subs	r3, #1
 800a728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a72a:	8989      	ldrh	r1, [r1, #12]
 800a72c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a730:	429a      	cmp	r2, r3
 800a732:	d201      	bcs.n	800a738 <find_volume+0x41c>
 800a734:	230d      	movs	r3, #13
 800a736:	e06a      	b.n	800a80e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a73e:	615a      	str	r2, [r3, #20]
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	695a      	ldr	r2, [r3, #20]
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74a:	2280      	movs	r2, #128	; 0x80
 800a74c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a74e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a752:	2b03      	cmp	r3, #3
 800a754:	d149      	bne.n	800a7ea <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	3334      	adds	r3, #52	; 0x34
 800a75a:	3330      	adds	r3, #48	; 0x30
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fe fadb 	bl	8008d18 <ld_word>
 800a762:	4603      	mov	r3, r0
 800a764:	2b01      	cmp	r3, #1
 800a766:	d140      	bne.n	800a7ea <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a76a:	3301      	adds	r3, #1
 800a76c:	4619      	mov	r1, r3
 800a76e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a770:	f7fe fd82 	bl	8009278 <move_window>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d137      	bne.n	800a7ea <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	2200      	movs	r2, #0
 800a77e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	3334      	adds	r3, #52	; 0x34
 800a784:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fac5 	bl	8008d18 <ld_word>
 800a78e:	4603      	mov	r3, r0
 800a790:	461a      	mov	r2, r3
 800a792:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a796:	429a      	cmp	r2, r3
 800a798:	d127      	bne.n	800a7ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79c:	3334      	adds	r3, #52	; 0x34
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fad2 	bl	8008d48 <ld_dword>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	4a1c      	ldr	r2, [pc, #112]	; (800a818 <find_volume+0x4fc>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d11e      	bne.n	800a7ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	3334      	adds	r3, #52	; 0x34
 800a7b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe fac7 	bl	8008d48 <ld_dword>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4a17      	ldr	r2, [pc, #92]	; (800a81c <find_volume+0x500>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d113      	bne.n	800a7ea <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	3334      	adds	r3, #52	; 0x34
 800a7c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fabc 	bl	8008d48 <ld_dword>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d8:	3334      	adds	r3, #52	; 0x34
 800a7da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe fab2 	bl	8008d48 <ld_dword>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a7f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <find_volume+0x504>)
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <find_volume+0x504>)
 800a7fc:	801a      	strh	r2, [r3, #0]
 800a7fe:	4b08      	ldr	r3, [pc, #32]	; (800a820 <find_volume+0x504>)
 800a800:	881a      	ldrh	r2, [r3, #0]
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a806:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a808:	f7fe fcce 	bl	80091a8 <clear_lock>
#endif
	return FR_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3758      	adds	r7, #88	; 0x58
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	41615252 	.word	0x41615252
 800a81c:	61417272 	.word	0x61417272
 800a820:	20000578 	.word	0x20000578

0800a824 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a82e:	2309      	movs	r3, #9
 800a830:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d01c      	beq.n	800a872 <validate+0x4e>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d018      	beq.n	800a872 <validate+0x4e>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d013      	beq.n	800a872 <validate+0x4e>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	889a      	ldrh	r2, [r3, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	88db      	ldrh	r3, [r3, #6]
 800a854:	429a      	cmp	r2, r3
 800a856:	d10c      	bne.n	800a872 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe f9bc 	bl	8008bdc <disk_status>
 800a864:	4603      	mov	r3, r0
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <validate+0x4e>
			res = FR_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <validate+0x5a>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	e000      	b.n	800a880 <validate+0x5c>
 800a87e:	2300      	movs	r3, #0
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	6013      	str	r3, [r2, #0]
	return res;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b088      	sub	sp, #32
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	4613      	mov	r3, r2
 800a89c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a8a2:	f107 0310 	add.w	r3, r7, #16
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7ff fc9e 	bl	800a1e8 <get_ldnumber>
 800a8ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	da01      	bge.n	800a8b8 <f_mount+0x28>
 800a8b4:	230b      	movs	r3, #11
 800a8b6:	e02b      	b.n	800a910 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a8b8:	4a17      	ldr	r2, [pc, #92]	; (800a918 <f_mount+0x88>)
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a8c8:	69b8      	ldr	r0, [r7, #24]
 800a8ca:	f7fe fc6d 	bl	80091a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d002      	beq.n	800a8e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	490d      	ldr	r1, [pc, #52]	; (800a918 <f_mount+0x88>)
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <f_mount+0x66>
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d001      	beq.n	800a8fa <f_mount+0x6a>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e00a      	b.n	800a910 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a8fa:	f107 010c 	add.w	r1, r7, #12
 800a8fe:	f107 0308 	add.w	r3, r7, #8
 800a902:	2200      	movs	r2, #0
 800a904:	4618      	mov	r0, r3
 800a906:	f7ff fd09 	bl	800a31c <find_volume>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3720      	adds	r7, #32
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20000574 	.word	0x20000574

0800a91c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b098      	sub	sp, #96	; 0x60
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <f_open+0x18>
 800a930:	2309      	movs	r3, #9
 800a932:	e1bb      	b.n	800acac <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a93a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a93c:	79fa      	ldrb	r2, [r7, #7]
 800a93e:	f107 0110 	add.w	r1, r7, #16
 800a942:	f107 0308 	add.w	r3, r7, #8
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff fce8 	bl	800a31c <find_volume>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a956:	2b00      	cmp	r3, #0
 800a958:	f040 819f 	bne.w	800ac9a <f_open+0x37e>
		dj.obj.fs = fs;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	f107 0314 	add.w	r3, r7, #20
 800a966:	4611      	mov	r1, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fbc7 	bl	800a0fc <follow_path>
 800a96e:	4603      	mov	r3, r0
 800a970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d11a      	bne.n	800a9b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a97c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a980:	b25b      	sxtb	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	da03      	bge.n	800a98e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a986:	2306      	movs	r3, #6
 800a988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a98c:	e011      	b.n	800a9b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	bf14      	ite	ne
 800a998:	2301      	movne	r3, #1
 800a99a:	2300      	moveq	r3, #0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f107 0314 	add.w	r3, r7, #20
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe fab6 	bl	8008f18 <chk_lock>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	f003 031c 	and.w	r3, r3, #28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d07f      	beq.n	800aabc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d017      	beq.n	800a9f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a9c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d10e      	bne.n	800a9ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a9cc:	f7fe fb00 	bl	8008fd0 <enq_lock>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d006      	beq.n	800a9e4 <f_open+0xc8>
 800a9d6:	f107 0314 	add.w	r3, r7, #20
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fa68 	bl	8009eb0 <dir_register>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	e000      	b.n	800a9e6 <f_open+0xca>
 800a9e4:	2312      	movs	r3, #18
 800a9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	f043 0308 	orr.w	r3, r3, #8
 800a9f0:	71fb      	strb	r3, [r7, #7]
 800a9f2:	e010      	b.n	800aa16 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a9f4:	7ebb      	ldrb	r3, [r7, #26]
 800a9f6:	f003 0311 	and.w	r3, r3, #17
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <f_open+0xea>
					res = FR_DENIED;
 800a9fe:	2307      	movs	r3, #7
 800aa00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa04:	e007      	b.n	800aa16 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aa06:	79fb      	ldrb	r3, [r7, #7]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <f_open+0xfa>
 800aa10:	2308      	movs	r3, #8
 800aa12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aa16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d168      	bne.n	800aaf0 <f_open+0x1d4>
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	f003 0308 	and.w	r3, r3, #8
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d063      	beq.n	800aaf0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aa28:	f7fd f9f0 	bl	8007e0c <get_fattime>
 800aa2c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aa2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa30:	330e      	adds	r3, #14
 800aa32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe f9c5 	bl	8008dc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3c:	3316      	adds	r3, #22
 800aa3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe f9bf 	bl	8008dc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	330b      	adds	r3, #11
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff f997 	bl	8009d88 <ld_clust>
 800aa5a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa60:	2200      	movs	r2, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff f9af 	bl	8009dc6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6a:	331c      	adds	r3, #28
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe f9a8 	bl	8008dc4 <st_dword>
					fs->wflag = 1;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	2201      	movs	r2, #1
 800aa78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aa7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d037      	beq.n	800aaf0 <f_open+0x1d4>
						dw = fs->winsect;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa84:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800aa86:	f107 0314 	add.w	r3, r7, #20
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fe9f 	bl	80097d2 <remove_chain>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800aa9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d126      	bne.n	800aaf0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fbe6 	bl	8009278 <move_window>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aab6:	3a01      	subs	r2, #1
 800aab8:	611a      	str	r2, [r3, #16]
 800aaba:	e019      	b.n	800aaf0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aabc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d115      	bne.n	800aaf0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aac4:	7ebb      	ldrb	r3, [r7, #26]
 800aac6:	f003 0310 	and.w	r3, r3, #16
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aace:	2304      	movs	r3, #4
 800aad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aad4:	e00c      	b.n	800aaf0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d007      	beq.n	800aaf0 <f_open+0x1d4>
 800aae0:	7ebb      	ldrb	r3, [r7, #26]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <f_open+0x1d4>
						res = FR_DENIED;
 800aaea:	2307      	movs	r3, #7
 800aaec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aaf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d128      	bne.n	800ab4a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aaf8:	79fb      	ldrb	r3, [r7, #7]
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ab12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bf14      	ite	ne
 800ab22:	2301      	movne	r3, #1
 800ab24:	2300      	moveq	r3, #0
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fe fa6f 	bl	8009014 <inc_lock>
 800ab36:	4602      	mov	r2, r0
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <f_open+0x22e>
 800ab44:	2302      	movs	r3, #2
 800ab46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ab4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f040 80a3 	bne.w	800ac9a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7ff f914 	bl	8009d88 <ld_clust>
 800ab60:	4602      	mov	r2, r0
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ab66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab68:	331c      	adds	r3, #28
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe f8ec 	bl	8008d48 <ld_dword>
 800ab70:	4602      	mov	r2, r0
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	88da      	ldrh	r2, [r3, #6]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	79fa      	ldrb	r2, [r7, #7]
 800ab8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3330      	adds	r3, #48	; 0x30
 800aba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe f956 	bl	8008e5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d06e      	beq.n	800ac9a <f_open+0x37e>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d06a      	beq.n	800ac9a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	895b      	ldrh	r3, [r3, #10]
 800abd0:	461a      	mov	r2, r3
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	899b      	ldrh	r3, [r3, #12]
 800abd6:	fb03 f302 	mul.w	r3, r3, r2
 800abda:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	657b      	str	r3, [r7, #84]	; 0x54
 800abe8:	e016      	b.n	800ac18 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fe fbff 	bl	80093f2 <get_fat>
 800abf4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800abf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d802      	bhi.n	800ac02 <f_open+0x2e6>
 800abfc:	2302      	movs	r3, #2
 800abfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac08:	d102      	bne.n	800ac10 <f_open+0x2f4>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	657b      	str	r3, [r7, #84]	; 0x54
 800ac18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <f_open+0x30c>
 800ac20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d8e0      	bhi.n	800abea <f_open+0x2ce>
				}
				fp->clust = clst;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac2c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d131      	bne.n	800ac9a <f_open+0x37e>
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	899b      	ldrh	r3, [r3, #12]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac42:	fb02 f201 	mul.w	r2, r2, r1
 800ac46:	1a9b      	subs	r3, r3, r2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d026      	beq.n	800ac9a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fe fbaf 	bl	80093b4 <clust2sect>
 800ac56:	6478      	str	r0, [r7, #68]	; 0x44
 800ac58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d103      	bne.n	800ac66 <f_open+0x34a>
						res = FR_INT_ERR;
 800ac5e:	2302      	movs	r3, #2
 800ac60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac64:	e019      	b.n	800ac9a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	899b      	ldrh	r3, [r3, #12]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac6e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac74:	441a      	add	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	7858      	ldrb	r0, [r3, #1]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6a1a      	ldr	r2, [r3, #32]
 800ac88:	2301      	movs	r3, #1
 800ac8a:	f7fd ffe7 	bl	8008c5c <disk_read>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <f_open+0x37e>
 800ac94:	2301      	movs	r3, #1
 800ac96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ac9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <f_open+0x38c>
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800acac:	4618      	mov	r0, r3
 800acae:	3760      	adds	r7, #96	; 0x60
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08c      	sub	sp, #48	; 0x30
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f107 0210 	add.w	r2, r7, #16
 800acd2:	4611      	mov	r1, r2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff fda5 	bl	800a824 <validate>
 800acda:	4603      	mov	r3, r0
 800acdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ace0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d107      	bne.n	800acf8 <f_write+0x44>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	7d5b      	ldrb	r3, [r3, #21]
 800acec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800acf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <f_write+0x4a>
 800acf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acfc:	e16a      	b.n	800afd4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	7d1b      	ldrb	r3, [r3, #20]
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <f_write+0x5a>
 800ad0a:	2307      	movs	r3, #7
 800ad0c:	e162      	b.n	800afd4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	699a      	ldr	r2, [r3, #24]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	441a      	add	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	f080 814c 	bcs.w	800afb8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	43db      	mvns	r3, r3
 800ad26:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ad28:	e146      	b.n	800afb8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	699b      	ldr	r3, [r3, #24]
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	8992      	ldrh	r2, [r2, #12]
 800ad32:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad36:	fb02 f201 	mul.w	r2, r2, r1
 800ad3a:	1a9b      	subs	r3, r3, r2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f040 80f1 	bne.w	800af24 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	8992      	ldrh	r2, [r2, #12]
 800ad4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	8952      	ldrh	r2, [r2, #10]
 800ad52:	3a01      	subs	r2, #1
 800ad54:	4013      	ands	r3, r2
 800ad56:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d143      	bne.n	800ade6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10c      	bne.n	800ad80 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d11a      	bne.n	800ada8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2100      	movs	r1, #0
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fe fd90 	bl	800989c <create_chain>
 800ad7c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad7e:	e013      	b.n	800ada8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d007      	beq.n	800ad98 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f7fe fe1c 	bl	80099cc <clmt_clust>
 800ad94:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad96:	e007      	b.n	800ada8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4610      	mov	r0, r2
 800ada2:	f7fe fd7b 	bl	800989c <create_chain>
 800ada6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 8109 	beq.w	800afc2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d104      	bne.n	800adc0 <f_write+0x10c>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2202      	movs	r2, #2
 800adba:	755a      	strb	r2, [r3, #21]
 800adbc:	2302      	movs	r3, #2
 800adbe:	e109      	b.n	800afd4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800adc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc6:	d104      	bne.n	800add2 <f_write+0x11e>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2201      	movs	r2, #1
 800adcc:	755a      	strb	r2, [r3, #21]
 800adce:	2301      	movs	r3, #1
 800add0:	e100      	b.n	800afd4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800add6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <f_write+0x132>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ade4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	7d1b      	ldrb	r3, [r3, #20]
 800adea:	b25b      	sxtb	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	da18      	bge.n	800ae22 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	7858      	ldrb	r0, [r3, #1]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6a1a      	ldr	r2, [r3, #32]
 800adfe:	2301      	movs	r3, #1
 800ae00:	f7fd ff4c 	bl	8008c9c <disk_write>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <f_write+0x160>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	755a      	strb	r2, [r3, #21]
 800ae10:	2301      	movs	r3, #1
 800ae12:	e0df      	b.n	800afd4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	7d1b      	ldrb	r3, [r3, #20]
 800ae18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f7fe fac2 	bl	80093b4 <clust2sect>
 800ae30:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d104      	bne.n	800ae42 <f_write+0x18e>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	755a      	strb	r2, [r3, #21]
 800ae3e:	2302      	movs	r3, #2
 800ae40:	e0c8      	b.n	800afd4 <f_write+0x320>
			sect += csect;
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	4413      	add	r3, r2
 800ae48:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	899b      	ldrh	r3, [r3, #12]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae56:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d043      	beq.n	800aee6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	4413      	add	r3, r2
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	8952      	ldrh	r2, [r2, #10]
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d905      	bls.n	800ae78 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	895b      	ldrh	r3, [r3, #10]
 800ae70:	461a      	mov	r2, r3
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	7858      	ldrb	r0, [r3, #1]
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	69f9      	ldr	r1, [r7, #28]
 800ae82:	f7fd ff0b 	bl	8008c9c <disk_write>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <f_write+0x1e2>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	755a      	strb	r2, [r3, #21]
 800ae92:	2301      	movs	r3, #1
 800ae94:	e09e      	b.n	800afd4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a1a      	ldr	r2, [r3, #32]
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	6a3a      	ldr	r2, [r7, #32]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d918      	bls.n	800aed6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6a1a      	ldr	r2, [r3, #32]
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	8992      	ldrh	r2, [r2, #12]
 800aeb6:	fb02 f303 	mul.w	r3, r2, r3
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	18d1      	adds	r1, r2, r3
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	899b      	ldrh	r3, [r3, #12]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7fd ffaa 	bl	8008e1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	7d1b      	ldrb	r3, [r3, #20]
 800aecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	899b      	ldrh	r3, [r3, #12]
 800aeda:	461a      	mov	r2, r3
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	fb02 f303 	mul.w	r3, r2, r3
 800aee2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800aee4:	e04b      	b.n	800af7e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d016      	beq.n	800af1e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	699a      	ldr	r2, [r3, #24]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d210      	bcs.n	800af1e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	7858      	ldrb	r0, [r3, #1]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af06:	2301      	movs	r3, #1
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	f7fd fea7 	bl	8008c5c <disk_read>
 800af0e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800af10:	2b00      	cmp	r3, #0
 800af12:	d004      	beq.n	800af1e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2201      	movs	r2, #1
 800af18:	755a      	strb	r2, [r3, #21]
 800af1a:	2301      	movs	r3, #1
 800af1c:	e05a      	b.n	800afd4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	899b      	ldrh	r3, [r3, #12]
 800af28:	4618      	mov	r0, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	8992      	ldrh	r2, [r2, #12]
 800af32:	fbb3 f1f2 	udiv	r1, r3, r2
 800af36:	fb02 f201 	mul.w	r2, r2, r1
 800af3a:	1a9b      	subs	r3, r3, r2
 800af3c:	1ac3      	subs	r3, r0, r3
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800af40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	429a      	cmp	r2, r3
 800af46:	d901      	bls.n	800af4c <f_write+0x298>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	8992      	ldrh	r2, [r2, #12]
 800af5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800af5e:	fb02 f200 	mul.w	r2, r2, r0
 800af62:	1a9b      	subs	r3, r3, r2
 800af64:	440b      	add	r3, r1
 800af66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af68:	69f9      	ldr	r1, [r7, #28]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fd ff56 	bl	8008e1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	7d1b      	ldrb	r3, [r3, #20]
 800af74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800af7e:	69fa      	ldr	r2, [r7, #28]
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	4413      	add	r3, r2
 800af84:	61fb      	str	r3, [r7, #28]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	699a      	ldr	r2, [r3, #24]
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	441a      	add	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	619a      	str	r2, [r3, #24]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	bf38      	it	cc
 800af9e:	461a      	movcc	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	60da      	str	r2, [r3, #12]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	441a      	add	r2, r3
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f47f aeb5 	bne.w	800ad2a <f_write+0x76>
 800afc0:	e000      	b.n	800afc4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afc2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	7d1b      	ldrb	r3, [r3, #20]
 800afc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3730      	adds	r7, #48	; 0x30
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f107 0208 	add.w	r2, r7, #8
 800afea:	4611      	mov	r1, r2
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff fc19 	bl	800a824 <validate>
 800aff2:	4603      	mov	r3, r0
 800aff4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d168      	bne.n	800b0ce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7d1b      	ldrb	r3, [r3, #20]
 800b000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b004:	2b00      	cmp	r3, #0
 800b006:	d062      	beq.n	800b0ce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	7d1b      	ldrb	r3, [r3, #20]
 800b00c:	b25b      	sxtb	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da15      	bge.n	800b03e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	7858      	ldrb	r0, [r3, #1]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1a      	ldr	r2, [r3, #32]
 800b020:	2301      	movs	r3, #1
 800b022:	f7fd fe3b 	bl	8008c9c <disk_write>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <f_sync+0x54>
 800b02c:	2301      	movs	r3, #1
 800b02e:	e04f      	b.n	800b0d0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	7d1b      	ldrb	r3, [r3, #20]
 800b034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b03e:	f7fc fee5 	bl	8007e0c <get_fattime>
 800b042:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	4619      	mov	r1, r3
 800b04c:	4610      	mov	r0, r2
 800b04e:	f7fe f913 	bl	8009278 <move_window>
 800b052:	4603      	mov	r3, r0
 800b054:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b056:	7dfb      	ldrb	r3, [r7, #23]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d138      	bne.n	800b0ce <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b060:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	330b      	adds	r3, #11
 800b066:	781a      	ldrb	r2, [r3, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	330b      	adds	r3, #11
 800b06c:	f042 0220 	orr.w	r2, r2, #32
 800b070:	b2d2      	uxtb	r2, r2
 800b072:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	461a      	mov	r2, r3
 800b07e:	68f9      	ldr	r1, [r7, #12]
 800b080:	f7fe fea1 	bl	8009dc6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f103 021c 	add.w	r2, r3, #28
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	4619      	mov	r1, r3
 800b090:	4610      	mov	r0, r2
 800b092:	f7fd fe97 	bl	8008dc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3316      	adds	r3, #22
 800b09a:	6939      	ldr	r1, [r7, #16]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7fd fe91 	bl	8008dc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3312      	adds	r3, #18
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fd fe70 	bl	8008d8e <st_word>
					fs->wflag = 1;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe f90c 	bl	80092d4 <sync_fs>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	7d1b      	ldrb	r3, [r3, #20]
 800b0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff ff7b 	bl	800afdc <f_sync>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d118      	bne.n	800b122 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f107 0208 	add.w	r2, r7, #8
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7ff fb93 	bl	800a824 <validate>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10c      	bne.n	800b122 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fe f80f 	bl	8009130 <dec_lock>
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b122:	7bfb      	ldrb	r3, [r7, #15]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b090      	sub	sp, #64	; 0x40
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b136:	f107 010c 	add.w	r1, r7, #12
 800b13a:	1d3b      	adds	r3, r7, #4
 800b13c:	2200      	movs	r2, #0
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff f8ec 	bl	800a31c <find_volume>
 800b144:	4603      	mov	r3, r0
 800b146:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b14a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d11f      	bne.n	800b192 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	f107 030c 	add.w	r3, r7, #12
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe ffce 	bl	800a0fc <follow_path>
 800b160:	4603      	mov	r3, r0
 800b162:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b166:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d111      	bne.n	800b192 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b16e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b172:	b25b      	sxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	da03      	bge.n	800b180 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b178:	2306      	movs	r3, #6
 800b17a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b17e:	e008      	b.n	800b192 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d005      	beq.n	800b192 <f_stat+0x66>
 800b186:	f107 030c 	add.w	r3, r7, #12
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe fec1 	bl	8009f14 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b192:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b196:	4618      	mov	r0, r3
 800b198:	3740      	adds	r7, #64	; 0x40
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b096      	sub	sp, #88	; 0x58
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b1a6:	f107 0108 	add.w	r1, r7, #8
 800b1aa:	1d3b      	adds	r3, r7, #4
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7ff f8b4 	bl	800a31c <find_volume>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b1be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f040 80f2 	bne.w	800b3ac <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	f107 030c 	add.w	r3, r7, #12
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fe ff93 	bl	800a0fc <follow_path>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b1dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d102      	bne.n	800b1ea <f_mkdir+0x4c>
 800b1e4:	2308      	movs	r3, #8
 800b1e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b1ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	f040 80dc 	bne.w	800b3ac <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b1f4:	f107 030c 	add.w	r3, r7, #12
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe fb4e 	bl	800989c <create_chain>
 800b200:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	895b      	ldrh	r3, [r3, #10]
 800b206:	461a      	mov	r2, r3
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	899b      	ldrh	r3, [r3, #12]
 800b20c:	fb03 f302 	mul.w	r3, r3, r2
 800b210:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d102      	bne.n	800b224 <f_mkdir+0x86>
 800b21e:	2307      	movs	r3, #7
 800b220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b226:	2b01      	cmp	r3, #1
 800b228:	d102      	bne.n	800b230 <f_mkdir+0x92>
 800b22a:	2302      	movs	r3, #2
 800b22c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b236:	d102      	bne.n	800b23e <f_mkdir+0xa0>
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b23e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <f_mkdir+0xb6>
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	4618      	mov	r0, r3
 800b24a:	f7fd ffd1 	bl	80091f0 <sync_window>
 800b24e:	4603      	mov	r3, r0
 800b250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b254:	f7fc fdda 	bl	8007e0c <get_fattime>
 800b258:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b25a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d16c      	bne.n	800b33c <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe f8a4 	bl	80093b4 <clust2sect>
 800b26c:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	3334      	adds	r3, #52	; 0x34
 800b272:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	899b      	ldrh	r3, [r3, #12]
 800b278:	461a      	mov	r2, r3
 800b27a:	2100      	movs	r1, #0
 800b27c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b27e:	f7fd fdee 	bl	8008e5e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b282:	220b      	movs	r2, #11
 800b284:	2120      	movs	r1, #32
 800b286:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b288:	f7fd fde9 	bl	8008e5e <mem_set>
					dir[DIR_Name] = '.';
 800b28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b28e:	222e      	movs	r2, #46	; 0x2e
 800b290:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b294:	330b      	adds	r3, #11
 800b296:	2210      	movs	r2, #16
 800b298:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b29c:	3316      	adds	r3, #22
 800b29e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fd fd8f 	bl	8008dc4 <st_dword>
					st_clust(fs, dir, dcl);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe fd8a 	bl	8009dc6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b4:	3320      	adds	r3, #32
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd fdae 	bl	8008e1c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c2:	3321      	adds	r3, #33	; 0x21
 800b2c4:	222e      	movs	r2, #46	; 0x2e
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d106      	bne.n	800b2e2 <f_mkdir+0x144>
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d101      	bne.n	800b2e2 <f_mkdir+0x144>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b2e2:	68b8      	ldr	r0, [r7, #8]
 800b2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e6:	3320      	adds	r3, #32
 800b2e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	f7fe fd6b 	bl	8009dc6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	895b      	ldrh	r3, [r3, #10]
 800b2f4:	653b      	str	r3, [r7, #80]	; 0x50
 800b2f6:	e01c      	b.n	800b332 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800b2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2201      	movs	r2, #1
 800b306:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd ff70 	bl	80091f0 <sync_window>
 800b310:	4603      	mov	r3, r0
 800b312:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b316:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10d      	bne.n	800b33a <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	899b      	ldrh	r3, [r3, #12]
 800b322:	461a      	mov	r2, r3
 800b324:	2100      	movs	r1, #0
 800b326:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b328:	f7fd fd99 	bl	8008e5e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b32e:	3b01      	subs	r3, #1
 800b330:	653b      	str	r3, [r7, #80]	; 0x50
 800b332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1df      	bne.n	800b2f8 <f_mkdir+0x15a>
 800b338:	e000      	b.n	800b33c <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800b33a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b33c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b340:	2b00      	cmp	r3, #0
 800b342:	d107      	bne.n	800b354 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b344:	f107 030c 	add.w	r3, r7, #12
 800b348:	4618      	mov	r0, r3
 800b34a:	f7fe fdb1 	bl	8009eb0 <dir_register>
 800b34e:	4603      	mov	r3, r0
 800b350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800b354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d120      	bne.n	800b39e <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b362:	3316      	adds	r3, #22
 800b364:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b366:	4618      	mov	r0, r3
 800b368:	f7fd fd2c 	bl	8008dc4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fd27 	bl	8009dc6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b37a:	330b      	adds	r3, #11
 800b37c:	2210      	movs	r2, #16
 800b37e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2201      	movs	r2, #1
 800b384:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b386:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10e      	bne.n	800b3ac <f_mkdir+0x20e>
					res = sync_fs(fs);
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	4618      	mov	r0, r3
 800b392:	f7fd ff9f 	bl	80092d4 <sync_fs>
 800b396:	4603      	mov	r3, r0
 800b398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b39c:	e006      	b.n	800b3ac <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b39e:	f107 030c 	add.w	r3, r7, #12
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fa13 	bl	80097d2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b3ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3758      	adds	r7, #88	; 0x58
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3ce:	4b1f      	ldr	r3, [pc, #124]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3d0:	7a5b      	ldrb	r3, [r3, #9]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d131      	bne.n	800b43c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b3d8:	4b1c      	ldr	r3, [pc, #112]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3da:	7a5b      	ldrb	r3, [r3, #9]
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	461a      	mov	r2, r3
 800b3e0:	4b1a      	ldr	r3, [pc, #104]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b3e6:	4b19      	ldr	r3, [pc, #100]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3e8:	7a5b      	ldrb	r3, [r3, #9]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	4a17      	ldr	r2, [pc, #92]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b3f6:	4b15      	ldr	r3, [pc, #84]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b3f8:	7a5b      	ldrb	r3, [r3, #9]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4b13      	ldr	r3, [pc, #76]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b400:	4413      	add	r3, r2
 800b402:	79fa      	ldrb	r2, [r7, #7]
 800b404:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b406:	4b11      	ldr	r3, [pc, #68]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b408:	7a5b      	ldrb	r3, [r3, #9]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	b2d1      	uxtb	r1, r2
 800b410:	4a0e      	ldr	r2, [pc, #56]	; (800b44c <FATFS_LinkDriverEx+0x94>)
 800b412:	7251      	strb	r1, [r2, #9]
 800b414:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b416:	7dbb      	ldrb	r3, [r7, #22]
 800b418:	3330      	adds	r3, #48	; 0x30
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	3301      	adds	r3, #1
 800b424:	223a      	movs	r2, #58	; 0x3a
 800b426:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	3302      	adds	r3, #2
 800b42c:	222f      	movs	r2, #47	; 0x2f
 800b42e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	3303      	adds	r3, #3
 800b434:	2200      	movs	r2, #0
 800b436:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	371c      	adds	r7, #28
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	2000059c 	.word	0x2000059c

0800b450 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b45a:	2200      	movs	r2, #0
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff ffaa 	bl	800b3b8 <FATFS_LinkDriverEx>
 800b464:	4603      	mov	r3, r0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <fs_open+0x16>
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d102      	bne.n	800b48c <fs_open+0x1c>
    return ERR_ARG;
 800b486:	f06f 030f 	mvn.w	r3, #15
 800b48a:	e028      	b.n	800b4de <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b48c:	4b16      	ldr	r3, [pc, #88]	; (800b4e8 <fs_open+0x78>)
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	e020      	b.n	800b4d4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	4619      	mov	r1, r3
 800b498:	6838      	ldr	r0, [r7, #0]
 800b49a:	f7f4 fe99 	bl	80001d0 <strcmp>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d114      	bne.n	800b4ce <fs_open+0x5e>
      file->data = (const char *)f->data;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	689a      	ldr	r2, [r3, #8]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	68da      	ldr	r2, [r3, #12]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	7c1a      	ldrb	r2, [r3, #16]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e007      	b.n	800b4de <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	60fb      	str	r3, [r7, #12]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1db      	bne.n	800b492 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800b4da:	f06f 0305 	mvn.w	r3, #5
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	080240f8 	.word	0x080240f8

0800b4ec <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	1ad3      	subs	r3, r2, r3
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800b524:	f44f 7090 	mov.w	r0, #288	; 0x120
 800b528:	f002 fb2c 	bl	800db84 <mem_malloc>
 800b52c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d005      	beq.n	800b540 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800b534:	f44f 7290 	mov.w	r2, #288	; 0x120
 800b538:	2100      	movs	r1, #0
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f00c fc04 	bl	8017d48 <memset>
  }
  return ret;
 800b540:	687b      	ldr	r3, [r7, #4]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f002 f9ad 	bl	800d8b8 <mem_free>
  }
}
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800b56e:	22d8      	movs	r2, #216	; 0xd8
 800b570:	2100      	movs	r1, #0
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f00c fbe8 	bl	8017d48 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2205      	movs	r2, #5
 800b57c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800b580:	bf00      	nop
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800b58e:	20d8      	movs	r0, #216	; 0xd8
 800b590:	f002 faf8 	bl	800db84 <mem_malloc>
 800b594:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <http_state_alloc+0x1a>
    http_state_init(ret);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff ffe2 	bl	800b566 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800b5a2:	687b      	ldr	r3, [r7, #4]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d007      	beq.n	800b5cc <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff ff93 	bl	800b4ec <fs_close>
    hs->handle = NULL;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d007      	beq.n	800b5e4 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff ffb6 	bl	800b54a <http_ssi_state_free>
    hs->ssi = NULL;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d007      	beq.n	800b5fc <http_state_eof+0x50>
    pbuf_free(hs->req);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a1b      	ldr	r3, [r3, #32]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f003 fa93 	bl	800eb1c <pbuf_free>
    hs->req = NULL;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b5fc:	bf00      	nop
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d005      	beq.n	800b61e <http_state_free+0x1a>
    http_state_eof(hs);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7ff ffca 	bl	800b5ac <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f002 f94d 	bl	800d8b8 <mem_free>
  }
}
 800b61e:	bf00      	nop
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
	...

0800b628 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <http_write+0x22>
 800b63c:	4b2c      	ldr	r3, [pc, #176]	; (800b6f0 <http_write+0xc8>)
 800b63e:	f240 2219 	movw	r2, #537	; 0x219
 800b642:	492c      	ldr	r1, [pc, #176]	; (800b6f4 <http_write+0xcc>)
 800b644:	482c      	ldr	r0, [pc, #176]	; (800b6f8 <http_write+0xd0>)
 800b646:	f00c fc31 	bl	8017eac <iprintf>
  len = *length;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800b650:	8afb      	ldrh	r3, [r7, #22]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <http_write+0x32>
    return ERR_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	e045      	b.n	800b6e6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b660:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800b662:	8aba      	ldrh	r2, [r7, #20]
 800b664:	8afb      	ldrh	r3, [r7, #22]
 800b666:	429a      	cmp	r2, r3
 800b668:	d201      	bcs.n	800b66e <http_write+0x46>
    len = max_len;
 800b66a:	8abb      	ldrh	r3, [r7, #20]
 800b66c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800b676:	8afa      	ldrh	r2, [r7, #22]
 800b678:	8abb      	ldrh	r3, [r7, #20]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d901      	bls.n	800b682 <http_write+0x5a>
    len = max_len;
 800b67e:	8abb      	ldrh	r3, [r7, #20]
 800b680:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	8afa      	ldrh	r2, [r7, #22]
 800b686:	68b9      	ldr	r1, [r7, #8]
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f007 ffcb 	bl	8013624 <tcp_write>
 800b68e:	4603      	mov	r3, r0
 800b690:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800b692:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b69a:	d10f      	bne.n	800b6bc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d004      	beq.n	800b6b0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800b6ac:	2b08      	cmp	r3, #8
 800b6ae:	d902      	bls.n	800b6b6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	82fb      	strh	r3, [r7, #22]
 800b6b4:	e002      	b.n	800b6bc <http_write+0x94>
      } else {
        len /= 2;
 800b6b6:	8afb      	ldrh	r3, [r7, #22]
 800b6b8:	085b      	lsrs	r3, r3, #1
 800b6ba:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800b6bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6c4:	d102      	bne.n	800b6cc <http_write+0xa4>
 800b6c6:	8afb      	ldrh	r3, [r7, #22]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d8da      	bhi.n	800b682 <http_write+0x5a>

  if (err == ERR_OK) {
 800b6cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d103      	bne.n	800b6dc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	8afa      	ldrh	r2, [r7, #22]
 800b6d8:	801a      	strh	r2, [r3, #0]
 800b6da:	e002      	b.n	800b6e2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800b6e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	0801a5d4 	.word	0x0801a5d4
 800b6f4:	0801a60c 	.word	0x0801a60c
 800b6f8:	0801a61c 	.word	0x0801a61c

0800b6fc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	4613      	mov	r3, r2
 800b708:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00c      	beq.n	800b72a <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b716:	2b00      	cmp	r3, #0
 800b718:	d007      	beq.n	800b72a <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800b71a:	4b1f      	ldr	r3, [pc, #124]	; (800b798 <http_close_or_abort_conn+0x9c>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800b720:	223f      	movs	r2, #63	; 0x3f
 800b722:	491d      	ldr	r1, [pc, #116]	; (800b798 <http_close_or_abort_conn+0x9c>)
 800b724:	68b8      	ldr	r0, [r7, #8]
 800b726:	f7f6 f89b 	bl	8001860 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800b72a:	2100      	movs	r1, #0
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f005 f83b 	bl	80107a8 <tcp_arg>
  altcp_recv(pcb, NULL);
 800b732:	2100      	movs	r1, #0
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f005 f849 	bl	80107cc <tcp_recv>
  altcp_err(pcb, NULL);
 800b73a:	2100      	movs	r1, #0
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f005 f889 	bl	8010854 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800b742:	2200      	movs	r2, #0
 800b744:	2100      	movs	r1, #0
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f005 f8be 	bl	80108c8 <tcp_poll>
  altcp_sent(pcb, NULL);
 800b74c:	2100      	movs	r1, #0
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f005 f85e 	bl	8010810 <tcp_sent>
  if (hs != NULL) {
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d002      	beq.n	800b760 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800b75a:	68b8      	ldr	r0, [r7, #8]
 800b75c:	f7ff ff52 	bl	800b604 <http_state_free>
  }

  if (abort_conn) {
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d004      	beq.n	800b770 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f003 ff60 	bl	800f62c <tcp_abort>
    return ERR_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	e00f      	b.n	800b790 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f003 fe71 	bl	800f458 <tcp_close>
 800b776:	4603      	mov	r3, r0
 800b778:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d004      	beq.n	800b78c <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b782:	2204      	movs	r2, #4
 800b784:	4905      	ldr	r1, [pc, #20]	; (800b79c <http_close_or_abort_conn+0xa0>)
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f005 f89e 	bl	80108c8 <tcp_poll>
  }
  return err;
 800b78c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3718      	adds	r7, #24
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	200009a8 	.word	0x200009a8
 800b79c:	0800d00f 	.word	0x0800d00f

0800b7a0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff ffa4 	bl	800b6fc <http_close_or_abort_conn>
 800b7b4:	4603      	mov	r3, r0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff ffe8 	bl	800b7a0 <http_close_conn>
  }
}
 800b7d0:	bf00      	nop
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d003      	beq.n	800b7f0 <extract_uri_parameters+0x18>
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <extract_uri_parameters+0x1c>
    return (0);
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e04b      	b.n	800b88c <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	613b      	str	r3, [r7, #16]
 800b7fc:	e03f      	b.n	800b87e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	320c      	adds	r2, #12
 800b804:	6979      	ldr	r1, [r7, #20]
 800b806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800b80e:	2126      	movs	r1, #38	; 0x26
 800b810:	6978      	ldr	r0, [r7, #20]
 800b812:	f00c fc8c 	bl	801812e <strchr>
 800b816:	6178      	str	r0, [r7, #20]
    if (pair) {
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <extract_uri_parameters+0x54>
      *pair = '\0';
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2200      	movs	r2, #0
 800b822:	701a      	strb	r2, [r3, #0]
      pair++;
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	3301      	adds	r3, #1
 800b828:	617b      	str	r3, [r7, #20]
 800b82a:	e00c      	b.n	800b846 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800b82c:	2120      	movs	r1, #32
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f00c fc7d 	bl	801812e <strchr>
 800b834:	6178      	str	r0, [r7, #20]
      if (pair) {
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	2200      	movs	r2, #0
 800b840:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800b846:	213d      	movs	r1, #61	; 0x3d
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f00c fc70 	bl	801812e <strchr>
 800b84e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <extract_uri_parameters+0x94>
      *equals = '\0';
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	1c59      	adds	r1, r3, #1
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	693a      	ldr	r2, [r7, #16]
 800b864:	321c      	adds	r2, #28
 800b866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b86a:	e005      	b.n	800b878 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	321c      	adds	r2, #28
 800b872:	2100      	movs	r1, #0
 800b874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	3301      	adds	r3, #1
 800b87c:	613b      	str	r3, [r7, #16]
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2b0f      	cmp	r3, #15
 800b882:	dc02      	bgt.n	800b88a <extract_uri_parameters+0xb2>
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1b9      	bne.n	800b7fe <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800b88a:	693b      	ldr	r3, [r7, #16]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b089      	sub	sp, #36	; 0x24
 800b898:	af02      	add	r7, sp, #8
 800b89a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d106      	bne.n	800b8b0 <get_tag_insert+0x1c>
 800b8a2:	4b58      	ldr	r3, [pc, #352]	; (800ba04 <get_tag_insert+0x170>)
 800b8a4:	f44f 7241 	mov.w	r2, #772	; 0x304
 800b8a8:	4957      	ldr	r1, [pc, #348]	; (800ba08 <get_tag_insert+0x174>)
 800b8aa:	4858      	ldr	r0, [pc, #352]	; (800ba0c <get_tag_insert+0x178>)
 800b8ac:	f00c fafe 	bl	8017eac <iprintf>
  ssi = hs->ssi;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d106      	bne.n	800b8ca <get_tag_insert+0x36>
 800b8bc:	4b51      	ldr	r3, [pc, #324]	; (800ba04 <get_tag_insert+0x170>)
 800b8be:	f240 3206 	movw	r2, #774	; 0x306
 800b8c2:	4953      	ldr	r1, [pc, #332]	; (800ba10 <get_tag_insert+0x17c>)
 800b8c4:	4851      	ldr	r0, [pc, #324]	; (800ba0c <get_tag_insert+0x178>)
 800b8c6:	f00c faf1 	bl	8017eac <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	8a9b      	ldrh	r3, [r3, #20]
 800b8ce:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8d6:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800b8d8:	4b4e      	ldr	r3, [pc, #312]	; (800ba14 <get_tag_insert+0x180>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d033      	beq.n	800b948 <get_tag_insert+0xb4>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800b8e0:	4b4d      	ldr	r3, [pc, #308]	; (800ba18 <get_tag_insert+0x184>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d02f      	beq.n	800b948 <get_tag_insert+0xb4>
 800b8e8:	4b4c      	ldr	r3, [pc, #304]	; (800ba1c <get_tag_insert+0x188>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d02b      	beq.n	800b948 <get_tag_insert+0xb4>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	617b      	str	r3, [r7, #20]
 800b8f4:	e023      	b.n	800b93e <get_tag_insert+0xaa>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f103 0018 	add.w	r0, r3, #24
 800b8fc:	4b46      	ldr	r3, [pc, #280]	; (800ba18 <get_tag_insert+0x184>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4619      	mov	r1, r3
 800b90a:	f7f4 fc61 	bl	80001d0 <strcmp>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d111      	bne.n	800b938 <get_tag_insert+0xa4>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800b914:	4b3f      	ldr	r3, [pc, #252]	; (800ba14 <get_tag_insert+0x180>)
 800b916:	681c      	ldr	r4, [r3, #0]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3314      	adds	r3, #20
 800b922:	89fa      	ldrh	r2, [r7, #14]
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	4613      	mov	r3, r2
 800b928:	22fa      	movs	r2, #250	; 0xfa
 800b92a:	6978      	ldr	r0, [r7, #20]
 800b92c:	47a0      	blx	r4
 800b92e:	4603      	mov	r3, r0
 800b930:	461a      	mov	r2, r3
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800b936:	e061      	b.n	800b9fc <get_tag_insert+0x168>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	3301      	adds	r3, #1
 800b93c:	617b      	str	r3, [r7, #20]
 800b93e:	4b37      	ldr	r3, [pc, #220]	; (800ba1c <get_tag_insert+0x188>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	429a      	cmp	r2, r3
 800b946:	dbd6      	blt.n	800b8f6 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	3318      	adds	r3, #24
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7f4 fc49 	bl	80001e4 <strlen>
 800b952:	4603      	mov	r3, r0
 800b954:	2be0      	cmp	r3, #224	; 0xe0
 800b956:	d818      	bhi.n	800b98a <get_tag_insert+0xf6>
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	3318      	adds	r3, #24
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7f4 fc41 	bl	80001e4 <strlen>
 800b962:	4603      	mov	r3, r0
 800b964:	2b09      	cmp	r3, #9
 800b966:	d810      	bhi.n	800b98a <get_tag_insert+0xf6>
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	3318      	adds	r3, #24
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7f4 fc39 	bl	80001e4 <strlen>
 800b972:	4603      	mov	r3, r0
 800b974:	2be0      	cmp	r3, #224	; 0xe0
 800b976:	d806      	bhi.n	800b986 <get_tag_insert+0xf2>
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	3318      	adds	r3, #24
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7f4 fc31 	bl	80001e4 <strlen>
 800b982:	4603      	mov	r3, r0
 800b984:	e002      	b.n	800b98c <get_tag_insert+0xf8>
 800b986:	23e1      	movs	r3, #225	; 0xe1
 800b988:	e000      	b.n	800b98c <get_tag_insert+0xf8>
 800b98a:	2309      	movs	r3, #9
 800b98c:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	3321      	adds	r3, #33	; 0x21
 800b992:	2212      	movs	r2, #18
 800b994:	4922      	ldr	r1, [pc, #136]	; (800ba20 <get_tag_insert+0x18c>)
 800b996:	4618      	mov	r0, r3
 800b998:	f00c f9ae 	bl	8017cf8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	f103 0033 	add.w	r0, r3, #51	; 0x33
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	3318      	adds	r3, #24
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	f00c f9a5 	bl	8017cf8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	3312      	adds	r3, #18
 800b9b2:	3320      	adds	r3, #32
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	2207      	movs	r2, #7
 800b9bc:	4919      	ldr	r1, [pc, #100]	; (800ba24 <get_tag_insert+0x190>)
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f00c f99a 	bl	8017cf8 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	3319      	adds	r3, #25
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	3321      	adds	r3, #33	; 0x21
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7f4 fc04 	bl	80001e4 <strlen>
 800b9dc:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e4:	d306      	bcc.n	800b9f4 <get_tag_insert+0x160>
 800b9e6:	4b07      	ldr	r3, [pc, #28]	; (800ba04 <get_tag_insert+0x170>)
 800b9e8:	f240 323f 	movw	r2, #831	; 0x33f
 800b9ec:	490e      	ldr	r1, [pc, #56]	; (800ba28 <get_tag_insert+0x194>)
 800b9ee:	4807      	ldr	r0, [pc, #28]	; (800ba0c <get_tag_insert+0x178>)
 800b9f0:	f00c fa5c 	bl	8017eac <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	825a      	strh	r2, [r3, #18]
}
 800b9fc:	371c      	adds	r7, #28
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd90      	pop	{r4, r7, pc}
 800ba02:	bf00      	nop
 800ba04:	0801a5d4 	.word	0x0801a5d4
 800ba08:	0801a644 	.word	0x0801a644
 800ba0c:	0801a61c 	.word	0x0801a61c
 800ba10:	0801a650 	.word	0x0801a650
 800ba14:	200009e8 	.word	0x200009e8
 800ba18:	200009f0 	.word	0x200009f0
 800ba1c:	200009ec 	.word	0x200009ec
 800ba20:	0801a65c 	.word	0x0801a65c
 800ba24:	0801a670 	.word	0x0801a670
 800ba28:	0801a678 	.word	0x0801a678

0800ba2c <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800ba36:	4a55      	ldr	r2, [pc, #340]	; (800bb8c <get_http_headers+0x160>)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d110      	bne.n	800ba76 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800ba54:	4a4e      	ldr	r2, [pc, #312]	; (800bb90 <get_http_headers+0x164>)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800ba5c:	4a4d      	ldr	r2, [pc, #308]	; (800bb94 <get_http_headers+0x168>)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800ba74:	e087      	b.n	800bb86 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800ba76:	4948      	ldr	r1, [pc, #288]	; (800bb98 <get_http_headers+0x16c>)
 800ba78:	6838      	ldr	r0, [r7, #0]
 800ba7a:	f00c fb92 	bl	80181a2 <strstr>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d004      	beq.n	800ba8e <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800ba84:	4a42      	ldr	r2, [pc, #264]	; (800bb90 <get_http_headers+0x164>)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800ba8c:	e01b      	b.n	800bac6 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800ba8e:	4943      	ldr	r1, [pc, #268]	; (800bb9c <get_http_headers+0x170>)
 800ba90:	6838      	ldr	r0, [r7, #0]
 800ba92:	f00c fb86 	bl	80181a2 <strstr>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d004      	beq.n	800baa6 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800ba9c:	4a40      	ldr	r2, [pc, #256]	; (800bba0 <get_http_headers+0x174>)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800baa4:	e00f      	b.n	800bac6 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800baa6:	493f      	ldr	r1, [pc, #252]	; (800bba4 <get_http_headers+0x178>)
 800baa8:	6838      	ldr	r0, [r7, #0]
 800baaa:	f00c fb7a 	bl	80181a2 <strstr>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d004      	beq.n	800babe <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800bab4:	4a3c      	ldr	r2, [pc, #240]	; (800bba8 <get_http_headers+0x17c>)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800babc:	e003      	b.n	800bac6 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800babe:	4a3b      	ldr	r2, [pc, #236]	; (800bbac <get_http_headers+0x180>)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800bac6:	213f      	movs	r1, #63	; 0x3f
 800bac8:	6838      	ldr	r0, [r7, #0]
 800baca:	f00c fb30 	bl	801812e <strchr>
 800bace:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <get_http_headers+0xb0>
    *vars = '\0';
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800badc:	2300      	movs	r3, #0
 800bade:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800bae0:	212e      	movs	r1, #46	; 0x2e
 800bae2:	6838      	ldr	r0, [r7, #0]
 800bae4:	f00c fb23 	bl	801812e <strchr>
 800bae8:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800baea:	e007      	b.n	800bafc <get_http_headers+0xd0>
    ext = tmp + 1;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	3301      	adds	r3, #1
 800baf0:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800baf2:	212e      	movs	r1, #46	; 0x2e
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f00c fb1a 	bl	801812e <strchr>
 800bafa:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1f4      	bne.n	800baec <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d014      	beq.n	800bb32 <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800bb08:	2300      	movs	r3, #0
 800bb0a:	617b      	str	r3, [r7, #20]
 800bb0c:	e00d      	b.n	800bb2a <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800bb0e:	4a28      	ldr	r2, [pc, #160]	; (800bbb0 <get_http_headers+0x184>)
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb16:	68f9      	ldr	r1, [r7, #12]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f001 fcd1 	bl	800d4c0 <lwip_stricmp>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	3301      	adds	r3, #1
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b13      	cmp	r3, #19
 800bb2e:	d9ee      	bls.n	800bb0e <get_http_headers+0xe2>
 800bb30:	e003      	b.n	800bb3a <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800bb32:	2314      	movs	r3, #20
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	e000      	b.n	800bb3a <get_http_headers+0x10e>
        break;
 800bb38:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <get_http_headers+0x11a>
    *vars = '?';
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	223f      	movs	r2, #63	; 0x3f
 800bb44:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2b13      	cmp	r3, #19
 800bb4a:	d808      	bhi.n	800bb5e <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800bb4c:	4a18      	ldr	r2, [pc, #96]	; (800bbb0 <get_http_headers+0x184>)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	00db      	lsls	r3, r3, #3
 800bb52:	4413      	add	r3, r2
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800bb5c:	e00b      	b.n	800bb76 <get_http_headers+0x14a>
  } else if (!ext) {
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d104      	bne.n	800bb6e <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a13      	ldr	r2, [pc, #76]	; (800bbb4 <get_http_headers+0x188>)
 800bb68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800bb6c:	e003      	b.n	800bb76 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a11      	ldr	r2, [pc, #68]	; (800bbb8 <get_http_headers+0x18c>)
 800bb72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	0801a254 	.word	0x0801a254
 800bb90:	0801a118 	.word	0x0801a118
 800bb94:	0801a294 	.word	0x0801a294
 800bb98:	0801a688 	.word	0x0801a688
 800bb9c:	0801a68c 	.word	0x0801a68c
 800bba0:	0801a138 	.word	0x0801a138
 800bba4:	0801a690 	.word	0x0801a690
 800bba8:	0801a154 	.word	0x0801a154
 800bbac:	0801a104 	.word	0x0801a104
 800bbb0:	0802410c 	.word	0x0802410c
 800bbb4:	0801a428 	.word	0x0801a428
 800bbb8:	0801a694 	.word	0x0801a694

0800bbbc <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d006      	beq.n	800bbe0 <get_http_content_length+0x24>
 800bbd2:	4b27      	ldr	r3, [pc, #156]	; (800bc70 <get_http_content_length+0xb4>)
 800bbd4:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800bbd8:	4926      	ldr	r1, [pc, #152]	; (800bc74 <get_http_content_length+0xb8>)
 800bbda:	4827      	ldr	r0, [pc, #156]	; (800bc78 <get_http_content_length+0xbc>)
 800bbdc:	f00c f966 	bl	8017eac <iprintf>

  add_content_len = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10c      	bne.n	800bc06 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	695b      	ldr	r3, [r3, #20]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d008      	beq.n	800bc06 <get_http_content_length+0x4a>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	7c1b      	ldrb	r3, [r3, #16]
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d001      	beq.n	800bc06 <get_http_content_length+0x4a>
      add_content_len = 1;
 800bc02:	2301      	movs	r3, #1
 800bc04:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d025      	beq.n	800bc58 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	210c      	movs	r1, #12
 800bc1c:	f001 fc84 	bl	800d528 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	33c4      	adds	r3, #196	; 0xc4
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7f4 fadd 	bl	80001e4 <strlen>
 800bc2a:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b09      	cmp	r3, #9
 800bc30:	d810      	bhi.n	800bc54 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	33c0      	adds	r3, #192	; 0xc0
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	4413      	add	r3, r2
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	2203      	movs	r2, #3
 800bc3e:	490f      	ldr	r1, [pc, #60]	; (800bc7c <get_http_content_length+0xc0>)
 800bc40:	4618      	mov	r0, r3
 800bc42:	f00c f859 	bl	8017cf8 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800bc52:	e001      	b.n	800bc58 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800bc5e:	4a08      	ldr	r2, [pc, #32]	; (800bc80 <get_http_content_length+0xc4>)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800bc66:	bf00      	nop
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	0801a5d4 	.word	0x0801a5d4
 800bc74:	0801a6b4 	.word	0x0801a6b4
 800bc78:	0801a61c 	.word	0x0801a61c
 800bc7c:	0801a6c8 	.word	0x0801a6c8
 800bc80:	0801a1e4 	.word	0x0801a1e4

0800bc84 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800bc9c:	6838      	ldr	r0, [r7, #0]
 800bc9e:	f7ff ff8d 	bl	800bbbc <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bca8:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800bcaa:	8bfb      	ldrh	r3, [r7, #30]
 800bcac:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800bcae:	e08b      	b.n	800bdc8 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	322c      	adds	r2, #44	; 0x2c
 800bcbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7f4 fa8f 	bl	80001e4 <strlen>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800bcca:	8b7b      	ldrh	r3, [r7, #26]
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800bcd2:	1a9a      	subs	r2, r3, r2
 800bcd4:	8bfb      	ldrh	r3, [r7, #30]
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	bfa8      	it	ge
 800bcda:	4613      	movge	r3, r2
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bce6:	461a      	mov	r2, r3
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	322c      	adds	r2, #44	; 0x2c
 800bcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800bcf6:	4413      	add	r3, r2
 800bcf8:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800bcfa:	89fb      	ldrh	r3, [r7, #14]
 800bcfc:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800bcfe:	2300      	movs	r3, #0
 800bd00:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d103      	bne.n	800bd14 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800bd0c:	7f3b      	ldrb	r3, [r7, #28]
 800bd0e:	f043 0301 	orr.w	r3, r3, #1
 800bd12:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d803      	bhi.n	800bd26 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800bd1e:	7f3b      	ldrb	r3, [r7, #28]
 800bd20:	f043 0302 	orr.w	r3, r3, #2
 800bd24:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800bd26:	7f3b      	ldrb	r3, [r7, #28]
 800bd28:	f107 020e 	add.w	r2, r7, #14
 800bd2c:	6979      	ldr	r1, [r7, #20]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7ff fc7a 	bl	800b628 <http_write>
 800bd34:	4603      	mov	r3, r0
 800bd36:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800bd38:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <http_send_headers+0xca>
 800bd40:	89fb      	ldrh	r3, [r7, #14]
 800bd42:	8a7a      	ldrh	r2, [r7, #18]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d002      	beq.n	800bd4e <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	777b      	strb	r3, [r7, #29]
 800bd4c:	e005      	b.n	800bd5a <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800bd4e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800bd60:	89fb      	ldrh	r3, [r7, #14]
 800bd62:	4413      	add	r3, r2
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800bd6c:	89fb      	ldrh	r3, [r7, #14]
 800bd6e:	8bfa      	ldrh	r2, [r7, #30]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800bd7a:	8b7a      	ldrh	r2, [r7, #26]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d123      	bne.n	800bdc8 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bd86:	3301      	adds	r3, #1
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800bd90:	e007      	b.n	800bda2 <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bd98:	3301      	adds	r3, #1
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	d809      	bhi.n	800bdc0 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	322c      	adds	r2, #44	; 0x2c
 800bdb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0e8      	beq.n	800bd92 <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800bdc8:	8bfb      	ldrh	r3, [r7, #30]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d008      	beq.n	800bde0 <http_send_headers+0x15c>
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bdd4:	2b04      	cmp	r3, #4
 800bdd6:	d803      	bhi.n	800bde0 <http_send_headers+0x15c>
 800bdd8:	89fb      	ldrh	r3, [r7, #14]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f47f af68 	bne.w	800bcb0 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bde6:	2b04      	cmp	r3, #4
 800bde8:	d90f      	bls.n	800be0a <http_send_headers+0x186>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10b      	bne.n	800be0a <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f819 	bl	800be2c <http_check_eof>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800be00:	2302      	movs	r3, #2
 800be02:	777b      	strb	r3, [r7, #29]
 800be04:	e001      	b.n	800be0a <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800be06:	2303      	movs	r3, #3
 800be08:	e00b      	b.n	800be22 <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800be10:	2b04      	cmp	r3, #4
 800be12:	d903      	bls.n	800be1c <http_send_headers+0x198>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d101      	bne.n	800be20 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800be1c:	2302      	movs	r3, #2
 800be1e:	e000      	b.n	800be22 <http_send_headers+0x19e>
  }
  return data_to_send;
 800be20:	7f7b      	ldrb	r3, [r7, #29]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3720      	adds	r7, #32
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
	...

0800be2c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d105      	bne.n	800be4a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff fcbc 	bl	800b7be <http_eof>
    return 0;
 800be46:	2300      	movs	r3, #0
 800be48:	e016      	b.n	800be78 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff fb56 	bl	800b500 <fs_bytes_left>
 800be54:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	dc05      	bgt.n	800be68 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff fcad 	bl	800b7be <http_eof>
    return 0;
 800be64:	2300      	movs	r3, #0
 800be66:	e007      	b.n	800be78 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800be68:	4b05      	ldr	r3, [pc, #20]	; (800be80 <http_check_eof+0x54>)
 800be6a:	f240 429d 	movw	r2, #1181	; 0x49d
 800be6e:	4905      	ldr	r1, [pc, #20]	; (800be84 <http_check_eof+0x58>)
 800be70:	4805      	ldr	r0, [pc, #20]	; (800be88 <http_check_eof+0x5c>)
 800be72:	f00c f81b 	bl	8017eac <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800be76:	2301      	movs	r3, #1
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	0801a5d4 	.word	0x0801a5d4
 800be84:	0801a6cc 	.word	0x0801a6cc
 800be88:	0801a61c 	.word	0x0801a61c

0800be8c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d803      	bhi.n	800beae <http_send_data_nonssi+0x22>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beaa:	b29b      	uxth	r3, r3
 800beac:	e001      	b.n	800beb2 <http_send_data_nonssi+0x26>
 800beae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800beb2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	6999      	ldr	r1, [r3, #24]
 800beb8:	f107 020c 	add.w	r2, r7, #12
 800bebc:	2300      	movs	r3, #0
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fbb2 	bl	800b628 <http_write>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800bec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10d      	bne.n	800beec <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800bed0:	2301      	movs	r3, #1
 800bed2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	89ba      	ldrh	r2, [r7, #12]
 800beda:	441a      	add	r2, r3
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	89ba      	ldrh	r2, [r7, #12]
 800bee6:	1a9a      	subs	r2, r3, r2
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800beec:	7bfb      	ldrb	r3, [r7, #15]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
	...

0800bef8 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b086      	sub	sp, #24
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <http_send_data_ssi+0x2c>
 800bf16:	4b89      	ldr	r3, [pc, #548]	; (800c13c <http_send_data_ssi+0x244>)
 800bf18:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800bf1c:	4988      	ldr	r1, [pc, #544]	; (800c140 <http_send_data_ssi+0x248>)
 800bf1e:	4889      	ldr	r0, [pc, #548]	; (800c144 <http_send_data_ssi+0x24c>)
 800bf20:	f00b ffc4 	bl	8017eac <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bf2a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	f240 82c5 	bls.w	800c4c4 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	dc06      	bgt.n	800bf5a <http_send_data_ssi+0x62>
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	e001      	b.n	800bf5e <http_send_data_ssi+0x66>
 800bf5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf5e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	6999      	ldr	r1, [r3, #24]
 800bf64:	f107 020e 	add.w	r2, r7, #14
 800bf68:	2300      	movs	r3, #0
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff fb5c 	bl	800b628 <http_write>
 800bf70:	4603      	mov	r3, r0
 800bf72:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800bf74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10d      	bne.n	800bf98 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	89fa      	ldrh	r2, [r7, #14]
 800bf86:	441a      	add	r2, r3
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf90:	89fa      	ldrh	r2, [r7, #14]
 800bf92:	1a9a      	subs	r2, r3, r2
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f040 8290 	bne.w	800c4c4 <http_send_data_ssi+0x5cc>
      return data_to_send;
 800bfa4:	7dbb      	ldrb	r3, [r7, #22]
 800bfa6:	e2d6      	b.n	800c556 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800bfa8:	89fb      	ldrh	r3, [r7, #14]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d101      	bne.n	800bfb2 <http_send_data_ssi+0xba>
      return data_to_send;
 800bfae:	7dbb      	ldrb	r3, [r7, #22]
 800bfb0:	e2d1      	b.n	800c556 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800bfb8:	2b04      	cmp	r3, #4
 800bfba:	f200 8282 	bhi.w	800c4c2 <http_send_data_ssi+0x5ca>
 800bfbe:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <http_send_data_ssi+0xcc>)
 800bfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc4:	0800bfd9 	.word	0x0800bfd9
 800bfc8:	0800c033 	.word	0x0800c033
 800bfcc:	0800c0a5 	.word	0x0800c0a5
 800bfd0:	0800c1ed 	.word	0x0800c1ed
 800bfd4:	0800c363 	.word	0x0800c363
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800bfd8:	2300      	movs	r3, #0
 800bfda:	757b      	strb	r3, [r7, #21]
 800bfdc:	e01b      	b.n	800c016 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	7d7b      	ldrb	r3, [r7, #21]
 800bfe6:	4958      	ldr	r1, [pc, #352]	; (800c148 <http_send_data_ssi+0x250>)
 800bfe8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d10e      	bne.n	800c010 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	7d7a      	ldrb	r2, [r7, #21]
 800bff6:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            ssi->tag_index = 1;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	2201      	movs	r2, #1
 800c004:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800c00e:	e005      	b.n	800c01c <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800c010:	7d7b      	ldrb	r3, [r7, #21]
 800c012:	3301      	adds	r3, #1
 800c014:	757b      	strb	r3, [r7, #21]
 800c016:	7d7b      	ldrb	r3, [r7, #21]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d9e0      	bls.n	800bfde <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	1e5a      	subs	r2, r3, #1
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	601a      	str	r2, [r3, #0]
        break;
 800c030:	e248      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	7d9b      	ldrb	r3, [r3, #22]
 800c036:	461a      	mov	r2, r3
 800c038:	4b43      	ldr	r3, [pc, #268]	; (800c148 <http_send_data_ssi+0x250>)
 800c03a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	8a12      	ldrh	r2, [r2, #16]
 800c042:	4413      	add	r3, r2
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d107      	bne.n	800c05a <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2200      	movs	r2, #0
 800c04e:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	2202      	movs	r2, #2
 800c054:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 800c058:	e234      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	781a      	ldrb	r2, [r3, #0]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	7d9b      	ldrb	r3, [r3, #22]
 800c064:	4619      	mov	r1, r3
 800c066:	4b38      	ldr	r3, [pc, #224]	; (800c148 <http_send_data_ssi+0x250>)
 800c068:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800c06c:	6939      	ldr	r1, [r7, #16]
 800c06e:	8a09      	ldrh	r1, [r1, #16]
 800c070:	440b      	add	r3, r1
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	429a      	cmp	r2, r3
 800c076:	d106      	bne.n	800c086 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	8a1b      	ldrh	r3, [r3, #16]
 800c07c:	3301      	adds	r3, #1
 800c07e:	b29a      	uxth	r2, r3
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	821a      	strh	r2, [r3, #16]
 800c084:	e003      	b.n	800c08e <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	1e5a      	subs	r2, r3, #1
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	601a      	str	r2, [r3, #0]
        }
        break;
 800c0a2:	e20f      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	8a1b      	ldrh	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d11e      	bne.n	800c0ea <http_send_data_ssi+0x1f2>
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b20      	cmp	r3, #32
 800c0b4:	d00e      	beq.n	800c0d4 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c0bc:	2b09      	cmp	r3, #9
 800c0be:	d009      	beq.n	800c0d4 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	2b0a      	cmp	r3, #10
 800c0c8:	d004      	beq.n	800c0d4 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c0d0:	2b0d      	cmp	r3, #13
 800c0d2:	d10a      	bne.n	800c0ea <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	1e5a      	subs	r2, r3, #1
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	601a      	str	r2, [r3, #0]
          break;
 800c0e8:	e1ec      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	781a      	ldrb	r2, [r3, #0]
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	7d9b      	ldrb	r3, [r3, #22]
 800c0f4:	4914      	ldr	r1, [pc, #80]	; (800c148 <http_send_data_ssi+0x250>)
 800c0f6:	00db      	lsls	r3, r3, #3
 800c0f8:	440b      	add	r3, r1
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d013      	beq.n	800c12a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800c108:	2b20      	cmp	r3, #32
 800c10a:	d00e      	beq.n	800c12a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b09      	cmp	r3, #9
 800c114:	d009      	beq.n	800c12a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c11c:	2b0a      	cmp	r3, #10
 800c11e:	d004      	beq.n	800c12a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	2b0d      	cmp	r3, #13
 800c128:	d13f      	bne.n	800c1aa <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	8a1b      	ldrh	r3, [r3, #16]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10c      	bne.n	800c14c <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	2200      	movs	r2, #0
 800c136:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          if (ssi->tag_index == 0) {
 800c13a:	e04c      	b.n	800c1d6 <http_send_data_ssi+0x2de>
 800c13c:	0801a5d4 	.word	0x0801a5d4
 800c140:	0801a650 	.word	0x0801a650
 800c144:	0801a61c 	.word	0x0801a61c
 800c148:	080241e8 	.word	0x080241e8
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	2203      	movs	r2, #3
 800c150:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	8a1b      	ldrh	r3, [r3, #16]
 800c158:	2bff      	cmp	r3, #255	; 0xff
 800c15a:	d906      	bls.n	800c16a <http_send_data_ssi+0x272>
 800c15c:	4b92      	ldr	r3, [pc, #584]	; (800c3a8 <http_send_data_ssi+0x4b0>)
 800c15e:	f240 523a 	movw	r2, #1338	; 0x53a
 800c162:	4992      	ldr	r1, [pc, #584]	; (800c3ac <http_send_data_ssi+0x4b4>)
 800c164:	4892      	ldr	r0, [pc, #584]	; (800c3b0 <http_send_data_ssi+0x4b8>)
 800c166:	f00b fea1 	bl	8017eac <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	8a1b      	ldrh	r3, [r3, #16]
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	8a1b      	ldrh	r3, [r3, #16]
 800c178:	461a      	mov	r2, r3
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	4413      	add	r3, r2
 800c17e:	2200      	movs	r2, #0
 800c180:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	781a      	ldrb	r2, [r3, #0]
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	7d9b      	ldrb	r3, [r3, #22]
 800c18c:	4989      	ldr	r1, [pc, #548]	; (800c3b4 <http_send_data_ssi+0x4bc>)
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	440b      	add	r3, r1
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	429a      	cmp	r2, r3
 800c198:	d103      	bne.n	800c1a2 <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2201      	movs	r2, #1
 800c19e:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800c1a0:	e019      	b.n	800c1d6 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800c1a8:	e015      	b.n	800c1d6 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	8a1b      	ldrh	r3, [r3, #16]
 800c1ae:	2b07      	cmp	r3, #7
 800c1b0:	d80d      	bhi.n	800c1ce <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	8a1b      	ldrh	r3, [r3, #16]
 800c1ba:	1c59      	adds	r1, r3, #1
 800c1bc:	b288      	uxth	r0, r1
 800c1be:	6939      	ldr	r1, [r7, #16]
 800c1c0:	8208      	strh	r0, [r1, #16]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	7812      	ldrb	r2, [r2, #0]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	440b      	add	r3, r1
 800c1ca:	761a      	strb	r2, [r3, #24]
 800c1cc:	e003      	b.n	800c1d6 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	1e5a      	subs	r2, r3, #1
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	1c5a      	adds	r2, r3, #1
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	601a      	str	r2, [r3, #0]

        break;
 800c1ea:	e16b      	b.n	800c4c4 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	8a1b      	ldrh	r3, [r3, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d11e      	bne.n	800c232 <http_send_data_ssi+0x33a>
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	2b20      	cmp	r3, #32
 800c1fc:	d00e      	beq.n	800c21c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c204:	2b09      	cmp	r3, #9
 800c206:	d009      	beq.n	800c21c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b0a      	cmp	r3, #10
 800c210:	d004      	beq.n	800c21c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c218:	2b0d      	cmp	r3, #13
 800c21a:	d10a      	bne.n	800c232 <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	1e5a      	subs	r2, r3, #1
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	601a      	str	r2, [r3, #0]
          break;
 800c230:	e148      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	781a      	ldrb	r2, [r3, #0]
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	7d9b      	ldrb	r3, [r3, #22]
 800c23c:	495d      	ldr	r1, [pc, #372]	; (800c3b4 <http_send_data_ssi+0x4bc>)
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	440b      	add	r3, r1
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	6939      	ldr	r1, [r7, #16]
 800c246:	8a09      	ldrh	r1, [r1, #16]
 800c248:	440b      	add	r3, r1
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d179      	bne.n	800c344 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	1e5a      	subs	r2, r3, #1
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	8a1b      	ldrh	r3, [r3, #16]
 800c268:	3301      	adds	r3, #1
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	7d9b      	ldrb	r3, [r3, #22]
 800c274:	4a4f      	ldr	r2, [pc, #316]	; (800c3b4 <http_send_data_ssi+0x4bc>)
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	4413      	add	r3, r2
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	8a12      	ldrh	r2, [r2, #16]
 800c280:	4413      	add	r3, r2
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	f040 811d 	bne.w	800c4c4 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2200      	movs	r2, #0
 800c28e:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800c290:	6838      	ldr	r0, [r7, #0]
 800c292:	f7ff faff 	bl	800b894 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2200      	movs	r2, #0
 800c29a:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	2204      	movs	r2, #4
 800c2a0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            ssi->tag_end = ssi->parsed;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	685a      	ldr	r2, [r3, #4]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	f240 8101 	bls.w	800c4c4 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	dc06      	bgt.n	800c2e2 <http_send_data_ssi+0x3ea>
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	e001      	b.n	800c2e6 <http_send_data_ssi+0x3ee>
 800c2e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2e6:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	6999      	ldr	r1, [r3, #24]
 800c2ec:	f107 020e 	add.w	r2, r7, #14
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff f998 	bl	800b628 <http_write>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800c2fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c300:	2b00      	cmp	r3, #0
 800c302:	f040 80df 	bne.w	800c4c4 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 800c306:	2301      	movs	r3, #1
 800c308:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	699b      	ldr	r3, [r3, #24]
 800c312:	429a      	cmp	r2, r3
 800c314:	d809      	bhi.n	800c32a <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	689a      	ldr	r2, [r3, #8]
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	b29a      	uxth	r2, r3
 800c322:	89fb      	ldrh	r3, [r7, #14]
 800c324:	4413      	add	r3, r2
 800c326:	b29b      	uxth	r3, r3
 800c328:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	89fa      	ldrh	r2, [r7, #14]
 800c330:	441a      	add	r2, r3
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33a:	89fa      	ldrh	r2, [r7, #14]
 800c33c:	1a9a      	subs	r2, r3, r2
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	625a      	str	r2, [r3, #36]	; 0x24
 800c342:	e0bf      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	1e5a      	subs	r2, r3, #1
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        }
        break;
 800c360:	e0b0      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	689a      	ldr	r2, [r3, #8]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d95c      	bls.n	800c428 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	685a      	ldr	r2, [r3, #4]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	699b      	ldr	r3, [r3, #24]
 800c376:	429a      	cmp	r2, r3
 800c378:	d206      	bcs.n	800c388 <http_send_data_ssi+0x490>
 800c37a:	4b0b      	ldr	r3, [pc, #44]	; (800c3a8 <http_send_data_ssi+0x4b0>)
 800c37c:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800c380:	490d      	ldr	r1, [pc, #52]	; (800c3b8 <http_send_data_ssi+0x4c0>)
 800c382:	480b      	ldr	r0, [pc, #44]	; (800c3b0 <http_send_data_ssi+0x4b8>)
 800c384:	f00b fd92 	bl	8017eac <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	685a      	ldr	r2, [r3, #4]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c396:	4293      	cmp	r3, r2
 800c398:	dc10      	bgt.n	800c3bc <http_send_data_ssi+0x4c4>
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	e00b      	b.n	800c3c0 <http_send_data_ssi+0x4c8>
 800c3a8:	0801a5d4 	.word	0x0801a5d4
 800c3ac:	0801a704 	.word	0x0801a704
 800c3b0:	0801a61c 	.word	0x0801a61c
 800c3b4:	080241e8 	.word	0x080241e8
 800c3b8:	0801a71c 	.word	0x0801a71c
 800c3bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3c0:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800c3c2:	89fb      	ldrh	r3, [r7, #14]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00a      	beq.n	800c3de <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	6999      	ldr	r1, [r3, #24]
 800c3cc:	f107 020e 	add.w	r2, r7, #14
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff f928 	bl	800b628 <http_write>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	75fb      	strb	r3, [r7, #23]
 800c3dc:	e001      	b.n	800c3e2 <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800c3e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d16c      	bne.n	800c4c4 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	699b      	ldr	r3, [r3, #24]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d809      	bhi.n	800c40e <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	689a      	ldr	r2, [r3, #8]
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	b29a      	uxth	r2, r3
 800c406:	89fb      	ldrh	r3, [r7, #14]
 800c408:	4413      	add	r3, r2
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	89fa      	ldrh	r2, [r7, #14]
 800c414:	441a      	add	r2, r3
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41e:	89fa      	ldrh	r2, [r7, #14]
 800c420:	1a9a      	subs	r2, r3, r2
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	625a      	str	r2, [r3, #36]	; 0x24
 800c426:	e04d      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	8a1a      	ldrh	r2, [r3, #16]
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	8a5b      	ldrh	r3, [r3, #18]
 800c430:	429a      	cmp	r2, r3
 800c432:	d30b      	bcc.n	800c44c <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	8a9b      	ldrh	r3, [r3, #20]
 800c438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d005      	beq.n	800c44c <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	2200      	movs	r2, #0
 800c444:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800c446:	6838      	ldr	r0, [r7, #0]
 800c448:	f7ff fa24 	bl	800b894 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	8a1a      	ldrh	r2, [r3, #16]
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	8a5b      	ldrh	r3, [r3, #18]
 800c454:	429a      	cmp	r2, r3
 800c456:	d222      	bcs.n	800c49e <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	8a5a      	ldrh	r2, [r3, #18]
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	8a1b      	ldrh	r3, [r3, #16]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	b29b      	uxth	r3, r3
 800c464:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	8a1b      	ldrh	r3, [r3, #16]
 800c46a:	3320      	adds	r3, #32
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	4413      	add	r3, r2
 800c470:	1c59      	adds	r1, r3, #1
 800c472:	f107 020e 	add.w	r2, r7, #14
 800c476:	2301      	movs	r3, #1
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7ff f8d5 	bl	800b628 <http_write>
 800c47e:	4603      	mov	r3, r0
 800c480:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800c482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d11c      	bne.n	800c4c4 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 800c48a:	2301      	movs	r3, #1
 800c48c:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	8a1a      	ldrh	r2, [r3, #16]
 800c492:	89fb      	ldrh	r3, [r7, #14]
 800c494:	4413      	add	r3, r2
 800c496:	b29a      	uxth	r2, r3
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	821a      	strh	r2, [r3, #16]
 800c49c:	e012      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	8a9b      	ldrh	r3, [r3, #20]
 800c4a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d10c      	bne.n	800c4c4 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800c4c0:	e000      	b.n	800c4c4 <http_send_data_ssi+0x5cc>
        default:
          break;
 800c4c2:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c4ca:	2b04      	cmp	r3, #4
 800c4cc:	d003      	beq.n	800c4d6 <http_send_data_ssi+0x5de>
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d004      	beq.n	800c4e0 <http_send_data_ssi+0x5e8>
 800c4d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f43f ad64 	beq.w	800bfa8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c4e6:	2b04      	cmp	r3, #4
 800c4e8:	d034      	beq.n	800c554 <http_send_data_ssi+0x65c>
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d92e      	bls.n	800c554 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c504:	4293      	cmp	r3, r2
 800c506:	dc06      	bgt.n	800c516 <http_send_data_ssi+0x61e>
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	b29b      	uxth	r3, r3
 800c514:	e001      	b.n	800c51a <http_send_data_ssi+0x622>
 800c516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c51a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	6999      	ldr	r1, [r3, #24]
 800c520:	f107 020e 	add.w	r2, r7, #14
 800c524:	2300      	movs	r3, #0
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff f87e 	bl	800b628 <http_write>
 800c52c:	4603      	mov	r3, r0
 800c52e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800c530:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10d      	bne.n	800c554 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 800c538:	2301      	movs	r3, #1
 800c53a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	89fa      	ldrh	r2, [r7, #14]
 800c542:	441a      	add	r2, r3
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	89fa      	ldrh	r2, [r7, #14]
 800c54e:	1a9a      	subs	r2, r3, r2
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800c554:	7dbb      	ldrb	r3, [r7, #22]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop

0800c560 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800c56a:	2300      	movs	r3, #0
 800c56c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <http_send+0x18>
    return 0;
 800c574:	2300      	movs	r3, #0
 800c576:	e048      	b.n	800c60a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800c57e:	2b04      	cmp	r3, #4
 800c580:	d812      	bhi.n	800c5a8 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff fb7d 	bl	800bc84 <http_send_headers>
 800c58a:	4603      	mov	r3, r0
 800c58c:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	2b03      	cmp	r3, #3
 800c592:	d007      	beq.n	800c5a4 <http_send+0x44>
 800c594:	7bfb      	ldrb	r3, [r7, #15]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d006      	beq.n	800c5a8 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800c5a0:	2b04      	cmp	r3, #4
 800c5a2:	d801      	bhi.n	800c5a8 <http_send+0x48>
      return data_to_send;
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	e030      	b.n	800c60a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d108      	bne.n	800c5c2 <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff fc3a 	bl	800be2c <http_check_eof>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <http_send+0x62>
      return 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	e023      	b.n	800c60a <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d006      	beq.n	800c5d8 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff fc93 	bl	800bef8 <http_send_data_ssi>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	73fb      	strb	r3, [r7, #15]
 800c5d6:	e005      	b.n	800c5e4 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff fc56 	bl	800be8c <http_send_data_nonssi>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10d      	bne.n	800c608 <http_send+0xa8>
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	695b      	ldr	r3, [r3, #20]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fe ff85 	bl	800b500 <fs_bytes_left>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dc05      	bgt.n	800c608 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff f8dd 	bl	800b7be <http_eof>
    return 0;
 800c604:	2300      	movs	r3, #0
 800c606:	e000      	b.n	800c60a <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
	...

0800c614 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	4a1c      	ldr	r2, [pc, #112]	; (800c694 <http_get_404_file+0x80>)
 800c622:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4619      	mov	r1, r3
 800c62c:	4610      	mov	r0, r2
 800c62e:	f7fe ff1f 	bl	800b470 <fs_open>
 800c632:	4603      	mov	r3, r0
 800c634:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d024      	beq.n	800c688 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	4a15      	ldr	r2, [pc, #84]	; (800c698 <http_get_404_file+0x84>)
 800c642:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f7fe ff0f 	bl	800b470 <fs_open>
 800c652:	4603      	mov	r3, r0
 800c654:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d014      	beq.n	800c688 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	4a0e      	ldr	r2, [pc, #56]	; (800c69c <http_get_404_file+0x88>)
 800c662:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4619      	mov	r1, r3
 800c66c:	4610      	mov	r0, r2
 800c66e:	f7fe feff 	bl	800b470 <fs_open>
 800c672:	4603      	mov	r3, r0
 800c674:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800c676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d004      	beq.n	800c688 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2200      	movs	r2, #0
 800c682:	601a      	str	r2, [r3, #0]
        return NULL;
 800c684:	2300      	movs	r3, #0
 800c686:	e000      	b.n	800c68a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800c688:	687b      	ldr	r3, [r7, #4]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	0801a734 	.word	0x0801a734
 800c698:	0801a740 	.word	0x0801a740
 800c69c:	0801a74c 	.word	0x0801a74c

0800c6a0 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800c6a8:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <http_handle_post_finished+0x2c>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800c6ae:	223f      	movs	r2, #63	; 0x3f
 800c6b0:	4906      	ldr	r1, [pc, #24]	; (800c6cc <http_handle_post_finished+0x2c>)
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7f5 f8d4 	bl	8001860 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4904      	ldr	r1, [pc, #16]	; (800c6cc <http_handle_post_finished+0x2c>)
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 faab 	bl	800cc18 <http_find_file>
 800c6c2:	4603      	mov	r3, r0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	200009a8 	.word	0x200009a8

0800c6d0 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d014      	beq.n	800c70a <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	8912      	ldrh	r2, [r2, #8]
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d204      	bcs.n	800c6f8 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c6f6:	e008      	b.n	800c70a <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	8912      	ldrh	r2, [r2, #8]
 800c702:	1a9a      	subs	r2, r3, r2
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d006      	beq.n	800c71e <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7f5 f866 	bl	80017e4 <httpd_post_receive_data>
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]
 800c71c:	e001      	b.n	800c722 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800c722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d104      	bne.n	800c746 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7ff ffaf 	bl	800c6a0 <http_handle_post_finished>
 800c742:	4603      	mov	r3, r0
 800c744:	e000      	b.n	800c748 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b092      	sub	sp, #72	; 0x48
 800c754:	af04      	add	r7, sp, #16
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
 800c75c:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800c75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c760:	1c58      	adds	r0, r3, #1
 800c762:	887a      	ldrh	r2, [r7, #2]
 800c764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c766:	1c59      	adds	r1, r3, #1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	1acb      	subs	r3, r1, r3
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	461a      	mov	r2, r3
 800c770:	4965      	ldr	r1, [pc, #404]	; (800c908 <http_post_request+0x1b8>)
 800c772:	f000 fe6f 	bl	800d454 <lwip_strnstr>
 800c776:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 80be 	beq.w	800c8fc <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800c780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c782:	1c58      	adds	r0, r3, #1
 800c784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c786:	3301      	adds	r3, #1
 800c788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	461a      	mov	r2, r3
 800c78e:	495f      	ldr	r1, [pc, #380]	; (800c90c <http_post_request+0x1bc>)
 800c790:	f000 fe60 	bl	800d454 <lwip_strnstr>
 800c794:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 80ac 	beq.w	800c8f6 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a0:	3310      	adds	r3, #16
 800c7a2:	220a      	movs	r2, #10
 800c7a4:	495a      	ldr	r1, [pc, #360]	; (800c910 <http_post_request+0x1c0>)
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 fe54 	bl	800d454 <lwip_strnstr>
 800c7ac:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800c7ae:	6a3b      	ldr	r3, [r7, #32]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 80a0 	beq.w	800c8f6 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	3310      	adds	r3, #16
 800c7ba:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800c7bc:	69f8      	ldr	r0, [r7, #28]
 800c7be:	f00b fa55 	bl	8017c6c <atoi>
 800c7c2:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800c7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10b      	bne.n	800c7e2 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b30      	cmp	r3, #48	; 0x30
 800c7d0:	d104      	bne.n	800c7dc <http_post_request+0x8c>
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b0d      	cmp	r3, #13
 800c7da:	d002      	beq.n	800c7e2 <http_post_request+0x92>
            content_len = -1;
 800c7dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7e0:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800c7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f2c0 8083 	blt.w	800c8f0 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800c7ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800c7f0:	887a      	ldrh	r2, [r7, #2]
 800c7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f4:	1d19      	adds	r1, r3, #4
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	1acb      	subs	r3, r1, r3
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	db05      	blt.n	800c80a <http_post_request+0xba>
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	1d1a      	adds	r2, r3, #4
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	b29b      	uxth	r3, r3
 800c808:	e000      	b.n	800c80c <http_post_request+0xbc>
 800c80a:	887b      	ldrh	r3, [r7, #2]
 800c80c:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800c80e:	887a      	ldrh	r2, [r7, #2]
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	1d19      	adds	r1, r3, #4
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	1acb      	subs	r3, r1, r3
 800c818:	429a      	cmp	r2, r3
 800c81a:	db05      	blt.n	800c828 <http_post_request+0xd8>
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	1d1a      	adds	r2, r3, #4
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	b29b      	uxth	r3, r3
 800c826:	e000      	b.n	800c82a <http_post_request+0xda>
 800c828:	887b      	ldrh	r3, [r7, #2]
 800c82a:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800c82c:	2301      	movs	r3, #1
 800c82e:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800c830:	4b38      	ldr	r3, [pc, #224]	; (800c914 <http_post_request+0x1c4>)
 800c832:	2200      	movs	r2, #0
 800c834:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	2200      	movs	r2, #0
 800c83a:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800c83c:	8aba      	ldrh	r2, [r7, #20]
 800c83e:	f107 0312 	add.w	r3, r7, #18
 800c842:	9303      	str	r3, [sp, #12]
 800c844:	233f      	movs	r3, #63	; 0x3f
 800c846:	9302      	str	r3, [sp, #8]
 800c848:	4b32      	ldr	r3, [pc, #200]	; (800c914 <http_post_request+0x1c4>)
 800c84a:	9301      	str	r3, [sp, #4]
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	4613      	mov	r3, r2
 800c852:	69ba      	ldr	r2, [r7, #24]
 800c854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c856:	68b8      	ldr	r0, [r7, #8]
 800c858:	f7f4 ff9a 	bl	8001790 <httpd_post_begin>
 800c85c:	4603      	mov	r3, r0
 800c85e:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800c860:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d13c      	bne.n	800c8e2 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800c86c:	8afb      	ldrh	r3, [r7, #22]
 800c86e:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800c870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800c878:	e007      	b.n	800c88a <http_post_request+0x13a>
              start_offset -= q->len;
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	895b      	ldrh	r3, [r3, #10]
 800c87e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d004      	beq.n	800c89a <http_post_request+0x14a>
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	895b      	ldrh	r3, [r3, #10]
 800c894:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c896:	429a      	cmp	r2, r3
 800c898:	d2ef      	bcs.n	800c87a <http_post_request+0x12a>
            }
            if (q != NULL) {
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00d      	beq.n	800c8bc <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800c8a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8a6:	f002 f8b3 	bl	800ea10 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800c8aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8ac:	f002 f9d6 	bl	800ec5c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800c8b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8b2:	68b8      	ldr	r0, [r7, #8]
 800c8b4:	f7ff ff0c 	bl	800c6d0 <http_post_rxpbuf>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	e021      	b.n	800c900 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10b      	bne.n	800c8de <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800c8c6:	2241      	movs	r2, #65	; 0x41
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	f001 fe42 	bl	800e554 <pbuf_alloc>
 800c8d0:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800c8d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8d4:	68b8      	ldr	r0, [r7, #8]
 800c8d6:	f7ff fefb 	bl	800c6d0 <http_post_rxpbuf>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	e010      	b.n	800c900 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	e00e      	b.n	800c900 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	490b      	ldr	r1, [pc, #44]	; (800c914 <http_post_request+0x1c4>)
 800c8e6:	68b8      	ldr	r0, [r7, #8]
 800c8e8:	f000 f996 	bl	800cc18 <http_find_file>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	e007      	b.n	800c900 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800c8f0:	f06f 030f 	mvn.w	r3, #15
 800c8f4:	e004      	b.n	800c900 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800c8f6:	f06f 030f 	mvn.w	r3, #15
 800c8fa:	e001      	b.n	800c900 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800c8fc:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c900:	4618      	mov	r0, r3
 800c902:	3738      	adds	r7, #56	; 0x38
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	0801a758 	.word	0x0801a758
 800c90c:	0801a1e4 	.word	0x0801a1e4
 800c910:	0801a6c8 	.word	0x0801a6c8
 800c914:	200009a8 	.word	0x200009a8

0800c918 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b092      	sub	sp, #72	; 0x48
 800c91c:	af02      	add	r7, sp, #8
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d106      	bne.n	800c93c <http_parse_request+0x24>
 800c92e:	4b87      	ldr	r3, [pc, #540]	; (800cb4c <http_parse_request+0x234>)
 800c930:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800c934:	4986      	ldr	r1, [pc, #536]	; (800cb50 <http_parse_request+0x238>)
 800c936:	4887      	ldr	r0, [pc, #540]	; (800cb54 <http_parse_request+0x23c>)
 800c938:	f00b fab8 	bl	8017eac <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d106      	bne.n	800c950 <http_parse_request+0x38>
 800c942:	4b82      	ldr	r3, [pc, #520]	; (800cb4c <http_parse_request+0x234>)
 800c944:	f240 72af 	movw	r2, #1967	; 0x7af
 800c948:	4983      	ldr	r1, [pc, #524]	; (800cb58 <http_parse_request+0x240>)
 800c94a:	4882      	ldr	r0, [pc, #520]	; (800cb54 <http_parse_request+0x23c>)
 800c94c:	f00b faae 	bl	8017eac <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	695b      	ldr	r3, [r3, #20]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d103      	bne.n	800c960 <http_parse_request+0x48>
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d002      	beq.n	800c966 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800c960:	f06f 0307 	mvn.w	r3, #7
 800c964:	e0ed      	b.n	800cb42 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d103      	bne.n	800c976 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c972:	621a      	str	r2, [r3, #32]
 800c974:	e005      	b.n	800c982 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c97c:	4618      	mov	r0, r3
 800c97e:	f002 f98f 	bl	800eca0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800c982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c984:	f002 f96a 	bl	800ec5c <pbuf_ref>

  if (hs->req->next != NULL) {
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d012      	beq.n	800c9b8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	891b      	ldrh	r3, [r3, #8]
 800c998:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c99c:	4293      	cmp	r3, r2
 800c99e:	bf28      	it	cs
 800c9a0:	4613      	movcs	r3, r2
 800c9a2:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	6a18      	ldr	r0, [r3, #32]
 800c9a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	496b      	ldr	r1, [pc, #428]	; (800cb5c <http_parse_request+0x244>)
 800c9ae:	f002 fa9f 	bl	800eef0 <pbuf_copy_partial>
    data = httpd_req_buf;
 800c9b2:	4b6a      	ldr	r3, [pc, #424]	; (800cb5c <http_parse_request+0x244>)
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b6:	e005      	b.n	800c9c4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	895b      	ldrh	r3, [r3, #10]
 800c9c2:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800c9c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9c6:	2b06      	cmp	r3, #6
 800c9c8:	f240 80a1 	bls.w	800cb0e <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800c9cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	4963      	ldr	r1, [pc, #396]	; (800cb60 <http_parse_request+0x248>)
 800c9d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c9d4:	f000 fd3e 	bl	800d454 <lwip_strnstr>
 800c9d8:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 8096 	beq.w	800cb0e <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800c9ea:	2204      	movs	r2, #4
 800c9ec:	495d      	ldr	r1, [pc, #372]	; (800cb64 <http_parse_request+0x24c>)
 800c9ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c9f0:	f00b fbb2 	bl	8018158 <strncmp>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d103      	bne.n	800ca02 <http_parse_request+0xea>
        sp1 = data + 3;
 800c9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9fc:	3303      	adds	r3, #3
 800c9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca00:	e014      	b.n	800ca2c <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800ca02:	2205      	movs	r2, #5
 800ca04:	4958      	ldr	r1, [pc, #352]	; (800cb68 <http_parse_request+0x250>)
 800ca06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ca08:	f00b fba6 	bl	8018158 <strncmp>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d105      	bne.n	800ca1e <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800ca12:	2301      	movs	r3, #1
 800ca14:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800ca16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca18:	3304      	adds	r3, #4
 800ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca1c:	e006      	b.n	800ca2c <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800ca1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca20:	3304      	adds	r3, #4
 800ca22:	2200      	movs	r2, #0
 800ca24:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800ca26:	f06f 030f 	mvn.w	r3, #15
 800ca2a:	e08a      	b.n	800cb42 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	1c5a      	adds	r2, r3, #1
 800ca30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3e:	3301      	adds	r3, #1
 800ca40:	8bfa      	ldrh	r2, [r7, #30]
 800ca42:	494a      	ldr	r1, [pc, #296]	; (800cb6c <http_parse_request+0x254>)
 800ca44:	4618      	mov	r0, r3
 800ca46:	f000 fd05 	bl	800d454 <lwip_strnstr>
 800ca4a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800ca4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10c      	bne.n	800ca6c <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	3301      	adds	r3, #1
 800ca56:	8bfa      	ldrh	r2, [r7, #30]
 800ca58:	4941      	ldr	r1, [pc, #260]	; (800cb60 <http_parse_request+0x248>)
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 fcfa 	bl	800d454 <lwip_strnstr>
 800ca60:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800ca62:	2301      	movs	r3, #1
 800ca64:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800ca66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d163      	bne.n	800cb34 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	3301      	adds	r3, #1
 800ca70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800ca76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d048      	beq.n	800cb0e <http_parse_request+0x1f6>
 800ca7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d944      	bls.n	800cb0e <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800ca84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ca86:	461a      	mov	r2, r3
 800ca88:	4939      	ldr	r1, [pc, #228]	; (800cb70 <http_parse_request+0x258>)
 800ca8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ca8c:	f000 fce2 	bl	800d454 <lwip_strnstr>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d03b      	beq.n	800cb0e <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	3301      	adds	r3, #1
 800ca9a:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	2200      	movs	r2, #0
 800caa0:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800caa2:	8bbb      	ldrh	r3, [r7, #28]
 800caa4:	69ba      	ldr	r2, [r7, #24]
 800caa6:	4413      	add	r3, r2
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800caac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d026      	beq.n	800cb00 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	6a1b      	ldr	r3, [r3, #32]
 800cab6:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800cab8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800caba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabc:	9301      	str	r3, [sp, #4]
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	4613      	mov	r3, r2
 800cac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cac6:	68b9      	ldr	r1, [r7, #8]
 800cac8:	6978      	ldr	r0, [r7, #20]
 800caca:	f7ff fe41 	bl	800c750 <http_post_request>
 800cace:	4603      	mov	r3, r0
 800cad0:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800cad2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00a      	beq.n	800caf0 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	2220      	movs	r2, #32
 800cade:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800cae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae2:	2220      	movs	r2, #32
 800cae4:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800cae6:	8bbb      	ldrh	r3, [r7, #28]
 800cae8:	69ba      	ldr	r2, [r7, #24]
 800caea:	4413      	add	r3, r2
 800caec:	2220      	movs	r2, #32
 800caee:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800caf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800caf4:	f113 0f10 	cmn.w	r3, #16
 800caf8:	d01e      	beq.n	800cb38 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800cafa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cafe:	e020      	b.n	800cb42 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800cb00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb02:	69b9      	ldr	r1, [r7, #24]
 800cb04:	68b8      	ldr	r0, [r7, #8]
 800cb06:	f000 f887 	bl	800cc18 <http_find_file>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	e019      	b.n	800cb42 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	6a1b      	ldr	r3, [r3, #32]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f002 f88a 	bl	800ec2c <pbuf_clen>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	6a1b      	ldr	r3, [r3, #32]
 800cb20:	891b      	ldrh	r3, [r3, #8]
 800cb22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb26:	d209      	bcs.n	800cb3c <http_parse_request+0x224>
 800cb28:	8a3b      	ldrh	r3, [r7, #16]
 800cb2a:	2b05      	cmp	r3, #5
 800cb2c:	d806      	bhi.n	800cb3c <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800cb2e:	f06f 0304 	mvn.w	r3, #4
 800cb32:	e006      	b.n	800cb42 <http_parse_request+0x22a>
          goto badrequest;
 800cb34:	bf00      	nop
 800cb36:	e002      	b.n	800cb3e <http_parse_request+0x226>
              goto badrequest;
 800cb38:	bf00      	nop
 800cb3a:	e000      	b.n	800cb3e <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800cb3c:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800cb3e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3740      	adds	r7, #64	; 0x40
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	0801a5d4 	.word	0x0801a5d4
 800cb50:	0801a760 	.word	0x0801a760
 800cb54:	0801a61c 	.word	0x0801a61c
 800cb58:	0801a644 	.word	0x0801a644
 800cb5c:	200005a8 	.word	0x200005a8
 800cb60:	0801a6c8 	.word	0x0801a6c8
 800cb64:	0801a76c 	.word	0x0801a76c
 800cb68:	0801a774 	.word	0x0801a774
 800cb6c:	0801a77c 	.word	0x0801a77c
 800cb70:	0801a758 	.word	0x0801a758

0800cb74 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b088      	sub	sp, #32
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d040      	beq.n	800cc0a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800cb8c:	213f      	movs	r1, #63	; 0x3f
 800cb8e:	6838      	ldr	r0, [r7, #0]
 800cb90:	f00b facd 	bl	801812e <strchr>
 800cb94:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	613b      	str	r3, [r7, #16]
    ext = uri;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800cbaa:	212e      	movs	r1, #46	; 0x2e
 800cbac:	6938      	ldr	r0, [r7, #16]
 800cbae:	f00b fabe 	bl	801812e <strchr>
 800cbb2:	6138      	str	r0, [r7, #16]
 800cbb4:	e009      	b.n	800cbca <http_uri_is_ssi+0x56>
      ext = sub;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	617b      	str	r3, [r7, #20]
      sub++;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800cbc0:	212e      	movs	r1, #46	; 0x2e
 800cbc2:	6938      	ldr	r0, [r7, #16]
 800cbc4:	f00b fab3 	bl	801812e <strchr>
 800cbc8:	6138      	str	r0, [r7, #16]
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1f2      	bne.n	800cbb6 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]
 800cbd4:	e010      	b.n	800cbf8 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800cbd6:	4a0f      	ldr	r2, [pc, #60]	; (800cc14 <http_uri_is_ssi+0xa0>)
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	6978      	ldr	r0, [r7, #20]
 800cbe2:	f000 fc6d 	bl	800d4c0 <lwip_stricmp>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d102      	bne.n	800cbf2 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800cbec:	2301      	movs	r3, #1
 800cbee:	76fb      	strb	r3, [r7, #27]
        break;
 800cbf0:	e005      	b.n	800cbfe <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	61fb      	str	r3, [r7, #28]
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	2b04      	cmp	r3, #4
 800cbfc:	d9eb      	bls.n	800cbd6 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <http_uri_is_ssi+0x96>
      *param = '?';
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	223f      	movs	r2, #63	; 0x3f
 800cc08:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800cc0a:	7efb      	ldrb	r3, [r7, #27]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3720      	adds	r7, #32
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	080241ac 	.word	0x080241ac

0800cc18 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800cc18:	b590      	push	{r4, r7, lr}
 800cc1a:	b093      	sub	sp, #76	; 0x4c
 800cc1c:	af02      	add	r7, sp, #8
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7f3 fad5 	bl	80001e4 <strlen>
 800cc3a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d072      	beq.n	800cd28 <http_find_file+0x110>
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	3b01      	subs	r3, #1
 800cc48:	4413      	add	r3, r2
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	2b2f      	cmp	r3, #47	; 0x2f
 800cc4e:	d16b      	bne.n	800cd28 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800cc50:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800cc52:	4a80      	ldr	r2, [pc, #512]	; (800ce54 <http_find_file+0x23c>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d102      	bne.n	800cc5e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d164      	bne.n	800cd28 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	3b01      	subs	r3, #1
 800cc62:	2b3f      	cmp	r3, #63	; 0x3f
 800cc64:	bf28      	it	cs
 800cc66:	233f      	movcs	r3, #63	; 0x3f
 800cc68:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00a      	beq.n	800cc86 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	6a3a      	ldr	r2, [r7, #32]
 800cc74:	4619      	mov	r1, r3
 800cc76:	4877      	ldr	r0, [pc, #476]	; (800ce54 <http_find_file+0x23c>)
 800cc78:	f00b f83e 	bl	8017cf8 <memcpy>
      http_uri_buf[copy_len] = 0;
 800cc7c:	4a75      	ldr	r2, [pc, #468]	; (800ce54 <http_find_file+0x23c>)
 800cc7e:	6a3b      	ldr	r3, [r7, #32]
 800cc80:	4413      	add	r3, r2
 800cc82:	2200      	movs	r2, #0
 800cc84:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800cc86:	2300      	movs	r3, #0
 800cc88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc8a:	e04a      	b.n	800cd22 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d028      	beq.n	800cce4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800cc92:	6a3b      	ldr	r3, [r7, #32]
 800cc94:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800cc98:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d01e      	beq.n	800ccde <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800cca0:	4a6d      	ldr	r2, [pc, #436]	; (800ce58 <http_find_file+0x240>)
 800cca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f3 fa9b 	bl	80001e4 <strlen>
 800ccae:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800ccb0:	69ba      	ldr	r2, [r7, #24]
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	bf28      	it	cs
 800ccb8:	4613      	movcs	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	4a65      	ldr	r2, [pc, #404]	; (800ce54 <http_find_file+0x23c>)
 800ccc0:	1898      	adds	r0, r3, r2
 800ccc2:	4a65      	ldr	r2, [pc, #404]	; (800ce58 <http_find_file+0x240>)
 800ccc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	4619      	mov	r1, r3
 800ccce:	f00b f813 	bl	8017cf8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800ccd2:	6a3a      	ldr	r2, [r7, #32]
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	4a5e      	ldr	r2, [pc, #376]	; (800ce54 <http_find_file+0x23c>)
 800ccda:	2100      	movs	r1, #0
 800ccdc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800ccde:	4b5d      	ldr	r3, [pc, #372]	; (800ce54 <http_find_file+0x23c>)
 800cce0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cce2:	e004      	b.n	800ccee <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800cce4:	4a5c      	ldr	r2, [pc, #368]	; (800ce58 <http_find_file+0x240>)
 800cce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ccec:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fe fbbc 	bl	800b470 <fs_open>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800ccfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10b      	bne.n	800cd1c <http_find_file+0x104>
        uri = file_name;
 800cd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd06:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800cd0c:	4a52      	ldr	r2, [pc, #328]	; (800ce58 <http_find_file+0x240>)
 800cd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	4413      	add	r3, r2
 800cd14:	791b      	ldrb	r3, [r3, #4]
 800cd16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800cd1a:	e005      	b.n	800cd28 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800cd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd1e:	3301      	adds	r3, #1
 800cd20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd24:	2b04      	cmp	r3, #4
 800cd26:	d9b1      	bls.n	800cc8c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d176      	bne.n	800ce1c <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	213f      	movs	r1, #63	; 0x3f
 800cd32:	4618      	mov	r0, r3
 800cd34:	f00b f9fb 	bl	801812e <strchr>
 800cd38:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800cd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d005      	beq.n	800cd4c <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800cd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd42:	2200      	movs	r2, #0
 800cd44:	701a      	strb	r2, [r3, #0]
      params++;
 800cd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd48:	3301      	adds	r3, #1
 800cd4a:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800cd4c:	4b43      	ldr	r3, [pc, #268]	; (800ce5c <http_find_file+0x244>)
 800cd4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd52:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800cd54:	4b42      	ldr	r3, [pc, #264]	; (800ce60 <http_find_file+0x248>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d034      	beq.n	800cdc6 <http_find_file+0x1ae>
 800cd5c:	4b41      	ldr	r3, [pc, #260]	; (800ce64 <http_find_file+0x24c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d030      	beq.n	800cdc6 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800cd64:	2300      	movs	r3, #0
 800cd66:	633b      	str	r3, [r7, #48]	; 0x30
 800cd68:	e028      	b.n	800cdbc <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800cd6a:	68b8      	ldr	r0, [r7, #8]
 800cd6c:	4b3d      	ldr	r3, [pc, #244]	; (800ce64 <http_find_file+0x24c>)
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	4413      	add	r3, r2
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	f7f3 fa29 	bl	80001d0 <strcmp>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d118      	bne.n	800cdb6 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800cd84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7fe fd26 	bl	800b7d8 <extract_uri_parameters>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	4a33      	ldr	r2, [pc, #204]	; (800ce5c <http_find_file+0x244>)
 800cd90:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800cd92:	4b34      	ldr	r3, [pc, #208]	; (800ce64 <http_find_file+0x24c>)
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	00db      	lsls	r3, r3, #3
 800cd9a:	4413      	add	r3, r2
 800cd9c:	685c      	ldr	r4, [r3, #4]
 800cd9e:	4b2f      	ldr	r3, [pc, #188]	; (800ce5c <http_find_file+0x244>)
 800cda0:	6819      	ldr	r1, [r3, #0]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800cdac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdae:	47a0      	blx	r4
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	60bb      	str	r3, [r7, #8]
          break;
 800cdb4:	e007      	b.n	800cdc6 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	3301      	adds	r3, #1
 800cdba:	633b      	str	r3, [r7, #48]	; 0x30
 800cdbc:	4b28      	ldr	r3, [pc, #160]	; (800ce60 <http_find_file+0x248>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	dbd1      	blt.n	800cd6a <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	4611      	mov	r1, r2
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fe fb4f 	bl	800b470 <fs_open>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800cdd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d102      	bne.n	800cde4 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cde2:	e006      	b.n	800cdf2 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800cde4:	f107 0308 	add.w	r3, r7, #8
 800cde8:	4619      	mov	r1, r3
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f7ff fc12 	bl	800c614 <http_get_404_file>
 800cdf0:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d011      	beq.n	800ce1c <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	7c1b      	ldrb	r3, [r3, #16]
 800cdfc:	f003 0308 	and.w	r3, r3, #8
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d003      	beq.n	800ce0c <http_find_file+0x1f4>
        tag_check = 1;
 800ce04:	2301      	movs	r3, #1
 800ce06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ce0a:	e007      	b.n	800ce1c <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce12:	f7ff feaf 	bl	800cb74 <http_uri_is_ssi>
 800ce16:	4603      	mov	r3, r0
 800ce18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d106      	bne.n	800ce30 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800ce22:	f107 0308 	add.w	r3, r7, #8
 800ce26:	4619      	mov	r1, r3
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f7ff fbf3 	bl	800c614 <http_get_404_file>
 800ce2e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	9301      	str	r3, [sp, #4]
 800ce36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f000 f810 	bl	800ce68 <http_init_file>
 800ce48:	4603      	mov	r3, r0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3744      	adds	r7, #68	; 0x44
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd90      	pop	{r4, r7, pc}
 800ce52:	bf00      	nop
 800ce54:	200009a8 	.word	0x200009a8
 800ce58:	080241c0 	.word	0x080241c0
 800ce5c:	200009fc 	.word	0x200009fc
 800ce60:	200009f8 	.word	0x200009f8
 800ce64:	200009f4 	.word	0x200009f4

0800ce68 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b088      	sub	sp, #32
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d06f      	beq.n	800cf5c <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d106      	bne.n	800ce92 <http_init_file+0x2a>
 800ce84:	4b46      	ldr	r3, [pc, #280]	; (800cfa0 <http_init_file+0x138>)
 800ce86:	f640 120b 	movw	r2, #2315	; 0x90b
 800ce8a:	4946      	ldr	r1, [pc, #280]	; (800cfa4 <http_init_file+0x13c>)
 800ce8c:	4846      	ldr	r0, [pc, #280]	; (800cfa8 <http_init_file+0x140>)
 800ce8e:	f00b f80d 	bl	8017eac <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800ce92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d01c      	beq.n	800ced4 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800ce9a:	f7fe fb40 	bl	800b51e <http_ssi_state_alloc>
 800ce9e:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d016      	beq.n	800ced4 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        ssi->parsed = file->data;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	461a      	mov	r2, r3
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	69fa      	ldr	r2, [r7, #28]
 800ced2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	da06      	bge.n	800cef8 <http_init_file+0x90>
 800ceea:	4b2d      	ldr	r3, [pc, #180]	; (800cfa0 <http_init_file+0x138>)
 800ceec:	f640 1234 	movw	r2, #2356	; 0x934
 800cef0:	492e      	ldr	r1, [pc, #184]	; (800cfac <http_init_file+0x144>)
 800cef2:	482d      	ldr	r0, [pc, #180]	; (800cfa8 <http_init_file+0x140>)
 800cef4:	f00a ffda 	bl	8017eac <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	461a      	mov	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d032      	beq.n	800cf76 <http_init_file+0x10e>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	7c1b      	ldrb	r3, [r3, #16]
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d02b      	beq.n	800cf76 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6998      	ldr	r0, [r3, #24]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf26:	461a      	mov	r2, r3
 800cf28:	4921      	ldr	r1, [pc, #132]	; (800cfb0 <http_init_file+0x148>)
 800cf2a:	f000 fa93 	bl	800d454 <lwip_strnstr>
 800cf2e:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d01f      	beq.n	800cf76 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	1d1a      	adds	r2, r3, #4
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	699b      	ldr	r3, [r3, #24]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	699a      	ldr	r2, [r3, #24]
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	441a      	add	r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	1ad2      	subs	r2, r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	625a      	str	r2, [r3, #36]	; 0x24
 800cf5a:	e00c      	b.n	800cf76 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d006      	beq.n	800cf8c <http_init_file+0x124>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	7c1b      	ldrb	r3, [r3, #16]
 800cf84:	f003 0301 	and.w	r3, r3, #1
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d103      	bne.n	800cf94 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f7fe fd4c 	bl	800ba2c <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3720      	adds	r7, #32
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	0801a5d4 	.word	0x0801a5d4
 800cfa4:	0801a780 	.word	0x0801a780
 800cfa8:	0801a61c 	.word	0x0801a61c
 800cfac:	0801a794 	.word	0x0801a794
 800cfb0:	0801a758 	.word	0x0801a758

0800cfb4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d002      	beq.n	800cfd0 <http_err+0x1c>
    http_state_free(hs);
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f7fe fb1a 	bl	800b604 <http_state_free>
  }
}
 800cfd0:	bf00      	nop
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <http_sent+0x1c>
    return ERR_OK;
 800cff0:	2300      	movs	r3, #0
 800cff2:	e008      	b.n	800d006 <http_sent+0x2e>
  }

  hs->retries = 0;
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800cffc:	6979      	ldr	r1, [r7, #20]
 800cffe:	68b8      	ldr	r0, [r7, #8]
 800d000:	f7ff faae 	bl	800c560 <http_send>

  return ERR_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3718      	adds	r7, #24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b084      	sub	sp, #16
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d107      	bne.n	800d032 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800d022:	2100      	movs	r1, #0
 800d024:	6838      	ldr	r0, [r7, #0]
 800d026:	f7fe fbbb 	bl	800b7a0 <http_close_conn>
 800d02a:	4603      	mov	r3, r0
 800d02c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	e021      	b.n	800d076 <http_poll+0x68>
  } else {
    hs->retries++;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d038:	3301      	adds	r3, #1
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d048:	2b04      	cmp	r3, #4
 800d04a:	d105      	bne.n	800d058 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800d04c:	68f9      	ldr	r1, [r7, #12]
 800d04e:	6838      	ldr	r0, [r7, #0]
 800d050:	f7fe fba6 	bl	800b7a0 <http_close_conn>
      return ERR_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	e00e      	b.n	800d076 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	695b      	ldr	r3, [r3, #20]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d009      	beq.n	800d074 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800d060:	68f9      	ldr	r1, [r7, #12]
 800d062:	6838      	ldr	r0, [r7, #0]
 800d064:	f7ff fa7c 	bl	800c560 <http_send>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d002      	beq.n	800d074 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800d06e:	6838      	ldr	r0, [r7, #0]
 800d070:	f007 f8c2 	bl	80141f8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
 800d08c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800d092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d105      	bne.n	800d0a6 <http_recv+0x26>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <http_recv+0x26>
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d111      	bne.n	800d0ca <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d008      	beq.n	800d0be <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	891b      	ldrh	r3, [r3, #8]
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	68b8      	ldr	r0, [r7, #8]
 800d0b4:	f002 fc94 	bl	800f9e0 <tcp_recved>
      pbuf_free(p);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f001 fd2f 	bl	800eb1c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800d0be:	6979      	ldr	r1, [r7, #20]
 800d0c0:	68b8      	ldr	r0, [r7, #8]
 800d0c2:	f7fe fb6d 	bl	800b7a0 <http_close_conn>
    return ERR_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e072      	b.n	800d1b0 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	891b      	ldrh	r3, [r3, #8]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	68b8      	ldr	r0, [r7, #8]
 800d0d2:	f002 fc85 	bl	800f9e0 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d012      	beq.n	800d106 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800d0e8:	6879      	ldr	r1, [r7, #4]
 800d0ea:	6978      	ldr	r0, [r7, #20]
 800d0ec:	f7ff faf0 	bl	800c6d0 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d103      	bne.n	800d102 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800d0fa:	6979      	ldr	r1, [r7, #20]
 800d0fc:	68b8      	ldr	r0, [r7, #8]
 800d0fe:	f7ff fa2f 	bl	800c560 <http_send>
    }
    return ERR_OK;
 800d102:	2300      	movs	r3, #0
 800d104:	e054      	b.n	800d1b0 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d14c      	bne.n	800d1a8 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	6979      	ldr	r1, [r7, #20]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7ff fc00 	bl	800c918 <http_parse_request>
 800d118:	4603      	mov	r3, r0
 800d11a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800d11c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d015      	beq.n	800d150 <http_recv+0xd0>
 800d124:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d128:	f113 0f05 	cmn.w	r3, #5
 800d12c:	d010      	beq.n	800d150 <http_recv+0xd0>
 800d12e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d132:	f113 0f10 	cmn.w	r3, #16
 800d136:	d00b      	beq.n	800d150 <http_recv+0xd0>
 800d138:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d13c:	f113 0f08 	cmn.w	r3, #8
 800d140:	d006      	beq.n	800d150 <http_recv+0xd0>
 800d142:	4b1d      	ldr	r3, [pc, #116]	; (800d1b8 <http_recv+0x138>)
 800d144:	f640 2204 	movw	r2, #2564	; 0xa04
 800d148:	491c      	ldr	r1, [pc, #112]	; (800d1bc <http_recv+0x13c>)
 800d14a:	481d      	ldr	r0, [pc, #116]	; (800d1c0 <http_recv+0x140>)
 800d14c:	f00a feae 	bl	8017eac <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800d150:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d154:	f113 0f05 	cmn.w	r3, #5
 800d158:	d00b      	beq.n	800d172 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d007      	beq.n	800d172 <http_recv+0xf2>
          pbuf_free(hs->req);
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	4618      	mov	r0, r3
 800d168:	f001 fcd8 	bl	800eb1c <pbuf_free>
          hs->req = NULL;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	2200      	movs	r2, #0
 800d170:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f001 fcd2 	bl	800eb1c <pbuf_free>
      if (parsed == ERR_OK) {
 800d178:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d109      	bne.n	800d194 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d186:	2b00      	cmp	r3, #0
 800d188:	d111      	bne.n	800d1ae <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800d18a:	6979      	ldr	r1, [r7, #20]
 800d18c:	68b8      	ldr	r0, [r7, #8]
 800d18e:	f7ff f9e7 	bl	800c560 <http_send>
 800d192:	e00c      	b.n	800d1ae <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800d194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d198:	f113 0f10 	cmn.w	r3, #16
 800d19c:	d107      	bne.n	800d1ae <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800d19e:	6979      	ldr	r1, [r7, #20]
 800d1a0:	68b8      	ldr	r0, [r7, #8]
 800d1a2:	f7fe fafd 	bl	800b7a0 <http_close_conn>
 800d1a6:	e002      	b.n	800d1ae <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f001 fcb7 	bl	800eb1c <pbuf_free>
    }
  }
  return ERR_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	0801a5d4 	.word	0x0801a5d4
 800d1bc:	0801a7b4 	.word	0x0801a7b4
 800d1c0:	0801a61c 	.word	0x0801a61c

0800d1c4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800d1d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <http_accept+0x1c>
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <http_accept+0x22>
    return ERR_VAL;
 800d1e0:	f06f 0305 	mvn.w	r3, #5
 800d1e4:	e025      	b.n	800d232 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d1e6:	2101      	movs	r1, #1
 800d1e8:	68b8      	ldr	r0, [r7, #8]
 800d1ea:	f003 f8dd 	bl	80103a8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800d1ee:	f7fe f9cb 	bl	800b588 <http_state_alloc>
 800d1f2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d102      	bne.n	800d200 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800d1fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1fe:	e018      	b.n	800d232 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800d206:	6979      	ldr	r1, [r7, #20]
 800d208:	68b8      	ldr	r0, [r7, #8]
 800d20a:	f003 facd 	bl	80107a8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800d20e:	490b      	ldr	r1, [pc, #44]	; (800d23c <http_accept+0x78>)
 800d210:	68b8      	ldr	r0, [r7, #8]
 800d212:	f003 fadb 	bl	80107cc <tcp_recv>
  altcp_err(pcb, http_err);
 800d216:	490a      	ldr	r1, [pc, #40]	; (800d240 <http_accept+0x7c>)
 800d218:	68b8      	ldr	r0, [r7, #8]
 800d21a:	f003 fb1b 	bl	8010854 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800d21e:	2204      	movs	r2, #4
 800d220:	4908      	ldr	r1, [pc, #32]	; (800d244 <http_accept+0x80>)
 800d222:	68b8      	ldr	r0, [r7, #8]
 800d224:	f003 fb50 	bl	80108c8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800d228:	4907      	ldr	r1, [pc, #28]	; (800d248 <http_accept+0x84>)
 800d22a:	68b8      	ldr	r0, [r7, #8]
 800d22c:	f003 faf0 	bl	8010810 <tcp_sent>

  return ERR_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3718      	adds	r7, #24
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	0800d081 	.word	0x0800d081
 800d240:	0800cfb5 	.word	0x0800cfb5
 800d244:	0800d00f 	.word	0x0800d00f
 800d248:	0800cfd9 	.word	0x0800cfd9

0800d24c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	460b      	mov	r3, r1
 800d256:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d029      	beq.n	800d2b2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d25e:	2101      	movs	r1, #1
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f003 f8a1 	bl	80103a8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800d266:	887b      	ldrh	r3, [r7, #2]
 800d268:	461a      	mov	r2, r3
 800d26a:	4914      	ldr	r1, [pc, #80]	; (800d2bc <httpd_init_pcb+0x70>)
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f002 f9e9 	bl	800f644 <tcp_bind>
 800d272:	4603      	mov	r3, r0
 800d274:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800d276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d006      	beq.n	800d28c <httpd_init_pcb+0x40>
 800d27e:	4b10      	ldr	r3, [pc, #64]	; (800d2c0 <httpd_init_pcb+0x74>)
 800d280:	f640 2257 	movw	r2, #2647	; 0xa57
 800d284:	490f      	ldr	r1, [pc, #60]	; (800d2c4 <httpd_init_pcb+0x78>)
 800d286:	4810      	ldr	r0, [pc, #64]	; (800d2c8 <httpd_init_pcb+0x7c>)
 800d288:	f00a fe10 	bl	8017eac <iprintf>
    pcb = altcp_listen(pcb);
 800d28c:	21ff      	movs	r1, #255	; 0xff
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f002 fa90 	bl	800f7b4 <tcp_listen_with_backlog>
 800d294:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d106      	bne.n	800d2aa <httpd_init_pcb+0x5e>
 800d29c:	4b08      	ldr	r3, [pc, #32]	; (800d2c0 <httpd_init_pcb+0x74>)
 800d29e:	f640 2259 	movw	r2, #2649	; 0xa59
 800d2a2:	490a      	ldr	r1, [pc, #40]	; (800d2cc <httpd_init_pcb+0x80>)
 800d2a4:	4808      	ldr	r0, [pc, #32]	; (800d2c8 <httpd_init_pcb+0x7c>)
 800d2a6:	f00a fe01 	bl	8017eac <iprintf>
    altcp_accept(pcb, http_accept);
 800d2aa:	4909      	ldr	r1, [pc, #36]	; (800d2d0 <httpd_init_pcb+0x84>)
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f003 faf3 	bl	8010898 <tcp_accept>
  }
}
 800d2b2:	bf00      	nop
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	080242c8 	.word	0x080242c8
 800d2c0:	0801a5d4 	.word	0x0801a5d4
 800d2c4:	0801a7e0 	.word	0x0801a7e0
 800d2c8:	0801a61c 	.word	0x0801a61c
 800d2cc:	0801a7fc 	.word	0x0801a7fc
 800d2d0:	0800d1c5 	.word	0x0800d1c5

0800d2d4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800d2da:	202e      	movs	r0, #46	; 0x2e
 800d2dc:	f003 fa56 	bl	801078c <tcp_new_ip_type>
 800d2e0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d106      	bne.n	800d2f6 <httpd_init+0x22>
 800d2e8:	4b07      	ldr	r3, [pc, #28]	; (800d308 <httpd_init+0x34>)
 800d2ea:	f640 2272 	movw	r2, #2674	; 0xa72
 800d2ee:	4907      	ldr	r1, [pc, #28]	; (800d30c <httpd_init+0x38>)
 800d2f0:	4807      	ldr	r0, [pc, #28]	; (800d310 <httpd_init+0x3c>)
 800d2f2:	f00a fddb 	bl	8017eac <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800d2f6:	2150      	movs	r1, #80	; 0x50
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7ff ffa7 	bl	800d24c <httpd_init_pcb>
}
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	0801a5d4 	.word	0x0801a5d4
 800d30c:	0801a81c 	.word	0x0801a81c
 800d310:	0801a61c 	.word	0x0801a61c

0800d314 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d106      	bne.n	800d334 <http_set_ssi_handler+0x20>
 800d326:	4b14      	ldr	r3, [pc, #80]	; (800d378 <http_set_ssi_handler+0x64>)
 800d328:	f640 2297 	movw	r2, #2711	; 0xa97
 800d32c:	4913      	ldr	r1, [pc, #76]	; (800d37c <http_set_ssi_handler+0x68>)
 800d32e:	4814      	ldr	r0, [pc, #80]	; (800d380 <http_set_ssi_handler+0x6c>)
 800d330:	f00a fdbc 	bl	8017eac <iprintf>
  httpd_ssi_handler = ssi_handler;
 800d334:	4a13      	ldr	r2, [pc, #76]	; (800d384 <http_set_ssi_handler+0x70>)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d106      	bne.n	800d34e <http_set_ssi_handler+0x3a>
 800d340:	4b0d      	ldr	r3, [pc, #52]	; (800d378 <http_set_ssi_handler+0x64>)
 800d342:	f640 229e 	movw	r2, #2718	; 0xa9e
 800d346:	4910      	ldr	r1, [pc, #64]	; (800d388 <http_set_ssi_handler+0x74>)
 800d348:	480d      	ldr	r0, [pc, #52]	; (800d380 <http_set_ssi_handler+0x6c>)
 800d34a:	f00a fdaf 	bl	8017eac <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	dc06      	bgt.n	800d362 <http_set_ssi_handler+0x4e>
 800d354:	4b08      	ldr	r3, [pc, #32]	; (800d378 <http_set_ssi_handler+0x64>)
 800d356:	f640 229f 	movw	r2, #2719	; 0xa9f
 800d35a:	490c      	ldr	r1, [pc, #48]	; (800d38c <http_set_ssi_handler+0x78>)
 800d35c:	4808      	ldr	r0, [pc, #32]	; (800d380 <http_set_ssi_handler+0x6c>)
 800d35e:	f00a fda5 	bl	8017eac <iprintf>

  httpd_tags = tags;
 800d362:	4a0b      	ldr	r2, [pc, #44]	; (800d390 <http_set_ssi_handler+0x7c>)
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800d368:	4a0a      	ldr	r2, [pc, #40]	; (800d394 <http_set_ssi_handler+0x80>)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800d36e:	bf00      	nop
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	0801a5d4 	.word	0x0801a5d4
 800d37c:	0801a838 	.word	0x0801a838
 800d380:	0801a61c 	.word	0x0801a61c
 800d384:	200009e8 	.word	0x200009e8
 800d388:	0801a850 	.word	0x0801a850
 800d38c:	0801a860 	.word	0x0801a860
 800d390:	200009f0 	.word	0x200009f0
 800d394:	200009ec 	.word	0x200009ec

0800d398 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d106      	bne.n	800d3b6 <http_set_cgi_handlers+0x1e>
 800d3a8:	4b0d      	ldr	r3, [pc, #52]	; (800d3e0 <http_set_cgi_handlers+0x48>)
 800d3aa:	f640 22b2 	movw	r2, #2738	; 0xab2
 800d3ae:	490d      	ldr	r1, [pc, #52]	; (800d3e4 <http_set_cgi_handlers+0x4c>)
 800d3b0:	480d      	ldr	r0, [pc, #52]	; (800d3e8 <http_set_cgi_handlers+0x50>)
 800d3b2:	f00a fd7b 	bl	8017eac <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	dc06      	bgt.n	800d3ca <http_set_cgi_handlers+0x32>
 800d3bc:	4b08      	ldr	r3, [pc, #32]	; (800d3e0 <http_set_cgi_handlers+0x48>)
 800d3be:	f640 22b3 	movw	r2, #2739	; 0xab3
 800d3c2:	490a      	ldr	r1, [pc, #40]	; (800d3ec <http_set_cgi_handlers+0x54>)
 800d3c4:	4808      	ldr	r0, [pc, #32]	; (800d3e8 <http_set_cgi_handlers+0x50>)
 800d3c6:	f00a fd71 	bl	8017eac <iprintf>

  httpd_cgis = cgis;
 800d3ca:	4a09      	ldr	r2, [pc, #36]	; (800d3f0 <http_set_cgi_handlers+0x58>)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800d3d0:	4a08      	ldr	r2, [pc, #32]	; (800d3f4 <http_set_cgi_handlers+0x5c>)
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	6013      	str	r3, [r2, #0]
}
 800d3d6:	bf00      	nop
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	0801a5d4 	.word	0x0801a5d4
 800d3e4:	0801a878 	.word	0x0801a878
 800d3e8:	0801a61c 	.word	0x0801a61c
 800d3ec:	0801a888 	.word	0x0801a888
 800d3f0:	200009f4 	.word	0x200009f4
 800d3f4:	200009f8 	.word	0x200009f8

0800d3f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d402:	88fb      	ldrh	r3, [r7, #6]
 800d404:	021b      	lsls	r3, r3, #8
 800d406:	b21a      	sxth	r2, r3
 800d408:	88fb      	ldrh	r3, [r7, #6]
 800d40a:	0a1b      	lsrs	r3, r3, #8
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	b21b      	sxth	r3, r3
 800d410:	4313      	orrs	r3, r2
 800d412:	b21b      	sxth	r3, r3
 800d414:	b29b      	uxth	r3, r3
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d422:	b480      	push	{r7}
 800d424:	b083      	sub	sp, #12
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	061a      	lsls	r2, r3, #24
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	021b      	lsls	r3, r3, #8
 800d432:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d436:	431a      	orrs	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	0a1b      	lsrs	r3, r3, #8
 800d43c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d440:	431a      	orrs	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	0e1b      	lsrs	r3, r3, #24
 800d446:	4313      	orrs	r3, r2
}
 800d448:	4618      	mov	r0, r3
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800d460:	68b8      	ldr	r0, [r7, #8]
 800d462:	f7f2 febf 	bl	80001e4 <strlen>
 800d466:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d101      	bne.n	800d472 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	e022      	b.n	800d4b8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	617b      	str	r3, [r7, #20]
 800d476:	e012      	b.n	800d49e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	781a      	ldrb	r2, [r3, #0]
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	429a      	cmp	r2, r3
 800d482:	d109      	bne.n	800d498 <lwip_strnstr+0x44>
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	68b9      	ldr	r1, [r7, #8]
 800d488:	6978      	ldr	r0, [r7, #20]
 800d48a:	f00a fe65 	bl	8018158 <strncmp>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d101      	bne.n	800d498 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	e00f      	b.n	800d4b8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	3301      	adds	r3, #1
 800d49c:	617b      	str	r3, [r7, #20]
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d007      	beq.n	800d4b6 <lwip_strnstr+0x62>
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	441a      	add	r2, r3
 800d4ac:	68f9      	ldr	r1, [r7, #12]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	440b      	add	r3, r1
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d9e0      	bls.n	800d478 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3718      	adds	r7, #24
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	603a      	str	r2, [r7, #0]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800d4de:	7bfa      	ldrb	r2, [r7, #15]
 800d4e0:	7bbb      	ldrb	r3, [r7, #14]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d016      	beq.n	800d514 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
 800d4e8:	f043 0320 	orr.w	r3, r3, #32
 800d4ec:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800d4ee:	7b7b      	ldrb	r3, [r7, #13]
 800d4f0:	2b60      	cmp	r3, #96	; 0x60
 800d4f2:	d90c      	bls.n	800d50e <lwip_stricmp+0x4e>
 800d4f4:	7b7b      	ldrb	r3, [r7, #13]
 800d4f6:	2b7a      	cmp	r3, #122	; 0x7a
 800d4f8:	d809      	bhi.n	800d50e <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800d4fa:	7bbb      	ldrb	r3, [r7, #14]
 800d4fc:	f043 0320 	orr.w	r3, r3, #32
 800d500:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800d502:	7b7a      	ldrb	r2, [r7, #13]
 800d504:	7b3b      	ldrb	r3, [r7, #12]
 800d506:	429a      	cmp	r2, r3
 800d508:	d003      	beq.n	800d512 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e006      	b.n	800d51c <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800d50e:	2301      	movs	r3, #1
 800d510:	e004      	b.n	800d51c <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800d512:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800d514:	7bfb      	ldrb	r3, [r7, #15]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1d7      	bne.n	800d4ca <lwip_stricmp+0xa>
  return 0;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3714      	adds	r7, #20
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]
  char *res = result;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	4413      	add	r3, r2
 800d540:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	bfb8      	it	lt
 800d548:	425b      	neglt	r3, r3
 800d54a:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d806      	bhi.n	800d560 <lwip_itoa+0x38>
    if (bufsize == 1) {
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d154      	bne.n	800d602 <lwip_itoa+0xda>
      *result = 0;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	701a      	strb	r2, [r3, #0]
    }
    return;
 800d55e:	e050      	b.n	800d602 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	da04      	bge.n	800d570 <lwip_itoa+0x48>
    *res++ = '-';
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	61fa      	str	r2, [r7, #28]
 800d56c:	222d      	movs	r2, #45	; 0x2d
 800d56e:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	2200      	movs	r2, #0
 800d574:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800d576:	e01c      	b.n	800d5b2 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800d578:	697a      	ldr	r2, [r7, #20]
 800d57a:	4b24      	ldr	r3, [pc, #144]	; (800d60c <lwip_itoa+0xe4>)
 800d57c:	fb83 1302 	smull	r1, r3, r3, r2
 800d580:	1099      	asrs	r1, r3, #2
 800d582:	17d3      	asrs	r3, r2, #31
 800d584:	1ac9      	subs	r1, r1, r3
 800d586:	460b      	mov	r3, r1
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	440b      	add	r3, r1
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	1ad1      	subs	r1, r2, r3
 800d590:	b2cb      	uxtb	r3, r1
 800d592:	3330      	adds	r3, #48	; 0x30
 800d594:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	3b01      	subs	r3, #1
 800d59a:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	7cfa      	ldrb	r2, [r7, #19]
 800d5a0:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	4a19      	ldr	r2, [pc, #100]	; (800d60c <lwip_itoa+0xe4>)
 800d5a6:	fb82 1203 	smull	r1, r2, r2, r3
 800d5aa:	1092      	asrs	r2, r2, #2
 800d5ac:	17db      	asrs	r3, r3, #31
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d003      	beq.n	800d5c0 <lwip_itoa+0x98>
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d8db      	bhi.n	800d578 <lwip_itoa+0x50>
  }
  if (n) {
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d003      	beq.n	800d5ce <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	701a      	strb	r2, [r3, #0]
    return;
 800d5cc:	e01a      	b.n	800d604 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10a      	bne.n	800d5ec <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	61fa      	str	r2, [r7, #28]
 800d5dc:	2230      	movs	r2, #48	; 0x30
 800d5de:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	1c5a      	adds	r2, r3, #1
 800d5e4:	61fa      	str	r2, [r7, #28]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	701a      	strb	r2, [r3, #0]
    return;
 800d5ea:	e00b      	b.n	800d604 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	441a      	add	r2, r3
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	69b9      	ldr	r1, [r7, #24]
 800d5fa:	69f8      	ldr	r0, [r7, #28]
 800d5fc:	f00a fb8a 	bl	8017d14 <memmove>
 800d600:	e000      	b.n	800d604 <lwip_itoa+0xdc>
    return;
 800d602:	bf00      	nop
}
 800d604:	3720      	adds	r7, #32
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	66666667 	.word	0x66666667

0800d610 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800d61a:	f000 f8d5 	bl	800d7c8 <mem_init>
  memp_init();
 800d61e:	f000 fbdb 	bl	800ddd8 <memp_init>
  pbuf_init();
  netif_init();
 800d622:	f000 fc93 	bl	800df4c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d626:	f007 fea7 	bl	8015378 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d62a:	f001 fd05 	bl	800f038 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d62e:	f007 fe19 	bl	8015264 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d632:	bf00      	nop
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	4603      	mov	r3, r0
 800d644:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d646:	4b05      	ldr	r3, [pc, #20]	; (800d65c <ptr_to_mem+0x20>)
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	4413      	add	r3, r2
}
 800d64e:	4618      	mov	r0, r3
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	20000a00 	.word	0x20000a00

0800d660 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d668:	4b05      	ldr	r3, [pc, #20]	; (800d680 <mem_to_ptr+0x20>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	b29b      	uxth	r3, r3
}
 800d672:	4618      	mov	r0, r3
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	20000a00 	.word	0x20000a00

0800d684 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d684:	b590      	push	{r4, r7, lr}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d68c:	4b45      	ldr	r3, [pc, #276]	; (800d7a4 <plug_holes+0x120>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	429a      	cmp	r2, r3
 800d694:	d206      	bcs.n	800d6a4 <plug_holes+0x20>
 800d696:	4b44      	ldr	r3, [pc, #272]	; (800d7a8 <plug_holes+0x124>)
 800d698:	f240 12df 	movw	r2, #479	; 0x1df
 800d69c:	4943      	ldr	r1, [pc, #268]	; (800d7ac <plug_holes+0x128>)
 800d69e:	4844      	ldr	r0, [pc, #272]	; (800d7b0 <plug_holes+0x12c>)
 800d6a0:	f00a fc04 	bl	8017eac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d6a4:	4b43      	ldr	r3, [pc, #268]	; (800d7b4 <plug_holes+0x130>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d306      	bcc.n	800d6bc <plug_holes+0x38>
 800d6ae:	4b3e      	ldr	r3, [pc, #248]	; (800d7a8 <plug_holes+0x124>)
 800d6b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d6b4:	4940      	ldr	r1, [pc, #256]	; (800d7b8 <plug_holes+0x134>)
 800d6b6:	483e      	ldr	r0, [pc, #248]	; (800d7b0 <plug_holes+0x12c>)
 800d6b8:	f00a fbf8 	bl	8017eac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	791b      	ldrb	r3, [r3, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d006      	beq.n	800d6d2 <plug_holes+0x4e>
 800d6c4:	4b38      	ldr	r3, [pc, #224]	; (800d7a8 <plug_holes+0x124>)
 800d6c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d6ca:	493c      	ldr	r1, [pc, #240]	; (800d7bc <plug_holes+0x138>)
 800d6cc:	4838      	ldr	r0, [pc, #224]	; (800d7b0 <plug_holes+0x12c>)
 800d6ce:	f00a fbed 	bl	8017eac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6da:	d906      	bls.n	800d6ea <plug_holes+0x66>
 800d6dc:	4b32      	ldr	r3, [pc, #200]	; (800d7a8 <plug_holes+0x124>)
 800d6de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d6e2:	4937      	ldr	r1, [pc, #220]	; (800d7c0 <plug_holes+0x13c>)
 800d6e4:	4832      	ldr	r0, [pc, #200]	; (800d7b0 <plug_holes+0x12c>)
 800d6e6:	f00a fbe1 	bl	8017eac <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7ff ffa4 	bl	800d63c <ptr_to_mem>
 800d6f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d024      	beq.n	800d748 <plug_holes+0xc4>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	791b      	ldrb	r3, [r3, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d120      	bne.n	800d748 <plug_holes+0xc4>
 800d706:	4b2b      	ldr	r3, [pc, #172]	; (800d7b4 <plug_holes+0x130>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d01b      	beq.n	800d748 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d710:	4b2c      	ldr	r3, [pc, #176]	; (800d7c4 <plug_holes+0x140>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	429a      	cmp	r2, r3
 800d718:	d102      	bne.n	800d720 <plug_holes+0x9c>
      lfree = mem;
 800d71a:	4a2a      	ldr	r2, [pc, #168]	; (800d7c4 <plug_holes+0x140>)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	881a      	ldrh	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d730:	d00a      	beq.n	800d748 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	4618      	mov	r0, r3
 800d738:	f7ff ff80 	bl	800d63c <ptr_to_mem>
 800d73c:	4604      	mov	r4, r0
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7ff ff8e 	bl	800d660 <mem_to_ptr>
 800d744:	4603      	mov	r3, r0
 800d746:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	885b      	ldrh	r3, [r3, #2]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff ff75 	bl	800d63c <ptr_to_mem>
 800d752:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d01f      	beq.n	800d79c <plug_holes+0x118>
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	791b      	ldrb	r3, [r3, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d11b      	bne.n	800d79c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d764:	4b17      	ldr	r3, [pc, #92]	; (800d7c4 <plug_holes+0x140>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d102      	bne.n	800d774 <plug_holes+0xf0>
      lfree = pmem;
 800d76e:	4a15      	ldr	r2, [pc, #84]	; (800d7c4 <plug_holes+0x140>)
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	881a      	ldrh	r2, [r3, #0]
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d784:	d00a      	beq.n	800d79c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff ff56 	bl	800d63c <ptr_to_mem>
 800d790:	4604      	mov	r4, r0
 800d792:	68b8      	ldr	r0, [r7, #8]
 800d794:	f7ff ff64 	bl	800d660 <mem_to_ptr>
 800d798:	4603      	mov	r3, r0
 800d79a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d79c:	bf00      	nop
 800d79e:	3714      	adds	r7, #20
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd90      	pop	{r4, r7, pc}
 800d7a4:	20000a00 	.word	0x20000a00
 800d7a8:	0801a8a4 	.word	0x0801a8a4
 800d7ac:	0801a8d4 	.word	0x0801a8d4
 800d7b0:	0801a8ec 	.word	0x0801a8ec
 800d7b4:	20000a04 	.word	0x20000a04
 800d7b8:	0801a914 	.word	0x0801a914
 800d7bc:	0801a930 	.word	0x0801a930
 800d7c0:	0801a94c 	.word	0x0801a94c
 800d7c4:	20000a08 	.word	0x20000a08

0800d7c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d7ce:	4b18      	ldr	r3, [pc, #96]	; (800d830 <mem_init+0x68>)
 800d7d0:	3303      	adds	r3, #3
 800d7d2:	f023 0303 	bic.w	r3, r3, #3
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	4b16      	ldr	r3, [pc, #88]	; (800d834 <mem_init+0x6c>)
 800d7da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d7dc:	4b15      	ldr	r3, [pc, #84]	; (800d834 <mem_init+0x6c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d7e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d7f6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d7fa:	f7ff ff1f 	bl	800d63c <ptr_to_mem>
 800d7fe:	4603      	mov	r3, r0
 800d800:	4a0d      	ldr	r2, [pc, #52]	; (800d838 <mem_init+0x70>)
 800d802:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d804:	4b0c      	ldr	r3, [pc, #48]	; (800d838 <mem_init+0x70>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2201      	movs	r2, #1
 800d80a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d80c:	4b0a      	ldr	r3, [pc, #40]	; (800d838 <mem_init+0x70>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d814:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d816:	4b08      	ldr	r3, [pc, #32]	; (800d838 <mem_init+0x70>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d81e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d820:	4b04      	ldr	r3, [pc, #16]	; (800d834 <mem_init+0x6c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a05      	ldr	r2, [pc, #20]	; (800d83c <mem_init+0x74>)
 800d826:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800d828:	bf00      	nop
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	2000c5e4 	.word	0x2000c5e4
 800d834:	20000a00 	.word	0x20000a00
 800d838:	20000a04 	.word	0x20000a04
 800d83c:	20000a08 	.word	0x20000a08

0800d840 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ff09 	bl	800d660 <mem_to_ptr>
 800d84e:	4603      	mov	r3, r0
 800d850:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	881b      	ldrh	r3, [r3, #0]
 800d856:	4618      	mov	r0, r3
 800d858:	f7ff fef0 	bl	800d63c <ptr_to_mem>
 800d85c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	885b      	ldrh	r3, [r3, #2]
 800d862:	4618      	mov	r0, r3
 800d864:	f7ff feea 	bl	800d63c <ptr_to_mem>
 800d868:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d872:	d818      	bhi.n	800d8a6 <mem_link_valid+0x66>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	885b      	ldrh	r3, [r3, #2]
 800d878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d87c:	d813      	bhi.n	800d8a6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d882:	8afa      	ldrh	r2, [r7, #22]
 800d884:	429a      	cmp	r2, r3
 800d886:	d004      	beq.n	800d892 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	881b      	ldrh	r3, [r3, #0]
 800d88c:	8afa      	ldrh	r2, [r7, #22]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d109      	bne.n	800d8a6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d892:	4b08      	ldr	r3, [pc, #32]	; (800d8b4 <mem_link_valid+0x74>)
 800d894:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d896:	693a      	ldr	r2, [r7, #16]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d006      	beq.n	800d8aa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	885b      	ldrh	r3, [r3, #2]
 800d8a0:	8afa      	ldrh	r2, [r7, #22]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d001      	beq.n	800d8aa <mem_link_valid+0x6a>
    return 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e000      	b.n	800d8ac <mem_link_valid+0x6c>
  }
  return 1;
 800d8aa:	2301      	movs	r3, #1
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3718      	adds	r7, #24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	20000a04 	.word	0x20000a04

0800d8b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d04c      	beq.n	800d960 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f003 0303 	and.w	r3, r3, #3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d007      	beq.n	800d8e0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d8d0:	4b25      	ldr	r3, [pc, #148]	; (800d968 <mem_free+0xb0>)
 800d8d2:	f240 2273 	movw	r2, #627	; 0x273
 800d8d6:	4925      	ldr	r1, [pc, #148]	; (800d96c <mem_free+0xb4>)
 800d8d8:	4825      	ldr	r0, [pc, #148]	; (800d970 <mem_free+0xb8>)
 800d8da:	f00a fae7 	bl	8017eac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d8de:	e040      	b.n	800d962 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3b08      	subs	r3, #8
 800d8e4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d8e6:	4b23      	ldr	r3, [pc, #140]	; (800d974 <mem_free+0xbc>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	68fa      	ldr	r2, [r7, #12]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d306      	bcc.n	800d8fe <mem_free+0x46>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f103 020c 	add.w	r2, r3, #12
 800d8f6:	4b20      	ldr	r3, [pc, #128]	; (800d978 <mem_free+0xc0>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d907      	bls.n	800d90e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d8fe:	4b1a      	ldr	r3, [pc, #104]	; (800d968 <mem_free+0xb0>)
 800d900:	f240 227f 	movw	r2, #639	; 0x27f
 800d904:	491d      	ldr	r1, [pc, #116]	; (800d97c <mem_free+0xc4>)
 800d906:	481a      	ldr	r0, [pc, #104]	; (800d970 <mem_free+0xb8>)
 800d908:	f00a fad0 	bl	8017eac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d90c:	e029      	b.n	800d962 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	791b      	ldrb	r3, [r3, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d107      	bne.n	800d926 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d916:	4b14      	ldr	r3, [pc, #80]	; (800d968 <mem_free+0xb0>)
 800d918:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d91c:	4918      	ldr	r1, [pc, #96]	; (800d980 <mem_free+0xc8>)
 800d91e:	4814      	ldr	r0, [pc, #80]	; (800d970 <mem_free+0xb8>)
 800d920:	f00a fac4 	bl	8017eac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d924:	e01d      	b.n	800d962 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f7ff ff8a 	bl	800d840 <mem_link_valid>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d107      	bne.n	800d942 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d932:	4b0d      	ldr	r3, [pc, #52]	; (800d968 <mem_free+0xb0>)
 800d934:	f240 2295 	movw	r2, #661	; 0x295
 800d938:	4912      	ldr	r1, [pc, #72]	; (800d984 <mem_free+0xcc>)
 800d93a:	480d      	ldr	r0, [pc, #52]	; (800d970 <mem_free+0xb8>)
 800d93c:	f00a fab6 	bl	8017eac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d940:	e00f      	b.n	800d962 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d948:	4b0f      	ldr	r3, [pc, #60]	; (800d988 <mem_free+0xd0>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d202      	bcs.n	800d958 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d952:	4a0d      	ldr	r2, [pc, #52]	; (800d988 <mem_free+0xd0>)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f7ff fe93 	bl	800d684 <plug_holes>
 800d95e:	e000      	b.n	800d962 <mem_free+0xaa>
    return;
 800d960:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	0801a8a4 	.word	0x0801a8a4
 800d96c:	0801a978 	.word	0x0801a978
 800d970:	0801a8ec 	.word	0x0801a8ec
 800d974:	20000a00 	.word	0x20000a00
 800d978:	20000a04 	.word	0x20000a04
 800d97c:	0801a99c 	.word	0x0801a99c
 800d980:	0801a9b8 	.word	0x0801a9b8
 800d984:	0801a9e0 	.word	0x0801a9e0
 800d988:	20000a08 	.word	0x20000a08

0800d98c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d998:	887b      	ldrh	r3, [r7, #2]
 800d99a:	3303      	adds	r3, #3
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	f023 0303 	bic.w	r3, r3, #3
 800d9a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d9a4:	8bfb      	ldrh	r3, [r7, #30]
 800d9a6:	2b0b      	cmp	r3, #11
 800d9a8:	d801      	bhi.n	800d9ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d9aa:	230c      	movs	r3, #12
 800d9ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d9ae:	8bfb      	ldrh	r3, [r7, #30]
 800d9b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d9b4:	d803      	bhi.n	800d9be <mem_trim+0x32>
 800d9b6:	8bfa      	ldrh	r2, [r7, #30]
 800d9b8:	887b      	ldrh	r3, [r7, #2]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d201      	bcs.n	800d9c2 <mem_trim+0x36>
    return NULL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e0cc      	b.n	800db5c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d9c2:	4b68      	ldr	r3, [pc, #416]	; (800db64 <mem_trim+0x1d8>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d304      	bcc.n	800d9d6 <mem_trim+0x4a>
 800d9cc:	4b66      	ldr	r3, [pc, #408]	; (800db68 <mem_trim+0x1dc>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d306      	bcc.n	800d9e4 <mem_trim+0x58>
 800d9d6:	4b65      	ldr	r3, [pc, #404]	; (800db6c <mem_trim+0x1e0>)
 800d9d8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d9dc:	4964      	ldr	r1, [pc, #400]	; (800db70 <mem_trim+0x1e4>)
 800d9de:	4865      	ldr	r0, [pc, #404]	; (800db74 <mem_trim+0x1e8>)
 800d9e0:	f00a fa64 	bl	8017eac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d9e4:	4b5f      	ldr	r3, [pc, #380]	; (800db64 <mem_trim+0x1d8>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d304      	bcc.n	800d9f8 <mem_trim+0x6c>
 800d9ee:	4b5e      	ldr	r3, [pc, #376]	; (800db68 <mem_trim+0x1dc>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d301      	bcc.n	800d9fc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	e0af      	b.n	800db5c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	3b08      	subs	r3, #8
 800da00:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800da02:	69b8      	ldr	r0, [r7, #24]
 800da04:	f7ff fe2c 	bl	800d660 <mem_to_ptr>
 800da08:	4603      	mov	r3, r0
 800da0a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	881a      	ldrh	r2, [r3, #0]
 800da10:	8afb      	ldrh	r3, [r7, #22]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	b29b      	uxth	r3, r3
 800da16:	3b08      	subs	r3, #8
 800da18:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800da1a:	8bfa      	ldrh	r2, [r7, #30]
 800da1c:	8abb      	ldrh	r3, [r7, #20]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d906      	bls.n	800da30 <mem_trim+0xa4>
 800da22:	4b52      	ldr	r3, [pc, #328]	; (800db6c <mem_trim+0x1e0>)
 800da24:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800da28:	4953      	ldr	r1, [pc, #332]	; (800db78 <mem_trim+0x1ec>)
 800da2a:	4852      	ldr	r0, [pc, #328]	; (800db74 <mem_trim+0x1e8>)
 800da2c:	f00a fa3e 	bl	8017eac <iprintf>
  if (newsize > size) {
 800da30:	8bfa      	ldrh	r2, [r7, #30]
 800da32:	8abb      	ldrh	r3, [r7, #20]
 800da34:	429a      	cmp	r2, r3
 800da36:	d901      	bls.n	800da3c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800da38:	2300      	movs	r3, #0
 800da3a:	e08f      	b.n	800db5c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800da3c:	8bfa      	ldrh	r2, [r7, #30]
 800da3e:	8abb      	ldrh	r3, [r7, #20]
 800da40:	429a      	cmp	r2, r3
 800da42:	d101      	bne.n	800da48 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	e089      	b.n	800db5c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	881b      	ldrh	r3, [r3, #0]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff fdf5 	bl	800d63c <ptr_to_mem>
 800da52:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	791b      	ldrb	r3, [r3, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d13f      	bne.n	800dadc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800da64:	d106      	bne.n	800da74 <mem_trim+0xe8>
 800da66:	4b41      	ldr	r3, [pc, #260]	; (800db6c <mem_trim+0x1e0>)
 800da68:	f240 22f5 	movw	r2, #757	; 0x2f5
 800da6c:	4943      	ldr	r1, [pc, #268]	; (800db7c <mem_trim+0x1f0>)
 800da6e:	4841      	ldr	r0, [pc, #260]	; (800db74 <mem_trim+0x1e8>)
 800da70:	f00a fa1c 	bl	8017eac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	881b      	ldrh	r3, [r3, #0]
 800da78:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800da7a:	8afa      	ldrh	r2, [r7, #22]
 800da7c:	8bfb      	ldrh	r3, [r7, #30]
 800da7e:	4413      	add	r3, r2
 800da80:	b29b      	uxth	r3, r3
 800da82:	3308      	adds	r3, #8
 800da84:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800da86:	4b3e      	ldr	r3, [pc, #248]	; (800db80 <mem_trim+0x1f4>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	693a      	ldr	r2, [r7, #16]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d106      	bne.n	800da9e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800da90:	89fb      	ldrh	r3, [r7, #14]
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fdd2 	bl	800d63c <ptr_to_mem>
 800da98:	4603      	mov	r3, r0
 800da9a:	4a39      	ldr	r2, [pc, #228]	; (800db80 <mem_trim+0x1f4>)
 800da9c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800da9e:	89fb      	ldrh	r3, [r7, #14]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fdcb 	bl	800d63c <ptr_to_mem>
 800daa6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	2200      	movs	r2, #0
 800daac:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	89ba      	ldrh	r2, [r7, #12]
 800dab2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	8afa      	ldrh	r2, [r7, #22]
 800dab8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	89fa      	ldrh	r2, [r7, #14]
 800dabe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dac8:	d047      	beq.n	800db5a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	881b      	ldrh	r3, [r3, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f7ff fdb4 	bl	800d63c <ptr_to_mem>
 800dad4:	4602      	mov	r2, r0
 800dad6:	89fb      	ldrh	r3, [r7, #14]
 800dad8:	8053      	strh	r3, [r2, #2]
 800dada:	e03e      	b.n	800db5a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800dadc:	8bfb      	ldrh	r3, [r7, #30]
 800dade:	f103 0214 	add.w	r2, r3, #20
 800dae2:	8abb      	ldrh	r3, [r7, #20]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d838      	bhi.n	800db5a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dae8:	8afa      	ldrh	r2, [r7, #22]
 800daea:	8bfb      	ldrh	r3, [r7, #30]
 800daec:	4413      	add	r3, r2
 800daee:	b29b      	uxth	r3, r3
 800daf0:	3308      	adds	r3, #8
 800daf2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	881b      	ldrh	r3, [r3, #0]
 800daf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dafc:	d106      	bne.n	800db0c <mem_trim+0x180>
 800dafe:	4b1b      	ldr	r3, [pc, #108]	; (800db6c <mem_trim+0x1e0>)
 800db00:	f240 3216 	movw	r2, #790	; 0x316
 800db04:	491d      	ldr	r1, [pc, #116]	; (800db7c <mem_trim+0x1f0>)
 800db06:	481b      	ldr	r0, [pc, #108]	; (800db74 <mem_trim+0x1e8>)
 800db08:	f00a f9d0 	bl	8017eac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800db0c:	89fb      	ldrh	r3, [r7, #14]
 800db0e:	4618      	mov	r0, r3
 800db10:	f7ff fd94 	bl	800d63c <ptr_to_mem>
 800db14:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800db16:	4b1a      	ldr	r3, [pc, #104]	; (800db80 <mem_trim+0x1f4>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	693a      	ldr	r2, [r7, #16]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d202      	bcs.n	800db26 <mem_trim+0x19a>
      lfree = mem2;
 800db20:	4a17      	ldr	r2, [pc, #92]	; (800db80 <mem_trim+0x1f4>)
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	2200      	movs	r2, #0
 800db2a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	881a      	ldrh	r2, [r3, #0]
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	8afa      	ldrh	r2, [r7, #22]
 800db38:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	89fa      	ldrh	r2, [r7, #14]
 800db3e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db48:	d007      	beq.n	800db5a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	881b      	ldrh	r3, [r3, #0]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff fd74 	bl	800d63c <ptr_to_mem>
 800db54:	4602      	mov	r2, r0
 800db56:	89fb      	ldrh	r3, [r7, #14]
 800db58:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800db5a:	687b      	ldr	r3, [r7, #4]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3720      	adds	r7, #32
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	20000a00 	.word	0x20000a00
 800db68:	20000a04 	.word	0x20000a04
 800db6c:	0801a8a4 	.word	0x0801a8a4
 800db70:	0801aa14 	.word	0x0801aa14
 800db74:	0801a8ec 	.word	0x0801a8ec
 800db78:	0801aa2c 	.word	0x0801aa2c
 800db7c:	0801aa4c 	.word	0x0801aa4c
 800db80:	20000a08 	.word	0x20000a08

0800db84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b088      	sub	sp, #32
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800db8e:	88fb      	ldrh	r3, [r7, #6]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <mem_malloc+0x14>
    return NULL;
 800db94:	2300      	movs	r3, #0
 800db96:	e0d9      	b.n	800dd4c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800db98:	88fb      	ldrh	r3, [r7, #6]
 800db9a:	3303      	adds	r3, #3
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	f023 0303 	bic.w	r3, r3, #3
 800dba2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dba4:	8bbb      	ldrh	r3, [r7, #28]
 800dba6:	2b0b      	cmp	r3, #11
 800dba8:	d801      	bhi.n	800dbae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dbaa:	230c      	movs	r3, #12
 800dbac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dbae:	8bbb      	ldrh	r3, [r7, #28]
 800dbb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dbb4:	d803      	bhi.n	800dbbe <mem_malloc+0x3a>
 800dbb6:	8bba      	ldrh	r2, [r7, #28]
 800dbb8:	88fb      	ldrh	r3, [r7, #6]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d201      	bcs.n	800dbc2 <mem_malloc+0x3e>
    return NULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e0c4      	b.n	800dd4c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dbc2:	4b64      	ldr	r3, [pc, #400]	; (800dd54 <mem_malloc+0x1d0>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7ff fd4a 	bl	800d660 <mem_to_ptr>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	83fb      	strh	r3, [r7, #30]
 800dbd0:	e0b4      	b.n	800dd3c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800dbd2:	8bfb      	ldrh	r3, [r7, #30]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff fd31 	bl	800d63c <ptr_to_mem>
 800dbda:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	791b      	ldrb	r3, [r3, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f040 80a4 	bne.w	800dd2e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	881b      	ldrh	r3, [r3, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	8bfb      	ldrh	r3, [r7, #30]
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	f1a3 0208 	sub.w	r2, r3, #8
 800dbf4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	f0c0 8099 	bcc.w	800dd2e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	881b      	ldrh	r3, [r3, #0]
 800dc00:	461a      	mov	r2, r3
 800dc02:	8bfb      	ldrh	r3, [r7, #30]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	f1a3 0208 	sub.w	r2, r3, #8
 800dc0a:	8bbb      	ldrh	r3, [r7, #28]
 800dc0c:	3314      	adds	r3, #20
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d333      	bcc.n	800dc7a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dc12:	8bfa      	ldrh	r2, [r7, #30]
 800dc14:	8bbb      	ldrh	r3, [r7, #28]
 800dc16:	4413      	add	r3, r2
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dc1e:	8a7b      	ldrh	r3, [r7, #18]
 800dc20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc24:	d106      	bne.n	800dc34 <mem_malloc+0xb0>
 800dc26:	4b4c      	ldr	r3, [pc, #304]	; (800dd58 <mem_malloc+0x1d4>)
 800dc28:	f240 3287 	movw	r2, #903	; 0x387
 800dc2c:	494b      	ldr	r1, [pc, #300]	; (800dd5c <mem_malloc+0x1d8>)
 800dc2e:	484c      	ldr	r0, [pc, #304]	; (800dd60 <mem_malloc+0x1dc>)
 800dc30:	f00a f93c 	bl	8017eac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dc34:	8a7b      	ldrh	r3, [r7, #18]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff fd00 	bl	800d63c <ptr_to_mem>
 800dc3c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	881a      	ldrh	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	8bfa      	ldrh	r2, [r7, #30]
 800dc50:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	8a7a      	ldrh	r2, [r7, #18]
 800dc56:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc66:	d00b      	beq.n	800dc80 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	881b      	ldrh	r3, [r3, #0]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7ff fce5 	bl	800d63c <ptr_to_mem>
 800dc72:	4602      	mov	r2, r0
 800dc74:	8a7b      	ldrh	r3, [r7, #18]
 800dc76:	8053      	strh	r3, [r2, #2]
 800dc78:	e002      	b.n	800dc80 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800dc80:	4b34      	ldr	r3, [pc, #208]	; (800dd54 <mem_malloc+0x1d0>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	697a      	ldr	r2, [r7, #20]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d127      	bne.n	800dcda <mem_malloc+0x156>
          struct mem *cur = lfree;
 800dc8a:	4b32      	ldr	r3, [pc, #200]	; (800dd54 <mem_malloc+0x1d0>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800dc90:	e005      	b.n	800dc9e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff fcd0 	bl	800d63c <ptr_to_mem>
 800dc9c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	791b      	ldrb	r3, [r3, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d004      	beq.n	800dcb0 <mem_malloc+0x12c>
 800dca6:	4b2f      	ldr	r3, [pc, #188]	; (800dd64 <mem_malloc+0x1e0>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	69ba      	ldr	r2, [r7, #24]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d1f0      	bne.n	800dc92 <mem_malloc+0x10e>
          }
          lfree = cur;
 800dcb0:	4a28      	ldr	r2, [pc, #160]	; (800dd54 <mem_malloc+0x1d0>)
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800dcb6:	4b27      	ldr	r3, [pc, #156]	; (800dd54 <mem_malloc+0x1d0>)
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	4b2a      	ldr	r3, [pc, #168]	; (800dd64 <mem_malloc+0x1e0>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d00b      	beq.n	800dcda <mem_malloc+0x156>
 800dcc2:	4b24      	ldr	r3, [pc, #144]	; (800dd54 <mem_malloc+0x1d0>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	791b      	ldrb	r3, [r3, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d006      	beq.n	800dcda <mem_malloc+0x156>
 800dccc:	4b22      	ldr	r3, [pc, #136]	; (800dd58 <mem_malloc+0x1d4>)
 800dcce:	f240 32b5 	movw	r2, #949	; 0x3b5
 800dcd2:	4925      	ldr	r1, [pc, #148]	; (800dd68 <mem_malloc+0x1e4>)
 800dcd4:	4822      	ldr	r0, [pc, #136]	; (800dd60 <mem_malloc+0x1dc>)
 800dcd6:	f00a f8e9 	bl	8017eac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dcda:	8bba      	ldrh	r2, [r7, #28]
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	4413      	add	r3, r2
 800dce0:	3308      	adds	r3, #8
 800dce2:	4a20      	ldr	r2, [pc, #128]	; (800dd64 <mem_malloc+0x1e0>)
 800dce4:	6812      	ldr	r2, [r2, #0]
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d906      	bls.n	800dcf8 <mem_malloc+0x174>
 800dcea:	4b1b      	ldr	r3, [pc, #108]	; (800dd58 <mem_malloc+0x1d4>)
 800dcec:	f240 32b9 	movw	r2, #953	; 0x3b9
 800dcf0:	491e      	ldr	r1, [pc, #120]	; (800dd6c <mem_malloc+0x1e8>)
 800dcf2:	481b      	ldr	r0, [pc, #108]	; (800dd60 <mem_malloc+0x1dc>)
 800dcf4:	f00a f8da 	bl	8017eac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	f003 0303 	and.w	r3, r3, #3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d006      	beq.n	800dd10 <mem_malloc+0x18c>
 800dd02:	4b15      	ldr	r3, [pc, #84]	; (800dd58 <mem_malloc+0x1d4>)
 800dd04:	f240 32bb 	movw	r2, #955	; 0x3bb
 800dd08:	4919      	ldr	r1, [pc, #100]	; (800dd70 <mem_malloc+0x1ec>)
 800dd0a:	4815      	ldr	r0, [pc, #84]	; (800dd60 <mem_malloc+0x1dc>)
 800dd0c:	f00a f8ce 	bl	8017eac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	f003 0303 	and.w	r3, r3, #3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d006      	beq.n	800dd28 <mem_malloc+0x1a4>
 800dd1a:	4b0f      	ldr	r3, [pc, #60]	; (800dd58 <mem_malloc+0x1d4>)
 800dd1c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800dd20:	4914      	ldr	r1, [pc, #80]	; (800dd74 <mem_malloc+0x1f0>)
 800dd22:	480f      	ldr	r0, [pc, #60]	; (800dd60 <mem_malloc+0x1dc>)
 800dd24:	f00a f8c2 	bl	8017eac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	3308      	adds	r3, #8
 800dd2c:	e00e      	b.n	800dd4c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800dd2e:	8bfb      	ldrh	r3, [r7, #30]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff fc83 	bl	800d63c <ptr_to_mem>
 800dd36:	4603      	mov	r3, r0
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dd3c:	8bfa      	ldrh	r2, [r7, #30]
 800dd3e:	8bbb      	ldrh	r3, [r7, #28]
 800dd40:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800dd44:	429a      	cmp	r2, r3
 800dd46:	f4ff af44 	bcc.w	800dbd2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dd4a:	2300      	movs	r3, #0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3720      	adds	r7, #32
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	20000a08 	.word	0x20000a08
 800dd58:	0801a8a4 	.word	0x0801a8a4
 800dd5c:	0801aa4c 	.word	0x0801aa4c
 800dd60:	0801a8ec 	.word	0x0801a8ec
 800dd64:	20000a04 	.word	0x20000a04
 800dd68:	0801aa60 	.word	0x0801aa60
 800dd6c:	0801aa7c 	.word	0x0801aa7c
 800dd70:	0801aaac 	.word	0x0801aaac
 800dd74:	0801aadc 	.word	0x0801aadc

0800dd78 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	2200      	movs	r2, #0
 800dd86:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	3303      	adds	r3, #3
 800dd8e:	f023 0303 	bic.w	r3, r3, #3
 800dd92:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800dd94:	2300      	movs	r3, #0
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	e011      	b.n	800ddbe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	68ba      	ldr	r2, [r7, #8]
 800ddaa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	3301      	adds	r3, #1
 800ddbc:	60fb      	str	r3, [r7, #12]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	885b      	ldrh	r3, [r3, #2]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	dbe7      	blt.n	800dd9a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ddca:	bf00      	nop
 800ddcc:	bf00      	nop
 800ddce:	3714      	adds	r7, #20
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ddde:	2300      	movs	r3, #0
 800dde0:	80fb      	strh	r3, [r7, #6]
 800dde2:	e009      	b.n	800ddf8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800dde4:	88fb      	ldrh	r3, [r7, #6]
 800dde6:	4a08      	ldr	r2, [pc, #32]	; (800de08 <memp_init+0x30>)
 800dde8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7ff ffc3 	bl	800dd78 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ddf2:	88fb      	ldrh	r3, [r7, #6]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	80fb      	strh	r3, [r7, #6]
 800ddf8:	88fb      	ldrh	r3, [r7, #6]
 800ddfa:	2b08      	cmp	r3, #8
 800ddfc:	d9f2      	bls.n	800dde4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ddfe:	bf00      	nop
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	08024264 	.word	0x08024264

0800de0c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d012      	beq.n	800de48 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	6812      	ldr	r2, [r2, #0]
 800de2a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f003 0303 	and.w	r3, r3, #3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d006      	beq.n	800de44 <do_memp_malloc_pool+0x38>
 800de36:	4b07      	ldr	r3, [pc, #28]	; (800de54 <do_memp_malloc_pool+0x48>)
 800de38:	f44f 728c 	mov.w	r2, #280	; 0x118
 800de3c:	4906      	ldr	r1, [pc, #24]	; (800de58 <do_memp_malloc_pool+0x4c>)
 800de3e:	4807      	ldr	r0, [pc, #28]	; (800de5c <do_memp_malloc_pool+0x50>)
 800de40:	f00a f834 	bl	8017eac <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	e000      	b.n	800de4a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	0801ab00 	.word	0x0801ab00
 800de58:	0801ab30 	.word	0x0801ab30
 800de5c:	0801ab54 	.word	0x0801ab54

0800de60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	4603      	mov	r3, r0
 800de68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800de6a:	79fb      	ldrb	r3, [r7, #7]
 800de6c:	2b08      	cmp	r3, #8
 800de6e:	d908      	bls.n	800de82 <memp_malloc+0x22>
 800de70:	4b0a      	ldr	r3, [pc, #40]	; (800de9c <memp_malloc+0x3c>)
 800de72:	f240 1257 	movw	r2, #343	; 0x157
 800de76:	490a      	ldr	r1, [pc, #40]	; (800dea0 <memp_malloc+0x40>)
 800de78:	480a      	ldr	r0, [pc, #40]	; (800dea4 <memp_malloc+0x44>)
 800de7a:	f00a f817 	bl	8017eac <iprintf>
 800de7e:	2300      	movs	r3, #0
 800de80:	e008      	b.n	800de94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	4a08      	ldr	r2, [pc, #32]	; (800dea8 <memp_malloc+0x48>)
 800de86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7ff ffbe 	bl	800de0c <do_memp_malloc_pool>
 800de90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800de92:	68fb      	ldr	r3, [r7, #12]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	0801ab00 	.word	0x0801ab00
 800dea0:	0801ab90 	.word	0x0801ab90
 800dea4:	0801ab54 	.word	0x0801ab54
 800dea8:	08024264 	.word	0x08024264

0800deac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	f003 0303 	and.w	r3, r3, #3
 800debc:	2b00      	cmp	r3, #0
 800debe:	d006      	beq.n	800dece <do_memp_free_pool+0x22>
 800dec0:	4b0a      	ldr	r3, [pc, #40]	; (800deec <do_memp_free_pool+0x40>)
 800dec2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dec6:	490a      	ldr	r1, [pc, #40]	; (800def0 <do_memp_free_pool+0x44>)
 800dec8:	480a      	ldr	r0, [pc, #40]	; (800def4 <do_memp_free_pool+0x48>)
 800deca:	f009 ffef 	bl	8017eac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800dee4:	bf00      	nop
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	0801ab00 	.word	0x0801ab00
 800def0:	0801abb0 	.word	0x0801abb0
 800def4:	0801ab54 	.word	0x0801ab54

0800def8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	4603      	mov	r3, r0
 800df00:	6039      	str	r1, [r7, #0]
 800df02:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	2b08      	cmp	r3, #8
 800df08:	d907      	bls.n	800df1a <memp_free+0x22>
 800df0a:	4b0c      	ldr	r3, [pc, #48]	; (800df3c <memp_free+0x44>)
 800df0c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800df10:	490b      	ldr	r1, [pc, #44]	; (800df40 <memp_free+0x48>)
 800df12:	480c      	ldr	r0, [pc, #48]	; (800df44 <memp_free+0x4c>)
 800df14:	f009 ffca 	bl	8017eac <iprintf>
 800df18:	e00c      	b.n	800df34 <memp_free+0x3c>

  if (mem == NULL) {
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d008      	beq.n	800df32 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800df20:	79fb      	ldrb	r3, [r7, #7]
 800df22:	4a09      	ldr	r2, [pc, #36]	; (800df48 <memp_free+0x50>)
 800df24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df28:	6839      	ldr	r1, [r7, #0]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7ff ffbe 	bl	800deac <do_memp_free_pool>
 800df30:	e000      	b.n	800df34 <memp_free+0x3c>
    return;
 800df32:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800df34:	3708      	adds	r7, #8
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	0801ab00 	.word	0x0801ab00
 800df40:	0801abd0 	.word	0x0801abd0
 800df44:	0801ab54 	.word	0x0801ab54
 800df48:	08024264 	.word	0x08024264

0800df4c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800df4c:	b480      	push	{r7}
 800df4e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800df50:	bf00      	nop
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
	...

0800df5c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b086      	sub	sp, #24
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
 800df68:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d108      	bne.n	800df82 <netif_add+0x26>
 800df70:	4b57      	ldr	r3, [pc, #348]	; (800e0d0 <netif_add+0x174>)
 800df72:	f240 1227 	movw	r2, #295	; 0x127
 800df76:	4957      	ldr	r1, [pc, #348]	; (800e0d4 <netif_add+0x178>)
 800df78:	4857      	ldr	r0, [pc, #348]	; (800e0d8 <netif_add+0x17c>)
 800df7a:	f009 ff97 	bl	8017eac <iprintf>
 800df7e:	2300      	movs	r3, #0
 800df80:	e0a2      	b.n	800e0c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	d108      	bne.n	800df9a <netif_add+0x3e>
 800df88:	4b51      	ldr	r3, [pc, #324]	; (800e0d0 <netif_add+0x174>)
 800df8a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800df8e:	4953      	ldr	r1, [pc, #332]	; (800e0dc <netif_add+0x180>)
 800df90:	4851      	ldr	r0, [pc, #324]	; (800e0d8 <netif_add+0x17c>)
 800df92:	f009 ff8b 	bl	8017eac <iprintf>
 800df96:	2300      	movs	r3, #0
 800df98:	e096      	b.n	800e0c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dfa0:	4b4f      	ldr	r3, [pc, #316]	; (800e0e0 <netif_add+0x184>)
 800dfa2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dfaa:	4b4d      	ldr	r3, [pc, #308]	; (800e0e0 <netif_add+0x184>)
 800dfac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dfb4:	4b4a      	ldr	r3, [pc, #296]	; (800e0e0 <netif_add+0x184>)
 800dfb6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	4a45      	ldr	r2, [pc, #276]	; (800e0e4 <netif_add+0x188>)
 800dfce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6a3a      	ldr	r2, [r7, #32]
 800dfe8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dfea:	4b3f      	ldr	r3, [pc, #252]	; (800e0e8 <netif_add+0x18c>)
 800dfec:	781a      	ldrb	r2, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dff8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	68b9      	ldr	r1, [r7, #8]
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f000 f913 	bl	800e22c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	4798      	blx	r3
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <netif_add+0xba>
    return NULL;
 800e012:	2300      	movs	r3, #0
 800e014:	e058      	b.n	800e0c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e01c:	2bff      	cmp	r3, #255	; 0xff
 800e01e:	d103      	bne.n	800e028 <netif_add+0xcc>
        netif->num = 0;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800e028:	2300      	movs	r3, #0
 800e02a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e02c:	4b2f      	ldr	r3, [pc, #188]	; (800e0ec <netif_add+0x190>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	617b      	str	r3, [r7, #20]
 800e032:	e02b      	b.n	800e08c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e034:	697a      	ldr	r2, [r7, #20]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d106      	bne.n	800e04a <netif_add+0xee>
 800e03c:	4b24      	ldr	r3, [pc, #144]	; (800e0d0 <netif_add+0x174>)
 800e03e:	f240 128b 	movw	r2, #395	; 0x18b
 800e042:	492b      	ldr	r1, [pc, #172]	; (800e0f0 <netif_add+0x194>)
 800e044:	4824      	ldr	r0, [pc, #144]	; (800e0d8 <netif_add+0x17c>)
 800e046:	f009 ff31 	bl	8017eac <iprintf>
        num_netifs++;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	3301      	adds	r3, #1
 800e04e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2bff      	cmp	r3, #255	; 0xff
 800e054:	dd06      	ble.n	800e064 <netif_add+0x108>
 800e056:	4b1e      	ldr	r3, [pc, #120]	; (800e0d0 <netif_add+0x174>)
 800e058:	f240 128d 	movw	r2, #397	; 0x18d
 800e05c:	4925      	ldr	r1, [pc, #148]	; (800e0f4 <netif_add+0x198>)
 800e05e:	481e      	ldr	r0, [pc, #120]	; (800e0d8 <netif_add+0x17c>)
 800e060:	f009 ff24 	bl	8017eac <iprintf>
        if (netif2->num == netif->num) {
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e070:	429a      	cmp	r2, r3
 800e072:	d108      	bne.n	800e086 <netif_add+0x12a>
          netif->num++;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e07a:	3301      	adds	r3, #1
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e084:	e005      	b.n	800e092 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	617b      	str	r3, [r7, #20]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1d0      	bne.n	800e034 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1be      	bne.n	800e016 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e09e:	2bfe      	cmp	r3, #254	; 0xfe
 800e0a0:	d103      	bne.n	800e0aa <netif_add+0x14e>
    netif_num = 0;
 800e0a2:	4b11      	ldr	r3, [pc, #68]	; (800e0e8 <netif_add+0x18c>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	701a      	strb	r2, [r3, #0]
 800e0a8:	e006      	b.n	800e0b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <netif_add+0x18c>)
 800e0b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e0b8:	4b0c      	ldr	r3, [pc, #48]	; (800e0ec <netif_add+0x190>)
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e0c0:	4a0a      	ldr	r2, [pc, #40]	; (800e0ec <netif_add+0x190>)
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	0801abec 	.word	0x0801abec
 800e0d4:	0801ac80 	.word	0x0801ac80
 800e0d8:	0801ac3c 	.word	0x0801ac3c
 800e0dc:	0801ac9c 	.word	0x0801ac9c
 800e0e0:	080242c8 	.word	0x080242c8
 800e0e4:	0800e43f 	.word	0x0800e43f
 800e0e8:	20000a30 	.word	0x20000a30
 800e0ec:	2000fb00 	.word	0x2000fb00
 800e0f0:	0801acc0 	.word	0x0801acc0
 800e0f4:	0801acd4 	.word	0x0801acd4

0800e0f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e102:	6839      	ldr	r1, [r7, #0]
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f002 fd85 	bl	8010c14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e10a:	6839      	ldr	r1, [r7, #0]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f007 fabd 	bl	801568c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e112:	bf00      	nop
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b086      	sub	sp, #24
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d106      	bne.n	800e13c <netif_do_set_ipaddr+0x20>
 800e12e:	4b1d      	ldr	r3, [pc, #116]	; (800e1a4 <netif_do_set_ipaddr+0x88>)
 800e130:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e134:	491c      	ldr	r1, [pc, #112]	; (800e1a8 <netif_do_set_ipaddr+0x8c>)
 800e136:	481d      	ldr	r0, [pc, #116]	; (800e1ac <netif_do_set_ipaddr+0x90>)
 800e138:	f009 feb8 	bl	8017eac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d106      	bne.n	800e150 <netif_do_set_ipaddr+0x34>
 800e142:	4b18      	ldr	r3, [pc, #96]	; (800e1a4 <netif_do_set_ipaddr+0x88>)
 800e144:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e148:	4917      	ldr	r1, [pc, #92]	; (800e1a8 <netif_do_set_ipaddr+0x8c>)
 800e14a:	4818      	ldr	r0, [pc, #96]	; (800e1ac <netif_do_set_ipaddr+0x90>)
 800e14c:	f009 feae 	bl	8017eac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	3304      	adds	r3, #4
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d01c      	beq.n	800e198 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	3304      	adds	r3, #4
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e16e:	f107 0314 	add.w	r3, r7, #20
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff ffbf 	bl	800e0f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d002      	beq.n	800e186 <netif_do_set_ipaddr+0x6a>
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	e000      	b.n	800e188 <netif_do_set_ipaddr+0x6c>
 800e186:	2300      	movs	r3, #0
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e18c:	2101      	movs	r1, #1
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f000 f8d2 	bl	800e338 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e194:	2301      	movs	r3, #1
 800e196:	e000      	b.n	800e19a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	0801abec 	.word	0x0801abec
 800e1a8:	0801ad04 	.word	0x0801ad04
 800e1ac:	0801ac3c 	.word	0x0801ac3c

0800e1b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	3308      	adds	r3, #8
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d00a      	beq.n	800e1e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d002      	beq.n	800e1d6 <netif_do_set_netmask+0x26>
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	e000      	b.n	800e1d8 <netif_do_set_netmask+0x28>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e000      	b.n	800e1e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3714      	adds	r7, #20
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr

0800e1ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e1ee:	b480      	push	{r7}
 800e1f0:	b085      	sub	sp, #20
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	60f8      	str	r0, [r7, #12]
 800e1f6:	60b9      	str	r1, [r7, #8]
 800e1f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	330c      	adds	r3, #12
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	429a      	cmp	r2, r3
 800e206:	d00a      	beq.n	800e21e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d002      	beq.n	800e214 <netif_do_set_gw+0x26>
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	e000      	b.n	800e216 <netif_do_set_gw+0x28>
 800e214:	2300      	movs	r3, #0
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e21a:	2301      	movs	r3, #1
 800e21c:	e000      	b.n	800e220 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
 800e238:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e23a:	2300      	movs	r3, #0
 800e23c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e23e:	2300      	movs	r3, #0
 800e240:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d101      	bne.n	800e24c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e248:	4b1c      	ldr	r3, [pc, #112]	; (800e2bc <netif_set_addr+0x90>)
 800e24a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d101      	bne.n	800e256 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e252:	4b1a      	ldr	r3, [pc, #104]	; (800e2bc <netif_set_addr+0x90>)
 800e254:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e25c:	4b17      	ldr	r3, [pc, #92]	; (800e2bc <netif_set_addr+0x90>)
 800e25e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d003      	beq.n	800e26e <netif_set_addr+0x42>
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d101      	bne.n	800e272 <netif_set_addr+0x46>
 800e26e:	2301      	movs	r3, #1
 800e270:	e000      	b.n	800e274 <netif_set_addr+0x48>
 800e272:	2300      	movs	r3, #0
 800e274:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d006      	beq.n	800e28a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e27c:	f107 0310 	add.w	r3, r7, #16
 800e280:	461a      	mov	r2, r3
 800e282:	68b9      	ldr	r1, [r7, #8]
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f7ff ff49 	bl	800e11c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e28a:	69fa      	ldr	r2, [r7, #28]
 800e28c:	6879      	ldr	r1, [r7, #4]
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f7ff ff8e 	bl	800e1b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e294:	69ba      	ldr	r2, [r7, #24]
 800e296:	6839      	ldr	r1, [r7, #0]
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f7ff ffa8 	bl	800e1ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d106      	bne.n	800e2b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e2a4:	f107 0310 	add.w	r3, r7, #16
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	68b9      	ldr	r1, [r7, #8]
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f7ff ff35 	bl	800e11c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e2b2:	bf00      	nop
 800e2b4:	3720      	adds	r7, #32
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	080242c8 	.word	0x080242c8

0800e2c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e2c8:	4a04      	ldr	r2, [pc, #16]	; (800e2dc <netif_set_default+0x1c>)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e2ce:	bf00      	nop
 800e2d0:	370c      	adds	r7, #12
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	2000fb04 	.word	0x2000fb04

0800e2e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d107      	bne.n	800e2fe <netif_set_up+0x1e>
 800e2ee:	4b0f      	ldr	r3, [pc, #60]	; (800e32c <netif_set_up+0x4c>)
 800e2f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e2f4:	490e      	ldr	r1, [pc, #56]	; (800e330 <netif_set_up+0x50>)
 800e2f6:	480f      	ldr	r0, [pc, #60]	; (800e334 <netif_set_up+0x54>)
 800e2f8:	f009 fdd8 	bl	8017eac <iprintf>
 800e2fc:	e013      	b.n	800e326 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e304:	f003 0301 	and.w	r3, r3, #1
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10c      	bne.n	800e326 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e312:	f043 0301 	orr.w	r3, r3, #1
 800e316:	b2da      	uxtb	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e31e:	2103      	movs	r1, #3
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 f809 	bl	800e338 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	0801abec 	.word	0x0801abec
 800e330:	0801ad74 	.word	0x0801ad74
 800e334:	0801ac3c 	.word	0x0801ac3c

0800e338 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d106      	bne.n	800e358 <netif_issue_reports+0x20>
 800e34a:	4b18      	ldr	r3, [pc, #96]	; (800e3ac <netif_issue_reports+0x74>)
 800e34c:	f240 326d 	movw	r2, #877	; 0x36d
 800e350:	4917      	ldr	r1, [pc, #92]	; (800e3b0 <netif_issue_reports+0x78>)
 800e352:	4818      	ldr	r0, [pc, #96]	; (800e3b4 <netif_issue_reports+0x7c>)
 800e354:	f009 fdaa 	bl	8017eac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e35e:	f003 0304 	and.w	r3, r3, #4
 800e362:	2b00      	cmp	r3, #0
 800e364:	d01e      	beq.n	800e3a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e36c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e370:	2b00      	cmp	r3, #0
 800e372:	d017      	beq.n	800e3a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e374:	78fb      	ldrb	r3, [r7, #3]
 800e376:	f003 0301 	and.w	r3, r3, #1
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d013      	beq.n	800e3a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	3304      	adds	r3, #4
 800e382:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00e      	beq.n	800e3a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e38e:	f003 0308 	and.w	r3, r3, #8
 800e392:	2b00      	cmp	r3, #0
 800e394:	d007      	beq.n	800e3a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3304      	adds	r3, #4
 800e39a:	4619      	mov	r1, r3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f008 f8df 	bl	8016560 <etharp_request>
 800e3a2:	e000      	b.n	800e3a6 <netif_issue_reports+0x6e>
    return;
 800e3a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e3a6:	3708      	adds	r7, #8
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	0801abec 	.word	0x0801abec
 800e3b0:	0801ad90 	.word	0x0801ad90
 800e3b4:	0801ac3c 	.word	0x0801ac3c

0800e3b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d107      	bne.n	800e3d6 <netif_set_down+0x1e>
 800e3c6:	4b12      	ldr	r3, [pc, #72]	; (800e410 <netif_set_down+0x58>)
 800e3c8:	f240 329b 	movw	r2, #923	; 0x39b
 800e3cc:	4911      	ldr	r1, [pc, #68]	; (800e414 <netif_set_down+0x5c>)
 800e3ce:	4812      	ldr	r0, [pc, #72]	; (800e418 <netif_set_down+0x60>)
 800e3d0:	f009 fd6c 	bl	8017eac <iprintf>
 800e3d4:	e019      	b.n	800e40a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d012      	beq.n	800e40a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3ea:	f023 0301 	bic.w	r3, r3, #1
 800e3ee:	b2da      	uxtb	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3fc:	f003 0308 	and.w	r3, r3, #8
 800e400:	2b00      	cmp	r3, #0
 800e402:	d002      	beq.n	800e40a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f007 fc69 	bl	8015cdc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	0801abec 	.word	0x0801abec
 800e414:	0801adb4 	.word	0x0801adb4
 800e418:	0801ac3c 	.word	0x0801ac3c

0800e41c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d002      	beq.n	800e432 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	683a      	ldr	r2, [r7, #0]
 800e430:	61da      	str	r2, [r3, #28]
  }
}
 800e432:	bf00      	nop
 800e434:	370c      	adds	r7, #12
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr

0800e43e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e43e:	b480      	push	{r7}
 800e440:	b085      	sub	sp, #20
 800e442:	af00      	add	r7, sp, #0
 800e444:	60f8      	str	r0, [r7, #12]
 800e446:	60b9      	str	r1, [r7, #8]
 800e448:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e44a:	f06f 030b 	mvn.w	r3, #11
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
	...

0800e45c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e466:	79fb      	ldrb	r3, [r7, #7]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d013      	beq.n	800e494 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e46c:	4b0d      	ldr	r3, [pc, #52]	; (800e4a4 <netif_get_by_index+0x48>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	60fb      	str	r3, [r7, #12]
 800e472:	e00c      	b.n	800e48e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e47a:	3301      	adds	r3, #1
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	79fa      	ldrb	r2, [r7, #7]
 800e480:	429a      	cmp	r2, r3
 800e482:	d101      	bne.n	800e488 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	e006      	b.n	800e496 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1ef      	bne.n	800e474 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3714      	adds	r7, #20
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	2000fb00 	.word	0x2000fb00

0800e4a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e4ae:	4b0c      	ldr	r3, [pc, #48]	; (800e4e0 <pbuf_free_ooseq+0x38>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e4b4:	4b0b      	ldr	r3, [pc, #44]	; (800e4e4 <pbuf_free_ooseq+0x3c>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	607b      	str	r3, [r7, #4]
 800e4ba:	e00a      	b.n	800e4d2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d003      	beq.n	800e4cc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f002 fbe3 	bl	8010c90 <tcp_free_ooseq>
      return;
 800e4ca:	e005      	b.n	800e4d8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	607b      	str	r3, [r7, #4]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1f1      	bne.n	800e4bc <pbuf_free_ooseq+0x14>
    }
  }
}
 800e4d8:	3708      	adds	r7, #8
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	2000fb08 	.word	0x2000fb08
 800e4e4:	2000fb10 	.word	0x2000fb10

0800e4e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800e4ec:	4b03      	ldr	r3, [pc, #12]	; (800e4fc <pbuf_pool_is_empty+0x14>)
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e4f2:	bf00      	nop
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr
 800e4fc:	2000fb08 	.word	0x2000fb08

0800e500 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	4611      	mov	r1, r2
 800e50c:	461a      	mov	r2, r3
 800e50e:	460b      	mov	r3, r1
 800e510:	80fb      	strh	r3, [r7, #6]
 800e512:	4613      	mov	r3, r2
 800e514:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2200      	movs	r2, #0
 800e51a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	68ba      	ldr	r2, [r7, #8]
 800e520:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	88fa      	ldrh	r2, [r7, #6]
 800e526:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	88ba      	ldrh	r2, [r7, #4]
 800e52c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e52e:	8b3b      	ldrh	r3, [r7, #24]
 800e530:	b2da      	uxtb	r2, r3
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	7f3a      	ldrb	r2, [r7, #28]
 800e53a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2201      	movs	r2, #1
 800e540:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	73da      	strb	r2, [r3, #15]
}
 800e548:	bf00      	nop
 800e54a:	3714      	adds	r7, #20
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b08c      	sub	sp, #48	; 0x30
 800e558:	af02      	add	r7, sp, #8
 800e55a:	4603      	mov	r3, r0
 800e55c:	71fb      	strb	r3, [r7, #7]
 800e55e:	460b      	mov	r3, r1
 800e560:	80bb      	strh	r3, [r7, #4]
 800e562:	4613      	mov	r3, r2
 800e564:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e566:	79fb      	ldrb	r3, [r7, #7]
 800e568:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e56a:	887b      	ldrh	r3, [r7, #2]
 800e56c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e570:	d07f      	beq.n	800e672 <pbuf_alloc+0x11e>
 800e572:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e576:	f300 80c8 	bgt.w	800e70a <pbuf_alloc+0x1b6>
 800e57a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e57e:	d010      	beq.n	800e5a2 <pbuf_alloc+0x4e>
 800e580:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e584:	f300 80c1 	bgt.w	800e70a <pbuf_alloc+0x1b6>
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d002      	beq.n	800e592 <pbuf_alloc+0x3e>
 800e58c:	2b41      	cmp	r3, #65	; 0x41
 800e58e:	f040 80bc 	bne.w	800e70a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e592:	887a      	ldrh	r2, [r7, #2]
 800e594:	88bb      	ldrh	r3, [r7, #4]
 800e596:	4619      	mov	r1, r3
 800e598:	2000      	movs	r0, #0
 800e59a:	f000 f8d1 	bl	800e740 <pbuf_alloc_reference>
 800e59e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e5a0:	e0bd      	b.n	800e71e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e5aa:	88bb      	ldrh	r3, [r7, #4]
 800e5ac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e5ae:	2008      	movs	r0, #8
 800e5b0:	f7ff fc56 	bl	800de60 <memp_malloc>
 800e5b4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d109      	bne.n	800e5d0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e5bc:	f7ff ff94 	bl	800e4e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <pbuf_alloc+0x78>
            pbuf_free(p);
 800e5c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5c8:	f000 faa8 	bl	800eb1c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	e0a7      	b.n	800e720 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e5d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5d2:	3303      	adds	r3, #3
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	f023 0303 	bic.w	r3, r3, #3
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	8b7a      	ldrh	r2, [r7, #26]
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	bf28      	it	cs
 800e5e8:	4613      	movcs	r3, r2
 800e5ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e5ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5ee:	3310      	adds	r3, #16
 800e5f0:	693a      	ldr	r2, [r7, #16]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	3303      	adds	r3, #3
 800e5f6:	f023 0303 	bic.w	r3, r3, #3
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	89f9      	ldrh	r1, [r7, #14]
 800e5fe:	8b7a      	ldrh	r2, [r7, #26]
 800e600:	2300      	movs	r3, #0
 800e602:	9301      	str	r3, [sp, #4]
 800e604:	887b      	ldrh	r3, [r7, #2]
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	460b      	mov	r3, r1
 800e60a:	4601      	mov	r1, r0
 800e60c:	6938      	ldr	r0, [r7, #16]
 800e60e:	f7ff ff77 	bl	800e500 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	f003 0303 	and.w	r3, r3, #3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d006      	beq.n	800e62c <pbuf_alloc+0xd8>
 800e61e:	4b42      	ldr	r3, [pc, #264]	; (800e728 <pbuf_alloc+0x1d4>)
 800e620:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e624:	4941      	ldr	r1, [pc, #260]	; (800e72c <pbuf_alloc+0x1d8>)
 800e626:	4842      	ldr	r0, [pc, #264]	; (800e730 <pbuf_alloc+0x1dc>)
 800e628:	f009 fc40 	bl	8017eac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e62c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e62e:	3303      	adds	r3, #3
 800e630:	f023 0303 	bic.w	r3, r3, #3
 800e634:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e638:	d106      	bne.n	800e648 <pbuf_alloc+0xf4>
 800e63a:	4b3b      	ldr	r3, [pc, #236]	; (800e728 <pbuf_alloc+0x1d4>)
 800e63c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e640:	493c      	ldr	r1, [pc, #240]	; (800e734 <pbuf_alloc+0x1e0>)
 800e642:	483b      	ldr	r0, [pc, #236]	; (800e730 <pbuf_alloc+0x1dc>)
 800e644:	f009 fc32 	bl	8017eac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d102      	bne.n	800e654 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	627b      	str	r3, [r7, #36]	; 0x24
 800e652:	e002      	b.n	800e65a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e65e:	8b7a      	ldrh	r2, [r7, #26]
 800e660:	89fb      	ldrh	r3, [r7, #14]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e66a:	8b7b      	ldrh	r3, [r7, #26]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d19e      	bne.n	800e5ae <pbuf_alloc+0x5a>
      break;
 800e670:	e055      	b.n	800e71e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e674:	3303      	adds	r3, #3
 800e676:	b29b      	uxth	r3, r3
 800e678:	f023 0303 	bic.w	r3, r3, #3
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	88bb      	ldrh	r3, [r7, #4]
 800e680:	3303      	adds	r3, #3
 800e682:	b29b      	uxth	r3, r3
 800e684:	f023 0303 	bic.w	r3, r3, #3
 800e688:	b29b      	uxth	r3, r3
 800e68a:	4413      	add	r3, r2
 800e68c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e68e:	8b3b      	ldrh	r3, [r7, #24]
 800e690:	3310      	adds	r3, #16
 800e692:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e694:	8b3a      	ldrh	r2, [r7, #24]
 800e696:	88bb      	ldrh	r3, [r7, #4]
 800e698:	3303      	adds	r3, #3
 800e69a:	f023 0303 	bic.w	r3, r3, #3
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d306      	bcc.n	800e6b0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e6a2:	8afa      	ldrh	r2, [r7, #22]
 800e6a4:	88bb      	ldrh	r3, [r7, #4]
 800e6a6:	3303      	adds	r3, #3
 800e6a8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d201      	bcs.n	800e6b4 <pbuf_alloc+0x160>
        return NULL;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	e035      	b.n	800e720 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e6b4:	8afb      	ldrh	r3, [r7, #22]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff fa64 	bl	800db84 <mem_malloc>
 800e6bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d101      	bne.n	800e6c8 <pbuf_alloc+0x174>
        return NULL;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	e02b      	b.n	800e720 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e6c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6ca:	3310      	adds	r3, #16
 800e6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ce:	4413      	add	r3, r2
 800e6d0:	3303      	adds	r3, #3
 800e6d2:	f023 0303 	bic.w	r3, r3, #3
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	88b9      	ldrh	r1, [r7, #4]
 800e6da:	88ba      	ldrh	r2, [r7, #4]
 800e6dc:	2300      	movs	r3, #0
 800e6de:	9301      	str	r3, [sp, #4]
 800e6e0:	887b      	ldrh	r3, [r7, #2]
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4601      	mov	r1, r0
 800e6e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6ea:	f7ff ff09 	bl	800e500 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	f003 0303 	and.w	r3, r3, #3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d010      	beq.n	800e71c <pbuf_alloc+0x1c8>
 800e6fa:	4b0b      	ldr	r3, [pc, #44]	; (800e728 <pbuf_alloc+0x1d4>)
 800e6fc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e700:	490d      	ldr	r1, [pc, #52]	; (800e738 <pbuf_alloc+0x1e4>)
 800e702:	480b      	ldr	r0, [pc, #44]	; (800e730 <pbuf_alloc+0x1dc>)
 800e704:	f009 fbd2 	bl	8017eac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e708:	e008      	b.n	800e71c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e70a:	4b07      	ldr	r3, [pc, #28]	; (800e728 <pbuf_alloc+0x1d4>)
 800e70c:	f240 1227 	movw	r2, #295	; 0x127
 800e710:	490a      	ldr	r1, [pc, #40]	; (800e73c <pbuf_alloc+0x1e8>)
 800e712:	4807      	ldr	r0, [pc, #28]	; (800e730 <pbuf_alloc+0x1dc>)
 800e714:	f009 fbca 	bl	8017eac <iprintf>
      return NULL;
 800e718:	2300      	movs	r3, #0
 800e71a:	e001      	b.n	800e720 <pbuf_alloc+0x1cc>
      break;
 800e71c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e720:	4618      	mov	r0, r3
 800e722:	3728      	adds	r7, #40	; 0x28
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	0801ae1c 	.word	0x0801ae1c
 800e72c:	0801ae4c 	.word	0x0801ae4c
 800e730:	0801ae7c 	.word	0x0801ae7c
 800e734:	0801aea4 	.word	0x0801aea4
 800e738:	0801aed8 	.word	0x0801aed8
 800e73c:	0801af04 	.word	0x0801af04

0800e740 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af02      	add	r7, sp, #8
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	460b      	mov	r3, r1
 800e74a:	807b      	strh	r3, [r7, #2]
 800e74c:	4613      	mov	r3, r2
 800e74e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e750:	883b      	ldrh	r3, [r7, #0]
 800e752:	2b41      	cmp	r3, #65	; 0x41
 800e754:	d009      	beq.n	800e76a <pbuf_alloc_reference+0x2a>
 800e756:	883b      	ldrh	r3, [r7, #0]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d006      	beq.n	800e76a <pbuf_alloc_reference+0x2a>
 800e75c:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <pbuf_alloc_reference+0x5c>)
 800e75e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e762:	490f      	ldr	r1, [pc, #60]	; (800e7a0 <pbuf_alloc_reference+0x60>)
 800e764:	480f      	ldr	r0, [pc, #60]	; (800e7a4 <pbuf_alloc_reference+0x64>)
 800e766:	f009 fba1 	bl	8017eac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e76a:	2007      	movs	r0, #7
 800e76c:	f7ff fb78 	bl	800de60 <memp_malloc>
 800e770:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d101      	bne.n	800e77c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e778:	2300      	movs	r3, #0
 800e77a:	e00b      	b.n	800e794 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e77c:	8879      	ldrh	r1, [r7, #2]
 800e77e:	887a      	ldrh	r2, [r7, #2]
 800e780:	2300      	movs	r3, #0
 800e782:	9301      	str	r3, [sp, #4]
 800e784:	883b      	ldrh	r3, [r7, #0]
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	460b      	mov	r3, r1
 800e78a:	6879      	ldr	r1, [r7, #4]
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	f7ff feb7 	bl	800e500 <pbuf_init_alloced_pbuf>
  return p;
 800e792:	68fb      	ldr	r3, [r7, #12]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	0801ae1c 	.word	0x0801ae1c
 800e7a0:	0801af20 	.word	0x0801af20
 800e7a4:	0801ae7c 	.word	0x0801ae7c

0800e7a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af02      	add	r7, sp, #8
 800e7ae:	607b      	str	r3, [r7, #4]
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	73fb      	strb	r3, [r7, #15]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	81bb      	strh	r3, [r7, #12]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
 800e7be:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e7c0:	8a7b      	ldrh	r3, [r7, #18]
 800e7c2:	3303      	adds	r3, #3
 800e7c4:	f023 0203 	bic.w	r2, r3, #3
 800e7c8:	89bb      	ldrh	r3, [r7, #12]
 800e7ca:	441a      	add	r2, r3
 800e7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d901      	bls.n	800e7d6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	e018      	b.n	800e808 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e7d6:	6a3b      	ldr	r3, [r7, #32]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d007      	beq.n	800e7ec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e7dc:	8a7b      	ldrh	r3, [r7, #18]
 800e7de:	3303      	adds	r3, #3
 800e7e0:	f023 0303 	bic.w	r3, r3, #3
 800e7e4:	6a3a      	ldr	r2, [r7, #32]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	617b      	str	r3, [r7, #20]
 800e7ea:	e001      	b.n	800e7f0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	89b9      	ldrh	r1, [r7, #12]
 800e7f4:	89ba      	ldrh	r2, [r7, #12]
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	9301      	str	r3, [sp, #4]
 800e7fa:	897b      	ldrh	r3, [r7, #10]
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	460b      	mov	r3, r1
 800e800:	6979      	ldr	r1, [r7, #20]
 800e802:	f7ff fe7d 	bl	800e500 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e806:	687b      	ldr	r3, [r7, #4]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3718      	adds	r7, #24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	460b      	mov	r3, r1
 800e81a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <pbuf_realloc+0x20>
 800e822:	4b3a      	ldr	r3, [pc, #232]	; (800e90c <pbuf_realloc+0xfc>)
 800e824:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e828:	4939      	ldr	r1, [pc, #228]	; (800e910 <pbuf_realloc+0x100>)
 800e82a:	483a      	ldr	r0, [pc, #232]	; (800e914 <pbuf_realloc+0x104>)
 800e82c:	f009 fb3e 	bl	8017eac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	891b      	ldrh	r3, [r3, #8]
 800e834:	887a      	ldrh	r2, [r7, #2]
 800e836:	429a      	cmp	r2, r3
 800e838:	d263      	bcs.n	800e902 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	891a      	ldrh	r2, [r3, #8]
 800e83e:	887b      	ldrh	r3, [r7, #2]
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e844:	887b      	ldrh	r3, [r7, #2]
 800e846:	817b      	strh	r3, [r7, #10]
  q = p;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e84c:	e018      	b.n	800e880 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	895b      	ldrh	r3, [r3, #10]
 800e852:	897a      	ldrh	r2, [r7, #10]
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	891a      	ldrh	r2, [r3, #8]
 800e85c:	893b      	ldrh	r3, [r7, #8]
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	b29a      	uxth	r2, r3
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d106      	bne.n	800e880 <pbuf_realloc+0x70>
 800e872:	4b26      	ldr	r3, [pc, #152]	; (800e90c <pbuf_realloc+0xfc>)
 800e874:	f240 12af 	movw	r2, #431	; 0x1af
 800e878:	4927      	ldr	r1, [pc, #156]	; (800e918 <pbuf_realloc+0x108>)
 800e87a:	4826      	ldr	r0, [pc, #152]	; (800e914 <pbuf_realloc+0x104>)
 800e87c:	f009 fb16 	bl	8017eac <iprintf>
  while (rem_len > q->len) {
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	895b      	ldrh	r3, [r3, #10]
 800e884:	897a      	ldrh	r2, [r7, #10]
 800e886:	429a      	cmp	r2, r3
 800e888:	d8e1      	bhi.n	800e84e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	7b1b      	ldrb	r3, [r3, #12]
 800e88e:	f003 030f 	and.w	r3, r3, #15
 800e892:	2b00      	cmp	r3, #0
 800e894:	d121      	bne.n	800e8da <pbuf_realloc+0xca>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	895b      	ldrh	r3, [r3, #10]
 800e89a:	897a      	ldrh	r2, [r7, #10]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d01c      	beq.n	800e8da <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	7b5b      	ldrb	r3, [r3, #13]
 800e8a4:	f003 0302 	and.w	r3, r3, #2
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d116      	bne.n	800e8da <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	1ad3      	subs	r3, r2, r3
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	897b      	ldrh	r3, [r7, #10]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	4619      	mov	r1, r3
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f7ff f864 	bl	800d98c <mem_trim>
 800e8c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d106      	bne.n	800e8da <pbuf_realloc+0xca>
 800e8cc:	4b0f      	ldr	r3, [pc, #60]	; (800e90c <pbuf_realloc+0xfc>)
 800e8ce:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e8d2:	4912      	ldr	r1, [pc, #72]	; (800e91c <pbuf_realloc+0x10c>)
 800e8d4:	480f      	ldr	r0, [pc, #60]	; (800e914 <pbuf_realloc+0x104>)
 800e8d6:	f009 fae9 	bl	8017eac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	897a      	ldrh	r2, [r7, #10]
 800e8de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	895a      	ldrh	r2, [r3, #10]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d004      	beq.n	800e8fa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f000 f911 	bl	800eb1c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	601a      	str	r2, [r3, #0]
 800e900:	e000      	b.n	800e904 <pbuf_realloc+0xf4>
    return;
 800e902:	bf00      	nop

}
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	0801ae1c 	.word	0x0801ae1c
 800e910:	0801af34 	.word	0x0801af34
 800e914:	0801ae7c 	.word	0x0801ae7c
 800e918:	0801af4c 	.word	0x0801af4c
 800e91c:	0801af64 	.word	0x0801af64

0800e920 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b086      	sub	sp, #24
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	4613      	mov	r3, r2
 800e92c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d106      	bne.n	800e942 <pbuf_add_header_impl+0x22>
 800e934:	4b2b      	ldr	r3, [pc, #172]	; (800e9e4 <pbuf_add_header_impl+0xc4>)
 800e936:	f240 12df 	movw	r2, #479	; 0x1df
 800e93a:	492b      	ldr	r1, [pc, #172]	; (800e9e8 <pbuf_add_header_impl+0xc8>)
 800e93c:	482b      	ldr	r0, [pc, #172]	; (800e9ec <pbuf_add_header_impl+0xcc>)
 800e93e:	f009 fab5 	bl	8017eac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d003      	beq.n	800e950 <pbuf_add_header_impl+0x30>
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e94e:	d301      	bcc.n	800e954 <pbuf_add_header_impl+0x34>
    return 1;
 800e950:	2301      	movs	r3, #1
 800e952:	e043      	b.n	800e9dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d101      	bne.n	800e95e <pbuf_add_header_impl+0x3e>
    return 0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	e03e      	b.n	800e9dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	891a      	ldrh	r2, [r3, #8]
 800e966:	8a7b      	ldrh	r3, [r7, #18]
 800e968:	4413      	add	r3, r2
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	8a7a      	ldrh	r2, [r7, #18]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d901      	bls.n	800e976 <pbuf_add_header_impl+0x56>
    return 1;
 800e972:	2301      	movs	r3, #1
 800e974:	e032      	b.n	800e9dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	7b1b      	ldrb	r3, [r3, #12]
 800e97a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e97c:	8a3b      	ldrh	r3, [r7, #16]
 800e97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00c      	beq.n	800e9a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	685a      	ldr	r2, [r3, #4]
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	425b      	negs	r3, r3
 800e98e:	4413      	add	r3, r2
 800e990:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	3310      	adds	r3, #16
 800e996:	697a      	ldr	r2, [r7, #20]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d20d      	bcs.n	800e9b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e01d      	b.n	800e9dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e9a0:	79fb      	ldrb	r3, [r7, #7]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d006      	beq.n	800e9b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	685a      	ldr	r2, [r3, #4]
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	425b      	negs	r3, r3
 800e9ae:	4413      	add	r3, r2
 800e9b0:	617b      	str	r3, [r7, #20]
 800e9b2:	e001      	b.n	800e9b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e011      	b.n	800e9dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	895a      	ldrh	r2, [r3, #10]
 800e9c2:	8a7b      	ldrh	r3, [r7, #18]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	891a      	ldrh	r2, [r3, #8]
 800e9d0:	8a7b      	ldrh	r3, [r7, #18]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	811a      	strh	r2, [r3, #8]


  return 0;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3718      	adds	r7, #24
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	0801ae1c 	.word	0x0801ae1c
 800e9e8:	0801af80 	.word	0x0801af80
 800e9ec:	0801ae7c 	.word	0x0801ae7c

0800e9f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff ff8e 	bl	800e920 <pbuf_add_header_impl>
 800ea04:	4603      	mov	r3, r0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
	...

0800ea10 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d106      	bne.n	800ea2e <pbuf_remove_header+0x1e>
 800ea20:	4b20      	ldr	r3, [pc, #128]	; (800eaa4 <pbuf_remove_header+0x94>)
 800ea22:	f240 224b 	movw	r2, #587	; 0x24b
 800ea26:	4920      	ldr	r1, [pc, #128]	; (800eaa8 <pbuf_remove_header+0x98>)
 800ea28:	4820      	ldr	r0, [pc, #128]	; (800eaac <pbuf_remove_header+0x9c>)
 800ea2a:	f009 fa3f 	bl	8017eac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d003      	beq.n	800ea3c <pbuf_remove_header+0x2c>
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea3a:	d301      	bcc.n	800ea40 <pbuf_remove_header+0x30>
    return 1;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e02c      	b.n	800ea9a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d101      	bne.n	800ea4a <pbuf_remove_header+0x3a>
    return 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	e027      	b.n	800ea9a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	895b      	ldrh	r3, [r3, #10]
 800ea52:	89fa      	ldrh	r2, [r7, #14]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d908      	bls.n	800ea6a <pbuf_remove_header+0x5a>
 800ea58:	4b12      	ldr	r3, [pc, #72]	; (800eaa4 <pbuf_remove_header+0x94>)
 800ea5a:	f240 2255 	movw	r2, #597	; 0x255
 800ea5e:	4914      	ldr	r1, [pc, #80]	; (800eab0 <pbuf_remove_header+0xa0>)
 800ea60:	4812      	ldr	r0, [pc, #72]	; (800eaac <pbuf_remove_header+0x9c>)
 800ea62:	f009 fa23 	bl	8017eac <iprintf>
 800ea66:	2301      	movs	r3, #1
 800ea68:	e017      	b.n	800ea9a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685a      	ldr	r2, [r3, #4]
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	441a      	add	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	895a      	ldrh	r2, [r3, #10]
 800ea80:	89fb      	ldrh	r3, [r7, #14]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	891a      	ldrh	r2, [r3, #8]
 800ea8e:	89fb      	ldrh	r3, [r7, #14]
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	0801ae1c 	.word	0x0801ae1c
 800eaa8:	0801af80 	.word	0x0801af80
 800eaac:	0801ae7c 	.word	0x0801ae7c
 800eab0:	0801af8c 	.word	0x0801af8c

0800eab4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	807b      	strh	r3, [r7, #2]
 800eac0:	4613      	mov	r3, r2
 800eac2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800eac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	da08      	bge.n	800eade <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800eacc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ead0:	425b      	negs	r3, r3
 800ead2:	4619      	mov	r1, r3
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7ff ff9b 	bl	800ea10 <pbuf_remove_header>
 800eada:	4603      	mov	r3, r0
 800eadc:	e007      	b.n	800eaee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800eade:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eae2:	787a      	ldrb	r2, [r7, #1]
 800eae4:	4619      	mov	r1, r3
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff ff1a 	bl	800e920 <pbuf_add_header_impl>
 800eaec:	4603      	mov	r3, r0
  }
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b082      	sub	sp, #8
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	460b      	mov	r3, r1
 800eb00:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800eb02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eb06:	2201      	movs	r2, #1
 800eb08:	4619      	mov	r1, r3
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7ff ffd2 	bl	800eab4 <pbuf_header_impl>
 800eb10:	4603      	mov	r3, r0
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
	...

0800eb1c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b086      	sub	sp, #24
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10b      	bne.n	800eb42 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d106      	bne.n	800eb3e <pbuf_free+0x22>
 800eb30:	4b38      	ldr	r3, [pc, #224]	; (800ec14 <pbuf_free+0xf8>)
 800eb32:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800eb36:	4938      	ldr	r1, [pc, #224]	; (800ec18 <pbuf_free+0xfc>)
 800eb38:	4838      	ldr	r0, [pc, #224]	; (800ec1c <pbuf_free+0x100>)
 800eb3a:	f009 f9b7 	bl	8017eac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e063      	b.n	800ec0a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800eb46:	e05c      	b.n	800ec02 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	7b9b      	ldrb	r3, [r3, #14]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d106      	bne.n	800eb5e <pbuf_free+0x42>
 800eb50:	4b30      	ldr	r3, [pc, #192]	; (800ec14 <pbuf_free+0xf8>)
 800eb52:	f240 22f1 	movw	r2, #753	; 0x2f1
 800eb56:	4932      	ldr	r1, [pc, #200]	; (800ec20 <pbuf_free+0x104>)
 800eb58:	4830      	ldr	r0, [pc, #192]	; (800ec1c <pbuf_free+0x100>)
 800eb5a:	f009 f9a7 	bl	8017eac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	7b9b      	ldrb	r3, [r3, #14]
 800eb62:	3b01      	subs	r3, #1
 800eb64:	b2da      	uxtb	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	739a      	strb	r2, [r3, #14]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	7b9b      	ldrb	r3, [r3, #14]
 800eb6e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800eb70:	7dbb      	ldrb	r3, [r7, #22]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d143      	bne.n	800ebfe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	7b1b      	ldrb	r3, [r3, #12]
 800eb80:	f003 030f 	and.w	r3, r3, #15
 800eb84:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	7b5b      	ldrb	r3, [r3, #13]
 800eb8a:	f003 0302 	and.w	r3, r3, #2
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d011      	beq.n	800ebb6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	691b      	ldr	r3, [r3, #16]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d106      	bne.n	800ebac <pbuf_free+0x90>
 800eb9e:	4b1d      	ldr	r3, [pc, #116]	; (800ec14 <pbuf_free+0xf8>)
 800eba0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800eba4:	491f      	ldr	r1, [pc, #124]	; (800ec24 <pbuf_free+0x108>)
 800eba6:	481d      	ldr	r0, [pc, #116]	; (800ec1c <pbuf_free+0x100>)
 800eba8:	f009 f980 	bl	8017eac <iprintf>
        pc->custom_free_function(p);
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	4798      	blx	r3
 800ebb4:	e01d      	b.n	800ebf2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ebb6:	7bfb      	ldrb	r3, [r7, #15]
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d104      	bne.n	800ebc6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ebbc:	6879      	ldr	r1, [r7, #4]
 800ebbe:	2008      	movs	r0, #8
 800ebc0:	f7ff f99a 	bl	800def8 <memp_free>
 800ebc4:	e015      	b.n	800ebf2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ebc6:	7bfb      	ldrb	r3, [r7, #15]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d104      	bne.n	800ebd6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	2007      	movs	r0, #7
 800ebd0:	f7ff f992 	bl	800def8 <memp_free>
 800ebd4:	e00d      	b.n	800ebf2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d103      	bne.n	800ebe4 <pbuf_free+0xc8>
          mem_free(p);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7fe fe6b 	bl	800d8b8 <mem_free>
 800ebe2:	e006      	b.n	800ebf2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ebe4:	4b0b      	ldr	r3, [pc, #44]	; (800ec14 <pbuf_free+0xf8>)
 800ebe6:	f240 320f 	movw	r2, #783	; 0x30f
 800ebea:	490f      	ldr	r1, [pc, #60]	; (800ec28 <pbuf_free+0x10c>)
 800ebec:	480b      	ldr	r0, [pc, #44]	; (800ec1c <pbuf_free+0x100>)
 800ebee:	f009 f95d 	bl	8017eac <iprintf>
        }
      }
      count++;
 800ebf2:	7dfb      	ldrb	r3, [r7, #23]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	607b      	str	r3, [r7, #4]
 800ebfc:	e001      	b.n	800ec02 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d19f      	bne.n	800eb48 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	0801ae1c 	.word	0x0801ae1c
 800ec18:	0801af80 	.word	0x0801af80
 800ec1c:	0801ae7c 	.word	0x0801ae7c
 800ec20:	0801afac 	.word	0x0801afac
 800ec24:	0801afc4 	.word	0x0801afc4
 800ec28:	0801afe8 	.word	0x0801afe8

0800ec2c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ec34:	2300      	movs	r3, #0
 800ec36:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ec38:	e005      	b.n	800ec46 <pbuf_clen+0x1a>
    ++len;
 800ec3a:	89fb      	ldrh	r3, [r7, #14]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1f6      	bne.n	800ec3a <pbuf_clen+0xe>
  }
  return len;
 800ec4c:	89fb      	ldrh	r3, [r7, #14]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3714      	adds	r7, #20
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr
	...

0800ec5c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d010      	beq.n	800ec8c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	7b9b      	ldrb	r3, [r3, #14]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	b2da      	uxtb	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	7b9b      	ldrb	r3, [r3, #14]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d106      	bne.n	800ec8c <pbuf_ref+0x30>
 800ec7e:	4b05      	ldr	r3, [pc, #20]	; (800ec94 <pbuf_ref+0x38>)
 800ec80:	f240 3242 	movw	r2, #834	; 0x342
 800ec84:	4904      	ldr	r1, [pc, #16]	; (800ec98 <pbuf_ref+0x3c>)
 800ec86:	4805      	ldr	r0, [pc, #20]	; (800ec9c <pbuf_ref+0x40>)
 800ec88:	f009 f910 	bl	8017eac <iprintf>
  }
}
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	0801ae1c 	.word	0x0801ae1c
 800ec98:	0801affc 	.word	0x0801affc
 800ec9c:	0801ae7c 	.word	0x0801ae7c

0800eca0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d002      	beq.n	800ecb6 <pbuf_cat+0x16>
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d107      	bne.n	800ecc6 <pbuf_cat+0x26>
 800ecb6:	4b20      	ldr	r3, [pc, #128]	; (800ed38 <pbuf_cat+0x98>)
 800ecb8:	f240 3259 	movw	r2, #857	; 0x359
 800ecbc:	491f      	ldr	r1, [pc, #124]	; (800ed3c <pbuf_cat+0x9c>)
 800ecbe:	4820      	ldr	r0, [pc, #128]	; (800ed40 <pbuf_cat+0xa0>)
 800ecc0:	f009 f8f4 	bl	8017eac <iprintf>
 800ecc4:	e034      	b.n	800ed30 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	60fb      	str	r3, [r7, #12]
 800ecca:	e00a      	b.n	800ece2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	891a      	ldrh	r2, [r3, #8]
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	891b      	ldrh	r3, [r3, #8]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	60fb      	str	r3, [r7, #12]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d1f0      	bne.n	800eccc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	891a      	ldrh	r2, [r3, #8]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	895b      	ldrh	r3, [r3, #10]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d006      	beq.n	800ed04 <pbuf_cat+0x64>
 800ecf6:	4b10      	ldr	r3, [pc, #64]	; (800ed38 <pbuf_cat+0x98>)
 800ecf8:	f240 3262 	movw	r2, #866	; 0x362
 800ecfc:	4911      	ldr	r1, [pc, #68]	; (800ed44 <pbuf_cat+0xa4>)
 800ecfe:	4810      	ldr	r0, [pc, #64]	; (800ed40 <pbuf_cat+0xa0>)
 800ed00:	f009 f8d4 	bl	8017eac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d006      	beq.n	800ed1a <pbuf_cat+0x7a>
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	; (800ed38 <pbuf_cat+0x98>)
 800ed0e:	f240 3263 	movw	r2, #867	; 0x363
 800ed12:	490d      	ldr	r1, [pc, #52]	; (800ed48 <pbuf_cat+0xa8>)
 800ed14:	480a      	ldr	r0, [pc, #40]	; (800ed40 <pbuf_cat+0xa0>)
 800ed16:	f009 f8c9 	bl	8017eac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	891a      	ldrh	r2, [r3, #8]
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	891b      	ldrh	r3, [r3, #8]
 800ed22:	4413      	add	r3, r2
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	0801ae1c 	.word	0x0801ae1c
 800ed3c:	0801b010 	.word	0x0801b010
 800ed40:	0801ae7c 	.word	0x0801ae7c
 800ed44:	0801b048 	.word	0x0801b048
 800ed48:	0801b078 	.word	0x0801b078

0800ed4c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b086      	sub	sp, #24
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ed56:	2300      	movs	r3, #0
 800ed58:	617b      	str	r3, [r7, #20]
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d008      	beq.n	800ed76 <pbuf_copy+0x2a>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d005      	beq.n	800ed76 <pbuf_copy+0x2a>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	891a      	ldrh	r2, [r3, #8]
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	891b      	ldrh	r3, [r3, #8]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d209      	bcs.n	800ed8a <pbuf_copy+0x3e>
 800ed76:	4b57      	ldr	r3, [pc, #348]	; (800eed4 <pbuf_copy+0x188>)
 800ed78:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ed7c:	4956      	ldr	r1, [pc, #344]	; (800eed8 <pbuf_copy+0x18c>)
 800ed7e:	4857      	ldr	r0, [pc, #348]	; (800eedc <pbuf_copy+0x190>)
 800ed80:	f009 f894 	bl	8017eac <iprintf>
 800ed84:	f06f 030f 	mvn.w	r3, #15
 800ed88:	e09f      	b.n	800eeca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	895b      	ldrh	r3, [r3, #10]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	1ad2      	subs	r2, r2, r3
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	895b      	ldrh	r3, [r3, #10]
 800ed98:	4619      	mov	r1, r3
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	1acb      	subs	r3, r1, r3
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d306      	bcc.n	800edb0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	895b      	ldrh	r3, [r3, #10]
 800eda6:	461a      	mov	r2, r3
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	60fb      	str	r3, [r7, #12]
 800edae:	e005      	b.n	800edbc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	895b      	ldrh	r3, [r3, #10]
 800edb4:	461a      	mov	r2, r3
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	1ad3      	subs	r3, r2, r3
 800edba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	685a      	ldr	r2, [r3, #4]
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	18d0      	adds	r0, r2, r3
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	4413      	add	r3, r2
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	4619      	mov	r1, r3
 800edd0:	f008 ff92 	bl	8017cf8 <memcpy>
    offset_to += len;
 800edd4:	697a      	ldr	r2, [r7, #20]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	4413      	add	r3, r2
 800edda:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eddc:	693a      	ldr	r2, [r7, #16]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	4413      	add	r3, r2
 800ede2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	895b      	ldrh	r3, [r3, #10]
 800ede8:	461a      	mov	r2, r3
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	4293      	cmp	r3, r2
 800edee:	d906      	bls.n	800edfe <pbuf_copy+0xb2>
 800edf0:	4b38      	ldr	r3, [pc, #224]	; (800eed4 <pbuf_copy+0x188>)
 800edf2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800edf6:	493a      	ldr	r1, [pc, #232]	; (800eee0 <pbuf_copy+0x194>)
 800edf8:	4838      	ldr	r0, [pc, #224]	; (800eedc <pbuf_copy+0x190>)
 800edfa:	f009 f857 	bl	8017eac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	895b      	ldrh	r3, [r3, #10]
 800ee02:	461a      	mov	r2, r3
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d906      	bls.n	800ee18 <pbuf_copy+0xcc>
 800ee0a:	4b32      	ldr	r3, [pc, #200]	; (800eed4 <pbuf_copy+0x188>)
 800ee0c:	f240 32da 	movw	r2, #986	; 0x3da
 800ee10:	4934      	ldr	r1, [pc, #208]	; (800eee4 <pbuf_copy+0x198>)
 800ee12:	4832      	ldr	r0, [pc, #200]	; (800eedc <pbuf_copy+0x190>)
 800ee14:	f009 f84a 	bl	8017eac <iprintf>
    if (offset_from >= p_from->len) {
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	895b      	ldrh	r3, [r3, #10]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d304      	bcc.n	800ee2e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ee24:	2300      	movs	r3, #0
 800ee26:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	895b      	ldrh	r3, [r3, #10]
 800ee32:	461a      	mov	r2, r3
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d114      	bne.n	800ee64 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d10c      	bne.n	800ee64 <pbuf_copy+0x118>
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d009      	beq.n	800ee64 <pbuf_copy+0x118>
 800ee50:	4b20      	ldr	r3, [pc, #128]	; (800eed4 <pbuf_copy+0x188>)
 800ee52:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ee56:	4924      	ldr	r1, [pc, #144]	; (800eee8 <pbuf_copy+0x19c>)
 800ee58:	4820      	ldr	r0, [pc, #128]	; (800eedc <pbuf_copy+0x190>)
 800ee5a:	f009 f827 	bl	8017eac <iprintf>
 800ee5e:	f06f 030f 	mvn.w	r3, #15
 800ee62:	e032      	b.n	800eeca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d013      	beq.n	800ee92 <pbuf_copy+0x146>
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	895a      	ldrh	r2, [r3, #10]
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	891b      	ldrh	r3, [r3, #8]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d10d      	bne.n	800ee92 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d009      	beq.n	800ee92 <pbuf_copy+0x146>
 800ee7e:	4b15      	ldr	r3, [pc, #84]	; (800eed4 <pbuf_copy+0x188>)
 800ee80:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ee84:	4919      	ldr	r1, [pc, #100]	; (800eeec <pbuf_copy+0x1a0>)
 800ee86:	4815      	ldr	r0, [pc, #84]	; (800eedc <pbuf_copy+0x190>)
 800ee88:	f009 f810 	bl	8017eac <iprintf>
 800ee8c:	f06f 0305 	mvn.w	r3, #5
 800ee90:	e01b      	b.n	800eeca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d013      	beq.n	800eec0 <pbuf_copy+0x174>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	895a      	ldrh	r2, [r3, #10]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	891b      	ldrh	r3, [r3, #8]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d10d      	bne.n	800eec0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d009      	beq.n	800eec0 <pbuf_copy+0x174>
 800eeac:	4b09      	ldr	r3, [pc, #36]	; (800eed4 <pbuf_copy+0x188>)
 800eeae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800eeb2:	490e      	ldr	r1, [pc, #56]	; (800eeec <pbuf_copy+0x1a0>)
 800eeb4:	4809      	ldr	r0, [pc, #36]	; (800eedc <pbuf_copy+0x190>)
 800eeb6:	f008 fff9 	bl	8017eac <iprintf>
 800eeba:	f06f 0305 	mvn.w	r3, #5
 800eebe:	e004      	b.n	800eeca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	f47f af61 	bne.w	800ed8a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800eec8:	2300      	movs	r3, #0
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3718      	adds	r7, #24
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	0801ae1c 	.word	0x0801ae1c
 800eed8:	0801b0c4 	.word	0x0801b0c4
 800eedc:	0801ae7c 	.word	0x0801ae7c
 800eee0:	0801b0f4 	.word	0x0801b0f4
 800eee4:	0801b10c 	.word	0x0801b10c
 800eee8:	0801b128 	.word	0x0801b128
 800eeec:	0801b138 	.word	0x0801b138

0800eef0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b088      	sub	sp, #32
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	4611      	mov	r1, r2
 800eefc:	461a      	mov	r2, r3
 800eefe:	460b      	mov	r3, r1
 800ef00:	80fb      	strh	r3, [r7, #6]
 800ef02:	4613      	mov	r3, r2
 800ef04:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d108      	bne.n	800ef26 <pbuf_copy_partial+0x36>
 800ef14:	4b2b      	ldr	r3, [pc, #172]	; (800efc4 <pbuf_copy_partial+0xd4>)
 800ef16:	f240 420a 	movw	r2, #1034	; 0x40a
 800ef1a:	492b      	ldr	r1, [pc, #172]	; (800efc8 <pbuf_copy_partial+0xd8>)
 800ef1c:	482b      	ldr	r0, [pc, #172]	; (800efcc <pbuf_copy_partial+0xdc>)
 800ef1e:	f008 ffc5 	bl	8017eac <iprintf>
 800ef22:	2300      	movs	r3, #0
 800ef24:	e04a      	b.n	800efbc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d108      	bne.n	800ef3e <pbuf_copy_partial+0x4e>
 800ef2c:	4b25      	ldr	r3, [pc, #148]	; (800efc4 <pbuf_copy_partial+0xd4>)
 800ef2e:	f240 420b 	movw	r2, #1035	; 0x40b
 800ef32:	4927      	ldr	r1, [pc, #156]	; (800efd0 <pbuf_copy_partial+0xe0>)
 800ef34:	4825      	ldr	r0, [pc, #148]	; (800efcc <pbuf_copy_partial+0xdc>)
 800ef36:	f008 ffb9 	bl	8017eac <iprintf>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	e03e      	b.n	800efbc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	61fb      	str	r3, [r7, #28]
 800ef42:	e034      	b.n	800efae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ef44:	88bb      	ldrh	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00a      	beq.n	800ef60 <pbuf_copy_partial+0x70>
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	895b      	ldrh	r3, [r3, #10]
 800ef4e:	88ba      	ldrh	r2, [r7, #4]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d305      	bcc.n	800ef60 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	895b      	ldrh	r3, [r3, #10]
 800ef58:	88ba      	ldrh	r2, [r7, #4]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	80bb      	strh	r3, [r7, #4]
 800ef5e:	e023      	b.n	800efa8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	895a      	ldrh	r2, [r3, #10]
 800ef64:	88bb      	ldrh	r3, [r7, #4]
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ef6a:	8b3a      	ldrh	r2, [r7, #24]
 800ef6c:	88fb      	ldrh	r3, [r7, #6]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d901      	bls.n	800ef76 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ef72:	88fb      	ldrh	r3, [r7, #6]
 800ef74:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ef76:	8b7b      	ldrh	r3, [r7, #26]
 800ef78:	68ba      	ldr	r2, [r7, #8]
 800ef7a:	18d0      	adds	r0, r2, r3
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	685a      	ldr	r2, [r3, #4]
 800ef80:	88bb      	ldrh	r3, [r7, #4]
 800ef82:	4413      	add	r3, r2
 800ef84:	8b3a      	ldrh	r2, [r7, #24]
 800ef86:	4619      	mov	r1, r3
 800ef88:	f008 feb6 	bl	8017cf8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ef8c:	8afa      	ldrh	r2, [r7, #22]
 800ef8e:	8b3b      	ldrh	r3, [r7, #24]
 800ef90:	4413      	add	r3, r2
 800ef92:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ef94:	8b7a      	ldrh	r2, [r7, #26]
 800ef96:	8b3b      	ldrh	r3, [r7, #24]
 800ef98:	4413      	add	r3, r2
 800ef9a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ef9c:	88fa      	ldrh	r2, [r7, #6]
 800ef9e:	8b3b      	ldrh	r3, [r7, #24]
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800efa4:	2300      	movs	r3, #0
 800efa6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	61fb      	str	r3, [r7, #28]
 800efae:	88fb      	ldrh	r3, [r7, #6]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d002      	beq.n	800efba <pbuf_copy_partial+0xca>
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1c4      	bne.n	800ef44 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800efba:	8afb      	ldrh	r3, [r7, #22]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3720      	adds	r7, #32
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	0801ae1c 	.word	0x0801ae1c
 800efc8:	0801b164 	.word	0x0801b164
 800efcc:	0801ae7c 	.word	0x0801ae7c
 800efd0:	0801b184 	.word	0x0801b184

0800efd4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	4603      	mov	r3, r0
 800efdc:	603a      	str	r2, [r7, #0]
 800efde:	71fb      	strb	r3, [r7, #7]
 800efe0:	460b      	mov	r3, r1
 800efe2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	8919      	ldrh	r1, [r3, #8]
 800efe8:	88ba      	ldrh	r2, [r7, #4]
 800efea:	79fb      	ldrb	r3, [r7, #7]
 800efec:	4618      	mov	r0, r3
 800efee:	f7ff fab1 	bl	800e554 <pbuf_alloc>
 800eff2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d101      	bne.n	800effe <pbuf_clone+0x2a>
    return NULL;
 800effa:	2300      	movs	r3, #0
 800effc:	e011      	b.n	800f022 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	f7ff fea3 	bl	800ed4c <pbuf_copy>
 800f006:	4603      	mov	r3, r0
 800f008:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f00a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d006      	beq.n	800f020 <pbuf_clone+0x4c>
 800f012:	4b06      	ldr	r3, [pc, #24]	; (800f02c <pbuf_clone+0x58>)
 800f014:	f240 5224 	movw	r2, #1316	; 0x524
 800f018:	4905      	ldr	r1, [pc, #20]	; (800f030 <pbuf_clone+0x5c>)
 800f01a:	4806      	ldr	r0, [pc, #24]	; (800f034 <pbuf_clone+0x60>)
 800f01c:	f008 ff46 	bl	8017eac <iprintf>
  return q;
 800f020:	68fb      	ldr	r3, [r7, #12]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	0801ae1c 	.word	0x0801ae1c
 800f030:	0801b290 	.word	0x0801b290
 800f034:	0801ae7c 	.word	0x0801ae7c

0800f038 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f03c:	f008 ffc4 	bl	8017fc8 <rand>
 800f040:	4603      	mov	r3, r0
 800f042:	b29b      	uxth	r3, r3
 800f044:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f048:	b29b      	uxth	r3, r3
 800f04a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f04e:	b29a      	uxth	r2, r3
 800f050:	4b01      	ldr	r3, [pc, #4]	; (800f058 <tcp_init+0x20>)
 800f052:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f054:	bf00      	nop
 800f056:	bd80      	pop	{r7, pc}
 800f058:	200004a2 	.word	0x200004a2

0800f05c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	7d1b      	ldrb	r3, [r3, #20]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d105      	bne.n	800f078 <tcp_free+0x1c>
 800f06c:	4b06      	ldr	r3, [pc, #24]	; (800f088 <tcp_free+0x2c>)
 800f06e:	22d4      	movs	r2, #212	; 0xd4
 800f070:	4906      	ldr	r1, [pc, #24]	; (800f08c <tcp_free+0x30>)
 800f072:	4807      	ldr	r0, [pc, #28]	; (800f090 <tcp_free+0x34>)
 800f074:	f008 ff1a 	bl	8017eac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f078:	6879      	ldr	r1, [r7, #4]
 800f07a:	2001      	movs	r0, #1
 800f07c:	f7fe ff3c 	bl	800def8 <memp_free>
}
 800f080:	bf00      	nop
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	0801b31c 	.word	0x0801b31c
 800f08c:	0801b34c 	.word	0x0801b34c
 800f090:	0801b360 	.word	0x0801b360

0800f094 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	7d1b      	ldrb	r3, [r3, #20]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d105      	bne.n	800f0b0 <tcp_free_listen+0x1c>
 800f0a4:	4b06      	ldr	r3, [pc, #24]	; (800f0c0 <tcp_free_listen+0x2c>)
 800f0a6:	22df      	movs	r2, #223	; 0xdf
 800f0a8:	4906      	ldr	r1, [pc, #24]	; (800f0c4 <tcp_free_listen+0x30>)
 800f0aa:	4807      	ldr	r0, [pc, #28]	; (800f0c8 <tcp_free_listen+0x34>)
 800f0ac:	f008 fefe 	bl	8017eac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f0b0:	6879      	ldr	r1, [r7, #4]
 800f0b2:	2002      	movs	r0, #2
 800f0b4:	f7fe ff20 	bl	800def8 <memp_free>
}
 800f0b8:	bf00      	nop
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	0801b31c 	.word	0x0801b31c
 800f0c4:	0801b388 	.word	0x0801b388
 800f0c8:	0801b360 	.word	0x0801b360

0800f0cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f0d0:	f001 f85c 	bl	801018c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f0d4:	4b07      	ldr	r3, [pc, #28]	; (800f0f4 <tcp_tmr+0x28>)
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	b2da      	uxtb	r2, r3
 800f0dc:	4b05      	ldr	r3, [pc, #20]	; (800f0f4 <tcp_tmr+0x28>)
 800f0de:	701a      	strb	r2, [r3, #0]
 800f0e0:	4b04      	ldr	r3, [pc, #16]	; (800f0f4 <tcp_tmr+0x28>)
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	f003 0301 	and.w	r3, r3, #1
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d001      	beq.n	800f0f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f0ec:	f000 fd0e 	bl	800fb0c <tcp_slowtmr>
  }
}
 800f0f0:	bf00      	nop
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	20000a31 	.word	0x20000a31

0800f0f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d105      	bne.n	800f114 <tcp_remove_listener+0x1c>
 800f108:	4b0d      	ldr	r3, [pc, #52]	; (800f140 <tcp_remove_listener+0x48>)
 800f10a:	22ff      	movs	r2, #255	; 0xff
 800f10c:	490d      	ldr	r1, [pc, #52]	; (800f144 <tcp_remove_listener+0x4c>)
 800f10e:	480e      	ldr	r0, [pc, #56]	; (800f148 <tcp_remove_listener+0x50>)
 800f110:	f008 fecc 	bl	8017eac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	60fb      	str	r3, [r7, #12]
 800f118:	e00a      	b.n	800f130 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	429a      	cmp	r2, r3
 800f122:	d102      	bne.n	800f12a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	60fb      	str	r3, [r7, #12]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1f1      	bne.n	800f11a <tcp_remove_listener+0x22>
    }
  }
}
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	3710      	adds	r7, #16
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	0801b31c 	.word	0x0801b31c
 800f144:	0801b3a4 	.word	0x0801b3a4
 800f148:	0801b360 	.word	0x0801b360

0800f14c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d106      	bne.n	800f168 <tcp_listen_closed+0x1c>
 800f15a:	4b14      	ldr	r3, [pc, #80]	; (800f1ac <tcp_listen_closed+0x60>)
 800f15c:	f240 1211 	movw	r2, #273	; 0x111
 800f160:	4913      	ldr	r1, [pc, #76]	; (800f1b0 <tcp_listen_closed+0x64>)
 800f162:	4814      	ldr	r0, [pc, #80]	; (800f1b4 <tcp_listen_closed+0x68>)
 800f164:	f008 fea2 	bl	8017eac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	7d1b      	ldrb	r3, [r3, #20]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d006      	beq.n	800f17e <tcp_listen_closed+0x32>
 800f170:	4b0e      	ldr	r3, [pc, #56]	; (800f1ac <tcp_listen_closed+0x60>)
 800f172:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f176:	4910      	ldr	r1, [pc, #64]	; (800f1b8 <tcp_listen_closed+0x6c>)
 800f178:	480e      	ldr	r0, [pc, #56]	; (800f1b4 <tcp_listen_closed+0x68>)
 800f17a:	f008 fe97 	bl	8017eac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f17e:	2301      	movs	r3, #1
 800f180:	60fb      	str	r3, [r7, #12]
 800f182:	e00b      	b.n	800f19c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f184:	4a0d      	ldr	r2, [pc, #52]	; (800f1bc <tcp_listen_closed+0x70>)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6879      	ldr	r1, [r7, #4]
 800f190:	4618      	mov	r0, r3
 800f192:	f7ff ffb1 	bl	800f0f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	3301      	adds	r3, #1
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2b03      	cmp	r3, #3
 800f1a0:	d9f0      	bls.n	800f184 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f1a2:	bf00      	nop
 800f1a4:	bf00      	nop
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	0801b31c 	.word	0x0801b31c
 800f1b0:	0801b3cc 	.word	0x0801b3cc
 800f1b4:	0801b360 	.word	0x0801b360
 800f1b8:	0801b3d8 	.word	0x0801b3d8
 800f1bc:	080242a0 	.word	0x080242a0

0800f1c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f1c0:	b5b0      	push	{r4, r5, r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af04      	add	r7, sp, #16
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d106      	bne.n	800f1e0 <tcp_close_shutdown+0x20>
 800f1d2:	4b63      	ldr	r3, [pc, #396]	; (800f360 <tcp_close_shutdown+0x1a0>)
 800f1d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f1d8:	4962      	ldr	r1, [pc, #392]	; (800f364 <tcp_close_shutdown+0x1a4>)
 800f1da:	4863      	ldr	r0, [pc, #396]	; (800f368 <tcp_close_shutdown+0x1a8>)
 800f1dc:	f008 fe66 	bl	8017eac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d066      	beq.n	800f2b4 <tcp_close_shutdown+0xf4>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ea:	2b04      	cmp	r3, #4
 800f1ec:	d003      	beq.n	800f1f6 <tcp_close_shutdown+0x36>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	7d1b      	ldrb	r3, [r3, #20]
 800f1f2:	2b07      	cmp	r3, #7
 800f1f4:	d15e      	bne.n	800f2b4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d104      	bne.n	800f208 <tcp_close_shutdown+0x48>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f202:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f206:	d055      	beq.n	800f2b4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	8b5b      	ldrh	r3, [r3, #26]
 800f20c:	f003 0310 	and.w	r3, r3, #16
 800f210:	2b00      	cmp	r3, #0
 800f212:	d106      	bne.n	800f222 <tcp_close_shutdown+0x62>
 800f214:	4b52      	ldr	r3, [pc, #328]	; (800f360 <tcp_close_shutdown+0x1a0>)
 800f216:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f21a:	4954      	ldr	r1, [pc, #336]	; (800f36c <tcp_close_shutdown+0x1ac>)
 800f21c:	4852      	ldr	r0, [pc, #328]	; (800f368 <tcp_close_shutdown+0x1a8>)
 800f21e:	f008 fe45 	bl	8017eac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f22a:	687d      	ldr	r5, [r7, #4]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3304      	adds	r3, #4
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	8ad2      	ldrh	r2, [r2, #22]
 800f234:	6879      	ldr	r1, [r7, #4]
 800f236:	8b09      	ldrh	r1, [r1, #24]
 800f238:	9102      	str	r1, [sp, #8]
 800f23a:	9201      	str	r2, [sp, #4]
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	462b      	mov	r3, r5
 800f240:	4622      	mov	r2, r4
 800f242:	4601      	mov	r1, r0
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f005 fd8b 	bl	8014d60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f001 fb6c 	bl	8010928 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f250:	4b47      	ldr	r3, [pc, #284]	; (800f370 <tcp_close_shutdown+0x1b0>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	429a      	cmp	r2, r3
 800f258:	d105      	bne.n	800f266 <tcp_close_shutdown+0xa6>
 800f25a:	4b45      	ldr	r3, [pc, #276]	; (800f370 <tcp_close_shutdown+0x1b0>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	4a43      	ldr	r2, [pc, #268]	; (800f370 <tcp_close_shutdown+0x1b0>)
 800f262:	6013      	str	r3, [r2, #0]
 800f264:	e013      	b.n	800f28e <tcp_close_shutdown+0xce>
 800f266:	4b42      	ldr	r3, [pc, #264]	; (800f370 <tcp_close_shutdown+0x1b0>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	60fb      	str	r3, [r7, #12]
 800f26c:	e00c      	b.n	800f288 <tcp_close_shutdown+0xc8>
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	429a      	cmp	r2, r3
 800f276:	d104      	bne.n	800f282 <tcp_close_shutdown+0xc2>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	68da      	ldr	r2, [r3, #12]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	60da      	str	r2, [r3, #12]
 800f280:	e005      	b.n	800f28e <tcp_close_shutdown+0xce>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	60fb      	str	r3, [r7, #12]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1ef      	bne.n	800f26e <tcp_close_shutdown+0xae>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2200      	movs	r2, #0
 800f292:	60da      	str	r2, [r3, #12]
 800f294:	4b37      	ldr	r3, [pc, #220]	; (800f374 <tcp_close_shutdown+0x1b4>)
 800f296:	2201      	movs	r2, #1
 800f298:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f29a:	4b37      	ldr	r3, [pc, #220]	; (800f378 <tcp_close_shutdown+0x1b8>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d102      	bne.n	800f2aa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f2a4:	f004 f800 	bl	80132a8 <tcp_trigger_input_pcb_close>
 800f2a8:	e002      	b.n	800f2b0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff fed6 	bl	800f05c <tcp_free>
      }
      return ERR_OK;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	e050      	b.n	800f356 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	7d1b      	ldrb	r3, [r3, #20]
 800f2b8:	2b02      	cmp	r3, #2
 800f2ba:	d03b      	beq.n	800f334 <tcp_close_shutdown+0x174>
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	dc44      	bgt.n	800f34a <tcp_close_shutdown+0x18a>
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <tcp_close_shutdown+0x10a>
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d02a      	beq.n	800f31e <tcp_close_shutdown+0x15e>
 800f2c8:	e03f      	b.n	800f34a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	8adb      	ldrh	r3, [r3, #22]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d021      	beq.n	800f316 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f2d2:	4b2a      	ldr	r3, [pc, #168]	; (800f37c <tcp_close_shutdown+0x1bc>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d105      	bne.n	800f2e8 <tcp_close_shutdown+0x128>
 800f2dc:	4b27      	ldr	r3, [pc, #156]	; (800f37c <tcp_close_shutdown+0x1bc>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	4a26      	ldr	r2, [pc, #152]	; (800f37c <tcp_close_shutdown+0x1bc>)
 800f2e4:	6013      	str	r3, [r2, #0]
 800f2e6:	e013      	b.n	800f310 <tcp_close_shutdown+0x150>
 800f2e8:	4b24      	ldr	r3, [pc, #144]	; (800f37c <tcp_close_shutdown+0x1bc>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	60bb      	str	r3, [r7, #8]
 800f2ee:	e00c      	b.n	800f30a <tcp_close_shutdown+0x14a>
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d104      	bne.n	800f304 <tcp_close_shutdown+0x144>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	68da      	ldr	r2, [r3, #12]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	60da      	str	r2, [r3, #12]
 800f302:	e005      	b.n	800f310 <tcp_close_shutdown+0x150>
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	60bb      	str	r3, [r7, #8]
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d1ef      	bne.n	800f2f0 <tcp_close_shutdown+0x130>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff fea0 	bl	800f05c <tcp_free>
      break;
 800f31c:	e01a      	b.n	800f354 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f7ff ff14 	bl	800f14c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f324:	6879      	ldr	r1, [r7, #4]
 800f326:	4816      	ldr	r0, [pc, #88]	; (800f380 <tcp_close_shutdown+0x1c0>)
 800f328:	f001 fb4e 	bl	80109c8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff feb1 	bl	800f094 <tcp_free_listen>
      break;
 800f332:	e00f      	b.n	800f354 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f334:	6879      	ldr	r1, [r7, #4]
 800f336:	480e      	ldr	r0, [pc, #56]	; (800f370 <tcp_close_shutdown+0x1b0>)
 800f338:	f001 fb46 	bl	80109c8 <tcp_pcb_remove>
 800f33c:	4b0d      	ldr	r3, [pc, #52]	; (800f374 <tcp_close_shutdown+0x1b4>)
 800f33e:	2201      	movs	r2, #1
 800f340:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7ff fe8a 	bl	800f05c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f348:	e004      	b.n	800f354 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 f81a 	bl	800f384 <tcp_close_shutdown_fin>
 800f350:	4603      	mov	r3, r0
 800f352:	e000      	b.n	800f356 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bdb0      	pop	{r4, r5, r7, pc}
 800f35e:	bf00      	nop
 800f360:	0801b31c 	.word	0x0801b31c
 800f364:	0801b3f0 	.word	0x0801b3f0
 800f368:	0801b360 	.word	0x0801b360
 800f36c:	0801b410 	.word	0x0801b410
 800f370:	2000fb10 	.word	0x2000fb10
 800f374:	2000fb0c 	.word	0x2000fb0c
 800f378:	2000fb24 	.word	0x2000fb24
 800f37c:	2000fb1c 	.word	0x2000fb1c
 800f380:	2000fb18 	.word	0x2000fb18

0800f384 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d106      	bne.n	800f3a0 <tcp_close_shutdown_fin+0x1c>
 800f392:	4b2e      	ldr	r3, [pc, #184]	; (800f44c <tcp_close_shutdown_fin+0xc8>)
 800f394:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f398:	492d      	ldr	r1, [pc, #180]	; (800f450 <tcp_close_shutdown_fin+0xcc>)
 800f39a:	482e      	ldr	r0, [pc, #184]	; (800f454 <tcp_close_shutdown_fin+0xd0>)
 800f39c:	f008 fd86 	bl	8017eac <iprintf>

  switch (pcb->state) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	7d1b      	ldrb	r3, [r3, #20]
 800f3a4:	2b07      	cmp	r3, #7
 800f3a6:	d020      	beq.n	800f3ea <tcp_close_shutdown_fin+0x66>
 800f3a8:	2b07      	cmp	r3, #7
 800f3aa:	dc2b      	bgt.n	800f404 <tcp_close_shutdown_fin+0x80>
 800f3ac:	2b03      	cmp	r3, #3
 800f3ae:	d002      	beq.n	800f3b6 <tcp_close_shutdown_fin+0x32>
 800f3b0:	2b04      	cmp	r3, #4
 800f3b2:	d00d      	beq.n	800f3d0 <tcp_close_shutdown_fin+0x4c>
 800f3b4:	e026      	b.n	800f404 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f004 fde0 	bl	8013f7c <tcp_send_fin>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d11f      	bne.n	800f408 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2205      	movs	r2, #5
 800f3cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f3ce:	e01b      	b.n	800f408 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f004 fdd3 	bl	8013f7c <tcp_send_fin>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d114      	bne.n	800f40c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2205      	movs	r2, #5
 800f3e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f3e8:	e010      	b.n	800f40c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f004 fdc6 	bl	8013f7c <tcp_send_fin>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f3f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d109      	bne.n	800f410 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2209      	movs	r2, #9
 800f400:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f402:	e005      	b.n	800f410 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f404:	2300      	movs	r3, #0
 800f406:	e01c      	b.n	800f442 <tcp_close_shutdown_fin+0xbe>
      break;
 800f408:	bf00      	nop
 800f40a:	e002      	b.n	800f412 <tcp_close_shutdown_fin+0x8e>
      break;
 800f40c:	bf00      	nop
 800f40e:	e000      	b.n	800f412 <tcp_close_shutdown_fin+0x8e>
      break;
 800f410:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d103      	bne.n	800f422 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f004 feec 	bl	80141f8 <tcp_output>
 800f420:	e00d      	b.n	800f43e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f42a:	d108      	bne.n	800f43e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	8b5b      	ldrh	r3, [r3, #26]
 800f430:	f043 0308 	orr.w	r3, r3, #8
 800f434:	b29a      	uxth	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f43a:	2300      	movs	r3, #0
 800f43c:	e001      	b.n	800f442 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f442:	4618      	mov	r0, r3
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	0801b31c 	.word	0x0801b31c
 800f450:	0801b3cc 	.word	0x0801b3cc
 800f454:	0801b360 	.word	0x0801b360

0800f458 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d109      	bne.n	800f47a <tcp_close+0x22>
 800f466:	4b0f      	ldr	r3, [pc, #60]	; (800f4a4 <tcp_close+0x4c>)
 800f468:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f46c:	490e      	ldr	r1, [pc, #56]	; (800f4a8 <tcp_close+0x50>)
 800f46e:	480f      	ldr	r0, [pc, #60]	; (800f4ac <tcp_close+0x54>)
 800f470:	f008 fd1c 	bl	8017eac <iprintf>
 800f474:	f06f 030f 	mvn.w	r3, #15
 800f478:	e00f      	b.n	800f49a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	7d1b      	ldrb	r3, [r3, #20]
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d006      	beq.n	800f490 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	8b5b      	ldrh	r3, [r3, #26]
 800f486:	f043 0310 	orr.w	r3, r3, #16
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f490:	2101      	movs	r1, #1
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f7ff fe94 	bl	800f1c0 <tcp_close_shutdown>
 800f498:	4603      	mov	r3, r0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3708      	adds	r7, #8
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	0801b31c 	.word	0x0801b31c
 800f4a8:	0801b42c 	.word	0x0801b42c
 800f4ac:	0801b360 	.word	0x0801b360

0800f4b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b08e      	sub	sp, #56	; 0x38
 800f4b4:	af04      	add	r7, sp, #16
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d107      	bne.n	800f4d0 <tcp_abandon+0x20>
 800f4c0:	4b52      	ldr	r3, [pc, #328]	; (800f60c <tcp_abandon+0x15c>)
 800f4c2:	f240 223d 	movw	r2, #573	; 0x23d
 800f4c6:	4952      	ldr	r1, [pc, #328]	; (800f610 <tcp_abandon+0x160>)
 800f4c8:	4852      	ldr	r0, [pc, #328]	; (800f614 <tcp_abandon+0x164>)
 800f4ca:	f008 fcef 	bl	8017eac <iprintf>
 800f4ce:	e099      	b.n	800f604 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	7d1b      	ldrb	r3, [r3, #20]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d106      	bne.n	800f4e6 <tcp_abandon+0x36>
 800f4d8:	4b4c      	ldr	r3, [pc, #304]	; (800f60c <tcp_abandon+0x15c>)
 800f4da:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f4de:	494e      	ldr	r1, [pc, #312]	; (800f618 <tcp_abandon+0x168>)
 800f4e0:	484c      	ldr	r0, [pc, #304]	; (800f614 <tcp_abandon+0x164>)
 800f4e2:	f008 fce3 	bl	8017eac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	7d1b      	ldrb	r3, [r3, #20]
 800f4ea:	2b0a      	cmp	r3, #10
 800f4ec:	d107      	bne.n	800f4fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f4ee:	6879      	ldr	r1, [r7, #4]
 800f4f0:	484a      	ldr	r0, [pc, #296]	; (800f61c <tcp_abandon+0x16c>)
 800f4f2:	f001 fa69 	bl	80109c8 <tcp_pcb_remove>
    tcp_free(pcb);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7ff fdb0 	bl	800f05c <tcp_free>
 800f4fc:	e082      	b.n	800f604 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f4fe:	2300      	movs	r3, #0
 800f500:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f50a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f510:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f518:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	7d1b      	ldrb	r3, [r3, #20]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d126      	bne.n	800f576 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	8adb      	ldrh	r3, [r3, #22]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d02e      	beq.n	800f58e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f530:	4b3b      	ldr	r3, [pc, #236]	; (800f620 <tcp_abandon+0x170>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	429a      	cmp	r2, r3
 800f538:	d105      	bne.n	800f546 <tcp_abandon+0x96>
 800f53a:	4b39      	ldr	r3, [pc, #228]	; (800f620 <tcp_abandon+0x170>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	4a37      	ldr	r2, [pc, #220]	; (800f620 <tcp_abandon+0x170>)
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	e013      	b.n	800f56e <tcp_abandon+0xbe>
 800f546:	4b36      	ldr	r3, [pc, #216]	; (800f620 <tcp_abandon+0x170>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	61fb      	str	r3, [r7, #28]
 800f54c:	e00c      	b.n	800f568 <tcp_abandon+0xb8>
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	429a      	cmp	r2, r3
 800f556:	d104      	bne.n	800f562 <tcp_abandon+0xb2>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	68da      	ldr	r2, [r3, #12]
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	60da      	str	r2, [r3, #12]
 800f560:	e005      	b.n	800f56e <tcp_abandon+0xbe>
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	61fb      	str	r3, [r7, #28]
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1ef      	bne.n	800f54e <tcp_abandon+0x9e>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	60da      	str	r2, [r3, #12]
 800f574:	e00b      	b.n	800f58e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	8adb      	ldrh	r3, [r3, #22]
 800f57e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f580:	6879      	ldr	r1, [r7, #4]
 800f582:	4828      	ldr	r0, [pc, #160]	; (800f624 <tcp_abandon+0x174>)
 800f584:	f001 fa20 	bl	80109c8 <tcp_pcb_remove>
 800f588:	4b27      	ldr	r3, [pc, #156]	; (800f628 <tcp_abandon+0x178>)
 800f58a:	2201      	movs	r2, #1
 800f58c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f592:	2b00      	cmp	r3, #0
 800f594:	d004      	beq.n	800f5a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f59a:	4618      	mov	r0, r3
 800f59c:	f000 fed6 	bl	801034c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d004      	beq.n	800f5b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 fecd 	bl	801034c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d004      	beq.n	800f5c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f000 fec4 	bl	801034c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00e      	beq.n	800f5e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	3304      	adds	r3, #4
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	8b12      	ldrh	r2, [r2, #24]
 800f5d4:	9202      	str	r2, [sp, #8]
 800f5d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f5d8:	9201      	str	r2, [sp, #4]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	697a      	ldr	r2, [r7, #20]
 800f5e0:	69b9      	ldr	r1, [r7, #24]
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f005 fbbc 	bl	8014d60 <tcp_rst>
    }
    last_state = pcb->state;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	7d1b      	ldrb	r3, [r3, #20]
 800f5ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff fd34 	bl	800f05c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d004      	beq.n	800f604 <tcp_abandon+0x154>
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	f06f 010c 	mvn.w	r1, #12
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	4798      	blx	r3
  }
}
 800f604:	3728      	adds	r7, #40	; 0x28
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	0801b31c 	.word	0x0801b31c
 800f610:	0801b460 	.word	0x0801b460
 800f614:	0801b360 	.word	0x0801b360
 800f618:	0801b47c 	.word	0x0801b47c
 800f61c:	2000fb20 	.word	0x2000fb20
 800f620:	2000fb1c 	.word	0x2000fb1c
 800f624:	2000fb10 	.word	0x2000fb10
 800f628:	2000fb0c 	.word	0x2000fb0c

0800f62c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f634:	2101      	movs	r1, #1
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f7ff ff3a 	bl	800f4b0 <tcp_abandon>
}
 800f63c:	bf00      	nop
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b088      	sub	sp, #32
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	4613      	mov	r3, r2
 800f650:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f652:	2304      	movs	r3, #4
 800f654:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f65c:	4b3e      	ldr	r3, [pc, #248]	; (800f758 <tcp_bind+0x114>)
 800f65e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d109      	bne.n	800f67a <tcp_bind+0x36>
 800f666:	4b3d      	ldr	r3, [pc, #244]	; (800f75c <tcp_bind+0x118>)
 800f668:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f66c:	493c      	ldr	r1, [pc, #240]	; (800f760 <tcp_bind+0x11c>)
 800f66e:	483d      	ldr	r0, [pc, #244]	; (800f764 <tcp_bind+0x120>)
 800f670:	f008 fc1c 	bl	8017eac <iprintf>
 800f674:	f06f 030f 	mvn.w	r3, #15
 800f678:	e06a      	b.n	800f750 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	7d1b      	ldrb	r3, [r3, #20]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d009      	beq.n	800f696 <tcp_bind+0x52>
 800f682:	4b36      	ldr	r3, [pc, #216]	; (800f75c <tcp_bind+0x118>)
 800f684:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f688:	4937      	ldr	r1, [pc, #220]	; (800f768 <tcp_bind+0x124>)
 800f68a:	4836      	ldr	r0, [pc, #216]	; (800f764 <tcp_bind+0x120>)
 800f68c:	f008 fc0e 	bl	8017eac <iprintf>
 800f690:	f06f 0305 	mvn.w	r3, #5
 800f694:	e05c      	b.n	800f750 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f696:	88fb      	ldrh	r3, [r7, #6]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d109      	bne.n	800f6b0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f69c:	f000 f9f0 	bl	800fa80 <tcp_new_port>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f6a4:	88fb      	ldrh	r3, [r7, #6]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d135      	bne.n	800f716 <tcp_bind+0xd2>
      return ERR_BUF;
 800f6aa:	f06f 0301 	mvn.w	r3, #1
 800f6ae:	e04f      	b.n	800f750 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	61fb      	str	r3, [r7, #28]
 800f6b4:	e02b      	b.n	800f70e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f6b6:	4a2d      	ldr	r2, [pc, #180]	; (800f76c <tcp_bind+0x128>)
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	61bb      	str	r3, [r7, #24]
 800f6c2:	e01e      	b.n	800f702 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	8adb      	ldrh	r3, [r3, #22]
 800f6c8:	88fa      	ldrh	r2, [r7, #6]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d116      	bne.n	800f6fc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f6ce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d010      	beq.n	800f6f6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00c      	beq.n	800f6f6 <tcp_bind+0xb2>
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d009      	beq.n	800f6f6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d005      	beq.n	800f6f6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d102      	bne.n	800f6fc <tcp_bind+0xb8>
              return ERR_USE;
 800f6f6:	f06f 0307 	mvn.w	r3, #7
 800f6fa:	e029      	b.n	800f750 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	61bb      	str	r3, [r7, #24]
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1dd      	bne.n	800f6c4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	3301      	adds	r3, #1
 800f70c:	61fb      	str	r3, [r7, #28]
 800f70e:	69fa      	ldr	r2, [r7, #28]
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	429a      	cmp	r2, r3
 800f714:	dbcf      	blt.n	800f6b6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00c      	beq.n	800f736 <tcp_bind+0xf2>
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d008      	beq.n	800f736 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d002      	beq.n	800f730 <tcp_bind+0xec>
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	e000      	b.n	800f732 <tcp_bind+0xee>
 800f730:	2300      	movs	r3, #0
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	88fa      	ldrh	r2, [r7, #6]
 800f73a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f73c:	4b0c      	ldr	r3, [pc, #48]	; (800f770 <tcp_bind+0x12c>)
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	60da      	str	r2, [r3, #12]
 800f744:	4a0a      	ldr	r2, [pc, #40]	; (800f770 <tcp_bind+0x12c>)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6013      	str	r3, [r2, #0]
 800f74a:	f005 fccb 	bl	80150e4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3720      	adds	r7, #32
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	080242c8 	.word	0x080242c8
 800f75c:	0801b31c 	.word	0x0801b31c
 800f760:	0801b4b0 	.word	0x0801b4b0
 800f764:	0801b360 	.word	0x0801b360
 800f768:	0801b4c8 	.word	0x0801b4c8
 800f76c:	080242a0 	.word	0x080242a0
 800f770:	2000fb1c 	.word	0x2000fb1c

0800f774 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	4613      	mov	r3, r2
 800f780:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d106      	bne.n	800f796 <tcp_accept_null+0x22>
 800f788:	4b07      	ldr	r3, [pc, #28]	; (800f7a8 <tcp_accept_null+0x34>)
 800f78a:	f240 320f 	movw	r2, #783	; 0x30f
 800f78e:	4907      	ldr	r1, [pc, #28]	; (800f7ac <tcp_accept_null+0x38>)
 800f790:	4807      	ldr	r0, [pc, #28]	; (800f7b0 <tcp_accept_null+0x3c>)
 800f792:	f008 fb8b 	bl	8017eac <iprintf>

  tcp_abort(pcb);
 800f796:	68b8      	ldr	r0, [r7, #8]
 800f798:	f7ff ff48 	bl	800f62c <tcp_abort>

  return ERR_ABRT;
 800f79c:	f06f 030c 	mvn.w	r3, #12
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	0801b31c 	.word	0x0801b31c
 800f7ac:	0801b4f0 	.word	0x0801b4f0
 800f7b0:	0801b360 	.word	0x0801b360

0800f7b4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800f7c0:	78fb      	ldrb	r3, [r7, #3]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 f806 	bl	800f7d8 <tcp_listen_with_backlog_and_err>
 800f7cc:	4603      	mov	r3, r0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	607a      	str	r2, [r7, #4]
 800f7e4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d109      	bne.n	800f804 <tcp_listen_with_backlog_and_err+0x2c>
 800f7f0:	4b47      	ldr	r3, [pc, #284]	; (800f910 <tcp_listen_with_backlog_and_err+0x138>)
 800f7f2:	f240 3259 	movw	r2, #857	; 0x359
 800f7f6:	4947      	ldr	r1, [pc, #284]	; (800f914 <tcp_listen_with_backlog_and_err+0x13c>)
 800f7f8:	4847      	ldr	r0, [pc, #284]	; (800f918 <tcp_listen_with_backlog_and_err+0x140>)
 800f7fa:	f008 fb57 	bl	8017eac <iprintf>
 800f7fe:	23f0      	movs	r3, #240	; 0xf0
 800f800:	76fb      	strb	r3, [r7, #27]
 800f802:	e079      	b.n	800f8f8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	7d1b      	ldrb	r3, [r3, #20]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d009      	beq.n	800f820 <tcp_listen_with_backlog_and_err+0x48>
 800f80c:	4b40      	ldr	r3, [pc, #256]	; (800f910 <tcp_listen_with_backlog_and_err+0x138>)
 800f80e:	f240 325a 	movw	r2, #858	; 0x35a
 800f812:	4942      	ldr	r1, [pc, #264]	; (800f91c <tcp_listen_with_backlog_and_err+0x144>)
 800f814:	4840      	ldr	r0, [pc, #256]	; (800f918 <tcp_listen_with_backlog_and_err+0x140>)
 800f816:	f008 fb49 	bl	8017eac <iprintf>
 800f81a:	23f1      	movs	r3, #241	; 0xf1
 800f81c:	76fb      	strb	r3, [r7, #27]
 800f81e:	e06b      	b.n	800f8f8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	7d1b      	ldrb	r3, [r3, #20]
 800f824:	2b01      	cmp	r3, #1
 800f826:	d104      	bne.n	800f832 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f82c:	23f7      	movs	r3, #247	; 0xf7
 800f82e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f830:	e062      	b.n	800f8f8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f832:	2002      	movs	r0, #2
 800f834:	f7fe fb14 	bl	800de60 <memp_malloc>
 800f838:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d102      	bne.n	800f846 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f840:	23ff      	movs	r3, #255	; 0xff
 800f842:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f844:	e058      	b.n	800f8f8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	691a      	ldr	r2, [r3, #16]
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	8ada      	ldrh	r2, [r3, #22]
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	2201      	movs	r2, #1
 800f85a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	7d5a      	ldrb	r2, [r3, #21]
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	7a5a      	ldrb	r2, [r3, #9]
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	2200      	movs	r2, #0
 800f870:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	7ada      	ldrb	r2, [r3, #11]
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	7a9a      	ldrb	r2, [r3, #10]
 800f87e:	69fb      	ldr	r3, [r7, #28]
 800f880:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	8adb      	ldrh	r3, [r3, #22]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d021      	beq.n	800f8d6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f892:	4b23      	ldr	r3, [pc, #140]	; (800f920 <tcp_listen_with_backlog_and_err+0x148>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d105      	bne.n	800f8a8 <tcp_listen_with_backlog_and_err+0xd0>
 800f89c:	4b20      	ldr	r3, [pc, #128]	; (800f920 <tcp_listen_with_backlog_and_err+0x148>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	4a1f      	ldr	r2, [pc, #124]	; (800f920 <tcp_listen_with_backlog_and_err+0x148>)
 800f8a4:	6013      	str	r3, [r2, #0]
 800f8a6:	e013      	b.n	800f8d0 <tcp_listen_with_backlog_and_err+0xf8>
 800f8a8:	4b1d      	ldr	r3, [pc, #116]	; (800f920 <tcp_listen_with_backlog_and_err+0x148>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	617b      	str	r3, [r7, #20]
 800f8ae:	e00c      	b.n	800f8ca <tcp_listen_with_backlog_and_err+0xf2>
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d104      	bne.n	800f8c4 <tcp_listen_with_backlog_and_err+0xec>
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	68da      	ldr	r2, [r3, #12]
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	60da      	str	r2, [r3, #12]
 800f8c2:	e005      	b.n	800f8d0 <tcp_listen_with_backlog_and_err+0xf8>
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	617b      	str	r3, [r7, #20]
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d1ef      	bne.n	800f8b0 <tcp_listen_with_backlog_and_err+0xd8>
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff fbc0 	bl	800f05c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	4a11      	ldr	r2, [pc, #68]	; (800f924 <tcp_listen_with_backlog_and_err+0x14c>)
 800f8e0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f8e2:	4b11      	ldr	r3, [pc, #68]	; (800f928 <tcp_listen_with_backlog_and_err+0x150>)
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	60da      	str	r2, [r3, #12]
 800f8ea:	4a0f      	ldr	r2, [pc, #60]	; (800f928 <tcp_listen_with_backlog_and_err+0x150>)
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	6013      	str	r3, [r2, #0]
 800f8f0:	f005 fbf8 	bl	80150e4 <tcp_timer_needed>
  res = ERR_OK;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d002      	beq.n	800f904 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	7efa      	ldrb	r2, [r7, #27]
 800f902:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f904:	69fb      	ldr	r3, [r7, #28]
}
 800f906:	4618      	mov	r0, r3
 800f908:	3720      	adds	r7, #32
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	0801b31c 	.word	0x0801b31c
 800f914:	0801b510 	.word	0x0801b510
 800f918:	0801b360 	.word	0x0801b360
 800f91c:	0801b540 	.word	0x0801b540
 800f920:	2000fb1c 	.word	0x2000fb1c
 800f924:	0800f775 	.word	0x0800f775
 800f928:	2000fb18 	.word	0x2000fb18

0800f92c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d106      	bne.n	800f948 <tcp_update_rcv_ann_wnd+0x1c>
 800f93a:	4b25      	ldr	r3, [pc, #148]	; (800f9d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800f93c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f940:	4924      	ldr	r1, [pc, #144]	; (800f9d4 <tcp_update_rcv_ann_wnd+0xa8>)
 800f942:	4825      	ldr	r0, [pc, #148]	; (800f9d8 <tcp_update_rcv_ann_wnd+0xac>)
 800f944:	f008 fab2 	bl	8017eac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f950:	4413      	add	r3, r2
 800f952:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f95c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f960:	bf28      	it	cs
 800f962:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f966:	b292      	uxth	r2, r2
 800f968:	4413      	add	r3, r2
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	db08      	blt.n	800f984 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	1ad3      	subs	r3, r2, r3
 800f982:	e020      	b.n	800f9c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	dd03      	ble.n	800f99a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f998:	e014      	b.n	800f9c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a2:	1ad3      	subs	r3, r2, r3
 800f9a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9ac:	d306      	bcc.n	800f9bc <tcp_update_rcv_ann_wnd+0x90>
 800f9ae:	4b08      	ldr	r3, [pc, #32]	; (800f9d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800f9b0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f9b4:	4909      	ldr	r1, [pc, #36]	; (800f9dc <tcp_update_rcv_ann_wnd+0xb0>)
 800f9b6:	4808      	ldr	r0, [pc, #32]	; (800f9d8 <tcp_update_rcv_ann_wnd+0xac>)
 800f9b8:	f008 fa78 	bl	8017eac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f9c4:	2300      	movs	r3, #0
  }
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	0801b31c 	.word	0x0801b31c
 800f9d4:	0801b578 	.word	0x0801b578
 800f9d8:	0801b360 	.word	0x0801b360
 800f9dc:	0801b59c 	.word	0x0801b59c

0800f9e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d107      	bne.n	800fa02 <tcp_recved+0x22>
 800f9f2:	4b1f      	ldr	r3, [pc, #124]	; (800fa70 <tcp_recved+0x90>)
 800f9f4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f9f8:	491e      	ldr	r1, [pc, #120]	; (800fa74 <tcp_recved+0x94>)
 800f9fa:	481f      	ldr	r0, [pc, #124]	; (800fa78 <tcp_recved+0x98>)
 800f9fc:	f008 fa56 	bl	8017eac <iprintf>
 800fa00:	e032      	b.n	800fa68 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	7d1b      	ldrb	r3, [r3, #20]
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d106      	bne.n	800fa18 <tcp_recved+0x38>
 800fa0a:	4b19      	ldr	r3, [pc, #100]	; (800fa70 <tcp_recved+0x90>)
 800fa0c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fa10:	491a      	ldr	r1, [pc, #104]	; (800fa7c <tcp_recved+0x9c>)
 800fa12:	4819      	ldr	r0, [pc, #100]	; (800fa78 <tcp_recved+0x98>)
 800fa14:	f008 fa4a 	bl	8017eac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa1c:	887b      	ldrh	r3, [r7, #2]
 800fa1e:	4413      	add	r3, r2
 800fa20:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fa22:	89fb      	ldrh	r3, [r7, #14]
 800fa24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa28:	d804      	bhi.n	800fa34 <tcp_recved+0x54>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa2e:	89fa      	ldrh	r2, [r7, #14]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d204      	bcs.n	800fa3e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa3a:	851a      	strh	r2, [r3, #40]	; 0x28
 800fa3c:	e002      	b.n	800fa44 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	89fa      	ldrh	r2, [r7, #14]
 800fa42:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7ff ff71 	bl	800f92c <tcp_update_rcv_ann_wnd>
 800fa4a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fa52:	d309      	bcc.n	800fa68 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	8b5b      	ldrh	r3, [r3, #26]
 800fa58:	f043 0302 	orr.w	r3, r3, #2
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f004 fbc8 	bl	80141f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	0801b31c 	.word	0x0801b31c
 800fa74:	0801b5b8 	.word	0x0801b5b8
 800fa78:	0801b360 	.word	0x0801b360
 800fa7c:	0801b5d0 	.word	0x0801b5d0

0800fa80 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fa86:	2300      	movs	r3, #0
 800fa88:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fa8a:	4b1e      	ldr	r3, [pc, #120]	; (800fb04 <tcp_new_port+0x84>)
 800fa8c:	881b      	ldrh	r3, [r3, #0]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	4b1c      	ldr	r3, [pc, #112]	; (800fb04 <tcp_new_port+0x84>)
 800fa94:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fa96:	4b1b      	ldr	r3, [pc, #108]	; (800fb04 <tcp_new_port+0x84>)
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d103      	bne.n	800faaa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800faa2:	4b18      	ldr	r3, [pc, #96]	; (800fb04 <tcp_new_port+0x84>)
 800faa4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800faa8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800faaa:	2300      	movs	r3, #0
 800faac:	71fb      	strb	r3, [r7, #7]
 800faae:	e01e      	b.n	800faee <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fab0:	79fb      	ldrb	r3, [r7, #7]
 800fab2:	4a15      	ldr	r2, [pc, #84]	; (800fb08 <tcp_new_port+0x88>)
 800fab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	603b      	str	r3, [r7, #0]
 800fabc:	e011      	b.n	800fae2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	8ada      	ldrh	r2, [r3, #22]
 800fac2:	4b10      	ldr	r3, [pc, #64]	; (800fb04 <tcp_new_port+0x84>)
 800fac4:	881b      	ldrh	r3, [r3, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d108      	bne.n	800fadc <tcp_new_port+0x5c>
        n++;
 800faca:	88bb      	ldrh	r3, [r7, #4]
 800facc:	3301      	adds	r3, #1
 800face:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fad0:	88bb      	ldrh	r3, [r7, #4]
 800fad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fad6:	d3d8      	bcc.n	800fa8a <tcp_new_port+0xa>
          return 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	e00d      	b.n	800faf8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	68db      	ldr	r3, [r3, #12]
 800fae0:	603b      	str	r3, [r7, #0]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1ea      	bne.n	800fabe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fae8:	79fb      	ldrb	r3, [r7, #7]
 800faea:	3301      	adds	r3, #1
 800faec:	71fb      	strb	r3, [r7, #7]
 800faee:	79fb      	ldrb	r3, [r7, #7]
 800faf0:	2b03      	cmp	r3, #3
 800faf2:	d9dd      	bls.n	800fab0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800faf4:	4b03      	ldr	r3, [pc, #12]	; (800fb04 <tcp_new_port+0x84>)
 800faf6:	881b      	ldrh	r3, [r3, #0]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr
 800fb04:	200004a2 	.word	0x200004a2
 800fb08:	080242a0 	.word	0x080242a0

0800fb0c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fb0c:	b5b0      	push	{r4, r5, r7, lr}
 800fb0e:	b090      	sub	sp, #64	; 0x40
 800fb10:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fb18:	4b94      	ldr	r3, [pc, #592]	; (800fd6c <tcp_slowtmr+0x260>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	4a93      	ldr	r2, [pc, #588]	; (800fd6c <tcp_slowtmr+0x260>)
 800fb20:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fb22:	4b93      	ldr	r3, [pc, #588]	; (800fd70 <tcp_slowtmr+0x264>)
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	3301      	adds	r3, #1
 800fb28:	b2da      	uxtb	r2, r3
 800fb2a:	4b91      	ldr	r3, [pc, #580]	; (800fd70 <tcp_slowtmr+0x264>)
 800fb2c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fb32:	4b90      	ldr	r3, [pc, #576]	; (800fd74 <tcp_slowtmr+0x268>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fb38:	e29f      	b.n	801007a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3c:	7d1b      	ldrb	r3, [r3, #20]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d106      	bne.n	800fb50 <tcp_slowtmr+0x44>
 800fb42:	4b8d      	ldr	r3, [pc, #564]	; (800fd78 <tcp_slowtmr+0x26c>)
 800fb44:	f240 42be 	movw	r2, #1214	; 0x4be
 800fb48:	498c      	ldr	r1, [pc, #560]	; (800fd7c <tcp_slowtmr+0x270>)
 800fb4a:	488d      	ldr	r0, [pc, #564]	; (800fd80 <tcp_slowtmr+0x274>)
 800fb4c:	f008 f9ae 	bl	8017eac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	7d1b      	ldrb	r3, [r3, #20]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d106      	bne.n	800fb66 <tcp_slowtmr+0x5a>
 800fb58:	4b87      	ldr	r3, [pc, #540]	; (800fd78 <tcp_slowtmr+0x26c>)
 800fb5a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fb5e:	4989      	ldr	r1, [pc, #548]	; (800fd84 <tcp_slowtmr+0x278>)
 800fb60:	4887      	ldr	r0, [pc, #540]	; (800fd80 <tcp_slowtmr+0x274>)
 800fb62:	f008 f9a3 	bl	8017eac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb68:	7d1b      	ldrb	r3, [r3, #20]
 800fb6a:	2b0a      	cmp	r3, #10
 800fb6c:	d106      	bne.n	800fb7c <tcp_slowtmr+0x70>
 800fb6e:	4b82      	ldr	r3, [pc, #520]	; (800fd78 <tcp_slowtmr+0x26c>)
 800fb70:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fb74:	4984      	ldr	r1, [pc, #528]	; (800fd88 <tcp_slowtmr+0x27c>)
 800fb76:	4882      	ldr	r0, [pc, #520]	; (800fd80 <tcp_slowtmr+0x274>)
 800fb78:	f008 f998 	bl	8017eac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7e:	7f9a      	ldrb	r2, [r3, #30]
 800fb80:	4b7b      	ldr	r3, [pc, #492]	; (800fd70 <tcp_slowtmr+0x264>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d105      	bne.n	800fb94 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fb92:	e272      	b.n	801007a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fb94:	4b76      	ldr	r3, [pc, #472]	; (800fd70 <tcp_slowtmr+0x264>)
 800fb96:	781a      	ldrb	r2, [r3, #0]
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fba2:	2300      	movs	r3, #0
 800fba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d10a      	bne.n	800fbc6 <tcp_slowtmr+0xba>
 800fbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbb6:	2b05      	cmp	r3, #5
 800fbb8:	d905      	bls.n	800fbc6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbc4:	e11e      	b.n	800fe04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbcc:	2b0b      	cmp	r3, #11
 800fbce:	d905      	bls.n	800fbdc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbda:	e113      	b.n	800fe04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d075      	beq.n	800fcd2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d006      	beq.n	800fbfc <tcp_slowtmr+0xf0>
 800fbee:	4b62      	ldr	r3, [pc, #392]	; (800fd78 <tcp_slowtmr+0x26c>)
 800fbf0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fbf4:	4965      	ldr	r1, [pc, #404]	; (800fd8c <tcp_slowtmr+0x280>)
 800fbf6:	4862      	ldr	r0, [pc, #392]	; (800fd80 <tcp_slowtmr+0x274>)
 800fbf8:	f008 f958 	bl	8017eac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d106      	bne.n	800fc12 <tcp_slowtmr+0x106>
 800fc04:	4b5c      	ldr	r3, [pc, #368]	; (800fd78 <tcp_slowtmr+0x26c>)
 800fc06:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fc0a:	4961      	ldr	r1, [pc, #388]	; (800fd90 <tcp_slowtmr+0x284>)
 800fc0c:	485c      	ldr	r0, [pc, #368]	; (800fd80 <tcp_slowtmr+0x274>)
 800fc0e:	f008 f94d 	bl	8017eac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc14:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc18:	2b0b      	cmp	r3, #11
 800fc1a:	d905      	bls.n	800fc28 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc20:	3301      	adds	r3, #1
 800fc22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc26:	e0ed      	b.n	800fe04 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	4a58      	ldr	r2, [pc, #352]	; (800fd94 <tcp_slowtmr+0x288>)
 800fc32:	5cd3      	ldrb	r3, [r2, r3]
 800fc34:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fc3c:	7c7a      	ldrb	r2, [r7, #17]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d907      	bls.n	800fc52 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fc48:	3301      	adds	r3, #1
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fc58:	7c7a      	ldrb	r2, [r7, #17]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	f200 80d2 	bhi.w	800fe04 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fc60:	2301      	movs	r3, #1
 800fc62:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d108      	bne.n	800fc80 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fc6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc70:	f005 f96a 	bl	8014f48 <tcp_zero_window_probe>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d014      	beq.n	800fca4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	623b      	str	r3, [r7, #32]
 800fc7e:	e011      	b.n	800fca4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc86:	4619      	mov	r1, r3
 800fc88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc8a:	f004 f82f 	bl	8013cec <tcp_split_unsent_seg>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d107      	bne.n	800fca4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fc94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc96:	f004 faaf 	bl	80141f8 <tcp_output>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d101      	bne.n	800fca4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f000 80ac 	beq.w	800fe04 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fcba:	2b06      	cmp	r3, #6
 800fcbc:	f200 80a2 	bhi.w	800fe04 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fccc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fcd0:	e098      	b.n	800fe04 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	db0f      	blt.n	800fcfc <tcp_slowtmr+0x1f0>
 800fcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcde:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fce2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d008      	beq.n	800fcfc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	b21a      	sxth	r2, r3
 800fcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd04:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	db7b      	blt.n	800fe04 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fd0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd0e:	f004 fd65 	bl	80147dc <tcp_rexmit_rto_prepare>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d007      	beq.n	800fd28 <tcp_slowtmr+0x21c>
 800fd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d171      	bne.n	800fe04 <tcp_slowtmr+0x2f8>
 800fd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d06d      	beq.n	800fe04 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2a:	7d1b      	ldrb	r3, [r3, #20]
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	d03a      	beq.n	800fda6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd36:	2b0c      	cmp	r3, #12
 800fd38:	bf28      	it	cs
 800fd3a:	230c      	movcs	r3, #12
 800fd3c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd44:	10db      	asrs	r3, r3, #3
 800fd46:	b21b      	sxth	r3, r3
 800fd48:	461a      	mov	r2, r3
 800fd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd50:	4413      	add	r3, r2
 800fd52:	7efa      	ldrb	r2, [r7, #27]
 800fd54:	4910      	ldr	r1, [pc, #64]	; (800fd98 <tcp_slowtmr+0x28c>)
 800fd56:	5c8a      	ldrb	r2, [r1, r2]
 800fd58:	4093      	lsls	r3, r2
 800fd5a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fd62:	4293      	cmp	r3, r2
 800fd64:	dc1a      	bgt.n	800fd9c <tcp_slowtmr+0x290>
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	b21a      	sxth	r2, r3
 800fd6a:	e019      	b.n	800fda0 <tcp_slowtmr+0x294>
 800fd6c:	2000fb14 	.word	0x2000fb14
 800fd70:	20000a32 	.word	0x20000a32
 800fd74:	2000fb10 	.word	0x2000fb10
 800fd78:	0801b31c 	.word	0x0801b31c
 800fd7c:	0801b660 	.word	0x0801b660
 800fd80:	0801b360 	.word	0x0801b360
 800fd84:	0801b68c 	.word	0x0801b68c
 800fd88:	0801b6b8 	.word	0x0801b6b8
 800fd8c:	0801b6e8 	.word	0x0801b6e8
 800fd90:	0801b71c 	.word	0x0801b71c
 800fd94:	08024298 	.word	0x08024298
 800fd98:	08024288 	.word	0x08024288
 800fd9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda8:	2200      	movs	r2, #0
 800fdaa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	bf28      	it	cs
 800fdbc:	4613      	movcs	r3, r2
 800fdbe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fdc0:	8a7b      	ldrh	r3, [r7, #18]
 800fdc2:	085b      	lsrs	r3, r3, #1
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdd6:	005b      	lsls	r3, r3, #1
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d206      	bcs.n	800fdec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fdfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe00:	f004 fd5c 	bl	80148bc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fe04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe06:	7d1b      	ldrb	r3, [r3, #20]
 800fe08:	2b06      	cmp	r3, #6
 800fe0a:	d111      	bne.n	800fe30 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	8b5b      	ldrh	r3, [r3, #26]
 800fe10:	f003 0310 	and.w	r3, r3, #16
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00b      	beq.n	800fe30 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe18:	4b9d      	ldr	r3, [pc, #628]	; (8010090 <tcp_slowtmr+0x584>)
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	6a1b      	ldr	r3, [r3, #32]
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	2b28      	cmp	r3, #40	; 0x28
 800fe24:	d904      	bls.n	800fe30 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fe26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fe30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe32:	7a5b      	ldrb	r3, [r3, #9]
 800fe34:	f003 0308 	and.w	r3, r3, #8
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d04c      	beq.n	800fed6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fe40:	2b04      	cmp	r3, #4
 800fe42:	d003      	beq.n	800fe4c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fe44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe46:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fe48:	2b07      	cmp	r3, #7
 800fe4a:	d144      	bne.n	800fed6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe4c:	4b90      	ldr	r3, [pc, #576]	; (8010090 <tcp_slowtmr+0x584>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe52:	6a1b      	ldr	r3, [r3, #32]
 800fe54:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe5c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800fe60:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800fe64:	498b      	ldr	r1, [pc, #556]	; (8010094 <tcp_slowtmr+0x588>)
 800fe66:	fba1 1303 	umull	r1, r3, r1, r3
 800fe6a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d90a      	bls.n	800fe86 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fe70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe74:	3301      	adds	r3, #1
 800fe76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fe7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe7e:	3301      	adds	r3, #1
 800fe80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe84:	e027      	b.n	800fed6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe86:	4b82      	ldr	r3, [pc, #520]	; (8010090 <tcp_slowtmr+0x584>)
 800fe88:	681a      	ldr	r2, [r3, #0]
 800fe8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8c:	6a1b      	ldr	r3, [r3, #32]
 800fe8e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fe90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe92:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fe96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	4b7e      	ldr	r3, [pc, #504]	; (8010098 <tcp_slowtmr+0x58c>)
 800fea0:	fb03 f300 	mul.w	r3, r3, r0
 800fea4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fea6:	497b      	ldr	r1, [pc, #492]	; (8010094 <tcp_slowtmr+0x588>)
 800fea8:	fba1 1303 	umull	r1, r3, r1, r3
 800feac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800feae:	429a      	cmp	r2, r3
 800feb0:	d911      	bls.n	800fed6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800feb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800feb4:	f005 f808 	bl	8014ec8 <tcp_keepalive>
 800feb8:	4603      	mov	r3, r0
 800feba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800febe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d107      	bne.n	800fed6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800fec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fecc:	3301      	adds	r3, #1
 800fece:	b2da      	uxtb	r2, r3
 800fed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d011      	beq.n	800ff02 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fede:	4b6c      	ldr	r3, [pc, #432]	; (8010090 <tcp_slowtmr+0x584>)
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee4:	6a1b      	ldr	r3, [r3, #32]
 800fee6:	1ad2      	subs	r2, r2, r3
 800fee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800feee:	4619      	mov	r1, r3
 800fef0:	460b      	mov	r3, r1
 800fef2:	005b      	lsls	r3, r3, #1
 800fef4:	440b      	add	r3, r1
 800fef6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d302      	bcc.n	800ff02 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fefc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fefe:	f000 fec7 	bl	8010c90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ff02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff04:	7d1b      	ldrb	r3, [r3, #20]
 800ff06:	2b03      	cmp	r3, #3
 800ff08:	d10b      	bne.n	800ff22 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff0a:	4b61      	ldr	r3, [pc, #388]	; (8010090 <tcp_slowtmr+0x584>)
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	2b28      	cmp	r3, #40	; 0x28
 800ff16:	d904      	bls.n	800ff22 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ff18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ff22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff24:	7d1b      	ldrb	r3, [r3, #20]
 800ff26:	2b09      	cmp	r3, #9
 800ff28:	d10b      	bne.n	800ff42 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ff2a:	4b59      	ldr	r3, [pc, #356]	; (8010090 <tcp_slowtmr+0x584>)
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff30:	6a1b      	ldr	r3, [r3, #32]
 800ff32:	1ad3      	subs	r3, r2, r3
 800ff34:	2bf0      	cmp	r3, #240	; 0xf0
 800ff36:	d904      	bls.n	800ff42 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ff38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ff42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d060      	beq.n	801000c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ff4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff50:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ff52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff54:	f000 fce8 	bl	8010928 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ff58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d010      	beq.n	800ff80 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ff5e:	4b4f      	ldr	r3, [pc, #316]	; (801009c <tcp_slowtmr+0x590>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d106      	bne.n	800ff76 <tcp_slowtmr+0x46a>
 800ff68:	4b4d      	ldr	r3, [pc, #308]	; (80100a0 <tcp_slowtmr+0x594>)
 800ff6a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ff6e:	494d      	ldr	r1, [pc, #308]	; (80100a4 <tcp_slowtmr+0x598>)
 800ff70:	484d      	ldr	r0, [pc, #308]	; (80100a8 <tcp_slowtmr+0x59c>)
 800ff72:	f007 ff9b 	bl	8017eac <iprintf>
        prev->next = pcb->next;
 800ff76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff78:	68da      	ldr	r2, [r3, #12]
 800ff7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7c:	60da      	str	r2, [r3, #12]
 800ff7e:	e00f      	b.n	800ffa0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ff80:	4b46      	ldr	r3, [pc, #280]	; (801009c <tcp_slowtmr+0x590>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d006      	beq.n	800ff98 <tcp_slowtmr+0x48c>
 800ff8a:	4b45      	ldr	r3, [pc, #276]	; (80100a0 <tcp_slowtmr+0x594>)
 800ff8c:	f240 5271 	movw	r2, #1393	; 0x571
 800ff90:	4946      	ldr	r1, [pc, #280]	; (80100ac <tcp_slowtmr+0x5a0>)
 800ff92:	4845      	ldr	r0, [pc, #276]	; (80100a8 <tcp_slowtmr+0x59c>)
 800ff94:	f007 ff8a 	bl	8017eac <iprintf>
        tcp_active_pcbs = pcb->next;
 800ff98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	4a3f      	ldr	r2, [pc, #252]	; (801009c <tcp_slowtmr+0x590>)
 800ff9e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ffa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d013      	beq.n	800ffd0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ffa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffaa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ffb0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ffb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffb8:	8ad2      	ldrh	r2, [r2, #22]
 800ffba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ffbc:	8b09      	ldrh	r1, [r1, #24]
 800ffbe:	9102      	str	r1, [sp, #8]
 800ffc0:	9201      	str	r2, [sp, #4]
 800ffc2:	9300      	str	r3, [sp, #0]
 800ffc4:	462b      	mov	r3, r5
 800ffc6:	4622      	mov	r2, r4
 800ffc8:	4601      	mov	r1, r0
 800ffca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffcc:	f004 fec8 	bl	8014d60 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ffd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd2:	691b      	ldr	r3, [r3, #16]
 800ffd4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ffd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd8:	7d1b      	ldrb	r3, [r3, #20]
 800ffda:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ffdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffde:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ffe6:	6838      	ldr	r0, [r7, #0]
 800ffe8:	f7ff f838 	bl	800f05c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ffec:	4b30      	ldr	r3, [pc, #192]	; (80100b0 <tcp_slowtmr+0x5a4>)
 800ffee:	2200      	movs	r2, #0
 800fff0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d004      	beq.n	8010002 <tcp_slowtmr+0x4f6>
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f06f 010c 	mvn.w	r1, #12
 800fffe:	68b8      	ldr	r0, [r7, #8]
 8010000:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010002:	4b2b      	ldr	r3, [pc, #172]	; (80100b0 <tcp_slowtmr+0x5a4>)
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d037      	beq.n	801007a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801000a:	e590      	b.n	800fb2e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801000c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010018:	7f1b      	ldrb	r3, [r3, #28]
 801001a:	3301      	adds	r3, #1
 801001c:	b2da      	uxtb	r2, r3
 801001e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010020:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010024:	7f1a      	ldrb	r2, [r3, #28]
 8010026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010028:	7f5b      	ldrb	r3, [r3, #29]
 801002a:	429a      	cmp	r2, r3
 801002c:	d325      	bcc.n	801007a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801002e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010030:	2200      	movs	r2, #0
 8010032:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010034:	4b1e      	ldr	r3, [pc, #120]	; (80100b0 <tcp_slowtmr+0x5a4>)
 8010036:	2200      	movs	r2, #0
 8010038:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801003a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010040:	2b00      	cmp	r3, #0
 8010042:	d00b      	beq.n	801005c <tcp_slowtmr+0x550>
 8010044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801004a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801004c:	6912      	ldr	r2, [r2, #16]
 801004e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010050:	4610      	mov	r0, r2
 8010052:	4798      	blx	r3
 8010054:	4603      	mov	r3, r0
 8010056:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801005a:	e002      	b.n	8010062 <tcp_slowtmr+0x556>
 801005c:	2300      	movs	r3, #0
 801005e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010062:	4b13      	ldr	r3, [pc, #76]	; (80100b0 <tcp_slowtmr+0x5a4>)
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d000      	beq.n	801006c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801006a:	e560      	b.n	800fb2e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801006c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010070:	2b00      	cmp	r3, #0
 8010072:	d102      	bne.n	801007a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010076:	f004 f8bf 	bl	80141f8 <tcp_output>
  while (pcb != NULL) {
 801007a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007c:	2b00      	cmp	r3, #0
 801007e:	f47f ad5c 	bne.w	800fb3a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010082:	2300      	movs	r3, #0
 8010084:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010086:	4b0b      	ldr	r3, [pc, #44]	; (80100b4 <tcp_slowtmr+0x5a8>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801008c:	e067      	b.n	801015e <tcp_slowtmr+0x652>
 801008e:	bf00      	nop
 8010090:	2000fb14 	.word	0x2000fb14
 8010094:	10624dd3 	.word	0x10624dd3
 8010098:	000124f8 	.word	0x000124f8
 801009c:	2000fb10 	.word	0x2000fb10
 80100a0:	0801b31c 	.word	0x0801b31c
 80100a4:	0801b754 	.word	0x0801b754
 80100a8:	0801b360 	.word	0x0801b360
 80100ac:	0801b780 	.word	0x0801b780
 80100b0:	2000fb0c 	.word	0x2000fb0c
 80100b4:	2000fb20 	.word	0x2000fb20
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ba:	7d1b      	ldrb	r3, [r3, #20]
 80100bc:	2b0a      	cmp	r3, #10
 80100be:	d006      	beq.n	80100ce <tcp_slowtmr+0x5c2>
 80100c0:	4b2b      	ldr	r3, [pc, #172]	; (8010170 <tcp_slowtmr+0x664>)
 80100c2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80100c6:	492b      	ldr	r1, [pc, #172]	; (8010174 <tcp_slowtmr+0x668>)
 80100c8:	482b      	ldr	r0, [pc, #172]	; (8010178 <tcp_slowtmr+0x66c>)
 80100ca:	f007 feef 	bl	8017eac <iprintf>
    pcb_remove = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80100d4:	4b29      	ldr	r3, [pc, #164]	; (801017c <tcp_slowtmr+0x670>)
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100da:	6a1b      	ldr	r3, [r3, #32]
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	2bf0      	cmp	r3, #240	; 0xf0
 80100e0:	d904      	bls.n	80100ec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80100e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100e6:	3301      	adds	r3, #1
 80100e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80100ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d02f      	beq.n	8010154 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80100f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100f6:	f000 fc17 	bl	8010928 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80100fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d010      	beq.n	8010122 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010100:	4b1f      	ldr	r3, [pc, #124]	; (8010180 <tcp_slowtmr+0x674>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010106:	429a      	cmp	r2, r3
 8010108:	d106      	bne.n	8010118 <tcp_slowtmr+0x60c>
 801010a:	4b19      	ldr	r3, [pc, #100]	; (8010170 <tcp_slowtmr+0x664>)
 801010c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010110:	491c      	ldr	r1, [pc, #112]	; (8010184 <tcp_slowtmr+0x678>)
 8010112:	4819      	ldr	r0, [pc, #100]	; (8010178 <tcp_slowtmr+0x66c>)
 8010114:	f007 feca 	bl	8017eac <iprintf>
        prev->next = pcb->next;
 8010118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011a:	68da      	ldr	r2, [r3, #12]
 801011c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011e:	60da      	str	r2, [r3, #12]
 8010120:	e00f      	b.n	8010142 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010122:	4b17      	ldr	r3, [pc, #92]	; (8010180 <tcp_slowtmr+0x674>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010128:	429a      	cmp	r2, r3
 801012a:	d006      	beq.n	801013a <tcp_slowtmr+0x62e>
 801012c:	4b10      	ldr	r3, [pc, #64]	; (8010170 <tcp_slowtmr+0x664>)
 801012e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010132:	4915      	ldr	r1, [pc, #84]	; (8010188 <tcp_slowtmr+0x67c>)
 8010134:	4810      	ldr	r0, [pc, #64]	; (8010178 <tcp_slowtmr+0x66c>)
 8010136:	f007 feb9 	bl	8017eac <iprintf>
        tcp_tw_pcbs = pcb->next;
 801013a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	4a10      	ldr	r2, [pc, #64]	; (8010180 <tcp_slowtmr+0x674>)
 8010140:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010144:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801014c:	69f8      	ldr	r0, [r7, #28]
 801014e:	f7fe ff85 	bl	800f05c <tcp_free>
 8010152:	e004      	b.n	801015e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010156:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801015e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1a9      	bne.n	80100b8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010164:	bf00      	nop
 8010166:	bf00      	nop
 8010168:	3730      	adds	r7, #48	; 0x30
 801016a:	46bd      	mov	sp, r7
 801016c:	bdb0      	pop	{r4, r5, r7, pc}
 801016e:	bf00      	nop
 8010170:	0801b31c 	.word	0x0801b31c
 8010174:	0801b7ac 	.word	0x0801b7ac
 8010178:	0801b360 	.word	0x0801b360
 801017c:	2000fb14 	.word	0x2000fb14
 8010180:	2000fb20 	.word	0x2000fb20
 8010184:	0801b7dc 	.word	0x0801b7dc
 8010188:	0801b804 	.word	0x0801b804

0801018c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010192:	4b2d      	ldr	r3, [pc, #180]	; (8010248 <tcp_fasttmr+0xbc>)
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	3301      	adds	r3, #1
 8010198:	b2da      	uxtb	r2, r3
 801019a:	4b2b      	ldr	r3, [pc, #172]	; (8010248 <tcp_fasttmr+0xbc>)
 801019c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801019e:	4b2b      	ldr	r3, [pc, #172]	; (801024c <tcp_fasttmr+0xc0>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80101a4:	e048      	b.n	8010238 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	7f9a      	ldrb	r2, [r3, #30]
 80101aa:	4b27      	ldr	r3, [pc, #156]	; (8010248 <tcp_fasttmr+0xbc>)
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d03f      	beq.n	8010232 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80101b2:	4b25      	ldr	r3, [pc, #148]	; (8010248 <tcp_fasttmr+0xbc>)
 80101b4:	781a      	ldrb	r2, [r3, #0]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	8b5b      	ldrh	r3, [r3, #26]
 80101be:	f003 0301 	and.w	r3, r3, #1
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d010      	beq.n	80101e8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	8b5b      	ldrh	r3, [r3, #26]
 80101ca:	f043 0302 	orr.w	r3, r3, #2
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f004 f80f 	bl	80141f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	8b5b      	ldrh	r3, [r3, #26]
 80101de:	f023 0303 	bic.w	r3, r3, #3
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	8b5b      	ldrh	r3, [r3, #26]
 80101ec:	f003 0308 	and.w	r3, r3, #8
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d009      	beq.n	8010208 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	8b5b      	ldrh	r3, [r3, #26]
 80101f8:	f023 0308 	bic.w	r3, r3, #8
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7ff f8be 	bl	800f384 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00a      	beq.n	801022c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010216:	4b0e      	ldr	r3, [pc, #56]	; (8010250 <tcp_fasttmr+0xc4>)
 8010218:	2200      	movs	r2, #0
 801021a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 f819 	bl	8010254 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010222:	4b0b      	ldr	r3, [pc, #44]	; (8010250 <tcp_fasttmr+0xc4>)
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d000      	beq.n	801022c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801022a:	e7b8      	b.n	801019e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	607b      	str	r3, [r7, #4]
 8010230:	e002      	b.n	8010238 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d1b3      	bne.n	80101a6 <tcp_fasttmr+0x1a>
    }
  }
}
 801023e:	bf00      	nop
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	20000a32 	.word	0x20000a32
 801024c:	2000fb10 	.word	0x2000fb10
 8010250:	2000fb0c 	.word	0x2000fb0c

08010254 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010254:	b590      	push	{r4, r7, lr}
 8010256:	b085      	sub	sp, #20
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d109      	bne.n	8010276 <tcp_process_refused_data+0x22>
 8010262:	4b37      	ldr	r3, [pc, #220]	; (8010340 <tcp_process_refused_data+0xec>)
 8010264:	f240 6209 	movw	r2, #1545	; 0x609
 8010268:	4936      	ldr	r1, [pc, #216]	; (8010344 <tcp_process_refused_data+0xf0>)
 801026a:	4837      	ldr	r0, [pc, #220]	; (8010348 <tcp_process_refused_data+0xf4>)
 801026c:	f007 fe1e 	bl	8017eac <iprintf>
 8010270:	f06f 030f 	mvn.w	r3, #15
 8010274:	e060      	b.n	8010338 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801027a:	7b5b      	ldrb	r3, [r3, #13]
 801027c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010282:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00b      	beq.n	80102ac <tcp_process_refused_data+0x58>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6918      	ldr	r0, [r3, #16]
 801029e:	2300      	movs	r3, #0
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	6879      	ldr	r1, [r7, #4]
 80102a4:	47a0      	blx	r4
 80102a6:	4603      	mov	r3, r0
 80102a8:	73fb      	strb	r3, [r7, #15]
 80102aa:	e007      	b.n	80102bc <tcp_process_refused_data+0x68>
 80102ac:	2300      	movs	r3, #0
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	6879      	ldr	r1, [r7, #4]
 80102b2:	2000      	movs	r0, #0
 80102b4:	f000 f8c2 	bl	801043c <tcp_recv_null>
 80102b8:	4603      	mov	r3, r0
 80102ba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80102bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d12a      	bne.n	801031a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80102c4:	7bbb      	ldrb	r3, [r7, #14]
 80102c6:	f003 0320 	and.w	r3, r3, #32
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d033      	beq.n	8010336 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80102d6:	d005      	beq.n	80102e4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102dc:	3301      	adds	r3, #1
 80102de:	b29a      	uxth	r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d00b      	beq.n	8010306 <tcp_process_refused_data+0xb2>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6918      	ldr	r0, [r3, #16]
 80102f8:	2300      	movs	r3, #0
 80102fa:	2200      	movs	r2, #0
 80102fc:	6879      	ldr	r1, [r7, #4]
 80102fe:	47a0      	blx	r4
 8010300:	4603      	mov	r3, r0
 8010302:	73fb      	strb	r3, [r7, #15]
 8010304:	e001      	b.n	801030a <tcp_process_refused_data+0xb6>
 8010306:	2300      	movs	r3, #0
 8010308:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801030a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801030e:	f113 0f0d 	cmn.w	r3, #13
 8010312:	d110      	bne.n	8010336 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010314:	f06f 030c 	mvn.w	r3, #12
 8010318:	e00e      	b.n	8010338 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801031a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801031e:	f113 0f0d 	cmn.w	r3, #13
 8010322:	d102      	bne.n	801032a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010324:	f06f 030c 	mvn.w	r3, #12
 8010328:	e006      	b.n	8010338 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	68ba      	ldr	r2, [r7, #8]
 801032e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010330:	f06f 0304 	mvn.w	r3, #4
 8010334:	e000      	b.n	8010338 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010336:	2300      	movs	r3, #0
}
 8010338:	4618      	mov	r0, r3
 801033a:	3714      	adds	r7, #20
 801033c:	46bd      	mov	sp, r7
 801033e:	bd90      	pop	{r4, r7, pc}
 8010340:	0801b31c 	.word	0x0801b31c
 8010344:	0801b82c 	.word	0x0801b82c
 8010348:	0801b360 	.word	0x0801b360

0801034c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010354:	e007      	b.n	8010366 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 f80a 	bl	8010376 <tcp_seg_free>
    seg = next;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1f4      	bne.n	8010356 <tcp_segs_free+0xa>
  }
}
 801036c:	bf00      	nop
 801036e:	bf00      	nop
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b082      	sub	sp, #8
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00c      	beq.n	801039e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d004      	beq.n	8010396 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	4618      	mov	r0, r3
 8010392:	f7fe fbc3 	bl	800eb1c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010396:	6879      	ldr	r1, [r7, #4]
 8010398:	2003      	movs	r0, #3
 801039a:	f7fd fdad 	bl	800def8 <memp_free>
  }
}
 801039e:	bf00      	nop
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	460b      	mov	r3, r1
 80103b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d107      	bne.n	80103ca <tcp_setprio+0x22>
 80103ba:	4b07      	ldr	r3, [pc, #28]	; (80103d8 <tcp_setprio+0x30>)
 80103bc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80103c0:	4906      	ldr	r1, [pc, #24]	; (80103dc <tcp_setprio+0x34>)
 80103c2:	4807      	ldr	r0, [pc, #28]	; (80103e0 <tcp_setprio+0x38>)
 80103c4:	f007 fd72 	bl	8017eac <iprintf>
 80103c8:	e002      	b.n	80103d0 <tcp_setprio+0x28>

  pcb->prio = prio;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	78fa      	ldrb	r2, [r7, #3]
 80103ce:	755a      	strb	r2, [r3, #21]
}
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	0801b31c 	.word	0x0801b31c
 80103dc:	0801b854 	.word	0x0801b854
 80103e0:	0801b360 	.word	0x0801b360

080103e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d106      	bne.n	8010400 <tcp_seg_copy+0x1c>
 80103f2:	4b0f      	ldr	r3, [pc, #60]	; (8010430 <tcp_seg_copy+0x4c>)
 80103f4:	f240 6282 	movw	r2, #1666	; 0x682
 80103f8:	490e      	ldr	r1, [pc, #56]	; (8010434 <tcp_seg_copy+0x50>)
 80103fa:	480f      	ldr	r0, [pc, #60]	; (8010438 <tcp_seg_copy+0x54>)
 80103fc:	f007 fd56 	bl	8017eac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010400:	2003      	movs	r0, #3
 8010402:	f7fd fd2d 	bl	800de60 <memp_malloc>
 8010406:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d101      	bne.n	8010412 <tcp_seg_copy+0x2e>
    return NULL;
 801040e:	2300      	movs	r3, #0
 8010410:	e00a      	b.n	8010428 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010412:	2210      	movs	r2, #16
 8010414:	6879      	ldr	r1, [r7, #4]
 8010416:	68f8      	ldr	r0, [r7, #12]
 8010418:	f007 fc6e 	bl	8017cf8 <memcpy>
  pbuf_ref(cseg->p);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	4618      	mov	r0, r3
 8010422:	f7fe fc1b 	bl	800ec5c <pbuf_ref>
  return cseg;
 8010426:	68fb      	ldr	r3, [r7, #12]
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	0801b31c 	.word	0x0801b31c
 8010434:	0801b870 	.word	0x0801b870
 8010438:	0801b360 	.word	0x0801b360

0801043c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
 8010448:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d109      	bne.n	8010464 <tcp_recv_null+0x28>
 8010450:	4b12      	ldr	r3, [pc, #72]	; (801049c <tcp_recv_null+0x60>)
 8010452:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010456:	4912      	ldr	r1, [pc, #72]	; (80104a0 <tcp_recv_null+0x64>)
 8010458:	4812      	ldr	r0, [pc, #72]	; (80104a4 <tcp_recv_null+0x68>)
 801045a:	f007 fd27 	bl	8017eac <iprintf>
 801045e:	f06f 030f 	mvn.w	r3, #15
 8010462:	e016      	b.n	8010492 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d009      	beq.n	801047e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	891b      	ldrh	r3, [r3, #8]
 801046e:	4619      	mov	r1, r3
 8010470:	68b8      	ldr	r0, [r7, #8]
 8010472:	f7ff fab5 	bl	800f9e0 <tcp_recved>
    pbuf_free(p);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7fe fb50 	bl	800eb1c <pbuf_free>
 801047c:	e008      	b.n	8010490 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801047e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d104      	bne.n	8010490 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010486:	68b8      	ldr	r0, [r7, #8]
 8010488:	f7fe ffe6 	bl	800f458 <tcp_close>
 801048c:	4603      	mov	r3, r0
 801048e:	e000      	b.n	8010492 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3710      	adds	r7, #16
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	0801b31c 	.word	0x0801b31c
 80104a0:	0801b88c 	.word	0x0801b88c
 80104a4:	0801b360 	.word	0x0801b360

080104a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	4603      	mov	r3, r0
 80104b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80104b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	db01      	blt.n	80104be <tcp_kill_prio+0x16>
 80104ba:	79fb      	ldrb	r3, [r7, #7]
 80104bc:	e000      	b.n	80104c0 <tcp_kill_prio+0x18>
 80104be:	237f      	movs	r3, #127	; 0x7f
 80104c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80104c2:	7afb      	ldrb	r3, [r7, #11]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d034      	beq.n	8010532 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80104c8:	7afb      	ldrb	r3, [r7, #11]
 80104ca:	3b01      	subs	r3, #1
 80104cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80104d2:	2300      	movs	r3, #0
 80104d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104d6:	4b19      	ldr	r3, [pc, #100]	; (801053c <tcp_kill_prio+0x94>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	617b      	str	r3, [r7, #20]
 80104dc:	e01f      	b.n	801051e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	7d5b      	ldrb	r3, [r3, #21]
 80104e2:	7afa      	ldrb	r2, [r7, #11]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d80c      	bhi.n	8010502 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80104ec:	7afa      	ldrb	r2, [r7, #11]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d112      	bne.n	8010518 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80104f2:	4b13      	ldr	r3, [pc, #76]	; (8010540 <tcp_kill_prio+0x98>)
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	6a1b      	ldr	r3, [r3, #32]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d80a      	bhi.n	8010518 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010502:	4b0f      	ldr	r3, [pc, #60]	; (8010540 <tcp_kill_prio+0x98>)
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	6a1b      	ldr	r3, [r3, #32]
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	7d5b      	ldrb	r3, [r3, #21]
 8010516:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	68db      	ldr	r3, [r3, #12]
 801051c:	617b      	str	r3, [r7, #20]
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d1dc      	bne.n	80104de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d004      	beq.n	8010534 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801052a:	6938      	ldr	r0, [r7, #16]
 801052c:	f7ff f87e 	bl	800f62c <tcp_abort>
 8010530:	e000      	b.n	8010534 <tcp_kill_prio+0x8c>
    return;
 8010532:	bf00      	nop
  }
}
 8010534:	3718      	adds	r7, #24
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	2000fb10 	.word	0x2000fb10
 8010540:	2000fb14 	.word	0x2000fb14

08010544 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b086      	sub	sp, #24
 8010548:	af00      	add	r7, sp, #0
 801054a:	4603      	mov	r3, r0
 801054c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801054e:	79fb      	ldrb	r3, [r7, #7]
 8010550:	2b08      	cmp	r3, #8
 8010552:	d009      	beq.n	8010568 <tcp_kill_state+0x24>
 8010554:	79fb      	ldrb	r3, [r7, #7]
 8010556:	2b09      	cmp	r3, #9
 8010558:	d006      	beq.n	8010568 <tcp_kill_state+0x24>
 801055a:	4b1a      	ldr	r3, [pc, #104]	; (80105c4 <tcp_kill_state+0x80>)
 801055c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010560:	4919      	ldr	r1, [pc, #100]	; (80105c8 <tcp_kill_state+0x84>)
 8010562:	481a      	ldr	r0, [pc, #104]	; (80105cc <tcp_kill_state+0x88>)
 8010564:	f007 fca2 	bl	8017eac <iprintf>

  inactivity = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801056c:	2300      	movs	r3, #0
 801056e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010570:	4b17      	ldr	r3, [pc, #92]	; (80105d0 <tcp_kill_state+0x8c>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	617b      	str	r3, [r7, #20]
 8010576:	e017      	b.n	80105a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	7d1b      	ldrb	r3, [r3, #20]
 801057c:	79fa      	ldrb	r2, [r7, #7]
 801057e:	429a      	cmp	r2, r3
 8010580:	d10f      	bne.n	80105a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010582:	4b14      	ldr	r3, [pc, #80]	; (80105d4 <tcp_kill_state+0x90>)
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	6a1b      	ldr	r3, [r3, #32]
 801058a:	1ad3      	subs	r3, r2, r3
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	429a      	cmp	r2, r3
 8010590:	d807      	bhi.n	80105a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010592:	4b10      	ldr	r3, [pc, #64]	; (80105d4 <tcp_kill_state+0x90>)
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	6a1b      	ldr	r3, [r3, #32]
 801059a:	1ad3      	subs	r3, r2, r3
 801059c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	617b      	str	r3, [r7, #20]
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d1e4      	bne.n	8010578 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d003      	beq.n	80105bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80105b4:	2100      	movs	r1, #0
 80105b6:	6938      	ldr	r0, [r7, #16]
 80105b8:	f7fe ff7a 	bl	800f4b0 <tcp_abandon>
  }
}
 80105bc:	bf00      	nop
 80105be:	3718      	adds	r7, #24
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	0801b31c 	.word	0x0801b31c
 80105c8:	0801b8a8 	.word	0x0801b8a8
 80105cc:	0801b360 	.word	0x0801b360
 80105d0:	2000fb10 	.word	0x2000fb10
 80105d4:	2000fb14 	.word	0x2000fb14

080105d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80105de:	2300      	movs	r3, #0
 80105e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80105e2:	2300      	movs	r3, #0
 80105e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105e6:	4b12      	ldr	r3, [pc, #72]	; (8010630 <tcp_kill_timewait+0x58>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	60fb      	str	r3, [r7, #12]
 80105ec:	e012      	b.n	8010614 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80105ee:	4b11      	ldr	r3, [pc, #68]	; (8010634 <tcp_kill_timewait+0x5c>)
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6a1b      	ldr	r3, [r3, #32]
 80105f6:	1ad3      	subs	r3, r2, r3
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d807      	bhi.n	801060e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80105fe:	4b0d      	ldr	r3, [pc, #52]	; (8010634 <tcp_kill_timewait+0x5c>)
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	1ad3      	subs	r3, r2, r3
 8010608:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1e9      	bne.n	80105ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d002      	beq.n	8010626 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010620:	68b8      	ldr	r0, [r7, #8]
 8010622:	f7ff f803 	bl	800f62c <tcp_abort>
  }
}
 8010626:	bf00      	nop
 8010628:	3710      	adds	r7, #16
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}
 801062e:	bf00      	nop
 8010630:	2000fb20 	.word	0x2000fb20
 8010634:	2000fb14 	.word	0x2000fb14

08010638 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801063e:	4b10      	ldr	r3, [pc, #64]	; (8010680 <tcp_handle_closepend+0x48>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010644:	e014      	b.n	8010670 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	8b5b      	ldrh	r3, [r3, #26]
 8010650:	f003 0308 	and.w	r3, r3, #8
 8010654:	2b00      	cmp	r3, #0
 8010656:	d009      	beq.n	801066c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	8b5b      	ldrh	r3, [r3, #26]
 801065c:	f023 0308 	bic.w	r3, r3, #8
 8010660:	b29a      	uxth	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7fe fe8c 	bl	800f384 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1e7      	bne.n	8010646 <tcp_handle_closepend+0xe>
  }
}
 8010676:	bf00      	nop
 8010678:	bf00      	nop
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	2000fb10 	.word	0x2000fb10

08010684 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	4603      	mov	r3, r0
 801068c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801068e:	2001      	movs	r0, #1
 8010690:	f7fd fbe6 	bl	800de60 <memp_malloc>
 8010694:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d126      	bne.n	80106ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801069c:	f7ff ffcc 	bl	8010638 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80106a0:	f7ff ff9a 	bl	80105d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106a4:	2001      	movs	r0, #1
 80106a6:	f7fd fbdb 	bl	800de60 <memp_malloc>
 80106aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d11b      	bne.n	80106ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80106b2:	2009      	movs	r0, #9
 80106b4:	f7ff ff46 	bl	8010544 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106b8:	2001      	movs	r0, #1
 80106ba:	f7fd fbd1 	bl	800de60 <memp_malloc>
 80106be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d111      	bne.n	80106ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80106c6:	2008      	movs	r0, #8
 80106c8:	f7ff ff3c 	bl	8010544 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106cc:	2001      	movs	r0, #1
 80106ce:	f7fd fbc7 	bl	800de60 <memp_malloc>
 80106d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d107      	bne.n	80106ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80106da:	79fb      	ldrb	r3, [r7, #7]
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff fee3 	bl	80104a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106e2:	2001      	movs	r0, #1
 80106e4:	f7fd fbbc 	bl	800de60 <memp_malloc>
 80106e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d03f      	beq.n	8010770 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80106f0:	229c      	movs	r2, #156	; 0x9c
 80106f2:	2100      	movs	r1, #0
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f007 fb27 	bl	8017d48 <memset>
    pcb->prio = prio;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	79fa      	ldrb	r2, [r7, #7]
 80106fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010706:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010710:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	22ff      	movs	r2, #255	; 0xff
 801071e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010726:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2206      	movs	r2, #6
 801072c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2206      	movs	r2, #6
 8010734:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801073c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2201      	movs	r2, #1
 8010742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010746:	4b0d      	ldr	r3, [pc, #52]	; (801077c <tcp_alloc+0xf8>)
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801074e:	4b0c      	ldr	r3, [pc, #48]	; (8010780 <tcp_alloc+0xfc>)
 8010750:	781a      	ldrb	r2, [r3, #0]
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801075c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	4a08      	ldr	r2, [pc, #32]	; (8010784 <tcp_alloc+0x100>)
 8010764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	4a07      	ldr	r2, [pc, #28]	; (8010788 <tcp_alloc+0x104>)
 801076c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010770:	68fb      	ldr	r3, [r7, #12]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	2000fb14 	.word	0x2000fb14
 8010780:	20000a32 	.word	0x20000a32
 8010784:	0801043d 	.word	0x0801043d
 8010788:	006ddd00 	.word	0x006ddd00

0801078c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	4603      	mov	r3, r0
 8010794:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010796:	2040      	movs	r0, #64	; 0x40
 8010798:	f7ff ff74 	bl	8010684 <tcp_alloc>
 801079c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801079e:	68fb      	ldr	r3, [r7, #12]
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3710      	adds	r7, #16
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d002      	beq.n	80107be <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	683a      	ldr	r2, [r7, #0]
 80107bc:	611a      	str	r2, [r3, #16]
  }
}
 80107be:	bf00      	nop
 80107c0:	370c      	adds	r7, #12
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr
	...

080107cc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d00e      	beq.n	80107fa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7d1b      	ldrb	r3, [r3, #20]
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d106      	bne.n	80107f2 <tcp_recv+0x26>
 80107e4:	4b07      	ldr	r3, [pc, #28]	; (8010804 <tcp_recv+0x38>)
 80107e6:	f240 72df 	movw	r2, #2015	; 0x7df
 80107ea:	4907      	ldr	r1, [pc, #28]	; (8010808 <tcp_recv+0x3c>)
 80107ec:	4807      	ldr	r0, [pc, #28]	; (801080c <tcp_recv+0x40>)
 80107ee:	f007 fb5d 	bl	8017eac <iprintf>
    pcb->recv = recv;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	683a      	ldr	r2, [r7, #0]
 80107f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80107fa:	bf00      	nop
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	0801b31c 	.word	0x0801b31c
 8010808:	0801b8b8 	.word	0x0801b8b8
 801080c:	0801b360 	.word	0x0801b360

08010810 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00e      	beq.n	801083e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	7d1b      	ldrb	r3, [r3, #20]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d106      	bne.n	8010836 <tcp_sent+0x26>
 8010828:	4b07      	ldr	r3, [pc, #28]	; (8010848 <tcp_sent+0x38>)
 801082a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801082e:	4907      	ldr	r1, [pc, #28]	; (801084c <tcp_sent+0x3c>)
 8010830:	4807      	ldr	r0, [pc, #28]	; (8010850 <tcp_sent+0x40>)
 8010832:	f007 fb3b 	bl	8017eac <iprintf>
    pcb->sent = sent;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	683a      	ldr	r2, [r7, #0]
 801083a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801083e:	bf00      	nop
 8010840:	3708      	adds	r7, #8
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	0801b31c 	.word	0x0801b31c
 801084c:	0801b8e0 	.word	0x0801b8e0
 8010850:	0801b360 	.word	0x0801b360

08010854 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00e      	beq.n	8010882 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	7d1b      	ldrb	r3, [r3, #20]
 8010868:	2b01      	cmp	r3, #1
 801086a:	d106      	bne.n	801087a <tcp_err+0x26>
 801086c:	4b07      	ldr	r3, [pc, #28]	; (801088c <tcp_err+0x38>)
 801086e:	f640 020d 	movw	r2, #2061	; 0x80d
 8010872:	4907      	ldr	r1, [pc, #28]	; (8010890 <tcp_err+0x3c>)
 8010874:	4807      	ldr	r0, [pc, #28]	; (8010894 <tcp_err+0x40>)
 8010876:	f007 fb19 	bl	8017eac <iprintf>
    pcb->errf = err;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	683a      	ldr	r2, [r7, #0]
 801087e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010882:	bf00      	nop
 8010884:	3708      	adds	r7, #8
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	0801b31c 	.word	0x0801b31c
 8010890:	0801b908 	.word	0x0801b908
 8010894:	0801b360 	.word	0x0801b360

08010898 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010898:	b480      	push	{r7}
 801089a:	b085      	sub	sp, #20
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d008      	beq.n	80108ba <tcp_accept+0x22>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	7d1b      	ldrb	r3, [r3, #20]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d104      	bne.n	80108ba <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	683a      	ldr	r2, [r7, #0]
 80108b8:	619a      	str	r2, [r3, #24]
  }
}
 80108ba:	bf00      	nop
 80108bc:	3714      	adds	r7, #20
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr
	...

080108c8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	4613      	mov	r3, r2
 80108d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d107      	bne.n	80108ec <tcp_poll+0x24>
 80108dc:	4b0e      	ldr	r3, [pc, #56]	; (8010918 <tcp_poll+0x50>)
 80108de:	f640 023d 	movw	r2, #2109	; 0x83d
 80108e2:	490e      	ldr	r1, [pc, #56]	; (801091c <tcp_poll+0x54>)
 80108e4:	480e      	ldr	r0, [pc, #56]	; (8010920 <tcp_poll+0x58>)
 80108e6:	f007 fae1 	bl	8017eac <iprintf>
 80108ea:	e011      	b.n	8010910 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	7d1b      	ldrb	r3, [r3, #20]
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d106      	bne.n	8010902 <tcp_poll+0x3a>
 80108f4:	4b08      	ldr	r3, [pc, #32]	; (8010918 <tcp_poll+0x50>)
 80108f6:	f640 023e 	movw	r2, #2110	; 0x83e
 80108fa:	490a      	ldr	r1, [pc, #40]	; (8010924 <tcp_poll+0x5c>)
 80108fc:	4808      	ldr	r0, [pc, #32]	; (8010920 <tcp_poll+0x58>)
 80108fe:	f007 fad5 	bl	8017eac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	79fa      	ldrb	r2, [r7, #7]
 801090e:	775a      	strb	r2, [r3, #29]
}
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	0801b31c 	.word	0x0801b31c
 801091c:	0801b930 	.word	0x0801b930
 8010920:	0801b360 	.word	0x0801b360
 8010924:	0801b948 	.word	0x0801b948

08010928 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d107      	bne.n	8010946 <tcp_pcb_purge+0x1e>
 8010936:	4b21      	ldr	r3, [pc, #132]	; (80109bc <tcp_pcb_purge+0x94>)
 8010938:	f640 0251 	movw	r2, #2129	; 0x851
 801093c:	4920      	ldr	r1, [pc, #128]	; (80109c0 <tcp_pcb_purge+0x98>)
 801093e:	4821      	ldr	r0, [pc, #132]	; (80109c4 <tcp_pcb_purge+0x9c>)
 8010940:	f007 fab4 	bl	8017eac <iprintf>
 8010944:	e037      	b.n	80109b6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	7d1b      	ldrb	r3, [r3, #20]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d033      	beq.n	80109b6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010952:	2b0a      	cmp	r3, #10
 8010954:	d02f      	beq.n	80109b6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801095a:	2b01      	cmp	r3, #1
 801095c:	d02b      	beq.n	80109b6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010962:	2b00      	cmp	r3, #0
 8010964:	d007      	beq.n	8010976 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801096a:	4618      	mov	r0, r3
 801096c:	f7fe f8d6 	bl	800eb1c <pbuf_free>
      pcb->refused_data = NULL;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801097a:	2b00      	cmp	r3, #0
 801097c:	d002      	beq.n	8010984 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 f986 	bl	8010c90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801098a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010990:	4618      	mov	r0, r3
 8010992:	f7ff fcdb 	bl	801034c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801099a:	4618      	mov	r0, r3
 801099c:	f7ff fcd6 	bl	801034c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2200      	movs	r2, #0
 80109a4:	66da      	str	r2, [r3, #108]	; 0x6c
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	0801b31c 	.word	0x0801b31c
 80109c0:	0801b968 	.word	0x0801b968
 80109c4:	0801b360 	.word	0x0801b360

080109c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d106      	bne.n	80109e6 <tcp_pcb_remove+0x1e>
 80109d8:	4b3e      	ldr	r3, [pc, #248]	; (8010ad4 <tcp_pcb_remove+0x10c>)
 80109da:	f640 0283 	movw	r2, #2179	; 0x883
 80109de:	493e      	ldr	r1, [pc, #248]	; (8010ad8 <tcp_pcb_remove+0x110>)
 80109e0:	483e      	ldr	r0, [pc, #248]	; (8010adc <tcp_pcb_remove+0x114>)
 80109e2:	f007 fa63 	bl	8017eac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d106      	bne.n	80109fa <tcp_pcb_remove+0x32>
 80109ec:	4b39      	ldr	r3, [pc, #228]	; (8010ad4 <tcp_pcb_remove+0x10c>)
 80109ee:	f640 0284 	movw	r2, #2180	; 0x884
 80109f2:	493b      	ldr	r1, [pc, #236]	; (8010ae0 <tcp_pcb_remove+0x118>)
 80109f4:	4839      	ldr	r0, [pc, #228]	; (8010adc <tcp_pcb_remove+0x114>)
 80109f6:	f007 fa59 	bl	8017eac <iprintf>

  TCP_RMV(pcblist, pcb);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	683a      	ldr	r2, [r7, #0]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d105      	bne.n	8010a10 <tcp_pcb_remove+0x48>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	68da      	ldr	r2, [r3, #12]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	601a      	str	r2, [r3, #0]
 8010a0e:	e013      	b.n	8010a38 <tcp_pcb_remove+0x70>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	60fb      	str	r3, [r7, #12]
 8010a16:	e00c      	b.n	8010a32 <tcp_pcb_remove+0x6a>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	68db      	ldr	r3, [r3, #12]
 8010a1c:	683a      	ldr	r2, [r7, #0]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d104      	bne.n	8010a2c <tcp_pcb_remove+0x64>
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	68da      	ldr	r2, [r3, #12]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	60da      	str	r2, [r3, #12]
 8010a2a:	e005      	b.n	8010a38 <tcp_pcb_remove+0x70>
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	60fb      	str	r3, [r7, #12]
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1ef      	bne.n	8010a18 <tcp_pcb_remove+0x50>
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010a3e:	6838      	ldr	r0, [r7, #0]
 8010a40:	f7ff ff72 	bl	8010928 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	7d1b      	ldrb	r3, [r3, #20]
 8010a48:	2b0a      	cmp	r3, #10
 8010a4a:	d013      	beq.n	8010a74 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d00f      	beq.n	8010a74 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	8b5b      	ldrh	r3, [r3, #26]
 8010a58:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d009      	beq.n	8010a74 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	8b5b      	ldrh	r3, [r3, #26]
 8010a64:	f043 0302 	orr.w	r3, r3, #2
 8010a68:	b29a      	uxth	r2, r3
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a6e:	6838      	ldr	r0, [r7, #0]
 8010a70:	f003 fbc2 	bl	80141f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	7d1b      	ldrb	r3, [r3, #20]
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d020      	beq.n	8010abe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d006      	beq.n	8010a92 <tcp_pcb_remove+0xca>
 8010a84:	4b13      	ldr	r3, [pc, #76]	; (8010ad4 <tcp_pcb_remove+0x10c>)
 8010a86:	f640 0293 	movw	r2, #2195	; 0x893
 8010a8a:	4916      	ldr	r1, [pc, #88]	; (8010ae4 <tcp_pcb_remove+0x11c>)
 8010a8c:	4813      	ldr	r0, [pc, #76]	; (8010adc <tcp_pcb_remove+0x114>)
 8010a8e:	f007 fa0d 	bl	8017eac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d006      	beq.n	8010aa8 <tcp_pcb_remove+0xe0>
 8010a9a:	4b0e      	ldr	r3, [pc, #56]	; (8010ad4 <tcp_pcb_remove+0x10c>)
 8010a9c:	f640 0294 	movw	r2, #2196	; 0x894
 8010aa0:	4911      	ldr	r1, [pc, #68]	; (8010ae8 <tcp_pcb_remove+0x120>)
 8010aa2:	480e      	ldr	r0, [pc, #56]	; (8010adc <tcp_pcb_remove+0x114>)
 8010aa4:	f007 fa02 	bl	8017eac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d006      	beq.n	8010abe <tcp_pcb_remove+0xf6>
 8010ab0:	4b08      	ldr	r3, [pc, #32]	; (8010ad4 <tcp_pcb_remove+0x10c>)
 8010ab2:	f640 0296 	movw	r2, #2198	; 0x896
 8010ab6:	490d      	ldr	r1, [pc, #52]	; (8010aec <tcp_pcb_remove+0x124>)
 8010ab8:	4808      	ldr	r0, [pc, #32]	; (8010adc <tcp_pcb_remove+0x114>)
 8010aba:	f007 f9f7 	bl	8017eac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010aca:	bf00      	nop
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	0801b31c 	.word	0x0801b31c
 8010ad8:	0801b984 	.word	0x0801b984
 8010adc:	0801b360 	.word	0x0801b360
 8010ae0:	0801b9a0 	.word	0x0801b9a0
 8010ae4:	0801b9c0 	.word	0x0801b9c0
 8010ae8:	0801b9d8 	.word	0x0801b9d8
 8010aec:	0801b9f4 	.word	0x0801b9f4

08010af0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d106      	bne.n	8010b0c <tcp_next_iss+0x1c>
 8010afe:	4b0a      	ldr	r3, [pc, #40]	; (8010b28 <tcp_next_iss+0x38>)
 8010b00:	f640 02af 	movw	r2, #2223	; 0x8af
 8010b04:	4909      	ldr	r1, [pc, #36]	; (8010b2c <tcp_next_iss+0x3c>)
 8010b06:	480a      	ldr	r0, [pc, #40]	; (8010b30 <tcp_next_iss+0x40>)
 8010b08:	f007 f9d0 	bl	8017eac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010b0c:	4b09      	ldr	r3, [pc, #36]	; (8010b34 <tcp_next_iss+0x44>)
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	4b09      	ldr	r3, [pc, #36]	; (8010b38 <tcp_next_iss+0x48>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4413      	add	r3, r2
 8010b16:	4a07      	ldr	r2, [pc, #28]	; (8010b34 <tcp_next_iss+0x44>)
 8010b18:	6013      	str	r3, [r2, #0]
  return iss;
 8010b1a:	4b06      	ldr	r3, [pc, #24]	; (8010b34 <tcp_next_iss+0x44>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3708      	adds	r7, #8
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	0801b31c 	.word	0x0801b31c
 8010b2c:	0801ba0c 	.word	0x0801ba0c
 8010b30:	0801b360 	.word	0x0801b360
 8010b34:	200004a4 	.word	0x200004a4
 8010b38:	2000fb14 	.word	0x2000fb14

08010b3c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	4603      	mov	r3, r0
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
 8010b48:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d106      	bne.n	8010b5e <tcp_eff_send_mss_netif+0x22>
 8010b50:	4b14      	ldr	r3, [pc, #80]	; (8010ba4 <tcp_eff_send_mss_netif+0x68>)
 8010b52:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010b56:	4914      	ldr	r1, [pc, #80]	; (8010ba8 <tcp_eff_send_mss_netif+0x6c>)
 8010b58:	4814      	ldr	r0, [pc, #80]	; (8010bac <tcp_eff_send_mss_netif+0x70>)
 8010b5a:	f007 f9a7 	bl	8017eac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d101      	bne.n	8010b68 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010b64:	89fb      	ldrh	r3, [r7, #14]
 8010b66:	e019      	b.n	8010b9c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010b6c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010b6e:	8afb      	ldrh	r3, [r7, #22]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d012      	beq.n	8010b9a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010b74:	2328      	movs	r3, #40	; 0x28
 8010b76:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010b78:	8afa      	ldrh	r2, [r7, #22]
 8010b7a:	8abb      	ldrh	r3, [r7, #20]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d904      	bls.n	8010b8a <tcp_eff_send_mss_netif+0x4e>
 8010b80:	8afa      	ldrh	r2, [r7, #22]
 8010b82:	8abb      	ldrh	r3, [r7, #20]
 8010b84:	1ad3      	subs	r3, r2, r3
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	e000      	b.n	8010b8c <tcp_eff_send_mss_netif+0x50>
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010b8e:	8a7a      	ldrh	r2, [r7, #18]
 8010b90:	89fb      	ldrh	r3, [r7, #14]
 8010b92:	4293      	cmp	r3, r2
 8010b94:	bf28      	it	cs
 8010b96:	4613      	movcs	r3, r2
 8010b98:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010b9a:	89fb      	ldrh	r3, [r7, #14]
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3718      	adds	r7, #24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	0801b31c 	.word	0x0801b31c
 8010ba8:	0801ba28 	.word	0x0801ba28
 8010bac:	0801b360 	.word	0x0801b360

08010bb0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d119      	bne.n	8010bf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010bc4:	4b10      	ldr	r3, [pc, #64]	; (8010c08 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010bc6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010bca:	4910      	ldr	r1, [pc, #64]	; (8010c0c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010bcc:	4810      	ldr	r0, [pc, #64]	; (8010c10 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010bce:	f007 f96d 	bl	8017eac <iprintf>

  while (pcb != NULL) {
 8010bd2:	e011      	b.n	8010bf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d108      	bne.n	8010bf2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010be6:	68f8      	ldr	r0, [r7, #12]
 8010be8:	f7fe fd20 	bl	800f62c <tcp_abort>
      pcb = next;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	60fb      	str	r3, [r7, #12]
 8010bf0:	e002      	b.n	8010bf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	68db      	ldr	r3, [r3, #12]
 8010bf6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1ea      	bne.n	8010bd4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010bfe:	bf00      	nop
 8010c00:	bf00      	nop
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	0801b31c 	.word	0x0801b31c
 8010c0c:	0801ba50 	.word	0x0801ba50
 8010c10:	0801b360 	.word	0x0801b360

08010c14 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d02a      	beq.n	8010c7a <tcp_netif_ip_addr_changed+0x66>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d026      	beq.n	8010c7a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010c2c:	4b15      	ldr	r3, [pc, #84]	; (8010c84 <tcp_netif_ip_addr_changed+0x70>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4619      	mov	r1, r3
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f7ff ffbc 	bl	8010bb0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010c38:	4b13      	ldr	r3, [pc, #76]	; (8010c88 <tcp_netif_ip_addr_changed+0x74>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7ff ffb6 	bl	8010bb0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d017      	beq.n	8010c7a <tcp_netif_ip_addr_changed+0x66>
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d013      	beq.n	8010c7a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c52:	4b0e      	ldr	r3, [pc, #56]	; (8010c8c <tcp_netif_ip_addr_changed+0x78>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	60fb      	str	r3, [r7, #12]
 8010c58:	e00c      	b.n	8010c74 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d103      	bne.n	8010c6e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	60fb      	str	r3, [r7, #12]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d1ef      	bne.n	8010c5a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010c7a:	bf00      	nop
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	2000fb10 	.word	0x2000fb10
 8010c88:	2000fb1c 	.word	0x2000fb1c
 8010c8c:	2000fb18 	.word	0x2000fb18

08010c90 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d007      	beq.n	8010cb0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff fb51 	bl	801034c <tcp_segs_free>
    pcb->ooseq = NULL;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010cb0:	bf00      	nop
 8010cb2:	3708      	adds	r7, #8
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010cb8:	b590      	push	{r4, r7, lr}
 8010cba:	b08d      	sub	sp, #52	; 0x34
 8010cbc:	af04      	add	r7, sp, #16
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d105      	bne.n	8010cd4 <tcp_input+0x1c>
 8010cc8:	4b9b      	ldr	r3, [pc, #620]	; (8010f38 <tcp_input+0x280>)
 8010cca:	2283      	movs	r2, #131	; 0x83
 8010ccc:	499b      	ldr	r1, [pc, #620]	; (8010f3c <tcp_input+0x284>)
 8010cce:	489c      	ldr	r0, [pc, #624]	; (8010f40 <tcp_input+0x288>)
 8010cd0:	f007 f8ec 	bl	8017eac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	4a9a      	ldr	r2, [pc, #616]	; (8010f44 <tcp_input+0x28c>)
 8010cda:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	895b      	ldrh	r3, [r3, #10]
 8010ce0:	2b13      	cmp	r3, #19
 8010ce2:	f240 83c4 	bls.w	801146e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010ce6:	4b98      	ldr	r3, [pc, #608]	; (8010f48 <tcp_input+0x290>)
 8010ce8:	695b      	ldr	r3, [r3, #20]
 8010cea:	4a97      	ldr	r2, [pc, #604]	; (8010f48 <tcp_input+0x290>)
 8010cec:	6812      	ldr	r2, [r2, #0]
 8010cee:	4611      	mov	r1, r2
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f006 f86b 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f040 83ba 	bne.w	8011472 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010cfe:	4b92      	ldr	r3, [pc, #584]	; (8010f48 <tcp_input+0x290>)
 8010d00:	695b      	ldr	r3, [r3, #20]
 8010d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010d06:	2be0      	cmp	r3, #224	; 0xe0
 8010d08:	f000 83b3 	beq.w	8011472 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010d0c:	4b8d      	ldr	r3, [pc, #564]	; (8010f44 <tcp_input+0x28c>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	899b      	ldrh	r3, [r3, #12]
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7fc fb6f 	bl	800d3f8 <lwip_htons>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	0b1b      	lsrs	r3, r3, #12
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010d26:	7cbb      	ldrb	r3, [r7, #18]
 8010d28:	2b13      	cmp	r3, #19
 8010d2a:	f240 83a4 	bls.w	8011476 <tcp_input+0x7be>
 8010d2e:	7cbb      	ldrb	r3, [r7, #18]
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	891b      	ldrh	r3, [r3, #8]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	f200 839d 	bhi.w	8011476 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010d3c:	7cbb      	ldrb	r3, [r7, #18]
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	3b14      	subs	r3, #20
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	4b81      	ldr	r3, [pc, #516]	; (8010f4c <tcp_input+0x294>)
 8010d46:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010d48:	4b81      	ldr	r3, [pc, #516]	; (8010f50 <tcp_input+0x298>)
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	895a      	ldrh	r2, [r3, #10]
 8010d52:	7cbb      	ldrb	r3, [r7, #18]
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d309      	bcc.n	8010d6e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010d5a:	4b7c      	ldr	r3, [pc, #496]	; (8010f4c <tcp_input+0x294>)
 8010d5c:	881a      	ldrh	r2, [r3, #0]
 8010d5e:	4b7d      	ldr	r3, [pc, #500]	; (8010f54 <tcp_input+0x29c>)
 8010d60:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010d62:	7cbb      	ldrb	r3, [r7, #18]
 8010d64:	4619      	mov	r1, r3
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7fd fe52 	bl	800ea10 <pbuf_remove_header>
 8010d6c:	e04e      	b.n	8010e0c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d105      	bne.n	8010d82 <tcp_input+0xca>
 8010d76:	4b70      	ldr	r3, [pc, #448]	; (8010f38 <tcp_input+0x280>)
 8010d78:	22c2      	movs	r2, #194	; 0xc2
 8010d7a:	4977      	ldr	r1, [pc, #476]	; (8010f58 <tcp_input+0x2a0>)
 8010d7c:	4870      	ldr	r0, [pc, #448]	; (8010f40 <tcp_input+0x288>)
 8010d7e:	f007 f895 	bl	8017eac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010d82:	2114      	movs	r1, #20
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7fd fe43 	bl	800ea10 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	895a      	ldrh	r2, [r3, #10]
 8010d8e:	4b71      	ldr	r3, [pc, #452]	; (8010f54 <tcp_input+0x29c>)
 8010d90:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010d92:	4b6e      	ldr	r3, [pc, #440]	; (8010f4c <tcp_input+0x294>)
 8010d94:	881a      	ldrh	r2, [r3, #0]
 8010d96:	4b6f      	ldr	r3, [pc, #444]	; (8010f54 <tcp_input+0x29c>)
 8010d98:	881b      	ldrh	r3, [r3, #0]
 8010d9a:	1ad3      	subs	r3, r2, r3
 8010d9c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010d9e:	4b6d      	ldr	r3, [pc, #436]	; (8010f54 <tcp_input+0x29c>)
 8010da0:	881b      	ldrh	r3, [r3, #0]
 8010da2:	4619      	mov	r1, r3
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7fd fe33 	bl	800ea10 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	895b      	ldrh	r3, [r3, #10]
 8010db0:	8a3a      	ldrh	r2, [r7, #16]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	f200 8361 	bhi.w	801147a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	4a64      	ldr	r2, [pc, #400]	; (8010f50 <tcp_input+0x298>)
 8010dc0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	8a3a      	ldrh	r2, [r7, #16]
 8010dc8:	4611      	mov	r1, r2
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fd fe20 	bl	800ea10 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	891a      	ldrh	r2, [r3, #8]
 8010dd4:	8a3b      	ldrh	r3, [r7, #16]
 8010dd6:	1ad3      	subs	r3, r2, r3
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	895b      	ldrh	r3, [r3, #10]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d005      	beq.n	8010df2 <tcp_input+0x13a>
 8010de6:	4b54      	ldr	r3, [pc, #336]	; (8010f38 <tcp_input+0x280>)
 8010de8:	22df      	movs	r2, #223	; 0xdf
 8010dea:	495c      	ldr	r1, [pc, #368]	; (8010f5c <tcp_input+0x2a4>)
 8010dec:	4854      	ldr	r0, [pc, #336]	; (8010f40 <tcp_input+0x288>)
 8010dee:	f007 f85d 	bl	8017eac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	891a      	ldrh	r2, [r3, #8]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	891b      	ldrh	r3, [r3, #8]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d005      	beq.n	8010e0c <tcp_input+0x154>
 8010e00:	4b4d      	ldr	r3, [pc, #308]	; (8010f38 <tcp_input+0x280>)
 8010e02:	22e0      	movs	r2, #224	; 0xe0
 8010e04:	4956      	ldr	r1, [pc, #344]	; (8010f60 <tcp_input+0x2a8>)
 8010e06:	484e      	ldr	r0, [pc, #312]	; (8010f40 <tcp_input+0x288>)
 8010e08:	f007 f850 	bl	8017eac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010e0c:	4b4d      	ldr	r3, [pc, #308]	; (8010f44 <tcp_input+0x28c>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	881b      	ldrh	r3, [r3, #0]
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	4a4b      	ldr	r2, [pc, #300]	; (8010f44 <tcp_input+0x28c>)
 8010e16:	6814      	ldr	r4, [r2, #0]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fc faed 	bl	800d3f8 <lwip_htons>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010e22:	4b48      	ldr	r3, [pc, #288]	; (8010f44 <tcp_input+0x28c>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	885b      	ldrh	r3, [r3, #2]
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	4a46      	ldr	r2, [pc, #280]	; (8010f44 <tcp_input+0x28c>)
 8010e2c:	6814      	ldr	r4, [r2, #0]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fc fae2 	bl	800d3f8 <lwip_htons>
 8010e34:	4603      	mov	r3, r0
 8010e36:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010e38:	4b42      	ldr	r3, [pc, #264]	; (8010f44 <tcp_input+0x28c>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	4a41      	ldr	r2, [pc, #260]	; (8010f44 <tcp_input+0x28c>)
 8010e40:	6814      	ldr	r4, [r2, #0]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fc faed 	bl	800d422 <lwip_htonl>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	6063      	str	r3, [r4, #4]
 8010e4c:	6863      	ldr	r3, [r4, #4]
 8010e4e:	4a45      	ldr	r2, [pc, #276]	; (8010f64 <tcp_input+0x2ac>)
 8010e50:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010e52:	4b3c      	ldr	r3, [pc, #240]	; (8010f44 <tcp_input+0x28c>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	689b      	ldr	r3, [r3, #8]
 8010e58:	4a3a      	ldr	r2, [pc, #232]	; (8010f44 <tcp_input+0x28c>)
 8010e5a:	6814      	ldr	r4, [r2, #0]
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fc fae0 	bl	800d422 <lwip_htonl>
 8010e62:	4603      	mov	r3, r0
 8010e64:	60a3      	str	r3, [r4, #8]
 8010e66:	68a3      	ldr	r3, [r4, #8]
 8010e68:	4a3f      	ldr	r2, [pc, #252]	; (8010f68 <tcp_input+0x2b0>)
 8010e6a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010e6c:	4b35      	ldr	r3, [pc, #212]	; (8010f44 <tcp_input+0x28c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	89db      	ldrh	r3, [r3, #14]
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	4a33      	ldr	r2, [pc, #204]	; (8010f44 <tcp_input+0x28c>)
 8010e76:	6814      	ldr	r4, [r2, #0]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fc fabd 	bl	800d3f8 <lwip_htons>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010e82:	4b30      	ldr	r3, [pc, #192]	; (8010f44 <tcp_input+0x28c>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	899b      	ldrh	r3, [r3, #12]
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fc fab4 	bl	800d3f8 <lwip_htons>
 8010e90:	4603      	mov	r3, r0
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	4b34      	ldr	r3, [pc, #208]	; (8010f6c <tcp_input+0x2b4>)
 8010e9c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	891a      	ldrh	r2, [r3, #8]
 8010ea2:	4b33      	ldr	r3, [pc, #204]	; (8010f70 <tcp_input+0x2b8>)
 8010ea4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010ea6:	4b31      	ldr	r3, [pc, #196]	; (8010f6c <tcp_input+0x2b4>)
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	f003 0303 	and.w	r3, r3, #3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d00c      	beq.n	8010ecc <tcp_input+0x214>
    tcplen++;
 8010eb2:	4b2f      	ldr	r3, [pc, #188]	; (8010f70 <tcp_input+0x2b8>)
 8010eb4:	881b      	ldrh	r3, [r3, #0]
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	4b2d      	ldr	r3, [pc, #180]	; (8010f70 <tcp_input+0x2b8>)
 8010ebc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	891a      	ldrh	r2, [r3, #8]
 8010ec2:	4b2b      	ldr	r3, [pc, #172]	; (8010f70 <tcp_input+0x2b8>)
 8010ec4:	881b      	ldrh	r3, [r3, #0]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	f200 82d9 	bhi.w	801147e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ed0:	4b28      	ldr	r3, [pc, #160]	; (8010f74 <tcp_input+0x2bc>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	61fb      	str	r3, [r7, #28]
 8010ed6:	e09d      	b.n	8011014 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	7d1b      	ldrb	r3, [r3, #20]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d105      	bne.n	8010eec <tcp_input+0x234>
 8010ee0:	4b15      	ldr	r3, [pc, #84]	; (8010f38 <tcp_input+0x280>)
 8010ee2:	22fb      	movs	r2, #251	; 0xfb
 8010ee4:	4924      	ldr	r1, [pc, #144]	; (8010f78 <tcp_input+0x2c0>)
 8010ee6:	4816      	ldr	r0, [pc, #88]	; (8010f40 <tcp_input+0x288>)
 8010ee8:	f006 ffe0 	bl	8017eac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	7d1b      	ldrb	r3, [r3, #20]
 8010ef0:	2b0a      	cmp	r3, #10
 8010ef2:	d105      	bne.n	8010f00 <tcp_input+0x248>
 8010ef4:	4b10      	ldr	r3, [pc, #64]	; (8010f38 <tcp_input+0x280>)
 8010ef6:	22fc      	movs	r2, #252	; 0xfc
 8010ef8:	4920      	ldr	r1, [pc, #128]	; (8010f7c <tcp_input+0x2c4>)
 8010efa:	4811      	ldr	r0, [pc, #68]	; (8010f40 <tcp_input+0x288>)
 8010efc:	f006 ffd6 	bl	8017eac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	7d1b      	ldrb	r3, [r3, #20]
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d105      	bne.n	8010f14 <tcp_input+0x25c>
 8010f08:	4b0b      	ldr	r3, [pc, #44]	; (8010f38 <tcp_input+0x280>)
 8010f0a:	22fd      	movs	r2, #253	; 0xfd
 8010f0c:	491c      	ldr	r1, [pc, #112]	; (8010f80 <tcp_input+0x2c8>)
 8010f0e:	480c      	ldr	r0, [pc, #48]	; (8010f40 <tcp_input+0x288>)
 8010f10:	f006 ffcc 	bl	8017eac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	7a1b      	ldrb	r3, [r3, #8]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d033      	beq.n	8010f84 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	7a1a      	ldrb	r2, [r3, #8]
 8010f20:	4b09      	ldr	r3, [pc, #36]	; (8010f48 <tcp_input+0x290>)
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f28:	3301      	adds	r3, #1
 8010f2a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d029      	beq.n	8010f84 <tcp_input+0x2cc>
      prev = pcb;
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	61bb      	str	r3, [r7, #24]
      continue;
 8010f34:	e06b      	b.n	801100e <tcp_input+0x356>
 8010f36:	bf00      	nop
 8010f38:	0801ba84 	.word	0x0801ba84
 8010f3c:	0801bab8 	.word	0x0801bab8
 8010f40:	0801bad0 	.word	0x0801bad0
 8010f44:	20000a44 	.word	0x20000a44
 8010f48:	2000c5cc 	.word	0x2000c5cc
 8010f4c:	20000a48 	.word	0x20000a48
 8010f50:	20000a4c 	.word	0x20000a4c
 8010f54:	20000a4a 	.word	0x20000a4a
 8010f58:	0801baf8 	.word	0x0801baf8
 8010f5c:	0801bb08 	.word	0x0801bb08
 8010f60:	0801bb14 	.word	0x0801bb14
 8010f64:	20000a54 	.word	0x20000a54
 8010f68:	20000a58 	.word	0x20000a58
 8010f6c:	20000a60 	.word	0x20000a60
 8010f70:	20000a5e 	.word	0x20000a5e
 8010f74:	2000fb10 	.word	0x2000fb10
 8010f78:	0801bb34 	.word	0x0801bb34
 8010f7c:	0801bb5c 	.word	0x0801bb5c
 8010f80:	0801bb88 	.word	0x0801bb88
    }

    if (pcb->remote_port == tcphdr->src &&
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	8b1a      	ldrh	r2, [r3, #24]
 8010f88:	4b94      	ldr	r3, [pc, #592]	; (80111dc <tcp_input+0x524>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	881b      	ldrh	r3, [r3, #0]
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d13a      	bne.n	801100a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	8ada      	ldrh	r2, [r3, #22]
 8010f98:	4b90      	ldr	r3, [pc, #576]	; (80111dc <tcp_input+0x524>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	885b      	ldrh	r3, [r3, #2]
 8010f9e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d132      	bne.n	801100a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	685a      	ldr	r2, [r3, #4]
 8010fa8:	4b8d      	ldr	r3, [pc, #564]	; (80111e0 <tcp_input+0x528>)
 8010faa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d12c      	bne.n	801100a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	681a      	ldr	r2, [r3, #0]
 8010fb4:	4b8a      	ldr	r3, [pc, #552]	; (80111e0 <tcp_input+0x528>)
 8010fb6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d126      	bne.n	801100a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	68db      	ldr	r3, [r3, #12]
 8010fc0:	69fa      	ldr	r2, [r7, #28]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d106      	bne.n	8010fd4 <tcp_input+0x31c>
 8010fc6:	4b87      	ldr	r3, [pc, #540]	; (80111e4 <tcp_input+0x52c>)
 8010fc8:	f240 120d 	movw	r2, #269	; 0x10d
 8010fcc:	4986      	ldr	r1, [pc, #536]	; (80111e8 <tcp_input+0x530>)
 8010fce:	4887      	ldr	r0, [pc, #540]	; (80111ec <tcp_input+0x534>)
 8010fd0:	f006 ff6c 	bl	8017eac <iprintf>
      if (prev != NULL) {
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00a      	beq.n	8010ff0 <tcp_input+0x338>
        prev->next = pcb->next;
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	68da      	ldr	r2, [r3, #12]
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010fe2:	4b83      	ldr	r3, [pc, #524]	; (80111f0 <tcp_input+0x538>)
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010fea:	4a81      	ldr	r2, [pc, #516]	; (80111f0 <tcp_input+0x538>)
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	69fa      	ldr	r2, [r7, #28]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d111      	bne.n	801101e <tcp_input+0x366>
 8010ffa:	4b7a      	ldr	r3, [pc, #488]	; (80111e4 <tcp_input+0x52c>)
 8010ffc:	f240 1215 	movw	r2, #277	; 0x115
 8011000:	497c      	ldr	r1, [pc, #496]	; (80111f4 <tcp_input+0x53c>)
 8011002:	487a      	ldr	r0, [pc, #488]	; (80111ec <tcp_input+0x534>)
 8011004:	f006 ff52 	bl	8017eac <iprintf>
      break;
 8011008:	e009      	b.n	801101e <tcp_input+0x366>
    }
    prev = pcb;
 801100a:	69fb      	ldr	r3, [r7, #28]
 801100c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	61fb      	str	r3, [r7, #28]
 8011014:	69fb      	ldr	r3, [r7, #28]
 8011016:	2b00      	cmp	r3, #0
 8011018:	f47f af5e 	bne.w	8010ed8 <tcp_input+0x220>
 801101c:	e000      	b.n	8011020 <tcp_input+0x368>
      break;
 801101e:	bf00      	nop
  }

  if (pcb == NULL) {
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	2b00      	cmp	r3, #0
 8011024:	f040 8095 	bne.w	8011152 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011028:	4b73      	ldr	r3, [pc, #460]	; (80111f8 <tcp_input+0x540>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	61fb      	str	r3, [r7, #28]
 801102e:	e03f      	b.n	80110b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	7d1b      	ldrb	r3, [r3, #20]
 8011034:	2b0a      	cmp	r3, #10
 8011036:	d006      	beq.n	8011046 <tcp_input+0x38e>
 8011038:	4b6a      	ldr	r3, [pc, #424]	; (80111e4 <tcp_input+0x52c>)
 801103a:	f240 121f 	movw	r2, #287	; 0x11f
 801103e:	496f      	ldr	r1, [pc, #444]	; (80111fc <tcp_input+0x544>)
 8011040:	486a      	ldr	r0, [pc, #424]	; (80111ec <tcp_input+0x534>)
 8011042:	f006 ff33 	bl	8017eac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	7a1b      	ldrb	r3, [r3, #8]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d009      	beq.n	8011062 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	7a1a      	ldrb	r2, [r3, #8]
 8011052:	4b63      	ldr	r3, [pc, #396]	; (80111e0 <tcp_input+0x528>)
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801105a:	3301      	adds	r3, #1
 801105c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801105e:	429a      	cmp	r2, r3
 8011060:	d122      	bne.n	80110a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	8b1a      	ldrh	r2, [r3, #24]
 8011066:	4b5d      	ldr	r3, [pc, #372]	; (80111dc <tcp_input+0x524>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	881b      	ldrh	r3, [r3, #0]
 801106c:	b29b      	uxth	r3, r3
 801106e:	429a      	cmp	r2, r3
 8011070:	d11b      	bne.n	80110aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	8ada      	ldrh	r2, [r3, #22]
 8011076:	4b59      	ldr	r3, [pc, #356]	; (80111dc <tcp_input+0x524>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	885b      	ldrh	r3, [r3, #2]
 801107c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801107e:	429a      	cmp	r2, r3
 8011080:	d113      	bne.n	80110aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	685a      	ldr	r2, [r3, #4]
 8011086:	4b56      	ldr	r3, [pc, #344]	; (80111e0 <tcp_input+0x528>)
 8011088:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801108a:	429a      	cmp	r2, r3
 801108c:	d10d      	bne.n	80110aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	4b53      	ldr	r3, [pc, #332]	; (80111e0 <tcp_input+0x528>)
 8011094:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011096:	429a      	cmp	r2, r3
 8011098:	d107      	bne.n	80110aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801109a:	69f8      	ldr	r0, [r7, #28]
 801109c:	f000 fb54 	bl	8011748 <tcp_timewait_input>
        }
        pbuf_free(p);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7fd fd3b 	bl	800eb1c <pbuf_free>
        return;
 80110a6:	e1f0      	b.n	801148a <tcp_input+0x7d2>
        continue;
 80110a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	68db      	ldr	r3, [r3, #12]
 80110ae:	61fb      	str	r3, [r7, #28]
 80110b0:	69fb      	ldr	r3, [r7, #28]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d1bc      	bne.n	8011030 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80110b6:	2300      	movs	r3, #0
 80110b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110ba:	4b51      	ldr	r3, [pc, #324]	; (8011200 <tcp_input+0x548>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	617b      	str	r3, [r7, #20]
 80110c0:	e02a      	b.n	8011118 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	7a1b      	ldrb	r3, [r3, #8]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00c      	beq.n	80110e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	7a1a      	ldrb	r2, [r3, #8]
 80110ce:	4b44      	ldr	r3, [pc, #272]	; (80111e0 <tcp_input+0x528>)
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110d6:	3301      	adds	r3, #1
 80110d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110da:	429a      	cmp	r2, r3
 80110dc:	d002      	beq.n	80110e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	61bb      	str	r3, [r7, #24]
        continue;
 80110e2:	e016      	b.n	8011112 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	8ada      	ldrh	r2, [r3, #22]
 80110e8:	4b3c      	ldr	r3, [pc, #240]	; (80111dc <tcp_input+0x524>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	885b      	ldrh	r3, [r3, #2]
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d10c      	bne.n	801110e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	4b39      	ldr	r3, [pc, #228]	; (80111e0 <tcp_input+0x528>)
 80110fa:	695b      	ldr	r3, [r3, #20]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d00f      	beq.n	8011120 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d00d      	beq.n	8011122 <tcp_input+0x46a>
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d009      	beq.n	8011122 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	617b      	str	r3, [r7, #20]
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d1d1      	bne.n	80110c2 <tcp_input+0x40a>
 801111e:	e000      	b.n	8011122 <tcp_input+0x46a>
            break;
 8011120:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d014      	beq.n	8011152 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00a      	beq.n	8011144 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	68da      	ldr	r2, [r3, #12]
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011136:	4b32      	ldr	r3, [pc, #200]	; (8011200 <tcp_input+0x548>)
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801113e:	4a30      	ldr	r2, [pc, #192]	; (8011200 <tcp_input+0x548>)
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011144:	6978      	ldr	r0, [r7, #20]
 8011146:	f000 fa01 	bl	801154c <tcp_listen_input>
      }
      pbuf_free(p);
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7fd fce6 	bl	800eb1c <pbuf_free>
      return;
 8011150:	e19b      	b.n	801148a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	2b00      	cmp	r3, #0
 8011156:	f000 8160 	beq.w	801141a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801115a:	4b2a      	ldr	r3, [pc, #168]	; (8011204 <tcp_input+0x54c>)
 801115c:	2200      	movs	r2, #0
 801115e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	891a      	ldrh	r2, [r3, #8]
 8011164:	4b27      	ldr	r3, [pc, #156]	; (8011204 <tcp_input+0x54c>)
 8011166:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011168:	4a26      	ldr	r2, [pc, #152]	; (8011204 <tcp_input+0x54c>)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801116e:	4b1b      	ldr	r3, [pc, #108]	; (80111dc <tcp_input+0x524>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a24      	ldr	r2, [pc, #144]	; (8011204 <tcp_input+0x54c>)
 8011174:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011176:	4b24      	ldr	r3, [pc, #144]	; (8011208 <tcp_input+0x550>)
 8011178:	2200      	movs	r2, #0
 801117a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801117c:	4b23      	ldr	r3, [pc, #140]	; (801120c <tcp_input+0x554>)
 801117e:	2200      	movs	r2, #0
 8011180:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011182:	4b23      	ldr	r3, [pc, #140]	; (8011210 <tcp_input+0x558>)
 8011184:	2200      	movs	r2, #0
 8011186:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011188:	4b22      	ldr	r3, [pc, #136]	; (8011214 <tcp_input+0x55c>)
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	f003 0308 	and.w	r3, r3, #8
 8011190:	2b00      	cmp	r3, #0
 8011192:	d006      	beq.n	80111a2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	7b5b      	ldrb	r3, [r3, #13]
 8011198:	f043 0301 	orr.w	r3, r3, #1
 801119c:	b2da      	uxtb	r2, r3
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d038      	beq.n	801121c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80111aa:	69f8      	ldr	r0, [r7, #28]
 80111ac:	f7ff f852 	bl	8010254 <tcp_process_refused_data>
 80111b0:	4603      	mov	r3, r0
 80111b2:	f113 0f0d 	cmn.w	r3, #13
 80111b6:	d007      	beq.n	80111c8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80111b8:	69fb      	ldr	r3, [r7, #28]
 80111ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d02d      	beq.n	801121c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80111c0:	4b15      	ldr	r3, [pc, #84]	; (8011218 <tcp_input+0x560>)
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d029      	beq.n	801121c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	f040 8104 	bne.w	80113da <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80111d2:	69f8      	ldr	r0, [r7, #28]
 80111d4:	f003 fe16 	bl	8014e04 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80111d8:	e0ff      	b.n	80113da <tcp_input+0x722>
 80111da:	bf00      	nop
 80111dc:	20000a44 	.word	0x20000a44
 80111e0:	2000c5cc 	.word	0x2000c5cc
 80111e4:	0801ba84 	.word	0x0801ba84
 80111e8:	0801bbb0 	.word	0x0801bbb0
 80111ec:	0801bad0 	.word	0x0801bad0
 80111f0:	2000fb10 	.word	0x2000fb10
 80111f4:	0801bbdc 	.word	0x0801bbdc
 80111f8:	2000fb20 	.word	0x2000fb20
 80111fc:	0801bc08 	.word	0x0801bc08
 8011200:	2000fb18 	.word	0x2000fb18
 8011204:	20000a34 	.word	0x20000a34
 8011208:	20000a64 	.word	0x20000a64
 801120c:	20000a61 	.word	0x20000a61
 8011210:	20000a5c 	.word	0x20000a5c
 8011214:	20000a60 	.word	0x20000a60
 8011218:	20000a5e 	.word	0x20000a5e
      }
    }
    tcp_input_pcb = pcb;
 801121c:	4a9c      	ldr	r2, [pc, #624]	; (8011490 <tcp_input+0x7d8>)
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011222:	69f8      	ldr	r0, [r7, #28]
 8011224:	f000 fb0a 	bl	801183c <tcp_process>
 8011228:	4603      	mov	r3, r0
 801122a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801122c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011230:	f113 0f0d 	cmn.w	r3, #13
 8011234:	f000 80d3 	beq.w	80113de <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8011238:	4b96      	ldr	r3, [pc, #600]	; (8011494 <tcp_input+0x7dc>)
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	f003 0308 	and.w	r3, r3, #8
 8011240:	2b00      	cmp	r3, #0
 8011242:	d015      	beq.n	8011270 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801124a:	2b00      	cmp	r3, #0
 801124c:	d008      	beq.n	8011260 <tcp_input+0x5a8>
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011254:	69fa      	ldr	r2, [r7, #28]
 8011256:	6912      	ldr	r2, [r2, #16]
 8011258:	f06f 010d 	mvn.w	r1, #13
 801125c:	4610      	mov	r0, r2
 801125e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011260:	69f9      	ldr	r1, [r7, #28]
 8011262:	488d      	ldr	r0, [pc, #564]	; (8011498 <tcp_input+0x7e0>)
 8011264:	f7ff fbb0 	bl	80109c8 <tcp_pcb_remove>
        tcp_free(pcb);
 8011268:	69f8      	ldr	r0, [r7, #28]
 801126a:	f7fd fef7 	bl	800f05c <tcp_free>
 801126e:	e0c1      	b.n	80113f4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011274:	4b89      	ldr	r3, [pc, #548]	; (801149c <tcp_input+0x7e4>)
 8011276:	881b      	ldrh	r3, [r3, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d01d      	beq.n	80112b8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801127c:	4b87      	ldr	r3, [pc, #540]	; (801149c <tcp_input+0x7e4>)
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011288:	2b00      	cmp	r3, #0
 801128a:	d00a      	beq.n	80112a2 <tcp_input+0x5ea>
 801128c:	69fb      	ldr	r3, [r7, #28]
 801128e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011292:	69fa      	ldr	r2, [r7, #28]
 8011294:	6910      	ldr	r0, [r2, #16]
 8011296:	89fa      	ldrh	r2, [r7, #14]
 8011298:	69f9      	ldr	r1, [r7, #28]
 801129a:	4798      	blx	r3
 801129c:	4603      	mov	r3, r0
 801129e:	74fb      	strb	r3, [r7, #19]
 80112a0:	e001      	b.n	80112a6 <tcp_input+0x5ee>
 80112a2:	2300      	movs	r3, #0
 80112a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80112a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112aa:	f113 0f0d 	cmn.w	r3, #13
 80112ae:	f000 8098 	beq.w	80113e2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80112b2:	4b7a      	ldr	r3, [pc, #488]	; (801149c <tcp_input+0x7e4>)
 80112b4:	2200      	movs	r2, #0
 80112b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80112b8:	69f8      	ldr	r0, [r7, #28]
 80112ba:	f000 f907 	bl	80114cc <tcp_input_delayed_close>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f040 8090 	bne.w	80113e6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80112c6:	4b76      	ldr	r3, [pc, #472]	; (80114a0 <tcp_input+0x7e8>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d041      	beq.n	8011352 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80112ce:	69fb      	ldr	r3, [r7, #28]
 80112d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d006      	beq.n	80112e4 <tcp_input+0x62c>
 80112d6:	4b73      	ldr	r3, [pc, #460]	; (80114a4 <tcp_input+0x7ec>)
 80112d8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80112dc:	4972      	ldr	r1, [pc, #456]	; (80114a8 <tcp_input+0x7f0>)
 80112de:	4873      	ldr	r0, [pc, #460]	; (80114ac <tcp_input+0x7f4>)
 80112e0:	f006 fde4 	bl	8017eac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	8b5b      	ldrh	r3, [r3, #26]
 80112e8:	f003 0310 	and.w	r3, r3, #16
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d008      	beq.n	8011302 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80112f0:	4b6b      	ldr	r3, [pc, #428]	; (80114a0 <tcp_input+0x7e8>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7fd fc11 	bl	800eb1c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80112fa:	69f8      	ldr	r0, [r7, #28]
 80112fc:	f7fe f996 	bl	800f62c <tcp_abort>
            goto aborted;
 8011300:	e078      	b.n	80113f4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00c      	beq.n	8011326 <tcp_input+0x66e>
 801130c:	69fb      	ldr	r3, [r7, #28]
 801130e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	6918      	ldr	r0, [r3, #16]
 8011316:	4b62      	ldr	r3, [pc, #392]	; (80114a0 <tcp_input+0x7e8>)
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	2300      	movs	r3, #0
 801131c:	69f9      	ldr	r1, [r7, #28]
 801131e:	47a0      	blx	r4
 8011320:	4603      	mov	r3, r0
 8011322:	74fb      	strb	r3, [r7, #19]
 8011324:	e008      	b.n	8011338 <tcp_input+0x680>
 8011326:	4b5e      	ldr	r3, [pc, #376]	; (80114a0 <tcp_input+0x7e8>)
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	2300      	movs	r3, #0
 801132c:	69f9      	ldr	r1, [r7, #28]
 801132e:	2000      	movs	r0, #0
 8011330:	f7ff f884 	bl	801043c <tcp_recv_null>
 8011334:	4603      	mov	r3, r0
 8011336:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801133c:	f113 0f0d 	cmn.w	r3, #13
 8011340:	d053      	beq.n	80113ea <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d003      	beq.n	8011352 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801134a:	4b55      	ldr	r3, [pc, #340]	; (80114a0 <tcp_input+0x7e8>)
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011352:	4b50      	ldr	r3, [pc, #320]	; (8011494 <tcp_input+0x7dc>)
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	f003 0320 	and.w	r3, r3, #32
 801135a:	2b00      	cmp	r3, #0
 801135c:	d030      	beq.n	80113c0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801135e:	69fb      	ldr	r3, [r7, #28]
 8011360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011362:	2b00      	cmp	r3, #0
 8011364:	d009      	beq.n	801137a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801136a:	7b5a      	ldrb	r2, [r3, #13]
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011370:	f042 0220 	orr.w	r2, r2, #32
 8011374:	b2d2      	uxtb	r2, r2
 8011376:	735a      	strb	r2, [r3, #13]
 8011378:	e022      	b.n	80113c0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801137e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011382:	d005      	beq.n	8011390 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011388:	3301      	adds	r3, #1
 801138a:	b29a      	uxth	r2, r3
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00b      	beq.n	80113b2 <tcp_input+0x6fa>
 801139a:	69fb      	ldr	r3, [r7, #28]
 801139c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	6918      	ldr	r0, [r3, #16]
 80113a4:	2300      	movs	r3, #0
 80113a6:	2200      	movs	r2, #0
 80113a8:	69f9      	ldr	r1, [r7, #28]
 80113aa:	47a0      	blx	r4
 80113ac:	4603      	mov	r3, r0
 80113ae:	74fb      	strb	r3, [r7, #19]
 80113b0:	e001      	b.n	80113b6 <tcp_input+0x6fe>
 80113b2:	2300      	movs	r3, #0
 80113b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80113b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113ba:	f113 0f0d 	cmn.w	r3, #13
 80113be:	d016      	beq.n	80113ee <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80113c0:	4b33      	ldr	r3, [pc, #204]	; (8011490 <tcp_input+0x7d8>)
 80113c2:	2200      	movs	r2, #0
 80113c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80113c6:	69f8      	ldr	r0, [r7, #28]
 80113c8:	f000 f880 	bl	80114cc <tcp_input_delayed_close>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d10f      	bne.n	80113f2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80113d2:	69f8      	ldr	r0, [r7, #28]
 80113d4:	f002 ff10 	bl	80141f8 <tcp_output>
 80113d8:	e00c      	b.n	80113f4 <tcp_input+0x73c>
        goto aborted;
 80113da:	bf00      	nop
 80113dc:	e00a      	b.n	80113f4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80113de:	bf00      	nop
 80113e0:	e008      	b.n	80113f4 <tcp_input+0x73c>
              goto aborted;
 80113e2:	bf00      	nop
 80113e4:	e006      	b.n	80113f4 <tcp_input+0x73c>
          goto aborted;
 80113e6:	bf00      	nop
 80113e8:	e004      	b.n	80113f4 <tcp_input+0x73c>
            goto aborted;
 80113ea:	bf00      	nop
 80113ec:	e002      	b.n	80113f4 <tcp_input+0x73c>
              goto aborted;
 80113ee:	bf00      	nop
 80113f0:	e000      	b.n	80113f4 <tcp_input+0x73c>
          goto aborted;
 80113f2:	bf00      	nop
    tcp_input_pcb = NULL;
 80113f4:	4b26      	ldr	r3, [pc, #152]	; (8011490 <tcp_input+0x7d8>)
 80113f6:	2200      	movs	r2, #0
 80113f8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80113fa:	4b29      	ldr	r3, [pc, #164]	; (80114a0 <tcp_input+0x7e8>)
 80113fc:	2200      	movs	r2, #0
 80113fe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011400:	4b2b      	ldr	r3, [pc, #172]	; (80114b0 <tcp_input+0x7f8>)
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d03f      	beq.n	8011488 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011408:	4b29      	ldr	r3, [pc, #164]	; (80114b0 <tcp_input+0x7f8>)
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	4618      	mov	r0, r3
 801140e:	f7fd fb85 	bl	800eb1c <pbuf_free>
      inseg.p = NULL;
 8011412:	4b27      	ldr	r3, [pc, #156]	; (80114b0 <tcp_input+0x7f8>)
 8011414:	2200      	movs	r2, #0
 8011416:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011418:	e036      	b.n	8011488 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801141a:	4b26      	ldr	r3, [pc, #152]	; (80114b4 <tcp_input+0x7fc>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	899b      	ldrh	r3, [r3, #12]
 8011420:	b29b      	uxth	r3, r3
 8011422:	4618      	mov	r0, r3
 8011424:	f7fb ffe8 	bl	800d3f8 <lwip_htons>
 8011428:	4603      	mov	r3, r0
 801142a:	b2db      	uxtb	r3, r3
 801142c:	f003 0304 	and.w	r3, r3, #4
 8011430:	2b00      	cmp	r3, #0
 8011432:	d118      	bne.n	8011466 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011434:	4b20      	ldr	r3, [pc, #128]	; (80114b8 <tcp_input+0x800>)
 8011436:	6819      	ldr	r1, [r3, #0]
 8011438:	4b20      	ldr	r3, [pc, #128]	; (80114bc <tcp_input+0x804>)
 801143a:	881b      	ldrh	r3, [r3, #0]
 801143c:	461a      	mov	r2, r3
 801143e:	4b20      	ldr	r3, [pc, #128]	; (80114c0 <tcp_input+0x808>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011444:	4b1b      	ldr	r3, [pc, #108]	; (80114b4 <tcp_input+0x7fc>)
 8011446:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011448:	885b      	ldrh	r3, [r3, #2]
 801144a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801144c:	4a19      	ldr	r2, [pc, #100]	; (80114b4 <tcp_input+0x7fc>)
 801144e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011450:	8812      	ldrh	r2, [r2, #0]
 8011452:	b292      	uxth	r2, r2
 8011454:	9202      	str	r2, [sp, #8]
 8011456:	9301      	str	r3, [sp, #4]
 8011458:	4b1a      	ldr	r3, [pc, #104]	; (80114c4 <tcp_input+0x80c>)
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	4b1a      	ldr	r3, [pc, #104]	; (80114c8 <tcp_input+0x810>)
 801145e:	4602      	mov	r2, r0
 8011460:	2000      	movs	r0, #0
 8011462:	f003 fc7d 	bl	8014d60 <tcp_rst>
    pbuf_free(p);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7fd fb58 	bl	800eb1c <pbuf_free>
  return;
 801146c:	e00c      	b.n	8011488 <tcp_input+0x7d0>
    goto dropped;
 801146e:	bf00      	nop
 8011470:	e006      	b.n	8011480 <tcp_input+0x7c8>
    goto dropped;
 8011472:	bf00      	nop
 8011474:	e004      	b.n	8011480 <tcp_input+0x7c8>
    goto dropped;
 8011476:	bf00      	nop
 8011478:	e002      	b.n	8011480 <tcp_input+0x7c8>
      goto dropped;
 801147a:	bf00      	nop
 801147c:	e000      	b.n	8011480 <tcp_input+0x7c8>
      goto dropped;
 801147e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7fd fb4b 	bl	800eb1c <pbuf_free>
 8011486:	e000      	b.n	801148a <tcp_input+0x7d2>
  return;
 8011488:	bf00      	nop
}
 801148a:	3724      	adds	r7, #36	; 0x24
 801148c:	46bd      	mov	sp, r7
 801148e:	bd90      	pop	{r4, r7, pc}
 8011490:	2000fb24 	.word	0x2000fb24
 8011494:	20000a61 	.word	0x20000a61
 8011498:	2000fb10 	.word	0x2000fb10
 801149c:	20000a5c 	.word	0x20000a5c
 80114a0:	20000a64 	.word	0x20000a64
 80114a4:	0801ba84 	.word	0x0801ba84
 80114a8:	0801bc38 	.word	0x0801bc38
 80114ac:	0801bad0 	.word	0x0801bad0
 80114b0:	20000a34 	.word	0x20000a34
 80114b4:	20000a44 	.word	0x20000a44
 80114b8:	20000a58 	.word	0x20000a58
 80114bc:	20000a5e 	.word	0x20000a5e
 80114c0:	20000a54 	.word	0x20000a54
 80114c4:	2000c5dc 	.word	0x2000c5dc
 80114c8:	2000c5e0 	.word	0x2000c5e0

080114cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d106      	bne.n	80114e8 <tcp_input_delayed_close+0x1c>
 80114da:	4b17      	ldr	r3, [pc, #92]	; (8011538 <tcp_input_delayed_close+0x6c>)
 80114dc:	f240 225a 	movw	r2, #602	; 0x25a
 80114e0:	4916      	ldr	r1, [pc, #88]	; (801153c <tcp_input_delayed_close+0x70>)
 80114e2:	4817      	ldr	r0, [pc, #92]	; (8011540 <tcp_input_delayed_close+0x74>)
 80114e4:	f006 fce2 	bl	8017eac <iprintf>

  if (recv_flags & TF_CLOSED) {
 80114e8:	4b16      	ldr	r3, [pc, #88]	; (8011544 <tcp_input_delayed_close+0x78>)
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	f003 0310 	and.w	r3, r3, #16
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d01c      	beq.n	801152e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	8b5b      	ldrh	r3, [r3, #26]
 80114f8:	f003 0310 	and.w	r3, r3, #16
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d10d      	bne.n	801151c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011506:	2b00      	cmp	r3, #0
 8011508:	d008      	beq.n	801151c <tcp_input_delayed_close+0x50>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	6912      	ldr	r2, [r2, #16]
 8011514:	f06f 010e 	mvn.w	r1, #14
 8011518:	4610      	mov	r0, r2
 801151a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801151c:	6879      	ldr	r1, [r7, #4]
 801151e:	480a      	ldr	r0, [pc, #40]	; (8011548 <tcp_input_delayed_close+0x7c>)
 8011520:	f7ff fa52 	bl	80109c8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7fd fd99 	bl	800f05c <tcp_free>
    return 1;
 801152a:	2301      	movs	r3, #1
 801152c:	e000      	b.n	8011530 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801152e:	2300      	movs	r3, #0
}
 8011530:	4618      	mov	r0, r3
 8011532:	3708      	adds	r7, #8
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	0801ba84 	.word	0x0801ba84
 801153c:	0801bc54 	.word	0x0801bc54
 8011540:	0801bad0 	.word	0x0801bad0
 8011544:	20000a61 	.word	0x20000a61
 8011548:	2000fb10 	.word	0x2000fb10

0801154c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801154c:	b590      	push	{r4, r7, lr}
 801154e:	b08b      	sub	sp, #44	; 0x2c
 8011550:	af04      	add	r7, sp, #16
 8011552:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011554:	4b6f      	ldr	r3, [pc, #444]	; (8011714 <tcp_listen_input+0x1c8>)
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	f003 0304 	and.w	r3, r3, #4
 801155c:	2b00      	cmp	r3, #0
 801155e:	f040 80d2 	bne.w	8011706 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d106      	bne.n	8011576 <tcp_listen_input+0x2a>
 8011568:	4b6b      	ldr	r3, [pc, #428]	; (8011718 <tcp_listen_input+0x1cc>)
 801156a:	f240 2281 	movw	r2, #641	; 0x281
 801156e:	496b      	ldr	r1, [pc, #428]	; (801171c <tcp_listen_input+0x1d0>)
 8011570:	486b      	ldr	r0, [pc, #428]	; (8011720 <tcp_listen_input+0x1d4>)
 8011572:	f006 fc9b 	bl	8017eac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011576:	4b67      	ldr	r3, [pc, #412]	; (8011714 <tcp_listen_input+0x1c8>)
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	f003 0310 	and.w	r3, r3, #16
 801157e:	2b00      	cmp	r3, #0
 8011580:	d019      	beq.n	80115b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011582:	4b68      	ldr	r3, [pc, #416]	; (8011724 <tcp_listen_input+0x1d8>)
 8011584:	6819      	ldr	r1, [r3, #0]
 8011586:	4b68      	ldr	r3, [pc, #416]	; (8011728 <tcp_listen_input+0x1dc>)
 8011588:	881b      	ldrh	r3, [r3, #0]
 801158a:	461a      	mov	r2, r3
 801158c:	4b67      	ldr	r3, [pc, #412]	; (801172c <tcp_listen_input+0x1e0>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011592:	4b67      	ldr	r3, [pc, #412]	; (8011730 <tcp_listen_input+0x1e4>)
 8011594:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011596:	885b      	ldrh	r3, [r3, #2]
 8011598:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801159a:	4a65      	ldr	r2, [pc, #404]	; (8011730 <tcp_listen_input+0x1e4>)
 801159c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801159e:	8812      	ldrh	r2, [r2, #0]
 80115a0:	b292      	uxth	r2, r2
 80115a2:	9202      	str	r2, [sp, #8]
 80115a4:	9301      	str	r3, [sp, #4]
 80115a6:	4b63      	ldr	r3, [pc, #396]	; (8011734 <tcp_listen_input+0x1e8>)
 80115a8:	9300      	str	r3, [sp, #0]
 80115aa:	4b63      	ldr	r3, [pc, #396]	; (8011738 <tcp_listen_input+0x1ec>)
 80115ac:	4602      	mov	r2, r0
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f003 fbd6 	bl	8014d60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80115b4:	e0a9      	b.n	801170a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80115b6:	4b57      	ldr	r3, [pc, #348]	; (8011714 <tcp_listen_input+0x1c8>)
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	f003 0302 	and.w	r3, r3, #2
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f000 80a3 	beq.w	801170a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	7d5b      	ldrb	r3, [r3, #21]
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7ff f85b 	bl	8010684 <tcp_alloc>
 80115ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d111      	bne.n	80115fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	699b      	ldr	r3, [r3, #24]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d00a      	beq.n	80115f4 <tcp_listen_input+0xa8>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	699b      	ldr	r3, [r3, #24]
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	6910      	ldr	r0, [r2, #16]
 80115e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115ea:	2100      	movs	r1, #0
 80115ec:	4798      	blx	r3
 80115ee:	4603      	mov	r3, r0
 80115f0:	73bb      	strb	r3, [r7, #14]
      return;
 80115f2:	e08b      	b.n	801170c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80115f4:	23f0      	movs	r3, #240	; 0xf0
 80115f6:	73bb      	strb	r3, [r7, #14]
      return;
 80115f8:	e088      	b.n	801170c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80115fa:	4b50      	ldr	r3, [pc, #320]	; (801173c <tcp_listen_input+0x1f0>)
 80115fc:	695a      	ldr	r2, [r3, #20]
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011602:	4b4e      	ldr	r3, [pc, #312]	; (801173c <tcp_listen_input+0x1f0>)
 8011604:	691a      	ldr	r2, [r3, #16]
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	8ada      	ldrh	r2, [r3, #22]
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011612:	4b47      	ldr	r3, [pc, #284]	; (8011730 <tcp_listen_input+0x1e4>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	881b      	ldrh	r3, [r3, #0]
 8011618:	b29a      	uxth	r2, r3
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	2203      	movs	r2, #3
 8011622:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011624:	4b41      	ldr	r3, [pc, #260]	; (801172c <tcp_listen_input+0x1e0>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011636:	6978      	ldr	r0, [r7, #20]
 8011638:	f7ff fa5a 	bl	8010af0 <tcp_next_iss>
 801163c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	693a      	ldr	r2, [r7, #16]
 8011642:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	693a      	ldr	r2, [r7, #16]
 8011648:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	693a      	ldr	r2, [r7, #16]
 801164e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	693a      	ldr	r2, [r7, #16]
 8011654:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011656:	4b35      	ldr	r3, [pc, #212]	; (801172c <tcp_listen_input+0x1e0>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	1e5a      	subs	r2, r3, #1
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	691a      	ldr	r2, [r3, #16]
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	7a5b      	ldrb	r3, [r3, #9]
 8011672:	f003 030c 	and.w	r3, r3, #12
 8011676:	b2da      	uxtb	r2, r3
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	7a1a      	ldrb	r2, [r3, #8]
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011684:	4b2e      	ldr	r3, [pc, #184]	; (8011740 <tcp_listen_input+0x1f4>)
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	60da      	str	r2, [r3, #12]
 801168c:	4a2c      	ldr	r2, [pc, #176]	; (8011740 <tcp_listen_input+0x1f4>)
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	6013      	str	r3, [r2, #0]
 8011692:	f003 fd27 	bl	80150e4 <tcp_timer_needed>
 8011696:	4b2b      	ldr	r3, [pc, #172]	; (8011744 <tcp_listen_input+0x1f8>)
 8011698:	2201      	movs	r2, #1
 801169a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801169c:	6978      	ldr	r0, [r7, #20]
 801169e:	f001 fd8d 	bl	80131bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80116a2:	4b23      	ldr	r3, [pc, #140]	; (8011730 <tcp_listen_input+0x1e4>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	89db      	ldrh	r3, [r3, #14]
 80116a8:	b29a      	uxth	r2, r3
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	3304      	adds	r3, #4
 80116c4:	4618      	mov	r0, r3
 80116c6:	f005 f8eb 	bl	80168a0 <ip4_route>
 80116ca:	4601      	mov	r1, r0
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	3304      	adds	r3, #4
 80116d0:	461a      	mov	r2, r3
 80116d2:	4620      	mov	r0, r4
 80116d4:	f7ff fa32 	bl	8010b3c <tcp_eff_send_mss_netif>
 80116d8:	4603      	mov	r3, r0
 80116da:	461a      	mov	r2, r3
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80116e0:	2112      	movs	r1, #18
 80116e2:	6978      	ldr	r0, [r7, #20]
 80116e4:	f002 fc9a 	bl	801401c <tcp_enqueue_flags>
 80116e8:	4603      	mov	r3, r0
 80116ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80116ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d004      	beq.n	80116fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80116f4:	2100      	movs	r1, #0
 80116f6:	6978      	ldr	r0, [r7, #20]
 80116f8:	f7fd feda 	bl	800f4b0 <tcp_abandon>
      return;
 80116fc:	e006      	b.n	801170c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80116fe:	6978      	ldr	r0, [r7, #20]
 8011700:	f002 fd7a 	bl	80141f8 <tcp_output>
  return;
 8011704:	e001      	b.n	801170a <tcp_listen_input+0x1be>
    return;
 8011706:	bf00      	nop
 8011708:	e000      	b.n	801170c <tcp_listen_input+0x1c0>
  return;
 801170a:	bf00      	nop
}
 801170c:	371c      	adds	r7, #28
 801170e:	46bd      	mov	sp, r7
 8011710:	bd90      	pop	{r4, r7, pc}
 8011712:	bf00      	nop
 8011714:	20000a60 	.word	0x20000a60
 8011718:	0801ba84 	.word	0x0801ba84
 801171c:	0801bc7c 	.word	0x0801bc7c
 8011720:	0801bad0 	.word	0x0801bad0
 8011724:	20000a58 	.word	0x20000a58
 8011728:	20000a5e 	.word	0x20000a5e
 801172c:	20000a54 	.word	0x20000a54
 8011730:	20000a44 	.word	0x20000a44
 8011734:	2000c5dc 	.word	0x2000c5dc
 8011738:	2000c5e0 	.word	0x2000c5e0
 801173c:	2000c5cc 	.word	0x2000c5cc
 8011740:	2000fb10 	.word	0x2000fb10
 8011744:	2000fb0c 	.word	0x2000fb0c

08011748 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af04      	add	r7, sp, #16
 801174e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011750:	4b2f      	ldr	r3, [pc, #188]	; (8011810 <tcp_timewait_input+0xc8>)
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	f003 0304 	and.w	r3, r3, #4
 8011758:	2b00      	cmp	r3, #0
 801175a:	d153      	bne.n	8011804 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d106      	bne.n	8011770 <tcp_timewait_input+0x28>
 8011762:	4b2c      	ldr	r3, [pc, #176]	; (8011814 <tcp_timewait_input+0xcc>)
 8011764:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011768:	492b      	ldr	r1, [pc, #172]	; (8011818 <tcp_timewait_input+0xd0>)
 801176a:	482c      	ldr	r0, [pc, #176]	; (801181c <tcp_timewait_input+0xd4>)
 801176c:	f006 fb9e 	bl	8017eac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011770:	4b27      	ldr	r3, [pc, #156]	; (8011810 <tcp_timewait_input+0xc8>)
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	f003 0302 	and.w	r3, r3, #2
 8011778:	2b00      	cmp	r3, #0
 801177a:	d02a      	beq.n	80117d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801177c:	4b28      	ldr	r3, [pc, #160]	; (8011820 <tcp_timewait_input+0xd8>)
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	2b00      	cmp	r3, #0
 8011788:	db2d      	blt.n	80117e6 <tcp_timewait_input+0x9e>
 801178a:	4b25      	ldr	r3, [pc, #148]	; (8011820 <tcp_timewait_input+0xd8>)
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011796:	440b      	add	r3, r1
 8011798:	1ad3      	subs	r3, r2, r3
 801179a:	2b00      	cmp	r3, #0
 801179c:	dc23      	bgt.n	80117e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801179e:	4b21      	ldr	r3, [pc, #132]	; (8011824 <tcp_timewait_input+0xdc>)
 80117a0:	6819      	ldr	r1, [r3, #0]
 80117a2:	4b21      	ldr	r3, [pc, #132]	; (8011828 <tcp_timewait_input+0xe0>)
 80117a4:	881b      	ldrh	r3, [r3, #0]
 80117a6:	461a      	mov	r2, r3
 80117a8:	4b1d      	ldr	r3, [pc, #116]	; (8011820 <tcp_timewait_input+0xd8>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117ae:	4b1f      	ldr	r3, [pc, #124]	; (801182c <tcp_timewait_input+0xe4>)
 80117b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117b2:	885b      	ldrh	r3, [r3, #2]
 80117b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117b6:	4a1d      	ldr	r2, [pc, #116]	; (801182c <tcp_timewait_input+0xe4>)
 80117b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117ba:	8812      	ldrh	r2, [r2, #0]
 80117bc:	b292      	uxth	r2, r2
 80117be:	9202      	str	r2, [sp, #8]
 80117c0:	9301      	str	r3, [sp, #4]
 80117c2:	4b1b      	ldr	r3, [pc, #108]	; (8011830 <tcp_timewait_input+0xe8>)
 80117c4:	9300      	str	r3, [sp, #0]
 80117c6:	4b1b      	ldr	r3, [pc, #108]	; (8011834 <tcp_timewait_input+0xec>)
 80117c8:	4602      	mov	r2, r0
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f003 fac8 	bl	8014d60 <tcp_rst>
      return;
 80117d0:	e01b      	b.n	801180a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80117d2:	4b0f      	ldr	r3, [pc, #60]	; (8011810 <tcp_timewait_input+0xc8>)
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	f003 0301 	and.w	r3, r3, #1
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d003      	beq.n	80117e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80117de:	4b16      	ldr	r3, [pc, #88]	; (8011838 <tcp_timewait_input+0xf0>)
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80117e6:	4b10      	ldr	r3, [pc, #64]	; (8011828 <tcp_timewait_input+0xe0>)
 80117e8:	881b      	ldrh	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00c      	beq.n	8011808 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	8b5b      	ldrh	r3, [r3, #26]
 80117f2:	f043 0302 	orr.w	r3, r3, #2
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f002 fcfb 	bl	80141f8 <tcp_output>
  }
  return;
 8011802:	e001      	b.n	8011808 <tcp_timewait_input+0xc0>
    return;
 8011804:	bf00      	nop
 8011806:	e000      	b.n	801180a <tcp_timewait_input+0xc2>
  return;
 8011808:	bf00      	nop
}
 801180a:	3708      	adds	r7, #8
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}
 8011810:	20000a60 	.word	0x20000a60
 8011814:	0801ba84 	.word	0x0801ba84
 8011818:	0801bc9c 	.word	0x0801bc9c
 801181c:	0801bad0 	.word	0x0801bad0
 8011820:	20000a54 	.word	0x20000a54
 8011824:	20000a58 	.word	0x20000a58
 8011828:	20000a5e 	.word	0x20000a5e
 801182c:	20000a44 	.word	0x20000a44
 8011830:	2000c5dc 	.word	0x2000c5dc
 8011834:	2000c5e0 	.word	0x2000c5e0
 8011838:	2000fb14 	.word	0x2000fb14

0801183c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801183c:	b590      	push	{r4, r7, lr}
 801183e:	b08d      	sub	sp, #52	; 0x34
 8011840:	af04      	add	r7, sp, #16
 8011842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011844:	2300      	movs	r3, #0
 8011846:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011848:	2300      	movs	r3, #0
 801184a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d106      	bne.n	8011860 <tcp_process+0x24>
 8011852:	4ba5      	ldr	r3, [pc, #660]	; (8011ae8 <tcp_process+0x2ac>)
 8011854:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011858:	49a4      	ldr	r1, [pc, #656]	; (8011aec <tcp_process+0x2b0>)
 801185a:	48a5      	ldr	r0, [pc, #660]	; (8011af0 <tcp_process+0x2b4>)
 801185c:	f006 fb26 	bl	8017eac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011860:	4ba4      	ldr	r3, [pc, #656]	; (8011af4 <tcp_process+0x2b8>)
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	f003 0304 	and.w	r3, r3, #4
 8011868:	2b00      	cmp	r3, #0
 801186a:	d04e      	beq.n	801190a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	7d1b      	ldrb	r3, [r3, #20]
 8011870:	2b02      	cmp	r3, #2
 8011872:	d108      	bne.n	8011886 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011878:	4b9f      	ldr	r3, [pc, #636]	; (8011af8 <tcp_process+0x2bc>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	429a      	cmp	r2, r3
 801187e:	d123      	bne.n	80118c8 <tcp_process+0x8c>
        acceptable = 1;
 8011880:	2301      	movs	r3, #1
 8011882:	76fb      	strb	r3, [r7, #27]
 8011884:	e020      	b.n	80118c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801188a:	4b9c      	ldr	r3, [pc, #624]	; (8011afc <tcp_process+0x2c0>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	429a      	cmp	r2, r3
 8011890:	d102      	bne.n	8011898 <tcp_process+0x5c>
        acceptable = 1;
 8011892:	2301      	movs	r3, #1
 8011894:	76fb      	strb	r3, [r7, #27]
 8011896:	e017      	b.n	80118c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011898:	4b98      	ldr	r3, [pc, #608]	; (8011afc <tcp_process+0x2c0>)
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a0:	1ad3      	subs	r3, r2, r3
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	db10      	blt.n	80118c8 <tcp_process+0x8c>
 80118a6:	4b95      	ldr	r3, [pc, #596]	; (8011afc <tcp_process+0x2c0>)
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ae:	6879      	ldr	r1, [r7, #4]
 80118b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80118b2:	440b      	add	r3, r1
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	dc06      	bgt.n	80118c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	8b5b      	ldrh	r3, [r3, #26]
 80118be:	f043 0302 	orr.w	r3, r3, #2
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80118c8:	7efb      	ldrb	r3, [r7, #27]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d01b      	beq.n	8011906 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	7d1b      	ldrb	r3, [r3, #20]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d106      	bne.n	80118e4 <tcp_process+0xa8>
 80118d6:	4b84      	ldr	r3, [pc, #528]	; (8011ae8 <tcp_process+0x2ac>)
 80118d8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80118dc:	4988      	ldr	r1, [pc, #544]	; (8011b00 <tcp_process+0x2c4>)
 80118de:	4884      	ldr	r0, [pc, #528]	; (8011af0 <tcp_process+0x2b4>)
 80118e0:	f006 fae4 	bl	8017eac <iprintf>
      recv_flags |= TF_RESET;
 80118e4:	4b87      	ldr	r3, [pc, #540]	; (8011b04 <tcp_process+0x2c8>)
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	f043 0308 	orr.w	r3, r3, #8
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	4b85      	ldr	r3, [pc, #532]	; (8011b04 <tcp_process+0x2c8>)
 80118f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	8b5b      	ldrh	r3, [r3, #26]
 80118f6:	f023 0301 	bic.w	r3, r3, #1
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011900:	f06f 030d 	mvn.w	r3, #13
 8011904:	e37a      	b.n	8011ffc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011906:	2300      	movs	r3, #0
 8011908:	e378      	b.n	8011ffc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801190a:	4b7a      	ldr	r3, [pc, #488]	; (8011af4 <tcp_process+0x2b8>)
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	f003 0302 	and.w	r3, r3, #2
 8011912:	2b00      	cmp	r3, #0
 8011914:	d010      	beq.n	8011938 <tcp_process+0xfc>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	7d1b      	ldrb	r3, [r3, #20]
 801191a:	2b02      	cmp	r3, #2
 801191c:	d00c      	beq.n	8011938 <tcp_process+0xfc>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	7d1b      	ldrb	r3, [r3, #20]
 8011922:	2b03      	cmp	r3, #3
 8011924:	d008      	beq.n	8011938 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	8b5b      	ldrh	r3, [r3, #26]
 801192a:	f043 0302 	orr.w	r3, r3, #2
 801192e:	b29a      	uxth	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011934:	2300      	movs	r3, #0
 8011936:	e361      	b.n	8011ffc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	8b5b      	ldrh	r3, [r3, #26]
 801193c:	f003 0310 	and.w	r3, r3, #16
 8011940:	2b00      	cmp	r3, #0
 8011942:	d103      	bne.n	801194c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011944:	4b70      	ldr	r3, [pc, #448]	; (8011b08 <tcp_process+0x2cc>)
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2200      	movs	r2, #0
 8011950:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f001 fc2d 	bl	80131bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	7d1b      	ldrb	r3, [r3, #20]
 8011966:	3b02      	subs	r3, #2
 8011968:	2b07      	cmp	r3, #7
 801196a:	f200 8337 	bhi.w	8011fdc <tcp_process+0x7a0>
 801196e:	a201      	add	r2, pc, #4	; (adr r2, 8011974 <tcp_process+0x138>)
 8011970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011974:	08011995 	.word	0x08011995
 8011978:	08011bc5 	.word	0x08011bc5
 801197c:	08011d3d 	.word	0x08011d3d
 8011980:	08011d67 	.word	0x08011d67
 8011984:	08011e8b 	.word	0x08011e8b
 8011988:	08011d3d 	.word	0x08011d3d
 801198c:	08011f17 	.word	0x08011f17
 8011990:	08011fa7 	.word	0x08011fa7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011994:	4b57      	ldr	r3, [pc, #348]	; (8011af4 <tcp_process+0x2b8>)
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	f003 0310 	and.w	r3, r3, #16
 801199c:	2b00      	cmp	r3, #0
 801199e:	f000 80e4 	beq.w	8011b6a <tcp_process+0x32e>
 80119a2:	4b54      	ldr	r3, [pc, #336]	; (8011af4 <tcp_process+0x2b8>)
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	f003 0302 	and.w	r3, r3, #2
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	f000 80dd 	beq.w	8011b6a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119b4:	1c5a      	adds	r2, r3, #1
 80119b6:	4b50      	ldr	r3, [pc, #320]	; (8011af8 <tcp_process+0x2bc>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	f040 80d5 	bne.w	8011b6a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80119c0:	4b4e      	ldr	r3, [pc, #312]	; (8011afc <tcp_process+0x2c0>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	1c5a      	adds	r2, r3, #1
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80119d2:	4b49      	ldr	r3, [pc, #292]	; (8011af8 <tcp_process+0x2bc>)
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80119da:	4b4c      	ldr	r3, [pc, #304]	; (8011b0c <tcp_process+0x2d0>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	89db      	ldrh	r3, [r3, #14]
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80119f4:	4b41      	ldr	r3, [pc, #260]	; (8011afc <tcp_process+0x2c0>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	1e5a      	subs	r2, r3, #1
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2204      	movs	r2, #4
 8011a02:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	3304      	adds	r3, #4
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f004 ff47 	bl	80168a0 <ip4_route>
 8011a12:	4601      	mov	r1, r0
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	3304      	adds	r3, #4
 8011a18:	461a      	mov	r2, r3
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	f7ff f88e 	bl	8010b3c <tcp_eff_send_mss_netif>
 8011a20:	4603      	mov	r3, r0
 8011a22:	461a      	mov	r2, r3
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a2c:	009a      	lsls	r2, r3, #2
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a38:	428b      	cmp	r3, r1
 8011a3a:	bf38      	it	cc
 8011a3c:	460b      	movcc	r3, r1
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d204      	bcs.n	8011a4c <tcp_process+0x210>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	e00d      	b.n	8011a68 <tcp_process+0x22c>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a50:	005b      	lsls	r3, r3, #1
 8011a52:	f241 121c 	movw	r2, #4380	; 0x111c
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d904      	bls.n	8011a64 <tcp_process+0x228>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a5e:	005b      	lsls	r3, r3, #1
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	e001      	b.n	8011a68 <tcp_process+0x22c>
 8011a64:	f241 131c 	movw	r3, #4380	; 0x111c
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d106      	bne.n	8011a86 <tcp_process+0x24a>
 8011a78:	4b1b      	ldr	r3, [pc, #108]	; (8011ae8 <tcp_process+0x2ac>)
 8011a7a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011a7e:	4924      	ldr	r1, [pc, #144]	; (8011b10 <tcp_process+0x2d4>)
 8011a80:	481b      	ldr	r0, [pc, #108]	; (8011af0 <tcp_process+0x2b4>)
 8011a82:	f006 fa13 	bl	8017eac <iprintf>
        --pcb->snd_queuelen;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	b29a      	uxth	r2, r3
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a9a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d111      	bne.n	8011ac6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aa6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d106      	bne.n	8011abc <tcp_process+0x280>
 8011aae:	4b0e      	ldr	r3, [pc, #56]	; (8011ae8 <tcp_process+0x2ac>)
 8011ab0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011ab4:	4917      	ldr	r1, [pc, #92]	; (8011b14 <tcp_process+0x2d8>)
 8011ab6:	480e      	ldr	r0, [pc, #56]	; (8011af0 <tcp_process+0x2b4>)
 8011ab8:	f006 f9f8 	bl	8017eac <iprintf>
          pcb->unsent = rseg->next;
 8011abc:	69fb      	ldr	r3, [r7, #28]
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	66da      	str	r2, [r3, #108]	; 0x6c
 8011ac4:	e003      	b.n	8011ace <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	681a      	ldr	r2, [r3, #0]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011ace:	69f8      	ldr	r0, [r7, #28]
 8011ad0:	f7fe fc51 	bl	8010376 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d11d      	bne.n	8011b18 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ae2:	861a      	strh	r2, [r3, #48]	; 0x30
 8011ae4:	e01f      	b.n	8011b26 <tcp_process+0x2ea>
 8011ae6:	bf00      	nop
 8011ae8:	0801ba84 	.word	0x0801ba84
 8011aec:	0801bcbc 	.word	0x0801bcbc
 8011af0:	0801bad0 	.word	0x0801bad0
 8011af4:	20000a60 	.word	0x20000a60
 8011af8:	20000a58 	.word	0x20000a58
 8011afc:	20000a54 	.word	0x20000a54
 8011b00:	0801bcd8 	.word	0x0801bcd8
 8011b04:	20000a61 	.word	0x20000a61
 8011b08:	2000fb14 	.word	0x2000fb14
 8011b0c:	20000a44 	.word	0x20000a44
 8011b10:	0801bcf8 	.word	0x0801bcf8
 8011b14:	0801bd10 	.word	0x0801bd10
        } else {
          pcb->rtime = 0;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d00a      	beq.n	8011b46 <tcp_process+0x30a>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	6910      	ldr	r0, [r2, #16]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	6879      	ldr	r1, [r7, #4]
 8011b3e:	4798      	blx	r3
 8011b40:	4603      	mov	r3, r0
 8011b42:	76bb      	strb	r3, [r7, #26]
 8011b44:	e001      	b.n	8011b4a <tcp_process+0x30e>
 8011b46:	2300      	movs	r3, #0
 8011b48:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011b4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011b4e:	f113 0f0d 	cmn.w	r3, #13
 8011b52:	d102      	bne.n	8011b5a <tcp_process+0x31e>
          return ERR_ABRT;
 8011b54:	f06f 030c 	mvn.w	r3, #12
 8011b58:	e250      	b.n	8011ffc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	8b5b      	ldrh	r3, [r3, #26]
 8011b5e:	f043 0302 	orr.w	r3, r3, #2
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011b68:	e23a      	b.n	8011fe0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011b6a:	4b9d      	ldr	r3, [pc, #628]	; (8011de0 <tcp_process+0x5a4>)
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	f003 0310 	and.w	r3, r3, #16
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	f000 8234 	beq.w	8011fe0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b78:	4b9a      	ldr	r3, [pc, #616]	; (8011de4 <tcp_process+0x5a8>)
 8011b7a:	6819      	ldr	r1, [r3, #0]
 8011b7c:	4b9a      	ldr	r3, [pc, #616]	; (8011de8 <tcp_process+0x5ac>)
 8011b7e:	881b      	ldrh	r3, [r3, #0]
 8011b80:	461a      	mov	r2, r3
 8011b82:	4b9a      	ldr	r3, [pc, #616]	; (8011dec <tcp_process+0x5b0>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b88:	4b99      	ldr	r3, [pc, #612]	; (8011df0 <tcp_process+0x5b4>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b8c:	885b      	ldrh	r3, [r3, #2]
 8011b8e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b90:	4a97      	ldr	r2, [pc, #604]	; (8011df0 <tcp_process+0x5b4>)
 8011b92:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b94:	8812      	ldrh	r2, [r2, #0]
 8011b96:	b292      	uxth	r2, r2
 8011b98:	9202      	str	r2, [sp, #8]
 8011b9a:	9301      	str	r3, [sp, #4]
 8011b9c:	4b95      	ldr	r3, [pc, #596]	; (8011df4 <tcp_process+0x5b8>)
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	4b95      	ldr	r3, [pc, #596]	; (8011df8 <tcp_process+0x5bc>)
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f003 f8db 	bl	8014d60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011bb0:	2b05      	cmp	r3, #5
 8011bb2:	f200 8215 	bhi.w	8011fe0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f002 fea5 	bl	801490c <tcp_rexmit_rto>
      break;
 8011bc2:	e20d      	b.n	8011fe0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011bc4:	4b86      	ldr	r3, [pc, #536]	; (8011de0 <tcp_process+0x5a4>)
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	f003 0310 	and.w	r3, r3, #16
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f000 80a1 	beq.w	8011d14 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011bd2:	4b84      	ldr	r3, [pc, #528]	; (8011de4 <tcp_process+0x5a8>)
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	db7e      	blt.n	8011ce0 <tcp_process+0x4a4>
 8011be2:	4b80      	ldr	r3, [pc, #512]	; (8011de4 <tcp_process+0x5a8>)
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bea:	1ad3      	subs	r3, r2, r3
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	dc77      	bgt.n	8011ce0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2204      	movs	r2, #4
 8011bf4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d102      	bne.n	8011c04 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011bfe:	23fa      	movs	r3, #250	; 0xfa
 8011c00:	76bb      	strb	r3, [r7, #26]
 8011c02:	e01d      	b.n	8011c40 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c08:	699b      	ldr	r3, [r3, #24]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d106      	bne.n	8011c1c <tcp_process+0x3e0>
 8011c0e:	4b7b      	ldr	r3, [pc, #492]	; (8011dfc <tcp_process+0x5c0>)
 8011c10:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011c14:	497a      	ldr	r1, [pc, #488]	; (8011e00 <tcp_process+0x5c4>)
 8011c16:	487b      	ldr	r0, [pc, #492]	; (8011e04 <tcp_process+0x5c8>)
 8011c18:	f006 f948 	bl	8017eac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c20:	699b      	ldr	r3, [r3, #24]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00a      	beq.n	8011c3c <tcp_process+0x400>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c2a:	699b      	ldr	r3, [r3, #24]
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	6910      	ldr	r0, [r2, #16]
 8011c30:	2200      	movs	r2, #0
 8011c32:	6879      	ldr	r1, [r7, #4]
 8011c34:	4798      	blx	r3
 8011c36:	4603      	mov	r3, r0
 8011c38:	76bb      	strb	r3, [r7, #26]
 8011c3a:	e001      	b.n	8011c40 <tcp_process+0x404>
 8011c3c:	23f0      	movs	r3, #240	; 0xf0
 8011c3e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011c40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00a      	beq.n	8011c5e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011c48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011c4c:	f113 0f0d 	cmn.w	r3, #13
 8011c50:	d002      	beq.n	8011c58 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7fd fcea 	bl	800f62c <tcp_abort>
            }
            return ERR_ABRT;
 8011c58:	f06f 030c 	mvn.w	r3, #12
 8011c5c:	e1ce      	b.n	8011ffc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 fae0 	bl	8012224 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011c64:	4b68      	ldr	r3, [pc, #416]	; (8011e08 <tcp_process+0x5cc>)
 8011c66:	881b      	ldrh	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d005      	beq.n	8011c78 <tcp_process+0x43c>
            recv_acked--;
 8011c6c:	4b66      	ldr	r3, [pc, #408]	; (8011e08 <tcp_process+0x5cc>)
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	3b01      	subs	r3, #1
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	4b64      	ldr	r3, [pc, #400]	; (8011e08 <tcp_process+0x5cc>)
 8011c76:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c7c:	009a      	lsls	r2, r3, #2
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c82:	005b      	lsls	r3, r3, #1
 8011c84:	f241 111c 	movw	r1, #4380	; 0x111c
 8011c88:	428b      	cmp	r3, r1
 8011c8a:	bf38      	it	cc
 8011c8c:	460b      	movcc	r3, r1
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d204      	bcs.n	8011c9c <tcp_process+0x460>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	e00d      	b.n	8011cb8 <tcp_process+0x47c>
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ca0:	005b      	lsls	r3, r3, #1
 8011ca2:	f241 121c 	movw	r2, #4380	; 0x111c
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	d904      	bls.n	8011cb4 <tcp_process+0x478>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cae:	005b      	lsls	r3, r3, #1
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	e001      	b.n	8011cb8 <tcp_process+0x47c>
 8011cb4:	f241 131c 	movw	r3, #4380	; 0x111c
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011cbe:	4b53      	ldr	r3, [pc, #332]	; (8011e0c <tcp_process+0x5d0>)
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	f003 0320 	and.w	r3, r3, #32
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d037      	beq.n	8011d3a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	8b5b      	ldrh	r3, [r3, #26]
 8011cce:	f043 0302 	orr.w	r3, r3, #2
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2207      	movs	r2, #7
 8011cdc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011cde:	e02c      	b.n	8011d3a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ce0:	4b40      	ldr	r3, [pc, #256]	; (8011de4 <tcp_process+0x5a8>)
 8011ce2:	6819      	ldr	r1, [r3, #0]
 8011ce4:	4b40      	ldr	r3, [pc, #256]	; (8011de8 <tcp_process+0x5ac>)
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	461a      	mov	r2, r3
 8011cea:	4b40      	ldr	r3, [pc, #256]	; (8011dec <tcp_process+0x5b0>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011cf0:	4b3f      	ldr	r3, [pc, #252]	; (8011df0 <tcp_process+0x5b4>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cf4:	885b      	ldrh	r3, [r3, #2]
 8011cf6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011cf8:	4a3d      	ldr	r2, [pc, #244]	; (8011df0 <tcp_process+0x5b4>)
 8011cfa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cfc:	8812      	ldrh	r2, [r2, #0]
 8011cfe:	b292      	uxth	r2, r2
 8011d00:	9202      	str	r2, [sp, #8]
 8011d02:	9301      	str	r3, [sp, #4]
 8011d04:	4b3b      	ldr	r3, [pc, #236]	; (8011df4 <tcp_process+0x5b8>)
 8011d06:	9300      	str	r3, [sp, #0]
 8011d08:	4b3b      	ldr	r3, [pc, #236]	; (8011df8 <tcp_process+0x5bc>)
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f003 f827 	bl	8014d60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011d12:	e167      	b.n	8011fe4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011d14:	4b32      	ldr	r3, [pc, #200]	; (8011de0 <tcp_process+0x5a4>)
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	f003 0302 	and.w	r3, r3, #2
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 8161 	beq.w	8011fe4 <tcp_process+0x7a8>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d26:	1e5a      	subs	r2, r3, #1
 8011d28:	4b30      	ldr	r3, [pc, #192]	; (8011dec <tcp_process+0x5b0>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	f040 8159 	bne.w	8011fe4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f002 fe0c 	bl	8014950 <tcp_rexmit>
      break;
 8011d38:	e154      	b.n	8011fe4 <tcp_process+0x7a8>
 8011d3a:	e153      	b.n	8011fe4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f000 fa71 	bl	8012224 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011d42:	4b32      	ldr	r3, [pc, #200]	; (8011e0c <tcp_process+0x5d0>)
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	f003 0320 	and.w	r3, r3, #32
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	f000 814c 	beq.w	8011fe8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	8b5b      	ldrh	r3, [r3, #26]
 8011d54:	f043 0302 	orr.w	r3, r3, #2
 8011d58:	b29a      	uxth	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2207      	movs	r2, #7
 8011d62:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011d64:	e140      	b.n	8011fe8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 fa5c 	bl	8012224 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011d6c:	4b27      	ldr	r3, [pc, #156]	; (8011e0c <tcp_process+0x5d0>)
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	f003 0320 	and.w	r3, r3, #32
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d071      	beq.n	8011e5c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d78:	4b19      	ldr	r3, [pc, #100]	; (8011de0 <tcp_process+0x5a4>)
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	f003 0310 	and.w	r3, r3, #16
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d060      	beq.n	8011e46 <tcp_process+0x60a>
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d88:	4b16      	ldr	r3, [pc, #88]	; (8011de4 <tcp_process+0x5a8>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d15a      	bne.n	8011e46 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d156      	bne.n	8011e46 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	8b5b      	ldrh	r3, [r3, #26]
 8011d9c:	f043 0302 	orr.w	r3, r3, #2
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7fe fdbe 	bl	8010928 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011dac:	4b18      	ldr	r3, [pc, #96]	; (8011e10 <tcp_process+0x5d4>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d105      	bne.n	8011dc2 <tcp_process+0x586>
 8011db6:	4b16      	ldr	r3, [pc, #88]	; (8011e10 <tcp_process+0x5d4>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	4a14      	ldr	r2, [pc, #80]	; (8011e10 <tcp_process+0x5d4>)
 8011dbe:	6013      	str	r3, [r2, #0]
 8011dc0:	e02e      	b.n	8011e20 <tcp_process+0x5e4>
 8011dc2:	4b13      	ldr	r3, [pc, #76]	; (8011e10 <tcp_process+0x5d4>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	617b      	str	r3, [r7, #20]
 8011dc8:	e027      	b.n	8011e1a <tcp_process+0x5de>
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d11f      	bne.n	8011e14 <tcp_process+0x5d8>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	68da      	ldr	r2, [r3, #12]
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	60da      	str	r2, [r3, #12]
 8011ddc:	e020      	b.n	8011e20 <tcp_process+0x5e4>
 8011dde:	bf00      	nop
 8011de0:	20000a60 	.word	0x20000a60
 8011de4:	20000a58 	.word	0x20000a58
 8011de8:	20000a5e 	.word	0x20000a5e
 8011dec:	20000a54 	.word	0x20000a54
 8011df0:	20000a44 	.word	0x20000a44
 8011df4:	2000c5dc 	.word	0x2000c5dc
 8011df8:	2000c5e0 	.word	0x2000c5e0
 8011dfc:	0801ba84 	.word	0x0801ba84
 8011e00:	0801bd24 	.word	0x0801bd24
 8011e04:	0801bad0 	.word	0x0801bad0
 8011e08:	20000a5c 	.word	0x20000a5c
 8011e0c:	20000a61 	.word	0x20000a61
 8011e10:	2000fb10 	.word	0x2000fb10
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	617b      	str	r3, [r7, #20]
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d1d4      	bne.n	8011dca <tcp_process+0x58e>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	60da      	str	r2, [r3, #12]
 8011e26:	4b77      	ldr	r3, [pc, #476]	; (8012004 <tcp_process+0x7c8>)
 8011e28:	2201      	movs	r2, #1
 8011e2a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	220a      	movs	r2, #10
 8011e30:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011e32:	4b75      	ldr	r3, [pc, #468]	; (8012008 <tcp_process+0x7cc>)
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	60da      	str	r2, [r3, #12]
 8011e3a:	4a73      	ldr	r2, [pc, #460]	; (8012008 <tcp_process+0x7cc>)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6013      	str	r3, [r2, #0]
 8011e40:	f003 f950 	bl	80150e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011e44:	e0d2      	b.n	8011fec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	8b5b      	ldrh	r3, [r3, #26]
 8011e4a:	f043 0302 	orr.w	r3, r3, #2
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2208      	movs	r2, #8
 8011e58:	751a      	strb	r2, [r3, #20]
      break;
 8011e5a:	e0c7      	b.n	8011fec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e5c:	4b6b      	ldr	r3, [pc, #428]	; (801200c <tcp_process+0x7d0>)
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	f003 0310 	and.w	r3, r3, #16
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f000 80c1 	beq.w	8011fec <tcp_process+0x7b0>
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e6e:	4b68      	ldr	r3, [pc, #416]	; (8012010 <tcp_process+0x7d4>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	f040 80ba 	bne.w	8011fec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	f040 80b5 	bne.w	8011fec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2206      	movs	r2, #6
 8011e86:	751a      	strb	r2, [r3, #20]
      break;
 8011e88:	e0b0      	b.n	8011fec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 f9ca 	bl	8012224 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011e90:	4b60      	ldr	r3, [pc, #384]	; (8012014 <tcp_process+0x7d8>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f003 0320 	and.w	r3, r3, #32
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 80a9 	beq.w	8011ff0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	8b5b      	ldrh	r3, [r3, #26]
 8011ea2:	f043 0302 	orr.w	r3, r3, #2
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f7fe fd3b 	bl	8010928 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011eb2:	4b59      	ldr	r3, [pc, #356]	; (8012018 <tcp_process+0x7dc>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d105      	bne.n	8011ec8 <tcp_process+0x68c>
 8011ebc:	4b56      	ldr	r3, [pc, #344]	; (8012018 <tcp_process+0x7dc>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	4a55      	ldr	r2, [pc, #340]	; (8012018 <tcp_process+0x7dc>)
 8011ec4:	6013      	str	r3, [r2, #0]
 8011ec6:	e013      	b.n	8011ef0 <tcp_process+0x6b4>
 8011ec8:	4b53      	ldr	r3, [pc, #332]	; (8012018 <tcp_process+0x7dc>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	613b      	str	r3, [r7, #16]
 8011ece:	e00c      	b.n	8011eea <tcp_process+0x6ae>
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	68db      	ldr	r3, [r3, #12]
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d104      	bne.n	8011ee4 <tcp_process+0x6a8>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	68da      	ldr	r2, [r3, #12]
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	60da      	str	r2, [r3, #12]
 8011ee2:	e005      	b.n	8011ef0 <tcp_process+0x6b4>
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	613b      	str	r3, [r7, #16]
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d1ef      	bne.n	8011ed0 <tcp_process+0x694>
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	60da      	str	r2, [r3, #12]
 8011ef6:	4b43      	ldr	r3, [pc, #268]	; (8012004 <tcp_process+0x7c8>)
 8011ef8:	2201      	movs	r2, #1
 8011efa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	220a      	movs	r2, #10
 8011f00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011f02:	4b41      	ldr	r3, [pc, #260]	; (8012008 <tcp_process+0x7cc>)
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	60da      	str	r2, [r3, #12]
 8011f0a:	4a3f      	ldr	r2, [pc, #252]	; (8012008 <tcp_process+0x7cc>)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6013      	str	r3, [r2, #0]
 8011f10:	f003 f8e8 	bl	80150e4 <tcp_timer_needed>
      }
      break;
 8011f14:	e06c      	b.n	8011ff0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f000 f984 	bl	8012224 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011f1c:	4b3b      	ldr	r3, [pc, #236]	; (801200c <tcp_process+0x7d0>)
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	f003 0310 	and.w	r3, r3, #16
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d065      	beq.n	8011ff4 <tcp_process+0x7b8>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f2c:	4b38      	ldr	r3, [pc, #224]	; (8012010 <tcp_process+0x7d4>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d15f      	bne.n	8011ff4 <tcp_process+0x7b8>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d15b      	bne.n	8011ff4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f7fe fcf3 	bl	8010928 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011f42:	4b35      	ldr	r3, [pc, #212]	; (8012018 <tcp_process+0x7dc>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d105      	bne.n	8011f58 <tcp_process+0x71c>
 8011f4c:	4b32      	ldr	r3, [pc, #200]	; (8012018 <tcp_process+0x7dc>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	4a31      	ldr	r2, [pc, #196]	; (8012018 <tcp_process+0x7dc>)
 8011f54:	6013      	str	r3, [r2, #0]
 8011f56:	e013      	b.n	8011f80 <tcp_process+0x744>
 8011f58:	4b2f      	ldr	r3, [pc, #188]	; (8012018 <tcp_process+0x7dc>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	60fb      	str	r3, [r7, #12]
 8011f5e:	e00c      	b.n	8011f7a <tcp_process+0x73e>
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	687a      	ldr	r2, [r7, #4]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d104      	bne.n	8011f74 <tcp_process+0x738>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	68da      	ldr	r2, [r3, #12]
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	60da      	str	r2, [r3, #12]
 8011f72:	e005      	b.n	8011f80 <tcp_process+0x744>
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1ef      	bne.n	8011f60 <tcp_process+0x724>
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	60da      	str	r2, [r3, #12]
 8011f86:	4b1f      	ldr	r3, [pc, #124]	; (8012004 <tcp_process+0x7c8>)
 8011f88:	2201      	movs	r2, #1
 8011f8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	220a      	movs	r2, #10
 8011f90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011f92:	4b1d      	ldr	r3, [pc, #116]	; (8012008 <tcp_process+0x7cc>)
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	60da      	str	r2, [r3, #12]
 8011f9a:	4a1b      	ldr	r2, [pc, #108]	; (8012008 <tcp_process+0x7cc>)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6013      	str	r3, [r2, #0]
 8011fa0:	f003 f8a0 	bl	80150e4 <tcp_timer_needed>
      }
      break;
 8011fa4:	e026      	b.n	8011ff4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 f93c 	bl	8012224 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011fac:	4b17      	ldr	r3, [pc, #92]	; (801200c <tcp_process+0x7d0>)
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	f003 0310 	and.w	r3, r3, #16
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d01f      	beq.n	8011ff8 <tcp_process+0x7bc>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011fbc:	4b14      	ldr	r3, [pc, #80]	; (8012010 <tcp_process+0x7d4>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d119      	bne.n	8011ff8 <tcp_process+0x7bc>
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d115      	bne.n	8011ff8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011fcc:	4b11      	ldr	r3, [pc, #68]	; (8012014 <tcp_process+0x7d8>)
 8011fce:	781b      	ldrb	r3, [r3, #0]
 8011fd0:	f043 0310 	orr.w	r3, r3, #16
 8011fd4:	b2da      	uxtb	r2, r3
 8011fd6:	4b0f      	ldr	r3, [pc, #60]	; (8012014 <tcp_process+0x7d8>)
 8011fd8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011fda:	e00d      	b.n	8011ff8 <tcp_process+0x7bc>
    default:
      break;
 8011fdc:	bf00      	nop
 8011fde:	e00c      	b.n	8011ffa <tcp_process+0x7be>
      break;
 8011fe0:	bf00      	nop
 8011fe2:	e00a      	b.n	8011ffa <tcp_process+0x7be>
      break;
 8011fe4:	bf00      	nop
 8011fe6:	e008      	b.n	8011ffa <tcp_process+0x7be>
      break;
 8011fe8:	bf00      	nop
 8011fea:	e006      	b.n	8011ffa <tcp_process+0x7be>
      break;
 8011fec:	bf00      	nop
 8011fee:	e004      	b.n	8011ffa <tcp_process+0x7be>
      break;
 8011ff0:	bf00      	nop
 8011ff2:	e002      	b.n	8011ffa <tcp_process+0x7be>
      break;
 8011ff4:	bf00      	nop
 8011ff6:	e000      	b.n	8011ffa <tcp_process+0x7be>
      break;
 8011ff8:	bf00      	nop
  }
  return ERR_OK;
 8011ffa:	2300      	movs	r3, #0
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3724      	adds	r7, #36	; 0x24
 8012000:	46bd      	mov	sp, r7
 8012002:	bd90      	pop	{r4, r7, pc}
 8012004:	2000fb0c 	.word	0x2000fb0c
 8012008:	2000fb20 	.word	0x2000fb20
 801200c:	20000a60 	.word	0x20000a60
 8012010:	20000a58 	.word	0x20000a58
 8012014:	20000a61 	.word	0x20000a61
 8012018:	2000fb10 	.word	0x2000fb10

0801201c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801201c:	b590      	push	{r4, r7, lr}
 801201e:	b085      	sub	sp, #20
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d106      	bne.n	801203a <tcp_oos_insert_segment+0x1e>
 801202c:	4b3b      	ldr	r3, [pc, #236]	; (801211c <tcp_oos_insert_segment+0x100>)
 801202e:	f240 421f 	movw	r2, #1055	; 0x41f
 8012032:	493b      	ldr	r1, [pc, #236]	; (8012120 <tcp_oos_insert_segment+0x104>)
 8012034:	483b      	ldr	r0, [pc, #236]	; (8012124 <tcp_oos_insert_segment+0x108>)
 8012036:	f005 ff39 	bl	8017eac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	899b      	ldrh	r3, [r3, #12]
 8012040:	b29b      	uxth	r3, r3
 8012042:	4618      	mov	r0, r3
 8012044:	f7fb f9d8 	bl	800d3f8 <lwip_htons>
 8012048:	4603      	mov	r3, r0
 801204a:	b2db      	uxtb	r3, r3
 801204c:	f003 0301 	and.w	r3, r3, #1
 8012050:	2b00      	cmp	r3, #0
 8012052:	d028      	beq.n	80120a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012054:	6838      	ldr	r0, [r7, #0]
 8012056:	f7fe f979 	bl	801034c <tcp_segs_free>
    next = NULL;
 801205a:	2300      	movs	r3, #0
 801205c:	603b      	str	r3, [r7, #0]
 801205e:	e056      	b.n	801210e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	899b      	ldrh	r3, [r3, #12]
 8012066:	b29b      	uxth	r3, r3
 8012068:	4618      	mov	r0, r3
 801206a:	f7fb f9c5 	bl	800d3f8 <lwip_htons>
 801206e:	4603      	mov	r3, r0
 8012070:	b2db      	uxtb	r3, r3
 8012072:	f003 0301 	and.w	r3, r3, #1
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00d      	beq.n	8012096 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	899b      	ldrh	r3, [r3, #12]
 8012080:	b29c      	uxth	r4, r3
 8012082:	2001      	movs	r0, #1
 8012084:	f7fb f9b8 	bl	800d3f8 <lwip_htons>
 8012088:	4603      	mov	r3, r0
 801208a:	461a      	mov	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	4322      	orrs	r2, r4
 8012092:	b292      	uxth	r2, r2
 8012094:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80120a0:	68f8      	ldr	r0, [r7, #12]
 80120a2:	f7fe f968 	bl	8010376 <tcp_seg_free>
    while (next &&
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d00e      	beq.n	80120ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	891b      	ldrh	r3, [r3, #8]
 80120b0:	461a      	mov	r2, r3
 80120b2:	4b1d      	ldr	r3, [pc, #116]	; (8012128 <tcp_oos_insert_segment+0x10c>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	441a      	add	r2, r3
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	6839      	ldr	r1, [r7, #0]
 80120c0:	8909      	ldrh	r1, [r1, #8]
 80120c2:	440b      	add	r3, r1
 80120c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	daca      	bge.n	8012060 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d01e      	beq.n	801210e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	891b      	ldrh	r3, [r3, #8]
 80120d4:	461a      	mov	r2, r3
 80120d6:	4b14      	ldr	r3, [pc, #80]	; (8012128 <tcp_oos_insert_segment+0x10c>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	441a      	add	r2, r3
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	dd12      	ble.n	801210e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	4b0d      	ldr	r3, [pc, #52]	; (8012128 <tcp_oos_insert_segment+0x10c>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	1ad3      	subs	r3, r2, r3
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	685a      	ldr	r2, [r3, #4]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	891b      	ldrh	r3, [r3, #8]
 8012106:	4619      	mov	r1, r3
 8012108:	4610      	mov	r0, r2
 801210a:	f7fc fb81 	bl	800e810 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	683a      	ldr	r2, [r7, #0]
 8012112:	601a      	str	r2, [r3, #0]
}
 8012114:	bf00      	nop
 8012116:	3714      	adds	r7, #20
 8012118:	46bd      	mov	sp, r7
 801211a:	bd90      	pop	{r4, r7, pc}
 801211c:	0801ba84 	.word	0x0801ba84
 8012120:	0801bd44 	.word	0x0801bd44
 8012124:	0801bad0 	.word	0x0801bad0
 8012128:	20000a54 	.word	0x20000a54

0801212c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801212c:	b5b0      	push	{r4, r5, r7, lr}
 801212e:	b086      	sub	sp, #24
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
 8012138:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801213a:	e03e      	b.n	80121ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	4618      	mov	r0, r3
 801214c:	f7fc fd6e 	bl	800ec2c <pbuf_clen>
 8012150:	4603      	mov	r3, r0
 8012152:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801215a:	8a7a      	ldrh	r2, [r7, #18]
 801215c:	429a      	cmp	r2, r3
 801215e:	d906      	bls.n	801216e <tcp_free_acked_segments+0x42>
 8012160:	4b2a      	ldr	r3, [pc, #168]	; (801220c <tcp_free_acked_segments+0xe0>)
 8012162:	f240 4257 	movw	r2, #1111	; 0x457
 8012166:	492a      	ldr	r1, [pc, #168]	; (8012210 <tcp_free_acked_segments+0xe4>)
 8012168:	482a      	ldr	r0, [pc, #168]	; (8012214 <tcp_free_acked_segments+0xe8>)
 801216a:	f005 fe9f 	bl	8017eac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012174:	8a7b      	ldrh	r3, [r7, #18]
 8012176:	1ad3      	subs	r3, r2, r3
 8012178:	b29a      	uxth	r2, r3
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	891a      	ldrh	r2, [r3, #8]
 8012184:	4b24      	ldr	r3, [pc, #144]	; (8012218 <tcp_free_acked_segments+0xec>)
 8012186:	881b      	ldrh	r3, [r3, #0]
 8012188:	4413      	add	r3, r2
 801218a:	b29a      	uxth	r2, r3
 801218c:	4b22      	ldr	r3, [pc, #136]	; (8012218 <tcp_free_acked_segments+0xec>)
 801218e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012190:	6978      	ldr	r0, [r7, #20]
 8012192:	f7fe f8f0 	bl	8010376 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00c      	beq.n	80121ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d109      	bne.n	80121ba <tcp_free_acked_segments+0x8e>
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d106      	bne.n	80121ba <tcp_free_acked_segments+0x8e>
 80121ac:	4b17      	ldr	r3, [pc, #92]	; (801220c <tcp_free_acked_segments+0xe0>)
 80121ae:	f240 4261 	movw	r2, #1121	; 0x461
 80121b2:	491a      	ldr	r1, [pc, #104]	; (801221c <tcp_free_acked_segments+0xf0>)
 80121b4:	4817      	ldr	r0, [pc, #92]	; (8012214 <tcp_free_acked_segments+0xe8>)
 80121b6:	f005 fe79 	bl	8017eac <iprintf>
  while (seg_list != NULL &&
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d020      	beq.n	8012202 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fb f92b 	bl	800d422 <lwip_htonl>
 80121cc:	4604      	mov	r4, r0
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	891b      	ldrh	r3, [r3, #8]
 80121d2:	461d      	mov	r5, r3
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	899b      	ldrh	r3, [r3, #12]
 80121da:	b29b      	uxth	r3, r3
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fb f90b 	bl	800d3f8 <lwip_htons>
 80121e2:	4603      	mov	r3, r0
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	f003 0303 	and.w	r3, r3, #3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d001      	beq.n	80121f2 <tcp_free_acked_segments+0xc6>
 80121ee:	2301      	movs	r3, #1
 80121f0:	e000      	b.n	80121f4 <tcp_free_acked_segments+0xc8>
 80121f2:	2300      	movs	r3, #0
 80121f4:	442b      	add	r3, r5
 80121f6:	18e2      	adds	r2, r4, r3
 80121f8:	4b09      	ldr	r3, [pc, #36]	; (8012220 <tcp_free_acked_segments+0xf4>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80121fe:	2b00      	cmp	r3, #0
 8012200:	dd9c      	ble.n	801213c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012202:	68bb      	ldr	r3, [r7, #8]
}
 8012204:	4618      	mov	r0, r3
 8012206:	3718      	adds	r7, #24
 8012208:	46bd      	mov	sp, r7
 801220a:	bdb0      	pop	{r4, r5, r7, pc}
 801220c:	0801ba84 	.word	0x0801ba84
 8012210:	0801bd6c 	.word	0x0801bd6c
 8012214:	0801bad0 	.word	0x0801bad0
 8012218:	20000a5c 	.word	0x20000a5c
 801221c:	0801bd94 	.word	0x0801bd94
 8012220:	20000a58 	.word	0x20000a58

08012224 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012224:	b5b0      	push	{r4, r5, r7, lr}
 8012226:	b094      	sub	sp, #80	; 0x50
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801222c:	2300      	movs	r3, #0
 801222e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d106      	bne.n	8012244 <tcp_receive+0x20>
 8012236:	4ba6      	ldr	r3, [pc, #664]	; (80124d0 <tcp_receive+0x2ac>)
 8012238:	f240 427b 	movw	r2, #1147	; 0x47b
 801223c:	49a5      	ldr	r1, [pc, #660]	; (80124d4 <tcp_receive+0x2b0>)
 801223e:	48a6      	ldr	r0, [pc, #664]	; (80124d8 <tcp_receive+0x2b4>)
 8012240:	f005 fe34 	bl	8017eac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	7d1b      	ldrb	r3, [r3, #20]
 8012248:	2b03      	cmp	r3, #3
 801224a:	d806      	bhi.n	801225a <tcp_receive+0x36>
 801224c:	4ba0      	ldr	r3, [pc, #640]	; (80124d0 <tcp_receive+0x2ac>)
 801224e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012252:	49a2      	ldr	r1, [pc, #648]	; (80124dc <tcp_receive+0x2b8>)
 8012254:	48a0      	ldr	r0, [pc, #640]	; (80124d8 <tcp_receive+0x2b4>)
 8012256:	f005 fe29 	bl	8017eac <iprintf>

  if (flags & TCP_ACK) {
 801225a:	4ba1      	ldr	r3, [pc, #644]	; (80124e0 <tcp_receive+0x2bc>)
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	f003 0310 	and.w	r3, r3, #16
 8012262:	2b00      	cmp	r3, #0
 8012264:	f000 8263 	beq.w	801272e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801226e:	461a      	mov	r2, r3
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012274:	4413      	add	r3, r2
 8012276:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801227c:	4b99      	ldr	r3, [pc, #612]	; (80124e4 <tcp_receive+0x2c0>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	1ad3      	subs	r3, r2, r3
 8012282:	2b00      	cmp	r3, #0
 8012284:	db1b      	blt.n	80122be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801228a:	4b96      	ldr	r3, [pc, #600]	; (80124e4 <tcp_receive+0x2c0>)
 801228c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801228e:	429a      	cmp	r2, r3
 8012290:	d106      	bne.n	80122a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012296:	4b94      	ldr	r3, [pc, #592]	; (80124e8 <tcp_receive+0x2c4>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	1ad3      	subs	r3, r2, r3
 801229c:	2b00      	cmp	r3, #0
 801229e:	db0e      	blt.n	80122be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122a4:	4b90      	ldr	r3, [pc, #576]	; (80124e8 <tcp_receive+0x2c4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d125      	bne.n	80122f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80122ac:	4b8f      	ldr	r3, [pc, #572]	; (80124ec <tcp_receive+0x2c8>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	89db      	ldrh	r3, [r3, #14]
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d91c      	bls.n	80122f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80122be:	4b8b      	ldr	r3, [pc, #556]	; (80124ec <tcp_receive+0x2c8>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	89db      	ldrh	r3, [r3, #14]
 80122c4:	b29a      	uxth	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122d8:	429a      	cmp	r2, r3
 80122da:	d205      	bcs.n	80122e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80122e8:	4b7e      	ldr	r3, [pc, #504]	; (80124e4 <tcp_receive+0x2c0>)
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80122f0:	4b7d      	ldr	r3, [pc, #500]	; (80124e8 <tcp_receive+0x2c4>)
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80122f8:	4b7b      	ldr	r3, [pc, #492]	; (80124e8 <tcp_receive+0x2c4>)
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	2b00      	cmp	r3, #0
 8012304:	dc58      	bgt.n	80123b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012306:	4b7a      	ldr	r3, [pc, #488]	; (80124f0 <tcp_receive+0x2cc>)
 8012308:	881b      	ldrh	r3, [r3, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d14b      	bne.n	80123a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012312:	687a      	ldr	r2, [r7, #4]
 8012314:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012318:	4413      	add	r3, r2
 801231a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801231c:	429a      	cmp	r2, r3
 801231e:	d142      	bne.n	80123a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012326:	2b00      	cmp	r3, #0
 8012328:	db3d      	blt.n	80123a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801232e:	4b6e      	ldr	r3, [pc, #440]	; (80124e8 <tcp_receive+0x2c4>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	429a      	cmp	r2, r3
 8012334:	d137      	bne.n	80123a6 <tcp_receive+0x182>
              found_dupack = 1;
 8012336:	2301      	movs	r3, #1
 8012338:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012340:	2bff      	cmp	r3, #255	; 0xff
 8012342:	d007      	beq.n	8012354 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801234a:	3301      	adds	r3, #1
 801234c:	b2da      	uxtb	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801235a:	2b03      	cmp	r3, #3
 801235c:	d91b      	bls.n	8012396 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012368:	4413      	add	r3, r2
 801236a:	b29a      	uxth	r2, r3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012372:	429a      	cmp	r2, r3
 8012374:	d30a      	bcc.n	801238c <tcp_receive+0x168>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012380:	4413      	add	r3, r2
 8012382:	b29a      	uxth	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801238a:	e004      	b.n	8012396 <tcp_receive+0x172>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012392:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801239c:	2b02      	cmp	r3, #2
 801239e:	d902      	bls.n	80123a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f002 fb41 	bl	8014a28 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80123a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f040 8160 	bne.w	801266e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2200      	movs	r2, #0
 80123b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80123b6:	e15a      	b.n	801266e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123b8:	4b4b      	ldr	r3, [pc, #300]	; (80124e8 <tcp_receive+0x2c4>)
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123c0:	1ad3      	subs	r3, r2, r3
 80123c2:	3b01      	subs	r3, #1
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	f2c0 814d 	blt.w	8012664 <tcp_receive+0x440>
 80123ca:	4b47      	ldr	r3, [pc, #284]	; (80124e8 <tcp_receive+0x2c4>)
 80123cc:	681a      	ldr	r2, [r3, #0]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	f300 8145 	bgt.w	8012664 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	8b5b      	ldrh	r3, [r3, #26]
 80123de:	f003 0304 	and.w	r3, r3, #4
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d010      	beq.n	8012408 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	8b5b      	ldrh	r3, [r3, #26]
 80123ea:	f023 0304 	bic.w	r3, r3, #4
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2200      	movs	r2, #0
 801240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012416:	10db      	asrs	r3, r3, #3
 8012418:	b21b      	sxth	r3, r3
 801241a:	b29a      	uxth	r2, r3
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012422:	b29b      	uxth	r3, r3
 8012424:	4413      	add	r3, r2
 8012426:	b29b      	uxth	r3, r3
 8012428:	b21a      	sxth	r2, r3
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012430:	4b2d      	ldr	r3, [pc, #180]	; (80124e8 <tcp_receive+0x2c4>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	b29a      	uxth	r2, r3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801243a:	b29b      	uxth	r3, r3
 801243c:	1ad3      	subs	r3, r2, r3
 801243e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012448:	4b27      	ldr	r3, [pc, #156]	; (80124e8 <tcp_receive+0x2c4>)
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	7d1b      	ldrb	r3, [r3, #20]
 8012454:	2b03      	cmp	r3, #3
 8012456:	f240 8096 	bls.w	8012586 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012466:	429a      	cmp	r2, r3
 8012468:	d244      	bcs.n	80124f4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	8b5b      	ldrh	r3, [r3, #26]
 801246e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <tcp_receive+0x256>
 8012476:	2301      	movs	r3, #1
 8012478:	e000      	b.n	801247c <tcp_receive+0x258>
 801247a:	2302      	movs	r3, #2
 801247c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012484:	b29a      	uxth	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801248a:	fb12 f303 	smulbb	r3, r2, r3
 801248e:	b29b      	uxth	r3, r3
 8012490:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012492:	4293      	cmp	r3, r2
 8012494:	bf28      	it	cs
 8012496:	4613      	movcs	r3, r2
 8012498:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80124a2:	4413      	add	r3, r2
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d309      	bcc.n	80124c4 <tcp_receive+0x2a0>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80124b8:	4413      	add	r3, r2
 80124ba:	b29a      	uxth	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80124c2:	e060      	b.n	8012586 <tcp_receive+0x362>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80124ce:	e05a      	b.n	8012586 <tcp_receive+0x362>
 80124d0:	0801ba84 	.word	0x0801ba84
 80124d4:	0801bdb4 	.word	0x0801bdb4
 80124d8:	0801bad0 	.word	0x0801bad0
 80124dc:	0801bdd0 	.word	0x0801bdd0
 80124e0:	20000a60 	.word	0x20000a60
 80124e4:	20000a54 	.word	0x20000a54
 80124e8:	20000a58 	.word	0x20000a58
 80124ec:	20000a44 	.word	0x20000a44
 80124f0:	20000a5e 	.word	0x20000a5e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80124fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80124fc:	4413      	add	r3, r2
 80124fe:	b29a      	uxth	r2, r3
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012506:	429a      	cmp	r2, r3
 8012508:	d309      	bcc.n	801251e <tcp_receive+0x2fa>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012512:	4413      	add	r3, r2
 8012514:	b29a      	uxth	r2, r3
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801251c:	e004      	b.n	8012528 <tcp_receive+0x304>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012524:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012534:	429a      	cmp	r2, r3
 8012536:	d326      	bcc.n	8012586 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012544:	1ad3      	subs	r3, r2, r3
 8012546:	b29a      	uxth	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012558:	4413      	add	r3, r2
 801255a:	b29a      	uxth	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012562:	429a      	cmp	r2, r3
 8012564:	d30a      	bcc.n	801257c <tcp_receive+0x358>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012570:	4413      	add	r3, r2
 8012572:	b29a      	uxth	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801257a:	e004      	b.n	8012586 <tcp_receive+0x362>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801258e:	4a98      	ldr	r2, [pc, #608]	; (80127f0 <tcp_receive+0x5cc>)
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f7ff fdcb 	bl	801212c <tcp_free_acked_segments>
 8012596:	4602      	mov	r2, r0
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125a4:	4a93      	ldr	r2, [pc, #588]	; (80127f4 <tcp_receive+0x5d0>)
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f7ff fdc0 	bl	801212c <tcp_free_acked_segments>
 80125ac:	4602      	mov	r2, r0
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d104      	bne.n	80125c4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125c0:	861a      	strh	r2, [r3, #48]	; 0x30
 80125c2:	e002      	b.n	80125ca <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d103      	bne.n	80125e0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80125e6:	4b84      	ldr	r3, [pc, #528]	; (80127f8 <tcp_receive+0x5d4>)
 80125e8:	881b      	ldrh	r3, [r3, #0]
 80125ea:	4413      	add	r3, r2
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	8b5b      	ldrh	r3, [r3, #26]
 80125f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d035      	beq.n	801266c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012604:	2b00      	cmp	r3, #0
 8012606:	d118      	bne.n	801263a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00c      	beq.n	801262a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	4618      	mov	r0, r3
 801261e:	f7fa ff00 	bl	800d422 <lwip_htonl>
 8012622:	4603      	mov	r3, r0
 8012624:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012626:	2b00      	cmp	r3, #0
 8012628:	dc20      	bgt.n	801266c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	8b5b      	ldrh	r3, [r3, #26]
 801262e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012632:	b29a      	uxth	r2, r3
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012638:	e018      	b.n	801266c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	4618      	mov	r0, r3
 8012648:	f7fa feeb 	bl	800d422 <lwip_htonl>
 801264c:	4603      	mov	r3, r0
 801264e:	1ae3      	subs	r3, r4, r3
 8012650:	2b00      	cmp	r3, #0
 8012652:	dc0b      	bgt.n	801266c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	8b5b      	ldrh	r3, [r3, #26]
 8012658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801265c:	b29a      	uxth	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012662:	e003      	b.n	801266c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f002 fbcd 	bl	8014e04 <tcp_send_empty_ack>
 801266a:	e000      	b.n	801266e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801266c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012672:	2b00      	cmp	r3, #0
 8012674:	d05b      	beq.n	801272e <tcp_receive+0x50a>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801267a:	4b60      	ldr	r3, [pc, #384]	; (80127fc <tcp_receive+0x5d8>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	1ad3      	subs	r3, r2, r3
 8012680:	2b00      	cmp	r3, #0
 8012682:	da54      	bge.n	801272e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012684:	4b5e      	ldr	r3, [pc, #376]	; (8012800 <tcp_receive+0x5dc>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	b29a      	uxth	r2, r3
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801268e:	b29b      	uxth	r3, r3
 8012690:	1ad3      	subs	r3, r2, r3
 8012692:	b29b      	uxth	r3, r3
 8012694:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012698:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80126a2:	10db      	asrs	r3, r3, #3
 80126a4:	b21b      	sxth	r3, r3
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	1ad3      	subs	r3, r2, r3
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80126b6:	b29a      	uxth	r2, r3
 80126b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80126bc:	4413      	add	r3, r2
 80126be:	b29b      	uxth	r3, r3
 80126c0:	b21a      	sxth	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80126c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	da05      	bge.n	80126da <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80126ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80126d2:	425b      	negs	r3, r3
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80126da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126e4:	109b      	asrs	r3, r3, #2
 80126e6:	b21b      	sxth	r3, r3
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	1ad3      	subs	r3, r2, r3
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80126fe:	4413      	add	r3, r2
 8012700:	b29b      	uxth	r3, r3
 8012702:	b21a      	sxth	r2, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801270e:	10db      	asrs	r3, r3, #3
 8012710:	b21b      	sxth	r3, r3
 8012712:	b29a      	uxth	r2, r3
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801271a:	b29b      	uxth	r3, r3
 801271c:	4413      	add	r3, r2
 801271e:	b29b      	uxth	r3, r3
 8012720:	b21a      	sxth	r2, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2200      	movs	r2, #0
 801272c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801272e:	4b35      	ldr	r3, [pc, #212]	; (8012804 <tcp_receive+0x5e0>)
 8012730:	881b      	ldrh	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	f000 84e1 	beq.w	80130fa <tcp_receive+0xed6>
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	7d1b      	ldrb	r3, [r3, #20]
 801273c:	2b06      	cmp	r3, #6
 801273e:	f200 84dc 	bhi.w	80130fa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012746:	4b30      	ldr	r3, [pc, #192]	; (8012808 <tcp_receive+0x5e4>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	1ad3      	subs	r3, r2, r3
 801274c:	3b01      	subs	r3, #1
 801274e:	2b00      	cmp	r3, #0
 8012750:	f2c0 808e 	blt.w	8012870 <tcp_receive+0x64c>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012758:	4b2a      	ldr	r3, [pc, #168]	; (8012804 <tcp_receive+0x5e0>)
 801275a:	881b      	ldrh	r3, [r3, #0]
 801275c:	4619      	mov	r1, r3
 801275e:	4b2a      	ldr	r3, [pc, #168]	; (8012808 <tcp_receive+0x5e4>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	440b      	add	r3, r1
 8012764:	1ad3      	subs	r3, r2, r3
 8012766:	3301      	adds	r3, #1
 8012768:	2b00      	cmp	r3, #0
 801276a:	f300 8081 	bgt.w	8012870 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801276e:	4b27      	ldr	r3, [pc, #156]	; (801280c <tcp_receive+0x5e8>)
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012778:	4b23      	ldr	r3, [pc, #140]	; (8012808 <tcp_receive+0x5e4>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012780:	4b22      	ldr	r3, [pc, #136]	; (801280c <tcp_receive+0x5e8>)
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d106      	bne.n	8012796 <tcp_receive+0x572>
 8012788:	4b21      	ldr	r3, [pc, #132]	; (8012810 <tcp_receive+0x5ec>)
 801278a:	f240 5294 	movw	r2, #1428	; 0x594
 801278e:	4921      	ldr	r1, [pc, #132]	; (8012814 <tcp_receive+0x5f0>)
 8012790:	4821      	ldr	r0, [pc, #132]	; (8012818 <tcp_receive+0x5f4>)
 8012792:	f005 fb8b 	bl	8017eac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012798:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801279c:	4293      	cmp	r3, r2
 801279e:	d906      	bls.n	80127ae <tcp_receive+0x58a>
 80127a0:	4b1b      	ldr	r3, [pc, #108]	; (8012810 <tcp_receive+0x5ec>)
 80127a2:	f240 5295 	movw	r2, #1429	; 0x595
 80127a6:	491d      	ldr	r1, [pc, #116]	; (801281c <tcp_receive+0x5f8>)
 80127a8:	481b      	ldr	r0, [pc, #108]	; (8012818 <tcp_receive+0x5f4>)
 80127aa:	f005 fb7f 	bl	8017eac <iprintf>
      off = (u16_t)off32;
 80127ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80127b4:	4b15      	ldr	r3, [pc, #84]	; (801280c <tcp_receive+0x5e8>)
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	891b      	ldrh	r3, [r3, #8]
 80127ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127be:	429a      	cmp	r2, r3
 80127c0:	d906      	bls.n	80127d0 <tcp_receive+0x5ac>
 80127c2:	4b13      	ldr	r3, [pc, #76]	; (8012810 <tcp_receive+0x5ec>)
 80127c4:	f240 5297 	movw	r2, #1431	; 0x597
 80127c8:	4915      	ldr	r1, [pc, #84]	; (8012820 <tcp_receive+0x5fc>)
 80127ca:	4813      	ldr	r0, [pc, #76]	; (8012818 <tcp_receive+0x5f4>)
 80127cc:	f005 fb6e 	bl	8017eac <iprintf>
      inseg.len -= off;
 80127d0:	4b0e      	ldr	r3, [pc, #56]	; (801280c <tcp_receive+0x5e8>)
 80127d2:	891a      	ldrh	r2, [r3, #8]
 80127d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127d8:	1ad3      	subs	r3, r2, r3
 80127da:	b29a      	uxth	r2, r3
 80127dc:	4b0b      	ldr	r3, [pc, #44]	; (801280c <tcp_receive+0x5e8>)
 80127de:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80127e0:	4b0a      	ldr	r3, [pc, #40]	; (801280c <tcp_receive+0x5e8>)
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	891a      	ldrh	r2, [r3, #8]
 80127e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80127ee:	e029      	b.n	8012844 <tcp_receive+0x620>
 80127f0:	0801bdec 	.word	0x0801bdec
 80127f4:	0801bdf4 	.word	0x0801bdf4
 80127f8:	20000a5c 	.word	0x20000a5c
 80127fc:	20000a58 	.word	0x20000a58
 8012800:	2000fb14 	.word	0x2000fb14
 8012804:	20000a5e 	.word	0x20000a5e
 8012808:	20000a54 	.word	0x20000a54
 801280c:	20000a34 	.word	0x20000a34
 8012810:	0801ba84 	.word	0x0801ba84
 8012814:	0801bdfc 	.word	0x0801bdfc
 8012818:	0801bad0 	.word	0x0801bad0
 801281c:	0801be0c 	.word	0x0801be0c
 8012820:	0801be1c 	.word	0x0801be1c
        off -= p->len;
 8012824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012826:	895b      	ldrh	r3, [r3, #10]
 8012828:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801282c:	1ad3      	subs	r3, r2, r3
 801282e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012834:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012836:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801283a:	2200      	movs	r2, #0
 801283c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801283e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012846:	895b      	ldrh	r3, [r3, #10]
 8012848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801284c:	429a      	cmp	r2, r3
 801284e:	d8e9      	bhi.n	8012824 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012850:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012854:	4619      	mov	r1, r3
 8012856:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012858:	f7fc f8da 	bl	800ea10 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012860:	4a91      	ldr	r2, [pc, #580]	; (8012aa8 <tcp_receive+0x884>)
 8012862:	6013      	str	r3, [r2, #0]
 8012864:	4b91      	ldr	r3, [pc, #580]	; (8012aac <tcp_receive+0x888>)
 8012866:	68db      	ldr	r3, [r3, #12]
 8012868:	4a8f      	ldr	r2, [pc, #572]	; (8012aa8 <tcp_receive+0x884>)
 801286a:	6812      	ldr	r2, [r2, #0]
 801286c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801286e:	e00d      	b.n	801288c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012870:	4b8d      	ldr	r3, [pc, #564]	; (8012aa8 <tcp_receive+0x884>)
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012878:	1ad3      	subs	r3, r2, r3
 801287a:	2b00      	cmp	r3, #0
 801287c:	da06      	bge.n	801288c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	8b5b      	ldrh	r3, [r3, #26]
 8012882:	f043 0302 	orr.w	r3, r3, #2
 8012886:	b29a      	uxth	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801288c:	4b86      	ldr	r3, [pc, #536]	; (8012aa8 <tcp_receive+0x884>)
 801288e:	681a      	ldr	r2, [r3, #0]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012894:	1ad3      	subs	r3, r2, r3
 8012896:	2b00      	cmp	r3, #0
 8012898:	f2c0 842a 	blt.w	80130f0 <tcp_receive+0xecc>
 801289c:	4b82      	ldr	r3, [pc, #520]	; (8012aa8 <tcp_receive+0x884>)
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a4:	6879      	ldr	r1, [r7, #4]
 80128a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80128a8:	440b      	add	r3, r1
 80128aa:	1ad3      	subs	r3, r2, r3
 80128ac:	3301      	adds	r3, #1
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f300 841e 	bgt.w	80130f0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128b8:	4b7b      	ldr	r3, [pc, #492]	; (8012aa8 <tcp_receive+0x884>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	429a      	cmp	r2, r3
 80128be:	f040 829a 	bne.w	8012df6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80128c2:	4b7a      	ldr	r3, [pc, #488]	; (8012aac <tcp_receive+0x888>)
 80128c4:	891c      	ldrh	r4, [r3, #8]
 80128c6:	4b79      	ldr	r3, [pc, #484]	; (8012aac <tcp_receive+0x888>)
 80128c8:	68db      	ldr	r3, [r3, #12]
 80128ca:	899b      	ldrh	r3, [r3, #12]
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7fa fd92 	bl	800d3f8 <lwip_htons>
 80128d4:	4603      	mov	r3, r0
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	f003 0303 	and.w	r3, r3, #3
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d001      	beq.n	80128e4 <tcp_receive+0x6c0>
 80128e0:	2301      	movs	r3, #1
 80128e2:	e000      	b.n	80128e6 <tcp_receive+0x6c2>
 80128e4:	2300      	movs	r3, #0
 80128e6:	4423      	add	r3, r4
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	4b71      	ldr	r3, [pc, #452]	; (8012ab0 <tcp_receive+0x88c>)
 80128ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80128f2:	4b6f      	ldr	r3, [pc, #444]	; (8012ab0 <tcp_receive+0x88c>)
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d275      	bcs.n	80129e6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80128fa:	4b6c      	ldr	r3, [pc, #432]	; (8012aac <tcp_receive+0x888>)
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	899b      	ldrh	r3, [r3, #12]
 8012900:	b29b      	uxth	r3, r3
 8012902:	4618      	mov	r0, r3
 8012904:	f7fa fd78 	bl	800d3f8 <lwip_htons>
 8012908:	4603      	mov	r3, r0
 801290a:	b2db      	uxtb	r3, r3
 801290c:	f003 0301 	and.w	r3, r3, #1
 8012910:	2b00      	cmp	r3, #0
 8012912:	d01f      	beq.n	8012954 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012914:	4b65      	ldr	r3, [pc, #404]	; (8012aac <tcp_receive+0x888>)
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	899b      	ldrh	r3, [r3, #12]
 801291a:	b29b      	uxth	r3, r3
 801291c:	b21b      	sxth	r3, r3
 801291e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012922:	b21c      	sxth	r4, r3
 8012924:	4b61      	ldr	r3, [pc, #388]	; (8012aac <tcp_receive+0x888>)
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	899b      	ldrh	r3, [r3, #12]
 801292a:	b29b      	uxth	r3, r3
 801292c:	4618      	mov	r0, r3
 801292e:	f7fa fd63 	bl	800d3f8 <lwip_htons>
 8012932:	4603      	mov	r3, r0
 8012934:	b2db      	uxtb	r3, r3
 8012936:	b29b      	uxth	r3, r3
 8012938:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801293c:	b29b      	uxth	r3, r3
 801293e:	4618      	mov	r0, r3
 8012940:	f7fa fd5a 	bl	800d3f8 <lwip_htons>
 8012944:	4603      	mov	r3, r0
 8012946:	b21b      	sxth	r3, r3
 8012948:	4323      	orrs	r3, r4
 801294a:	b21a      	sxth	r2, r3
 801294c:	4b57      	ldr	r3, [pc, #348]	; (8012aac <tcp_receive+0x888>)
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	b292      	uxth	r2, r2
 8012952:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012958:	4b54      	ldr	r3, [pc, #336]	; (8012aac <tcp_receive+0x888>)
 801295a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801295c:	4b53      	ldr	r3, [pc, #332]	; (8012aac <tcp_receive+0x888>)
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	899b      	ldrh	r3, [r3, #12]
 8012962:	b29b      	uxth	r3, r3
 8012964:	4618      	mov	r0, r3
 8012966:	f7fa fd47 	bl	800d3f8 <lwip_htons>
 801296a:	4603      	mov	r3, r0
 801296c:	b2db      	uxtb	r3, r3
 801296e:	f003 0302 	and.w	r3, r3, #2
 8012972:	2b00      	cmp	r3, #0
 8012974:	d005      	beq.n	8012982 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012976:	4b4d      	ldr	r3, [pc, #308]	; (8012aac <tcp_receive+0x888>)
 8012978:	891b      	ldrh	r3, [r3, #8]
 801297a:	3b01      	subs	r3, #1
 801297c:	b29a      	uxth	r2, r3
 801297e:	4b4b      	ldr	r3, [pc, #300]	; (8012aac <tcp_receive+0x888>)
 8012980:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012982:	4b4a      	ldr	r3, [pc, #296]	; (8012aac <tcp_receive+0x888>)
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	4a49      	ldr	r2, [pc, #292]	; (8012aac <tcp_receive+0x888>)
 8012988:	8912      	ldrh	r2, [r2, #8]
 801298a:	4611      	mov	r1, r2
 801298c:	4618      	mov	r0, r3
 801298e:	f7fb ff3f 	bl	800e810 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012992:	4b46      	ldr	r3, [pc, #280]	; (8012aac <tcp_receive+0x888>)
 8012994:	891c      	ldrh	r4, [r3, #8]
 8012996:	4b45      	ldr	r3, [pc, #276]	; (8012aac <tcp_receive+0x888>)
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	899b      	ldrh	r3, [r3, #12]
 801299c:	b29b      	uxth	r3, r3
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fa fd2a 	bl	800d3f8 <lwip_htons>
 80129a4:	4603      	mov	r3, r0
 80129a6:	b2db      	uxtb	r3, r3
 80129a8:	f003 0303 	and.w	r3, r3, #3
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <tcp_receive+0x790>
 80129b0:	2301      	movs	r3, #1
 80129b2:	e000      	b.n	80129b6 <tcp_receive+0x792>
 80129b4:	2300      	movs	r3, #0
 80129b6:	4423      	add	r3, r4
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	4b3d      	ldr	r3, [pc, #244]	; (8012ab0 <tcp_receive+0x88c>)
 80129bc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80129be:	4b3c      	ldr	r3, [pc, #240]	; (8012ab0 <tcp_receive+0x88c>)
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	461a      	mov	r2, r3
 80129c4:	4b38      	ldr	r3, [pc, #224]	; (8012aa8 <tcp_receive+0x884>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	441a      	add	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ce:	6879      	ldr	r1, [r7, #4]
 80129d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80129d2:	440b      	add	r3, r1
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d006      	beq.n	80129e6 <tcp_receive+0x7c2>
 80129d8:	4b36      	ldr	r3, [pc, #216]	; (8012ab4 <tcp_receive+0x890>)
 80129da:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80129de:	4936      	ldr	r1, [pc, #216]	; (8012ab8 <tcp_receive+0x894>)
 80129e0:	4836      	ldr	r0, [pc, #216]	; (8012abc <tcp_receive+0x898>)
 80129e2:	f005 fa63 	bl	8017eac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	f000 80e7 	beq.w	8012bbe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80129f0:	4b2e      	ldr	r3, [pc, #184]	; (8012aac <tcp_receive+0x888>)
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	899b      	ldrh	r3, [r3, #12]
 80129f6:	b29b      	uxth	r3, r3
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7fa fcfd 	bl	800d3f8 <lwip_htons>
 80129fe:	4603      	mov	r3, r0
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	f003 0301 	and.w	r3, r3, #1
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d010      	beq.n	8012a2c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012a0a:	e00a      	b.n	8012a22 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a10:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a16:	681a      	ldr	r2, [r3, #0]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012a1c:	68f8      	ldr	r0, [r7, #12]
 8012a1e:	f7fd fcaa 	bl	8010376 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d1f0      	bne.n	8012a0c <tcp_receive+0x7e8>
 8012a2a:	e0c8      	b.n	8012bbe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a30:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012a32:	e052      	b.n	8012ada <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	899b      	ldrh	r3, [r3, #12]
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7fa fcdb 	bl	800d3f8 <lwip_htons>
 8012a42:	4603      	mov	r3, r0
 8012a44:	b2db      	uxtb	r3, r3
 8012a46:	f003 0301 	and.w	r3, r3, #1
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d03d      	beq.n	8012aca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012a4e:	4b17      	ldr	r3, [pc, #92]	; (8012aac <tcp_receive+0x888>)
 8012a50:	68db      	ldr	r3, [r3, #12]
 8012a52:	899b      	ldrh	r3, [r3, #12]
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fa fcce 	bl	800d3f8 <lwip_htons>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d130      	bne.n	8012aca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012a68:	4b10      	ldr	r3, [pc, #64]	; (8012aac <tcp_receive+0x888>)
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	899b      	ldrh	r3, [r3, #12]
 8012a6e:	b29c      	uxth	r4, r3
 8012a70:	2001      	movs	r0, #1
 8012a72:	f7fa fcc1 	bl	800d3f8 <lwip_htons>
 8012a76:	4603      	mov	r3, r0
 8012a78:	461a      	mov	r2, r3
 8012a7a:	4b0c      	ldr	r3, [pc, #48]	; (8012aac <tcp_receive+0x888>)
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	4322      	orrs	r2, r4
 8012a80:	b292      	uxth	r2, r2
 8012a82:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012a84:	4b09      	ldr	r3, [pc, #36]	; (8012aac <tcp_receive+0x888>)
 8012a86:	891c      	ldrh	r4, [r3, #8]
 8012a88:	4b08      	ldr	r3, [pc, #32]	; (8012aac <tcp_receive+0x888>)
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	899b      	ldrh	r3, [r3, #12]
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7fa fcb1 	bl	800d3f8 <lwip_htons>
 8012a96:	4603      	mov	r3, r0
 8012a98:	b2db      	uxtb	r3, r3
 8012a9a:	f003 0303 	and.w	r3, r3, #3
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d00e      	beq.n	8012ac0 <tcp_receive+0x89c>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e00d      	b.n	8012ac2 <tcp_receive+0x89e>
 8012aa6:	bf00      	nop
 8012aa8:	20000a54 	.word	0x20000a54
 8012aac:	20000a34 	.word	0x20000a34
 8012ab0:	20000a5e 	.word	0x20000a5e
 8012ab4:	0801ba84 	.word	0x0801ba84
 8012ab8:	0801be2c 	.word	0x0801be2c
 8012abc:	0801bad0 	.word	0x0801bad0
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	4423      	add	r3, r4
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	4b98      	ldr	r3, [pc, #608]	; (8012d28 <tcp_receive+0xb04>)
 8012ac8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012acc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012ad4:	6938      	ldr	r0, [r7, #16]
 8012ad6:	f7fd fc4e 	bl	8010376 <tcp_seg_free>
            while (next &&
 8012ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d00e      	beq.n	8012afe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012ae0:	4b91      	ldr	r3, [pc, #580]	; (8012d28 <tcp_receive+0xb04>)
 8012ae2:	881b      	ldrh	r3, [r3, #0]
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	4b91      	ldr	r3, [pc, #580]	; (8012d2c <tcp_receive+0xb08>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	441a      	add	r2, r3
 8012aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aee:	68db      	ldr	r3, [r3, #12]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012af4:	8909      	ldrh	r1, [r1, #8]
 8012af6:	440b      	add	r3, r1
 8012af8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	da9a      	bge.n	8012a34 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d059      	beq.n	8012bb8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012b04:	4b88      	ldr	r3, [pc, #544]	; (8012d28 <tcp_receive+0xb04>)
 8012b06:	881b      	ldrh	r3, [r3, #0]
 8012b08:	461a      	mov	r2, r3
 8012b0a:	4b88      	ldr	r3, [pc, #544]	; (8012d2c <tcp_receive+0xb08>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	441a      	add	r2, r3
 8012b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	dd4d      	ble.n	8012bb8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	4b81      	ldr	r3, [pc, #516]	; (8012d2c <tcp_receive+0xb08>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	b29b      	uxth	r3, r3
 8012b2a:	1ad3      	subs	r3, r2, r3
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	4b80      	ldr	r3, [pc, #512]	; (8012d30 <tcp_receive+0xb0c>)
 8012b30:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b32:	4b7f      	ldr	r3, [pc, #508]	; (8012d30 <tcp_receive+0xb0c>)
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	899b      	ldrh	r3, [r3, #12]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fa fc5c 	bl	800d3f8 <lwip_htons>
 8012b40:	4603      	mov	r3, r0
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	f003 0302 	and.w	r3, r3, #2
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d005      	beq.n	8012b58 <tcp_receive+0x934>
                inseg.len -= 1;
 8012b4c:	4b78      	ldr	r3, [pc, #480]	; (8012d30 <tcp_receive+0xb0c>)
 8012b4e:	891b      	ldrh	r3, [r3, #8]
 8012b50:	3b01      	subs	r3, #1
 8012b52:	b29a      	uxth	r2, r3
 8012b54:	4b76      	ldr	r3, [pc, #472]	; (8012d30 <tcp_receive+0xb0c>)
 8012b56:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012b58:	4b75      	ldr	r3, [pc, #468]	; (8012d30 <tcp_receive+0xb0c>)
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	4a74      	ldr	r2, [pc, #464]	; (8012d30 <tcp_receive+0xb0c>)
 8012b5e:	8912      	ldrh	r2, [r2, #8]
 8012b60:	4611      	mov	r1, r2
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7fb fe54 	bl	800e810 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012b68:	4b71      	ldr	r3, [pc, #452]	; (8012d30 <tcp_receive+0xb0c>)
 8012b6a:	891c      	ldrh	r4, [r3, #8]
 8012b6c:	4b70      	ldr	r3, [pc, #448]	; (8012d30 <tcp_receive+0xb0c>)
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	899b      	ldrh	r3, [r3, #12]
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fa fc3f 	bl	800d3f8 <lwip_htons>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	f003 0303 	and.w	r3, r3, #3
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d001      	beq.n	8012b8a <tcp_receive+0x966>
 8012b86:	2301      	movs	r3, #1
 8012b88:	e000      	b.n	8012b8c <tcp_receive+0x968>
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	4423      	add	r3, r4
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	4b65      	ldr	r3, [pc, #404]	; (8012d28 <tcp_receive+0xb04>)
 8012b92:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012b94:	4b64      	ldr	r3, [pc, #400]	; (8012d28 <tcp_receive+0xb04>)
 8012b96:	881b      	ldrh	r3, [r3, #0]
 8012b98:	461a      	mov	r2, r3
 8012b9a:	4b64      	ldr	r3, [pc, #400]	; (8012d2c <tcp_receive+0xb08>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	441a      	add	r2, r3
 8012ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d006      	beq.n	8012bb8 <tcp_receive+0x994>
 8012baa:	4b62      	ldr	r3, [pc, #392]	; (8012d34 <tcp_receive+0xb10>)
 8012bac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012bb0:	4961      	ldr	r1, [pc, #388]	; (8012d38 <tcp_receive+0xb14>)
 8012bb2:	4862      	ldr	r0, [pc, #392]	; (8012d3c <tcp_receive+0xb18>)
 8012bb4:	f005 f97a 	bl	8017eac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bbc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012bbe:	4b5a      	ldr	r3, [pc, #360]	; (8012d28 <tcp_receive+0xb04>)
 8012bc0:	881b      	ldrh	r3, [r3, #0]
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	4b59      	ldr	r3, [pc, #356]	; (8012d2c <tcp_receive+0xb08>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	441a      	add	r2, r3
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bd2:	4b55      	ldr	r3, [pc, #340]	; (8012d28 <tcp_receive+0xb04>)
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d206      	bcs.n	8012be8 <tcp_receive+0x9c4>
 8012bda:	4b56      	ldr	r3, [pc, #344]	; (8012d34 <tcp_receive+0xb10>)
 8012bdc:	f240 6207 	movw	r2, #1543	; 0x607
 8012be0:	4957      	ldr	r1, [pc, #348]	; (8012d40 <tcp_receive+0xb1c>)
 8012be2:	4856      	ldr	r0, [pc, #344]	; (8012d3c <tcp_receive+0xb18>)
 8012be4:	f005 f962 	bl	8017eac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bec:	4b4e      	ldr	r3, [pc, #312]	; (8012d28 <tcp_receive+0xb04>)
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	1ad3      	subs	r3, r2, r3
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7fc fe97 	bl	800f92c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012bfe:	4b4c      	ldr	r3, [pc, #304]	; (8012d30 <tcp_receive+0xb0c>)
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	891b      	ldrh	r3, [r3, #8]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d006      	beq.n	8012c16 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012c08:	4b49      	ldr	r3, [pc, #292]	; (8012d30 <tcp_receive+0xb0c>)
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	4a4d      	ldr	r2, [pc, #308]	; (8012d44 <tcp_receive+0xb20>)
 8012c0e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012c10:	4b47      	ldr	r3, [pc, #284]	; (8012d30 <tcp_receive+0xb0c>)
 8012c12:	2200      	movs	r2, #0
 8012c14:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c16:	4b46      	ldr	r3, [pc, #280]	; (8012d30 <tcp_receive+0xb0c>)
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	899b      	ldrh	r3, [r3, #12]
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7fa fbea 	bl	800d3f8 <lwip_htons>
 8012c24:	4603      	mov	r3, r0
 8012c26:	b2db      	uxtb	r3, r3
 8012c28:	f003 0301 	and.w	r3, r3, #1
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f000 80b8 	beq.w	8012da2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012c32:	4b45      	ldr	r3, [pc, #276]	; (8012d48 <tcp_receive+0xb24>)
 8012c34:	781b      	ldrb	r3, [r3, #0]
 8012c36:	f043 0320 	orr.w	r3, r3, #32
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	4b42      	ldr	r3, [pc, #264]	; (8012d48 <tcp_receive+0xb24>)
 8012c3e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012c40:	e0af      	b.n	8012da2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c46:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	4a36      	ldr	r2, [pc, #216]	; (8012d2c <tcp_receive+0xb08>)
 8012c52:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	891b      	ldrh	r3, [r3, #8]
 8012c58:	461c      	mov	r4, r3
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	68db      	ldr	r3, [r3, #12]
 8012c5e:	899b      	ldrh	r3, [r3, #12]
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7fa fbc8 	bl	800d3f8 <lwip_htons>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	f003 0303 	and.w	r3, r3, #3
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d001      	beq.n	8012c78 <tcp_receive+0xa54>
 8012c74:	2301      	movs	r3, #1
 8012c76:	e000      	b.n	8012c7a <tcp_receive+0xa56>
 8012c78:	2300      	movs	r3, #0
 8012c7a:	191a      	adds	r2, r3, r4
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c80:	441a      	add	r2, r3
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c8a:	461c      	mov	r4, r3
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	891b      	ldrh	r3, [r3, #8]
 8012c90:	461d      	mov	r5, r3
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	899b      	ldrh	r3, [r3, #12]
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7fa fbac 	bl	800d3f8 <lwip_htons>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	b2db      	uxtb	r3, r3
 8012ca4:	f003 0303 	and.w	r3, r3, #3
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d001      	beq.n	8012cb0 <tcp_receive+0xa8c>
 8012cac:	2301      	movs	r3, #1
 8012cae:	e000      	b.n	8012cb2 <tcp_receive+0xa8e>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	442b      	add	r3, r5
 8012cb4:	429c      	cmp	r4, r3
 8012cb6:	d206      	bcs.n	8012cc6 <tcp_receive+0xaa2>
 8012cb8:	4b1e      	ldr	r3, [pc, #120]	; (8012d34 <tcp_receive+0xb10>)
 8012cba:	f240 622b 	movw	r2, #1579	; 0x62b
 8012cbe:	4923      	ldr	r1, [pc, #140]	; (8012d4c <tcp_receive+0xb28>)
 8012cc0:	481e      	ldr	r0, [pc, #120]	; (8012d3c <tcp_receive+0xb18>)
 8012cc2:	f005 f8f3 	bl	8017eac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	891b      	ldrh	r3, [r3, #8]
 8012cca:	461c      	mov	r4, r3
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	899b      	ldrh	r3, [r3, #12]
 8012cd2:	b29b      	uxth	r3, r3
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7fa fb8f 	bl	800d3f8 <lwip_htons>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	f003 0303 	and.w	r3, r3, #3
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d001      	beq.n	8012cea <tcp_receive+0xac6>
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	e000      	b.n	8012cec <tcp_receive+0xac8>
 8012cea:	2300      	movs	r3, #0
 8012cec:	1919      	adds	r1, r3, r4
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012cf2:	b28b      	uxth	r3, r1
 8012cf4:	1ad3      	subs	r3, r2, r3
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f7fc fe15 	bl	800f92c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	891b      	ldrh	r3, [r3, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d028      	beq.n	8012d5e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012d0c:	4b0d      	ldr	r3, [pc, #52]	; (8012d44 <tcp_receive+0xb20>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d01d      	beq.n	8012d50 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012d14:	4b0b      	ldr	r3, [pc, #44]	; (8012d44 <tcp_receive+0xb20>)
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	4610      	mov	r0, r2
 8012d20:	f7fb ffbe 	bl	800eca0 <pbuf_cat>
 8012d24:	e018      	b.n	8012d58 <tcp_receive+0xb34>
 8012d26:	bf00      	nop
 8012d28:	20000a5e 	.word	0x20000a5e
 8012d2c:	20000a54 	.word	0x20000a54
 8012d30:	20000a34 	.word	0x20000a34
 8012d34:	0801ba84 	.word	0x0801ba84
 8012d38:	0801be64 	.word	0x0801be64
 8012d3c:	0801bad0 	.word	0x0801bad0
 8012d40:	0801bea0 	.word	0x0801bea0
 8012d44:	20000a64 	.word	0x20000a64
 8012d48:	20000a61 	.word	0x20000a61
 8012d4c:	0801bec0 	.word	0x0801bec0
            } else {
              recv_data = cseg->p;
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	685b      	ldr	r3, [r3, #4]
 8012d54:	4a70      	ldr	r2, [pc, #448]	; (8012f18 <tcp_receive+0xcf4>)
 8012d56:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	68db      	ldr	r3, [r3, #12]
 8012d62:	899b      	ldrh	r3, [r3, #12]
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fa fb46 	bl	800d3f8 <lwip_htons>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	f003 0301 	and.w	r3, r3, #1
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d00d      	beq.n	8012d94 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012d78:	4b68      	ldr	r3, [pc, #416]	; (8012f1c <tcp_receive+0xcf8>)
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	f043 0320 	orr.w	r3, r3, #32
 8012d80:	b2da      	uxtb	r2, r3
 8012d82:	4b66      	ldr	r3, [pc, #408]	; (8012f1c <tcp_receive+0xcf8>)
 8012d84:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	7d1b      	ldrb	r3, [r3, #20]
 8012d8a:	2b04      	cmp	r3, #4
 8012d8c:	d102      	bne.n	8012d94 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2207      	movs	r2, #7
 8012d92:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	681a      	ldr	r2, [r3, #0]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012d9c:	68b8      	ldr	r0, [r7, #8]
 8012d9e:	f7fd faea 	bl	8010376 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d008      	beq.n	8012dbc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	685a      	ldr	r2, [r3, #4]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012db6:	429a      	cmp	r2, r3
 8012db8:	f43f af43 	beq.w	8012c42 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	8b5b      	ldrh	r3, [r3, #26]
 8012dc0:	f003 0301 	and.w	r3, r3, #1
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d00e      	beq.n	8012de6 <tcp_receive+0xbc2>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	8b5b      	ldrh	r3, [r3, #26]
 8012dcc:	f023 0301 	bic.w	r3, r3, #1
 8012dd0:	b29a      	uxth	r2, r3
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	835a      	strh	r2, [r3, #26]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	8b5b      	ldrh	r3, [r3, #26]
 8012dda:	f043 0302 	orr.w	r3, r3, #2
 8012dde:	b29a      	uxth	r2, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012de4:	e188      	b.n	80130f8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	8b5b      	ldrh	r3, [r3, #26]
 8012dea:	f043 0301 	orr.w	r3, r3, #1
 8012dee:	b29a      	uxth	r2, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012df4:	e180      	b.n	80130f8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d106      	bne.n	8012e0c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012dfe:	4848      	ldr	r0, [pc, #288]	; (8012f20 <tcp_receive+0xcfc>)
 8012e00:	f7fd faf0 	bl	80103e4 <tcp_seg_copy>
 8012e04:	4602      	mov	r2, r0
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	675a      	str	r2, [r3, #116]	; 0x74
 8012e0a:	e16d      	b.n	80130e8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e16:	e157      	b.n	80130c8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	685a      	ldr	r2, [r3, #4]
 8012e1e:	4b41      	ldr	r3, [pc, #260]	; (8012f24 <tcp_receive+0xd00>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d11d      	bne.n	8012e62 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012e26:	4b3e      	ldr	r3, [pc, #248]	; (8012f20 <tcp_receive+0xcfc>)
 8012e28:	891a      	ldrh	r2, [r3, #8]
 8012e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2c:	891b      	ldrh	r3, [r3, #8]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	f240 814f 	bls.w	80130d2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e34:	483a      	ldr	r0, [pc, #232]	; (8012f20 <tcp_receive+0xcfc>)
 8012e36:	f7fd fad5 	bl	80103e4 <tcp_seg_copy>
 8012e3a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	f000 8149 	beq.w	80130d6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d003      	beq.n	8012e52 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4c:	697a      	ldr	r2, [r7, #20]
 8012e4e:	601a      	str	r2, [r3, #0]
 8012e50:	e002      	b.n	8012e58 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	697a      	ldr	r2, [r7, #20]
 8012e56:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e5a:	6978      	ldr	r0, [r7, #20]
 8012e5c:	f7ff f8de 	bl	801201c <tcp_oos_insert_segment>
                }
                break;
 8012e60:	e139      	b.n	80130d6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d117      	bne.n	8012e98 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012e68:	4b2e      	ldr	r3, [pc, #184]	; (8012f24 <tcp_receive+0xd00>)
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	1ad3      	subs	r3, r2, r3
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	da57      	bge.n	8012f28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e78:	4829      	ldr	r0, [pc, #164]	; (8012f20 <tcp_receive+0xcfc>)
 8012e7a:	f7fd fab3 	bl	80103e4 <tcp_seg_copy>
 8012e7e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012e80:	69bb      	ldr	r3, [r7, #24]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	f000 8129 	beq.w	80130da <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	69ba      	ldr	r2, [r7, #24]
 8012e8c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e90:	69b8      	ldr	r0, [r7, #24]
 8012e92:	f7ff f8c3 	bl	801201c <tcp_oos_insert_segment>
                  }
                  break;
 8012e96:	e120      	b.n	80130da <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012e98:	4b22      	ldr	r3, [pc, #136]	; (8012f24 <tcp_receive+0xd00>)
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e9e:	68db      	ldr	r3, [r3, #12]
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	1ad3      	subs	r3, r2, r3
 8012ea4:	3b01      	subs	r3, #1
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	db3e      	blt.n	8012f28 <tcp_receive+0xd04>
 8012eaa:	4b1e      	ldr	r3, [pc, #120]	; (8012f24 <tcp_receive+0xd00>)
 8012eac:	681a      	ldr	r2, [r3, #0]
 8012eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb0:	68db      	ldr	r3, [r3, #12]
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	1ad3      	subs	r3, r2, r3
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	dc35      	bgt.n	8012f28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ebc:	4818      	ldr	r0, [pc, #96]	; (8012f20 <tcp_receive+0xcfc>)
 8012ebe:	f7fd fa91 	bl	80103e4 <tcp_seg_copy>
 8012ec2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	f000 8109 	beq.w	80130de <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ece:	68db      	ldr	r3, [r3, #12]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ed4:	8912      	ldrh	r2, [r2, #8]
 8012ed6:	441a      	add	r2, r3
 8012ed8:	4b12      	ldr	r3, [pc, #72]	; (8012f24 <tcp_receive+0xd00>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	1ad3      	subs	r3, r2, r3
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	dd12      	ble.n	8012f08 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012ee2:	4b10      	ldr	r3, [pc, #64]	; (8012f24 <tcp_receive+0xd00>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	b29a      	uxth	r2, r3
 8012ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eea:	68db      	ldr	r3, [r3, #12]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	b29b      	uxth	r3, r3
 8012ef0:	1ad3      	subs	r3, r2, r3
 8012ef2:	b29a      	uxth	r2, r3
 8012ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012efa:	685a      	ldr	r2, [r3, #4]
 8012efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012efe:	891b      	ldrh	r3, [r3, #8]
 8012f00:	4619      	mov	r1, r3
 8012f02:	4610      	mov	r0, r2
 8012f04:	f7fb fc84 	bl	800e810 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f0a:	69fa      	ldr	r2, [r7, #28]
 8012f0c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012f10:	69f8      	ldr	r0, [r7, #28]
 8012f12:	f7ff f883 	bl	801201c <tcp_oos_insert_segment>
                  }
                  break;
 8012f16:	e0e2      	b.n	80130de <tcp_receive+0xeba>
 8012f18:	20000a64 	.word	0x20000a64
 8012f1c:	20000a61 	.word	0x20000a61
 8012f20:	20000a34 	.word	0x20000a34
 8012f24:	20000a54 	.word	0x20000a54
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	f040 80c6 	bne.w	80130c2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012f36:	4b80      	ldr	r3, [pc, #512]	; (8013138 <tcp_receive+0xf14>)
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	f340 80bd 	ble.w	80130c2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4a:	68db      	ldr	r3, [r3, #12]
 8012f4c:	899b      	ldrh	r3, [r3, #12]
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fa fa51 	bl	800d3f8 <lwip_htons>
 8012f56:	4603      	mov	r3, r0
 8012f58:	b2db      	uxtb	r3, r3
 8012f5a:	f003 0301 	and.w	r3, r3, #1
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	f040 80bf 	bne.w	80130e2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012f64:	4875      	ldr	r0, [pc, #468]	; (801313c <tcp_receive+0xf18>)
 8012f66:	f7fd fa3d 	bl	80103e4 <tcp_seg_copy>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	f000 80b6 	beq.w	80130e6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7c:	68db      	ldr	r3, [r3, #12]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f82:	8912      	ldrh	r2, [r2, #8]
 8012f84:	441a      	add	r2, r3
 8012f86:	4b6c      	ldr	r3, [pc, #432]	; (8013138 <tcp_receive+0xf14>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	dd12      	ble.n	8012fb6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012f90:	4b69      	ldr	r3, [pc, #420]	; (8013138 <tcp_receive+0xf14>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa8:	685a      	ldr	r2, [r3, #4]
 8012faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fac:	891b      	ldrh	r3, [r3, #8]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	4610      	mov	r0, r2
 8012fb2:	f7fb fc2d 	bl	800e810 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012fb6:	4b62      	ldr	r3, [pc, #392]	; (8013140 <tcp_receive+0xf1c>)
 8012fb8:	881b      	ldrh	r3, [r3, #0]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	4b5e      	ldr	r3, [pc, #376]	; (8013138 <tcp_receive+0xf14>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	441a      	add	r2, r3
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc6:	6879      	ldr	r1, [r7, #4]
 8012fc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012fca:	440b      	add	r3, r1
 8012fcc:	1ad3      	subs	r3, r2, r3
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	f340 8089 	ble.w	80130e6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	68db      	ldr	r3, [r3, #12]
 8012fda:	899b      	ldrh	r3, [r3, #12]
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7fa fa0a 	bl	800d3f8 <lwip_htons>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	f003 0301 	and.w	r3, r3, #1
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d022      	beq.n	8013036 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	68db      	ldr	r3, [r3, #12]
 8012ff6:	899b      	ldrh	r3, [r3, #12]
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	b21b      	sxth	r3, r3
 8012ffc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013000:	b21c      	sxth	r4, r3
 8013002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	68db      	ldr	r3, [r3, #12]
 8013008:	899b      	ldrh	r3, [r3, #12]
 801300a:	b29b      	uxth	r3, r3
 801300c:	4618      	mov	r0, r3
 801300e:	f7fa f9f3 	bl	800d3f8 <lwip_htons>
 8013012:	4603      	mov	r3, r0
 8013014:	b2db      	uxtb	r3, r3
 8013016:	b29b      	uxth	r3, r3
 8013018:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801301c:	b29b      	uxth	r3, r3
 801301e:	4618      	mov	r0, r3
 8013020:	f7fa f9ea 	bl	800d3f8 <lwip_htons>
 8013024:	4603      	mov	r3, r0
 8013026:	b21b      	sxth	r3, r3
 8013028:	4323      	orrs	r3, r4
 801302a:	b21a      	sxth	r2, r3
 801302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	68db      	ldr	r3, [r3, #12]
 8013032:	b292      	uxth	r2, r2
 8013034:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801303a:	b29a      	uxth	r2, r3
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013040:	4413      	add	r3, r2
 8013042:	b299      	uxth	r1, r3
 8013044:	4b3c      	ldr	r3, [pc, #240]	; (8013138 <tcp_receive+0xf14>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	b29a      	uxth	r2, r3
 801304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	1a8a      	subs	r2, r1, r2
 8013050:	b292      	uxth	r2, r2
 8013052:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	685a      	ldr	r2, [r3, #4]
 801305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	891b      	ldrh	r3, [r3, #8]
 8013060:	4619      	mov	r1, r3
 8013062:	4610      	mov	r0, r2
 8013064:	f7fb fbd4 	bl	800e810 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	891c      	ldrh	r4, [r3, #8]
 801306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	899b      	ldrh	r3, [r3, #12]
 8013076:	b29b      	uxth	r3, r3
 8013078:	4618      	mov	r0, r3
 801307a:	f7fa f9bd 	bl	800d3f8 <lwip_htons>
 801307e:	4603      	mov	r3, r0
 8013080:	b2db      	uxtb	r3, r3
 8013082:	f003 0303 	and.w	r3, r3, #3
 8013086:	2b00      	cmp	r3, #0
 8013088:	d001      	beq.n	801308e <tcp_receive+0xe6a>
 801308a:	2301      	movs	r3, #1
 801308c:	e000      	b.n	8013090 <tcp_receive+0xe6c>
 801308e:	2300      	movs	r3, #0
 8013090:	4423      	add	r3, r4
 8013092:	b29a      	uxth	r2, r3
 8013094:	4b2a      	ldr	r3, [pc, #168]	; (8013140 <tcp_receive+0xf1c>)
 8013096:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013098:	4b29      	ldr	r3, [pc, #164]	; (8013140 <tcp_receive+0xf1c>)
 801309a:	881b      	ldrh	r3, [r3, #0]
 801309c:	461a      	mov	r2, r3
 801309e:	4b26      	ldr	r3, [pc, #152]	; (8013138 <tcp_receive+0xf14>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	441a      	add	r2, r3
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130a8:	6879      	ldr	r1, [r7, #4]
 80130aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80130ac:	440b      	add	r3, r1
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d019      	beq.n	80130e6 <tcp_receive+0xec2>
 80130b2:	4b24      	ldr	r3, [pc, #144]	; (8013144 <tcp_receive+0xf20>)
 80130b4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80130b8:	4923      	ldr	r1, [pc, #140]	; (8013148 <tcp_receive+0xf24>)
 80130ba:	4824      	ldr	r0, [pc, #144]	; (801314c <tcp_receive+0xf28>)
 80130bc:	f004 fef6 	bl	8017eac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80130c0:	e011      	b.n	80130e6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80130c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80130c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f47f aea4 	bne.w	8012e18 <tcp_receive+0xbf4>
 80130d0:	e00a      	b.n	80130e8 <tcp_receive+0xec4>
                break;
 80130d2:	bf00      	nop
 80130d4:	e008      	b.n	80130e8 <tcp_receive+0xec4>
                break;
 80130d6:	bf00      	nop
 80130d8:	e006      	b.n	80130e8 <tcp_receive+0xec4>
                  break;
 80130da:	bf00      	nop
 80130dc:	e004      	b.n	80130e8 <tcp_receive+0xec4>
                  break;
 80130de:	bf00      	nop
 80130e0:	e002      	b.n	80130e8 <tcp_receive+0xec4>
                  break;
 80130e2:	bf00      	nop
 80130e4:	e000      	b.n	80130e8 <tcp_receive+0xec4>
                break;
 80130e6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f001 fe8b 	bl	8014e04 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80130ee:	e003      	b.n	80130f8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f001 fe87 	bl	8014e04 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80130f6:	e01a      	b.n	801312e <tcp_receive+0xf0a>
 80130f8:	e019      	b.n	801312e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80130fa:	4b0f      	ldr	r3, [pc, #60]	; (8013138 <tcp_receive+0xf14>)
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013102:	1ad3      	subs	r3, r2, r3
 8013104:	2b00      	cmp	r3, #0
 8013106:	db0a      	blt.n	801311e <tcp_receive+0xefa>
 8013108:	4b0b      	ldr	r3, [pc, #44]	; (8013138 <tcp_receive+0xf14>)
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013110:	6879      	ldr	r1, [r7, #4]
 8013112:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013114:	440b      	add	r3, r1
 8013116:	1ad3      	subs	r3, r2, r3
 8013118:	3301      	adds	r3, #1
 801311a:	2b00      	cmp	r3, #0
 801311c:	dd07      	ble.n	801312e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	8b5b      	ldrh	r3, [r3, #26]
 8013122:	f043 0302 	orr.w	r3, r3, #2
 8013126:	b29a      	uxth	r2, r3
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801312c:	e7ff      	b.n	801312e <tcp_receive+0xf0a>
 801312e:	bf00      	nop
 8013130:	3750      	adds	r7, #80	; 0x50
 8013132:	46bd      	mov	sp, r7
 8013134:	bdb0      	pop	{r4, r5, r7, pc}
 8013136:	bf00      	nop
 8013138:	20000a54 	.word	0x20000a54
 801313c:	20000a34 	.word	0x20000a34
 8013140:	20000a5e 	.word	0x20000a5e
 8013144:	0801ba84 	.word	0x0801ba84
 8013148:	0801be2c 	.word	0x0801be2c
 801314c:	0801bad0 	.word	0x0801bad0

08013150 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013156:	4b15      	ldr	r3, [pc, #84]	; (80131ac <tcp_get_next_optbyte+0x5c>)
 8013158:	881b      	ldrh	r3, [r3, #0]
 801315a:	1c5a      	adds	r2, r3, #1
 801315c:	b291      	uxth	r1, r2
 801315e:	4a13      	ldr	r2, [pc, #76]	; (80131ac <tcp_get_next_optbyte+0x5c>)
 8013160:	8011      	strh	r1, [r2, #0]
 8013162:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013164:	4b12      	ldr	r3, [pc, #72]	; (80131b0 <tcp_get_next_optbyte+0x60>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <tcp_get_next_optbyte+0x26>
 801316c:	4b11      	ldr	r3, [pc, #68]	; (80131b4 <tcp_get_next_optbyte+0x64>)
 801316e:	881b      	ldrh	r3, [r3, #0]
 8013170:	88fa      	ldrh	r2, [r7, #6]
 8013172:	429a      	cmp	r2, r3
 8013174:	d208      	bcs.n	8013188 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013176:	4b10      	ldr	r3, [pc, #64]	; (80131b8 <tcp_get_next_optbyte+0x68>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	3314      	adds	r3, #20
 801317c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801317e:	88fb      	ldrh	r3, [r7, #6]
 8013180:	683a      	ldr	r2, [r7, #0]
 8013182:	4413      	add	r3, r2
 8013184:	781b      	ldrb	r3, [r3, #0]
 8013186:	e00b      	b.n	80131a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013188:	88fb      	ldrh	r3, [r7, #6]
 801318a:	b2da      	uxtb	r2, r3
 801318c:	4b09      	ldr	r3, [pc, #36]	; (80131b4 <tcp_get_next_optbyte+0x64>)
 801318e:	881b      	ldrh	r3, [r3, #0]
 8013190:	b2db      	uxtb	r3, r3
 8013192:	1ad3      	subs	r3, r2, r3
 8013194:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013196:	4b06      	ldr	r3, [pc, #24]	; (80131b0 <tcp_get_next_optbyte+0x60>)
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	797b      	ldrb	r3, [r7, #5]
 801319c:	4413      	add	r3, r2
 801319e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr
 80131ac:	20000a50 	.word	0x20000a50
 80131b0:	20000a4c 	.word	0x20000a4c
 80131b4:	20000a4a 	.word	0x20000a4a
 80131b8:	20000a44 	.word	0x20000a44

080131bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b084      	sub	sp, #16
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d106      	bne.n	80131d8 <tcp_parseopt+0x1c>
 80131ca:	4b32      	ldr	r3, [pc, #200]	; (8013294 <tcp_parseopt+0xd8>)
 80131cc:	f240 727d 	movw	r2, #1917	; 0x77d
 80131d0:	4931      	ldr	r1, [pc, #196]	; (8013298 <tcp_parseopt+0xdc>)
 80131d2:	4832      	ldr	r0, [pc, #200]	; (801329c <tcp_parseopt+0xe0>)
 80131d4:	f004 fe6a 	bl	8017eac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80131d8:	4b31      	ldr	r3, [pc, #196]	; (80132a0 <tcp_parseopt+0xe4>)
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d055      	beq.n	801328c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80131e0:	4b30      	ldr	r3, [pc, #192]	; (80132a4 <tcp_parseopt+0xe8>)
 80131e2:	2200      	movs	r2, #0
 80131e4:	801a      	strh	r2, [r3, #0]
 80131e6:	e045      	b.n	8013274 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80131e8:	f7ff ffb2 	bl	8013150 <tcp_get_next_optbyte>
 80131ec:	4603      	mov	r3, r0
 80131ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80131f0:	7bfb      	ldrb	r3, [r7, #15]
 80131f2:	2b02      	cmp	r3, #2
 80131f4:	d006      	beq.n	8013204 <tcp_parseopt+0x48>
 80131f6:	2b02      	cmp	r3, #2
 80131f8:	dc2b      	bgt.n	8013252 <tcp_parseopt+0x96>
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d041      	beq.n	8013282 <tcp_parseopt+0xc6>
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d127      	bne.n	8013252 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013202:	e037      	b.n	8013274 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013204:	f7ff ffa4 	bl	8013150 <tcp_get_next_optbyte>
 8013208:	4603      	mov	r3, r0
 801320a:	2b04      	cmp	r3, #4
 801320c:	d13b      	bne.n	8013286 <tcp_parseopt+0xca>
 801320e:	4b25      	ldr	r3, [pc, #148]	; (80132a4 <tcp_parseopt+0xe8>)
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	3301      	adds	r3, #1
 8013214:	4a22      	ldr	r2, [pc, #136]	; (80132a0 <tcp_parseopt+0xe4>)
 8013216:	8812      	ldrh	r2, [r2, #0]
 8013218:	4293      	cmp	r3, r2
 801321a:	da34      	bge.n	8013286 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801321c:	f7ff ff98 	bl	8013150 <tcp_get_next_optbyte>
 8013220:	4603      	mov	r3, r0
 8013222:	b29b      	uxth	r3, r3
 8013224:	021b      	lsls	r3, r3, #8
 8013226:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013228:	f7ff ff92 	bl	8013150 <tcp_get_next_optbyte>
 801322c:	4603      	mov	r3, r0
 801322e:	b29a      	uxth	r2, r3
 8013230:	89bb      	ldrh	r3, [r7, #12]
 8013232:	4313      	orrs	r3, r2
 8013234:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013236:	89bb      	ldrh	r3, [r7, #12]
 8013238:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801323c:	d804      	bhi.n	8013248 <tcp_parseopt+0x8c>
 801323e:	89bb      	ldrh	r3, [r7, #12]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d001      	beq.n	8013248 <tcp_parseopt+0x8c>
 8013244:	89ba      	ldrh	r2, [r7, #12]
 8013246:	e001      	b.n	801324c <tcp_parseopt+0x90>
 8013248:	f44f 7206 	mov.w	r2, #536	; 0x218
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013250:	e010      	b.n	8013274 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013252:	f7ff ff7d 	bl	8013150 <tcp_get_next_optbyte>
 8013256:	4603      	mov	r3, r0
 8013258:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801325a:	7afb      	ldrb	r3, [r7, #11]
 801325c:	2b01      	cmp	r3, #1
 801325e:	d914      	bls.n	801328a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013260:	7afb      	ldrb	r3, [r7, #11]
 8013262:	b29a      	uxth	r2, r3
 8013264:	4b0f      	ldr	r3, [pc, #60]	; (80132a4 <tcp_parseopt+0xe8>)
 8013266:	881b      	ldrh	r3, [r3, #0]
 8013268:	4413      	add	r3, r2
 801326a:	b29b      	uxth	r3, r3
 801326c:	3b02      	subs	r3, #2
 801326e:	b29a      	uxth	r2, r3
 8013270:	4b0c      	ldr	r3, [pc, #48]	; (80132a4 <tcp_parseopt+0xe8>)
 8013272:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013274:	4b0b      	ldr	r3, [pc, #44]	; (80132a4 <tcp_parseopt+0xe8>)
 8013276:	881a      	ldrh	r2, [r3, #0]
 8013278:	4b09      	ldr	r3, [pc, #36]	; (80132a0 <tcp_parseopt+0xe4>)
 801327a:	881b      	ldrh	r3, [r3, #0]
 801327c:	429a      	cmp	r2, r3
 801327e:	d3b3      	bcc.n	80131e8 <tcp_parseopt+0x2c>
 8013280:	e004      	b.n	801328c <tcp_parseopt+0xd0>
          return;
 8013282:	bf00      	nop
 8013284:	e002      	b.n	801328c <tcp_parseopt+0xd0>
            return;
 8013286:	bf00      	nop
 8013288:	e000      	b.n	801328c <tcp_parseopt+0xd0>
            return;
 801328a:	bf00      	nop
      }
    }
  }
}
 801328c:	3710      	adds	r7, #16
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	0801ba84 	.word	0x0801ba84
 8013298:	0801bee8 	.word	0x0801bee8
 801329c:	0801bad0 	.word	0x0801bad0
 80132a0:	20000a48 	.word	0x20000a48
 80132a4:	20000a50 	.word	0x20000a50

080132a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80132a8:	b480      	push	{r7}
 80132aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80132ac:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <tcp_trigger_input_pcb_close+0x1c>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f043 0310 	orr.w	r3, r3, #16
 80132b4:	b2da      	uxtb	r2, r3
 80132b6:	4b03      	ldr	r3, [pc, #12]	; (80132c4 <tcp_trigger_input_pcb_close+0x1c>)
 80132b8:	701a      	strb	r2, [r3, #0]
}
 80132ba:	bf00      	nop
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr
 80132c4:	20000a61 	.word	0x20000a61

080132c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d00a      	beq.n	80132f0 <tcp_route+0x28>
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	7a1b      	ldrb	r3, [r3, #8]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d006      	beq.n	80132f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	7a1b      	ldrb	r3, [r3, #8]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fb f8b8 	bl	800e45c <netif_get_by_index>
 80132ec:	4603      	mov	r3, r0
 80132ee:	e003      	b.n	80132f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f003 fad5 	bl	80168a0 <ip4_route>
 80132f6:	4603      	mov	r3, r0
  }
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3710      	adds	r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013300:	b590      	push	{r4, r7, lr}
 8013302:	b087      	sub	sp, #28
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	60b9      	str	r1, [r7, #8]
 801330a:	603b      	str	r3, [r7, #0]
 801330c:	4613      	mov	r3, r2
 801330e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d105      	bne.n	8013322 <tcp_create_segment+0x22>
 8013316:	4b44      	ldr	r3, [pc, #272]	; (8013428 <tcp_create_segment+0x128>)
 8013318:	22a3      	movs	r2, #163	; 0xa3
 801331a:	4944      	ldr	r1, [pc, #272]	; (801342c <tcp_create_segment+0x12c>)
 801331c:	4844      	ldr	r0, [pc, #272]	; (8013430 <tcp_create_segment+0x130>)
 801331e:	f004 fdc5 	bl	8017eac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d105      	bne.n	8013334 <tcp_create_segment+0x34>
 8013328:	4b3f      	ldr	r3, [pc, #252]	; (8013428 <tcp_create_segment+0x128>)
 801332a:	22a4      	movs	r2, #164	; 0xa4
 801332c:	4941      	ldr	r1, [pc, #260]	; (8013434 <tcp_create_segment+0x134>)
 801332e:	4840      	ldr	r0, [pc, #256]	; (8013430 <tcp_create_segment+0x130>)
 8013330:	f004 fdbc 	bl	8017eac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	b2db      	uxtb	r3, r3
 801333c:	f003 0304 	and.w	r3, r3, #4
 8013340:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013342:	2003      	movs	r0, #3
 8013344:	f7fa fd8c 	bl	800de60 <memp_malloc>
 8013348:	6138      	str	r0, [r7, #16]
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d104      	bne.n	801335a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013350:	68b8      	ldr	r0, [r7, #8]
 8013352:	f7fb fbe3 	bl	800eb1c <pbuf_free>
    return NULL;
 8013356:	2300      	movs	r3, #0
 8013358:	e061      	b.n	801341e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013360:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	2200      	movs	r2, #0
 8013366:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	68ba      	ldr	r2, [r7, #8]
 801336c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	891a      	ldrh	r2, [r3, #8]
 8013372:	7dfb      	ldrb	r3, [r7, #23]
 8013374:	b29b      	uxth	r3, r3
 8013376:	429a      	cmp	r2, r3
 8013378:	d205      	bcs.n	8013386 <tcp_create_segment+0x86>
 801337a:	4b2b      	ldr	r3, [pc, #172]	; (8013428 <tcp_create_segment+0x128>)
 801337c:	22b0      	movs	r2, #176	; 0xb0
 801337e:	492e      	ldr	r1, [pc, #184]	; (8013438 <tcp_create_segment+0x138>)
 8013380:	482b      	ldr	r0, [pc, #172]	; (8013430 <tcp_create_segment+0x130>)
 8013382:	f004 fd93 	bl	8017eac <iprintf>
  seg->len = p->tot_len - optlen;
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	891a      	ldrh	r2, [r3, #8]
 801338a:	7dfb      	ldrb	r3, [r7, #23]
 801338c:	b29b      	uxth	r3, r3
 801338e:	1ad3      	subs	r3, r2, r3
 8013390:	b29a      	uxth	r2, r3
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013396:	2114      	movs	r1, #20
 8013398:	68b8      	ldr	r0, [r7, #8]
 801339a:	f7fb fb29 	bl	800e9f0 <pbuf_add_header>
 801339e:	4603      	mov	r3, r0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d004      	beq.n	80133ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80133a4:	6938      	ldr	r0, [r7, #16]
 80133a6:	f7fc ffe6 	bl	8010376 <tcp_seg_free>
    return NULL;
 80133aa:	2300      	movs	r3, #0
 80133ac:	e037      	b.n	801341e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	685b      	ldr	r3, [r3, #4]
 80133b2:	685a      	ldr	r2, [r3, #4]
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	8ada      	ldrh	r2, [r3, #22]
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	68dc      	ldr	r4, [r3, #12]
 80133c0:	4610      	mov	r0, r2
 80133c2:	f7fa f819 	bl	800d3f8 <lwip_htons>
 80133c6:	4603      	mov	r3, r0
 80133c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	8b1a      	ldrh	r2, [r3, #24]
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	68dc      	ldr	r4, [r3, #12]
 80133d2:	4610      	mov	r0, r2
 80133d4:	f7fa f810 	bl	800d3f8 <lwip_htons>
 80133d8:	4603      	mov	r3, r0
 80133da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	68dc      	ldr	r4, [r3, #12]
 80133e0:	6838      	ldr	r0, [r7, #0]
 80133e2:	f7fa f81e 	bl	800d422 <lwip_htonl>
 80133e6:	4603      	mov	r3, r0
 80133e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80133ea:	7dfb      	ldrb	r3, [r7, #23]
 80133ec:	089b      	lsrs	r3, r3, #2
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	3305      	adds	r3, #5
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	031b      	lsls	r3, r3, #12
 80133f8:	b29a      	uxth	r2, r3
 80133fa:	79fb      	ldrb	r3, [r7, #7]
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	4313      	orrs	r3, r2
 8013400:	b29a      	uxth	r2, r3
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	68dc      	ldr	r4, [r3, #12]
 8013406:	4610      	mov	r0, r2
 8013408:	f7f9 fff6 	bl	800d3f8 <lwip_htons>
 801340c:	4603      	mov	r3, r0
 801340e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	2200      	movs	r2, #0
 8013416:	749a      	strb	r2, [r3, #18]
 8013418:	2200      	movs	r2, #0
 801341a:	74da      	strb	r2, [r3, #19]
  return seg;
 801341c:	693b      	ldr	r3, [r7, #16]
}
 801341e:	4618      	mov	r0, r3
 8013420:	371c      	adds	r7, #28
 8013422:	46bd      	mov	sp, r7
 8013424:	bd90      	pop	{r4, r7, pc}
 8013426:	bf00      	nop
 8013428:	0801bf04 	.word	0x0801bf04
 801342c:	0801bf38 	.word	0x0801bf38
 8013430:	0801bf58 	.word	0x0801bf58
 8013434:	0801bf80 	.word	0x0801bf80
 8013438:	0801bfa4 	.word	0x0801bfa4

0801343c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b086      	sub	sp, #24
 8013440:	af00      	add	r7, sp, #0
 8013442:	607b      	str	r3, [r7, #4]
 8013444:	4603      	mov	r3, r0
 8013446:	73fb      	strb	r3, [r7, #15]
 8013448:	460b      	mov	r3, r1
 801344a:	81bb      	strh	r3, [r7, #12]
 801344c:	4613      	mov	r3, r2
 801344e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013450:	89bb      	ldrh	r3, [r7, #12]
 8013452:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d105      	bne.n	8013466 <tcp_pbuf_prealloc+0x2a>
 801345a:	4b30      	ldr	r3, [pc, #192]	; (801351c <tcp_pbuf_prealloc+0xe0>)
 801345c:	22e8      	movs	r2, #232	; 0xe8
 801345e:	4930      	ldr	r1, [pc, #192]	; (8013520 <tcp_pbuf_prealloc+0xe4>)
 8013460:	4830      	ldr	r0, [pc, #192]	; (8013524 <tcp_pbuf_prealloc+0xe8>)
 8013462:	f004 fd23 	bl	8017eac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013466:	6a3b      	ldr	r3, [r7, #32]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d105      	bne.n	8013478 <tcp_pbuf_prealloc+0x3c>
 801346c:	4b2b      	ldr	r3, [pc, #172]	; (801351c <tcp_pbuf_prealloc+0xe0>)
 801346e:	22e9      	movs	r2, #233	; 0xe9
 8013470:	492d      	ldr	r1, [pc, #180]	; (8013528 <tcp_pbuf_prealloc+0xec>)
 8013472:	482c      	ldr	r0, [pc, #176]	; (8013524 <tcp_pbuf_prealloc+0xe8>)
 8013474:	f004 fd1a 	bl	8017eac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013478:	89ba      	ldrh	r2, [r7, #12]
 801347a:	897b      	ldrh	r3, [r7, #10]
 801347c:	429a      	cmp	r2, r3
 801347e:	d221      	bcs.n	80134c4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013480:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013484:	f003 0302 	and.w	r3, r3, #2
 8013488:	2b00      	cmp	r3, #0
 801348a:	d111      	bne.n	80134b0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801348c:	6a3b      	ldr	r3, [r7, #32]
 801348e:	8b5b      	ldrh	r3, [r3, #26]
 8013490:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013494:	2b00      	cmp	r3, #0
 8013496:	d115      	bne.n	80134c4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013498:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801349c:	2b00      	cmp	r3, #0
 801349e:	d007      	beq.n	80134b0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80134a0:	6a3b      	ldr	r3, [r7, #32]
 80134a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d103      	bne.n	80134b0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80134a8:	6a3b      	ldr	r3, [r7, #32]
 80134aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d009      	beq.n	80134c4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80134b0:	89bb      	ldrh	r3, [r7, #12]
 80134b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80134b6:	f023 0203 	bic.w	r2, r3, #3
 80134ba:	897b      	ldrh	r3, [r7, #10]
 80134bc:	4293      	cmp	r3, r2
 80134be:	bf28      	it	cs
 80134c0:	4613      	movcs	r3, r2
 80134c2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80134c4:	8af9      	ldrh	r1, [r7, #22]
 80134c6:	7bfb      	ldrb	r3, [r7, #15]
 80134c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fb f841 	bl	800e554 <pbuf_alloc>
 80134d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d101      	bne.n	80134de <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80134da:	2300      	movs	r3, #0
 80134dc:	e019      	b.n	8013512 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d006      	beq.n	80134f4 <tcp_pbuf_prealloc+0xb8>
 80134e6:	4b0d      	ldr	r3, [pc, #52]	; (801351c <tcp_pbuf_prealloc+0xe0>)
 80134e8:	f240 120b 	movw	r2, #267	; 0x10b
 80134ec:	490f      	ldr	r1, [pc, #60]	; (801352c <tcp_pbuf_prealloc+0xf0>)
 80134ee:	480d      	ldr	r0, [pc, #52]	; (8013524 <tcp_pbuf_prealloc+0xe8>)
 80134f0:	f004 fcdc 	bl	8017eac <iprintf>
  *oversize = p->len - length;
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	895a      	ldrh	r2, [r3, #10]
 80134f8:	89bb      	ldrh	r3, [r7, #12]
 80134fa:	1ad3      	subs	r3, r2, r3
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	89ba      	ldrh	r2, [r7, #12]
 8013506:	811a      	strh	r2, [r3, #8]
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	891a      	ldrh	r2, [r3, #8]
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	815a      	strh	r2, [r3, #10]
  return p;
 8013510:	693b      	ldr	r3, [r7, #16]
}
 8013512:	4618      	mov	r0, r3
 8013514:	3718      	adds	r7, #24
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	0801bf04 	.word	0x0801bf04
 8013520:	0801bfbc 	.word	0x0801bfbc
 8013524:	0801bf58 	.word	0x0801bf58
 8013528:	0801bfe0 	.word	0x0801bfe0
 801352c:	0801c000 	.word	0x0801c000

08013530 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	460b      	mov	r3, r1
 801353a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d106      	bne.n	8013550 <tcp_write_checks+0x20>
 8013542:	4b33      	ldr	r3, [pc, #204]	; (8013610 <tcp_write_checks+0xe0>)
 8013544:	f240 1233 	movw	r2, #307	; 0x133
 8013548:	4932      	ldr	r1, [pc, #200]	; (8013614 <tcp_write_checks+0xe4>)
 801354a:	4833      	ldr	r0, [pc, #204]	; (8013618 <tcp_write_checks+0xe8>)
 801354c:	f004 fcae 	bl	8017eac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	7d1b      	ldrb	r3, [r3, #20]
 8013554:	2b04      	cmp	r3, #4
 8013556:	d00e      	beq.n	8013576 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801355c:	2b07      	cmp	r3, #7
 801355e:	d00a      	beq.n	8013576 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013564:	2b02      	cmp	r3, #2
 8013566:	d006      	beq.n	8013576 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801356c:	2b03      	cmp	r3, #3
 801356e:	d002      	beq.n	8013576 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013570:	f06f 030a 	mvn.w	r3, #10
 8013574:	e048      	b.n	8013608 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013576:	887b      	ldrh	r3, [r7, #2]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d101      	bne.n	8013580 <tcp_write_checks+0x50>
    return ERR_OK;
 801357c:	2300      	movs	r3, #0
 801357e:	e043      	b.n	8013608 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013586:	887a      	ldrh	r2, [r7, #2]
 8013588:	429a      	cmp	r2, r3
 801358a:	d909      	bls.n	80135a0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	8b5b      	ldrh	r3, [r3, #26]
 8013590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013594:	b29a      	uxth	r2, r3
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801359a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801359e:	e033      	b.n	8013608 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135a6:	2b08      	cmp	r3, #8
 80135a8:	d909      	bls.n	80135be <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	8b5b      	ldrh	r3, [r3, #26]
 80135ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80135b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135bc:	e024      	b.n	8013608 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d00f      	beq.n	80135e8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d11a      	bne.n	8013606 <tcp_write_checks+0xd6>
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d116      	bne.n	8013606 <tcp_write_checks+0xd6>
 80135d8:	4b0d      	ldr	r3, [pc, #52]	; (8013610 <tcp_write_checks+0xe0>)
 80135da:	f240 1255 	movw	r2, #341	; 0x155
 80135de:	490f      	ldr	r1, [pc, #60]	; (801361c <tcp_write_checks+0xec>)
 80135e0:	480d      	ldr	r0, [pc, #52]	; (8013618 <tcp_write_checks+0xe8>)
 80135e2:	f004 fc63 	bl	8017eac <iprintf>
 80135e6:	e00e      	b.n	8013606 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d103      	bne.n	80135f8 <tcp_write_checks+0xc8>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d006      	beq.n	8013606 <tcp_write_checks+0xd6>
 80135f8:	4b05      	ldr	r3, [pc, #20]	; (8013610 <tcp_write_checks+0xe0>)
 80135fa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80135fe:	4908      	ldr	r1, [pc, #32]	; (8013620 <tcp_write_checks+0xf0>)
 8013600:	4805      	ldr	r0, [pc, #20]	; (8013618 <tcp_write_checks+0xe8>)
 8013602:	f004 fc53 	bl	8017eac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013606:	2300      	movs	r3, #0
}
 8013608:	4618      	mov	r0, r3
 801360a:	3708      	adds	r7, #8
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	0801bf04 	.word	0x0801bf04
 8013614:	0801c014 	.word	0x0801c014
 8013618:	0801bf58 	.word	0x0801bf58
 801361c:	0801c034 	.word	0x0801c034
 8013620:	0801c070 	.word	0x0801c070

08013624 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013624:	b590      	push	{r4, r7, lr}
 8013626:	b09b      	sub	sp, #108	; 0x6c
 8013628:	af04      	add	r7, sp, #16
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	4611      	mov	r1, r2
 8013630:	461a      	mov	r2, r3
 8013632:	460b      	mov	r3, r1
 8013634:	80fb      	strh	r3, [r7, #6]
 8013636:	4613      	mov	r3, r2
 8013638:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801363a:	2300      	movs	r3, #0
 801363c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801363e:	2300      	movs	r3, #0
 8013640:	653b      	str	r3, [r7, #80]	; 0x50
 8013642:	2300      	movs	r3, #0
 8013644:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013646:	2300      	movs	r3, #0
 8013648:	64bb      	str	r3, [r7, #72]	; 0x48
 801364a:	2300      	movs	r3, #0
 801364c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801364e:	2300      	movs	r3, #0
 8013650:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013654:	2300      	movs	r3, #0
 8013656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801365a:	2300      	movs	r3, #0
 801365c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801365e:	2300      	movs	r3, #0
 8013660:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013662:	2300      	movs	r3, #0
 8013664:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d109      	bne.n	8013680 <tcp_write+0x5c>
 801366c:	4ba4      	ldr	r3, [pc, #656]	; (8013900 <tcp_write+0x2dc>)
 801366e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013672:	49a4      	ldr	r1, [pc, #656]	; (8013904 <tcp_write+0x2e0>)
 8013674:	48a4      	ldr	r0, [pc, #656]	; (8013908 <tcp_write+0x2e4>)
 8013676:	f004 fc19 	bl	8017eac <iprintf>
 801367a:	f06f 030f 	mvn.w	r3, #15
 801367e:	e32a      	b.n	8013cd6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013686:	085b      	lsrs	r3, r3, #1
 8013688:	b29a      	uxth	r2, r3
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801368e:	4293      	cmp	r3, r2
 8013690:	bf28      	it	cs
 8013692:	4613      	movcs	r3, r2
 8013694:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013698:	2b00      	cmp	r3, #0
 801369a:	d102      	bne.n	80136a2 <tcp_write+0x7e>
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136a0:	e000      	b.n	80136a4 <tcp_write+0x80>
 80136a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d109      	bne.n	80136c0 <tcp_write+0x9c>
 80136ac:	4b94      	ldr	r3, [pc, #592]	; (8013900 <tcp_write+0x2dc>)
 80136ae:	f240 12ad 	movw	r2, #429	; 0x1ad
 80136b2:	4996      	ldr	r1, [pc, #600]	; (801390c <tcp_write+0x2e8>)
 80136b4:	4894      	ldr	r0, [pc, #592]	; (8013908 <tcp_write+0x2e4>)
 80136b6:	f004 fbf9 	bl	8017eac <iprintf>
 80136ba:	f06f 030f 	mvn.w	r3, #15
 80136be:	e30a      	b.n	8013cd6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80136c0:	88fb      	ldrh	r3, [r7, #6]
 80136c2:	4619      	mov	r1, r3
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7ff ff33 	bl	8013530 <tcp_write_checks>
 80136ca:	4603      	mov	r3, r0
 80136cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80136d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d002      	beq.n	80136de <tcp_write+0xba>
    return err;
 80136d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80136dc:	e2fb      	b.n	8013cd6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136e8:	2300      	movs	r3, #0
 80136ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f000 80f6 	beq.w	80138e4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136fc:	653b      	str	r3, [r7, #80]	; 0x50
 80136fe:	e002      	b.n	8013706 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1f8      	bne.n	8013700 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801370e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013710:	7a9b      	ldrb	r3, [r3, #10]
 8013712:	009b      	lsls	r3, r3, #2
 8013714:	b29b      	uxth	r3, r3
 8013716:	f003 0304 	and.w	r3, r3, #4
 801371a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801371c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801371e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013720:	891b      	ldrh	r3, [r3, #8]
 8013722:	4619      	mov	r1, r3
 8013724:	8c3b      	ldrh	r3, [r7, #32]
 8013726:	440b      	add	r3, r1
 8013728:	429a      	cmp	r2, r3
 801372a:	da06      	bge.n	801373a <tcp_write+0x116>
 801372c:	4b74      	ldr	r3, [pc, #464]	; (8013900 <tcp_write+0x2dc>)
 801372e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013732:	4977      	ldr	r1, [pc, #476]	; (8013910 <tcp_write+0x2ec>)
 8013734:	4874      	ldr	r0, [pc, #464]	; (8013908 <tcp_write+0x2e4>)
 8013736:	f004 fbb9 	bl	8017eac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801373a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801373c:	891a      	ldrh	r2, [r3, #8]
 801373e:	8c3b      	ldrh	r3, [r7, #32]
 8013740:	4413      	add	r3, r2
 8013742:	b29b      	uxth	r3, r3
 8013744:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013750:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013752:	8a7b      	ldrh	r3, [r7, #18]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d026      	beq.n	80137a6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013758:	8a7b      	ldrh	r3, [r7, #18]
 801375a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801375c:	429a      	cmp	r2, r3
 801375e:	d206      	bcs.n	801376e <tcp_write+0x14a>
 8013760:	4b67      	ldr	r3, [pc, #412]	; (8013900 <tcp_write+0x2dc>)
 8013762:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013766:	496b      	ldr	r1, [pc, #428]	; (8013914 <tcp_write+0x2f0>)
 8013768:	4867      	ldr	r0, [pc, #412]	; (8013908 <tcp_write+0x2e4>)
 801376a:	f004 fb9f 	bl	8017eac <iprintf>
      seg = last_unsent;
 801376e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013770:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013772:	8a7b      	ldrh	r3, [r7, #18]
 8013774:	88fa      	ldrh	r2, [r7, #6]
 8013776:	4293      	cmp	r3, r2
 8013778:	bf28      	it	cs
 801377a:	4613      	movcs	r3, r2
 801377c:	b29b      	uxth	r3, r3
 801377e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013780:	4293      	cmp	r3, r2
 8013782:	bf28      	it	cs
 8013784:	4613      	movcs	r3, r2
 8013786:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013788:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801378c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801378e:	4413      	add	r3, r2
 8013790:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013794:	8a7a      	ldrh	r2, [r7, #18]
 8013796:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	b29b      	uxth	r3, r3
 801379c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801379e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80137a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80137a2:	1ad3      	subs	r3, r2, r3
 80137a4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80137a6:	8a7b      	ldrh	r3, [r7, #18]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d00b      	beq.n	80137c4 <tcp_write+0x1a0>
 80137ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137b0:	88fb      	ldrh	r3, [r7, #6]
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d006      	beq.n	80137c4 <tcp_write+0x1a0>
 80137b6:	4b52      	ldr	r3, [pc, #328]	; (8013900 <tcp_write+0x2dc>)
 80137b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137bc:	4956      	ldr	r1, [pc, #344]	; (8013918 <tcp_write+0x2f4>)
 80137be:	4852      	ldr	r0, [pc, #328]	; (8013908 <tcp_write+0x2e4>)
 80137c0:	f004 fb74 	bl	8017eac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80137c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137c8:	88fb      	ldrh	r3, [r7, #6]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	f080 8167 	bcs.w	8013a9e <tcp_write+0x47a>
 80137d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	f000 8163 	beq.w	8013a9e <tcp_write+0x47a>
 80137d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137da:	891b      	ldrh	r3, [r3, #8]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f000 815e 	beq.w	8013a9e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80137e2:	88fa      	ldrh	r2, [r7, #6]
 80137e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137e8:	1ad2      	subs	r2, r2, r3
 80137ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137ec:	4293      	cmp	r3, r2
 80137ee:	bfa8      	it	ge
 80137f0:	4613      	movge	r3, r2
 80137f2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80137f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80137f8:	797b      	ldrb	r3, [r7, #5]
 80137fa:	f003 0301 	and.w	r3, r3, #1
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d027      	beq.n	8013852 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013802:	f107 0012 	add.w	r0, r7, #18
 8013806:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013808:	8bf9      	ldrh	r1, [r7, #30]
 801380a:	2301      	movs	r3, #1
 801380c:	9302      	str	r3, [sp, #8]
 801380e:	797b      	ldrb	r3, [r7, #5]
 8013810:	9301      	str	r3, [sp, #4]
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	4603      	mov	r3, r0
 8013818:	2000      	movs	r0, #0
 801381a:	f7ff fe0f 	bl	801343c <tcp_pbuf_prealloc>
 801381e:	6578      	str	r0, [r7, #84]	; 0x54
 8013820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013822:	2b00      	cmp	r3, #0
 8013824:	f000 8225 	beq.w	8013c72 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801382a:	6858      	ldr	r0, [r3, #4]
 801382c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013830:	68ba      	ldr	r2, [r7, #8]
 8013832:	4413      	add	r3, r2
 8013834:	8bfa      	ldrh	r2, [r7, #30]
 8013836:	4619      	mov	r1, r3
 8013838:	f004 fa5e 	bl	8017cf8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801383c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801383e:	f7fb f9f5 	bl	800ec2c <pbuf_clen>
 8013842:	4603      	mov	r3, r0
 8013844:	461a      	mov	r2, r3
 8013846:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801384a:	4413      	add	r3, r2
 801384c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013850:	e041      	b.n	80138d6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	637b      	str	r3, [r7, #52]	; 0x34
 8013858:	e002      	b.n	8013860 <tcp_write+0x23c>
 801385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	637b      	str	r3, [r7, #52]	; 0x34
 8013860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d1f8      	bne.n	801385a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801386a:	7b1b      	ldrb	r3, [r3, #12]
 801386c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013870:	2b00      	cmp	r3, #0
 8013872:	d115      	bne.n	80138a0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801387a:	8952      	ldrh	r2, [r2, #10]
 801387c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801387e:	68ba      	ldr	r2, [r7, #8]
 8013880:	429a      	cmp	r2, r3
 8013882:	d10d      	bne.n	80138a0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013884:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013888:	2b00      	cmp	r3, #0
 801388a:	d006      	beq.n	801389a <tcp_write+0x276>
 801388c:	4b1c      	ldr	r3, [pc, #112]	; (8013900 <tcp_write+0x2dc>)
 801388e:	f240 2231 	movw	r2, #561	; 0x231
 8013892:	4922      	ldr	r1, [pc, #136]	; (801391c <tcp_write+0x2f8>)
 8013894:	481c      	ldr	r0, [pc, #112]	; (8013908 <tcp_write+0x2e4>)
 8013896:	f004 fb09 	bl	8017eac <iprintf>
          extendlen = seglen;
 801389a:	8bfb      	ldrh	r3, [r7, #30]
 801389c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801389e:	e01a      	b.n	80138d6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80138a0:	8bfb      	ldrh	r3, [r7, #30]
 80138a2:	2201      	movs	r2, #1
 80138a4:	4619      	mov	r1, r3
 80138a6:	2000      	movs	r0, #0
 80138a8:	f7fa fe54 	bl	800e554 <pbuf_alloc>
 80138ac:	6578      	str	r0, [r7, #84]	; 0x54
 80138ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f000 81e0 	beq.w	8013c76 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80138b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138ba:	68ba      	ldr	r2, [r7, #8]
 80138bc:	441a      	add	r2, r3
 80138be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138c0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80138c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80138c4:	f7fb f9b2 	bl	800ec2c <pbuf_clen>
 80138c8:	4603      	mov	r3, r0
 80138ca:	461a      	mov	r2, r3
 80138cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80138d0:	4413      	add	r3, r2
 80138d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80138d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138da:	8bfb      	ldrh	r3, [r7, #30]
 80138dc:	4413      	add	r3, r2
 80138de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80138e2:	e0dc      	b.n	8013a9e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	f000 80d7 	beq.w	8013a9e <tcp_write+0x47a>
 80138f0:	4b03      	ldr	r3, [pc, #12]	; (8013900 <tcp_write+0x2dc>)
 80138f2:	f240 224a 	movw	r2, #586	; 0x24a
 80138f6:	490a      	ldr	r1, [pc, #40]	; (8013920 <tcp_write+0x2fc>)
 80138f8:	4803      	ldr	r0, [pc, #12]	; (8013908 <tcp_write+0x2e4>)
 80138fa:	f004 fad7 	bl	8017eac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80138fe:	e0ce      	b.n	8013a9e <tcp_write+0x47a>
 8013900:	0801bf04 	.word	0x0801bf04
 8013904:	0801c0a4 	.word	0x0801c0a4
 8013908:	0801bf58 	.word	0x0801bf58
 801390c:	0801c0bc 	.word	0x0801c0bc
 8013910:	0801c0f0 	.word	0x0801c0f0
 8013914:	0801c108 	.word	0x0801c108
 8013918:	0801c128 	.word	0x0801c128
 801391c:	0801c148 	.word	0x0801c148
 8013920:	0801c174 	.word	0x0801c174
    struct pbuf *p;
    u16_t left = len - pos;
 8013924:	88fa      	ldrh	r2, [r7, #6]
 8013926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801392e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013932:	b29b      	uxth	r3, r3
 8013934:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013936:	1ad3      	subs	r3, r2, r3
 8013938:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801393a:	8b7a      	ldrh	r2, [r7, #26]
 801393c:	8bbb      	ldrh	r3, [r7, #28]
 801393e:	4293      	cmp	r3, r2
 8013940:	bf28      	it	cs
 8013942:	4613      	movcs	r3, r2
 8013944:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013946:	797b      	ldrb	r3, [r7, #5]
 8013948:	f003 0301 	and.w	r3, r3, #1
 801394c:	2b00      	cmp	r3, #0
 801394e:	d036      	beq.n	80139be <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013950:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013954:	b29a      	uxth	r2, r3
 8013956:	8b3b      	ldrh	r3, [r7, #24]
 8013958:	4413      	add	r3, r2
 801395a:	b299      	uxth	r1, r3
 801395c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801395e:	2b00      	cmp	r3, #0
 8013960:	bf0c      	ite	eq
 8013962:	2301      	moveq	r3, #1
 8013964:	2300      	movne	r3, #0
 8013966:	b2db      	uxtb	r3, r3
 8013968:	f107 0012 	add.w	r0, r7, #18
 801396c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801396e:	9302      	str	r3, [sp, #8]
 8013970:	797b      	ldrb	r3, [r7, #5]
 8013972:	9301      	str	r3, [sp, #4]
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	9300      	str	r3, [sp, #0]
 8013978:	4603      	mov	r3, r0
 801397a:	2036      	movs	r0, #54	; 0x36
 801397c:	f7ff fd5e 	bl	801343c <tcp_pbuf_prealloc>
 8013980:	6338      	str	r0, [r7, #48]	; 0x30
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	2b00      	cmp	r3, #0
 8013986:	f000 8178 	beq.w	8013c7a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801398c:	895b      	ldrh	r3, [r3, #10]
 801398e:	8b3a      	ldrh	r2, [r7, #24]
 8013990:	429a      	cmp	r2, r3
 8013992:	d906      	bls.n	80139a2 <tcp_write+0x37e>
 8013994:	4b8c      	ldr	r3, [pc, #560]	; (8013bc8 <tcp_write+0x5a4>)
 8013996:	f240 2266 	movw	r2, #614	; 0x266
 801399a:	498c      	ldr	r1, [pc, #560]	; (8013bcc <tcp_write+0x5a8>)
 801399c:	488c      	ldr	r0, [pc, #560]	; (8013bd0 <tcp_write+0x5ac>)
 801399e:	f004 fa85 	bl	8017eac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80139a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a4:	685a      	ldr	r2, [r3, #4]
 80139a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80139aa:	18d0      	adds	r0, r2, r3
 80139ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139b0:	68ba      	ldr	r2, [r7, #8]
 80139b2:	4413      	add	r3, r2
 80139b4:	8b3a      	ldrh	r2, [r7, #24]
 80139b6:	4619      	mov	r1, r3
 80139b8:	f004 f99e 	bl	8017cf8 <memcpy>
 80139bc:	e02f      	b.n	8013a1e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80139be:	8a7b      	ldrh	r3, [r7, #18]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d006      	beq.n	80139d2 <tcp_write+0x3ae>
 80139c4:	4b80      	ldr	r3, [pc, #512]	; (8013bc8 <tcp_write+0x5a4>)
 80139c6:	f240 2271 	movw	r2, #625	; 0x271
 80139ca:	4982      	ldr	r1, [pc, #520]	; (8013bd4 <tcp_write+0x5b0>)
 80139cc:	4880      	ldr	r0, [pc, #512]	; (8013bd0 <tcp_write+0x5ac>)
 80139ce:	f004 fa6d 	bl	8017eac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80139d2:	8b3b      	ldrh	r3, [r7, #24]
 80139d4:	2201      	movs	r2, #1
 80139d6:	4619      	mov	r1, r3
 80139d8:	2036      	movs	r0, #54	; 0x36
 80139da:	f7fa fdbb 	bl	800e554 <pbuf_alloc>
 80139de:	6178      	str	r0, [r7, #20]
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	f000 814b 	beq.w	8013c7e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80139e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139ec:	68ba      	ldr	r2, [r7, #8]
 80139ee:	441a      	add	r2, r3
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80139f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139fe:	4619      	mov	r1, r3
 8013a00:	2036      	movs	r0, #54	; 0x36
 8013a02:	f7fa fda7 	bl	800e554 <pbuf_alloc>
 8013a06:	6338      	str	r0, [r7, #48]	; 0x30
 8013a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d103      	bne.n	8013a16 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013a0e:	6978      	ldr	r0, [r7, #20]
 8013a10:	f7fb f884 	bl	800eb1c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013a14:	e136      	b.n	8013c84 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013a16:	6979      	ldr	r1, [r7, #20]
 8013a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a1a:	f7fb f941 	bl	800eca0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a20:	f7fb f904 	bl	800ec2c <pbuf_clen>
 8013a24:	4603      	mov	r3, r0
 8013a26:	461a      	mov	r2, r3
 8013a28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a2c:	4413      	add	r3, r2
 8013a2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013a32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a36:	2b09      	cmp	r3, #9
 8013a38:	d903      	bls.n	8013a42 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a3c:	f7fb f86e 	bl	800eb1c <pbuf_free>
      goto memerr;
 8013a40:	e120      	b.n	8013c84 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a4a:	441a      	add	r2, r3
 8013a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a50:	9300      	str	r3, [sp, #0]
 8013a52:	4613      	mov	r3, r2
 8013a54:	2200      	movs	r2, #0
 8013a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013a58:	68f8      	ldr	r0, [r7, #12]
 8013a5a:	f7ff fc51 	bl	8013300 <tcp_create_segment>
 8013a5e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	f000 810d 	beq.w	8013c82 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d102      	bne.n	8013a74 <tcp_write+0x450>
      queue = seg;
 8013a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a70:	647b      	str	r3, [r7, #68]	; 0x44
 8013a72:	e00c      	b.n	8013a8e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d106      	bne.n	8013a88 <tcp_write+0x464>
 8013a7a:	4b53      	ldr	r3, [pc, #332]	; (8013bc8 <tcp_write+0x5a4>)
 8013a7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013a80:	4955      	ldr	r1, [pc, #340]	; (8013bd8 <tcp_write+0x5b4>)
 8013a82:	4853      	ldr	r0, [pc, #332]	; (8013bd0 <tcp_write+0x5ac>)
 8013a84:	f004 fa12 	bl	8017eac <iprintf>
      prev_seg->next = seg;
 8013a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a8c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a90:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013a92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a96:	8b3b      	ldrh	r3, [r7, #24]
 8013a98:	4413      	add	r3, r2
 8013a9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013a9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013aa2:	88fb      	ldrh	r3, [r7, #6]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	f4ff af3d 	bcc.w	8013924 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013aaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d02c      	beq.n	8013b0a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ab6:	e01e      	b.n	8013af6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aba:	891a      	ldrh	r2, [r3, #8]
 8013abc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013abe:	4413      	add	r3, r2
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d110      	bne.n	8013af0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ad4:	8952      	ldrh	r2, [r2, #10]
 8013ad6:	4413      	add	r3, r2
 8013ad8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013ada:	68b9      	ldr	r1, [r7, #8]
 8013adc:	4618      	mov	r0, r3
 8013ade:	f004 f90b 	bl	8017cf8 <memcpy>
        p->len += oversize_used;
 8013ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae4:	895a      	ldrh	r2, [r3, #10]
 8013ae6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ae8:	4413      	add	r3, r2
 8013aea:	b29a      	uxth	r2, r3
 8013aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d1dd      	bne.n	8013ab8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013afe:	891a      	ldrh	r2, [r3, #8]
 8013b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b02:	4413      	add	r3, r2
 8013b04:	b29a      	uxth	r2, r3
 8013b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b08:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013b0a:	8a7a      	ldrh	r2, [r7, #18]
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d018      	beq.n	8013b4a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d106      	bne.n	8013b2c <tcp_write+0x508>
 8013b1e:	4b2a      	ldr	r3, [pc, #168]	; (8013bc8 <tcp_write+0x5a4>)
 8013b20:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013b24:	492d      	ldr	r1, [pc, #180]	; (8013bdc <tcp_write+0x5b8>)
 8013b26:	482a      	ldr	r0, [pc, #168]	; (8013bd0 <tcp_write+0x5ac>)
 8013b28:	f004 f9c0 	bl	8017eac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b2e:	685b      	ldr	r3, [r3, #4]
 8013b30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fb f8b4 	bl	800eca0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b3a:	891a      	ldrh	r2, [r3, #8]
 8013b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b3e:	891b      	ldrh	r3, [r3, #8]
 8013b40:	4413      	add	r3, r2
 8013b42:	b29a      	uxth	r2, r3
 8013b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b46:	811a      	strh	r2, [r3, #8]
 8013b48:	e037      	b.n	8013bba <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013b4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d034      	beq.n	8013bba <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d003      	beq.n	8013b5e <tcp_write+0x53a>
 8013b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d106      	bne.n	8013b6c <tcp_write+0x548>
 8013b5e:	4b1a      	ldr	r3, [pc, #104]	; (8013bc8 <tcp_write+0x5a4>)
 8013b60:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013b64:	491e      	ldr	r1, [pc, #120]	; (8013be0 <tcp_write+0x5bc>)
 8013b66:	481a      	ldr	r0, [pc, #104]	; (8013bd0 <tcp_write+0x5ac>)
 8013b68:	f004 f9a0 	bl	8017eac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8013b72:	e009      	b.n	8013b88 <tcp_write+0x564>
      p->tot_len += extendlen;
 8013b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b76:	891a      	ldrh	r2, [r3, #8]
 8013b78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b7a:	4413      	add	r3, r2
 8013b7c:	b29a      	uxth	r2, r3
 8013b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b80:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8013b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d1f1      	bne.n	8013b74 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b92:	891a      	ldrh	r2, [r3, #8]
 8013b94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b96:	4413      	add	r3, r2
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba0:	895a      	ldrh	r2, [r3, #10]
 8013ba2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ba4:	4413      	add	r3, r2
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013baa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bae:	891a      	ldrh	r2, [r3, #8]
 8013bb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013bb2:	4413      	add	r3, r2
 8013bb4:	b29a      	uxth	r2, r3
 8013bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bb8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d111      	bne.n	8013be4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bc4:	66da      	str	r2, [r3, #108]	; 0x6c
 8013bc6:	e010      	b.n	8013bea <tcp_write+0x5c6>
 8013bc8:	0801bf04 	.word	0x0801bf04
 8013bcc:	0801c1a4 	.word	0x0801c1a4
 8013bd0:	0801bf58 	.word	0x0801bf58
 8013bd4:	0801c1e4 	.word	0x0801c1e4
 8013bd8:	0801c1f4 	.word	0x0801c1f4
 8013bdc:	0801c208 	.word	0x0801c208
 8013be0:	0801c240 	.word	0x0801c240
  } else {
    last_unsent->next = queue;
 8013be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013be8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013bee:	88fb      	ldrh	r3, [r7, #6]
 8013bf0:	441a      	add	r2, r3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013bfc:	88fb      	ldrh	r3, [r7, #6]
 8013bfe:	1ad3      	subs	r3, r2, r3
 8013c00:	b29a      	uxth	r2, r3
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013c0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d00e      	beq.n	8013c3a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d10a      	bne.n	8013c3a <tcp_write+0x616>
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d106      	bne.n	8013c3a <tcp_write+0x616>
 8013c2c:	4b2c      	ldr	r3, [pc, #176]	; (8013ce0 <tcp_write+0x6bc>)
 8013c2e:	f240 3212 	movw	r2, #786	; 0x312
 8013c32:	492c      	ldr	r1, [pc, #176]	; (8013ce4 <tcp_write+0x6c0>)
 8013c34:	482c      	ldr	r0, [pc, #176]	; (8013ce8 <tcp_write+0x6c4>)
 8013c36:	f004 f939 	bl	8017eac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d016      	beq.n	8013c6e <tcp_write+0x64a>
 8013c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d012      	beq.n	8013c6e <tcp_write+0x64a>
 8013c48:	797b      	ldrb	r3, [r7, #5]
 8013c4a:	f003 0302 	and.w	r3, r3, #2
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d10d      	bne.n	8013c6e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c54:	68db      	ldr	r3, [r3, #12]
 8013c56:	899b      	ldrh	r3, [r3, #12]
 8013c58:	b29c      	uxth	r4, r3
 8013c5a:	2008      	movs	r0, #8
 8013c5c:	f7f9 fbcc 	bl	800d3f8 <lwip_htons>
 8013c60:	4603      	mov	r3, r0
 8013c62:	461a      	mov	r2, r3
 8013c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	4322      	orrs	r2, r4
 8013c6a:	b292      	uxth	r2, r2
 8013c6c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	e031      	b.n	8013cd6 <tcp_write+0x6b2>
          goto memerr;
 8013c72:	bf00      	nop
 8013c74:	e006      	b.n	8013c84 <tcp_write+0x660>
            goto memerr;
 8013c76:	bf00      	nop
 8013c78:	e004      	b.n	8013c84 <tcp_write+0x660>
        goto memerr;
 8013c7a:	bf00      	nop
 8013c7c:	e002      	b.n	8013c84 <tcp_write+0x660>
        goto memerr;
 8013c7e:	bf00      	nop
 8013c80:	e000      	b.n	8013c84 <tcp_write+0x660>
      goto memerr;
 8013c82:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	8b5b      	ldrh	r3, [r3, #26]
 8013c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d002      	beq.n	8013c9e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013c98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013c9a:	f7fa ff3f 	bl	800eb1c <pbuf_free>
  }
  if (queue != NULL) {
 8013c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d002      	beq.n	8013caa <tcp_write+0x686>
    tcp_segs_free(queue);
 8013ca4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013ca6:	f7fc fb51 	bl	801034c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d00e      	beq.n	8013cd2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d10a      	bne.n	8013cd2 <tcp_write+0x6ae>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d106      	bne.n	8013cd2 <tcp_write+0x6ae>
 8013cc4:	4b06      	ldr	r3, [pc, #24]	; (8013ce0 <tcp_write+0x6bc>)
 8013cc6:	f240 3227 	movw	r2, #807	; 0x327
 8013cca:	4906      	ldr	r1, [pc, #24]	; (8013ce4 <tcp_write+0x6c0>)
 8013ccc:	4806      	ldr	r0, [pc, #24]	; (8013ce8 <tcp_write+0x6c4>)
 8013cce:	f004 f8ed 	bl	8017eac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	375c      	adds	r7, #92	; 0x5c
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd90      	pop	{r4, r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	0801bf04 	.word	0x0801bf04
 8013ce4:	0801c278 	.word	0x0801c278
 8013ce8:	0801bf58 	.word	0x0801bf58

08013cec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013cec:	b590      	push	{r4, r7, lr}
 8013cee:	b08b      	sub	sp, #44	; 0x2c
 8013cf0:	af02      	add	r7, sp, #8
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	61fb      	str	r3, [r7, #28]
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013d00:	2300      	movs	r3, #0
 8013d02:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d106      	bne.n	8013d18 <tcp_split_unsent_seg+0x2c>
 8013d0a:	4b95      	ldr	r3, [pc, #596]	; (8013f60 <tcp_split_unsent_seg+0x274>)
 8013d0c:	f240 324b 	movw	r2, #843	; 0x34b
 8013d10:	4994      	ldr	r1, [pc, #592]	; (8013f64 <tcp_split_unsent_seg+0x278>)
 8013d12:	4895      	ldr	r0, [pc, #596]	; (8013f68 <tcp_split_unsent_seg+0x27c>)
 8013d14:	f004 f8ca 	bl	8017eac <iprintf>

  useg = pcb->unsent;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d1c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d102      	bne.n	8013d2a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d28:	e116      	b.n	8013f58 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013d2a:	887b      	ldrh	r3, [r7, #2]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d109      	bne.n	8013d44 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013d30:	4b8b      	ldr	r3, [pc, #556]	; (8013f60 <tcp_split_unsent_seg+0x274>)
 8013d32:	f240 3253 	movw	r2, #851	; 0x353
 8013d36:	498d      	ldr	r1, [pc, #564]	; (8013f6c <tcp_split_unsent_seg+0x280>)
 8013d38:	488b      	ldr	r0, [pc, #556]	; (8013f68 <tcp_split_unsent_seg+0x27c>)
 8013d3a:	f004 f8b7 	bl	8017eac <iprintf>
    return ERR_VAL;
 8013d3e:	f06f 0305 	mvn.w	r3, #5
 8013d42:	e109      	b.n	8013f58 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	891b      	ldrh	r3, [r3, #8]
 8013d48:	887a      	ldrh	r2, [r7, #2]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d301      	bcc.n	8013d52 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	e102      	b.n	8013f58 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d56:	887a      	ldrh	r2, [r7, #2]
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d906      	bls.n	8013d6a <tcp_split_unsent_seg+0x7e>
 8013d5c:	4b80      	ldr	r3, [pc, #512]	; (8013f60 <tcp_split_unsent_seg+0x274>)
 8013d5e:	f240 325b 	movw	r2, #859	; 0x35b
 8013d62:	4983      	ldr	r1, [pc, #524]	; (8013f70 <tcp_split_unsent_seg+0x284>)
 8013d64:	4880      	ldr	r0, [pc, #512]	; (8013f68 <tcp_split_unsent_seg+0x27c>)
 8013d66:	f004 f8a1 	bl	8017eac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013d6a:	697b      	ldr	r3, [r7, #20]
 8013d6c:	891b      	ldrh	r3, [r3, #8]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d106      	bne.n	8013d80 <tcp_split_unsent_seg+0x94>
 8013d72:	4b7b      	ldr	r3, [pc, #492]	; (8013f60 <tcp_split_unsent_seg+0x274>)
 8013d74:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013d78:	497e      	ldr	r1, [pc, #504]	; (8013f74 <tcp_split_unsent_seg+0x288>)
 8013d7a:	487b      	ldr	r0, [pc, #492]	; (8013f68 <tcp_split_unsent_seg+0x27c>)
 8013d7c:	f004 f896 	bl	8017eac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013d80:	697b      	ldr	r3, [r7, #20]
 8013d82:	7a9b      	ldrb	r3, [r3, #10]
 8013d84:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013d86:	7bfb      	ldrb	r3, [r7, #15]
 8013d88:	009b      	lsls	r3, r3, #2
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	f003 0304 	and.w	r3, r3, #4
 8013d90:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	891a      	ldrh	r2, [r3, #8]
 8013d96:	887b      	ldrh	r3, [r7, #2]
 8013d98:	1ad3      	subs	r3, r2, r3
 8013d9a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013d9c:	7bbb      	ldrb	r3, [r7, #14]
 8013d9e:	b29a      	uxth	r2, r3
 8013da0:	89bb      	ldrh	r3, [r7, #12]
 8013da2:	4413      	add	r3, r2
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013daa:	4619      	mov	r1, r3
 8013dac:	2036      	movs	r0, #54	; 0x36
 8013dae:	f7fa fbd1 	bl	800e554 <pbuf_alloc>
 8013db2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	f000 80b7 	beq.w	8013f2a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	891a      	ldrh	r2, [r3, #8]
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	891b      	ldrh	r3, [r3, #8]
 8013dc6:	1ad3      	subs	r3, r2, r3
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	887b      	ldrh	r3, [r7, #2]
 8013dcc:	4413      	add	r3, r2
 8013dce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	6858      	ldr	r0, [r3, #4]
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	685a      	ldr	r2, [r3, #4]
 8013dd8:	7bbb      	ldrb	r3, [r7, #14]
 8013dda:	18d1      	adds	r1, r2, r3
 8013ddc:	897b      	ldrh	r3, [r7, #10]
 8013dde:	89ba      	ldrh	r2, [r7, #12]
 8013de0:	f7fb f886 	bl	800eef0 <pbuf_copy_partial>
 8013de4:	4603      	mov	r3, r0
 8013de6:	461a      	mov	r2, r3
 8013de8:	89bb      	ldrh	r3, [r7, #12]
 8013dea:	4293      	cmp	r3, r2
 8013dec:	f040 809f 	bne.w	8013f2e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	68db      	ldr	r3, [r3, #12]
 8013df4:	899b      	ldrh	r3, [r3, #12]
 8013df6:	b29b      	uxth	r3, r3
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7f9 fafd 	bl	800d3f8 <lwip_htons>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e06:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013e08:	2300      	movs	r3, #0
 8013e0a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013e0c:	7efb      	ldrb	r3, [r7, #27]
 8013e0e:	f003 0308 	and.w	r3, r3, #8
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d007      	beq.n	8013e26 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013e16:	7efb      	ldrb	r3, [r7, #27]
 8013e18:	f023 0308 	bic.w	r3, r3, #8
 8013e1c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013e1e:	7ebb      	ldrb	r3, [r7, #26]
 8013e20:	f043 0308 	orr.w	r3, r3, #8
 8013e24:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013e26:	7efb      	ldrb	r3, [r7, #27]
 8013e28:	f003 0301 	and.w	r3, r3, #1
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d007      	beq.n	8013e40 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013e30:	7efb      	ldrb	r3, [r7, #27]
 8013e32:	f023 0301 	bic.w	r3, r3, #1
 8013e36:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013e38:	7ebb      	ldrb	r3, [r7, #26]
 8013e3a:	f043 0301 	orr.w	r3, r3, #1
 8013e3e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7f9 faeb 	bl	800d422 <lwip_htonl>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	887b      	ldrh	r3, [r7, #2]
 8013e50:	18d1      	adds	r1, r2, r3
 8013e52:	7eba      	ldrb	r2, [r7, #26]
 8013e54:	7bfb      	ldrb	r3, [r7, #15]
 8013e56:	9300      	str	r3, [sp, #0]
 8013e58:	460b      	mov	r3, r1
 8013e5a:	6939      	ldr	r1, [r7, #16]
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7ff fa4f 	bl	8013300 <tcp_create_segment>
 8013e62:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d063      	beq.n	8013f32 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7fa fedc 	bl	800ec2c <pbuf_clen>
 8013e74:	4603      	mov	r3, r0
 8013e76:	461a      	mov	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e7e:	1a9b      	subs	r3, r3, r2
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	6858      	ldr	r0, [r3, #4]
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	891a      	ldrh	r2, [r3, #8]
 8013e92:	89bb      	ldrh	r3, [r7, #12]
 8013e94:	1ad3      	subs	r3, r2, r3
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	4619      	mov	r1, r3
 8013e9a:	f7fa fcb9 	bl	800e810 <pbuf_realloc>
  useg->len -= remainder;
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	891a      	ldrh	r2, [r3, #8]
 8013ea2:	89bb      	ldrh	r3, [r7, #12]
 8013ea4:	1ad3      	subs	r3, r2, r3
 8013ea6:	b29a      	uxth	r2, r3
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	899b      	ldrh	r3, [r3, #12]
 8013eb2:	b29c      	uxth	r4, r3
 8013eb4:	7efb      	ldrb	r3, [r7, #27]
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f9 fa9d 	bl	800d3f8 <lwip_htons>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	68db      	ldr	r3, [r3, #12]
 8013ec6:	4322      	orrs	r2, r4
 8013ec8:	b292      	uxth	r2, r2
 8013eca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7fa feab 	bl	800ec2c <pbuf_clen>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	461a      	mov	r2, r3
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ee0:	4413      	add	r3, r2
 8013ee2:	b29a      	uxth	r2, r3
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013eea:	69fb      	ldr	r3, [r7, #28]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7fa fe9c 	bl	800ec2c <pbuf_clen>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013efe:	4413      	add	r3, r2
 8013f00:	b29a      	uxth	r2, r3
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	69fb      	ldr	r3, [r7, #28]
 8013f0e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	69fa      	ldr	r2, [r7, #28]
 8013f14:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013f16:	69fb      	ldr	r3, [r7, #28]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d103      	bne.n	8013f26 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2200      	movs	r2, #0
 8013f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013f26:	2300      	movs	r3, #0
 8013f28:	e016      	b.n	8013f58 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013f2a:	bf00      	nop
 8013f2c:	e002      	b.n	8013f34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013f2e:	bf00      	nop
 8013f30:	e000      	b.n	8013f34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013f32:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013f34:	69fb      	ldr	r3, [r7, #28]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d006      	beq.n	8013f48 <tcp_split_unsent_seg+0x25c>
 8013f3a:	4b09      	ldr	r3, [pc, #36]	; (8013f60 <tcp_split_unsent_seg+0x274>)
 8013f3c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013f40:	490d      	ldr	r1, [pc, #52]	; (8013f78 <tcp_split_unsent_seg+0x28c>)
 8013f42:	4809      	ldr	r0, [pc, #36]	; (8013f68 <tcp_split_unsent_seg+0x27c>)
 8013f44:	f003 ffb2 	bl	8017eac <iprintf>
  if (p != NULL) {
 8013f48:	693b      	ldr	r3, [r7, #16]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d002      	beq.n	8013f54 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013f4e:	6938      	ldr	r0, [r7, #16]
 8013f50:	f7fa fde4 	bl	800eb1c <pbuf_free>
  }

  return ERR_MEM;
 8013f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3724      	adds	r7, #36	; 0x24
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd90      	pop	{r4, r7, pc}
 8013f60:	0801bf04 	.word	0x0801bf04
 8013f64:	0801c298 	.word	0x0801c298
 8013f68:	0801bf58 	.word	0x0801bf58
 8013f6c:	0801c2bc 	.word	0x0801c2bc
 8013f70:	0801c2e0 	.word	0x0801c2e0
 8013f74:	0801c2f0 	.word	0x0801c2f0
 8013f78:	0801c300 	.word	0x0801c300

08013f7c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013f7c:	b590      	push	{r4, r7, lr}
 8013f7e:	b085      	sub	sp, #20
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d106      	bne.n	8013f98 <tcp_send_fin+0x1c>
 8013f8a:	4b21      	ldr	r3, [pc, #132]	; (8014010 <tcp_send_fin+0x94>)
 8013f8c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013f90:	4920      	ldr	r1, [pc, #128]	; (8014014 <tcp_send_fin+0x98>)
 8013f92:	4821      	ldr	r0, [pc, #132]	; (8014018 <tcp_send_fin+0x9c>)
 8013f94:	f003 ff8a 	bl	8017eac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d02e      	beq.n	8013ffe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fa4:	60fb      	str	r3, [r7, #12]
 8013fa6:	e002      	b.n	8013fae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d1f8      	bne.n	8013fa8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	68db      	ldr	r3, [r3, #12]
 8013fba:	899b      	ldrh	r3, [r3, #12]
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7f9 fa1a 	bl	800d3f8 <lwip_htons>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	f003 0307 	and.w	r3, r3, #7
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d116      	bne.n	8013ffe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	68db      	ldr	r3, [r3, #12]
 8013fd4:	899b      	ldrh	r3, [r3, #12]
 8013fd6:	b29c      	uxth	r4, r3
 8013fd8:	2001      	movs	r0, #1
 8013fda:	f7f9 fa0d 	bl	800d3f8 <lwip_htons>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	461a      	mov	r2, r3
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	68db      	ldr	r3, [r3, #12]
 8013fe6:	4322      	orrs	r2, r4
 8013fe8:	b292      	uxth	r2, r2
 8013fea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	8b5b      	ldrh	r3, [r3, #26]
 8013ff0:	f043 0320 	orr.w	r3, r3, #32
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	e004      	b.n	8014008 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013ffe:	2101      	movs	r1, #1
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f000 f80b 	bl	801401c <tcp_enqueue_flags>
 8014006:	4603      	mov	r3, r0
}
 8014008:	4618      	mov	r0, r3
 801400a:	3714      	adds	r7, #20
 801400c:	46bd      	mov	sp, r7
 801400e:	bd90      	pop	{r4, r7, pc}
 8014010:	0801bf04 	.word	0x0801bf04
 8014014:	0801c30c 	.word	0x0801c30c
 8014018:	0801bf58 	.word	0x0801bf58

0801401c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b08a      	sub	sp, #40	; 0x28
 8014020:	af02      	add	r7, sp, #8
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	460b      	mov	r3, r1
 8014026:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014028:	2300      	movs	r3, #0
 801402a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801402c:	2300      	movs	r3, #0
 801402e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014030:	78fb      	ldrb	r3, [r7, #3]
 8014032:	f003 0303 	and.w	r3, r3, #3
 8014036:	2b00      	cmp	r3, #0
 8014038:	d106      	bne.n	8014048 <tcp_enqueue_flags+0x2c>
 801403a:	4b67      	ldr	r3, [pc, #412]	; (80141d8 <tcp_enqueue_flags+0x1bc>)
 801403c:	f240 4211 	movw	r2, #1041	; 0x411
 8014040:	4966      	ldr	r1, [pc, #408]	; (80141dc <tcp_enqueue_flags+0x1c0>)
 8014042:	4867      	ldr	r0, [pc, #412]	; (80141e0 <tcp_enqueue_flags+0x1c4>)
 8014044:	f003 ff32 	bl	8017eac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d106      	bne.n	801405c <tcp_enqueue_flags+0x40>
 801404e:	4b62      	ldr	r3, [pc, #392]	; (80141d8 <tcp_enqueue_flags+0x1bc>)
 8014050:	f240 4213 	movw	r2, #1043	; 0x413
 8014054:	4963      	ldr	r1, [pc, #396]	; (80141e4 <tcp_enqueue_flags+0x1c8>)
 8014056:	4862      	ldr	r0, [pc, #392]	; (80141e0 <tcp_enqueue_flags+0x1c4>)
 8014058:	f003 ff28 	bl	8017eac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801405c:	78fb      	ldrb	r3, [r7, #3]
 801405e:	f003 0302 	and.w	r3, r3, #2
 8014062:	2b00      	cmp	r3, #0
 8014064:	d001      	beq.n	801406a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014066:	2301      	movs	r3, #1
 8014068:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801406a:	7ffb      	ldrb	r3, [r7, #31]
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	b2db      	uxtb	r3, r3
 8014070:	f003 0304 	and.w	r3, r3, #4
 8014074:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014076:	7dfb      	ldrb	r3, [r7, #23]
 8014078:	b29b      	uxth	r3, r3
 801407a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801407e:	4619      	mov	r1, r3
 8014080:	2036      	movs	r0, #54	; 0x36
 8014082:	f7fa fa67 	bl	800e554 <pbuf_alloc>
 8014086:	6138      	str	r0, [r7, #16]
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d109      	bne.n	80140a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	8b5b      	ldrh	r3, [r3, #26]
 8014092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014096:	b29a      	uxth	r2, r3
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801409c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140a0:	e095      	b.n	80141ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	895a      	ldrh	r2, [r3, #10]
 80140a6:	7dfb      	ldrb	r3, [r7, #23]
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d206      	bcs.n	80140bc <tcp_enqueue_flags+0xa0>
 80140ae:	4b4a      	ldr	r3, [pc, #296]	; (80141d8 <tcp_enqueue_flags+0x1bc>)
 80140b0:	f240 4239 	movw	r2, #1081	; 0x439
 80140b4:	494c      	ldr	r1, [pc, #304]	; (80141e8 <tcp_enqueue_flags+0x1cc>)
 80140b6:	484a      	ldr	r0, [pc, #296]	; (80141e0 <tcp_enqueue_flags+0x1c4>)
 80140b8:	f003 fef8 	bl	8017eac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80140c0:	78fa      	ldrb	r2, [r7, #3]
 80140c2:	7ffb      	ldrb	r3, [r7, #31]
 80140c4:	9300      	str	r3, [sp, #0]
 80140c6:	460b      	mov	r3, r1
 80140c8:	6939      	ldr	r1, [r7, #16]
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f7ff f918 	bl	8013300 <tcp_create_segment>
 80140d0:	60f8      	str	r0, [r7, #12]
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d109      	bne.n	80140ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	8b5b      	ldrh	r3, [r3, #26]
 80140dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80140e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140ea:	e070      	b.n	80141ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	68db      	ldr	r3, [r3, #12]
 80140f0:	f003 0303 	and.w	r3, r3, #3
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d006      	beq.n	8014106 <tcp_enqueue_flags+0xea>
 80140f8:	4b37      	ldr	r3, [pc, #220]	; (80141d8 <tcp_enqueue_flags+0x1bc>)
 80140fa:	f240 4242 	movw	r2, #1090	; 0x442
 80140fe:	493b      	ldr	r1, [pc, #236]	; (80141ec <tcp_enqueue_flags+0x1d0>)
 8014100:	4837      	ldr	r0, [pc, #220]	; (80141e0 <tcp_enqueue_flags+0x1c4>)
 8014102:	f003 fed3 	bl	8017eac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	891b      	ldrh	r3, [r3, #8]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d006      	beq.n	801411c <tcp_enqueue_flags+0x100>
 801410e:	4b32      	ldr	r3, [pc, #200]	; (80141d8 <tcp_enqueue_flags+0x1bc>)
 8014110:	f240 4243 	movw	r2, #1091	; 0x443
 8014114:	4936      	ldr	r1, [pc, #216]	; (80141f0 <tcp_enqueue_flags+0x1d4>)
 8014116:	4832      	ldr	r0, [pc, #200]	; (80141e0 <tcp_enqueue_flags+0x1c4>)
 8014118:	f003 fec8 	bl	8017eac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014120:	2b00      	cmp	r3, #0
 8014122:	d103      	bne.n	801412c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	68fa      	ldr	r2, [r7, #12]
 8014128:	66da      	str	r2, [r3, #108]	; 0x6c
 801412a:	e00d      	b.n	8014148 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014130:	61bb      	str	r3, [r7, #24]
 8014132:	e002      	b.n	801413a <tcp_enqueue_flags+0x11e>
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	61bb      	str	r3, [r7, #24]
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d1f8      	bne.n	8014134 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	68fa      	ldr	r2, [r7, #12]
 8014146:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2200      	movs	r2, #0
 801414c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014150:	78fb      	ldrb	r3, [r7, #3]
 8014152:	f003 0302 	and.w	r3, r3, #2
 8014156:	2b00      	cmp	r3, #0
 8014158:	d104      	bne.n	8014164 <tcp_enqueue_flags+0x148>
 801415a:	78fb      	ldrb	r3, [r7, #3]
 801415c:	f003 0301 	and.w	r3, r3, #1
 8014160:	2b00      	cmp	r3, #0
 8014162:	d004      	beq.n	801416e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014168:	1c5a      	adds	r2, r3, #1
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801416e:	78fb      	ldrb	r3, [r7, #3]
 8014170:	f003 0301 	and.w	r3, r3, #1
 8014174:	2b00      	cmp	r3, #0
 8014176:	d006      	beq.n	8014186 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	8b5b      	ldrh	r3, [r3, #26]
 801417c:	f043 0320 	orr.w	r3, r3, #32
 8014180:	b29a      	uxth	r2, r3
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	4618      	mov	r0, r3
 801418c:	f7fa fd4e 	bl	800ec2c <pbuf_clen>
 8014190:	4603      	mov	r3, r0
 8014192:	461a      	mov	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801419a:	4413      	add	r3, r2
 801419c:	b29a      	uxth	r2, r3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d00e      	beq.n	80141cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d10a      	bne.n	80141cc <tcp_enqueue_flags+0x1b0>
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d106      	bne.n	80141cc <tcp_enqueue_flags+0x1b0>
 80141be:	4b06      	ldr	r3, [pc, #24]	; (80141d8 <tcp_enqueue_flags+0x1bc>)
 80141c0:	f240 4265 	movw	r2, #1125	; 0x465
 80141c4:	490b      	ldr	r1, [pc, #44]	; (80141f4 <tcp_enqueue_flags+0x1d8>)
 80141c6:	4806      	ldr	r0, [pc, #24]	; (80141e0 <tcp_enqueue_flags+0x1c4>)
 80141c8:	f003 fe70 	bl	8017eac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80141cc:	2300      	movs	r3, #0
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3720      	adds	r7, #32
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	0801bf04 	.word	0x0801bf04
 80141dc:	0801c328 	.word	0x0801c328
 80141e0:	0801bf58 	.word	0x0801bf58
 80141e4:	0801c380 	.word	0x0801c380
 80141e8:	0801c3a0 	.word	0x0801c3a0
 80141ec:	0801c3dc 	.word	0x0801c3dc
 80141f0:	0801c3f4 	.word	0x0801c3f4
 80141f4:	0801c420 	.word	0x0801c420

080141f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80141f8:	b5b0      	push	{r4, r5, r7, lr}
 80141fa:	b08a      	sub	sp, #40	; 0x28
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d106      	bne.n	8014214 <tcp_output+0x1c>
 8014206:	4b9e      	ldr	r3, [pc, #632]	; (8014480 <tcp_output+0x288>)
 8014208:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801420c:	499d      	ldr	r1, [pc, #628]	; (8014484 <tcp_output+0x28c>)
 801420e:	489e      	ldr	r0, [pc, #632]	; (8014488 <tcp_output+0x290>)
 8014210:	f003 fe4c 	bl	8017eac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	7d1b      	ldrb	r3, [r3, #20]
 8014218:	2b01      	cmp	r3, #1
 801421a:	d106      	bne.n	801422a <tcp_output+0x32>
 801421c:	4b98      	ldr	r3, [pc, #608]	; (8014480 <tcp_output+0x288>)
 801421e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014222:	499a      	ldr	r1, [pc, #616]	; (801448c <tcp_output+0x294>)
 8014224:	4898      	ldr	r0, [pc, #608]	; (8014488 <tcp_output+0x290>)
 8014226:	f003 fe41 	bl	8017eac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801422a:	4b99      	ldr	r3, [pc, #612]	; (8014490 <tcp_output+0x298>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	687a      	ldr	r2, [r7, #4]
 8014230:	429a      	cmp	r2, r3
 8014232:	d101      	bne.n	8014238 <tcp_output+0x40>
    return ERR_OK;
 8014234:	2300      	movs	r3, #0
 8014236:	e1ce      	b.n	80145d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014244:	4293      	cmp	r3, r2
 8014246:	bf28      	it	cs
 8014248:	4613      	movcs	r3, r2
 801424a:	b29b      	uxth	r3, r3
 801424c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014252:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	2b00      	cmp	r3, #0
 8014258:	d10b      	bne.n	8014272 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	8b5b      	ldrh	r3, [r3, #26]
 801425e:	f003 0302 	and.w	r3, r3, #2
 8014262:	2b00      	cmp	r3, #0
 8014264:	f000 81aa 	beq.w	80145bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f000 fdcb 	bl	8014e04 <tcp_send_empty_ack>
 801426e:	4603      	mov	r3, r0
 8014270:	e1b1      	b.n	80145d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014272:	6879      	ldr	r1, [r7, #4]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	3304      	adds	r3, #4
 8014278:	461a      	mov	r2, r3
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f7ff f824 	bl	80132c8 <tcp_route>
 8014280:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d102      	bne.n	801428e <tcp_output+0x96>
    return ERR_RTE;
 8014288:	f06f 0303 	mvn.w	r3, #3
 801428c:	e1a3      	b.n	80145d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d003      	beq.n	801429c <tcp_output+0xa4>
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d111      	bne.n	80142c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d002      	beq.n	80142a8 <tcp_output+0xb0>
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	3304      	adds	r3, #4
 80142a6:	e000      	b.n	80142aa <tcp_output+0xb2>
 80142a8:	2300      	movs	r3, #0
 80142aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d102      	bne.n	80142b8 <tcp_output+0xc0>
      return ERR_RTE;
 80142b2:	f06f 0303 	mvn.w	r3, #3
 80142b6:	e18e      	b.n	80145d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	681a      	ldr	r2, [r3, #0]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80142c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7f9 f8ab 	bl	800d422 <lwip_htonl>
 80142cc:	4602      	mov	r2, r0
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142d6:	8912      	ldrh	r2, [r2, #8]
 80142d8:	4413      	add	r3, r2
 80142da:	69ba      	ldr	r2, [r7, #24]
 80142dc:	429a      	cmp	r2, r3
 80142de:	d227      	bcs.n	8014330 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80142e6:	461a      	mov	r2, r3
 80142e8:	69bb      	ldr	r3, [r7, #24]
 80142ea:	4293      	cmp	r3, r2
 80142ec:	d114      	bne.n	8014318 <tcp_output+0x120>
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d110      	bne.n	8014318 <tcp_output+0x120>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d10b      	bne.n	8014318 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2201      	movs	r2, #1
 801430c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2200      	movs	r2, #0
 8014314:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	8b5b      	ldrh	r3, [r3, #26]
 801431c:	f003 0302 	and.w	r3, r3, #2
 8014320:	2b00      	cmp	r3, #0
 8014322:	f000 814d 	beq.w	80145c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f000 fd6c 	bl	8014e04 <tcp_send_empty_ack>
 801432c:	4603      	mov	r3, r0
 801432e:	e152      	b.n	80145d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2200      	movs	r2, #0
 8014334:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801433c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801433e:	6a3b      	ldr	r3, [r7, #32]
 8014340:	2b00      	cmp	r3, #0
 8014342:	f000 811c 	beq.w	801457e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014346:	e002      	b.n	801434e <tcp_output+0x156>
 8014348:	6a3b      	ldr	r3, [r7, #32]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	623b      	str	r3, [r7, #32]
 801434e:	6a3b      	ldr	r3, [r7, #32]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1f8      	bne.n	8014348 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014356:	e112      	b.n	801457e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435a:	68db      	ldr	r3, [r3, #12]
 801435c:	899b      	ldrh	r3, [r3, #12]
 801435e:	b29b      	uxth	r3, r3
 8014360:	4618      	mov	r0, r3
 8014362:	f7f9 f849 	bl	800d3f8 <lwip_htons>
 8014366:	4603      	mov	r3, r0
 8014368:	b2db      	uxtb	r3, r3
 801436a:	f003 0304 	and.w	r3, r3, #4
 801436e:	2b00      	cmp	r3, #0
 8014370:	d006      	beq.n	8014380 <tcp_output+0x188>
 8014372:	4b43      	ldr	r3, [pc, #268]	; (8014480 <tcp_output+0x288>)
 8014374:	f240 5236 	movw	r2, #1334	; 0x536
 8014378:	4946      	ldr	r1, [pc, #280]	; (8014494 <tcp_output+0x29c>)
 801437a:	4843      	ldr	r0, [pc, #268]	; (8014488 <tcp_output+0x290>)
 801437c:	f003 fd96 	bl	8017eac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014384:	2b00      	cmp	r3, #0
 8014386:	d01f      	beq.n	80143c8 <tcp_output+0x1d0>
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	8b5b      	ldrh	r3, [r3, #26]
 801438c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014390:	2b00      	cmp	r3, #0
 8014392:	d119      	bne.n	80143c8 <tcp_output+0x1d0>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014398:	2b00      	cmp	r3, #0
 801439a:	d00b      	beq.n	80143b4 <tcp_output+0x1bc>
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d110      	bne.n	80143c8 <tcp_output+0x1d0>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143aa:	891a      	ldrh	r2, [r3, #8]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d209      	bcs.n	80143c8 <tcp_output+0x1d0>
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d004      	beq.n	80143c8 <tcp_output+0x1d0>
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80143c4:	2b08      	cmp	r3, #8
 80143c6:	d901      	bls.n	80143cc <tcp_output+0x1d4>
 80143c8:	2301      	movs	r3, #1
 80143ca:	e000      	b.n	80143ce <tcp_output+0x1d6>
 80143cc:	2300      	movs	r3, #0
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d106      	bne.n	80143e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	8b5b      	ldrh	r3, [r3, #26]
 80143d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80143da:	2b00      	cmp	r3, #0
 80143dc:	f000 80e4 	beq.w	80145a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	7d1b      	ldrb	r3, [r3, #20]
 80143e4:	2b02      	cmp	r3, #2
 80143e6:	d00d      	beq.n	8014404 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80143e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ea:	68db      	ldr	r3, [r3, #12]
 80143ec:	899b      	ldrh	r3, [r3, #12]
 80143ee:	b29c      	uxth	r4, r3
 80143f0:	2010      	movs	r0, #16
 80143f2:	f7f9 f801 	bl	800d3f8 <lwip_htons>
 80143f6:	4603      	mov	r3, r0
 80143f8:	461a      	mov	r2, r3
 80143fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fc:	68db      	ldr	r3, [r3, #12]
 80143fe:	4322      	orrs	r2, r4
 8014400:	b292      	uxth	r2, r2
 8014402:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014404:	697a      	ldr	r2, [r7, #20]
 8014406:	6879      	ldr	r1, [r7, #4]
 8014408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801440a:	f000 f909 	bl	8014620 <tcp_output_segment>
 801440e:	4603      	mov	r3, r0
 8014410:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d009      	beq.n	801442e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	8b5b      	ldrh	r3, [r3, #26]
 801441e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014422:	b29a      	uxth	r2, r3
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	835a      	strh	r2, [r3, #26]
      return err;
 8014428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801442c:	e0d3      	b.n	80145d6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014430:	681a      	ldr	r2, [r3, #0]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	7d1b      	ldrb	r3, [r3, #20]
 801443a:	2b02      	cmp	r3, #2
 801443c:	d006      	beq.n	801444c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	8b5b      	ldrh	r3, [r3, #26]
 8014442:	f023 0303 	bic.w	r3, r3, #3
 8014446:	b29a      	uxth	r2, r3
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444e:	68db      	ldr	r3, [r3, #12]
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	4618      	mov	r0, r3
 8014454:	f7f8 ffe5 	bl	800d422 <lwip_htonl>
 8014458:	4604      	mov	r4, r0
 801445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445c:	891b      	ldrh	r3, [r3, #8]
 801445e:	461d      	mov	r5, r3
 8014460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014462:	68db      	ldr	r3, [r3, #12]
 8014464:	899b      	ldrh	r3, [r3, #12]
 8014466:	b29b      	uxth	r3, r3
 8014468:	4618      	mov	r0, r3
 801446a:	f7f8 ffc5 	bl	800d3f8 <lwip_htons>
 801446e:	4603      	mov	r3, r0
 8014470:	b2db      	uxtb	r3, r3
 8014472:	f003 0303 	and.w	r3, r3, #3
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00e      	beq.n	8014498 <tcp_output+0x2a0>
 801447a:	2301      	movs	r3, #1
 801447c:	e00d      	b.n	801449a <tcp_output+0x2a2>
 801447e:	bf00      	nop
 8014480:	0801bf04 	.word	0x0801bf04
 8014484:	0801c448 	.word	0x0801c448
 8014488:	0801bf58 	.word	0x0801bf58
 801448c:	0801c460 	.word	0x0801c460
 8014490:	2000fb24 	.word	0x2000fb24
 8014494:	0801c488 	.word	0x0801c488
 8014498:	2300      	movs	r3, #0
 801449a:	442b      	add	r3, r5
 801449c:	4423      	add	r3, r4
 801449e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	1ad3      	subs	r3, r2, r3
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	da02      	bge.n	80144b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	68ba      	ldr	r2, [r7, #8]
 80144b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80144b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b4:	891b      	ldrh	r3, [r3, #8]
 80144b6:	461c      	mov	r4, r3
 80144b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ba:	68db      	ldr	r3, [r3, #12]
 80144bc:	899b      	ldrh	r3, [r3, #12]
 80144be:	b29b      	uxth	r3, r3
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f8 ff99 	bl	800d3f8 <lwip_htons>
 80144c6:	4603      	mov	r3, r0
 80144c8:	b2db      	uxtb	r3, r3
 80144ca:	f003 0303 	and.w	r3, r3, #3
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d001      	beq.n	80144d6 <tcp_output+0x2de>
 80144d2:	2301      	movs	r3, #1
 80144d4:	e000      	b.n	80144d8 <tcp_output+0x2e0>
 80144d6:	2300      	movs	r3, #0
 80144d8:	4423      	add	r3, r4
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d049      	beq.n	8014572 <tcp_output+0x37a>
      seg->next = NULL;
 80144de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e0:	2200      	movs	r2, #0
 80144e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d105      	bne.n	80144f8 <tcp_output+0x300>
        pcb->unacked = seg;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80144f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f4:	623b      	str	r3, [r7, #32]
 80144f6:	e03f      	b.n	8014578 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80144f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fa:	68db      	ldr	r3, [r3, #12]
 80144fc:	685b      	ldr	r3, [r3, #4]
 80144fe:	4618      	mov	r0, r3
 8014500:	f7f8 ff8f 	bl	800d422 <lwip_htonl>
 8014504:	4604      	mov	r4, r0
 8014506:	6a3b      	ldr	r3, [r7, #32]
 8014508:	68db      	ldr	r3, [r3, #12]
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	4618      	mov	r0, r3
 801450e:	f7f8 ff88 	bl	800d422 <lwip_htonl>
 8014512:	4603      	mov	r3, r0
 8014514:	1ae3      	subs	r3, r4, r3
 8014516:	2b00      	cmp	r3, #0
 8014518:	da24      	bge.n	8014564 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	3370      	adds	r3, #112	; 0x70
 801451e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014520:	e002      	b.n	8014528 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014522:	69fb      	ldr	r3, [r7, #28]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d011      	beq.n	8014554 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014530:	69fb      	ldr	r3, [r7, #28]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	4618      	mov	r0, r3
 801453a:	f7f8 ff72 	bl	800d422 <lwip_htonl>
 801453e:	4604      	mov	r4, r0
 8014540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014542:	68db      	ldr	r3, [r3, #12]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	4618      	mov	r0, r3
 8014548:	f7f8 ff6b 	bl	800d422 <lwip_htonl>
 801454c:	4603      	mov	r3, r0
 801454e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014550:	2b00      	cmp	r3, #0
 8014552:	dbe6      	blt.n	8014522 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014554:	69fb      	ldr	r3, [r7, #28]
 8014556:	681a      	ldr	r2, [r3, #0]
 8014558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014560:	601a      	str	r2, [r3, #0]
 8014562:	e009      	b.n	8014578 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014564:	6a3b      	ldr	r3, [r7, #32]
 8014566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014568:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801456a:	6a3b      	ldr	r3, [r7, #32]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	623b      	str	r3, [r7, #32]
 8014570:	e002      	b.n	8014578 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014574:	f7fb feff 	bl	8010376 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801457c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014580:	2b00      	cmp	r3, #0
 8014582:	d012      	beq.n	80145aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014586:	68db      	ldr	r3, [r3, #12]
 8014588:	685b      	ldr	r3, [r3, #4]
 801458a:	4618      	mov	r0, r3
 801458c:	f7f8 ff49 	bl	800d422 <lwip_htonl>
 8014590:	4602      	mov	r2, r0
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014596:	1ad3      	subs	r3, r2, r3
 8014598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801459a:	8912      	ldrh	r2, [r2, #8]
 801459c:	4413      	add	r3, r2
  while (seg != NULL &&
 801459e:	69ba      	ldr	r2, [r7, #24]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	f4bf aed9 	bcs.w	8014358 <tcp_output+0x160>
 80145a6:	e000      	b.n	80145aa <tcp_output+0x3b2>
      break;
 80145a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d108      	bne.n	80145c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2200      	movs	r2, #0
 80145b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80145ba:	e004      	b.n	80145c6 <tcp_output+0x3ce>
    goto output_done;
 80145bc:	bf00      	nop
 80145be:	e002      	b.n	80145c6 <tcp_output+0x3ce>
    goto output_done;
 80145c0:	bf00      	nop
 80145c2:	e000      	b.n	80145c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80145c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	8b5b      	ldrh	r3, [r3, #26]
 80145ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80145ce:	b29a      	uxth	r2, r3
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80145d4:	2300      	movs	r3, #0
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3728      	adds	r7, #40	; 0x28
 80145da:	46bd      	mov	sp, r7
 80145dc:	bdb0      	pop	{r4, r5, r7, pc}
 80145de:	bf00      	nop

080145e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d106      	bne.n	80145fc <tcp_output_segment_busy+0x1c>
 80145ee:	4b09      	ldr	r3, [pc, #36]	; (8014614 <tcp_output_segment_busy+0x34>)
 80145f0:	f240 529a 	movw	r2, #1434	; 0x59a
 80145f4:	4908      	ldr	r1, [pc, #32]	; (8014618 <tcp_output_segment_busy+0x38>)
 80145f6:	4809      	ldr	r0, [pc, #36]	; (801461c <tcp_output_segment_busy+0x3c>)
 80145f8:	f003 fc58 	bl	8017eac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	685b      	ldr	r3, [r3, #4]
 8014600:	7b9b      	ldrb	r3, [r3, #14]
 8014602:	2b01      	cmp	r3, #1
 8014604:	d001      	beq.n	801460a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014606:	2301      	movs	r3, #1
 8014608:	e000      	b.n	801460c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801460a:	2300      	movs	r3, #0
}
 801460c:	4618      	mov	r0, r3
 801460e:	3708      	adds	r7, #8
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}
 8014614:	0801bf04 	.word	0x0801bf04
 8014618:	0801c4a0 	.word	0x0801c4a0
 801461c:	0801bf58 	.word	0x0801bf58

08014620 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014620:	b5b0      	push	{r4, r5, r7, lr}
 8014622:	b08c      	sub	sp, #48	; 0x30
 8014624:	af04      	add	r7, sp, #16
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d106      	bne.n	8014640 <tcp_output_segment+0x20>
 8014632:	4b63      	ldr	r3, [pc, #396]	; (80147c0 <tcp_output_segment+0x1a0>)
 8014634:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014638:	4962      	ldr	r1, [pc, #392]	; (80147c4 <tcp_output_segment+0x1a4>)
 801463a:	4863      	ldr	r0, [pc, #396]	; (80147c8 <tcp_output_segment+0x1a8>)
 801463c:	f003 fc36 	bl	8017eac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d106      	bne.n	8014654 <tcp_output_segment+0x34>
 8014646:	4b5e      	ldr	r3, [pc, #376]	; (80147c0 <tcp_output_segment+0x1a0>)
 8014648:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801464c:	495f      	ldr	r1, [pc, #380]	; (80147cc <tcp_output_segment+0x1ac>)
 801464e:	485e      	ldr	r0, [pc, #376]	; (80147c8 <tcp_output_segment+0x1a8>)
 8014650:	f003 fc2c 	bl	8017eac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d106      	bne.n	8014668 <tcp_output_segment+0x48>
 801465a:	4b59      	ldr	r3, [pc, #356]	; (80147c0 <tcp_output_segment+0x1a0>)
 801465c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014660:	495b      	ldr	r1, [pc, #364]	; (80147d0 <tcp_output_segment+0x1b0>)
 8014662:	4859      	ldr	r0, [pc, #356]	; (80147c8 <tcp_output_segment+0x1a8>)
 8014664:	f003 fc22 	bl	8017eac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	f7ff ffb9 	bl	80145e0 <tcp_output_segment_busy>
 801466e:	4603      	mov	r3, r0
 8014670:	2b00      	cmp	r3, #0
 8014672:	d001      	beq.n	8014678 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014674:	2300      	movs	r3, #0
 8014676:	e09f      	b.n	80147b8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	68dc      	ldr	r4, [r3, #12]
 8014680:	4610      	mov	r0, r2
 8014682:	f7f8 fece 	bl	800d422 <lwip_htonl>
 8014686:	4603      	mov	r3, r0
 8014688:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	68dc      	ldr	r4, [r3, #12]
 8014692:	4610      	mov	r0, r2
 8014694:	f7f8 feb0 	bl	800d3f8 <lwip_htons>
 8014698:	4603      	mov	r3, r0
 801469a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146a0:	68ba      	ldr	r2, [r7, #8]
 80146a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80146a4:	441a      	add	r2, r3
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	68db      	ldr	r3, [r3, #12]
 80146ae:	3314      	adds	r3, #20
 80146b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	7a9b      	ldrb	r3, [r3, #10]
 80146b6:	f003 0301 	and.w	r3, r3, #1
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d015      	beq.n	80146ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	3304      	adds	r3, #4
 80146c2:	461a      	mov	r2, r3
 80146c4:	6879      	ldr	r1, [r7, #4]
 80146c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80146ca:	f7fc fa37 	bl	8010b3c <tcp_eff_send_mss_netif>
 80146ce:	4603      	mov	r3, r0
 80146d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80146d2:	8b7b      	ldrh	r3, [r7, #26]
 80146d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80146d8:	4618      	mov	r0, r3
 80146da:	f7f8 fea2 	bl	800d422 <lwip_htonl>
 80146de:	4602      	mov	r2, r0
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80146e4:	69fb      	ldr	r3, [r7, #28]
 80146e6:	3304      	adds	r3, #4
 80146e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	da02      	bge.n	80146fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	2200      	movs	r2, #0
 80146f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d10c      	bne.n	801471c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014702:	4b34      	ldr	r3, [pc, #208]	; (80147d4 <tcp_output_segment+0x1b4>)
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	4618      	mov	r0, r3
 8014712:	f7f8 fe86 	bl	800d422 <lwip_htonl>
 8014716:	4602      	mov	r2, r0
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	68da      	ldr	r2, [r3, #12]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	1ad3      	subs	r3, r2, r3
 8014728:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	8959      	ldrh	r1, [r3, #10]
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	8b3a      	ldrh	r2, [r7, #24]
 8014736:	1a8a      	subs	r2, r1, r2
 8014738:	b292      	uxth	r2, r2
 801473a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	8919      	ldrh	r1, [r3, #8]
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	8b3a      	ldrh	r2, [r7, #24]
 8014748:	1a8a      	subs	r2, r1, r2
 801474a:	b292      	uxth	r2, r2
 801474c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	685b      	ldr	r3, [r3, #4]
 8014752:	68fa      	ldr	r2, [r7, #12]
 8014754:	68d2      	ldr	r2, [r2, #12]
 8014756:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	68db      	ldr	r3, [r3, #12]
 801475c:	2200      	movs	r2, #0
 801475e:	741a      	strb	r2, [r3, #16]
 8014760:	2200      	movs	r2, #0
 8014762:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	68db      	ldr	r3, [r3, #12]
 8014768:	f103 0214 	add.w	r2, r3, #20
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	7a9b      	ldrb	r3, [r3, #10]
 8014770:	009b      	lsls	r3, r3, #2
 8014772:	f003 0304 	and.w	r3, r3, #4
 8014776:	4413      	add	r3, r2
 8014778:	69fa      	ldr	r2, [r7, #28]
 801477a:	429a      	cmp	r2, r3
 801477c:	d006      	beq.n	801478c <tcp_output_segment+0x16c>
 801477e:	4b10      	ldr	r3, [pc, #64]	; (80147c0 <tcp_output_segment+0x1a0>)
 8014780:	f240 621c 	movw	r2, #1564	; 0x61c
 8014784:	4914      	ldr	r1, [pc, #80]	; (80147d8 <tcp_output_segment+0x1b8>)
 8014786:	4810      	ldr	r0, [pc, #64]	; (80147c8 <tcp_output_segment+0x1a8>)
 8014788:	f003 fb90 	bl	8017eac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	6858      	ldr	r0, [r3, #4]
 8014790:	68b9      	ldr	r1, [r7, #8]
 8014792:	68bb      	ldr	r3, [r7, #8]
 8014794:	1d1c      	adds	r4, r3, #4
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	7add      	ldrb	r5, [r3, #11]
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	7a9b      	ldrb	r3, [r3, #10]
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	9202      	str	r2, [sp, #8]
 80147a2:	2206      	movs	r2, #6
 80147a4:	9201      	str	r2, [sp, #4]
 80147a6:	9300      	str	r3, [sp, #0]
 80147a8:	462b      	mov	r3, r5
 80147aa:	4622      	mov	r2, r4
 80147ac:	f002 fa36 	bl	8016c1c <ip4_output_if>
 80147b0:	4603      	mov	r3, r0
 80147b2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80147b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	3720      	adds	r7, #32
 80147bc:	46bd      	mov	sp, r7
 80147be:	bdb0      	pop	{r4, r5, r7, pc}
 80147c0:	0801bf04 	.word	0x0801bf04
 80147c4:	0801c4c8 	.word	0x0801c4c8
 80147c8:	0801bf58 	.word	0x0801bf58
 80147cc:	0801c4e8 	.word	0x0801c4e8
 80147d0:	0801c508 	.word	0x0801c508
 80147d4:	2000fb14 	.word	0x2000fb14
 80147d8:	0801c52c 	.word	0x0801c52c

080147dc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80147dc:	b5b0      	push	{r4, r5, r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d106      	bne.n	80147f8 <tcp_rexmit_rto_prepare+0x1c>
 80147ea:	4b31      	ldr	r3, [pc, #196]	; (80148b0 <tcp_rexmit_rto_prepare+0xd4>)
 80147ec:	f240 6263 	movw	r2, #1635	; 0x663
 80147f0:	4930      	ldr	r1, [pc, #192]	; (80148b4 <tcp_rexmit_rto_prepare+0xd8>)
 80147f2:	4831      	ldr	r0, [pc, #196]	; (80148b8 <tcp_rexmit_rto_prepare+0xdc>)
 80147f4:	f003 fb5a 	bl	8017eac <iprintf>

  if (pcb->unacked == NULL) {
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d102      	bne.n	8014806 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014800:	f06f 0305 	mvn.w	r3, #5
 8014804:	e050      	b.n	80148a8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801480a:	60fb      	str	r3, [r7, #12]
 801480c:	e00b      	b.n	8014826 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801480e:	68f8      	ldr	r0, [r7, #12]
 8014810:	f7ff fee6 	bl	80145e0 <tcp_output_segment_busy>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d002      	beq.n	8014820 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801481a:	f06f 0305 	mvn.w	r3, #5
 801481e:	e043      	b.n	80148a8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	60fb      	str	r3, [r7, #12]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d1ef      	bne.n	801480e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801482e:	68f8      	ldr	r0, [r7, #12]
 8014830:	f7ff fed6 	bl	80145e0 <tcp_output_segment_busy>
 8014834:	4603      	mov	r3, r0
 8014836:	2b00      	cmp	r3, #0
 8014838:	d002      	beq.n	8014840 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801483a:	f06f 0305 	mvn.w	r3, #5
 801483e:	e033      	b.n	80148a8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2200      	movs	r2, #0
 8014854:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	8b5b      	ldrh	r3, [r3, #26]
 801485a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801485e:	b29a      	uxth	r2, r3
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	68db      	ldr	r3, [r3, #12]
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	4618      	mov	r0, r3
 801486c:	f7f8 fdd9 	bl	800d422 <lwip_htonl>
 8014870:	4604      	mov	r4, r0
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	891b      	ldrh	r3, [r3, #8]
 8014876:	461d      	mov	r5, r3
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	68db      	ldr	r3, [r3, #12]
 801487c:	899b      	ldrh	r3, [r3, #12]
 801487e:	b29b      	uxth	r3, r3
 8014880:	4618      	mov	r0, r3
 8014882:	f7f8 fdb9 	bl	800d3f8 <lwip_htons>
 8014886:	4603      	mov	r3, r0
 8014888:	b2db      	uxtb	r3, r3
 801488a:	f003 0303 	and.w	r3, r3, #3
 801488e:	2b00      	cmp	r3, #0
 8014890:	d001      	beq.n	8014896 <tcp_rexmit_rto_prepare+0xba>
 8014892:	2301      	movs	r3, #1
 8014894:	e000      	b.n	8014898 <tcp_rexmit_rto_prepare+0xbc>
 8014896:	2300      	movs	r3, #0
 8014898:	442b      	add	r3, r5
 801489a:	18e2      	adds	r2, r4, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	2200      	movs	r2, #0
 80148a4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80148a6:	2300      	movs	r3, #0
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3710      	adds	r7, #16
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bdb0      	pop	{r4, r5, r7, pc}
 80148b0:	0801bf04 	.word	0x0801bf04
 80148b4:	0801c540 	.word	0x0801c540
 80148b8:	0801bf58 	.word	0x0801bf58

080148bc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d106      	bne.n	80148d8 <tcp_rexmit_rto_commit+0x1c>
 80148ca:	4b0d      	ldr	r3, [pc, #52]	; (8014900 <tcp_rexmit_rto_commit+0x44>)
 80148cc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80148d0:	490c      	ldr	r1, [pc, #48]	; (8014904 <tcp_rexmit_rto_commit+0x48>)
 80148d2:	480d      	ldr	r0, [pc, #52]	; (8014908 <tcp_rexmit_rto_commit+0x4c>)
 80148d4:	f003 faea 	bl	8017eac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148de:	2bff      	cmp	r3, #255	; 0xff
 80148e0:	d007      	beq.n	80148f2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148e8:	3301      	adds	r3, #1
 80148ea:	b2da      	uxtb	r2, r3
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f7ff fc80 	bl	80141f8 <tcp_output>
}
 80148f8:	bf00      	nop
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	0801bf04 	.word	0x0801bf04
 8014904:	0801c564 	.word	0x0801c564
 8014908:	0801bf58 	.word	0x0801bf58

0801490c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d106      	bne.n	8014928 <tcp_rexmit_rto+0x1c>
 801491a:	4b0a      	ldr	r3, [pc, #40]	; (8014944 <tcp_rexmit_rto+0x38>)
 801491c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014920:	4909      	ldr	r1, [pc, #36]	; (8014948 <tcp_rexmit_rto+0x3c>)
 8014922:	480a      	ldr	r0, [pc, #40]	; (801494c <tcp_rexmit_rto+0x40>)
 8014924:	f003 fac2 	bl	8017eac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f7ff ff57 	bl	80147dc <tcp_rexmit_rto_prepare>
 801492e:	4603      	mov	r3, r0
 8014930:	2b00      	cmp	r3, #0
 8014932:	d102      	bne.n	801493a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f7ff ffc1 	bl	80148bc <tcp_rexmit_rto_commit>
  }
}
 801493a:	bf00      	nop
 801493c:	3708      	adds	r7, #8
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop
 8014944:	0801bf04 	.word	0x0801bf04
 8014948:	0801c588 	.word	0x0801c588
 801494c:	0801bf58 	.word	0x0801bf58

08014950 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014950:	b590      	push	{r4, r7, lr}
 8014952:	b085      	sub	sp, #20
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d106      	bne.n	801496c <tcp_rexmit+0x1c>
 801495e:	4b2f      	ldr	r3, [pc, #188]	; (8014a1c <tcp_rexmit+0xcc>)
 8014960:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014964:	492e      	ldr	r1, [pc, #184]	; (8014a20 <tcp_rexmit+0xd0>)
 8014966:	482f      	ldr	r0, [pc, #188]	; (8014a24 <tcp_rexmit+0xd4>)
 8014968:	f003 faa0 	bl	8017eac <iprintf>

  if (pcb->unacked == NULL) {
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014970:	2b00      	cmp	r3, #0
 8014972:	d102      	bne.n	801497a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014974:	f06f 0305 	mvn.w	r3, #5
 8014978:	e04c      	b.n	8014a14 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801497e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014980:	68b8      	ldr	r0, [r7, #8]
 8014982:	f7ff fe2d 	bl	80145e0 <tcp_output_segment_busy>
 8014986:	4603      	mov	r3, r0
 8014988:	2b00      	cmp	r3, #0
 801498a:	d002      	beq.n	8014992 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801498c:	f06f 0305 	mvn.w	r3, #5
 8014990:	e040      	b.n	8014a14 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	681a      	ldr	r2, [r3, #0]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	336c      	adds	r3, #108	; 0x6c
 801499e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80149a0:	e002      	b.n	80149a8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d011      	beq.n	80149d4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	68db      	ldr	r3, [r3, #12]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7f8 fd32 	bl	800d422 <lwip_htonl>
 80149be:	4604      	mov	r4, r0
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7f8 fd2b 	bl	800d422 <lwip_htonl>
 80149cc:	4603      	mov	r3, r0
 80149ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	dbe6      	blt.n	80149a2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	681a      	ldr	r2, [r3, #0]
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	68ba      	ldr	r2, [r7, #8]
 80149e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d103      	bne.n	80149f2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2200      	movs	r2, #0
 80149ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80149f8:	2bff      	cmp	r3, #255	; 0xff
 80149fa:	d007      	beq.n	8014a0c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014a02:	3301      	adds	r3, #1
 8014a04:	b2da      	uxtb	r2, r3
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014a12:	2300      	movs	r3, #0
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3714      	adds	r7, #20
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd90      	pop	{r4, r7, pc}
 8014a1c:	0801bf04 	.word	0x0801bf04
 8014a20:	0801c5a4 	.word	0x0801c5a4
 8014a24:	0801bf58 	.word	0x0801bf58

08014a28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d106      	bne.n	8014a44 <tcp_rexmit_fast+0x1c>
 8014a36:	4b2a      	ldr	r3, [pc, #168]	; (8014ae0 <tcp_rexmit_fast+0xb8>)
 8014a38:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014a3c:	4929      	ldr	r1, [pc, #164]	; (8014ae4 <tcp_rexmit_fast+0xbc>)
 8014a3e:	482a      	ldr	r0, [pc, #168]	; (8014ae8 <tcp_rexmit_fast+0xc0>)
 8014a40:	f003 fa34 	bl	8017eac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d044      	beq.n	8014ad6 <tcp_rexmit_fast+0xae>
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	8b5b      	ldrh	r3, [r3, #26]
 8014a50:	f003 0304 	and.w	r3, r3, #4
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d13e      	bne.n	8014ad6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7ff ff79 	bl	8014950 <tcp_rexmit>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d138      	bne.n	8014ad6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014a70:	4293      	cmp	r3, r2
 8014a72:	bf28      	it	cs
 8014a74:	4613      	movcs	r3, r2
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	0fda      	lsrs	r2, r3, #31
 8014a7a:	4413      	add	r3, r2
 8014a7c:	105b      	asrs	r3, r3, #1
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d206      	bcs.n	8014aa6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a9c:	005b      	lsls	r3, r3, #1
 8014a9e:	b29a      	uxth	r2, r3
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	0049      	lsls	r1, r1, #1
 8014ab4:	440b      	add	r3, r1
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	4413      	add	r3, r2
 8014aba:	b29a      	uxth	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	8b5b      	ldrh	r3, [r3, #26]
 8014ac6:	f043 0304 	orr.w	r3, r3, #4
 8014aca:	b29a      	uxth	r2, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014ad6:	bf00      	nop
 8014ad8:	3708      	adds	r7, #8
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	0801bf04 	.word	0x0801bf04
 8014ae4:	0801c5bc 	.word	0x0801c5bc
 8014ae8:	0801bf58 	.word	0x0801bf58

08014aec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b086      	sub	sp, #24
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	607b      	str	r3, [r7, #4]
 8014af6:	460b      	mov	r3, r1
 8014af8:	817b      	strh	r3, [r7, #10]
 8014afa:	4613      	mov	r3, r2
 8014afc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014afe:	897a      	ldrh	r2, [r7, #10]
 8014b00:	893b      	ldrh	r3, [r7, #8]
 8014b02:	4413      	add	r3, r2
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	3314      	adds	r3, #20
 8014b08:	b29b      	uxth	r3, r3
 8014b0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b0e:	4619      	mov	r1, r3
 8014b10:	2022      	movs	r0, #34	; 0x22
 8014b12:	f7f9 fd1f 	bl	800e554 <pbuf_alloc>
 8014b16:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d04d      	beq.n	8014bba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014b1e:	897b      	ldrh	r3, [r7, #10]
 8014b20:	3313      	adds	r3, #19
 8014b22:	697a      	ldr	r2, [r7, #20]
 8014b24:	8952      	ldrh	r2, [r2, #10]
 8014b26:	4293      	cmp	r3, r2
 8014b28:	db06      	blt.n	8014b38 <tcp_output_alloc_header_common+0x4c>
 8014b2a:	4b26      	ldr	r3, [pc, #152]	; (8014bc4 <tcp_output_alloc_header_common+0xd8>)
 8014b2c:	f240 7223 	movw	r2, #1827	; 0x723
 8014b30:	4925      	ldr	r1, [pc, #148]	; (8014bc8 <tcp_output_alloc_header_common+0xdc>)
 8014b32:	4826      	ldr	r0, [pc, #152]	; (8014bcc <tcp_output_alloc_header_common+0xe0>)
 8014b34:	f003 f9ba 	bl	8017eac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014b3e:	8c3b      	ldrh	r3, [r7, #32]
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7f8 fc59 	bl	800d3f8 <lwip_htons>
 8014b46:	4603      	mov	r3, r0
 8014b48:	461a      	mov	r2, r3
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7f8 fc51 	bl	800d3f8 <lwip_htons>
 8014b56:	4603      	mov	r3, r0
 8014b58:	461a      	mov	r2, r3
 8014b5a:	693b      	ldr	r3, [r7, #16]
 8014b5c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014b64:	68f8      	ldr	r0, [r7, #12]
 8014b66:	f7f8 fc5c 	bl	800d422 <lwip_htonl>
 8014b6a:	4602      	mov	r2, r0
 8014b6c:	693b      	ldr	r3, [r7, #16]
 8014b6e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014b70:	897b      	ldrh	r3, [r7, #10]
 8014b72:	089b      	lsrs	r3, r3, #2
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	3305      	adds	r3, #5
 8014b78:	b29b      	uxth	r3, r3
 8014b7a:	031b      	lsls	r3, r3, #12
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	4313      	orrs	r3, r2
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7f8 fc35 	bl	800d3f8 <lwip_htons>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	461a      	mov	r2, r3
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014b96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f7f8 fc2d 	bl	800d3f8 <lwip_htons>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	461a      	mov	r2, r3
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	741a      	strb	r2, [r3, #16]
 8014bac:	2200      	movs	r2, #0
 8014bae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	749a      	strb	r2, [r3, #18]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014bba:	697b      	ldr	r3, [r7, #20]
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3718      	adds	r7, #24
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}
 8014bc4:	0801bf04 	.word	0x0801bf04
 8014bc8:	0801c5dc 	.word	0x0801c5dc
 8014bcc:	0801bf58 	.word	0x0801bf58

08014bd0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014bd0:	b5b0      	push	{r4, r5, r7, lr}
 8014bd2:	b08a      	sub	sp, #40	; 0x28
 8014bd4:	af04      	add	r7, sp, #16
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	607b      	str	r3, [r7, #4]
 8014bda:	460b      	mov	r3, r1
 8014bdc:	817b      	strh	r3, [r7, #10]
 8014bde:	4613      	mov	r3, r2
 8014be0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d106      	bne.n	8014bf6 <tcp_output_alloc_header+0x26>
 8014be8:	4b15      	ldr	r3, [pc, #84]	; (8014c40 <tcp_output_alloc_header+0x70>)
 8014bea:	f240 7242 	movw	r2, #1858	; 0x742
 8014bee:	4915      	ldr	r1, [pc, #84]	; (8014c44 <tcp_output_alloc_header+0x74>)
 8014bf0:	4815      	ldr	r0, [pc, #84]	; (8014c48 <tcp_output_alloc_header+0x78>)
 8014bf2:	f003 f95b 	bl	8017eac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	8adb      	ldrh	r3, [r3, #22]
 8014bfe:	68fa      	ldr	r2, [r7, #12]
 8014c00:	8b12      	ldrh	r2, [r2, #24]
 8014c02:	68f9      	ldr	r1, [r7, #12]
 8014c04:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014c06:	893d      	ldrh	r5, [r7, #8]
 8014c08:	897c      	ldrh	r4, [r7, #10]
 8014c0a:	9103      	str	r1, [sp, #12]
 8014c0c:	2110      	movs	r1, #16
 8014c0e:	9102      	str	r1, [sp, #8]
 8014c10:	9201      	str	r2, [sp, #4]
 8014c12:	9300      	str	r3, [sp, #0]
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	462a      	mov	r2, r5
 8014c18:	4621      	mov	r1, r4
 8014c1a:	f7ff ff67 	bl	8014aec <tcp_output_alloc_header_common>
 8014c1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d006      	beq.n	8014c34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c2a:	68fa      	ldr	r2, [r7, #12]
 8014c2c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014c2e:	441a      	add	r2, r3
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014c34:	697b      	ldr	r3, [r7, #20]
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3718      	adds	r7, #24
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	0801bf04 	.word	0x0801bf04
 8014c44:	0801c60c 	.word	0x0801c60c
 8014c48:	0801bf58 	.word	0x0801bf58

08014c4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b088      	sub	sp, #32
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	4611      	mov	r1, r2
 8014c58:	461a      	mov	r2, r3
 8014c5a:	460b      	mov	r3, r1
 8014c5c:	71fb      	strb	r3, [r7, #7]
 8014c5e:	4613      	mov	r3, r2
 8014c60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014c62:	2300      	movs	r3, #0
 8014c64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d106      	bne.n	8014c7a <tcp_output_fill_options+0x2e>
 8014c6c:	4b13      	ldr	r3, [pc, #76]	; (8014cbc <tcp_output_fill_options+0x70>)
 8014c6e:	f240 7256 	movw	r2, #1878	; 0x756
 8014c72:	4913      	ldr	r1, [pc, #76]	; (8014cc0 <tcp_output_fill_options+0x74>)
 8014c74:	4813      	ldr	r0, [pc, #76]	; (8014cc4 <tcp_output_fill_options+0x78>)
 8014c76:	f003 f919 	bl	8017eac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	3314      	adds	r3, #20
 8014c84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	f103 0214 	add.w	r2, r3, #20
 8014c8c:	8bfb      	ldrh	r3, [r7, #30]
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	4619      	mov	r1, r3
 8014c92:	79fb      	ldrb	r3, [r7, #7]
 8014c94:	009b      	lsls	r3, r3, #2
 8014c96:	f003 0304 	and.w	r3, r3, #4
 8014c9a:	440b      	add	r3, r1
 8014c9c:	4413      	add	r3, r2
 8014c9e:	697a      	ldr	r2, [r7, #20]
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d006      	beq.n	8014cb2 <tcp_output_fill_options+0x66>
 8014ca4:	4b05      	ldr	r3, [pc, #20]	; (8014cbc <tcp_output_fill_options+0x70>)
 8014ca6:	f240 7275 	movw	r2, #1909	; 0x775
 8014caa:	4907      	ldr	r1, [pc, #28]	; (8014cc8 <tcp_output_fill_options+0x7c>)
 8014cac:	4805      	ldr	r0, [pc, #20]	; (8014cc4 <tcp_output_fill_options+0x78>)
 8014cae:	f003 f8fd 	bl	8017eac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014cb2:	bf00      	nop
 8014cb4:	3720      	adds	r7, #32
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	0801bf04 	.word	0x0801bf04
 8014cc0:	0801c634 	.word	0x0801c634
 8014cc4:	0801bf58 	.word	0x0801bf58
 8014cc8:	0801c52c 	.word	0x0801c52c

08014ccc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b08a      	sub	sp, #40	; 0x28
 8014cd0:	af04      	add	r7, sp, #16
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	607a      	str	r2, [r7, #4]
 8014cd8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d106      	bne.n	8014cee <tcp_output_control_segment+0x22>
 8014ce0:	4b1c      	ldr	r3, [pc, #112]	; (8014d54 <tcp_output_control_segment+0x88>)
 8014ce2:	f240 7287 	movw	r2, #1927	; 0x787
 8014ce6:	491c      	ldr	r1, [pc, #112]	; (8014d58 <tcp_output_control_segment+0x8c>)
 8014ce8:	481c      	ldr	r0, [pc, #112]	; (8014d5c <tcp_output_control_segment+0x90>)
 8014cea:	f003 f8df 	bl	8017eac <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014cee:	683a      	ldr	r2, [r7, #0]
 8014cf0:	6879      	ldr	r1, [r7, #4]
 8014cf2:	68f8      	ldr	r0, [r7, #12]
 8014cf4:	f7fe fae8 	bl	80132c8 <tcp_route>
 8014cf8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d102      	bne.n	8014d06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014d00:	23fc      	movs	r3, #252	; 0xfc
 8014d02:	75fb      	strb	r3, [r7, #23]
 8014d04:	e01c      	b.n	8014d40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d006      	beq.n	8014d1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	7adb      	ldrb	r3, [r3, #11]
 8014d10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	7a9b      	ldrb	r3, [r3, #10]
 8014d16:	757b      	strb	r3, [r7, #21]
 8014d18:	e003      	b.n	8014d22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014d1a:	23ff      	movs	r3, #255	; 0xff
 8014d1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014d22:	7dba      	ldrb	r2, [r7, #22]
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	9302      	str	r3, [sp, #8]
 8014d28:	2306      	movs	r3, #6
 8014d2a:	9301      	str	r3, [sp, #4]
 8014d2c:	7d7b      	ldrb	r3, [r7, #21]
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	4613      	mov	r3, r2
 8014d32:	683a      	ldr	r2, [r7, #0]
 8014d34:	6879      	ldr	r1, [r7, #4]
 8014d36:	68b8      	ldr	r0, [r7, #8]
 8014d38:	f001 ff70 	bl	8016c1c <ip4_output_if>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014d40:	68b8      	ldr	r0, [r7, #8]
 8014d42:	f7f9 feeb 	bl	800eb1c <pbuf_free>
  return err;
 8014d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3718      	adds	r7, #24
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	0801bf04 	.word	0x0801bf04
 8014d58:	0801c65c 	.word	0x0801c65c
 8014d5c:	0801bf58 	.word	0x0801bf58

08014d60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014d60:	b590      	push	{r4, r7, lr}
 8014d62:	b08b      	sub	sp, #44	; 0x2c
 8014d64:	af04      	add	r7, sp, #16
 8014d66:	60f8      	str	r0, [r7, #12]
 8014d68:	60b9      	str	r1, [r7, #8]
 8014d6a:	607a      	str	r2, [r7, #4]
 8014d6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d106      	bne.n	8014d82 <tcp_rst+0x22>
 8014d74:	4b1f      	ldr	r3, [pc, #124]	; (8014df4 <tcp_rst+0x94>)
 8014d76:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014d7a:	491f      	ldr	r1, [pc, #124]	; (8014df8 <tcp_rst+0x98>)
 8014d7c:	481f      	ldr	r0, [pc, #124]	; (8014dfc <tcp_rst+0x9c>)
 8014d7e:	f003 f895 	bl	8017eac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d106      	bne.n	8014d96 <tcp_rst+0x36>
 8014d88:	4b1a      	ldr	r3, [pc, #104]	; (8014df4 <tcp_rst+0x94>)
 8014d8a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014d8e:	491c      	ldr	r1, [pc, #112]	; (8014e00 <tcp_rst+0xa0>)
 8014d90:	481a      	ldr	r0, [pc, #104]	; (8014dfc <tcp_rst+0x9c>)
 8014d92:	f003 f88b 	bl	8017eac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d96:	2300      	movs	r3, #0
 8014d98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014d9a:	f246 0308 	movw	r3, #24584	; 0x6008
 8014d9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014da0:	7dfb      	ldrb	r3, [r7, #23]
 8014da2:	b29c      	uxth	r4, r3
 8014da4:	68b8      	ldr	r0, [r7, #8]
 8014da6:	f7f8 fb3c 	bl	800d422 <lwip_htonl>
 8014daa:	4602      	mov	r2, r0
 8014dac:	8abb      	ldrh	r3, [r7, #20]
 8014dae:	9303      	str	r3, [sp, #12]
 8014db0:	2314      	movs	r3, #20
 8014db2:	9302      	str	r3, [sp, #8]
 8014db4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014db6:	9301      	str	r3, [sp, #4]
 8014db8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014dba:	9300      	str	r3, [sp, #0]
 8014dbc:	4613      	mov	r3, r2
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	4621      	mov	r1, r4
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f7ff fe92 	bl	8014aec <tcp_output_alloc_header_common>
 8014dc8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d00c      	beq.n	8014dea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014dd0:	7dfb      	ldrb	r3, [r7, #23]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	6939      	ldr	r1, [r7, #16]
 8014dd6:	68f8      	ldr	r0, [r7, #12]
 8014dd8:	f7ff ff38 	bl	8014c4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dde:	683a      	ldr	r2, [r7, #0]
 8014de0:	6939      	ldr	r1, [r7, #16]
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f7ff ff72 	bl	8014ccc <tcp_output_control_segment>
 8014de8:	e000      	b.n	8014dec <tcp_rst+0x8c>
    return;
 8014dea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014dec:	371c      	adds	r7, #28
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd90      	pop	{r4, r7, pc}
 8014df2:	bf00      	nop
 8014df4:	0801bf04 	.word	0x0801bf04
 8014df8:	0801c688 	.word	0x0801c688
 8014dfc:	0801bf58 	.word	0x0801bf58
 8014e00:	0801c6a4 	.word	0x0801c6a4

08014e04 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014e04:	b590      	push	{r4, r7, lr}
 8014e06:	b087      	sub	sp, #28
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014e10:	2300      	movs	r3, #0
 8014e12:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d106      	bne.n	8014e28 <tcp_send_empty_ack+0x24>
 8014e1a:	4b28      	ldr	r3, [pc, #160]	; (8014ebc <tcp_send_empty_ack+0xb8>)
 8014e1c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014e20:	4927      	ldr	r1, [pc, #156]	; (8014ec0 <tcp_send_empty_ack+0xbc>)
 8014e22:	4828      	ldr	r0, [pc, #160]	; (8014ec4 <tcp_send_empty_ack+0xc0>)
 8014e24:	f003 f842 	bl	8017eac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014e28:	7dfb      	ldrb	r3, [r7, #23]
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	b2db      	uxtb	r3, r3
 8014e2e:	f003 0304 	and.w	r3, r3, #4
 8014e32:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014e34:	7d7b      	ldrb	r3, [r7, #21]
 8014e36:	b29c      	uxth	r4, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7f8 faf0 	bl	800d422 <lwip_htonl>
 8014e42:	4603      	mov	r3, r0
 8014e44:	2200      	movs	r2, #0
 8014e46:	4621      	mov	r1, r4
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7ff fec1 	bl	8014bd0 <tcp_output_alloc_header>
 8014e4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d109      	bne.n	8014e6a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	8b5b      	ldrh	r3, [r3, #26]
 8014e5a:	f043 0303 	orr.w	r3, r3, #3
 8014e5e:	b29a      	uxth	r2, r3
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014e64:	f06f 0301 	mvn.w	r3, #1
 8014e68:	e023      	b.n	8014eb2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014e6a:	7dbb      	ldrb	r3, [r7, #22]
 8014e6c:	7dfa      	ldrb	r2, [r7, #23]
 8014e6e:	6939      	ldr	r1, [r7, #16]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7ff feeb 	bl	8014c4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	3304      	adds	r3, #4
 8014e7c:	6939      	ldr	r1, [r7, #16]
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f7ff ff24 	bl	8014ccc <tcp_output_control_segment>
 8014e84:	4603      	mov	r3, r0
 8014e86:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d007      	beq.n	8014ea0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	8b5b      	ldrh	r3, [r3, #26]
 8014e94:	f043 0303 	orr.w	r3, r3, #3
 8014e98:	b29a      	uxth	r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	835a      	strh	r2, [r3, #26]
 8014e9e:	e006      	b.n	8014eae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	8b5b      	ldrh	r3, [r3, #26]
 8014ea4:	f023 0303 	bic.w	r3, r3, #3
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	371c      	adds	r7, #28
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd90      	pop	{r4, r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	0801bf04 	.word	0x0801bf04
 8014ec0:	0801c6c0 	.word	0x0801c6c0
 8014ec4:	0801bf58 	.word	0x0801bf58

08014ec8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014ec8:	b590      	push	{r4, r7, lr}
 8014eca:	b087      	sub	sp, #28
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d106      	bne.n	8014ee8 <tcp_keepalive+0x20>
 8014eda:	4b18      	ldr	r3, [pc, #96]	; (8014f3c <tcp_keepalive+0x74>)
 8014edc:	f640 0224 	movw	r2, #2084	; 0x824
 8014ee0:	4917      	ldr	r1, [pc, #92]	; (8014f40 <tcp_keepalive+0x78>)
 8014ee2:	4818      	ldr	r0, [pc, #96]	; (8014f44 <tcp_keepalive+0x7c>)
 8014ee4:	f002 ffe2 	bl	8017eac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014ee8:	7dfb      	ldrb	r3, [r7, #23]
 8014eea:	b29c      	uxth	r4, r3
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ef0:	3b01      	subs	r3, #1
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7f8 fa95 	bl	800d422 <lwip_htonl>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	2200      	movs	r2, #0
 8014efc:	4621      	mov	r1, r4
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f7ff fe66 	bl	8014bd0 <tcp_output_alloc_header>
 8014f04:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d102      	bne.n	8014f12 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f10:	e010      	b.n	8014f34 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014f12:	7dfb      	ldrb	r3, [r7, #23]
 8014f14:	2200      	movs	r2, #0
 8014f16:	6939      	ldr	r1, [r7, #16]
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f7ff fe97 	bl	8014c4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014f1e:	687a      	ldr	r2, [r7, #4]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	3304      	adds	r3, #4
 8014f24:	6939      	ldr	r1, [r7, #16]
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f7ff fed0 	bl	8014ccc <tcp_output_control_segment>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	371c      	adds	r7, #28
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd90      	pop	{r4, r7, pc}
 8014f3c:	0801bf04 	.word	0x0801bf04
 8014f40:	0801c6e0 	.word	0x0801c6e0
 8014f44:	0801bf58 	.word	0x0801bf58

08014f48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014f48:	b590      	push	{r4, r7, lr}
 8014f4a:	b08b      	sub	sp, #44	; 0x2c
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014f50:	2300      	movs	r3, #0
 8014f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d106      	bne.n	8014f6a <tcp_zero_window_probe+0x22>
 8014f5c:	4b4c      	ldr	r3, [pc, #304]	; (8015090 <tcp_zero_window_probe+0x148>)
 8014f5e:	f640 024f 	movw	r2, #2127	; 0x84f
 8014f62:	494c      	ldr	r1, [pc, #304]	; (8015094 <tcp_zero_window_probe+0x14c>)
 8014f64:	484c      	ldr	r0, [pc, #304]	; (8015098 <tcp_zero_window_probe+0x150>)
 8014f66:	f002 ffa1 	bl	8017eac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f6e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014f70:	6a3b      	ldr	r3, [r7, #32]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d101      	bne.n	8014f7a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014f76:	2300      	movs	r3, #0
 8014f78:	e086      	b.n	8015088 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014f80:	2bff      	cmp	r3, #255	; 0xff
 8014f82:	d007      	beq.n	8014f94 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	b2da      	uxtb	r2, r3
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014f94:	6a3b      	ldr	r3, [r7, #32]
 8014f96:	68db      	ldr	r3, [r3, #12]
 8014f98:	899b      	ldrh	r3, [r3, #12]
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f7f8 fa2b 	bl	800d3f8 <lwip_htons>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	b2db      	uxtb	r3, r3
 8014fa6:	f003 0301 	and.w	r3, r3, #1
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d005      	beq.n	8014fba <tcp_zero_window_probe+0x72>
 8014fae:	6a3b      	ldr	r3, [r7, #32]
 8014fb0:	891b      	ldrh	r3, [r3, #8]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d101      	bne.n	8014fba <tcp_zero_window_probe+0x72>
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	e000      	b.n	8014fbc <tcp_zero_window_probe+0x74>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014fbe:	7ffb      	ldrb	r3, [r7, #31]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	bf0c      	ite	eq
 8014fc4:	2301      	moveq	r3, #1
 8014fc6:	2300      	movne	r3, #0
 8014fc8:	b2db      	uxtb	r3, r3
 8014fca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fd0:	b299      	uxth	r1, r3
 8014fd2:	6a3b      	ldr	r3, [r7, #32]
 8014fd4:	68db      	ldr	r3, [r3, #12]
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	8bba      	ldrh	r2, [r7, #28]
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f7ff fdf8 	bl	8014bd0 <tcp_output_alloc_header>
 8014fe0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d102      	bne.n	8014fee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fec:	e04c      	b.n	8015088 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014fee:	69bb      	ldr	r3, [r7, #24]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014ff4:	7ffb      	ldrb	r3, [r7, #31]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d011      	beq.n	801501e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	899b      	ldrh	r3, [r3, #12]
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	b21b      	sxth	r3, r3
 8015002:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015006:	b21c      	sxth	r4, r3
 8015008:	2011      	movs	r0, #17
 801500a:	f7f8 f9f5 	bl	800d3f8 <lwip_htons>
 801500e:	4603      	mov	r3, r0
 8015010:	b21b      	sxth	r3, r3
 8015012:	4323      	orrs	r3, r4
 8015014:	b21b      	sxth	r3, r3
 8015016:	b29a      	uxth	r2, r3
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	819a      	strh	r2, [r3, #12]
 801501c:	e010      	b.n	8015040 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801501e:	69bb      	ldr	r3, [r7, #24]
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	3314      	adds	r3, #20
 8015024:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015026:	6a3b      	ldr	r3, [r7, #32]
 8015028:	6858      	ldr	r0, [r3, #4]
 801502a:	6a3b      	ldr	r3, [r7, #32]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	891a      	ldrh	r2, [r3, #8]
 8015030:	6a3b      	ldr	r3, [r7, #32]
 8015032:	891b      	ldrh	r3, [r3, #8]
 8015034:	1ad3      	subs	r3, r2, r3
 8015036:	b29b      	uxth	r3, r3
 8015038:	2201      	movs	r2, #1
 801503a:	6939      	ldr	r1, [r7, #16]
 801503c:	f7f9 ff58 	bl	800eef0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015040:	6a3b      	ldr	r3, [r7, #32]
 8015042:	68db      	ldr	r3, [r3, #12]
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	4618      	mov	r0, r3
 8015048:	f7f8 f9eb 	bl	800d422 <lwip_htonl>
 801504c:	4603      	mov	r3, r0
 801504e:	3301      	adds	r3, #1
 8015050:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	1ad3      	subs	r3, r2, r3
 801505a:	2b00      	cmp	r3, #0
 801505c:	da02      	bge.n	8015064 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	68fa      	ldr	r2, [r7, #12]
 8015062:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015068:	2200      	movs	r2, #0
 801506a:	69b9      	ldr	r1, [r7, #24]
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f7ff fded 	bl	8014c4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015072:	687a      	ldr	r2, [r7, #4]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	3304      	adds	r3, #4
 8015078:	69b9      	ldr	r1, [r7, #24]
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f7ff fe26 	bl	8014ccc <tcp_output_control_segment>
 8015080:	4603      	mov	r3, r0
 8015082:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015084:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015088:	4618      	mov	r0, r3
 801508a:	372c      	adds	r7, #44	; 0x2c
 801508c:	46bd      	mov	sp, r7
 801508e:	bd90      	pop	{r4, r7, pc}
 8015090:	0801bf04 	.word	0x0801bf04
 8015094:	0801c6fc 	.word	0x0801c6fc
 8015098:	0801bf58 	.word	0x0801bf58

0801509c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80150a4:	f7fa f812 	bl	800f0cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80150a8:	4b0a      	ldr	r3, [pc, #40]	; (80150d4 <tcpip_tcp_timer+0x38>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d103      	bne.n	80150b8 <tcpip_tcp_timer+0x1c>
 80150b0:	4b09      	ldr	r3, [pc, #36]	; (80150d8 <tcpip_tcp_timer+0x3c>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d005      	beq.n	80150c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80150b8:	2200      	movs	r2, #0
 80150ba:	4908      	ldr	r1, [pc, #32]	; (80150dc <tcpip_tcp_timer+0x40>)
 80150bc:	20fa      	movs	r0, #250	; 0xfa
 80150be:	f000 f8f3 	bl	80152a8 <sys_timeout>
 80150c2:	e003      	b.n	80150cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80150c4:	4b06      	ldr	r3, [pc, #24]	; (80150e0 <tcpip_tcp_timer+0x44>)
 80150c6:	2200      	movs	r2, #0
 80150c8:	601a      	str	r2, [r3, #0]
  }
}
 80150ca:	bf00      	nop
 80150cc:	bf00      	nop
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}
 80150d4:	2000fb10 	.word	0x2000fb10
 80150d8:	2000fb20 	.word	0x2000fb20
 80150dc:	0801509d 	.word	0x0801509d
 80150e0:	20000a70 	.word	0x20000a70

080150e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80150e8:	4b0a      	ldr	r3, [pc, #40]	; (8015114 <tcp_timer_needed+0x30>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d10f      	bne.n	8015110 <tcp_timer_needed+0x2c>
 80150f0:	4b09      	ldr	r3, [pc, #36]	; (8015118 <tcp_timer_needed+0x34>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d103      	bne.n	8015100 <tcp_timer_needed+0x1c>
 80150f8:	4b08      	ldr	r3, [pc, #32]	; (801511c <tcp_timer_needed+0x38>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d007      	beq.n	8015110 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015100:	4b04      	ldr	r3, [pc, #16]	; (8015114 <tcp_timer_needed+0x30>)
 8015102:	2201      	movs	r2, #1
 8015104:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015106:	2200      	movs	r2, #0
 8015108:	4905      	ldr	r1, [pc, #20]	; (8015120 <tcp_timer_needed+0x3c>)
 801510a:	20fa      	movs	r0, #250	; 0xfa
 801510c:	f000 f8cc 	bl	80152a8 <sys_timeout>
  }
}
 8015110:	bf00      	nop
 8015112:	bd80      	pop	{r7, pc}
 8015114:	20000a70 	.word	0x20000a70
 8015118:	2000fb10 	.word	0x2000fb10
 801511c:	2000fb20 	.word	0x2000fb20
 8015120:	0801509d 	.word	0x0801509d

08015124 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b086      	sub	sp, #24
 8015128:	af00      	add	r7, sp, #0
 801512a:	60f8      	str	r0, [r7, #12]
 801512c:	60b9      	str	r1, [r7, #8]
 801512e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015130:	2006      	movs	r0, #6
 8015132:	f7f8 fe95 	bl	800de60 <memp_malloc>
 8015136:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d109      	bne.n	8015152 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d151      	bne.n	80151e8 <sys_timeout_abs+0xc4>
 8015144:	4b2a      	ldr	r3, [pc, #168]	; (80151f0 <sys_timeout_abs+0xcc>)
 8015146:	22be      	movs	r2, #190	; 0xbe
 8015148:	492a      	ldr	r1, [pc, #168]	; (80151f4 <sys_timeout_abs+0xd0>)
 801514a:	482b      	ldr	r0, [pc, #172]	; (80151f8 <sys_timeout_abs+0xd4>)
 801514c:	f002 feae 	bl	8017eac <iprintf>
    return;
 8015150:	e04a      	b.n	80151e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	2200      	movs	r2, #0
 8015156:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	68ba      	ldr	r2, [r7, #8]
 801515c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801516a:	4b24      	ldr	r3, [pc, #144]	; (80151fc <sys_timeout_abs+0xd8>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d103      	bne.n	801517a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015172:	4a22      	ldr	r2, [pc, #136]	; (80151fc <sys_timeout_abs+0xd8>)
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	6013      	str	r3, [r2, #0]
    return;
 8015178:	e037      	b.n	80151ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	685a      	ldr	r2, [r3, #4]
 801517e:	4b1f      	ldr	r3, [pc, #124]	; (80151fc <sys_timeout_abs+0xd8>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	685b      	ldr	r3, [r3, #4]
 8015184:	1ad3      	subs	r3, r2, r3
 8015186:	0fdb      	lsrs	r3, r3, #31
 8015188:	f003 0301 	and.w	r3, r3, #1
 801518c:	b2db      	uxtb	r3, r3
 801518e:	2b00      	cmp	r3, #0
 8015190:	d007      	beq.n	80151a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015192:	4b1a      	ldr	r3, [pc, #104]	; (80151fc <sys_timeout_abs+0xd8>)
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801519a:	4a18      	ldr	r2, [pc, #96]	; (80151fc <sys_timeout_abs+0xd8>)
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	6013      	str	r3, [r2, #0]
 80151a0:	e023      	b.n	80151ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80151a2:	4b16      	ldr	r3, [pc, #88]	; (80151fc <sys_timeout_abs+0xd8>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	617b      	str	r3, [r7, #20]
 80151a8:	e01a      	b.n	80151e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d00b      	beq.n	80151ca <sys_timeout_abs+0xa6>
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	685a      	ldr	r2, [r3, #4]
 80151b6:	697b      	ldr	r3, [r7, #20]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	1ad3      	subs	r3, r2, r3
 80151be:	0fdb      	lsrs	r3, r3, #31
 80151c0:	f003 0301 	and.w	r3, r3, #1
 80151c4:	b2db      	uxtb	r3, r3
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d007      	beq.n	80151da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80151d2:	697b      	ldr	r3, [r7, #20]
 80151d4:	693a      	ldr	r2, [r7, #16]
 80151d6:	601a      	str	r2, [r3, #0]
        break;
 80151d8:	e007      	b.n	80151ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80151da:	697b      	ldr	r3, [r7, #20]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	617b      	str	r3, [r7, #20]
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d1e1      	bne.n	80151aa <sys_timeout_abs+0x86>
 80151e6:	e000      	b.n	80151ea <sys_timeout_abs+0xc6>
    return;
 80151e8:	bf00      	nop
      }
    }
  }
}
 80151ea:	3718      	adds	r7, #24
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	0801c720 	.word	0x0801c720
 80151f4:	0801c754 	.word	0x0801c754
 80151f8:	0801c794 	.word	0x0801c794
 80151fc:	20000a68 	.word	0x20000a68

08015200 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b086      	sub	sp, #24
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	4798      	blx	r3

  now = sys_now();
 8015212:	f7f3 fc55 	bl	8008ac0 <sys_now>
 8015216:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	681a      	ldr	r2, [r3, #0]
 801521c:	4b0f      	ldr	r3, [pc, #60]	; (801525c <lwip_cyclic_timer+0x5c>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	4413      	add	r3, r2
 8015222:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	693b      	ldr	r3, [r7, #16]
 8015228:	1ad3      	subs	r3, r2, r3
 801522a:	0fdb      	lsrs	r3, r3, #31
 801522c:	f003 0301 	and.w	r3, r3, #1
 8015230:	b2db      	uxtb	r3, r3
 8015232:	2b00      	cmp	r3, #0
 8015234:	d009      	beq.n	801524a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	4413      	add	r3, r2
 801523e:	687a      	ldr	r2, [r7, #4]
 8015240:	4907      	ldr	r1, [pc, #28]	; (8015260 <lwip_cyclic_timer+0x60>)
 8015242:	4618      	mov	r0, r3
 8015244:	f7ff ff6e 	bl	8015124 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015248:	e004      	b.n	8015254 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	4904      	ldr	r1, [pc, #16]	; (8015260 <lwip_cyclic_timer+0x60>)
 801524e:	68f8      	ldr	r0, [r7, #12]
 8015250:	f7ff ff68 	bl	8015124 <sys_timeout_abs>
}
 8015254:	bf00      	nop
 8015256:	3718      	adds	r7, #24
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}
 801525c:	20000a6c 	.word	0x20000a6c
 8015260:	08015201 	.word	0x08015201

08015264 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801526a:	2301      	movs	r3, #1
 801526c:	607b      	str	r3, [r7, #4]
 801526e:	e00e      	b.n	801528e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015270:	4a0b      	ldr	r2, [pc, #44]	; (80152a0 <sys_timeouts_init+0x3c>)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	00db      	lsls	r3, r3, #3
 801527c:	4a08      	ldr	r2, [pc, #32]	; (80152a0 <sys_timeouts_init+0x3c>)
 801527e:	4413      	add	r3, r2
 8015280:	461a      	mov	r2, r3
 8015282:	4908      	ldr	r1, [pc, #32]	; (80152a4 <sys_timeouts_init+0x40>)
 8015284:	f000 f810 	bl	80152a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	3301      	adds	r3, #1
 801528c:	607b      	str	r3, [r7, #4]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2b02      	cmp	r3, #2
 8015292:	d9ed      	bls.n	8015270 <sys_timeouts_init+0xc>
  }
}
 8015294:	bf00      	nop
 8015296:	bf00      	nop
 8015298:	3708      	adds	r7, #8
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	080242b0 	.word	0x080242b0
 80152a4:	08015201 	.word	0x08015201

080152a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b086      	sub	sp, #24
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	60f8      	str	r0, [r7, #12]
 80152b0:	60b9      	str	r1, [r7, #8]
 80152b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152ba:	d306      	bcc.n	80152ca <sys_timeout+0x22>
 80152bc:	4b0a      	ldr	r3, [pc, #40]	; (80152e8 <sys_timeout+0x40>)
 80152be:	f240 1229 	movw	r2, #297	; 0x129
 80152c2:	490a      	ldr	r1, [pc, #40]	; (80152ec <sys_timeout+0x44>)
 80152c4:	480a      	ldr	r0, [pc, #40]	; (80152f0 <sys_timeout+0x48>)
 80152c6:	f002 fdf1 	bl	8017eac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80152ca:	f7f3 fbf9 	bl	8008ac0 <sys_now>
 80152ce:	4602      	mov	r2, r0
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	4413      	add	r3, r2
 80152d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80152d6:	687a      	ldr	r2, [r7, #4]
 80152d8:	68b9      	ldr	r1, [r7, #8]
 80152da:	6978      	ldr	r0, [r7, #20]
 80152dc:	f7ff ff22 	bl	8015124 <sys_timeout_abs>
#endif
}
 80152e0:	bf00      	nop
 80152e2:	3718      	adds	r7, #24
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}
 80152e8:	0801c720 	.word	0x0801c720
 80152ec:	0801c7bc 	.word	0x0801c7bc
 80152f0:	0801c794 	.word	0x0801c794

080152f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b084      	sub	sp, #16
 80152f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80152fa:	f7f3 fbe1 	bl	8008ac0 <sys_now>
 80152fe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8015300:	4b1a      	ldr	r3, [pc, #104]	; (801536c <sys_check_timeouts+0x78>)
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	b2db      	uxtb	r3, r3
 8015306:	2b00      	cmp	r3, #0
 8015308:	d001      	beq.n	801530e <sys_check_timeouts+0x1a>
 801530a:	f7f9 f8cd 	bl	800e4a8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801530e:	4b18      	ldr	r3, [pc, #96]	; (8015370 <sys_check_timeouts+0x7c>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d022      	beq.n	8015360 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	68fa      	ldr	r2, [r7, #12]
 8015320:	1ad3      	subs	r3, r2, r3
 8015322:	0fdb      	lsrs	r3, r3, #31
 8015324:	f003 0301 	and.w	r3, r3, #1
 8015328:	b2db      	uxtb	r3, r3
 801532a:	2b00      	cmp	r3, #0
 801532c:	d11a      	bne.n	8015364 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	4a0f      	ldr	r2, [pc, #60]	; (8015370 <sys_check_timeouts+0x7c>)
 8015334:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	689b      	ldr	r3, [r3, #8]
 801533a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	68db      	ldr	r3, [r3, #12]
 8015340:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	685b      	ldr	r3, [r3, #4]
 8015346:	4a0b      	ldr	r2, [pc, #44]	; (8015374 <sys_check_timeouts+0x80>)
 8015348:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801534a:	68b9      	ldr	r1, [r7, #8]
 801534c:	2006      	movs	r0, #6
 801534e:	f7f8 fdd3 	bl	800def8 <memp_free>
    if (handler != NULL) {
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d0d3      	beq.n	8015300 <sys_check_timeouts+0xc>
      handler(arg);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6838      	ldr	r0, [r7, #0]
 801535c:	4798      	blx	r3
  do {
 801535e:	e7cf      	b.n	8015300 <sys_check_timeouts+0xc>
      return;
 8015360:	bf00      	nop
 8015362:	e000      	b.n	8015366 <sys_check_timeouts+0x72>
      return;
 8015364:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015366:	3710      	adds	r7, #16
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	2000fb08 	.word	0x2000fb08
 8015370:	20000a68 	.word	0x20000a68
 8015374:	20000a6c 	.word	0x20000a6c

08015378 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801537c:	f002 fe24 	bl	8017fc8 <rand>
 8015380:	4603      	mov	r3, r0
 8015382:	b29b      	uxth	r3, r3
 8015384:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015388:	b29b      	uxth	r3, r3
 801538a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801538e:	b29a      	uxth	r2, r3
 8015390:	4b01      	ldr	r3, [pc, #4]	; (8015398 <udp_init+0x20>)
 8015392:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015394:	bf00      	nop
 8015396:	bd80      	pop	{r7, pc}
 8015398:	200004a8 	.word	0x200004a8

0801539c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	4613      	mov	r3, r2
 80153a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d105      	bne.n	80153bc <udp_input_local_match+0x20>
 80153b0:	4b27      	ldr	r3, [pc, #156]	; (8015450 <udp_input_local_match+0xb4>)
 80153b2:	2287      	movs	r2, #135	; 0x87
 80153b4:	4927      	ldr	r1, [pc, #156]	; (8015454 <udp_input_local_match+0xb8>)
 80153b6:	4828      	ldr	r0, [pc, #160]	; (8015458 <udp_input_local_match+0xbc>)
 80153b8:	f002 fd78 	bl	8017eac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d105      	bne.n	80153ce <udp_input_local_match+0x32>
 80153c2:	4b23      	ldr	r3, [pc, #140]	; (8015450 <udp_input_local_match+0xb4>)
 80153c4:	2288      	movs	r2, #136	; 0x88
 80153c6:	4925      	ldr	r1, [pc, #148]	; (801545c <udp_input_local_match+0xc0>)
 80153c8:	4823      	ldr	r0, [pc, #140]	; (8015458 <udp_input_local_match+0xbc>)
 80153ca:	f002 fd6f 	bl	8017eac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	7a1b      	ldrb	r3, [r3, #8]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d00b      	beq.n	80153ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	7a1a      	ldrb	r2, [r3, #8]
 80153da:	4b21      	ldr	r3, [pc, #132]	; (8015460 <udp_input_local_match+0xc4>)
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80153e2:	3301      	adds	r3, #1
 80153e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d001      	beq.n	80153ee <udp_input_local_match+0x52>
    return 0;
 80153ea:	2300      	movs	r3, #0
 80153ec:	e02b      	b.n	8015446 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80153ee:	79fb      	ldrb	r3, [r7, #7]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d018      	beq.n	8015426 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d013      	beq.n	8015422 <udp_input_local_match+0x86>
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d00f      	beq.n	8015422 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015402:	4b17      	ldr	r3, [pc, #92]	; (8015460 <udp_input_local_match+0xc4>)
 8015404:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801540a:	d00a      	beq.n	8015422 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	681a      	ldr	r2, [r3, #0]
 8015410:	4b13      	ldr	r3, [pc, #76]	; (8015460 <udp_input_local_match+0xc4>)
 8015412:	695b      	ldr	r3, [r3, #20]
 8015414:	405a      	eors	r2, r3
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	3308      	adds	r3, #8
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801541e:	2b00      	cmp	r3, #0
 8015420:	d110      	bne.n	8015444 <udp_input_local_match+0xa8>
          return 1;
 8015422:	2301      	movs	r3, #1
 8015424:	e00f      	b.n	8015446 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d009      	beq.n	8015440 <udp_input_local_match+0xa4>
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d005      	beq.n	8015440 <udp_input_local_match+0xa4>
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	4b09      	ldr	r3, [pc, #36]	; (8015460 <udp_input_local_match+0xc4>)
 801543a:	695b      	ldr	r3, [r3, #20]
 801543c:	429a      	cmp	r2, r3
 801543e:	d101      	bne.n	8015444 <udp_input_local_match+0xa8>
        return 1;
 8015440:	2301      	movs	r3, #1
 8015442:	e000      	b.n	8015446 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015444:	2300      	movs	r3, #0
}
 8015446:	4618      	mov	r0, r3
 8015448:	3710      	adds	r7, #16
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}
 801544e:	bf00      	nop
 8015450:	0801c808 	.word	0x0801c808
 8015454:	0801c838 	.word	0x0801c838
 8015458:	0801c85c 	.word	0x0801c85c
 801545c:	0801c884 	.word	0x0801c884
 8015460:	2000c5cc 	.word	0x2000c5cc

08015464 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015464:	b590      	push	{r4, r7, lr}
 8015466:	b08d      	sub	sp, #52	; 0x34
 8015468:	af02      	add	r7, sp, #8
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801546e:	2300      	movs	r3, #0
 8015470:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d105      	bne.n	8015484 <udp_input+0x20>
 8015478:	4b7c      	ldr	r3, [pc, #496]	; (801566c <udp_input+0x208>)
 801547a:	22cf      	movs	r2, #207	; 0xcf
 801547c:	497c      	ldr	r1, [pc, #496]	; (8015670 <udp_input+0x20c>)
 801547e:	487d      	ldr	r0, [pc, #500]	; (8015674 <udp_input+0x210>)
 8015480:	f002 fd14 	bl	8017eac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d105      	bne.n	8015496 <udp_input+0x32>
 801548a:	4b78      	ldr	r3, [pc, #480]	; (801566c <udp_input+0x208>)
 801548c:	22d0      	movs	r2, #208	; 0xd0
 801548e:	497a      	ldr	r1, [pc, #488]	; (8015678 <udp_input+0x214>)
 8015490:	4878      	ldr	r0, [pc, #480]	; (8015674 <udp_input+0x210>)
 8015492:	f002 fd0b 	bl	8017eac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	895b      	ldrh	r3, [r3, #10]
 801549a:	2b07      	cmp	r3, #7
 801549c:	d803      	bhi.n	80154a6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801549e:	6878      	ldr	r0, [r7, #4]
 80154a0:	f7f9 fb3c 	bl	800eb1c <pbuf_free>
    goto end;
 80154a4:	e0de      	b.n	8015664 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80154ac:	4b73      	ldr	r3, [pc, #460]	; (801567c <udp_input+0x218>)
 80154ae:	695b      	ldr	r3, [r3, #20]
 80154b0:	4a72      	ldr	r2, [pc, #456]	; (801567c <udp_input+0x218>)
 80154b2:	6812      	ldr	r2, [r2, #0]
 80154b4:	4611      	mov	r1, r2
 80154b6:	4618      	mov	r0, r3
 80154b8:	f001 fc88 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 80154bc:	4603      	mov	r3, r0
 80154be:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	881b      	ldrh	r3, [r3, #0]
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	4618      	mov	r0, r3
 80154c8:	f7f7 ff96 	bl	800d3f8 <lwip_htons>
 80154cc:	4603      	mov	r3, r0
 80154ce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	885b      	ldrh	r3, [r3, #2]
 80154d4:	b29b      	uxth	r3, r3
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7f7 ff8e 	bl	800d3f8 <lwip_htons>
 80154dc:	4603      	mov	r3, r0
 80154de:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80154e0:	2300      	movs	r3, #0
 80154e2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80154e4:	2300      	movs	r3, #0
 80154e6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80154e8:	2300      	movs	r3, #0
 80154ea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80154ec:	4b64      	ldr	r3, [pc, #400]	; (8015680 <udp_input+0x21c>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	627b      	str	r3, [r7, #36]	; 0x24
 80154f2:	e054      	b.n	801559e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80154f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f6:	8a5b      	ldrh	r3, [r3, #18]
 80154f8:	89fa      	ldrh	r2, [r7, #14]
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d14a      	bne.n	8015594 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80154fe:	7cfb      	ldrb	r3, [r7, #19]
 8015500:	461a      	mov	r2, r3
 8015502:	6839      	ldr	r1, [r7, #0]
 8015504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015506:	f7ff ff49 	bl	801539c <udp_input_local_match>
 801550a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801550c:	2b00      	cmp	r3, #0
 801550e:	d041      	beq.n	8015594 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015512:	7c1b      	ldrb	r3, [r3, #16]
 8015514:	f003 0304 	and.w	r3, r3, #4
 8015518:	2b00      	cmp	r3, #0
 801551a:	d11d      	bne.n	8015558 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d102      	bne.n	8015528 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015524:	61fb      	str	r3, [r7, #28]
 8015526:	e017      	b.n	8015558 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015528:	7cfb      	ldrb	r3, [r7, #19]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d014      	beq.n	8015558 <udp_input+0xf4>
 801552e:	4b53      	ldr	r3, [pc, #332]	; (801567c <udp_input+0x218>)
 8015530:	695b      	ldr	r3, [r3, #20]
 8015532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015536:	d10f      	bne.n	8015558 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015538:	69fb      	ldr	r3, [r7, #28]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	3304      	adds	r3, #4
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	429a      	cmp	r2, r3
 8015544:	d008      	beq.n	8015558 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	3304      	adds	r3, #4
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	429a      	cmp	r2, r3
 8015552:	d101      	bne.n	8015558 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015556:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801555a:	8a9b      	ldrh	r3, [r3, #20]
 801555c:	8a3a      	ldrh	r2, [r7, #16]
 801555e:	429a      	cmp	r2, r3
 8015560:	d118      	bne.n	8015594 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015564:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015566:	2b00      	cmp	r3, #0
 8015568:	d005      	beq.n	8015576 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801556c:	685a      	ldr	r2, [r3, #4]
 801556e:	4b43      	ldr	r3, [pc, #268]	; (801567c <udp_input+0x218>)
 8015570:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015572:	429a      	cmp	r2, r3
 8015574:	d10e      	bne.n	8015594 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015576:	6a3b      	ldr	r3, [r7, #32]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d014      	beq.n	80155a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557e:	68da      	ldr	r2, [r3, #12]
 8015580:	6a3b      	ldr	r3, [r7, #32]
 8015582:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015584:	4b3e      	ldr	r3, [pc, #248]	; (8015680 <udp_input+0x21c>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801558a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801558c:	4a3c      	ldr	r2, [pc, #240]	; (8015680 <udp_input+0x21c>)
 801558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015590:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015592:	e008      	b.n	80155a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015596:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	627b      	str	r3, [r7, #36]	; 0x24
 801559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d1a7      	bne.n	80154f4 <udp_input+0x90>
 80155a4:	e000      	b.n	80155a8 <udp_input+0x144>
        break;
 80155a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80155a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d101      	bne.n	80155b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80155ae:	69fb      	ldr	r3, [r7, #28]
 80155b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80155b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d002      	beq.n	80155be <udp_input+0x15a>
    for_us = 1;
 80155b8:	2301      	movs	r3, #1
 80155ba:	76fb      	strb	r3, [r7, #27]
 80155bc:	e00a      	b.n	80155d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	3304      	adds	r3, #4
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	4b2d      	ldr	r3, [pc, #180]	; (801567c <udp_input+0x218>)
 80155c6:	695b      	ldr	r3, [r3, #20]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	bf0c      	ite	eq
 80155cc:	2301      	moveq	r3, #1
 80155ce:	2300      	movne	r3, #0
 80155d0:	b2db      	uxtb	r3, r3
 80155d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80155d4:	7efb      	ldrb	r3, [r7, #27]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d041      	beq.n	801565e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80155da:	2108      	movs	r1, #8
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	f7f9 fa17 	bl	800ea10 <pbuf_remove_header>
 80155e2:	4603      	mov	r3, r0
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00a      	beq.n	80155fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80155e8:	4b20      	ldr	r3, [pc, #128]	; (801566c <udp_input+0x208>)
 80155ea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80155ee:	4925      	ldr	r1, [pc, #148]	; (8015684 <udp_input+0x220>)
 80155f0:	4820      	ldr	r0, [pc, #128]	; (8015674 <udp_input+0x210>)
 80155f2:	f002 fc5b 	bl	8017eac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80155f6:	6878      	ldr	r0, [r7, #4]
 80155f8:	f7f9 fa90 	bl	800eb1c <pbuf_free>
      goto end;
 80155fc:	e032      	b.n	8015664 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80155fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015600:	2b00      	cmp	r3, #0
 8015602:	d012      	beq.n	801562a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015606:	699b      	ldr	r3, [r3, #24]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d00a      	beq.n	8015622 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560e:	699c      	ldr	r4, [r3, #24]
 8015610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015612:	69d8      	ldr	r0, [r3, #28]
 8015614:	8a3b      	ldrh	r3, [r7, #16]
 8015616:	9300      	str	r3, [sp, #0]
 8015618:	4b1b      	ldr	r3, [pc, #108]	; (8015688 <udp_input+0x224>)
 801561a:	687a      	ldr	r2, [r7, #4]
 801561c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801561e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015620:	e021      	b.n	8015666 <udp_input+0x202>
        pbuf_free(p);
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f7f9 fa7a 	bl	800eb1c <pbuf_free>
        goto end;
 8015628:	e01c      	b.n	8015664 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801562a:	7cfb      	ldrb	r3, [r7, #19]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d112      	bne.n	8015656 <udp_input+0x1f2>
 8015630:	4b12      	ldr	r3, [pc, #72]	; (801567c <udp_input+0x218>)
 8015632:	695b      	ldr	r3, [r3, #20]
 8015634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015638:	2be0      	cmp	r3, #224	; 0xe0
 801563a:	d00c      	beq.n	8015656 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801563c:	4b0f      	ldr	r3, [pc, #60]	; (801567c <udp_input+0x218>)
 801563e:	899b      	ldrh	r3, [r3, #12]
 8015640:	3308      	adds	r3, #8
 8015642:	b29b      	uxth	r3, r3
 8015644:	b21b      	sxth	r3, r3
 8015646:	4619      	mov	r1, r3
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f7f9 fa54 	bl	800eaf6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801564e:	2103      	movs	r1, #3
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f001 f89b 	bl	801678c <icmp_dest_unreach>
      pbuf_free(p);
 8015656:	6878      	ldr	r0, [r7, #4]
 8015658:	f7f9 fa60 	bl	800eb1c <pbuf_free>
  return;
 801565c:	e003      	b.n	8015666 <udp_input+0x202>
    pbuf_free(p);
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7f9 fa5c 	bl	800eb1c <pbuf_free>
  return;
 8015664:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015666:	372c      	adds	r7, #44	; 0x2c
 8015668:	46bd      	mov	sp, r7
 801566a:	bd90      	pop	{r4, r7, pc}
 801566c:	0801c808 	.word	0x0801c808
 8015670:	0801c8ac 	.word	0x0801c8ac
 8015674:	0801c85c 	.word	0x0801c85c
 8015678:	0801c8c4 	.word	0x0801c8c4
 801567c:	2000c5cc 	.word	0x2000c5cc
 8015680:	2000fb28 	.word	0x2000fb28
 8015684:	0801c8e0 	.word	0x0801c8e0
 8015688:	2000c5dc 	.word	0x2000c5dc

0801568c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801568c:	b480      	push	{r7}
 801568e:	b085      	sub	sp, #20
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d01e      	beq.n	80156da <udp_netif_ip_addr_changed+0x4e>
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d01a      	beq.n	80156da <udp_netif_ip_addr_changed+0x4e>
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d017      	beq.n	80156da <udp_netif_ip_addr_changed+0x4e>
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d013      	beq.n	80156da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80156b2:	4b0d      	ldr	r3, [pc, #52]	; (80156e8 <udp_netif_ip_addr_changed+0x5c>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	60fb      	str	r3, [r7, #12]
 80156b8:	e00c      	b.n	80156d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d103      	bne.n	80156ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	681a      	ldr	r2, [r3, #0]
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	68db      	ldr	r3, [r3, #12]
 80156d2:	60fb      	str	r3, [r7, #12]
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d1ef      	bne.n	80156ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80156da:	bf00      	nop
 80156dc:	3714      	adds	r7, #20
 80156de:	46bd      	mov	sp, r7
 80156e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e4:	4770      	bx	lr
 80156e6:	bf00      	nop
 80156e8:	2000fb28 	.word	0x2000fb28

080156ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80156f4:	4915      	ldr	r1, [pc, #84]	; (801574c <etharp_free_entry+0x60>)
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	4613      	mov	r3, r2
 80156fa:	005b      	lsls	r3, r3, #1
 80156fc:	4413      	add	r3, r2
 80156fe:	00db      	lsls	r3, r3, #3
 8015700:	440b      	add	r3, r1
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d013      	beq.n	8015730 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015708:	4910      	ldr	r1, [pc, #64]	; (801574c <etharp_free_entry+0x60>)
 801570a:	687a      	ldr	r2, [r7, #4]
 801570c:	4613      	mov	r3, r2
 801570e:	005b      	lsls	r3, r3, #1
 8015710:	4413      	add	r3, r2
 8015712:	00db      	lsls	r3, r3, #3
 8015714:	440b      	add	r3, r1
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	4618      	mov	r0, r3
 801571a:	f7f9 f9ff 	bl	800eb1c <pbuf_free>
    arp_table[i].q = NULL;
 801571e:	490b      	ldr	r1, [pc, #44]	; (801574c <etharp_free_entry+0x60>)
 8015720:	687a      	ldr	r2, [r7, #4]
 8015722:	4613      	mov	r3, r2
 8015724:	005b      	lsls	r3, r3, #1
 8015726:	4413      	add	r3, r2
 8015728:	00db      	lsls	r3, r3, #3
 801572a:	440b      	add	r3, r1
 801572c:	2200      	movs	r2, #0
 801572e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015730:	4906      	ldr	r1, [pc, #24]	; (801574c <etharp_free_entry+0x60>)
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	4613      	mov	r3, r2
 8015736:	005b      	lsls	r3, r3, #1
 8015738:	4413      	add	r3, r2
 801573a:	00db      	lsls	r3, r3, #3
 801573c:	440b      	add	r3, r1
 801573e:	3314      	adds	r3, #20
 8015740:	2200      	movs	r2, #0
 8015742:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015744:	bf00      	nop
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	20000a74 	.word	0x20000a74

08015750 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015756:	2300      	movs	r3, #0
 8015758:	607b      	str	r3, [r7, #4]
 801575a:	e096      	b.n	801588a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801575c:	494f      	ldr	r1, [pc, #316]	; (801589c <etharp_tmr+0x14c>)
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	4613      	mov	r3, r2
 8015762:	005b      	lsls	r3, r3, #1
 8015764:	4413      	add	r3, r2
 8015766:	00db      	lsls	r3, r3, #3
 8015768:	440b      	add	r3, r1
 801576a:	3314      	adds	r3, #20
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015770:	78fb      	ldrb	r3, [r7, #3]
 8015772:	2b00      	cmp	r3, #0
 8015774:	f000 8086 	beq.w	8015884 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015778:	4948      	ldr	r1, [pc, #288]	; (801589c <etharp_tmr+0x14c>)
 801577a:	687a      	ldr	r2, [r7, #4]
 801577c:	4613      	mov	r3, r2
 801577e:	005b      	lsls	r3, r3, #1
 8015780:	4413      	add	r3, r2
 8015782:	00db      	lsls	r3, r3, #3
 8015784:	440b      	add	r3, r1
 8015786:	3312      	adds	r3, #18
 8015788:	881b      	ldrh	r3, [r3, #0]
 801578a:	3301      	adds	r3, #1
 801578c:	b298      	uxth	r0, r3
 801578e:	4943      	ldr	r1, [pc, #268]	; (801589c <etharp_tmr+0x14c>)
 8015790:	687a      	ldr	r2, [r7, #4]
 8015792:	4613      	mov	r3, r2
 8015794:	005b      	lsls	r3, r3, #1
 8015796:	4413      	add	r3, r2
 8015798:	00db      	lsls	r3, r3, #3
 801579a:	440b      	add	r3, r1
 801579c:	3312      	adds	r3, #18
 801579e:	4602      	mov	r2, r0
 80157a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80157a2:	493e      	ldr	r1, [pc, #248]	; (801589c <etharp_tmr+0x14c>)
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	4613      	mov	r3, r2
 80157a8:	005b      	lsls	r3, r3, #1
 80157aa:	4413      	add	r3, r2
 80157ac:	00db      	lsls	r3, r3, #3
 80157ae:	440b      	add	r3, r1
 80157b0:	3312      	adds	r3, #18
 80157b2:	881b      	ldrh	r3, [r3, #0]
 80157b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80157b8:	d215      	bcs.n	80157e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80157ba:	4938      	ldr	r1, [pc, #224]	; (801589c <etharp_tmr+0x14c>)
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	4613      	mov	r3, r2
 80157c0:	005b      	lsls	r3, r3, #1
 80157c2:	4413      	add	r3, r2
 80157c4:	00db      	lsls	r3, r3, #3
 80157c6:	440b      	add	r3, r1
 80157c8:	3314      	adds	r3, #20
 80157ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80157cc:	2b01      	cmp	r3, #1
 80157ce:	d10e      	bne.n	80157ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80157d0:	4932      	ldr	r1, [pc, #200]	; (801589c <etharp_tmr+0x14c>)
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	4613      	mov	r3, r2
 80157d6:	005b      	lsls	r3, r3, #1
 80157d8:	4413      	add	r3, r2
 80157da:	00db      	lsls	r3, r3, #3
 80157dc:	440b      	add	r3, r1
 80157de:	3312      	adds	r3, #18
 80157e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80157e2:	2b04      	cmp	r3, #4
 80157e4:	d903      	bls.n	80157ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f7ff ff80 	bl	80156ec <etharp_free_entry>
 80157ec:	e04a      	b.n	8015884 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80157ee:	492b      	ldr	r1, [pc, #172]	; (801589c <etharp_tmr+0x14c>)
 80157f0:	687a      	ldr	r2, [r7, #4]
 80157f2:	4613      	mov	r3, r2
 80157f4:	005b      	lsls	r3, r3, #1
 80157f6:	4413      	add	r3, r2
 80157f8:	00db      	lsls	r3, r3, #3
 80157fa:	440b      	add	r3, r1
 80157fc:	3314      	adds	r3, #20
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	2b03      	cmp	r3, #3
 8015802:	d10a      	bne.n	801581a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015804:	4925      	ldr	r1, [pc, #148]	; (801589c <etharp_tmr+0x14c>)
 8015806:	687a      	ldr	r2, [r7, #4]
 8015808:	4613      	mov	r3, r2
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	4413      	add	r3, r2
 801580e:	00db      	lsls	r3, r3, #3
 8015810:	440b      	add	r3, r1
 8015812:	3314      	adds	r3, #20
 8015814:	2204      	movs	r2, #4
 8015816:	701a      	strb	r2, [r3, #0]
 8015818:	e034      	b.n	8015884 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801581a:	4920      	ldr	r1, [pc, #128]	; (801589c <etharp_tmr+0x14c>)
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	4613      	mov	r3, r2
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	4413      	add	r3, r2
 8015824:	00db      	lsls	r3, r3, #3
 8015826:	440b      	add	r3, r1
 8015828:	3314      	adds	r3, #20
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	2b04      	cmp	r3, #4
 801582e:	d10a      	bne.n	8015846 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015830:	491a      	ldr	r1, [pc, #104]	; (801589c <etharp_tmr+0x14c>)
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	4613      	mov	r3, r2
 8015836:	005b      	lsls	r3, r3, #1
 8015838:	4413      	add	r3, r2
 801583a:	00db      	lsls	r3, r3, #3
 801583c:	440b      	add	r3, r1
 801583e:	3314      	adds	r3, #20
 8015840:	2202      	movs	r2, #2
 8015842:	701a      	strb	r2, [r3, #0]
 8015844:	e01e      	b.n	8015884 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015846:	4915      	ldr	r1, [pc, #84]	; (801589c <etharp_tmr+0x14c>)
 8015848:	687a      	ldr	r2, [r7, #4]
 801584a:	4613      	mov	r3, r2
 801584c:	005b      	lsls	r3, r3, #1
 801584e:	4413      	add	r3, r2
 8015850:	00db      	lsls	r3, r3, #3
 8015852:	440b      	add	r3, r1
 8015854:	3314      	adds	r3, #20
 8015856:	781b      	ldrb	r3, [r3, #0]
 8015858:	2b01      	cmp	r3, #1
 801585a:	d113      	bne.n	8015884 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801585c:	490f      	ldr	r1, [pc, #60]	; (801589c <etharp_tmr+0x14c>)
 801585e:	687a      	ldr	r2, [r7, #4]
 8015860:	4613      	mov	r3, r2
 8015862:	005b      	lsls	r3, r3, #1
 8015864:	4413      	add	r3, r2
 8015866:	00db      	lsls	r3, r3, #3
 8015868:	440b      	add	r3, r1
 801586a:	3308      	adds	r3, #8
 801586c:	6818      	ldr	r0, [r3, #0]
 801586e:	687a      	ldr	r2, [r7, #4]
 8015870:	4613      	mov	r3, r2
 8015872:	005b      	lsls	r3, r3, #1
 8015874:	4413      	add	r3, r2
 8015876:	00db      	lsls	r3, r3, #3
 8015878:	4a08      	ldr	r2, [pc, #32]	; (801589c <etharp_tmr+0x14c>)
 801587a:	4413      	add	r3, r2
 801587c:	3304      	adds	r3, #4
 801587e:	4619      	mov	r1, r3
 8015880:	f000 fe6e 	bl	8016560 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	3301      	adds	r3, #1
 8015888:	607b      	str	r3, [r7, #4]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2b09      	cmp	r3, #9
 801588e:	f77f af65 	ble.w	801575c <etharp_tmr+0xc>
      }
    }
  }
}
 8015892:	bf00      	nop
 8015894:	bf00      	nop
 8015896:	3708      	adds	r7, #8
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}
 801589c:	20000a74 	.word	0x20000a74

080158a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b08a      	sub	sp, #40	; 0x28
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	460b      	mov	r3, r1
 80158aa:	607a      	str	r2, [r7, #4]
 80158ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80158ae:	230a      	movs	r3, #10
 80158b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80158b2:	230a      	movs	r3, #10
 80158b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80158b6:	230a      	movs	r3, #10
 80158b8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80158ba:	2300      	movs	r3, #0
 80158bc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80158be:	230a      	movs	r3, #10
 80158c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80158c2:	2300      	movs	r3, #0
 80158c4:	83bb      	strh	r3, [r7, #28]
 80158c6:	2300      	movs	r3, #0
 80158c8:	837b      	strh	r3, [r7, #26]
 80158ca:	2300      	movs	r3, #0
 80158cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158ce:	2300      	movs	r3, #0
 80158d0:	843b      	strh	r3, [r7, #32]
 80158d2:	e0ae      	b.n	8015a32 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80158d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158d8:	49a6      	ldr	r1, [pc, #664]	; (8015b74 <etharp_find_entry+0x2d4>)
 80158da:	4613      	mov	r3, r2
 80158dc:	005b      	lsls	r3, r3, #1
 80158de:	4413      	add	r3, r2
 80158e0:	00db      	lsls	r3, r3, #3
 80158e2:	440b      	add	r3, r1
 80158e4:	3314      	adds	r3, #20
 80158e6:	781b      	ldrb	r3, [r3, #0]
 80158e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80158ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80158ee:	2b0a      	cmp	r3, #10
 80158f0:	d105      	bne.n	80158fe <etharp_find_entry+0x5e>
 80158f2:	7dfb      	ldrb	r3, [r7, #23]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d102      	bne.n	80158fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80158f8:	8c3b      	ldrh	r3, [r7, #32]
 80158fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80158fc:	e095      	b.n	8015a2a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80158fe:	7dfb      	ldrb	r3, [r7, #23]
 8015900:	2b00      	cmp	r3, #0
 8015902:	f000 8092 	beq.w	8015a2a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015906:	7dfb      	ldrb	r3, [r7, #23]
 8015908:	2b01      	cmp	r3, #1
 801590a:	d009      	beq.n	8015920 <etharp_find_entry+0x80>
 801590c:	7dfb      	ldrb	r3, [r7, #23]
 801590e:	2b01      	cmp	r3, #1
 8015910:	d806      	bhi.n	8015920 <etharp_find_entry+0x80>
 8015912:	4b99      	ldr	r3, [pc, #612]	; (8015b78 <etharp_find_entry+0x2d8>)
 8015914:	f240 1223 	movw	r2, #291	; 0x123
 8015918:	4998      	ldr	r1, [pc, #608]	; (8015b7c <etharp_find_entry+0x2dc>)
 801591a:	4899      	ldr	r0, [pc, #612]	; (8015b80 <etharp_find_entry+0x2e0>)
 801591c:	f002 fac6 	bl	8017eac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d020      	beq.n	8015968 <etharp_find_entry+0xc8>
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	6819      	ldr	r1, [r3, #0]
 801592a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801592e:	4891      	ldr	r0, [pc, #580]	; (8015b74 <etharp_find_entry+0x2d4>)
 8015930:	4613      	mov	r3, r2
 8015932:	005b      	lsls	r3, r3, #1
 8015934:	4413      	add	r3, r2
 8015936:	00db      	lsls	r3, r3, #3
 8015938:	4403      	add	r3, r0
 801593a:	3304      	adds	r3, #4
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	4299      	cmp	r1, r3
 8015940:	d112      	bne.n	8015968 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d00c      	beq.n	8015962 <etharp_find_entry+0xc2>
 8015948:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801594c:	4989      	ldr	r1, [pc, #548]	; (8015b74 <etharp_find_entry+0x2d4>)
 801594e:	4613      	mov	r3, r2
 8015950:	005b      	lsls	r3, r3, #1
 8015952:	4413      	add	r3, r2
 8015954:	00db      	lsls	r3, r3, #3
 8015956:	440b      	add	r3, r1
 8015958:	3308      	adds	r3, #8
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	687a      	ldr	r2, [r7, #4]
 801595e:	429a      	cmp	r2, r3
 8015960:	d102      	bne.n	8015968 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015962:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015966:	e100      	b.n	8015b6a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015968:	7dfb      	ldrb	r3, [r7, #23]
 801596a:	2b01      	cmp	r3, #1
 801596c:	d140      	bne.n	80159f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801596e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015972:	4980      	ldr	r1, [pc, #512]	; (8015b74 <etharp_find_entry+0x2d4>)
 8015974:	4613      	mov	r3, r2
 8015976:	005b      	lsls	r3, r3, #1
 8015978:	4413      	add	r3, r2
 801597a:	00db      	lsls	r3, r3, #3
 801597c:	440b      	add	r3, r1
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d01a      	beq.n	80159ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015984:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015988:	497a      	ldr	r1, [pc, #488]	; (8015b74 <etharp_find_entry+0x2d4>)
 801598a:	4613      	mov	r3, r2
 801598c:	005b      	lsls	r3, r3, #1
 801598e:	4413      	add	r3, r2
 8015990:	00db      	lsls	r3, r3, #3
 8015992:	440b      	add	r3, r1
 8015994:	3312      	adds	r3, #18
 8015996:	881b      	ldrh	r3, [r3, #0]
 8015998:	8bba      	ldrh	r2, [r7, #28]
 801599a:	429a      	cmp	r2, r3
 801599c:	d845      	bhi.n	8015a2a <etharp_find_entry+0x18a>
            old_queue = i;
 801599e:	8c3b      	ldrh	r3, [r7, #32]
 80159a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80159a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159a6:	4973      	ldr	r1, [pc, #460]	; (8015b74 <etharp_find_entry+0x2d4>)
 80159a8:	4613      	mov	r3, r2
 80159aa:	005b      	lsls	r3, r3, #1
 80159ac:	4413      	add	r3, r2
 80159ae:	00db      	lsls	r3, r3, #3
 80159b0:	440b      	add	r3, r1
 80159b2:	3312      	adds	r3, #18
 80159b4:	881b      	ldrh	r3, [r3, #0]
 80159b6:	83bb      	strh	r3, [r7, #28]
 80159b8:	e037      	b.n	8015a2a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80159ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159be:	496d      	ldr	r1, [pc, #436]	; (8015b74 <etharp_find_entry+0x2d4>)
 80159c0:	4613      	mov	r3, r2
 80159c2:	005b      	lsls	r3, r3, #1
 80159c4:	4413      	add	r3, r2
 80159c6:	00db      	lsls	r3, r3, #3
 80159c8:	440b      	add	r3, r1
 80159ca:	3312      	adds	r3, #18
 80159cc:	881b      	ldrh	r3, [r3, #0]
 80159ce:	8b7a      	ldrh	r2, [r7, #26]
 80159d0:	429a      	cmp	r2, r3
 80159d2:	d82a      	bhi.n	8015a2a <etharp_find_entry+0x18a>
            old_pending = i;
 80159d4:	8c3b      	ldrh	r3, [r7, #32]
 80159d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80159d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159dc:	4965      	ldr	r1, [pc, #404]	; (8015b74 <etharp_find_entry+0x2d4>)
 80159de:	4613      	mov	r3, r2
 80159e0:	005b      	lsls	r3, r3, #1
 80159e2:	4413      	add	r3, r2
 80159e4:	00db      	lsls	r3, r3, #3
 80159e6:	440b      	add	r3, r1
 80159e8:	3312      	adds	r3, #18
 80159ea:	881b      	ldrh	r3, [r3, #0]
 80159ec:	837b      	strh	r3, [r7, #26]
 80159ee:	e01c      	b.n	8015a2a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80159f0:	7dfb      	ldrb	r3, [r7, #23]
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d919      	bls.n	8015a2a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80159f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159fa:	495e      	ldr	r1, [pc, #376]	; (8015b74 <etharp_find_entry+0x2d4>)
 80159fc:	4613      	mov	r3, r2
 80159fe:	005b      	lsls	r3, r3, #1
 8015a00:	4413      	add	r3, r2
 8015a02:	00db      	lsls	r3, r3, #3
 8015a04:	440b      	add	r3, r1
 8015a06:	3312      	adds	r3, #18
 8015a08:	881b      	ldrh	r3, [r3, #0]
 8015a0a:	8b3a      	ldrh	r2, [r7, #24]
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d80c      	bhi.n	8015a2a <etharp_find_entry+0x18a>
            old_stable = i;
 8015a10:	8c3b      	ldrh	r3, [r7, #32]
 8015a12:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015a14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a18:	4956      	ldr	r1, [pc, #344]	; (8015b74 <etharp_find_entry+0x2d4>)
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	005b      	lsls	r3, r3, #1
 8015a1e:	4413      	add	r3, r2
 8015a20:	00db      	lsls	r3, r3, #3
 8015a22:	440b      	add	r3, r1
 8015a24:	3312      	adds	r3, #18
 8015a26:	881b      	ldrh	r3, [r3, #0]
 8015a28:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a2a:	8c3b      	ldrh	r3, [r7, #32]
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	843b      	strh	r3, [r7, #32]
 8015a32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a36:	2b09      	cmp	r3, #9
 8015a38:	f77f af4c 	ble.w	80158d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015a3c:	7afb      	ldrb	r3, [r7, #11]
 8015a3e:	f003 0302 	and.w	r3, r3, #2
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d108      	bne.n	8015a58 <etharp_find_entry+0x1b8>
 8015a46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a4a:	2b0a      	cmp	r3, #10
 8015a4c:	d107      	bne.n	8015a5e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015a4e:	7afb      	ldrb	r3, [r7, #11]
 8015a50:	f003 0301 	and.w	r3, r3, #1
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d102      	bne.n	8015a5e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a5c:	e085      	b.n	8015b6a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a62:	2b09      	cmp	r3, #9
 8015a64:	dc02      	bgt.n	8015a6c <etharp_find_entry+0x1cc>
    i = empty;
 8015a66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a68:	843b      	strh	r3, [r7, #32]
 8015a6a:	e039      	b.n	8015ae0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015a6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015a70:	2b09      	cmp	r3, #9
 8015a72:	dc14      	bgt.n	8015a9e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a76:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015a78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a7c:	493d      	ldr	r1, [pc, #244]	; (8015b74 <etharp_find_entry+0x2d4>)
 8015a7e:	4613      	mov	r3, r2
 8015a80:	005b      	lsls	r3, r3, #1
 8015a82:	4413      	add	r3, r2
 8015a84:	00db      	lsls	r3, r3, #3
 8015a86:	440b      	add	r3, r1
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d018      	beq.n	8015ac0 <etharp_find_entry+0x220>
 8015a8e:	4b3a      	ldr	r3, [pc, #232]	; (8015b78 <etharp_find_entry+0x2d8>)
 8015a90:	f240 126d 	movw	r2, #365	; 0x16d
 8015a94:	493b      	ldr	r1, [pc, #236]	; (8015b84 <etharp_find_entry+0x2e4>)
 8015a96:	483a      	ldr	r0, [pc, #232]	; (8015b80 <etharp_find_entry+0x2e0>)
 8015a98:	f002 fa08 	bl	8017eac <iprintf>
 8015a9c:	e010      	b.n	8015ac0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015a9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015aa2:	2b09      	cmp	r3, #9
 8015aa4:	dc02      	bgt.n	8015aac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015aa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015aa8:	843b      	strh	r3, [r7, #32]
 8015aaa:	e009      	b.n	8015ac0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015aac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015ab0:	2b09      	cmp	r3, #9
 8015ab2:	dc02      	bgt.n	8015aba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015ab4:	8bfb      	ldrh	r3, [r7, #30]
 8015ab6:	843b      	strh	r3, [r7, #32]
 8015ab8:	e002      	b.n	8015ac0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015abe:	e054      	b.n	8015b6a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015ac0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ac4:	2b09      	cmp	r3, #9
 8015ac6:	dd06      	ble.n	8015ad6 <etharp_find_entry+0x236>
 8015ac8:	4b2b      	ldr	r3, [pc, #172]	; (8015b78 <etharp_find_entry+0x2d8>)
 8015aca:	f240 127f 	movw	r2, #383	; 0x17f
 8015ace:	492e      	ldr	r1, [pc, #184]	; (8015b88 <etharp_find_entry+0x2e8>)
 8015ad0:	482b      	ldr	r0, [pc, #172]	; (8015b80 <etharp_find_entry+0x2e0>)
 8015ad2:	f002 f9eb 	bl	8017eac <iprintf>
    etharp_free_entry(i);
 8015ad6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7ff fe06 	bl	80156ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015ae0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ae4:	2b09      	cmp	r3, #9
 8015ae6:	dd06      	ble.n	8015af6 <etharp_find_entry+0x256>
 8015ae8:	4b23      	ldr	r3, [pc, #140]	; (8015b78 <etharp_find_entry+0x2d8>)
 8015aea:	f240 1283 	movw	r2, #387	; 0x183
 8015aee:	4926      	ldr	r1, [pc, #152]	; (8015b88 <etharp_find_entry+0x2e8>)
 8015af0:	4823      	ldr	r0, [pc, #140]	; (8015b80 <etharp_find_entry+0x2e0>)
 8015af2:	f002 f9db 	bl	8017eac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015af6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015afa:	491e      	ldr	r1, [pc, #120]	; (8015b74 <etharp_find_entry+0x2d4>)
 8015afc:	4613      	mov	r3, r2
 8015afe:	005b      	lsls	r3, r3, #1
 8015b00:	4413      	add	r3, r2
 8015b02:	00db      	lsls	r3, r3, #3
 8015b04:	440b      	add	r3, r1
 8015b06:	3314      	adds	r3, #20
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d006      	beq.n	8015b1c <etharp_find_entry+0x27c>
 8015b0e:	4b1a      	ldr	r3, [pc, #104]	; (8015b78 <etharp_find_entry+0x2d8>)
 8015b10:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015b14:	491d      	ldr	r1, [pc, #116]	; (8015b8c <etharp_find_entry+0x2ec>)
 8015b16:	481a      	ldr	r0, [pc, #104]	; (8015b80 <etharp_find_entry+0x2e0>)
 8015b18:	f002 f9c8 	bl	8017eac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d00b      	beq.n	8015b3a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015b22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	6819      	ldr	r1, [r3, #0]
 8015b2a:	4812      	ldr	r0, [pc, #72]	; (8015b74 <etharp_find_entry+0x2d4>)
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	005b      	lsls	r3, r3, #1
 8015b30:	4413      	add	r3, r2
 8015b32:	00db      	lsls	r3, r3, #3
 8015b34:	4403      	add	r3, r0
 8015b36:	3304      	adds	r3, #4
 8015b38:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015b3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b3e:	490d      	ldr	r1, [pc, #52]	; (8015b74 <etharp_find_entry+0x2d4>)
 8015b40:	4613      	mov	r3, r2
 8015b42:	005b      	lsls	r3, r3, #1
 8015b44:	4413      	add	r3, r2
 8015b46:	00db      	lsls	r3, r3, #3
 8015b48:	440b      	add	r3, r1
 8015b4a:	3312      	adds	r3, #18
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015b50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b54:	4907      	ldr	r1, [pc, #28]	; (8015b74 <etharp_find_entry+0x2d4>)
 8015b56:	4613      	mov	r3, r2
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	4413      	add	r3, r2
 8015b5c:	00db      	lsls	r3, r3, #3
 8015b5e:	440b      	add	r3, r1
 8015b60:	3308      	adds	r3, #8
 8015b62:	687a      	ldr	r2, [r7, #4]
 8015b64:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015b66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	3728      	adds	r7, #40	; 0x28
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd80      	pop	{r7, pc}
 8015b72:	bf00      	nop
 8015b74:	20000a74 	.word	0x20000a74
 8015b78:	0801cb6c 	.word	0x0801cb6c
 8015b7c:	0801cba4 	.word	0x0801cba4
 8015b80:	0801cbe4 	.word	0x0801cbe4
 8015b84:	0801cc0c 	.word	0x0801cc0c
 8015b88:	0801cc24 	.word	0x0801cc24
 8015b8c:	0801cc38 	.word	0x0801cc38

08015b90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b088      	sub	sp, #32
 8015b94:	af02      	add	r7, sp, #8
 8015b96:	60f8      	str	r0, [r7, #12]
 8015b98:	60b9      	str	r1, [r7, #8]
 8015b9a:	607a      	str	r2, [r7, #4]
 8015b9c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015ba4:	2b06      	cmp	r3, #6
 8015ba6:	d006      	beq.n	8015bb6 <etharp_update_arp_entry+0x26>
 8015ba8:	4b48      	ldr	r3, [pc, #288]	; (8015ccc <etharp_update_arp_entry+0x13c>)
 8015baa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015bae:	4948      	ldr	r1, [pc, #288]	; (8015cd0 <etharp_update_arp_entry+0x140>)
 8015bb0:	4848      	ldr	r0, [pc, #288]	; (8015cd4 <etharp_update_arp_entry+0x144>)
 8015bb2:	f002 f97b 	bl	8017eac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015bb6:	68bb      	ldr	r3, [r7, #8]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d012      	beq.n	8015be2 <etharp_update_arp_entry+0x52>
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d00e      	beq.n	8015be2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	68f9      	ldr	r1, [r7, #12]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f001 f8fe 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 8015bd0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d105      	bne.n	8015be2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015bd6:	68bb      	ldr	r3, [r7, #8]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015bde:	2be0      	cmp	r3, #224	; 0xe0
 8015be0:	d102      	bne.n	8015be8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015be2:	f06f 030f 	mvn.w	r3, #15
 8015be6:	e06c      	b.n	8015cc2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015be8:	78fb      	ldrb	r3, [r7, #3]
 8015bea:	68fa      	ldr	r2, [r7, #12]
 8015bec:	4619      	mov	r1, r3
 8015bee:	68b8      	ldr	r0, [r7, #8]
 8015bf0:	f7ff fe56 	bl	80158a0 <etharp_find_entry>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015bf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	da02      	bge.n	8015c06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015c00:	8afb      	ldrh	r3, [r7, #22]
 8015c02:	b25b      	sxtb	r3, r3
 8015c04:	e05d      	b.n	8015cc2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015c06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c0a:	4933      	ldr	r1, [pc, #204]	; (8015cd8 <etharp_update_arp_entry+0x148>)
 8015c0c:	4613      	mov	r3, r2
 8015c0e:	005b      	lsls	r3, r3, #1
 8015c10:	4413      	add	r3, r2
 8015c12:	00db      	lsls	r3, r3, #3
 8015c14:	440b      	add	r3, r1
 8015c16:	3314      	adds	r3, #20
 8015c18:	2202      	movs	r2, #2
 8015c1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015c1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c20:	492d      	ldr	r1, [pc, #180]	; (8015cd8 <etharp_update_arp_entry+0x148>)
 8015c22:	4613      	mov	r3, r2
 8015c24:	005b      	lsls	r3, r3, #1
 8015c26:	4413      	add	r3, r2
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	440b      	add	r3, r1
 8015c2c:	3308      	adds	r3, #8
 8015c2e:	68fa      	ldr	r2, [r7, #12]
 8015c30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015c32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c36:	4613      	mov	r3, r2
 8015c38:	005b      	lsls	r3, r3, #1
 8015c3a:	4413      	add	r3, r2
 8015c3c:	00db      	lsls	r3, r3, #3
 8015c3e:	3308      	adds	r3, #8
 8015c40:	4a25      	ldr	r2, [pc, #148]	; (8015cd8 <etharp_update_arp_entry+0x148>)
 8015c42:	4413      	add	r3, r2
 8015c44:	3304      	adds	r3, #4
 8015c46:	2206      	movs	r2, #6
 8015c48:	6879      	ldr	r1, [r7, #4]
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f002 f854 	bl	8017cf8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015c50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c54:	4920      	ldr	r1, [pc, #128]	; (8015cd8 <etharp_update_arp_entry+0x148>)
 8015c56:	4613      	mov	r3, r2
 8015c58:	005b      	lsls	r3, r3, #1
 8015c5a:	4413      	add	r3, r2
 8015c5c:	00db      	lsls	r3, r3, #3
 8015c5e:	440b      	add	r3, r1
 8015c60:	3312      	adds	r3, #18
 8015c62:	2200      	movs	r2, #0
 8015c64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015c66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c6a:	491b      	ldr	r1, [pc, #108]	; (8015cd8 <etharp_update_arp_entry+0x148>)
 8015c6c:	4613      	mov	r3, r2
 8015c6e:	005b      	lsls	r3, r3, #1
 8015c70:	4413      	add	r3, r2
 8015c72:	00db      	lsls	r3, r3, #3
 8015c74:	440b      	add	r3, r1
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d021      	beq.n	8015cc0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015c7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c80:	4915      	ldr	r1, [pc, #84]	; (8015cd8 <etharp_update_arp_entry+0x148>)
 8015c82:	4613      	mov	r3, r2
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	4413      	add	r3, r2
 8015c88:	00db      	lsls	r3, r3, #3
 8015c8a:	440b      	add	r3, r1
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015c90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015c94:	4910      	ldr	r1, [pc, #64]	; (8015cd8 <etharp_update_arp_entry+0x148>)
 8015c96:	4613      	mov	r3, r2
 8015c98:	005b      	lsls	r3, r3, #1
 8015c9a:	4413      	add	r3, r2
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	440b      	add	r3, r1
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015cae:	9300      	str	r3, [sp, #0]
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6939      	ldr	r1, [r7, #16]
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	f001 ff91 	bl	8017bdc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015cba:	6938      	ldr	r0, [r7, #16]
 8015cbc:	f7f8 ff2e 	bl	800eb1c <pbuf_free>
  }
  return ERR_OK;
 8015cc0:	2300      	movs	r3, #0
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3718      	adds	r7, #24
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}
 8015cca:	bf00      	nop
 8015ccc:	0801cb6c 	.word	0x0801cb6c
 8015cd0:	0801cc64 	.word	0x0801cc64
 8015cd4:	0801cbe4 	.word	0x0801cbe4
 8015cd8:	20000a74 	.word	0x20000a74

08015cdc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b084      	sub	sp, #16
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	60fb      	str	r3, [r7, #12]
 8015ce8:	e01e      	b.n	8015d28 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015cea:	4913      	ldr	r1, [pc, #76]	; (8015d38 <etharp_cleanup_netif+0x5c>)
 8015cec:	68fa      	ldr	r2, [r7, #12]
 8015cee:	4613      	mov	r3, r2
 8015cf0:	005b      	lsls	r3, r3, #1
 8015cf2:	4413      	add	r3, r2
 8015cf4:	00db      	lsls	r3, r3, #3
 8015cf6:	440b      	add	r3, r1
 8015cf8:	3314      	adds	r3, #20
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015cfe:	7afb      	ldrb	r3, [r7, #11]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d00e      	beq.n	8015d22 <etharp_cleanup_netif+0x46>
 8015d04:	490c      	ldr	r1, [pc, #48]	; (8015d38 <etharp_cleanup_netif+0x5c>)
 8015d06:	68fa      	ldr	r2, [r7, #12]
 8015d08:	4613      	mov	r3, r2
 8015d0a:	005b      	lsls	r3, r3, #1
 8015d0c:	4413      	add	r3, r2
 8015d0e:	00db      	lsls	r3, r3, #3
 8015d10:	440b      	add	r3, r1
 8015d12:	3308      	adds	r3, #8
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	687a      	ldr	r2, [r7, #4]
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d102      	bne.n	8015d22 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015d1c:	68f8      	ldr	r0, [r7, #12]
 8015d1e:	f7ff fce5 	bl	80156ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	3301      	adds	r3, #1
 8015d26:	60fb      	str	r3, [r7, #12]
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	2b09      	cmp	r3, #9
 8015d2c:	dddd      	ble.n	8015cea <etharp_cleanup_netif+0xe>
    }
  }
}
 8015d2e:	bf00      	nop
 8015d30:	bf00      	nop
 8015d32:	3710      	adds	r7, #16
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	20000a74 	.word	0x20000a74

08015d3c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015d3c:	b5b0      	push	{r4, r5, r7, lr}
 8015d3e:	b08a      	sub	sp, #40	; 0x28
 8015d40:	af04      	add	r7, sp, #16
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d107      	bne.n	8015d5c <etharp_input+0x20>
 8015d4c:	4b3d      	ldr	r3, [pc, #244]	; (8015e44 <etharp_input+0x108>)
 8015d4e:	f240 228a 	movw	r2, #650	; 0x28a
 8015d52:	493d      	ldr	r1, [pc, #244]	; (8015e48 <etharp_input+0x10c>)
 8015d54:	483d      	ldr	r0, [pc, #244]	; (8015e4c <etharp_input+0x110>)
 8015d56:	f002 f8a9 	bl	8017eac <iprintf>
 8015d5a:	e06f      	b.n	8015e3c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	881b      	ldrh	r3, [r3, #0]
 8015d66:	b29b      	uxth	r3, r3
 8015d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d6c:	d10c      	bne.n	8015d88 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015d72:	2b06      	cmp	r3, #6
 8015d74:	d108      	bne.n	8015d88 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015d7a:	2b04      	cmp	r3, #4
 8015d7c:	d104      	bne.n	8015d88 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	885b      	ldrh	r3, [r3, #2]
 8015d82:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015d84:	2b08      	cmp	r3, #8
 8015d86:	d003      	beq.n	8015d90 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f7f8 fec7 	bl	800eb1c <pbuf_free>
    return;
 8015d8e:	e055      	b.n	8015e3c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015d90:	693b      	ldr	r3, [r7, #16]
 8015d92:	330e      	adds	r3, #14
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015d98:	693b      	ldr	r3, [r7, #16]
 8015d9a:	3318      	adds	r3, #24
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	3304      	adds	r3, #4
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d102      	bne.n	8015db0 <etharp_input+0x74>
    for_us = 0;
 8015daa:	2300      	movs	r3, #0
 8015dac:	75fb      	strb	r3, [r7, #23]
 8015dae:	e009      	b.n	8015dc4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015db0:	68ba      	ldr	r2, [r7, #8]
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	3304      	adds	r3, #4
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	429a      	cmp	r2, r3
 8015dba:	bf0c      	ite	eq
 8015dbc:	2301      	moveq	r3, #1
 8015dbe:	2300      	movne	r3, #0
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	f103 0208 	add.w	r2, r3, #8
 8015dca:	7dfb      	ldrb	r3, [r7, #23]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d001      	beq.n	8015dd4 <etharp_input+0x98>
 8015dd0:	2301      	movs	r3, #1
 8015dd2:	e000      	b.n	8015dd6 <etharp_input+0x9a>
 8015dd4:	2302      	movs	r3, #2
 8015dd6:	f107 010c 	add.w	r1, r7, #12
 8015dda:	6838      	ldr	r0, [r7, #0]
 8015ddc:	f7ff fed8 	bl	8015b90 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	88db      	ldrh	r3, [r3, #6]
 8015de4:	b29b      	uxth	r3, r3
 8015de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015dea:	d003      	beq.n	8015df4 <etharp_input+0xb8>
 8015dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015df0:	d01e      	beq.n	8015e30 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015df2:	e020      	b.n	8015e36 <etharp_input+0xfa>
      if (for_us) {
 8015df4:	7dfb      	ldrb	r3, [r7, #23]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d01c      	beq.n	8015e34 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015e10:	693a      	ldr	r2, [r7, #16]
 8015e12:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015e14:	2102      	movs	r1, #2
 8015e16:	9103      	str	r1, [sp, #12]
 8015e18:	f107 010c 	add.w	r1, r7, #12
 8015e1c:	9102      	str	r1, [sp, #8]
 8015e1e:	9201      	str	r2, [sp, #4]
 8015e20:	9300      	str	r3, [sp, #0]
 8015e22:	462b      	mov	r3, r5
 8015e24:	4622      	mov	r2, r4
 8015e26:	4601      	mov	r1, r0
 8015e28:	6838      	ldr	r0, [r7, #0]
 8015e2a:	f000 faeb 	bl	8016404 <etharp_raw>
      break;
 8015e2e:	e001      	b.n	8015e34 <etharp_input+0xf8>
      break;
 8015e30:	bf00      	nop
 8015e32:	e000      	b.n	8015e36 <etharp_input+0xfa>
      break;
 8015e34:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f7f8 fe70 	bl	800eb1c <pbuf_free>
}
 8015e3c:	3718      	adds	r7, #24
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bdb0      	pop	{r4, r5, r7, pc}
 8015e42:	bf00      	nop
 8015e44:	0801cb6c 	.word	0x0801cb6c
 8015e48:	0801ccbc 	.word	0x0801ccbc
 8015e4c:	0801cbe4 	.word	0x0801cbe4

08015e50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b086      	sub	sp, #24
 8015e54:	af02      	add	r7, sp, #8
 8015e56:	60f8      	str	r0, [r7, #12]
 8015e58:	60b9      	str	r1, [r7, #8]
 8015e5a:	4613      	mov	r3, r2
 8015e5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015e5e:	79fa      	ldrb	r2, [r7, #7]
 8015e60:	4944      	ldr	r1, [pc, #272]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015e62:	4613      	mov	r3, r2
 8015e64:	005b      	lsls	r3, r3, #1
 8015e66:	4413      	add	r3, r2
 8015e68:	00db      	lsls	r3, r3, #3
 8015e6a:	440b      	add	r3, r1
 8015e6c:	3314      	adds	r3, #20
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	2b01      	cmp	r3, #1
 8015e72:	d806      	bhi.n	8015e82 <etharp_output_to_arp_index+0x32>
 8015e74:	4b40      	ldr	r3, [pc, #256]	; (8015f78 <etharp_output_to_arp_index+0x128>)
 8015e76:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015e7a:	4940      	ldr	r1, [pc, #256]	; (8015f7c <etharp_output_to_arp_index+0x12c>)
 8015e7c:	4840      	ldr	r0, [pc, #256]	; (8015f80 <etharp_output_to_arp_index+0x130>)
 8015e7e:	f002 f815 	bl	8017eac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015e82:	79fa      	ldrb	r2, [r7, #7]
 8015e84:	493b      	ldr	r1, [pc, #236]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015e86:	4613      	mov	r3, r2
 8015e88:	005b      	lsls	r3, r3, #1
 8015e8a:	4413      	add	r3, r2
 8015e8c:	00db      	lsls	r3, r3, #3
 8015e8e:	440b      	add	r3, r1
 8015e90:	3314      	adds	r3, #20
 8015e92:	781b      	ldrb	r3, [r3, #0]
 8015e94:	2b02      	cmp	r3, #2
 8015e96:	d153      	bne.n	8015f40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015e98:	79fa      	ldrb	r2, [r7, #7]
 8015e9a:	4936      	ldr	r1, [pc, #216]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	005b      	lsls	r3, r3, #1
 8015ea0:	4413      	add	r3, r2
 8015ea2:	00db      	lsls	r3, r3, #3
 8015ea4:	440b      	add	r3, r1
 8015ea6:	3312      	adds	r3, #18
 8015ea8:	881b      	ldrh	r3, [r3, #0]
 8015eaa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015eae:	d919      	bls.n	8015ee4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015eb0:	79fa      	ldrb	r2, [r7, #7]
 8015eb2:	4613      	mov	r3, r2
 8015eb4:	005b      	lsls	r3, r3, #1
 8015eb6:	4413      	add	r3, r2
 8015eb8:	00db      	lsls	r3, r3, #3
 8015eba:	4a2e      	ldr	r2, [pc, #184]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015ebc:	4413      	add	r3, r2
 8015ebe:	3304      	adds	r3, #4
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	68f8      	ldr	r0, [r7, #12]
 8015ec4:	f000 fb4c 	bl	8016560 <etharp_request>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d138      	bne.n	8015f40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015ece:	79fa      	ldrb	r2, [r7, #7]
 8015ed0:	4928      	ldr	r1, [pc, #160]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	005b      	lsls	r3, r3, #1
 8015ed6:	4413      	add	r3, r2
 8015ed8:	00db      	lsls	r3, r3, #3
 8015eda:	440b      	add	r3, r1
 8015edc:	3314      	adds	r3, #20
 8015ede:	2203      	movs	r2, #3
 8015ee0:	701a      	strb	r2, [r3, #0]
 8015ee2:	e02d      	b.n	8015f40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015ee4:	79fa      	ldrb	r2, [r7, #7]
 8015ee6:	4923      	ldr	r1, [pc, #140]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015ee8:	4613      	mov	r3, r2
 8015eea:	005b      	lsls	r3, r3, #1
 8015eec:	4413      	add	r3, r2
 8015eee:	00db      	lsls	r3, r3, #3
 8015ef0:	440b      	add	r3, r1
 8015ef2:	3312      	adds	r3, #18
 8015ef4:	881b      	ldrh	r3, [r3, #0]
 8015ef6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015efa:	d321      	bcc.n	8015f40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015efc:	79fa      	ldrb	r2, [r7, #7]
 8015efe:	4613      	mov	r3, r2
 8015f00:	005b      	lsls	r3, r3, #1
 8015f02:	4413      	add	r3, r2
 8015f04:	00db      	lsls	r3, r3, #3
 8015f06:	4a1b      	ldr	r2, [pc, #108]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015f08:	4413      	add	r3, r2
 8015f0a:	1d19      	adds	r1, r3, #4
 8015f0c:	79fa      	ldrb	r2, [r7, #7]
 8015f0e:	4613      	mov	r3, r2
 8015f10:	005b      	lsls	r3, r3, #1
 8015f12:	4413      	add	r3, r2
 8015f14:	00db      	lsls	r3, r3, #3
 8015f16:	3308      	adds	r3, #8
 8015f18:	4a16      	ldr	r2, [pc, #88]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015f1a:	4413      	add	r3, r2
 8015f1c:	3304      	adds	r3, #4
 8015f1e:	461a      	mov	r2, r3
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	f000 fafb 	bl	801651c <etharp_request_dst>
 8015f26:	4603      	mov	r3, r0
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d109      	bne.n	8015f40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015f2c:	79fa      	ldrb	r2, [r7, #7]
 8015f2e:	4911      	ldr	r1, [pc, #68]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015f30:	4613      	mov	r3, r2
 8015f32:	005b      	lsls	r3, r3, #1
 8015f34:	4413      	add	r3, r2
 8015f36:	00db      	lsls	r3, r3, #3
 8015f38:	440b      	add	r3, r1
 8015f3a:	3314      	adds	r3, #20
 8015f3c:	2203      	movs	r2, #3
 8015f3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015f46:	79fa      	ldrb	r2, [r7, #7]
 8015f48:	4613      	mov	r3, r2
 8015f4a:	005b      	lsls	r3, r3, #1
 8015f4c:	4413      	add	r3, r2
 8015f4e:	00db      	lsls	r3, r3, #3
 8015f50:	3308      	adds	r3, #8
 8015f52:	4a08      	ldr	r2, [pc, #32]	; (8015f74 <etharp_output_to_arp_index+0x124>)
 8015f54:	4413      	add	r3, r2
 8015f56:	3304      	adds	r3, #4
 8015f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015f5c:	9200      	str	r2, [sp, #0]
 8015f5e:	460a      	mov	r2, r1
 8015f60:	68b9      	ldr	r1, [r7, #8]
 8015f62:	68f8      	ldr	r0, [r7, #12]
 8015f64:	f001 fe3a 	bl	8017bdc <ethernet_output>
 8015f68:	4603      	mov	r3, r0
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	3710      	adds	r7, #16
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	20000a74 	.word	0x20000a74
 8015f78:	0801cb6c 	.word	0x0801cb6c
 8015f7c:	0801ccdc 	.word	0x0801ccdc
 8015f80:	0801cbe4 	.word	0x0801cbe4

08015f84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b08a      	sub	sp, #40	; 0x28
 8015f88:	af02      	add	r7, sp, #8
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	60b9      	str	r1, [r7, #8]
 8015f8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d106      	bne.n	8015fa8 <etharp_output+0x24>
 8015f9a:	4b73      	ldr	r3, [pc, #460]	; (8016168 <etharp_output+0x1e4>)
 8015f9c:	f240 321e 	movw	r2, #798	; 0x31e
 8015fa0:	4972      	ldr	r1, [pc, #456]	; (801616c <etharp_output+0x1e8>)
 8015fa2:	4873      	ldr	r0, [pc, #460]	; (8016170 <etharp_output+0x1ec>)
 8015fa4:	f001 ff82 	bl	8017eac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d106      	bne.n	8015fbc <etharp_output+0x38>
 8015fae:	4b6e      	ldr	r3, [pc, #440]	; (8016168 <etharp_output+0x1e4>)
 8015fb0:	f240 321f 	movw	r2, #799	; 0x31f
 8015fb4:	496f      	ldr	r1, [pc, #444]	; (8016174 <etharp_output+0x1f0>)
 8015fb6:	486e      	ldr	r0, [pc, #440]	; (8016170 <etharp_output+0x1ec>)
 8015fb8:	f001 ff78 	bl	8017eac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d106      	bne.n	8015fd0 <etharp_output+0x4c>
 8015fc2:	4b69      	ldr	r3, [pc, #420]	; (8016168 <etharp_output+0x1e4>)
 8015fc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015fc8:	496b      	ldr	r1, [pc, #428]	; (8016178 <etharp_output+0x1f4>)
 8015fca:	4869      	ldr	r0, [pc, #420]	; (8016170 <etharp_output+0x1ec>)
 8015fcc:	f001 ff6e 	bl	8017eac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	68f9      	ldr	r1, [r7, #12]
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f000 fef8 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d002      	beq.n	8015fe8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015fe2:	4b66      	ldr	r3, [pc, #408]	; (801617c <etharp_output+0x1f8>)
 8015fe4:	61fb      	str	r3, [r7, #28]
 8015fe6:	e0af      	b.n	8016148 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ff0:	2be0      	cmp	r3, #224	; 0xe0
 8015ff2:	d118      	bne.n	8016026 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015ffc:	235e      	movs	r3, #94	; 0x5e
 8015ffe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	3301      	adds	r3, #1
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801600a:	b2db      	uxtb	r3, r3
 801600c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	3302      	adds	r3, #2
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	3303      	adds	r3, #3
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801601e:	f107 0310 	add.w	r3, r7, #16
 8016022:	61fb      	str	r3, [r7, #28]
 8016024:	e090      	b.n	8016148 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	3304      	adds	r3, #4
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	405a      	eors	r2, r3
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	3308      	adds	r3, #8
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	4013      	ands	r3, r2
 801603a:	2b00      	cmp	r3, #0
 801603c:	d012      	beq.n	8016064 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016044:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016048:	4293      	cmp	r3, r2
 801604a:	d00b      	beq.n	8016064 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	330c      	adds	r3, #12
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d003      	beq.n	801605e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	330c      	adds	r3, #12
 801605a:	61bb      	str	r3, [r7, #24]
 801605c:	e002      	b.n	8016064 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801605e:	f06f 0303 	mvn.w	r3, #3
 8016062:	e07d      	b.n	8016160 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016064:	4b46      	ldr	r3, [pc, #280]	; (8016180 <etharp_output+0x1fc>)
 8016066:	781b      	ldrb	r3, [r3, #0]
 8016068:	4619      	mov	r1, r3
 801606a:	4a46      	ldr	r2, [pc, #280]	; (8016184 <etharp_output+0x200>)
 801606c:	460b      	mov	r3, r1
 801606e:	005b      	lsls	r3, r3, #1
 8016070:	440b      	add	r3, r1
 8016072:	00db      	lsls	r3, r3, #3
 8016074:	4413      	add	r3, r2
 8016076:	3314      	adds	r3, #20
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	2b01      	cmp	r3, #1
 801607c:	d925      	bls.n	80160ca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801607e:	4b40      	ldr	r3, [pc, #256]	; (8016180 <etharp_output+0x1fc>)
 8016080:	781b      	ldrb	r3, [r3, #0]
 8016082:	4619      	mov	r1, r3
 8016084:	4a3f      	ldr	r2, [pc, #252]	; (8016184 <etharp_output+0x200>)
 8016086:	460b      	mov	r3, r1
 8016088:	005b      	lsls	r3, r3, #1
 801608a:	440b      	add	r3, r1
 801608c:	00db      	lsls	r3, r3, #3
 801608e:	4413      	add	r3, r2
 8016090:	3308      	adds	r3, #8
 8016092:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016094:	68fa      	ldr	r2, [r7, #12]
 8016096:	429a      	cmp	r2, r3
 8016098:	d117      	bne.n	80160ca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801609a:	69bb      	ldr	r3, [r7, #24]
 801609c:	681a      	ldr	r2, [r3, #0]
 801609e:	4b38      	ldr	r3, [pc, #224]	; (8016180 <etharp_output+0x1fc>)
 80160a0:	781b      	ldrb	r3, [r3, #0]
 80160a2:	4618      	mov	r0, r3
 80160a4:	4937      	ldr	r1, [pc, #220]	; (8016184 <etharp_output+0x200>)
 80160a6:	4603      	mov	r3, r0
 80160a8:	005b      	lsls	r3, r3, #1
 80160aa:	4403      	add	r3, r0
 80160ac:	00db      	lsls	r3, r3, #3
 80160ae:	440b      	add	r3, r1
 80160b0:	3304      	adds	r3, #4
 80160b2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d108      	bne.n	80160ca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80160b8:	4b31      	ldr	r3, [pc, #196]	; (8016180 <etharp_output+0x1fc>)
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	461a      	mov	r2, r3
 80160be:	68b9      	ldr	r1, [r7, #8]
 80160c0:	68f8      	ldr	r0, [r7, #12]
 80160c2:	f7ff fec5 	bl	8015e50 <etharp_output_to_arp_index>
 80160c6:	4603      	mov	r3, r0
 80160c8:	e04a      	b.n	8016160 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80160ca:	2300      	movs	r3, #0
 80160cc:	75fb      	strb	r3, [r7, #23]
 80160ce:	e031      	b.n	8016134 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80160d0:	7dfa      	ldrb	r2, [r7, #23]
 80160d2:	492c      	ldr	r1, [pc, #176]	; (8016184 <etharp_output+0x200>)
 80160d4:	4613      	mov	r3, r2
 80160d6:	005b      	lsls	r3, r3, #1
 80160d8:	4413      	add	r3, r2
 80160da:	00db      	lsls	r3, r3, #3
 80160dc:	440b      	add	r3, r1
 80160de:	3314      	adds	r3, #20
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	d923      	bls.n	801612e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80160e6:	7dfa      	ldrb	r2, [r7, #23]
 80160e8:	4926      	ldr	r1, [pc, #152]	; (8016184 <etharp_output+0x200>)
 80160ea:	4613      	mov	r3, r2
 80160ec:	005b      	lsls	r3, r3, #1
 80160ee:	4413      	add	r3, r2
 80160f0:	00db      	lsls	r3, r3, #3
 80160f2:	440b      	add	r3, r1
 80160f4:	3308      	adds	r3, #8
 80160f6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80160f8:	68fa      	ldr	r2, [r7, #12]
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d117      	bne.n	801612e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80160fe:	69bb      	ldr	r3, [r7, #24]
 8016100:	6819      	ldr	r1, [r3, #0]
 8016102:	7dfa      	ldrb	r2, [r7, #23]
 8016104:	481f      	ldr	r0, [pc, #124]	; (8016184 <etharp_output+0x200>)
 8016106:	4613      	mov	r3, r2
 8016108:	005b      	lsls	r3, r3, #1
 801610a:	4413      	add	r3, r2
 801610c:	00db      	lsls	r3, r3, #3
 801610e:	4403      	add	r3, r0
 8016110:	3304      	adds	r3, #4
 8016112:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016114:	4299      	cmp	r1, r3
 8016116:	d10a      	bne.n	801612e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016118:	4a19      	ldr	r2, [pc, #100]	; (8016180 <etharp_output+0x1fc>)
 801611a:	7dfb      	ldrb	r3, [r7, #23]
 801611c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801611e:	7dfb      	ldrb	r3, [r7, #23]
 8016120:	461a      	mov	r2, r3
 8016122:	68b9      	ldr	r1, [r7, #8]
 8016124:	68f8      	ldr	r0, [r7, #12]
 8016126:	f7ff fe93 	bl	8015e50 <etharp_output_to_arp_index>
 801612a:	4603      	mov	r3, r0
 801612c:	e018      	b.n	8016160 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801612e:	7dfb      	ldrb	r3, [r7, #23]
 8016130:	3301      	adds	r3, #1
 8016132:	75fb      	strb	r3, [r7, #23]
 8016134:	7dfb      	ldrb	r3, [r7, #23]
 8016136:	2b09      	cmp	r3, #9
 8016138:	d9ca      	bls.n	80160d0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801613a:	68ba      	ldr	r2, [r7, #8]
 801613c:	69b9      	ldr	r1, [r7, #24]
 801613e:	68f8      	ldr	r0, [r7, #12]
 8016140:	f000 f822 	bl	8016188 <etharp_query>
 8016144:	4603      	mov	r3, r0
 8016146:	e00b      	b.n	8016160 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801614e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016152:	9300      	str	r3, [sp, #0]
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	68b9      	ldr	r1, [r7, #8]
 8016158:	68f8      	ldr	r0, [r7, #12]
 801615a:	f001 fd3f 	bl	8017bdc <ethernet_output>
 801615e:	4603      	mov	r3, r0
}
 8016160:	4618      	mov	r0, r3
 8016162:	3720      	adds	r7, #32
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}
 8016168:	0801cb6c 	.word	0x0801cb6c
 801616c:	0801ccbc 	.word	0x0801ccbc
 8016170:	0801cbe4 	.word	0x0801cbe4
 8016174:	0801cd0c 	.word	0x0801cd0c
 8016178:	0801ccac 	.word	0x0801ccac
 801617c:	080242cc 	.word	0x080242cc
 8016180:	20000b64 	.word	0x20000b64
 8016184:	20000a74 	.word	0x20000a74

08016188 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b08c      	sub	sp, #48	; 0x30
 801618c:	af02      	add	r7, sp, #8
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	3326      	adds	r3, #38	; 0x26
 8016198:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801619a:	23ff      	movs	r3, #255	; 0xff
 801619c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80161a0:	2300      	movs	r3, #0
 80161a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	68f9      	ldr	r1, [r7, #12]
 80161aa:	4618      	mov	r0, r3
 80161ac:	f000 fe0e 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 80161b0:	4603      	mov	r3, r0
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d10c      	bne.n	80161d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80161be:	2be0      	cmp	r3, #224	; 0xe0
 80161c0:	d006      	beq.n	80161d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d003      	beq.n	80161d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d102      	bne.n	80161d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80161d0:	f06f 030f 	mvn.w	r3, #15
 80161d4:	e101      	b.n	80163da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80161d6:	68fa      	ldr	r2, [r7, #12]
 80161d8:	2101      	movs	r1, #1
 80161da:	68b8      	ldr	r0, [r7, #8]
 80161dc:	f7ff fb60 	bl	80158a0 <etharp_find_entry>
 80161e0:	4603      	mov	r3, r0
 80161e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80161e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	da02      	bge.n	80161f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80161ec:	8a7b      	ldrh	r3, [r7, #18]
 80161ee:	b25b      	sxtb	r3, r3
 80161f0:	e0f3      	b.n	80163da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80161f2:	8a7b      	ldrh	r3, [r7, #18]
 80161f4:	2b7e      	cmp	r3, #126	; 0x7e
 80161f6:	d906      	bls.n	8016206 <etharp_query+0x7e>
 80161f8:	4b7a      	ldr	r3, [pc, #488]	; (80163e4 <etharp_query+0x25c>)
 80161fa:	f240 32c1 	movw	r2, #961	; 0x3c1
 80161fe:	497a      	ldr	r1, [pc, #488]	; (80163e8 <etharp_query+0x260>)
 8016200:	487a      	ldr	r0, [pc, #488]	; (80163ec <etharp_query+0x264>)
 8016202:	f001 fe53 	bl	8017eac <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016206:	8a7b      	ldrh	r3, [r7, #18]
 8016208:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801620a:	7c7a      	ldrb	r2, [r7, #17]
 801620c:	4978      	ldr	r1, [pc, #480]	; (80163f0 <etharp_query+0x268>)
 801620e:	4613      	mov	r3, r2
 8016210:	005b      	lsls	r3, r3, #1
 8016212:	4413      	add	r3, r2
 8016214:	00db      	lsls	r3, r3, #3
 8016216:	440b      	add	r3, r1
 8016218:	3314      	adds	r3, #20
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d115      	bne.n	801624c <etharp_query+0xc4>
    is_new_entry = 1;
 8016220:	2301      	movs	r3, #1
 8016222:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016224:	7c7a      	ldrb	r2, [r7, #17]
 8016226:	4972      	ldr	r1, [pc, #456]	; (80163f0 <etharp_query+0x268>)
 8016228:	4613      	mov	r3, r2
 801622a:	005b      	lsls	r3, r3, #1
 801622c:	4413      	add	r3, r2
 801622e:	00db      	lsls	r3, r3, #3
 8016230:	440b      	add	r3, r1
 8016232:	3314      	adds	r3, #20
 8016234:	2201      	movs	r2, #1
 8016236:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016238:	7c7a      	ldrb	r2, [r7, #17]
 801623a:	496d      	ldr	r1, [pc, #436]	; (80163f0 <etharp_query+0x268>)
 801623c:	4613      	mov	r3, r2
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	4413      	add	r3, r2
 8016242:	00db      	lsls	r3, r3, #3
 8016244:	440b      	add	r3, r1
 8016246:	3308      	adds	r3, #8
 8016248:	68fa      	ldr	r2, [r7, #12]
 801624a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801624c:	7c7a      	ldrb	r2, [r7, #17]
 801624e:	4968      	ldr	r1, [pc, #416]	; (80163f0 <etharp_query+0x268>)
 8016250:	4613      	mov	r3, r2
 8016252:	005b      	lsls	r3, r3, #1
 8016254:	4413      	add	r3, r2
 8016256:	00db      	lsls	r3, r3, #3
 8016258:	440b      	add	r3, r1
 801625a:	3314      	adds	r3, #20
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	2b01      	cmp	r3, #1
 8016260:	d011      	beq.n	8016286 <etharp_query+0xfe>
 8016262:	7c7a      	ldrb	r2, [r7, #17]
 8016264:	4962      	ldr	r1, [pc, #392]	; (80163f0 <etharp_query+0x268>)
 8016266:	4613      	mov	r3, r2
 8016268:	005b      	lsls	r3, r3, #1
 801626a:	4413      	add	r3, r2
 801626c:	00db      	lsls	r3, r3, #3
 801626e:	440b      	add	r3, r1
 8016270:	3314      	adds	r3, #20
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	2b01      	cmp	r3, #1
 8016276:	d806      	bhi.n	8016286 <etharp_query+0xfe>
 8016278:	4b5a      	ldr	r3, [pc, #360]	; (80163e4 <etharp_query+0x25c>)
 801627a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801627e:	495d      	ldr	r1, [pc, #372]	; (80163f4 <etharp_query+0x26c>)
 8016280:	485a      	ldr	r0, [pc, #360]	; (80163ec <etharp_query+0x264>)
 8016282:	f001 fe13 	bl	8017eac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016286:	6a3b      	ldr	r3, [r7, #32]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d102      	bne.n	8016292 <etharp_query+0x10a>
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d10c      	bne.n	80162ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016292:	68b9      	ldr	r1, [r7, #8]
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	f000 f963 	bl	8016560 <etharp_request>
 801629a:	4603      	mov	r3, r0
 801629c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d102      	bne.n	80162ac <etharp_query+0x124>
      return result;
 80162a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80162aa:	e096      	b.n	80163da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d106      	bne.n	80162c0 <etharp_query+0x138>
 80162b2:	4b4c      	ldr	r3, [pc, #304]	; (80163e4 <etharp_query+0x25c>)
 80162b4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80162b8:	494f      	ldr	r1, [pc, #316]	; (80163f8 <etharp_query+0x270>)
 80162ba:	484c      	ldr	r0, [pc, #304]	; (80163ec <etharp_query+0x264>)
 80162bc:	f001 fdf6 	bl	8017eac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80162c0:	7c7a      	ldrb	r2, [r7, #17]
 80162c2:	494b      	ldr	r1, [pc, #300]	; (80163f0 <etharp_query+0x268>)
 80162c4:	4613      	mov	r3, r2
 80162c6:	005b      	lsls	r3, r3, #1
 80162c8:	4413      	add	r3, r2
 80162ca:	00db      	lsls	r3, r3, #3
 80162cc:	440b      	add	r3, r1
 80162ce:	3314      	adds	r3, #20
 80162d0:	781b      	ldrb	r3, [r3, #0]
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d917      	bls.n	8016306 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80162d6:	4a49      	ldr	r2, [pc, #292]	; (80163fc <etharp_query+0x274>)
 80162d8:	7c7b      	ldrb	r3, [r7, #17]
 80162da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80162dc:	7c7a      	ldrb	r2, [r7, #17]
 80162de:	4613      	mov	r3, r2
 80162e0:	005b      	lsls	r3, r3, #1
 80162e2:	4413      	add	r3, r2
 80162e4:	00db      	lsls	r3, r3, #3
 80162e6:	3308      	adds	r3, #8
 80162e8:	4a41      	ldr	r2, [pc, #260]	; (80163f0 <etharp_query+0x268>)
 80162ea:	4413      	add	r3, r2
 80162ec:	3304      	adds	r3, #4
 80162ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80162f2:	9200      	str	r2, [sp, #0]
 80162f4:	697a      	ldr	r2, [r7, #20]
 80162f6:	6879      	ldr	r1, [r7, #4]
 80162f8:	68f8      	ldr	r0, [r7, #12]
 80162fa:	f001 fc6f 	bl	8017bdc <ethernet_output>
 80162fe:	4603      	mov	r3, r0
 8016300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016304:	e067      	b.n	80163d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016306:	7c7a      	ldrb	r2, [r7, #17]
 8016308:	4939      	ldr	r1, [pc, #228]	; (80163f0 <etharp_query+0x268>)
 801630a:	4613      	mov	r3, r2
 801630c:	005b      	lsls	r3, r3, #1
 801630e:	4413      	add	r3, r2
 8016310:	00db      	lsls	r3, r3, #3
 8016312:	440b      	add	r3, r1
 8016314:	3314      	adds	r3, #20
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	2b01      	cmp	r3, #1
 801631a:	d15c      	bne.n	80163d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801631c:	2300      	movs	r3, #0
 801631e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016324:	e01c      	b.n	8016360 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016326:	69fb      	ldr	r3, [r7, #28]
 8016328:	895a      	ldrh	r2, [r3, #10]
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	891b      	ldrh	r3, [r3, #8]
 801632e:	429a      	cmp	r2, r3
 8016330:	d10a      	bne.n	8016348 <etharp_query+0x1c0>
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d006      	beq.n	8016348 <etharp_query+0x1c0>
 801633a:	4b2a      	ldr	r3, [pc, #168]	; (80163e4 <etharp_query+0x25c>)
 801633c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016340:	492f      	ldr	r1, [pc, #188]	; (8016400 <etharp_query+0x278>)
 8016342:	482a      	ldr	r0, [pc, #168]	; (80163ec <etharp_query+0x264>)
 8016344:	f001 fdb2 	bl	8017eac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	7b1b      	ldrb	r3, [r3, #12]
 801634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016350:	2b00      	cmp	r3, #0
 8016352:	d002      	beq.n	801635a <etharp_query+0x1d2>
        copy_needed = 1;
 8016354:	2301      	movs	r3, #1
 8016356:	61bb      	str	r3, [r7, #24]
        break;
 8016358:	e005      	b.n	8016366 <etharp_query+0x1de>
      }
      p = p->next;
 801635a:	69fb      	ldr	r3, [r7, #28]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d1df      	bne.n	8016326 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016366:	69bb      	ldr	r3, [r7, #24]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d007      	beq.n	801637c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801636c:	687a      	ldr	r2, [r7, #4]
 801636e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016372:	200e      	movs	r0, #14
 8016374:	f7f8 fe2e 	bl	800efd4 <pbuf_clone>
 8016378:	61f8      	str	r0, [r7, #28]
 801637a:	e004      	b.n	8016386 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016380:	69f8      	ldr	r0, [r7, #28]
 8016382:	f7f8 fc6b 	bl	800ec5c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d021      	beq.n	80163d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801638c:	7c7a      	ldrb	r2, [r7, #17]
 801638e:	4918      	ldr	r1, [pc, #96]	; (80163f0 <etharp_query+0x268>)
 8016390:	4613      	mov	r3, r2
 8016392:	005b      	lsls	r3, r3, #1
 8016394:	4413      	add	r3, r2
 8016396:	00db      	lsls	r3, r3, #3
 8016398:	440b      	add	r3, r1
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d00a      	beq.n	80163b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80163a0:	7c7a      	ldrb	r2, [r7, #17]
 80163a2:	4913      	ldr	r1, [pc, #76]	; (80163f0 <etharp_query+0x268>)
 80163a4:	4613      	mov	r3, r2
 80163a6:	005b      	lsls	r3, r3, #1
 80163a8:	4413      	add	r3, r2
 80163aa:	00db      	lsls	r3, r3, #3
 80163ac:	440b      	add	r3, r1
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	4618      	mov	r0, r3
 80163b2:	f7f8 fbb3 	bl	800eb1c <pbuf_free>
      }
      arp_table[i].q = p;
 80163b6:	7c7a      	ldrb	r2, [r7, #17]
 80163b8:	490d      	ldr	r1, [pc, #52]	; (80163f0 <etharp_query+0x268>)
 80163ba:	4613      	mov	r3, r2
 80163bc:	005b      	lsls	r3, r3, #1
 80163be:	4413      	add	r3, r2
 80163c0:	00db      	lsls	r3, r3, #3
 80163c2:	440b      	add	r3, r1
 80163c4:	69fa      	ldr	r2, [r7, #28]
 80163c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80163c8:	2300      	movs	r3, #0
 80163ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80163ce:	e002      	b.n	80163d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80163d0:	23ff      	movs	r3, #255	; 0xff
 80163d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80163d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80163da:	4618      	mov	r0, r3
 80163dc:	3728      	adds	r7, #40	; 0x28
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	0801cb6c 	.word	0x0801cb6c
 80163e8:	0801cd18 	.word	0x0801cd18
 80163ec:	0801cbe4 	.word	0x0801cbe4
 80163f0:	20000a74 	.word	0x20000a74
 80163f4:	0801cd28 	.word	0x0801cd28
 80163f8:	0801cd0c 	.word	0x0801cd0c
 80163fc:	20000b64 	.word	0x20000b64
 8016400:	0801cd50 	.word	0x0801cd50

08016404 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b08a      	sub	sp, #40	; 0x28
 8016408:	af02      	add	r7, sp, #8
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	60b9      	str	r1, [r7, #8]
 801640e:	607a      	str	r2, [r7, #4]
 8016410:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016412:	2300      	movs	r3, #0
 8016414:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d106      	bne.n	801642a <etharp_raw+0x26>
 801641c:	4b3a      	ldr	r3, [pc, #232]	; (8016508 <etharp_raw+0x104>)
 801641e:	f240 4257 	movw	r2, #1111	; 0x457
 8016422:	493a      	ldr	r1, [pc, #232]	; (801650c <etharp_raw+0x108>)
 8016424:	483a      	ldr	r0, [pc, #232]	; (8016510 <etharp_raw+0x10c>)
 8016426:	f001 fd41 	bl	8017eac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801642a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801642e:	211c      	movs	r1, #28
 8016430:	200e      	movs	r0, #14
 8016432:	f7f8 f88f 	bl	800e554 <pbuf_alloc>
 8016436:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016438:	69bb      	ldr	r3, [r7, #24]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d102      	bne.n	8016444 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801643e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016442:	e05d      	b.n	8016500 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016444:	69bb      	ldr	r3, [r7, #24]
 8016446:	895b      	ldrh	r3, [r3, #10]
 8016448:	2b1b      	cmp	r3, #27
 801644a:	d806      	bhi.n	801645a <etharp_raw+0x56>
 801644c:	4b2e      	ldr	r3, [pc, #184]	; (8016508 <etharp_raw+0x104>)
 801644e:	f240 4262 	movw	r2, #1122	; 0x462
 8016452:	4930      	ldr	r1, [pc, #192]	; (8016514 <etharp_raw+0x110>)
 8016454:	482e      	ldr	r0, [pc, #184]	; (8016510 <etharp_raw+0x10c>)
 8016456:	f001 fd29 	bl	8017eac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801645a:	69bb      	ldr	r3, [r7, #24]
 801645c:	685b      	ldr	r3, [r3, #4]
 801645e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016460:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016462:	4618      	mov	r0, r3
 8016464:	f7f6 ffc8 	bl	800d3f8 <lwip_htons>
 8016468:	4603      	mov	r3, r0
 801646a:	461a      	mov	r2, r3
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016476:	2b06      	cmp	r3, #6
 8016478:	d006      	beq.n	8016488 <etharp_raw+0x84>
 801647a:	4b23      	ldr	r3, [pc, #140]	; (8016508 <etharp_raw+0x104>)
 801647c:	f240 4269 	movw	r2, #1129	; 0x469
 8016480:	4925      	ldr	r1, [pc, #148]	; (8016518 <etharp_raw+0x114>)
 8016482:	4823      	ldr	r0, [pc, #140]	; (8016510 <etharp_raw+0x10c>)
 8016484:	f001 fd12 	bl	8017eac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	3308      	adds	r3, #8
 801648c:	2206      	movs	r2, #6
 801648e:	6839      	ldr	r1, [r7, #0]
 8016490:	4618      	mov	r0, r3
 8016492:	f001 fc31 	bl	8017cf8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	3312      	adds	r3, #18
 801649a:	2206      	movs	r2, #6
 801649c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801649e:	4618      	mov	r0, r3
 80164a0:	f001 fc2a 	bl	8017cf8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80164a4:	697b      	ldr	r3, [r7, #20]
 80164a6:	330e      	adds	r3, #14
 80164a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164aa:	6812      	ldr	r2, [r2, #0]
 80164ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80164ae:	697b      	ldr	r3, [r7, #20]
 80164b0:	3318      	adds	r3, #24
 80164b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164b4:	6812      	ldr	r2, [r2, #0]
 80164b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80164b8:	697b      	ldr	r3, [r7, #20]
 80164ba:	2200      	movs	r2, #0
 80164bc:	701a      	strb	r2, [r3, #0]
 80164be:	2200      	movs	r2, #0
 80164c0:	f042 0201 	orr.w	r2, r2, #1
 80164c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	2200      	movs	r2, #0
 80164ca:	f042 0208 	orr.w	r2, r2, #8
 80164ce:	709a      	strb	r2, [r3, #2]
 80164d0:	2200      	movs	r2, #0
 80164d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	2206      	movs	r2, #6
 80164d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	2204      	movs	r2, #4
 80164de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80164e0:	f640 0306 	movw	r3, #2054	; 0x806
 80164e4:	9300      	str	r3, [sp, #0]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	68ba      	ldr	r2, [r7, #8]
 80164ea:	69b9      	ldr	r1, [r7, #24]
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	f001 fb75 	bl	8017bdc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80164f2:	69b8      	ldr	r0, [r7, #24]
 80164f4:	f7f8 fb12 	bl	800eb1c <pbuf_free>
  p = NULL;
 80164f8:	2300      	movs	r3, #0
 80164fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80164fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016500:	4618      	mov	r0, r3
 8016502:	3720      	adds	r7, #32
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}
 8016508:	0801cb6c 	.word	0x0801cb6c
 801650c:	0801ccbc 	.word	0x0801ccbc
 8016510:	0801cbe4 	.word	0x0801cbe4
 8016514:	0801cd6c 	.word	0x0801cd6c
 8016518:	0801cda0 	.word	0x0801cda0

0801651c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b088      	sub	sp, #32
 8016520:	af04      	add	r7, sp, #16
 8016522:	60f8      	str	r0, [r7, #12]
 8016524:	60b9      	str	r1, [r7, #8]
 8016526:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016538:	2201      	movs	r2, #1
 801653a:	9203      	str	r2, [sp, #12]
 801653c:	68ba      	ldr	r2, [r7, #8]
 801653e:	9202      	str	r2, [sp, #8]
 8016540:	4a06      	ldr	r2, [pc, #24]	; (801655c <etharp_request_dst+0x40>)
 8016542:	9201      	str	r2, [sp, #4]
 8016544:	9300      	str	r3, [sp, #0]
 8016546:	4603      	mov	r3, r0
 8016548:	687a      	ldr	r2, [r7, #4]
 801654a:	68f8      	ldr	r0, [r7, #12]
 801654c:	f7ff ff5a 	bl	8016404 <etharp_raw>
 8016550:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016552:	4618      	mov	r0, r3
 8016554:	3710      	adds	r7, #16
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}
 801655a:	bf00      	nop
 801655c:	080242d4 	.word	0x080242d4

08016560 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b082      	sub	sp, #8
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
 8016568:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801656a:	4a05      	ldr	r2, [pc, #20]	; (8016580 <etharp_request+0x20>)
 801656c:	6839      	ldr	r1, [r7, #0]
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f7ff ffd4 	bl	801651c <etharp_request_dst>
 8016574:	4603      	mov	r3, r0
}
 8016576:	4618      	mov	r0, r3
 8016578:	3708      	adds	r7, #8
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
 801657e:	bf00      	nop
 8016580:	080242cc 	.word	0x080242cc

08016584 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b08e      	sub	sp, #56	; 0x38
 8016588:	af04      	add	r7, sp, #16
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801658e:	4b79      	ldr	r3, [pc, #484]	; (8016774 <icmp_input+0x1f0>)
 8016590:	689b      	ldr	r3, [r3, #8]
 8016592:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016596:	781b      	ldrb	r3, [r3, #0]
 8016598:	f003 030f 	and.w	r3, r3, #15
 801659c:	b2db      	uxtb	r3, r3
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	b2db      	uxtb	r3, r3
 80165a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80165a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165a6:	2b13      	cmp	r3, #19
 80165a8:	f240 80cd 	bls.w	8016746 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	895b      	ldrh	r3, [r3, #10]
 80165b0:	2b03      	cmp	r3, #3
 80165b2:	f240 80ca 	bls.w	801674a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	685b      	ldr	r3, [r3, #4]
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80165c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	f000 80b7 	beq.w	8016738 <icmp_input+0x1b4>
 80165ca:	2b08      	cmp	r3, #8
 80165cc:	f040 80b7 	bne.w	801673e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80165d0:	4b69      	ldr	r3, [pc, #420]	; (8016778 <icmp_input+0x1f4>)
 80165d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80165d4:	4b67      	ldr	r3, [pc, #412]	; (8016774 <icmp_input+0x1f0>)
 80165d6:	695b      	ldr	r3, [r3, #20]
 80165d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80165dc:	2be0      	cmp	r3, #224	; 0xe0
 80165de:	f000 80bb 	beq.w	8016758 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80165e2:	4b64      	ldr	r3, [pc, #400]	; (8016774 <icmp_input+0x1f0>)
 80165e4:	695b      	ldr	r3, [r3, #20]
 80165e6:	4a63      	ldr	r2, [pc, #396]	; (8016774 <icmp_input+0x1f0>)
 80165e8:	6812      	ldr	r2, [r2, #0]
 80165ea:	4611      	mov	r1, r2
 80165ec:	4618      	mov	r0, r3
 80165ee:	f000 fbed 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	f040 80b1 	bne.w	801675c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	891b      	ldrh	r3, [r3, #8]
 80165fe:	2b07      	cmp	r3, #7
 8016600:	f240 80a5 	bls.w	801674e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016606:	330e      	adds	r3, #14
 8016608:	4619      	mov	r1, r3
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f7f8 f9f0 	bl	800e9f0 <pbuf_add_header>
 8016610:	4603      	mov	r3, r0
 8016612:	2b00      	cmp	r3, #0
 8016614:	d04b      	beq.n	80166ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	891a      	ldrh	r2, [r3, #8]
 801661a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801661c:	4413      	add	r3, r2
 801661e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	891b      	ldrh	r3, [r3, #8]
 8016624:	8b7a      	ldrh	r2, [r7, #26]
 8016626:	429a      	cmp	r2, r3
 8016628:	f0c0 809a 	bcc.w	8016760 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801662c:	8b7b      	ldrh	r3, [r7, #26]
 801662e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016632:	4619      	mov	r1, r3
 8016634:	200e      	movs	r0, #14
 8016636:	f7f7 ff8d 	bl	800e554 <pbuf_alloc>
 801663a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801663c:	697b      	ldr	r3, [r7, #20]
 801663e:	2b00      	cmp	r3, #0
 8016640:	f000 8090 	beq.w	8016764 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	895b      	ldrh	r3, [r3, #10]
 8016648:	461a      	mov	r2, r3
 801664a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801664c:	3308      	adds	r3, #8
 801664e:	429a      	cmp	r2, r3
 8016650:	d203      	bcs.n	801665a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016652:	6978      	ldr	r0, [r7, #20]
 8016654:	f7f8 fa62 	bl	800eb1c <pbuf_free>
          goto icmperr;
 8016658:	e085      	b.n	8016766 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801665a:	697b      	ldr	r3, [r7, #20]
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016662:	4618      	mov	r0, r3
 8016664:	f001 fb48 	bl	8017cf8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016668:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801666a:	4619      	mov	r1, r3
 801666c:	6978      	ldr	r0, [r7, #20]
 801666e:	f7f8 f9cf 	bl	800ea10 <pbuf_remove_header>
 8016672:	4603      	mov	r3, r0
 8016674:	2b00      	cmp	r3, #0
 8016676:	d009      	beq.n	801668c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016678:	4b40      	ldr	r3, [pc, #256]	; (801677c <icmp_input+0x1f8>)
 801667a:	22b6      	movs	r2, #182	; 0xb6
 801667c:	4940      	ldr	r1, [pc, #256]	; (8016780 <icmp_input+0x1fc>)
 801667e:	4841      	ldr	r0, [pc, #260]	; (8016784 <icmp_input+0x200>)
 8016680:	f001 fc14 	bl	8017eac <iprintf>
          pbuf_free(r);
 8016684:	6978      	ldr	r0, [r7, #20]
 8016686:	f7f8 fa49 	bl	800eb1c <pbuf_free>
          goto icmperr;
 801668a:	e06c      	b.n	8016766 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801668c:	6879      	ldr	r1, [r7, #4]
 801668e:	6978      	ldr	r0, [r7, #20]
 8016690:	f7f8 fb5c 	bl	800ed4c <pbuf_copy>
 8016694:	4603      	mov	r3, r0
 8016696:	2b00      	cmp	r3, #0
 8016698:	d003      	beq.n	80166a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801669a:	6978      	ldr	r0, [r7, #20]
 801669c:	f7f8 fa3e 	bl	800eb1c <pbuf_free>
          goto icmperr;
 80166a0:	e061      	b.n	8016766 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	f7f8 fa3a 	bl	800eb1c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80166a8:	697b      	ldr	r3, [r7, #20]
 80166aa:	607b      	str	r3, [r7, #4]
 80166ac:	e00f      	b.n	80166ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80166ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166b0:	330e      	adds	r3, #14
 80166b2:	4619      	mov	r1, r3
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f7f8 f9ab 	bl	800ea10 <pbuf_remove_header>
 80166ba:	4603      	mov	r3, r0
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d006      	beq.n	80166ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80166c0:	4b2e      	ldr	r3, [pc, #184]	; (801677c <icmp_input+0x1f8>)
 80166c2:	22c7      	movs	r2, #199	; 0xc7
 80166c4:	4930      	ldr	r1, [pc, #192]	; (8016788 <icmp_input+0x204>)
 80166c6:	482f      	ldr	r0, [pc, #188]	; (8016784 <icmp_input+0x200>)
 80166c8:	f001 fbf0 	bl	8017eac <iprintf>
          goto icmperr;
 80166cc:	e04b      	b.n	8016766 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	685b      	ldr	r3, [r3, #4]
 80166d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80166d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166d6:	4619      	mov	r1, r3
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	f7f8 f989 	bl	800e9f0 <pbuf_add_header>
 80166de:	4603      	mov	r3, r0
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d12b      	bne.n	801673c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	685b      	ldr	r3, [r3, #4]
 80166e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80166ea:	69fb      	ldr	r3, [r7, #28]
 80166ec:	681a      	ldr	r2, [r3, #0]
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80166f2:	4b20      	ldr	r3, [pc, #128]	; (8016774 <icmp_input+0x1f0>)
 80166f4:	691a      	ldr	r2, [r3, #16]
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80166fa:	693b      	ldr	r3, [r7, #16]
 80166fc:	2200      	movs	r2, #0
 80166fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	2200      	movs	r2, #0
 8016704:	709a      	strb	r2, [r3, #2]
 8016706:	2200      	movs	r2, #0
 8016708:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	22ff      	movs	r2, #255	; 0xff
 801670e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	2200      	movs	r2, #0
 8016714:	729a      	strb	r2, [r3, #10]
 8016716:	2200      	movs	r2, #0
 8016718:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	9302      	str	r3, [sp, #8]
 801671e:	2301      	movs	r3, #1
 8016720:	9301      	str	r3, [sp, #4]
 8016722:	2300      	movs	r3, #0
 8016724:	9300      	str	r3, [sp, #0]
 8016726:	23ff      	movs	r3, #255	; 0xff
 8016728:	2200      	movs	r2, #0
 801672a:	69f9      	ldr	r1, [r7, #28]
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f000 fa75 	bl	8016c1c <ip4_output_if>
 8016732:	4603      	mov	r3, r0
 8016734:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016736:	e001      	b.n	801673c <icmp_input+0x1b8>
      break;
 8016738:	bf00      	nop
 801673a:	e000      	b.n	801673e <icmp_input+0x1ba>
      break;
 801673c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801673e:	6878      	ldr	r0, [r7, #4]
 8016740:	f7f8 f9ec 	bl	800eb1c <pbuf_free>
  return;
 8016744:	e013      	b.n	801676e <icmp_input+0x1ea>
    goto lenerr;
 8016746:	bf00      	nop
 8016748:	e002      	b.n	8016750 <icmp_input+0x1cc>
    goto lenerr;
 801674a:	bf00      	nop
 801674c:	e000      	b.n	8016750 <icmp_input+0x1cc>
        goto lenerr;
 801674e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	f7f8 f9e3 	bl	800eb1c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016756:	e00a      	b.n	801676e <icmp_input+0x1ea>
        goto icmperr;
 8016758:	bf00      	nop
 801675a:	e004      	b.n	8016766 <icmp_input+0x1e2>
        goto icmperr;
 801675c:	bf00      	nop
 801675e:	e002      	b.n	8016766 <icmp_input+0x1e2>
          goto icmperr;
 8016760:	bf00      	nop
 8016762:	e000      	b.n	8016766 <icmp_input+0x1e2>
          goto icmperr;
 8016764:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	f7f8 f9d8 	bl	800eb1c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801676c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801676e:	3728      	adds	r7, #40	; 0x28
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}
 8016774:	2000c5cc 	.word	0x2000c5cc
 8016778:	2000c5e0 	.word	0x2000c5e0
 801677c:	0801cde4 	.word	0x0801cde4
 8016780:	0801ce1c 	.word	0x0801ce1c
 8016784:	0801ce54 	.word	0x0801ce54
 8016788:	0801ce7c 	.word	0x0801ce7c

0801678c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	460b      	mov	r3, r1
 8016796:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016798:	78fb      	ldrb	r3, [r7, #3]
 801679a:	461a      	mov	r2, r3
 801679c:	2103      	movs	r1, #3
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f000 f814 	bl	80167cc <icmp_send_response>
}
 80167a4:	bf00      	nop
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	460b      	mov	r3, r1
 80167b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80167b8:	78fb      	ldrb	r3, [r7, #3]
 80167ba:	461a      	mov	r2, r3
 80167bc:	210b      	movs	r1, #11
 80167be:	6878      	ldr	r0, [r7, #4]
 80167c0:	f000 f804 	bl	80167cc <icmp_send_response>
}
 80167c4:	bf00      	nop
 80167c6:	3708      	adds	r7, #8
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}

080167cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b08c      	sub	sp, #48	; 0x30
 80167d0:	af04      	add	r7, sp, #16
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	460b      	mov	r3, r1
 80167d6:	70fb      	strb	r3, [r7, #3]
 80167d8:	4613      	mov	r3, r2
 80167da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80167dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167e0:	2124      	movs	r1, #36	; 0x24
 80167e2:	2022      	movs	r0, #34	; 0x22
 80167e4:	f7f7 feb6 	bl	800e554 <pbuf_alloc>
 80167e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80167ea:	69fb      	ldr	r3, [r7, #28]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d04c      	beq.n	801688a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80167f0:	69fb      	ldr	r3, [r7, #28]
 80167f2:	895b      	ldrh	r3, [r3, #10]
 80167f4:	2b23      	cmp	r3, #35	; 0x23
 80167f6:	d806      	bhi.n	8016806 <icmp_send_response+0x3a>
 80167f8:	4b26      	ldr	r3, [pc, #152]	; (8016894 <icmp_send_response+0xc8>)
 80167fa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80167fe:	4926      	ldr	r1, [pc, #152]	; (8016898 <icmp_send_response+0xcc>)
 8016800:	4826      	ldr	r0, [pc, #152]	; (801689c <icmp_send_response+0xd0>)
 8016802:	f001 fb53 	bl	8017eac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801680c:	69fb      	ldr	r3, [r7, #28]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	78fa      	ldrb	r2, [r7, #3]
 8016816:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016818:	697b      	ldr	r3, [r7, #20]
 801681a:	78ba      	ldrb	r2, [r7, #2]
 801681c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	2200      	movs	r2, #0
 8016822:	711a      	strb	r2, [r3, #4]
 8016824:	2200      	movs	r2, #0
 8016826:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016828:	697b      	ldr	r3, [r7, #20]
 801682a:	2200      	movs	r2, #0
 801682c:	719a      	strb	r2, [r3, #6]
 801682e:	2200      	movs	r2, #0
 8016830:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	685b      	ldr	r3, [r3, #4]
 8016836:	f103 0008 	add.w	r0, r3, #8
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	685b      	ldr	r3, [r3, #4]
 801683e:	221c      	movs	r2, #28
 8016840:	4619      	mov	r1, r3
 8016842:	f001 fa59 	bl	8017cf8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016846:	69bb      	ldr	r3, [r7, #24]
 8016848:	68db      	ldr	r3, [r3, #12]
 801684a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801684c:	f107 030c 	add.w	r3, r7, #12
 8016850:	4618      	mov	r0, r3
 8016852:	f000 f825 	bl	80168a0 <ip4_route>
 8016856:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d011      	beq.n	8016882 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	2200      	movs	r2, #0
 8016862:	709a      	strb	r2, [r3, #2]
 8016864:	2200      	movs	r2, #0
 8016866:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016868:	f107 020c 	add.w	r2, r7, #12
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	9302      	str	r3, [sp, #8]
 8016870:	2301      	movs	r3, #1
 8016872:	9301      	str	r3, [sp, #4]
 8016874:	2300      	movs	r3, #0
 8016876:	9300      	str	r3, [sp, #0]
 8016878:	23ff      	movs	r3, #255	; 0xff
 801687a:	2100      	movs	r1, #0
 801687c:	69f8      	ldr	r0, [r7, #28]
 801687e:	f000 f9cd 	bl	8016c1c <ip4_output_if>
  }
  pbuf_free(q);
 8016882:	69f8      	ldr	r0, [r7, #28]
 8016884:	f7f8 f94a 	bl	800eb1c <pbuf_free>
 8016888:	e000      	b.n	801688c <icmp_send_response+0xc0>
    return;
 801688a:	bf00      	nop
}
 801688c:	3720      	adds	r7, #32
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}
 8016892:	bf00      	nop
 8016894:	0801cde4 	.word	0x0801cde4
 8016898:	0801ceb0 	.word	0x0801ceb0
 801689c:	0801ce54 	.word	0x0801ce54

080168a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80168a0:	b480      	push	{r7}
 80168a2:	b085      	sub	sp, #20
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80168a8:	4b33      	ldr	r3, [pc, #204]	; (8016978 <ip4_route+0xd8>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	60fb      	str	r3, [r7, #12]
 80168ae:	e036      	b.n	801691e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168b6:	f003 0301 	and.w	r3, r3, #1
 80168ba:	b2db      	uxtb	r3, r3
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d02b      	beq.n	8016918 <ip4_route+0x78>
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168c6:	089b      	lsrs	r3, r3, #2
 80168c8:	f003 0301 	and.w	r3, r3, #1
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d022      	beq.n	8016918 <ip4_route+0x78>
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	3304      	adds	r3, #4
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d01d      	beq.n	8016918 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681a      	ldr	r2, [r3, #0]
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	3304      	adds	r3, #4
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	405a      	eors	r2, r3
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	3308      	adds	r3, #8
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	4013      	ands	r3, r2
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d101      	bne.n	80168f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	e038      	b.n	801696a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168fe:	f003 0302 	and.w	r3, r3, #2
 8016902:	2b00      	cmp	r3, #0
 8016904:	d108      	bne.n	8016918 <ip4_route+0x78>
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	681a      	ldr	r2, [r3, #0]
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	330c      	adds	r3, #12
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	429a      	cmp	r2, r3
 8016912:	d101      	bne.n	8016918 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	e028      	b.n	801696a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	60fb      	str	r3, [r7, #12]
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d1c5      	bne.n	80168b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016924:	4b15      	ldr	r3, [pc, #84]	; (801697c <ip4_route+0xdc>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d01a      	beq.n	8016962 <ip4_route+0xc2>
 801692c:	4b13      	ldr	r3, [pc, #76]	; (801697c <ip4_route+0xdc>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016934:	f003 0301 	and.w	r3, r3, #1
 8016938:	2b00      	cmp	r3, #0
 801693a:	d012      	beq.n	8016962 <ip4_route+0xc2>
 801693c:	4b0f      	ldr	r3, [pc, #60]	; (801697c <ip4_route+0xdc>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016944:	f003 0304 	and.w	r3, r3, #4
 8016948:	2b00      	cmp	r3, #0
 801694a:	d00a      	beq.n	8016962 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801694c:	4b0b      	ldr	r3, [pc, #44]	; (801697c <ip4_route+0xdc>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	3304      	adds	r3, #4
 8016952:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016954:	2b00      	cmp	r3, #0
 8016956:	d004      	beq.n	8016962 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	b2db      	uxtb	r3, r3
 801695e:	2b7f      	cmp	r3, #127	; 0x7f
 8016960:	d101      	bne.n	8016966 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016962:	2300      	movs	r3, #0
 8016964:	e001      	b.n	801696a <ip4_route+0xca>
  }

  return netif_default;
 8016966:	4b05      	ldr	r3, [pc, #20]	; (801697c <ip4_route+0xdc>)
 8016968:	681b      	ldr	r3, [r3, #0]
}
 801696a:	4618      	mov	r0, r3
 801696c:	3714      	adds	r7, #20
 801696e:	46bd      	mov	sp, r7
 8016970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016974:	4770      	bx	lr
 8016976:	bf00      	nop
 8016978:	2000fb00 	.word	0x2000fb00
 801697c:	2000fb04 	.word	0x2000fb04

08016980 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801698e:	f003 0301 	and.w	r3, r3, #1
 8016992:	b2db      	uxtb	r3, r3
 8016994:	2b00      	cmp	r3, #0
 8016996:	d016      	beq.n	80169c6 <ip4_input_accept+0x46>
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	3304      	adds	r3, #4
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d011      	beq.n	80169c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80169a2:	4b0b      	ldr	r3, [pc, #44]	; (80169d0 <ip4_input_accept+0x50>)
 80169a4:	695a      	ldr	r2, [r3, #20]
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	3304      	adds	r3, #4
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d008      	beq.n	80169c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80169b0:	4b07      	ldr	r3, [pc, #28]	; (80169d0 <ip4_input_accept+0x50>)
 80169b2:	695b      	ldr	r3, [r3, #20]
 80169b4:	6879      	ldr	r1, [r7, #4]
 80169b6:	4618      	mov	r0, r3
 80169b8:	f000 fa08 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 80169bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d001      	beq.n	80169c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80169c2:	2301      	movs	r3, #1
 80169c4:	e000      	b.n	80169c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80169c6:	2300      	movs	r3, #0
}
 80169c8:	4618      	mov	r0, r3
 80169ca:	3708      	adds	r7, #8
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	2000c5cc 	.word	0x2000c5cc

080169d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b086      	sub	sp, #24
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	091b      	lsrs	r3, r3, #4
 80169ea:	b2db      	uxtb	r3, r3
 80169ec:	2b04      	cmp	r3, #4
 80169ee:	d004      	beq.n	80169fa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80169f0:	6878      	ldr	r0, [r7, #4]
 80169f2:	f7f8 f893 	bl	800eb1c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80169f6:	2300      	movs	r3, #0
 80169f8:	e107      	b.n	8016c0a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80169fa:	697b      	ldr	r3, [r7, #20]
 80169fc:	781b      	ldrb	r3, [r3, #0]
 80169fe:	f003 030f 	and.w	r3, r3, #15
 8016a02:	b2db      	uxtb	r3, r3
 8016a04:	009b      	lsls	r3, r3, #2
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016a0a:	697b      	ldr	r3, [r7, #20]
 8016a0c:	885b      	ldrh	r3, [r3, #2]
 8016a0e:	b29b      	uxth	r3, r3
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7f6 fcf1 	bl	800d3f8 <lwip_htons>
 8016a16:	4603      	mov	r3, r0
 8016a18:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	891b      	ldrh	r3, [r3, #8]
 8016a1e:	89ba      	ldrh	r2, [r7, #12]
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d204      	bcs.n	8016a2e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016a24:	89bb      	ldrh	r3, [r7, #12]
 8016a26:	4619      	mov	r1, r3
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f7f7 fef1 	bl	800e810 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	895b      	ldrh	r3, [r3, #10]
 8016a32:	89fa      	ldrh	r2, [r7, #14]
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d807      	bhi.n	8016a48 <ip4_input+0x74>
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	891b      	ldrh	r3, [r3, #8]
 8016a3c:	89ba      	ldrh	r2, [r7, #12]
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d802      	bhi.n	8016a48 <ip4_input+0x74>
 8016a42:	89fb      	ldrh	r3, [r7, #14]
 8016a44:	2b13      	cmp	r3, #19
 8016a46:	d804      	bhi.n	8016a52 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016a48:	6878      	ldr	r0, [r7, #4]
 8016a4a:	f7f8 f867 	bl	800eb1c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	e0db      	b.n	8016c0a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016a52:	697b      	ldr	r3, [r7, #20]
 8016a54:	691b      	ldr	r3, [r3, #16]
 8016a56:	4a6f      	ldr	r2, [pc, #444]	; (8016c14 <ip4_input+0x240>)
 8016a58:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	68db      	ldr	r3, [r3, #12]
 8016a5e:	4a6d      	ldr	r2, [pc, #436]	; (8016c14 <ip4_input+0x240>)
 8016a60:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016a62:	4b6c      	ldr	r3, [pc, #432]	; (8016c14 <ip4_input+0x240>)
 8016a64:	695b      	ldr	r3, [r3, #20]
 8016a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a6a:	2be0      	cmp	r3, #224	; 0xe0
 8016a6c:	d112      	bne.n	8016a94 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016a6e:	683b      	ldr	r3, [r7, #0]
 8016a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a74:	f003 0301 	and.w	r3, r3, #1
 8016a78:	b2db      	uxtb	r3, r3
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d007      	beq.n	8016a8e <ip4_input+0xba>
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	3304      	adds	r3, #4
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d002      	beq.n	8016a8e <ip4_input+0xba>
      netif = inp;
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	613b      	str	r3, [r7, #16]
 8016a8c:	e02a      	b.n	8016ae4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	613b      	str	r3, [r7, #16]
 8016a92:	e027      	b.n	8016ae4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016a94:	6838      	ldr	r0, [r7, #0]
 8016a96:	f7ff ff73 	bl	8016980 <ip4_input_accept>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d002      	beq.n	8016aa6 <ip4_input+0xd2>
      netif = inp;
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	613b      	str	r3, [r7, #16]
 8016aa4:	e01e      	b.n	8016ae4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016aaa:	4b5a      	ldr	r3, [pc, #360]	; (8016c14 <ip4_input+0x240>)
 8016aac:	695b      	ldr	r3, [r3, #20]
 8016aae:	b2db      	uxtb	r3, r3
 8016ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8016ab2:	d017      	beq.n	8016ae4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016ab4:	4b58      	ldr	r3, [pc, #352]	; (8016c18 <ip4_input+0x244>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	613b      	str	r3, [r7, #16]
 8016aba:	e00e      	b.n	8016ada <ip4_input+0x106>
          if (netif == inp) {
 8016abc:	693a      	ldr	r2, [r7, #16]
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d006      	beq.n	8016ad2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016ac4:	6938      	ldr	r0, [r7, #16]
 8016ac6:	f7ff ff5b 	bl	8016980 <ip4_input_accept>
 8016aca:	4603      	mov	r3, r0
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d108      	bne.n	8016ae2 <ip4_input+0x10e>
 8016ad0:	e000      	b.n	8016ad4 <ip4_input+0x100>
            continue;
 8016ad2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	613b      	str	r3, [r7, #16]
 8016ada:	693b      	ldr	r3, [r7, #16]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d1ed      	bne.n	8016abc <ip4_input+0xe8>
 8016ae0:	e000      	b.n	8016ae4 <ip4_input+0x110>
            break;
 8016ae2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016ae4:	4b4b      	ldr	r3, [pc, #300]	; (8016c14 <ip4_input+0x240>)
 8016ae6:	691b      	ldr	r3, [r3, #16]
 8016ae8:	6839      	ldr	r1, [r7, #0]
 8016aea:	4618      	mov	r0, r3
 8016aec:	f000 f96e 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 8016af0:	4603      	mov	r3, r0
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d105      	bne.n	8016b02 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016af6:	4b47      	ldr	r3, [pc, #284]	; (8016c14 <ip4_input+0x240>)
 8016af8:	691b      	ldr	r3, [r3, #16]
 8016afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016afe:	2be0      	cmp	r3, #224	; 0xe0
 8016b00:	d104      	bne.n	8016b0c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	f7f8 f80a 	bl	800eb1c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	e07e      	b.n	8016c0a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d104      	bne.n	8016b1c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f7f8 f802 	bl	800eb1c <pbuf_free>
    return ERR_OK;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	e076      	b.n	8016c0a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	88db      	ldrh	r3, [r3, #6]
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	461a      	mov	r2, r3
 8016b24:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016b28:	4013      	ands	r3, r2
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d00b      	beq.n	8016b46 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f000 fc92 	bl	8017458 <ip4_reass>
 8016b34:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d101      	bne.n	8016b40 <ip4_input+0x16c>
      return ERR_OK;
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	e064      	b.n	8016c0a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	685b      	ldr	r3, [r3, #4]
 8016b44:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016b46:	4a33      	ldr	r2, [pc, #204]	; (8016c14 <ip4_input+0x240>)
 8016b48:	693b      	ldr	r3, [r7, #16]
 8016b4a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016b4c:	4a31      	ldr	r2, [pc, #196]	; (8016c14 <ip4_input+0x240>)
 8016b4e:	683b      	ldr	r3, [r7, #0]
 8016b50:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016b52:	4a30      	ldr	r2, [pc, #192]	; (8016c14 <ip4_input+0x240>)
 8016b54:	697b      	ldr	r3, [r7, #20]
 8016b56:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	f003 030f 	and.w	r3, r3, #15
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	009b      	lsls	r3, r3, #2
 8016b64:	b2db      	uxtb	r3, r3
 8016b66:	b29a      	uxth	r2, r3
 8016b68:	4b2a      	ldr	r3, [pc, #168]	; (8016c14 <ip4_input+0x240>)
 8016b6a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016b6c:	89fb      	ldrh	r3, [r7, #14]
 8016b6e:	4619      	mov	r1, r3
 8016b70:	6878      	ldr	r0, [r7, #4]
 8016b72:	f7f7 ff4d 	bl	800ea10 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	7a5b      	ldrb	r3, [r3, #9]
 8016b7a:	2b11      	cmp	r3, #17
 8016b7c:	d006      	beq.n	8016b8c <ip4_input+0x1b8>
 8016b7e:	2b11      	cmp	r3, #17
 8016b80:	dc13      	bgt.n	8016baa <ip4_input+0x1d6>
 8016b82:	2b01      	cmp	r3, #1
 8016b84:	d00c      	beq.n	8016ba0 <ip4_input+0x1cc>
 8016b86:	2b06      	cmp	r3, #6
 8016b88:	d005      	beq.n	8016b96 <ip4_input+0x1c2>
 8016b8a:	e00e      	b.n	8016baa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016b8c:	6839      	ldr	r1, [r7, #0]
 8016b8e:	6878      	ldr	r0, [r7, #4]
 8016b90:	f7fe fc68 	bl	8015464 <udp_input>
        break;
 8016b94:	e026      	b.n	8016be4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016b96:	6839      	ldr	r1, [r7, #0]
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	f7fa f88d 	bl	8010cb8 <tcp_input>
        break;
 8016b9e:	e021      	b.n	8016be4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016ba0:	6839      	ldr	r1, [r7, #0]
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f7ff fcee 	bl	8016584 <icmp_input>
        break;
 8016ba8:	e01c      	b.n	8016be4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016baa:	4b1a      	ldr	r3, [pc, #104]	; (8016c14 <ip4_input+0x240>)
 8016bac:	695b      	ldr	r3, [r3, #20]
 8016bae:	6939      	ldr	r1, [r7, #16]
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f000 f90b 	bl	8016dcc <ip4_addr_isbroadcast_u32>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d10f      	bne.n	8016bdc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016bbc:	4b15      	ldr	r3, [pc, #84]	; (8016c14 <ip4_input+0x240>)
 8016bbe:	695b      	ldr	r3, [r3, #20]
 8016bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016bc4:	2be0      	cmp	r3, #224	; 0xe0
 8016bc6:	d009      	beq.n	8016bdc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016bc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016bcc:	4619      	mov	r1, r3
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f7f7 ff91 	bl	800eaf6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016bd4:	2102      	movs	r1, #2
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f7ff fdd8 	bl	801678c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f7f7 ff9d 	bl	800eb1c <pbuf_free>
        break;
 8016be2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016be4:	4b0b      	ldr	r3, [pc, #44]	; (8016c14 <ip4_input+0x240>)
 8016be6:	2200      	movs	r2, #0
 8016be8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016bea:	4b0a      	ldr	r3, [pc, #40]	; (8016c14 <ip4_input+0x240>)
 8016bec:	2200      	movs	r2, #0
 8016bee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016bf0:	4b08      	ldr	r3, [pc, #32]	; (8016c14 <ip4_input+0x240>)
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016bf6:	4b07      	ldr	r3, [pc, #28]	; (8016c14 <ip4_input+0x240>)
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016bfc:	4b05      	ldr	r3, [pc, #20]	; (8016c14 <ip4_input+0x240>)
 8016bfe:	2200      	movs	r2, #0
 8016c00:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016c02:	4b04      	ldr	r3, [pc, #16]	; (8016c14 <ip4_input+0x240>)
 8016c04:	2200      	movs	r2, #0
 8016c06:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016c08:	2300      	movs	r3, #0
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3718      	adds	r7, #24
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
 8016c12:	bf00      	nop
 8016c14:	2000c5cc 	.word	0x2000c5cc
 8016c18:	2000fb00 	.word	0x2000fb00

08016c1c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b08a      	sub	sp, #40	; 0x28
 8016c20:	af04      	add	r7, sp, #16
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	607a      	str	r2, [r7, #4]
 8016c28:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d009      	beq.n	8016c48 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016c34:	68bb      	ldr	r3, [r7, #8]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d003      	beq.n	8016c42 <ip4_output_if+0x26>
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d102      	bne.n	8016c48 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c44:	3304      	adds	r3, #4
 8016c46:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016c48:	78fa      	ldrb	r2, [r7, #3]
 8016c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c4c:	9302      	str	r3, [sp, #8]
 8016c4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c52:	9301      	str	r3, [sp, #4]
 8016c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016c58:	9300      	str	r3, [sp, #0]
 8016c5a:	4613      	mov	r3, r2
 8016c5c:	687a      	ldr	r2, [r7, #4]
 8016c5e:	6979      	ldr	r1, [r7, #20]
 8016c60:	68f8      	ldr	r0, [r7, #12]
 8016c62:	f000 f805 	bl	8016c70 <ip4_output_if_src>
 8016c66:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3718      	adds	r7, #24
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b088      	sub	sp, #32
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	60b9      	str	r1, [r7, #8]
 8016c7a:	607a      	str	r2, [r7, #4]
 8016c7c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	7b9b      	ldrb	r3, [r3, #14]
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	d006      	beq.n	8016c94 <ip4_output_if_src+0x24>
 8016c86:	4b4b      	ldr	r3, [pc, #300]	; (8016db4 <ip4_output_if_src+0x144>)
 8016c88:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016c8c:	494a      	ldr	r1, [pc, #296]	; (8016db8 <ip4_output_if_src+0x148>)
 8016c8e:	484b      	ldr	r0, [pc, #300]	; (8016dbc <ip4_output_if_src+0x14c>)
 8016c90:	f001 f90c 	bl	8017eac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d060      	beq.n	8016d5c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016c9a:	2314      	movs	r3, #20
 8016c9c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016c9e:	2114      	movs	r1, #20
 8016ca0:	68f8      	ldr	r0, [r7, #12]
 8016ca2:	f7f7 fea5 	bl	800e9f0 <pbuf_add_header>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d002      	beq.n	8016cb2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016cac:	f06f 0301 	mvn.w	r3, #1
 8016cb0:	e07c      	b.n	8016dac <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	685b      	ldr	r3, [r3, #4]
 8016cb6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	895b      	ldrh	r3, [r3, #10]
 8016cbc:	2b13      	cmp	r3, #19
 8016cbe:	d806      	bhi.n	8016cce <ip4_output_if_src+0x5e>
 8016cc0:	4b3c      	ldr	r3, [pc, #240]	; (8016db4 <ip4_output_if_src+0x144>)
 8016cc2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016cc6:	493e      	ldr	r1, [pc, #248]	; (8016dc0 <ip4_output_if_src+0x150>)
 8016cc8:	483c      	ldr	r0, [pc, #240]	; (8016dbc <ip4_output_if_src+0x14c>)
 8016cca:	f001 f8ef 	bl	8017eac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016cce:	69fb      	ldr	r3, [r7, #28]
 8016cd0:	78fa      	ldrb	r2, [r7, #3]
 8016cd2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016cd4:	69fb      	ldr	r3, [r7, #28]
 8016cd6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016cda:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681a      	ldr	r2, [r3, #0]
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016ce4:	8b7b      	ldrh	r3, [r7, #26]
 8016ce6:	089b      	lsrs	r3, r3, #2
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	b2db      	uxtb	r3, r3
 8016cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cf0:	b2da      	uxtb	r2, r3
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016cf6:	69fb      	ldr	r3, [r7, #28]
 8016cf8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016cfc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	891b      	ldrh	r3, [r3, #8]
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7f6 fb78 	bl	800d3f8 <lwip_htons>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	69fb      	ldr	r3, [r7, #28]
 8016d0e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016d10:	69fb      	ldr	r3, [r7, #28]
 8016d12:	2200      	movs	r2, #0
 8016d14:	719a      	strb	r2, [r3, #6]
 8016d16:	2200      	movs	r2, #0
 8016d18:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016d1a:	4b2a      	ldr	r3, [pc, #168]	; (8016dc4 <ip4_output_if_src+0x154>)
 8016d1c:	881b      	ldrh	r3, [r3, #0]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7f6 fb6a 	bl	800d3f8 <lwip_htons>
 8016d24:	4603      	mov	r3, r0
 8016d26:	461a      	mov	r2, r3
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016d2c:	4b25      	ldr	r3, [pc, #148]	; (8016dc4 <ip4_output_if_src+0x154>)
 8016d2e:	881b      	ldrh	r3, [r3, #0]
 8016d30:	3301      	adds	r3, #1
 8016d32:	b29a      	uxth	r2, r3
 8016d34:	4b23      	ldr	r3, [pc, #140]	; (8016dc4 <ip4_output_if_src+0x154>)
 8016d36:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016d38:	68bb      	ldr	r3, [r7, #8]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d104      	bne.n	8016d48 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016d3e:	4b22      	ldr	r3, [pc, #136]	; (8016dc8 <ip4_output_if_src+0x158>)
 8016d40:	681a      	ldr	r2, [r3, #0]
 8016d42:	69fb      	ldr	r3, [r7, #28]
 8016d44:	60da      	str	r2, [r3, #12]
 8016d46:	e003      	b.n	8016d50 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	681a      	ldr	r2, [r3, #0]
 8016d4c:	69fb      	ldr	r3, [r7, #28]
 8016d4e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016d50:	69fb      	ldr	r3, [r7, #28]
 8016d52:	2200      	movs	r2, #0
 8016d54:	729a      	strb	r2, [r3, #10]
 8016d56:	2200      	movs	r2, #0
 8016d58:	72da      	strb	r2, [r3, #11]
 8016d5a:	e00f      	b.n	8016d7c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	895b      	ldrh	r3, [r3, #10]
 8016d60:	2b13      	cmp	r3, #19
 8016d62:	d802      	bhi.n	8016d6a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016d64:	f06f 0301 	mvn.w	r3, #1
 8016d68:	e020      	b.n	8016dac <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	685b      	ldr	r3, [r3, #4]
 8016d6e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016d70:	69fb      	ldr	r3, [r7, #28]
 8016d72:	691b      	ldr	r3, [r3, #16]
 8016d74:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016d76:	f107 0314 	add.w	r3, r7, #20
 8016d7a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d00c      	beq.n	8016d9e <ip4_output_if_src+0x12e>
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	891a      	ldrh	r2, [r3, #8]
 8016d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016d8c:	429a      	cmp	r2, r3
 8016d8e:	d906      	bls.n	8016d9e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016d90:	687a      	ldr	r2, [r7, #4]
 8016d92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016d94:	68f8      	ldr	r0, [r7, #12]
 8016d96:	f000 fd4d 	bl	8017834 <ip4_frag>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	e006      	b.n	8016dac <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016da0:	695b      	ldr	r3, [r3, #20]
 8016da2:	687a      	ldr	r2, [r7, #4]
 8016da4:	68f9      	ldr	r1, [r7, #12]
 8016da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016da8:	4798      	blx	r3
 8016daa:	4603      	mov	r3, r0
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	3720      	adds	r7, #32
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}
 8016db4:	0801cedc 	.word	0x0801cedc
 8016db8:	0801cf10 	.word	0x0801cf10
 8016dbc:	0801cf1c 	.word	0x0801cf1c
 8016dc0:	0801cf44 	.word	0x0801cf44
 8016dc4:	20000b66 	.word	0x20000b66
 8016dc8:	080242c8 	.word	0x080242c8

08016dcc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016dcc:	b480      	push	{r7}
 8016dce:	b085      	sub	sp, #20
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016de0:	d002      	beq.n	8016de8 <ip4_addr_isbroadcast_u32+0x1c>
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d101      	bne.n	8016dec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016de8:	2301      	movs	r3, #1
 8016dea:	e02a      	b.n	8016e42 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016dec:	683b      	ldr	r3, [r7, #0]
 8016dee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016df2:	f003 0302 	and.w	r3, r3, #2
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d101      	bne.n	8016dfe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	e021      	b.n	8016e42 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	3304      	adds	r3, #4
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d101      	bne.n	8016e0e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	e019      	b.n	8016e42 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016e0e:	68fa      	ldr	r2, [r7, #12]
 8016e10:	683b      	ldr	r3, [r7, #0]
 8016e12:	3304      	adds	r3, #4
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	405a      	eors	r2, r3
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	3308      	adds	r3, #8
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	4013      	ands	r3, r2
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d10d      	bne.n	8016e40 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016e24:	683b      	ldr	r3, [r7, #0]
 8016e26:	3308      	adds	r3, #8
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	43da      	mvns	r2, r3
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016e30:	683b      	ldr	r3, [r7, #0]
 8016e32:	3308      	adds	r3, #8
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016e38:	429a      	cmp	r2, r3
 8016e3a:	d101      	bne.n	8016e40 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016e3c:	2301      	movs	r3, #1
 8016e3e:	e000      	b.n	8016e42 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016e40:	2300      	movs	r3, #0
  }
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3714      	adds	r7, #20
 8016e46:	46bd      	mov	sp, r7
 8016e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4c:	4770      	bx	lr
	...

08016e50 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016e56:	2300      	movs	r3, #0
 8016e58:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016e5a:	4b12      	ldr	r3, [pc, #72]	; (8016ea4 <ip_reass_tmr+0x54>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016e60:	e018      	b.n	8016e94 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	7fdb      	ldrb	r3, [r3, #31]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d00b      	beq.n	8016e82 <ip_reass_tmr+0x32>
      r->timer--;
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	7fdb      	ldrb	r3, [r3, #31]
 8016e6e:	3b01      	subs	r3, #1
 8016e70:	b2da      	uxtb	r2, r3
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	60fb      	str	r3, [r7, #12]
 8016e80:	e008      	b.n	8016e94 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016e8c:	68b9      	ldr	r1, [r7, #8]
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	f000 f80a 	bl	8016ea8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d1e3      	bne.n	8016e62 <ip_reass_tmr+0x12>
    }
  }
}
 8016e9a:	bf00      	nop
 8016e9c:	bf00      	nop
 8016e9e:	3710      	adds	r7, #16
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	20000b68 	.word	0x20000b68

08016ea8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b088      	sub	sp, #32
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
 8016eb0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016eb6:	683a      	ldr	r2, [r7, #0]
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d105      	bne.n	8016eca <ip_reass_free_complete_datagram+0x22>
 8016ebe:	4b45      	ldr	r3, [pc, #276]	; (8016fd4 <ip_reass_free_complete_datagram+0x12c>)
 8016ec0:	22ab      	movs	r2, #171	; 0xab
 8016ec2:	4945      	ldr	r1, [pc, #276]	; (8016fd8 <ip_reass_free_complete_datagram+0x130>)
 8016ec4:	4845      	ldr	r0, [pc, #276]	; (8016fdc <ip_reass_free_complete_datagram+0x134>)
 8016ec6:	f000 fff1 	bl	8017eac <iprintf>
  if (prev != NULL) {
 8016eca:	683b      	ldr	r3, [r7, #0]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d00a      	beq.n	8016ee6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016ed0:	683b      	ldr	r3, [r7, #0]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	429a      	cmp	r2, r3
 8016ed8:	d005      	beq.n	8016ee6 <ip_reass_free_complete_datagram+0x3e>
 8016eda:	4b3e      	ldr	r3, [pc, #248]	; (8016fd4 <ip_reass_free_complete_datagram+0x12c>)
 8016edc:	22ad      	movs	r2, #173	; 0xad
 8016ede:	4940      	ldr	r1, [pc, #256]	; (8016fe0 <ip_reass_free_complete_datagram+0x138>)
 8016ee0:	483e      	ldr	r0, [pc, #248]	; (8016fdc <ip_reass_free_complete_datagram+0x134>)
 8016ee2:	f000 ffe3 	bl	8017eac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	685b      	ldr	r3, [r3, #4]
 8016eec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	889b      	ldrh	r3, [r3, #4]
 8016ef2:	b29b      	uxth	r3, r3
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d12a      	bne.n	8016f4e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	681a      	ldr	r2, [r3, #0]
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016f06:	69bb      	ldr	r3, [r7, #24]
 8016f08:	6858      	ldr	r0, [r3, #4]
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	3308      	adds	r3, #8
 8016f0e:	2214      	movs	r2, #20
 8016f10:	4619      	mov	r1, r3
 8016f12:	f000 fef1 	bl	8017cf8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016f16:	2101      	movs	r1, #1
 8016f18:	69b8      	ldr	r0, [r7, #24]
 8016f1a:	f7ff fc47 	bl	80167ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016f1e:	69b8      	ldr	r0, [r7, #24]
 8016f20:	f7f7 fe84 	bl	800ec2c <pbuf_clen>
 8016f24:	4603      	mov	r3, r0
 8016f26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016f28:	8bfa      	ldrh	r2, [r7, #30]
 8016f2a:	8a7b      	ldrh	r3, [r7, #18]
 8016f2c:	4413      	add	r3, r2
 8016f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f32:	db05      	blt.n	8016f40 <ip_reass_free_complete_datagram+0x98>
 8016f34:	4b27      	ldr	r3, [pc, #156]	; (8016fd4 <ip_reass_free_complete_datagram+0x12c>)
 8016f36:	22bc      	movs	r2, #188	; 0xbc
 8016f38:	492a      	ldr	r1, [pc, #168]	; (8016fe4 <ip_reass_free_complete_datagram+0x13c>)
 8016f3a:	4828      	ldr	r0, [pc, #160]	; (8016fdc <ip_reass_free_complete_datagram+0x134>)
 8016f3c:	f000 ffb6 	bl	8017eac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016f40:	8bfa      	ldrh	r2, [r7, #30]
 8016f42:	8a7b      	ldrh	r3, [r7, #18]
 8016f44:	4413      	add	r3, r2
 8016f46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016f48:	69b8      	ldr	r0, [r7, #24]
 8016f4a:	f7f7 fde7 	bl	800eb1c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	685b      	ldr	r3, [r3, #4]
 8016f52:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016f54:	e01f      	b.n	8016f96 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016f56:	69bb      	ldr	r3, [r7, #24]
 8016f58:	685b      	ldr	r3, [r3, #4]
 8016f5a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016f5c:	69bb      	ldr	r3, [r7, #24]
 8016f5e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016f66:	68f8      	ldr	r0, [r7, #12]
 8016f68:	f7f7 fe60 	bl	800ec2c <pbuf_clen>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016f70:	8bfa      	ldrh	r2, [r7, #30]
 8016f72:	8a7b      	ldrh	r3, [r7, #18]
 8016f74:	4413      	add	r3, r2
 8016f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f7a:	db05      	blt.n	8016f88 <ip_reass_free_complete_datagram+0xe0>
 8016f7c:	4b15      	ldr	r3, [pc, #84]	; (8016fd4 <ip_reass_free_complete_datagram+0x12c>)
 8016f7e:	22cc      	movs	r2, #204	; 0xcc
 8016f80:	4918      	ldr	r1, [pc, #96]	; (8016fe4 <ip_reass_free_complete_datagram+0x13c>)
 8016f82:	4816      	ldr	r0, [pc, #88]	; (8016fdc <ip_reass_free_complete_datagram+0x134>)
 8016f84:	f000 ff92 	bl	8017eac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016f88:	8bfa      	ldrh	r2, [r7, #30]
 8016f8a:	8a7b      	ldrh	r3, [r7, #18]
 8016f8c:	4413      	add	r3, r2
 8016f8e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016f90:	68f8      	ldr	r0, [r7, #12]
 8016f92:	f7f7 fdc3 	bl	800eb1c <pbuf_free>
  while (p != NULL) {
 8016f96:	69bb      	ldr	r3, [r7, #24]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d1dc      	bne.n	8016f56 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016f9c:	6839      	ldr	r1, [r7, #0]
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f000 f8c2 	bl	8017128 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016fa4:	4b10      	ldr	r3, [pc, #64]	; (8016fe8 <ip_reass_free_complete_datagram+0x140>)
 8016fa6:	881b      	ldrh	r3, [r3, #0]
 8016fa8:	8bfa      	ldrh	r2, [r7, #30]
 8016faa:	429a      	cmp	r2, r3
 8016fac:	d905      	bls.n	8016fba <ip_reass_free_complete_datagram+0x112>
 8016fae:	4b09      	ldr	r3, [pc, #36]	; (8016fd4 <ip_reass_free_complete_datagram+0x12c>)
 8016fb0:	22d2      	movs	r2, #210	; 0xd2
 8016fb2:	490e      	ldr	r1, [pc, #56]	; (8016fec <ip_reass_free_complete_datagram+0x144>)
 8016fb4:	4809      	ldr	r0, [pc, #36]	; (8016fdc <ip_reass_free_complete_datagram+0x134>)
 8016fb6:	f000 ff79 	bl	8017eac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016fba:	4b0b      	ldr	r3, [pc, #44]	; (8016fe8 <ip_reass_free_complete_datagram+0x140>)
 8016fbc:	881a      	ldrh	r2, [r3, #0]
 8016fbe:	8bfb      	ldrh	r3, [r7, #30]
 8016fc0:	1ad3      	subs	r3, r2, r3
 8016fc2:	b29a      	uxth	r2, r3
 8016fc4:	4b08      	ldr	r3, [pc, #32]	; (8016fe8 <ip_reass_free_complete_datagram+0x140>)
 8016fc6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016fc8:	8bfb      	ldrh	r3, [r7, #30]
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3720      	adds	r7, #32
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}
 8016fd2:	bf00      	nop
 8016fd4:	0801cf74 	.word	0x0801cf74
 8016fd8:	0801cfb0 	.word	0x0801cfb0
 8016fdc:	0801cfbc 	.word	0x0801cfbc
 8016fe0:	0801cfe4 	.word	0x0801cfe4
 8016fe4:	0801cff8 	.word	0x0801cff8
 8016fe8:	20000b6c 	.word	0x20000b6c
 8016fec:	0801d018 	.word	0x0801d018

08016ff0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b08a      	sub	sp, #40	; 0x28
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
 8016ff8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016ffe:	2300      	movs	r3, #0
 8017000:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017002:	2300      	movs	r3, #0
 8017004:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017006:	2300      	movs	r3, #0
 8017008:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801700a:	2300      	movs	r3, #0
 801700c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801700e:	4b28      	ldr	r3, [pc, #160]	; (80170b0 <ip_reass_remove_oldest_datagram+0xc0>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017014:	e030      	b.n	8017078 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017018:	695a      	ldr	r2, [r3, #20]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	68db      	ldr	r3, [r3, #12]
 801701e:	429a      	cmp	r2, r3
 8017020:	d10c      	bne.n	801703c <ip_reass_remove_oldest_datagram+0x4c>
 8017022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017024:	699a      	ldr	r2, [r3, #24]
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	691b      	ldr	r3, [r3, #16]
 801702a:	429a      	cmp	r2, r3
 801702c:	d106      	bne.n	801703c <ip_reass_remove_oldest_datagram+0x4c>
 801702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017030:	899a      	ldrh	r2, [r3, #12]
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	889b      	ldrh	r3, [r3, #4]
 8017036:	b29b      	uxth	r3, r3
 8017038:	429a      	cmp	r2, r3
 801703a:	d014      	beq.n	8017066 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	3301      	adds	r3, #1
 8017040:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017042:	6a3b      	ldr	r3, [r7, #32]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d104      	bne.n	8017052 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801704c:	69fb      	ldr	r3, [r7, #28]
 801704e:	61bb      	str	r3, [r7, #24]
 8017050:	e009      	b.n	8017066 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017054:	7fda      	ldrb	r2, [r3, #31]
 8017056:	6a3b      	ldr	r3, [r7, #32]
 8017058:	7fdb      	ldrb	r3, [r3, #31]
 801705a:	429a      	cmp	r2, r3
 801705c:	d803      	bhi.n	8017066 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017060:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017062:	69fb      	ldr	r3, [r7, #28]
 8017064:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d001      	beq.n	8017072 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017070:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707a:	2b00      	cmp	r3, #0
 801707c:	d1cb      	bne.n	8017016 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801707e:	6a3b      	ldr	r3, [r7, #32]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d008      	beq.n	8017096 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017084:	69b9      	ldr	r1, [r7, #24]
 8017086:	6a38      	ldr	r0, [r7, #32]
 8017088:	f7ff ff0e 	bl	8016ea8 <ip_reass_free_complete_datagram>
 801708c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801708e:	697a      	ldr	r2, [r7, #20]
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	4413      	add	r3, r2
 8017094:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017096:	697a      	ldr	r2, [r7, #20]
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	429a      	cmp	r2, r3
 801709c:	da02      	bge.n	80170a4 <ip_reass_remove_oldest_datagram+0xb4>
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	2b01      	cmp	r3, #1
 80170a2:	dcac      	bgt.n	8016ffe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80170a4:	697b      	ldr	r3, [r7, #20]
}
 80170a6:	4618      	mov	r0, r3
 80170a8:	3728      	adds	r7, #40	; 0x28
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd80      	pop	{r7, pc}
 80170ae:	bf00      	nop
 80170b0:	20000b68 	.word	0x20000b68

080170b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b084      	sub	sp, #16
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
 80170bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80170be:	2004      	movs	r0, #4
 80170c0:	f7f6 fece 	bl	800de60 <memp_malloc>
 80170c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d110      	bne.n	80170ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80170cc:	6839      	ldr	r1, [r7, #0]
 80170ce:	6878      	ldr	r0, [r7, #4]
 80170d0:	f7ff ff8e 	bl	8016ff0 <ip_reass_remove_oldest_datagram>
 80170d4:	4602      	mov	r2, r0
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	4293      	cmp	r3, r2
 80170da:	dc03      	bgt.n	80170e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80170dc:	2004      	movs	r0, #4
 80170de:	f7f6 febf 	bl	800de60 <memp_malloc>
 80170e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d101      	bne.n	80170ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80170ea:	2300      	movs	r3, #0
 80170ec:	e016      	b.n	801711c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80170ee:	2220      	movs	r2, #32
 80170f0:	2100      	movs	r1, #0
 80170f2:	68f8      	ldr	r0, [r7, #12]
 80170f4:	f000 fe28 	bl	8017d48 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	220f      	movs	r2, #15
 80170fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80170fe:	4b09      	ldr	r3, [pc, #36]	; (8017124 <ip_reass_enqueue_new_datagram+0x70>)
 8017100:	681a      	ldr	r2, [r3, #0]
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017106:	4a07      	ldr	r2, [pc, #28]	; (8017124 <ip_reass_enqueue_new_datagram+0x70>)
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	3308      	adds	r3, #8
 8017110:	2214      	movs	r2, #20
 8017112:	6879      	ldr	r1, [r7, #4]
 8017114:	4618      	mov	r0, r3
 8017116:	f000 fdef 	bl	8017cf8 <memcpy>
  return ipr;
 801711a:	68fb      	ldr	r3, [r7, #12]
}
 801711c:	4618      	mov	r0, r3
 801711e:	3710      	adds	r7, #16
 8017120:	46bd      	mov	sp, r7
 8017122:	bd80      	pop	{r7, pc}
 8017124:	20000b68 	.word	0x20000b68

08017128 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b082      	sub	sp, #8
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017132:	4b10      	ldr	r3, [pc, #64]	; (8017174 <ip_reass_dequeue_datagram+0x4c>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	687a      	ldr	r2, [r7, #4]
 8017138:	429a      	cmp	r2, r3
 801713a:	d104      	bne.n	8017146 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	4a0c      	ldr	r2, [pc, #48]	; (8017174 <ip_reass_dequeue_datagram+0x4c>)
 8017142:	6013      	str	r3, [r2, #0]
 8017144:	e00d      	b.n	8017162 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d106      	bne.n	801715a <ip_reass_dequeue_datagram+0x32>
 801714c:	4b0a      	ldr	r3, [pc, #40]	; (8017178 <ip_reass_dequeue_datagram+0x50>)
 801714e:	f240 1245 	movw	r2, #325	; 0x145
 8017152:	490a      	ldr	r1, [pc, #40]	; (801717c <ip_reass_dequeue_datagram+0x54>)
 8017154:	480a      	ldr	r0, [pc, #40]	; (8017180 <ip_reass_dequeue_datagram+0x58>)
 8017156:	f000 fea9 	bl	8017eac <iprintf>
    prev->next = ipr->next;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681a      	ldr	r2, [r3, #0]
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017162:	6879      	ldr	r1, [r7, #4]
 8017164:	2004      	movs	r0, #4
 8017166:	f7f6 fec7 	bl	800def8 <memp_free>
}
 801716a:	bf00      	nop
 801716c:	3708      	adds	r7, #8
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}
 8017172:	bf00      	nop
 8017174:	20000b68 	.word	0x20000b68
 8017178:	0801cf74 	.word	0x0801cf74
 801717c:	0801d03c 	.word	0x0801d03c
 8017180:	0801cfbc 	.word	0x0801cfbc

08017184 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b08c      	sub	sp, #48	; 0x30
 8017188:	af00      	add	r7, sp, #0
 801718a:	60f8      	str	r0, [r7, #12]
 801718c:	60b9      	str	r1, [r7, #8]
 801718e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017190:	2300      	movs	r3, #0
 8017192:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017194:	2301      	movs	r3, #1
 8017196:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017198:	68bb      	ldr	r3, [r7, #8]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801719e:	69fb      	ldr	r3, [r7, #28]
 80171a0:	885b      	ldrh	r3, [r3, #2]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7f6 f927 	bl	800d3f8 <lwip_htons>
 80171aa:	4603      	mov	r3, r0
 80171ac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80171ae:	69fb      	ldr	r3, [r7, #28]
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	f003 030f 	and.w	r3, r3, #15
 80171b6:	b2db      	uxtb	r3, r3
 80171b8:	009b      	lsls	r3, r3, #2
 80171ba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80171bc:	7e7b      	ldrb	r3, [r7, #25]
 80171be:	b29b      	uxth	r3, r3
 80171c0:	8b7a      	ldrh	r2, [r7, #26]
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d202      	bcs.n	80171cc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80171c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171ca:	e135      	b.n	8017438 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80171cc:	7e7b      	ldrb	r3, [r7, #25]
 80171ce:	b29b      	uxth	r3, r3
 80171d0:	8b7a      	ldrh	r2, [r7, #26]
 80171d2:	1ad3      	subs	r3, r2, r3
 80171d4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80171d6:	69fb      	ldr	r3, [r7, #28]
 80171d8:	88db      	ldrh	r3, [r3, #6]
 80171da:	b29b      	uxth	r3, r3
 80171dc:	4618      	mov	r0, r3
 80171de:	f7f6 f90b 	bl	800d3f8 <lwip_htons>
 80171e2:	4603      	mov	r3, r0
 80171e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	00db      	lsls	r3, r3, #3
 80171ec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80171f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f6:	2200      	movs	r2, #0
 80171f8:	701a      	strb	r2, [r3, #0]
 80171fa:	2200      	movs	r2, #0
 80171fc:	705a      	strb	r2, [r3, #1]
 80171fe:	2200      	movs	r2, #0
 8017200:	709a      	strb	r2, [r3, #2]
 8017202:	2200      	movs	r2, #0
 8017204:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017208:	8afa      	ldrh	r2, [r7, #22]
 801720a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801720c:	8afa      	ldrh	r2, [r7, #22]
 801720e:	8b7b      	ldrh	r3, [r7, #26]
 8017210:	4413      	add	r3, r2
 8017212:	b29a      	uxth	r2, r3
 8017214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017216:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721a:	88db      	ldrh	r3, [r3, #6]
 801721c:	b29b      	uxth	r3, r3
 801721e:	8afa      	ldrh	r2, [r7, #22]
 8017220:	429a      	cmp	r2, r3
 8017222:	d902      	bls.n	801722a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017228:	e106      	b.n	8017438 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	627b      	str	r3, [r7, #36]	; 0x24
 8017230:	e068      	b.n	8017304 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017234:	685b      	ldr	r3, [r3, #4]
 8017236:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723a:	889b      	ldrh	r3, [r3, #4]
 801723c:	b29a      	uxth	r2, r3
 801723e:	693b      	ldr	r3, [r7, #16]
 8017240:	889b      	ldrh	r3, [r3, #4]
 8017242:	b29b      	uxth	r3, r3
 8017244:	429a      	cmp	r2, r3
 8017246:	d235      	bcs.n	80172b4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801724a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801724c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017250:	2b00      	cmp	r3, #0
 8017252:	d020      	beq.n	8017296 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017256:	889b      	ldrh	r3, [r3, #4]
 8017258:	b29a      	uxth	r2, r3
 801725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801725c:	88db      	ldrh	r3, [r3, #6]
 801725e:	b29b      	uxth	r3, r3
 8017260:	429a      	cmp	r2, r3
 8017262:	d307      	bcc.n	8017274 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017266:	88db      	ldrh	r3, [r3, #6]
 8017268:	b29a      	uxth	r2, r3
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	889b      	ldrh	r3, [r3, #4]
 801726e:	b29b      	uxth	r3, r3
 8017270:	429a      	cmp	r2, r3
 8017272:	d902      	bls.n	801727a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017278:	e0de      	b.n	8017438 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801727c:	68ba      	ldr	r2, [r7, #8]
 801727e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017282:	88db      	ldrh	r3, [r3, #6]
 8017284:	b29a      	uxth	r2, r3
 8017286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017288:	889b      	ldrh	r3, [r3, #4]
 801728a:	b29b      	uxth	r3, r3
 801728c:	429a      	cmp	r2, r3
 801728e:	d03d      	beq.n	801730c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017290:	2300      	movs	r3, #0
 8017292:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017294:	e03a      	b.n	801730c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017298:	88db      	ldrh	r3, [r3, #6]
 801729a:	b29a      	uxth	r2, r3
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	889b      	ldrh	r3, [r3, #4]
 80172a0:	b29b      	uxth	r3, r3
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d902      	bls.n	80172ac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172aa:	e0c5      	b.n	8017438 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	68ba      	ldr	r2, [r7, #8]
 80172b0:	605a      	str	r2, [r3, #4]
      break;
 80172b2:	e02b      	b.n	801730c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80172b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b6:	889b      	ldrh	r3, [r3, #4]
 80172b8:	b29a      	uxth	r2, r3
 80172ba:	693b      	ldr	r3, [r7, #16]
 80172bc:	889b      	ldrh	r3, [r3, #4]
 80172be:	b29b      	uxth	r3, r3
 80172c0:	429a      	cmp	r2, r3
 80172c2:	d102      	bne.n	80172ca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172c8:	e0b6      	b.n	8017438 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80172ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172cc:	889b      	ldrh	r3, [r3, #4]
 80172ce:	b29a      	uxth	r2, r3
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	88db      	ldrh	r3, [r3, #6]
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	429a      	cmp	r2, r3
 80172d8:	d202      	bcs.n	80172e0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172de:	e0ab      	b.n	8017438 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80172e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d009      	beq.n	80172fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80172e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e8:	88db      	ldrh	r3, [r3, #6]
 80172ea:	b29a      	uxth	r2, r3
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	889b      	ldrh	r3, [r3, #4]
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d001      	beq.n	80172fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80172f6:	2300      	movs	r3, #0
 80172f8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017306:	2b00      	cmp	r3, #0
 8017308:	d193      	bne.n	8017232 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801730a:	e000      	b.n	801730e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801730c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017310:	2b00      	cmp	r3, #0
 8017312:	d12d      	bne.n	8017370 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017316:	2b00      	cmp	r3, #0
 8017318:	d01c      	beq.n	8017354 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801731c:	88db      	ldrh	r3, [r3, #6]
 801731e:	b29a      	uxth	r2, r3
 8017320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017322:	889b      	ldrh	r3, [r3, #4]
 8017324:	b29b      	uxth	r3, r3
 8017326:	429a      	cmp	r2, r3
 8017328:	d906      	bls.n	8017338 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801732a:	4b45      	ldr	r3, [pc, #276]	; (8017440 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801732c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017330:	4944      	ldr	r1, [pc, #272]	; (8017444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017332:	4845      	ldr	r0, [pc, #276]	; (8017448 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017334:	f000 fdba 	bl	8017eac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733a:	68ba      	ldr	r2, [r7, #8]
 801733c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017340:	88db      	ldrh	r3, [r3, #6]
 8017342:	b29a      	uxth	r2, r3
 8017344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017346:	889b      	ldrh	r3, [r3, #4]
 8017348:	b29b      	uxth	r3, r3
 801734a:	429a      	cmp	r2, r3
 801734c:	d010      	beq.n	8017370 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801734e:	2300      	movs	r3, #0
 8017350:	623b      	str	r3, [r7, #32]
 8017352:	e00d      	b.n	8017370 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d006      	beq.n	801736a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801735c:	4b38      	ldr	r3, [pc, #224]	; (8017440 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801735e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017362:	493a      	ldr	r1, [pc, #232]	; (801744c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017364:	4838      	ldr	r0, [pc, #224]	; (8017448 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017366:	f000 fda1 	bl	8017eac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	68ba      	ldr	r2, [r7, #8]
 801736e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d105      	bne.n	8017382 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	7f9b      	ldrb	r3, [r3, #30]
 801737a:	f003 0301 	and.w	r3, r3, #1
 801737e:	2b00      	cmp	r3, #0
 8017380:	d059      	beq.n	8017436 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017382:	6a3b      	ldr	r3, [r7, #32]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d04f      	beq.n	8017428 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	685b      	ldr	r3, [r3, #4]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d006      	beq.n	801739e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	685b      	ldr	r3, [r3, #4]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	889b      	ldrh	r3, [r3, #4]
 8017398:	b29b      	uxth	r3, r3
 801739a:	2b00      	cmp	r3, #0
 801739c:	d002      	beq.n	80173a4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801739e:	2300      	movs	r3, #0
 80173a0:	623b      	str	r3, [r7, #32]
 80173a2:	e041      	b.n	8017428 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80173a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173a6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80173a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80173ae:	e012      	b.n	80173d6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80173b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b2:	685b      	ldr	r3, [r3, #4]
 80173b4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80173b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b8:	88db      	ldrh	r3, [r3, #6]
 80173ba:	b29a      	uxth	r2, r3
 80173bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173be:	889b      	ldrh	r3, [r3, #4]
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d002      	beq.n	80173cc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80173c6:	2300      	movs	r3, #0
 80173c8:	623b      	str	r3, [r7, #32]
            break;
 80173ca:	e007      	b.n	80173dc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80173cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ce:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80173d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80173d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d1e9      	bne.n	80173b0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80173dc:	6a3b      	ldr	r3, [r7, #32]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d022      	beq.n	8017428 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d106      	bne.n	80173f8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80173ea:	4b15      	ldr	r3, [pc, #84]	; (8017440 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80173ec:	f240 12df 	movw	r2, #479	; 0x1df
 80173f0:	4917      	ldr	r1, [pc, #92]	; (8017450 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80173f2:	4815      	ldr	r0, [pc, #84]	; (8017448 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80173f4:	f000 fd5a 	bl	8017eac <iprintf>
          LWIP_ASSERT("sanity check",
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	685b      	ldr	r3, [r3, #4]
 80173fc:	685b      	ldr	r3, [r3, #4]
 80173fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017400:	429a      	cmp	r2, r3
 8017402:	d106      	bne.n	8017412 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017404:	4b0e      	ldr	r3, [pc, #56]	; (8017440 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017406:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801740a:	4911      	ldr	r1, [pc, #68]	; (8017450 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801740c:	480e      	ldr	r0, [pc, #56]	; (8017448 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801740e:	f000 fd4d 	bl	8017eac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d006      	beq.n	8017428 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801741a:	4b09      	ldr	r3, [pc, #36]	; (8017440 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801741c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017420:	490c      	ldr	r1, [pc, #48]	; (8017454 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017422:	4809      	ldr	r0, [pc, #36]	; (8017448 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017424:	f000 fd42 	bl	8017eac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017428:	6a3b      	ldr	r3, [r7, #32]
 801742a:	2b00      	cmp	r3, #0
 801742c:	bf14      	ite	ne
 801742e:	2301      	movne	r3, #1
 8017430:	2300      	moveq	r3, #0
 8017432:	b2db      	uxtb	r3, r3
 8017434:	e000      	b.n	8017438 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017436:	2300      	movs	r3, #0
}
 8017438:	4618      	mov	r0, r3
 801743a:	3730      	adds	r7, #48	; 0x30
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	0801cf74 	.word	0x0801cf74
 8017444:	0801d058 	.word	0x0801d058
 8017448:	0801cfbc 	.word	0x0801cfbc
 801744c:	0801d078 	.word	0x0801d078
 8017450:	0801d0b0 	.word	0x0801d0b0
 8017454:	0801d0c0 	.word	0x0801d0c0

08017458 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b08e      	sub	sp, #56	; 0x38
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	685b      	ldr	r3, [r3, #4]
 8017464:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	f003 030f 	and.w	r3, r3, #15
 801746e:	b2db      	uxtb	r3, r3
 8017470:	009b      	lsls	r3, r3, #2
 8017472:	b2db      	uxtb	r3, r3
 8017474:	2b14      	cmp	r3, #20
 8017476:	f040 8167 	bne.w	8017748 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801747c:	88db      	ldrh	r3, [r3, #6]
 801747e:	b29b      	uxth	r3, r3
 8017480:	4618      	mov	r0, r3
 8017482:	f7f5 ffb9 	bl	800d3f8 <lwip_htons>
 8017486:	4603      	mov	r3, r0
 8017488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801748c:	b29b      	uxth	r3, r3
 801748e:	00db      	lsls	r3, r3, #3
 8017490:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017494:	885b      	ldrh	r3, [r3, #2]
 8017496:	b29b      	uxth	r3, r3
 8017498:	4618      	mov	r0, r3
 801749a:	f7f5 ffad 	bl	800d3f8 <lwip_htons>
 801749e:	4603      	mov	r3, r0
 80174a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80174a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	f003 030f 	and.w	r3, r3, #15
 80174aa:	b2db      	uxtb	r3, r3
 80174ac:	009b      	lsls	r3, r3, #2
 80174ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80174b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80174ba:	429a      	cmp	r2, r3
 80174bc:	f0c0 8146 	bcc.w	801774c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80174c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80174c4:	b29b      	uxth	r3, r3
 80174c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80174c8:	1ad3      	subs	r3, r2, r3
 80174ca:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f7f7 fbad 	bl	800ec2c <pbuf_clen>
 80174d2:	4603      	mov	r3, r0
 80174d4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80174d6:	4b9f      	ldr	r3, [pc, #636]	; (8017754 <ip4_reass+0x2fc>)
 80174d8:	881b      	ldrh	r3, [r3, #0]
 80174da:	461a      	mov	r2, r3
 80174dc:	8c3b      	ldrh	r3, [r7, #32]
 80174de:	4413      	add	r3, r2
 80174e0:	2b0a      	cmp	r3, #10
 80174e2:	dd10      	ble.n	8017506 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80174e4:	8c3b      	ldrh	r3, [r7, #32]
 80174e6:	4619      	mov	r1, r3
 80174e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174ea:	f7ff fd81 	bl	8016ff0 <ip_reass_remove_oldest_datagram>
 80174ee:	4603      	mov	r3, r0
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	f000 812d 	beq.w	8017750 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80174f6:	4b97      	ldr	r3, [pc, #604]	; (8017754 <ip4_reass+0x2fc>)
 80174f8:	881b      	ldrh	r3, [r3, #0]
 80174fa:	461a      	mov	r2, r3
 80174fc:	8c3b      	ldrh	r3, [r7, #32]
 80174fe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017500:	2b0a      	cmp	r3, #10
 8017502:	f300 8125 	bgt.w	8017750 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017506:	4b94      	ldr	r3, [pc, #592]	; (8017758 <ip4_reass+0x300>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	633b      	str	r3, [r7, #48]	; 0x30
 801750c:	e015      	b.n	801753a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017510:	695a      	ldr	r2, [r3, #20]
 8017512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	429a      	cmp	r2, r3
 8017518:	d10c      	bne.n	8017534 <ip4_reass+0xdc>
 801751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801751c:	699a      	ldr	r2, [r3, #24]
 801751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017520:	691b      	ldr	r3, [r3, #16]
 8017522:	429a      	cmp	r2, r3
 8017524:	d106      	bne.n	8017534 <ip4_reass+0xdc>
 8017526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017528:	899a      	ldrh	r2, [r3, #12]
 801752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801752c:	889b      	ldrh	r3, [r3, #4]
 801752e:	b29b      	uxth	r3, r3
 8017530:	429a      	cmp	r2, r3
 8017532:	d006      	beq.n	8017542 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	633b      	str	r3, [r7, #48]	; 0x30
 801753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801753c:	2b00      	cmp	r3, #0
 801753e:	d1e6      	bne.n	801750e <ip4_reass+0xb6>
 8017540:	e000      	b.n	8017544 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017542:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017546:	2b00      	cmp	r3, #0
 8017548:	d109      	bne.n	801755e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801754a:	8c3b      	ldrh	r3, [r7, #32]
 801754c:	4619      	mov	r1, r3
 801754e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017550:	f7ff fdb0 	bl	80170b4 <ip_reass_enqueue_new_datagram>
 8017554:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017558:	2b00      	cmp	r3, #0
 801755a:	d11c      	bne.n	8017596 <ip4_reass+0x13e>
      goto nullreturn;
 801755c:	e109      	b.n	8017772 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017560:	88db      	ldrh	r3, [r3, #6]
 8017562:	b29b      	uxth	r3, r3
 8017564:	4618      	mov	r0, r3
 8017566:	f7f5 ff47 	bl	800d3f8 <lwip_htons>
 801756a:	4603      	mov	r3, r0
 801756c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017570:	2b00      	cmp	r3, #0
 8017572:	d110      	bne.n	8017596 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017576:	89db      	ldrh	r3, [r3, #14]
 8017578:	4618      	mov	r0, r3
 801757a:	f7f5 ff3d 	bl	800d3f8 <lwip_htons>
 801757e:	4603      	mov	r3, r0
 8017580:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017584:	2b00      	cmp	r3, #0
 8017586:	d006      	beq.n	8017596 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758a:	3308      	adds	r3, #8
 801758c:	2214      	movs	r2, #20
 801758e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017590:	4618      	mov	r0, r3
 8017592:	f000 fbb1 	bl	8017cf8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017598:	88db      	ldrh	r3, [r3, #6]
 801759a:	b29b      	uxth	r3, r3
 801759c:	f003 0320 	and.w	r3, r3, #32
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	bf0c      	ite	eq
 80175a4:	2301      	moveq	r3, #1
 80175a6:	2300      	movne	r3, #0
 80175a8:	b2db      	uxtb	r3, r3
 80175aa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80175ac:	69fb      	ldr	r3, [r7, #28]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d00e      	beq.n	80175d0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80175b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80175b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175b6:	4413      	add	r3, r2
 80175b8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80175ba:	8b7a      	ldrh	r2, [r7, #26]
 80175bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80175be:	429a      	cmp	r2, r3
 80175c0:	f0c0 80a0 	bcc.w	8017704 <ip4_reass+0x2ac>
 80175c4:	8b7b      	ldrh	r3, [r7, #26]
 80175c6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80175ca:	4293      	cmp	r3, r2
 80175cc:	f200 809a 	bhi.w	8017704 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80175d0:	69fa      	ldr	r2, [r7, #28]
 80175d2:	6879      	ldr	r1, [r7, #4]
 80175d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175d6:	f7ff fdd5 	bl	8017184 <ip_reass_chain_frag_into_datagram_and_validate>
 80175da:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80175e2:	f000 8091 	beq.w	8017708 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80175e6:	4b5b      	ldr	r3, [pc, #364]	; (8017754 <ip4_reass+0x2fc>)
 80175e8:	881a      	ldrh	r2, [r3, #0]
 80175ea:	8c3b      	ldrh	r3, [r7, #32]
 80175ec:	4413      	add	r3, r2
 80175ee:	b29a      	uxth	r2, r3
 80175f0:	4b58      	ldr	r3, [pc, #352]	; (8017754 <ip4_reass+0x2fc>)
 80175f2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d00d      	beq.n	8017616 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80175fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80175fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175fe:	4413      	add	r3, r2
 8017600:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017604:	8a7a      	ldrh	r2, [r7, #18]
 8017606:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760a:	7f9b      	ldrb	r3, [r3, #30]
 801760c:	f043 0301 	orr.w	r3, r3, #1
 8017610:	b2da      	uxtb	r2, r3
 8017612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017614:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	2b01      	cmp	r3, #1
 801761a:	d171      	bne.n	8017700 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801761e:	8b9b      	ldrh	r3, [r3, #28]
 8017620:	3314      	adds	r3, #20
 8017622:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017626:	685b      	ldr	r3, [r3, #4]
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017630:	685b      	ldr	r3, [r3, #4]
 8017632:	685b      	ldr	r3, [r3, #4]
 8017634:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017638:	3308      	adds	r3, #8
 801763a:	2214      	movs	r2, #20
 801763c:	4619      	mov	r1, r3
 801763e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017640:	f000 fb5a 	bl	8017cf8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017644:	8a3b      	ldrh	r3, [r7, #16]
 8017646:	4618      	mov	r0, r3
 8017648:	f7f5 fed6 	bl	800d3f8 <lwip_htons>
 801764c:	4603      	mov	r3, r0
 801764e:	461a      	mov	r2, r3
 8017650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017652:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017656:	2200      	movs	r2, #0
 8017658:	719a      	strb	r2, [r3, #6]
 801765a:	2200      	movs	r2, #0
 801765c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017660:	2200      	movs	r2, #0
 8017662:	729a      	strb	r2, [r3, #10]
 8017664:	2200      	movs	r2, #0
 8017666:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801766a:	685b      	ldr	r3, [r3, #4]
 801766c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801766e:	e00d      	b.n	801768c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017672:	685b      	ldr	r3, [r3, #4]
 8017674:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017676:	2114      	movs	r1, #20
 8017678:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801767a:	f7f7 f9c9 	bl	800ea10 <pbuf_remove_header>
      pbuf_cat(p, r);
 801767e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f7f7 fb0d 	bl	800eca0 <pbuf_cat>
      r = iprh->next_pbuf;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801768c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801768e:	2b00      	cmp	r3, #0
 8017690:	d1ee      	bne.n	8017670 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017692:	4b31      	ldr	r3, [pc, #196]	; (8017758 <ip4_reass+0x300>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017698:	429a      	cmp	r2, r3
 801769a:	d102      	bne.n	80176a2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801769c:	2300      	movs	r3, #0
 801769e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176a0:	e010      	b.n	80176c4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80176a2:	4b2d      	ldr	r3, [pc, #180]	; (8017758 <ip4_reass+0x300>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176a8:	e007      	b.n	80176ba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80176aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80176b0:	429a      	cmp	r2, r3
 80176b2:	d006      	beq.n	80176c2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80176b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d1f4      	bne.n	80176aa <ip4_reass+0x252>
 80176c0:	e000      	b.n	80176c4 <ip4_reass+0x26c>
          break;
 80176c2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80176c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80176c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176c8:	f7ff fd2e 	bl	8017128 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f7f7 faad 	bl	800ec2c <pbuf_clen>
 80176d2:	4603      	mov	r3, r0
 80176d4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80176d6:	4b1f      	ldr	r3, [pc, #124]	; (8017754 <ip4_reass+0x2fc>)
 80176d8:	881b      	ldrh	r3, [r3, #0]
 80176da:	8c3a      	ldrh	r2, [r7, #32]
 80176dc:	429a      	cmp	r2, r3
 80176de:	d906      	bls.n	80176ee <ip4_reass+0x296>
 80176e0:	4b1e      	ldr	r3, [pc, #120]	; (801775c <ip4_reass+0x304>)
 80176e2:	f240 229b 	movw	r2, #667	; 0x29b
 80176e6:	491e      	ldr	r1, [pc, #120]	; (8017760 <ip4_reass+0x308>)
 80176e8:	481e      	ldr	r0, [pc, #120]	; (8017764 <ip4_reass+0x30c>)
 80176ea:	f000 fbdf 	bl	8017eac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80176ee:	4b19      	ldr	r3, [pc, #100]	; (8017754 <ip4_reass+0x2fc>)
 80176f0:	881a      	ldrh	r2, [r3, #0]
 80176f2:	8c3b      	ldrh	r3, [r7, #32]
 80176f4:	1ad3      	subs	r3, r2, r3
 80176f6:	b29a      	uxth	r2, r3
 80176f8:	4b16      	ldr	r3, [pc, #88]	; (8017754 <ip4_reass+0x2fc>)
 80176fa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	e03c      	b.n	801777a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017700:	2300      	movs	r3, #0
 8017702:	e03a      	b.n	801777a <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017704:	bf00      	nop
 8017706:	e000      	b.n	801770a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017708:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770c:	2b00      	cmp	r3, #0
 801770e:	d106      	bne.n	801771e <ip4_reass+0x2c6>
 8017710:	4b12      	ldr	r3, [pc, #72]	; (801775c <ip4_reass+0x304>)
 8017712:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017716:	4914      	ldr	r1, [pc, #80]	; (8017768 <ip4_reass+0x310>)
 8017718:	4812      	ldr	r0, [pc, #72]	; (8017764 <ip4_reass+0x30c>)
 801771a:	f000 fbc7 	bl	8017eac <iprintf>
  if (ipr->p == NULL) {
 801771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017720:	685b      	ldr	r3, [r3, #4]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d124      	bne.n	8017770 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017726:	4b0c      	ldr	r3, [pc, #48]	; (8017758 <ip4_reass+0x300>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801772c:	429a      	cmp	r2, r3
 801772e:	d006      	beq.n	801773e <ip4_reass+0x2e6>
 8017730:	4b0a      	ldr	r3, [pc, #40]	; (801775c <ip4_reass+0x304>)
 8017732:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017736:	490d      	ldr	r1, [pc, #52]	; (801776c <ip4_reass+0x314>)
 8017738:	480a      	ldr	r0, [pc, #40]	; (8017764 <ip4_reass+0x30c>)
 801773a:	f000 fbb7 	bl	8017eac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801773e:	2100      	movs	r1, #0
 8017740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017742:	f7ff fcf1 	bl	8017128 <ip_reass_dequeue_datagram>
 8017746:	e014      	b.n	8017772 <ip4_reass+0x31a>
    goto nullreturn;
 8017748:	bf00      	nop
 801774a:	e012      	b.n	8017772 <ip4_reass+0x31a>
    goto nullreturn;
 801774c:	bf00      	nop
 801774e:	e010      	b.n	8017772 <ip4_reass+0x31a>
      goto nullreturn;
 8017750:	bf00      	nop
 8017752:	e00e      	b.n	8017772 <ip4_reass+0x31a>
 8017754:	20000b6c 	.word	0x20000b6c
 8017758:	20000b68 	.word	0x20000b68
 801775c:	0801cf74 	.word	0x0801cf74
 8017760:	0801d0e4 	.word	0x0801d0e4
 8017764:	0801cfbc 	.word	0x0801cfbc
 8017768:	0801d100 	.word	0x0801d100
 801776c:	0801d10c 	.word	0x0801d10c
  }

nullreturn:
 8017770:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	f7f7 f9d2 	bl	800eb1c <pbuf_free>
  return NULL;
 8017778:	2300      	movs	r3, #0
}
 801777a:	4618      	mov	r0, r3
 801777c:	3738      	adds	r7, #56	; 0x38
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop

08017784 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017788:	2005      	movs	r0, #5
 801778a:	f7f6 fb69 	bl	800de60 <memp_malloc>
 801778e:	4603      	mov	r3, r0
}
 8017790:	4618      	mov	r0, r3
 8017792:	bd80      	pop	{r7, pc}

08017794 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b082      	sub	sp, #8
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d106      	bne.n	80177b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80177a2:	4b07      	ldr	r3, [pc, #28]	; (80177c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80177a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80177a8:	4906      	ldr	r1, [pc, #24]	; (80177c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80177aa:	4807      	ldr	r0, [pc, #28]	; (80177c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80177ac:	f000 fb7e 	bl	8017eac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80177b0:	6879      	ldr	r1, [r7, #4]
 80177b2:	2005      	movs	r0, #5
 80177b4:	f7f6 fba0 	bl	800def8 <memp_free>
}
 80177b8:	bf00      	nop
 80177ba:	3708      	adds	r7, #8
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}
 80177c0:	0801cf74 	.word	0x0801cf74
 80177c4:	0801d12c 	.word	0x0801d12c
 80177c8:	0801cfbc 	.word	0x0801cfbc

080177cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d106      	bne.n	80177ec <ipfrag_free_pbuf_custom+0x20>
 80177de:	4b11      	ldr	r3, [pc, #68]	; (8017824 <ipfrag_free_pbuf_custom+0x58>)
 80177e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80177e4:	4910      	ldr	r1, [pc, #64]	; (8017828 <ipfrag_free_pbuf_custom+0x5c>)
 80177e6:	4811      	ldr	r0, [pc, #68]	; (801782c <ipfrag_free_pbuf_custom+0x60>)
 80177e8:	f000 fb60 	bl	8017eac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80177ec:	68fa      	ldr	r2, [r7, #12]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d006      	beq.n	8017802 <ipfrag_free_pbuf_custom+0x36>
 80177f4:	4b0b      	ldr	r3, [pc, #44]	; (8017824 <ipfrag_free_pbuf_custom+0x58>)
 80177f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80177fa:	490d      	ldr	r1, [pc, #52]	; (8017830 <ipfrag_free_pbuf_custom+0x64>)
 80177fc:	480b      	ldr	r0, [pc, #44]	; (801782c <ipfrag_free_pbuf_custom+0x60>)
 80177fe:	f000 fb55 	bl	8017eac <iprintf>
  if (pcr->original != NULL) {
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	695b      	ldr	r3, [r3, #20]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d004      	beq.n	8017814 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	695b      	ldr	r3, [r3, #20]
 801780e:	4618      	mov	r0, r3
 8017810:	f7f7 f984 	bl	800eb1c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017814:	68f8      	ldr	r0, [r7, #12]
 8017816:	f7ff ffbd 	bl	8017794 <ip_frag_free_pbuf_custom_ref>
}
 801781a:	bf00      	nop
 801781c:	3710      	adds	r7, #16
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}
 8017822:	bf00      	nop
 8017824:	0801cf74 	.word	0x0801cf74
 8017828:	0801d138 	.word	0x0801d138
 801782c:	0801cfbc 	.word	0x0801cfbc
 8017830:	0801d144 	.word	0x0801d144

08017834 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b094      	sub	sp, #80	; 0x50
 8017838:	af02      	add	r7, sp, #8
 801783a:	60f8      	str	r0, [r7, #12]
 801783c:	60b9      	str	r1, [r7, #8]
 801783e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017840:	2300      	movs	r3, #0
 8017842:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801784a:	3b14      	subs	r3, #20
 801784c:	2b00      	cmp	r3, #0
 801784e:	da00      	bge.n	8017852 <ip4_frag+0x1e>
 8017850:	3307      	adds	r3, #7
 8017852:	10db      	asrs	r3, r3, #3
 8017854:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017856:	2314      	movs	r3, #20
 8017858:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	685b      	ldr	r3, [r3, #4]
 801785e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017862:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017866:	781b      	ldrb	r3, [r3, #0]
 8017868:	f003 030f 	and.w	r3, r3, #15
 801786c:	b2db      	uxtb	r3, r3
 801786e:	009b      	lsls	r3, r3, #2
 8017870:	b2db      	uxtb	r3, r3
 8017872:	2b14      	cmp	r3, #20
 8017874:	d002      	beq.n	801787c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017876:	f06f 0305 	mvn.w	r3, #5
 801787a:	e110      	b.n	8017a9e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	895b      	ldrh	r3, [r3, #10]
 8017880:	2b13      	cmp	r3, #19
 8017882:	d809      	bhi.n	8017898 <ip4_frag+0x64>
 8017884:	4b88      	ldr	r3, [pc, #544]	; (8017aa8 <ip4_frag+0x274>)
 8017886:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801788a:	4988      	ldr	r1, [pc, #544]	; (8017aac <ip4_frag+0x278>)
 801788c:	4888      	ldr	r0, [pc, #544]	; (8017ab0 <ip4_frag+0x27c>)
 801788e:	f000 fb0d 	bl	8017eac <iprintf>
 8017892:	f06f 0305 	mvn.w	r3, #5
 8017896:	e102      	b.n	8017a9e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801789a:	88db      	ldrh	r3, [r3, #6]
 801789c:	b29b      	uxth	r3, r3
 801789e:	4618      	mov	r0, r3
 80178a0:	f7f5 fdaa 	bl	800d3f8 <lwip_htons>
 80178a4:	4603      	mov	r3, r0
 80178a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80178a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80178aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80178ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80178b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80178b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80178b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	891b      	ldrh	r3, [r3, #8]
 80178be:	3b14      	subs	r3, #20
 80178c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80178c4:	e0e1      	b.n	8017a8a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80178c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80178c8:	00db      	lsls	r3, r3, #3
 80178ca:	b29b      	uxth	r3, r3
 80178cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80178d0:	4293      	cmp	r3, r2
 80178d2:	bf28      	it	cs
 80178d4:	4613      	movcs	r3, r2
 80178d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80178d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80178dc:	2114      	movs	r1, #20
 80178de:	200e      	movs	r0, #14
 80178e0:	f7f6 fe38 	bl	800e554 <pbuf_alloc>
 80178e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80178e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	f000 80d5 	beq.w	8017a98 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80178ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f0:	895b      	ldrh	r3, [r3, #10]
 80178f2:	2b13      	cmp	r3, #19
 80178f4:	d806      	bhi.n	8017904 <ip4_frag+0xd0>
 80178f6:	4b6c      	ldr	r3, [pc, #432]	; (8017aa8 <ip4_frag+0x274>)
 80178f8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80178fc:	496d      	ldr	r1, [pc, #436]	; (8017ab4 <ip4_frag+0x280>)
 80178fe:	486c      	ldr	r0, [pc, #432]	; (8017ab0 <ip4_frag+0x27c>)
 8017900:	f000 fad4 	bl	8017eac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017906:	685b      	ldr	r3, [r3, #4]
 8017908:	2214      	movs	r2, #20
 801790a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801790c:	4618      	mov	r0, r3
 801790e:	f000 f9f3 	bl	8017cf8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017918:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801791a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801791e:	e064      	b.n	80179ea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	895a      	ldrh	r2, [r3, #10]
 8017924:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017926:	1ad3      	subs	r3, r2, r3
 8017928:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	895b      	ldrh	r3, [r3, #10]
 801792e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017930:	429a      	cmp	r2, r3
 8017932:	d906      	bls.n	8017942 <ip4_frag+0x10e>
 8017934:	4b5c      	ldr	r3, [pc, #368]	; (8017aa8 <ip4_frag+0x274>)
 8017936:	f240 322d 	movw	r2, #813	; 0x32d
 801793a:	495f      	ldr	r1, [pc, #380]	; (8017ab8 <ip4_frag+0x284>)
 801793c:	485c      	ldr	r0, [pc, #368]	; (8017ab0 <ip4_frag+0x27c>)
 801793e:	f000 fab5 	bl	8017eac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017942:	8bfa      	ldrh	r2, [r7, #30]
 8017944:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017948:	4293      	cmp	r3, r2
 801794a:	bf28      	it	cs
 801794c:	4613      	movcs	r3, r2
 801794e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017952:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017956:	2b00      	cmp	r3, #0
 8017958:	d105      	bne.n	8017966 <ip4_frag+0x132>
        poff = 0;
 801795a:	2300      	movs	r3, #0
 801795c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	60fb      	str	r3, [r7, #12]
        continue;
 8017964:	e041      	b.n	80179ea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017966:	f7ff ff0d 	bl	8017784 <ip_frag_alloc_pbuf_custom_ref>
 801796a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801796c:	69bb      	ldr	r3, [r7, #24]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d103      	bne.n	801797a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017974:	f7f7 f8d2 	bl	800eb1c <pbuf_free>
        goto memerr;
 8017978:	e08f      	b.n	8017a9a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801797a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017982:	4413      	add	r3, r2
 8017984:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017988:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801798c:	9201      	str	r2, [sp, #4]
 801798e:	9300      	str	r3, [sp, #0]
 8017990:	4603      	mov	r3, r0
 8017992:	2241      	movs	r2, #65	; 0x41
 8017994:	2000      	movs	r0, #0
 8017996:	f7f6 ff07 	bl	800e7a8 <pbuf_alloced_custom>
 801799a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801799c:	697b      	ldr	r3, [r7, #20]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d106      	bne.n	80179b0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80179a2:	69b8      	ldr	r0, [r7, #24]
 80179a4:	f7ff fef6 	bl	8017794 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80179a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179aa:	f7f7 f8b7 	bl	800eb1c <pbuf_free>
        goto memerr;
 80179ae:	e074      	b.n	8017a9a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80179b0:	68f8      	ldr	r0, [r7, #12]
 80179b2:	f7f7 f953 	bl	800ec5c <pbuf_ref>
      pcr->original = p;
 80179b6:	69bb      	ldr	r3, [r7, #24]
 80179b8:	68fa      	ldr	r2, [r7, #12]
 80179ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80179bc:	69bb      	ldr	r3, [r7, #24]
 80179be:	4a3f      	ldr	r2, [pc, #252]	; (8017abc <ip4_frag+0x288>)
 80179c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80179c2:	6979      	ldr	r1, [r7, #20]
 80179c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179c6:	f7f7 f96b 	bl	800eca0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80179ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80179ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80179d2:	1ad3      	subs	r3, r2, r3
 80179d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80179d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d004      	beq.n	80179ea <ip4_frag+0x1b6>
        poff = 0;
 80179e0:	2300      	movs	r3, #0
 80179e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80179ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d196      	bne.n	8017920 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80179f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80179f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80179f8:	4413      	add	r3, r2
 80179fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80179fc:	68bb      	ldr	r3, [r7, #8]
 80179fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017a00:	f1a3 0213 	sub.w	r2, r3, #19
 8017a04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a08:	429a      	cmp	r2, r3
 8017a0a:	bfcc      	ite	gt
 8017a0c:	2301      	movgt	r3, #1
 8017a0e:	2300      	movle	r3, #0
 8017a10:	b2db      	uxtb	r3, r3
 8017a12:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017a14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017a1e:	6a3b      	ldr	r3, [r7, #32]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d002      	beq.n	8017a2a <ip4_frag+0x1f6>
 8017a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d003      	beq.n	8017a32 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017a2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017a32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7f5 fcdf 	bl	800d3f8 <lwip_htons>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	461a      	mov	r2, r3
 8017a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a40:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017a42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017a44:	3314      	adds	r3, #20
 8017a46:	b29b      	uxth	r3, r3
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7f5 fcd5 	bl	800d3f8 <lwip_htons>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	461a      	mov	r2, r3
 8017a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a54:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a58:	2200      	movs	r2, #0
 8017a5a:	729a      	strb	r2, [r3, #10]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017a60:	68bb      	ldr	r3, [r7, #8]
 8017a62:	695b      	ldr	r3, [r3, #20]
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a68:	68b8      	ldr	r0, [r7, #8]
 8017a6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a6e:	f7f7 f855 	bl	800eb1c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017a72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017a78:	1ad3      	subs	r3, r2, r3
 8017a7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017a7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017a82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a84:	4413      	add	r3, r2
 8017a86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017a8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	f47f af19 	bne.w	80178c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017a94:	2300      	movs	r3, #0
 8017a96:	e002      	b.n	8017a9e <ip4_frag+0x26a>
      goto memerr;
 8017a98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	3748      	adds	r7, #72	; 0x48
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}
 8017aa6:	bf00      	nop
 8017aa8:	0801cf74 	.word	0x0801cf74
 8017aac:	0801d150 	.word	0x0801d150
 8017ab0:	0801cfbc 	.word	0x0801cfbc
 8017ab4:	0801d16c 	.word	0x0801d16c
 8017ab8:	0801d18c 	.word	0x0801d18c
 8017abc:	080177cd 	.word	0x080177cd

08017ac0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b086      	sub	sp, #24
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
 8017ac8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017aca:	230e      	movs	r3, #14
 8017acc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	895b      	ldrh	r3, [r3, #10]
 8017ad2:	2b0e      	cmp	r3, #14
 8017ad4:	d96e      	bls.n	8017bb4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	7bdb      	ldrb	r3, [r3, #15]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d106      	bne.n	8017aec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ae4:	3301      	adds	r3, #1
 8017ae6:	b2da      	uxtb	r2, r3
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	685b      	ldr	r3, [r3, #4]
 8017af0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017af2:	693b      	ldr	r3, [r7, #16]
 8017af4:	7b1a      	ldrb	r2, [r3, #12]
 8017af6:	7b5b      	ldrb	r3, [r3, #13]
 8017af8:	021b      	lsls	r3, r3, #8
 8017afa:	4313      	orrs	r3, r2
 8017afc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017afe:	693b      	ldr	r3, [r7, #16]
 8017b00:	781b      	ldrb	r3, [r3, #0]
 8017b02:	f003 0301 	and.w	r3, r3, #1
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d023      	beq.n	8017b52 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	781b      	ldrb	r3, [r3, #0]
 8017b0e:	2b01      	cmp	r3, #1
 8017b10:	d10f      	bne.n	8017b32 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017b12:	693b      	ldr	r3, [r7, #16]
 8017b14:	785b      	ldrb	r3, [r3, #1]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d11b      	bne.n	8017b52 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017b1a:	693b      	ldr	r3, [r7, #16]
 8017b1c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017b1e:	2b5e      	cmp	r3, #94	; 0x5e
 8017b20:	d117      	bne.n	8017b52 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	7b5b      	ldrb	r3, [r3, #13]
 8017b26:	f043 0310 	orr.w	r3, r3, #16
 8017b2a:	b2da      	uxtb	r2, r3
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	735a      	strb	r2, [r3, #13]
 8017b30:	e00f      	b.n	8017b52 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017b32:	693b      	ldr	r3, [r7, #16]
 8017b34:	2206      	movs	r2, #6
 8017b36:	4928      	ldr	r1, [pc, #160]	; (8017bd8 <ethernet_input+0x118>)
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f000 f8cf 	bl	8017cdc <memcmp>
 8017b3e:	4603      	mov	r3, r0
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d106      	bne.n	8017b52 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	7b5b      	ldrb	r3, [r3, #13]
 8017b48:	f043 0308 	orr.w	r3, r3, #8
 8017b4c:	b2da      	uxtb	r2, r3
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017b52:	89fb      	ldrh	r3, [r7, #14]
 8017b54:	2b08      	cmp	r3, #8
 8017b56:	d003      	beq.n	8017b60 <ethernet_input+0xa0>
 8017b58:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017b5c:	d014      	beq.n	8017b88 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017b5e:	e032      	b.n	8017bc6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b66:	f003 0308 	and.w	r3, r3, #8
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d024      	beq.n	8017bb8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017b6e:	8afb      	ldrh	r3, [r7, #22]
 8017b70:	4619      	mov	r1, r3
 8017b72:	6878      	ldr	r0, [r7, #4]
 8017b74:	f7f6 ff4c 	bl	800ea10 <pbuf_remove_header>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d11e      	bne.n	8017bbc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017b7e:	6839      	ldr	r1, [r7, #0]
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f7fe ff27 	bl	80169d4 <ip4_input>
      break;
 8017b86:	e013      	b.n	8017bb0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b8e:	f003 0308 	and.w	r3, r3, #8
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d014      	beq.n	8017bc0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017b96:	8afb      	ldrh	r3, [r7, #22]
 8017b98:	4619      	mov	r1, r3
 8017b9a:	6878      	ldr	r0, [r7, #4]
 8017b9c:	f7f6 ff38 	bl	800ea10 <pbuf_remove_header>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d10e      	bne.n	8017bc4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017ba6:	6839      	ldr	r1, [r7, #0]
 8017ba8:	6878      	ldr	r0, [r7, #4]
 8017baa:	f7fe f8c7 	bl	8015d3c <etharp_input>
      break;
 8017bae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	e00c      	b.n	8017bce <ethernet_input+0x10e>
    goto free_and_return;
 8017bb4:	bf00      	nop
 8017bb6:	e006      	b.n	8017bc6 <ethernet_input+0x106>
        goto free_and_return;
 8017bb8:	bf00      	nop
 8017bba:	e004      	b.n	8017bc6 <ethernet_input+0x106>
        goto free_and_return;
 8017bbc:	bf00      	nop
 8017bbe:	e002      	b.n	8017bc6 <ethernet_input+0x106>
        goto free_and_return;
 8017bc0:	bf00      	nop
 8017bc2:	e000      	b.n	8017bc6 <ethernet_input+0x106>
        goto free_and_return;
 8017bc4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	f7f6 ffa8 	bl	800eb1c <pbuf_free>
  return ERR_OK;
 8017bcc:	2300      	movs	r3, #0
}
 8017bce:	4618      	mov	r0, r3
 8017bd0:	3718      	adds	r7, #24
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd80      	pop	{r7, pc}
 8017bd6:	bf00      	nop
 8017bd8:	080242cc 	.word	0x080242cc

08017bdc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b086      	sub	sp, #24
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	60f8      	str	r0, [r7, #12]
 8017be4:	60b9      	str	r1, [r7, #8]
 8017be6:	607a      	str	r2, [r7, #4]
 8017be8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017bea:	8c3b      	ldrh	r3, [r7, #32]
 8017bec:	4618      	mov	r0, r3
 8017bee:	f7f5 fc03 	bl	800d3f8 <lwip_htons>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017bf6:	210e      	movs	r1, #14
 8017bf8:	68b8      	ldr	r0, [r7, #8]
 8017bfa:	f7f6 fef9 	bl	800e9f0 <pbuf_add_header>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d125      	bne.n	8017c50 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017c04:	68bb      	ldr	r3, [r7, #8]
 8017c06:	685b      	ldr	r3, [r3, #4]
 8017c08:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	8afa      	ldrh	r2, [r7, #22]
 8017c0e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017c10:	693b      	ldr	r3, [r7, #16]
 8017c12:	2206      	movs	r2, #6
 8017c14:	6839      	ldr	r1, [r7, #0]
 8017c16:	4618      	mov	r0, r3
 8017c18:	f000 f86e 	bl	8017cf8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017c1c:	693b      	ldr	r3, [r7, #16]
 8017c1e:	3306      	adds	r3, #6
 8017c20:	2206      	movs	r2, #6
 8017c22:	6879      	ldr	r1, [r7, #4]
 8017c24:	4618      	mov	r0, r3
 8017c26:	f000 f867 	bl	8017cf8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017c30:	2b06      	cmp	r3, #6
 8017c32:	d006      	beq.n	8017c42 <ethernet_output+0x66>
 8017c34:	4b0a      	ldr	r3, [pc, #40]	; (8017c60 <ethernet_output+0x84>)
 8017c36:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017c3a:	490a      	ldr	r1, [pc, #40]	; (8017c64 <ethernet_output+0x88>)
 8017c3c:	480a      	ldr	r0, [pc, #40]	; (8017c68 <ethernet_output+0x8c>)
 8017c3e:	f000 f935 	bl	8017eac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	699b      	ldr	r3, [r3, #24]
 8017c46:	68b9      	ldr	r1, [r7, #8]
 8017c48:	68f8      	ldr	r0, [r7, #12]
 8017c4a:	4798      	blx	r3
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	e002      	b.n	8017c56 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017c50:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017c52:	f06f 0301 	mvn.w	r3, #1
}
 8017c56:	4618      	mov	r0, r3
 8017c58:	3718      	adds	r7, #24
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}
 8017c5e:	bf00      	nop
 8017c60:	0801d19c 	.word	0x0801d19c
 8017c64:	0801d1d4 	.word	0x0801d1d4
 8017c68:	0801d208 	.word	0x0801d208

08017c6c <atoi>:
 8017c6c:	220a      	movs	r2, #10
 8017c6e:	2100      	movs	r1, #0
 8017c70:	f000 bb5e 	b.w	8018330 <strtol>

08017c74 <__libc_init_array>:
 8017c74:	b570      	push	{r4, r5, r6, lr}
 8017c76:	4d0d      	ldr	r5, [pc, #52]	; (8017cac <__libc_init_array+0x38>)
 8017c78:	4c0d      	ldr	r4, [pc, #52]	; (8017cb0 <__libc_init_array+0x3c>)
 8017c7a:	1b64      	subs	r4, r4, r5
 8017c7c:	10a4      	asrs	r4, r4, #2
 8017c7e:	2600      	movs	r6, #0
 8017c80:	42a6      	cmp	r6, r4
 8017c82:	d109      	bne.n	8017c98 <__libc_init_array+0x24>
 8017c84:	4d0b      	ldr	r5, [pc, #44]	; (8017cb4 <__libc_init_array+0x40>)
 8017c86:	4c0c      	ldr	r4, [pc, #48]	; (8017cb8 <__libc_init_array+0x44>)
 8017c88:	f001 fbec 	bl	8019464 <_init>
 8017c8c:	1b64      	subs	r4, r4, r5
 8017c8e:	10a4      	asrs	r4, r4, #2
 8017c90:	2600      	movs	r6, #0
 8017c92:	42a6      	cmp	r6, r4
 8017c94:	d105      	bne.n	8017ca2 <__libc_init_array+0x2e>
 8017c96:	bd70      	pop	{r4, r5, r6, pc}
 8017c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c9c:	4798      	blx	r3
 8017c9e:	3601      	adds	r6, #1
 8017ca0:	e7ee      	b.n	8017c80 <__libc_init_array+0xc>
 8017ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ca6:	4798      	blx	r3
 8017ca8:	3601      	adds	r6, #1
 8017caa:	e7f2      	b.n	8017c92 <__libc_init_array+0x1e>
 8017cac:	08024530 	.word	0x08024530
 8017cb0:	08024530 	.word	0x08024530
 8017cb4:	08024530 	.word	0x08024530
 8017cb8:	08024534 	.word	0x08024534

08017cbc <malloc>:
 8017cbc:	4b02      	ldr	r3, [pc, #8]	; (8017cc8 <malloc+0xc>)
 8017cbe:	4601      	mov	r1, r0
 8017cc0:	6818      	ldr	r0, [r3, #0]
 8017cc2:	f000 b899 	b.w	8017df8 <_malloc_r>
 8017cc6:	bf00      	nop
 8017cc8:	200004ac 	.word	0x200004ac

08017ccc <free>:
 8017ccc:	4b02      	ldr	r3, [pc, #8]	; (8017cd8 <free+0xc>)
 8017cce:	4601      	mov	r1, r0
 8017cd0:	6818      	ldr	r0, [r3, #0]
 8017cd2:	f000 b841 	b.w	8017d58 <_free_r>
 8017cd6:	bf00      	nop
 8017cd8:	200004ac 	.word	0x200004ac

08017cdc <memcmp>:
 8017cdc:	b530      	push	{r4, r5, lr}
 8017cde:	3901      	subs	r1, #1
 8017ce0:	2400      	movs	r4, #0
 8017ce2:	42a2      	cmp	r2, r4
 8017ce4:	d101      	bne.n	8017cea <memcmp+0xe>
 8017ce6:	2000      	movs	r0, #0
 8017ce8:	e005      	b.n	8017cf6 <memcmp+0x1a>
 8017cea:	5d03      	ldrb	r3, [r0, r4]
 8017cec:	3401      	adds	r4, #1
 8017cee:	5d0d      	ldrb	r5, [r1, r4]
 8017cf0:	42ab      	cmp	r3, r5
 8017cf2:	d0f6      	beq.n	8017ce2 <memcmp+0x6>
 8017cf4:	1b58      	subs	r0, r3, r5
 8017cf6:	bd30      	pop	{r4, r5, pc}

08017cf8 <memcpy>:
 8017cf8:	440a      	add	r2, r1
 8017cfa:	4291      	cmp	r1, r2
 8017cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017d00:	d100      	bne.n	8017d04 <memcpy+0xc>
 8017d02:	4770      	bx	lr
 8017d04:	b510      	push	{r4, lr}
 8017d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d0e:	4291      	cmp	r1, r2
 8017d10:	d1f9      	bne.n	8017d06 <memcpy+0xe>
 8017d12:	bd10      	pop	{r4, pc}

08017d14 <memmove>:
 8017d14:	4288      	cmp	r0, r1
 8017d16:	b510      	push	{r4, lr}
 8017d18:	eb01 0402 	add.w	r4, r1, r2
 8017d1c:	d902      	bls.n	8017d24 <memmove+0x10>
 8017d1e:	4284      	cmp	r4, r0
 8017d20:	4623      	mov	r3, r4
 8017d22:	d807      	bhi.n	8017d34 <memmove+0x20>
 8017d24:	1e43      	subs	r3, r0, #1
 8017d26:	42a1      	cmp	r1, r4
 8017d28:	d008      	beq.n	8017d3c <memmove+0x28>
 8017d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d32:	e7f8      	b.n	8017d26 <memmove+0x12>
 8017d34:	4402      	add	r2, r0
 8017d36:	4601      	mov	r1, r0
 8017d38:	428a      	cmp	r2, r1
 8017d3a:	d100      	bne.n	8017d3e <memmove+0x2a>
 8017d3c:	bd10      	pop	{r4, pc}
 8017d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d46:	e7f7      	b.n	8017d38 <memmove+0x24>

08017d48 <memset>:
 8017d48:	4402      	add	r2, r0
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	d100      	bne.n	8017d52 <memset+0xa>
 8017d50:	4770      	bx	lr
 8017d52:	f803 1b01 	strb.w	r1, [r3], #1
 8017d56:	e7f9      	b.n	8017d4c <memset+0x4>

08017d58 <_free_r>:
 8017d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d5a:	2900      	cmp	r1, #0
 8017d5c:	d048      	beq.n	8017df0 <_free_r+0x98>
 8017d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d62:	9001      	str	r0, [sp, #4]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	f1a1 0404 	sub.w	r4, r1, #4
 8017d6a:	bfb8      	it	lt
 8017d6c:	18e4      	addlt	r4, r4, r3
 8017d6e:	f000 fdfd 	bl	801896c <__malloc_lock>
 8017d72:	4a20      	ldr	r2, [pc, #128]	; (8017df4 <_free_r+0x9c>)
 8017d74:	9801      	ldr	r0, [sp, #4]
 8017d76:	6813      	ldr	r3, [r2, #0]
 8017d78:	4615      	mov	r5, r2
 8017d7a:	b933      	cbnz	r3, 8017d8a <_free_r+0x32>
 8017d7c:	6063      	str	r3, [r4, #4]
 8017d7e:	6014      	str	r4, [r2, #0]
 8017d80:	b003      	add	sp, #12
 8017d82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d86:	f000 bdf7 	b.w	8018978 <__malloc_unlock>
 8017d8a:	42a3      	cmp	r3, r4
 8017d8c:	d90b      	bls.n	8017da6 <_free_r+0x4e>
 8017d8e:	6821      	ldr	r1, [r4, #0]
 8017d90:	1862      	adds	r2, r4, r1
 8017d92:	4293      	cmp	r3, r2
 8017d94:	bf04      	itt	eq
 8017d96:	681a      	ldreq	r2, [r3, #0]
 8017d98:	685b      	ldreq	r3, [r3, #4]
 8017d9a:	6063      	str	r3, [r4, #4]
 8017d9c:	bf04      	itt	eq
 8017d9e:	1852      	addeq	r2, r2, r1
 8017da0:	6022      	streq	r2, [r4, #0]
 8017da2:	602c      	str	r4, [r5, #0]
 8017da4:	e7ec      	b.n	8017d80 <_free_r+0x28>
 8017da6:	461a      	mov	r2, r3
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	b10b      	cbz	r3, 8017db0 <_free_r+0x58>
 8017dac:	42a3      	cmp	r3, r4
 8017dae:	d9fa      	bls.n	8017da6 <_free_r+0x4e>
 8017db0:	6811      	ldr	r1, [r2, #0]
 8017db2:	1855      	adds	r5, r2, r1
 8017db4:	42a5      	cmp	r5, r4
 8017db6:	d10b      	bne.n	8017dd0 <_free_r+0x78>
 8017db8:	6824      	ldr	r4, [r4, #0]
 8017dba:	4421      	add	r1, r4
 8017dbc:	1854      	adds	r4, r2, r1
 8017dbe:	42a3      	cmp	r3, r4
 8017dc0:	6011      	str	r1, [r2, #0]
 8017dc2:	d1dd      	bne.n	8017d80 <_free_r+0x28>
 8017dc4:	681c      	ldr	r4, [r3, #0]
 8017dc6:	685b      	ldr	r3, [r3, #4]
 8017dc8:	6053      	str	r3, [r2, #4]
 8017dca:	4421      	add	r1, r4
 8017dcc:	6011      	str	r1, [r2, #0]
 8017dce:	e7d7      	b.n	8017d80 <_free_r+0x28>
 8017dd0:	d902      	bls.n	8017dd8 <_free_r+0x80>
 8017dd2:	230c      	movs	r3, #12
 8017dd4:	6003      	str	r3, [r0, #0]
 8017dd6:	e7d3      	b.n	8017d80 <_free_r+0x28>
 8017dd8:	6825      	ldr	r5, [r4, #0]
 8017dda:	1961      	adds	r1, r4, r5
 8017ddc:	428b      	cmp	r3, r1
 8017dde:	bf04      	itt	eq
 8017de0:	6819      	ldreq	r1, [r3, #0]
 8017de2:	685b      	ldreq	r3, [r3, #4]
 8017de4:	6063      	str	r3, [r4, #4]
 8017de6:	bf04      	itt	eq
 8017de8:	1949      	addeq	r1, r1, r5
 8017dea:	6021      	streq	r1, [r4, #0]
 8017dec:	6054      	str	r4, [r2, #4]
 8017dee:	e7c7      	b.n	8017d80 <_free_r+0x28>
 8017df0:	b003      	add	sp, #12
 8017df2:	bd30      	pop	{r4, r5, pc}
 8017df4:	20000b70 	.word	0x20000b70

08017df8 <_malloc_r>:
 8017df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dfa:	1ccd      	adds	r5, r1, #3
 8017dfc:	f025 0503 	bic.w	r5, r5, #3
 8017e00:	3508      	adds	r5, #8
 8017e02:	2d0c      	cmp	r5, #12
 8017e04:	bf38      	it	cc
 8017e06:	250c      	movcc	r5, #12
 8017e08:	2d00      	cmp	r5, #0
 8017e0a:	4606      	mov	r6, r0
 8017e0c:	db01      	blt.n	8017e12 <_malloc_r+0x1a>
 8017e0e:	42a9      	cmp	r1, r5
 8017e10:	d903      	bls.n	8017e1a <_malloc_r+0x22>
 8017e12:	230c      	movs	r3, #12
 8017e14:	6033      	str	r3, [r6, #0]
 8017e16:	2000      	movs	r0, #0
 8017e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e1a:	f000 fda7 	bl	801896c <__malloc_lock>
 8017e1e:	4921      	ldr	r1, [pc, #132]	; (8017ea4 <_malloc_r+0xac>)
 8017e20:	680a      	ldr	r2, [r1, #0]
 8017e22:	4614      	mov	r4, r2
 8017e24:	b99c      	cbnz	r4, 8017e4e <_malloc_r+0x56>
 8017e26:	4f20      	ldr	r7, [pc, #128]	; (8017ea8 <_malloc_r+0xb0>)
 8017e28:	683b      	ldr	r3, [r7, #0]
 8017e2a:	b923      	cbnz	r3, 8017e36 <_malloc_r+0x3e>
 8017e2c:	4621      	mov	r1, r4
 8017e2e:	4630      	mov	r0, r6
 8017e30:	f000 f90a 	bl	8018048 <_sbrk_r>
 8017e34:	6038      	str	r0, [r7, #0]
 8017e36:	4629      	mov	r1, r5
 8017e38:	4630      	mov	r0, r6
 8017e3a:	f000 f905 	bl	8018048 <_sbrk_r>
 8017e3e:	1c43      	adds	r3, r0, #1
 8017e40:	d123      	bne.n	8017e8a <_malloc_r+0x92>
 8017e42:	230c      	movs	r3, #12
 8017e44:	6033      	str	r3, [r6, #0]
 8017e46:	4630      	mov	r0, r6
 8017e48:	f000 fd96 	bl	8018978 <__malloc_unlock>
 8017e4c:	e7e3      	b.n	8017e16 <_malloc_r+0x1e>
 8017e4e:	6823      	ldr	r3, [r4, #0]
 8017e50:	1b5b      	subs	r3, r3, r5
 8017e52:	d417      	bmi.n	8017e84 <_malloc_r+0x8c>
 8017e54:	2b0b      	cmp	r3, #11
 8017e56:	d903      	bls.n	8017e60 <_malloc_r+0x68>
 8017e58:	6023      	str	r3, [r4, #0]
 8017e5a:	441c      	add	r4, r3
 8017e5c:	6025      	str	r5, [r4, #0]
 8017e5e:	e004      	b.n	8017e6a <_malloc_r+0x72>
 8017e60:	6863      	ldr	r3, [r4, #4]
 8017e62:	42a2      	cmp	r2, r4
 8017e64:	bf0c      	ite	eq
 8017e66:	600b      	streq	r3, [r1, #0]
 8017e68:	6053      	strne	r3, [r2, #4]
 8017e6a:	4630      	mov	r0, r6
 8017e6c:	f000 fd84 	bl	8018978 <__malloc_unlock>
 8017e70:	f104 000b 	add.w	r0, r4, #11
 8017e74:	1d23      	adds	r3, r4, #4
 8017e76:	f020 0007 	bic.w	r0, r0, #7
 8017e7a:	1ac2      	subs	r2, r0, r3
 8017e7c:	d0cc      	beq.n	8017e18 <_malloc_r+0x20>
 8017e7e:	1a1b      	subs	r3, r3, r0
 8017e80:	50a3      	str	r3, [r4, r2]
 8017e82:	e7c9      	b.n	8017e18 <_malloc_r+0x20>
 8017e84:	4622      	mov	r2, r4
 8017e86:	6864      	ldr	r4, [r4, #4]
 8017e88:	e7cc      	b.n	8017e24 <_malloc_r+0x2c>
 8017e8a:	1cc4      	adds	r4, r0, #3
 8017e8c:	f024 0403 	bic.w	r4, r4, #3
 8017e90:	42a0      	cmp	r0, r4
 8017e92:	d0e3      	beq.n	8017e5c <_malloc_r+0x64>
 8017e94:	1a21      	subs	r1, r4, r0
 8017e96:	4630      	mov	r0, r6
 8017e98:	f000 f8d6 	bl	8018048 <_sbrk_r>
 8017e9c:	3001      	adds	r0, #1
 8017e9e:	d1dd      	bne.n	8017e5c <_malloc_r+0x64>
 8017ea0:	e7cf      	b.n	8017e42 <_malloc_r+0x4a>
 8017ea2:	bf00      	nop
 8017ea4:	20000b70 	.word	0x20000b70
 8017ea8:	20000b74 	.word	0x20000b74

08017eac <iprintf>:
 8017eac:	b40f      	push	{r0, r1, r2, r3}
 8017eae:	4b0a      	ldr	r3, [pc, #40]	; (8017ed8 <iprintf+0x2c>)
 8017eb0:	b513      	push	{r0, r1, r4, lr}
 8017eb2:	681c      	ldr	r4, [r3, #0]
 8017eb4:	b124      	cbz	r4, 8017ec0 <iprintf+0x14>
 8017eb6:	69a3      	ldr	r3, [r4, #24]
 8017eb8:	b913      	cbnz	r3, 8017ec0 <iprintf+0x14>
 8017eba:	4620      	mov	r0, r4
 8017ebc:	f000 fc40 	bl	8018740 <__sinit>
 8017ec0:	ab05      	add	r3, sp, #20
 8017ec2:	9a04      	ldr	r2, [sp, #16]
 8017ec4:	68a1      	ldr	r1, [r4, #8]
 8017ec6:	9301      	str	r3, [sp, #4]
 8017ec8:	4620      	mov	r0, r4
 8017eca:	f000 fee1 	bl	8018c90 <_vfiprintf_r>
 8017ece:	b002      	add	sp, #8
 8017ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ed4:	b004      	add	sp, #16
 8017ed6:	4770      	bx	lr
 8017ed8:	200004ac 	.word	0x200004ac

08017edc <_puts_r>:
 8017edc:	b570      	push	{r4, r5, r6, lr}
 8017ede:	460e      	mov	r6, r1
 8017ee0:	4605      	mov	r5, r0
 8017ee2:	b118      	cbz	r0, 8017eec <_puts_r+0x10>
 8017ee4:	6983      	ldr	r3, [r0, #24]
 8017ee6:	b90b      	cbnz	r3, 8017eec <_puts_r+0x10>
 8017ee8:	f000 fc2a 	bl	8018740 <__sinit>
 8017eec:	69ab      	ldr	r3, [r5, #24]
 8017eee:	68ac      	ldr	r4, [r5, #8]
 8017ef0:	b913      	cbnz	r3, 8017ef8 <_puts_r+0x1c>
 8017ef2:	4628      	mov	r0, r5
 8017ef4:	f000 fc24 	bl	8018740 <__sinit>
 8017ef8:	4b2c      	ldr	r3, [pc, #176]	; (8017fac <_puts_r+0xd0>)
 8017efa:	429c      	cmp	r4, r3
 8017efc:	d120      	bne.n	8017f40 <_puts_r+0x64>
 8017efe:	686c      	ldr	r4, [r5, #4]
 8017f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f02:	07db      	lsls	r3, r3, #31
 8017f04:	d405      	bmi.n	8017f12 <_puts_r+0x36>
 8017f06:	89a3      	ldrh	r3, [r4, #12]
 8017f08:	0598      	lsls	r0, r3, #22
 8017f0a:	d402      	bmi.n	8017f12 <_puts_r+0x36>
 8017f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f0e:	f000 fcc7 	bl	80188a0 <__retarget_lock_acquire_recursive>
 8017f12:	89a3      	ldrh	r3, [r4, #12]
 8017f14:	0719      	lsls	r1, r3, #28
 8017f16:	d51d      	bpl.n	8017f54 <_puts_r+0x78>
 8017f18:	6923      	ldr	r3, [r4, #16]
 8017f1a:	b1db      	cbz	r3, 8017f54 <_puts_r+0x78>
 8017f1c:	3e01      	subs	r6, #1
 8017f1e:	68a3      	ldr	r3, [r4, #8]
 8017f20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017f24:	3b01      	subs	r3, #1
 8017f26:	60a3      	str	r3, [r4, #8]
 8017f28:	bb39      	cbnz	r1, 8017f7a <_puts_r+0x9e>
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	da38      	bge.n	8017fa0 <_puts_r+0xc4>
 8017f2e:	4622      	mov	r2, r4
 8017f30:	210a      	movs	r1, #10
 8017f32:	4628      	mov	r0, r5
 8017f34:	f000 fa06 	bl	8018344 <__swbuf_r>
 8017f38:	3001      	adds	r0, #1
 8017f3a:	d011      	beq.n	8017f60 <_puts_r+0x84>
 8017f3c:	250a      	movs	r5, #10
 8017f3e:	e011      	b.n	8017f64 <_puts_r+0x88>
 8017f40:	4b1b      	ldr	r3, [pc, #108]	; (8017fb0 <_puts_r+0xd4>)
 8017f42:	429c      	cmp	r4, r3
 8017f44:	d101      	bne.n	8017f4a <_puts_r+0x6e>
 8017f46:	68ac      	ldr	r4, [r5, #8]
 8017f48:	e7da      	b.n	8017f00 <_puts_r+0x24>
 8017f4a:	4b1a      	ldr	r3, [pc, #104]	; (8017fb4 <_puts_r+0xd8>)
 8017f4c:	429c      	cmp	r4, r3
 8017f4e:	bf08      	it	eq
 8017f50:	68ec      	ldreq	r4, [r5, #12]
 8017f52:	e7d5      	b.n	8017f00 <_puts_r+0x24>
 8017f54:	4621      	mov	r1, r4
 8017f56:	4628      	mov	r0, r5
 8017f58:	f000 fa46 	bl	80183e8 <__swsetup_r>
 8017f5c:	2800      	cmp	r0, #0
 8017f5e:	d0dd      	beq.n	8017f1c <_puts_r+0x40>
 8017f60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017f64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f66:	07da      	lsls	r2, r3, #31
 8017f68:	d405      	bmi.n	8017f76 <_puts_r+0x9a>
 8017f6a:	89a3      	ldrh	r3, [r4, #12]
 8017f6c:	059b      	lsls	r3, r3, #22
 8017f6e:	d402      	bmi.n	8017f76 <_puts_r+0x9a>
 8017f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f72:	f000 fc96 	bl	80188a2 <__retarget_lock_release_recursive>
 8017f76:	4628      	mov	r0, r5
 8017f78:	bd70      	pop	{r4, r5, r6, pc}
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	da04      	bge.n	8017f88 <_puts_r+0xac>
 8017f7e:	69a2      	ldr	r2, [r4, #24]
 8017f80:	429a      	cmp	r2, r3
 8017f82:	dc06      	bgt.n	8017f92 <_puts_r+0xb6>
 8017f84:	290a      	cmp	r1, #10
 8017f86:	d004      	beq.n	8017f92 <_puts_r+0xb6>
 8017f88:	6823      	ldr	r3, [r4, #0]
 8017f8a:	1c5a      	adds	r2, r3, #1
 8017f8c:	6022      	str	r2, [r4, #0]
 8017f8e:	7019      	strb	r1, [r3, #0]
 8017f90:	e7c5      	b.n	8017f1e <_puts_r+0x42>
 8017f92:	4622      	mov	r2, r4
 8017f94:	4628      	mov	r0, r5
 8017f96:	f000 f9d5 	bl	8018344 <__swbuf_r>
 8017f9a:	3001      	adds	r0, #1
 8017f9c:	d1bf      	bne.n	8017f1e <_puts_r+0x42>
 8017f9e:	e7df      	b.n	8017f60 <_puts_r+0x84>
 8017fa0:	6823      	ldr	r3, [r4, #0]
 8017fa2:	250a      	movs	r5, #10
 8017fa4:	1c5a      	adds	r2, r3, #1
 8017fa6:	6022      	str	r2, [r4, #0]
 8017fa8:	701d      	strb	r5, [r3, #0]
 8017faa:	e7db      	b.n	8017f64 <_puts_r+0x88>
 8017fac:	080244b4 	.word	0x080244b4
 8017fb0:	080244d4 	.word	0x080244d4
 8017fb4:	08024494 	.word	0x08024494

08017fb8 <puts>:
 8017fb8:	4b02      	ldr	r3, [pc, #8]	; (8017fc4 <puts+0xc>)
 8017fba:	4601      	mov	r1, r0
 8017fbc:	6818      	ldr	r0, [r3, #0]
 8017fbe:	f7ff bf8d 	b.w	8017edc <_puts_r>
 8017fc2:	bf00      	nop
 8017fc4:	200004ac 	.word	0x200004ac

08017fc8 <rand>:
 8017fc8:	4b17      	ldr	r3, [pc, #92]	; (8018028 <rand+0x60>)
 8017fca:	b510      	push	{r4, lr}
 8017fcc:	681c      	ldr	r4, [r3, #0]
 8017fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017fd0:	b9b3      	cbnz	r3, 8018000 <rand+0x38>
 8017fd2:	2018      	movs	r0, #24
 8017fd4:	f7ff fe72 	bl	8017cbc <malloc>
 8017fd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8017fda:	b928      	cbnz	r0, 8017fe8 <rand+0x20>
 8017fdc:	4602      	mov	r2, r0
 8017fde:	4b13      	ldr	r3, [pc, #76]	; (801802c <rand+0x64>)
 8017fe0:	4813      	ldr	r0, [pc, #76]	; (8018030 <rand+0x68>)
 8017fe2:	214e      	movs	r1, #78	; 0x4e
 8017fe4:	f000 fa6e 	bl	80184c4 <__assert_func>
 8017fe8:	4a12      	ldr	r2, [pc, #72]	; (8018034 <rand+0x6c>)
 8017fea:	4b13      	ldr	r3, [pc, #76]	; (8018038 <rand+0x70>)
 8017fec:	e9c0 2300 	strd	r2, r3, [r0]
 8017ff0:	4b12      	ldr	r3, [pc, #72]	; (801803c <rand+0x74>)
 8017ff2:	6083      	str	r3, [r0, #8]
 8017ff4:	230b      	movs	r3, #11
 8017ff6:	8183      	strh	r3, [r0, #12]
 8017ff8:	2201      	movs	r2, #1
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018000:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018002:	480f      	ldr	r0, [pc, #60]	; (8018040 <rand+0x78>)
 8018004:	690a      	ldr	r2, [r1, #16]
 8018006:	694b      	ldr	r3, [r1, #20]
 8018008:	4c0e      	ldr	r4, [pc, #56]	; (8018044 <rand+0x7c>)
 801800a:	4350      	muls	r0, r2
 801800c:	fb04 0003 	mla	r0, r4, r3, r0
 8018010:	fba2 3404 	umull	r3, r4, r2, r4
 8018014:	1c5a      	adds	r2, r3, #1
 8018016:	4404      	add	r4, r0
 8018018:	f144 0000 	adc.w	r0, r4, #0
 801801c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018020:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018024:	bd10      	pop	{r4, pc}
 8018026:	bf00      	nop
 8018028:	200004ac 	.word	0x200004ac
 801802c:	080243e0 	.word	0x080243e0
 8018030:	080243f7 	.word	0x080243f7
 8018034:	abcd330e 	.word	0xabcd330e
 8018038:	e66d1234 	.word	0xe66d1234
 801803c:	0005deec 	.word	0x0005deec
 8018040:	5851f42d 	.word	0x5851f42d
 8018044:	4c957f2d 	.word	0x4c957f2d

08018048 <_sbrk_r>:
 8018048:	b538      	push	{r3, r4, r5, lr}
 801804a:	4d06      	ldr	r5, [pc, #24]	; (8018064 <_sbrk_r+0x1c>)
 801804c:	2300      	movs	r3, #0
 801804e:	4604      	mov	r4, r0
 8018050:	4608      	mov	r0, r1
 8018052:	602b      	str	r3, [r5, #0]
 8018054:	f7ea fba0 	bl	8002798 <_sbrk>
 8018058:	1c43      	adds	r3, r0, #1
 801805a:	d102      	bne.n	8018062 <_sbrk_r+0x1a>
 801805c:	682b      	ldr	r3, [r5, #0]
 801805e:	b103      	cbz	r3, 8018062 <_sbrk_r+0x1a>
 8018060:	6023      	str	r3, [r4, #0]
 8018062:	bd38      	pop	{r3, r4, r5, pc}
 8018064:	2000fb2c 	.word	0x2000fb2c

08018068 <sniprintf>:
 8018068:	b40c      	push	{r2, r3}
 801806a:	b530      	push	{r4, r5, lr}
 801806c:	4b17      	ldr	r3, [pc, #92]	; (80180cc <sniprintf+0x64>)
 801806e:	1e0c      	subs	r4, r1, #0
 8018070:	681d      	ldr	r5, [r3, #0]
 8018072:	b09d      	sub	sp, #116	; 0x74
 8018074:	da08      	bge.n	8018088 <sniprintf+0x20>
 8018076:	238b      	movs	r3, #139	; 0x8b
 8018078:	602b      	str	r3, [r5, #0]
 801807a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801807e:	b01d      	add	sp, #116	; 0x74
 8018080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018084:	b002      	add	sp, #8
 8018086:	4770      	bx	lr
 8018088:	f44f 7302 	mov.w	r3, #520	; 0x208
 801808c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018090:	bf14      	ite	ne
 8018092:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018096:	4623      	moveq	r3, r4
 8018098:	9304      	str	r3, [sp, #16]
 801809a:	9307      	str	r3, [sp, #28]
 801809c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180a0:	9002      	str	r0, [sp, #8]
 80180a2:	9006      	str	r0, [sp, #24]
 80180a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80180a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80180aa:	ab21      	add	r3, sp, #132	; 0x84
 80180ac:	a902      	add	r1, sp, #8
 80180ae:	4628      	mov	r0, r5
 80180b0:	9301      	str	r3, [sp, #4]
 80180b2:	f000 fcc3 	bl	8018a3c <_svfiprintf_r>
 80180b6:	1c43      	adds	r3, r0, #1
 80180b8:	bfbc      	itt	lt
 80180ba:	238b      	movlt	r3, #139	; 0x8b
 80180bc:	602b      	strlt	r3, [r5, #0]
 80180be:	2c00      	cmp	r4, #0
 80180c0:	d0dd      	beq.n	801807e <sniprintf+0x16>
 80180c2:	9b02      	ldr	r3, [sp, #8]
 80180c4:	2200      	movs	r2, #0
 80180c6:	701a      	strb	r2, [r3, #0]
 80180c8:	e7d9      	b.n	801807e <sniprintf+0x16>
 80180ca:	bf00      	nop
 80180cc:	200004ac 	.word	0x200004ac

080180d0 <siprintf>:
 80180d0:	b40e      	push	{r1, r2, r3}
 80180d2:	b500      	push	{lr}
 80180d4:	b09c      	sub	sp, #112	; 0x70
 80180d6:	ab1d      	add	r3, sp, #116	; 0x74
 80180d8:	9002      	str	r0, [sp, #8]
 80180da:	9006      	str	r0, [sp, #24]
 80180dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80180e0:	4809      	ldr	r0, [pc, #36]	; (8018108 <siprintf+0x38>)
 80180e2:	9107      	str	r1, [sp, #28]
 80180e4:	9104      	str	r1, [sp, #16]
 80180e6:	4909      	ldr	r1, [pc, #36]	; (801810c <siprintf+0x3c>)
 80180e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80180ec:	9105      	str	r1, [sp, #20]
 80180ee:	6800      	ldr	r0, [r0, #0]
 80180f0:	9301      	str	r3, [sp, #4]
 80180f2:	a902      	add	r1, sp, #8
 80180f4:	f000 fca2 	bl	8018a3c <_svfiprintf_r>
 80180f8:	9b02      	ldr	r3, [sp, #8]
 80180fa:	2200      	movs	r2, #0
 80180fc:	701a      	strb	r2, [r3, #0]
 80180fe:	b01c      	add	sp, #112	; 0x70
 8018100:	f85d eb04 	ldr.w	lr, [sp], #4
 8018104:	b003      	add	sp, #12
 8018106:	4770      	bx	lr
 8018108:	200004ac 	.word	0x200004ac
 801810c:	ffff0208 	.word	0xffff0208

08018110 <strcat>:
 8018110:	b510      	push	{r4, lr}
 8018112:	4602      	mov	r2, r0
 8018114:	7814      	ldrb	r4, [r2, #0]
 8018116:	4613      	mov	r3, r2
 8018118:	3201      	adds	r2, #1
 801811a:	2c00      	cmp	r4, #0
 801811c:	d1fa      	bne.n	8018114 <strcat+0x4>
 801811e:	3b01      	subs	r3, #1
 8018120:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018124:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018128:	2a00      	cmp	r2, #0
 801812a:	d1f9      	bne.n	8018120 <strcat+0x10>
 801812c:	bd10      	pop	{r4, pc}

0801812e <strchr>:
 801812e:	b2c9      	uxtb	r1, r1
 8018130:	4603      	mov	r3, r0
 8018132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018136:	b11a      	cbz	r2, 8018140 <strchr+0x12>
 8018138:	428a      	cmp	r2, r1
 801813a:	d1f9      	bne.n	8018130 <strchr+0x2>
 801813c:	4618      	mov	r0, r3
 801813e:	4770      	bx	lr
 8018140:	2900      	cmp	r1, #0
 8018142:	bf18      	it	ne
 8018144:	2300      	movne	r3, #0
 8018146:	e7f9      	b.n	801813c <strchr+0xe>

08018148 <strcpy>:
 8018148:	4603      	mov	r3, r0
 801814a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801814e:	f803 2b01 	strb.w	r2, [r3], #1
 8018152:	2a00      	cmp	r2, #0
 8018154:	d1f9      	bne.n	801814a <strcpy+0x2>
 8018156:	4770      	bx	lr

08018158 <strncmp>:
 8018158:	b510      	push	{r4, lr}
 801815a:	b16a      	cbz	r2, 8018178 <strncmp+0x20>
 801815c:	3901      	subs	r1, #1
 801815e:	1884      	adds	r4, r0, r2
 8018160:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018164:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018168:	4293      	cmp	r3, r2
 801816a:	d103      	bne.n	8018174 <strncmp+0x1c>
 801816c:	42a0      	cmp	r0, r4
 801816e:	d001      	beq.n	8018174 <strncmp+0x1c>
 8018170:	2b00      	cmp	r3, #0
 8018172:	d1f5      	bne.n	8018160 <strncmp+0x8>
 8018174:	1a98      	subs	r0, r3, r2
 8018176:	bd10      	pop	{r4, pc}
 8018178:	4610      	mov	r0, r2
 801817a:	e7fc      	b.n	8018176 <strncmp+0x1e>

0801817c <strncpy>:
 801817c:	b510      	push	{r4, lr}
 801817e:	3901      	subs	r1, #1
 8018180:	4603      	mov	r3, r0
 8018182:	b132      	cbz	r2, 8018192 <strncpy+0x16>
 8018184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018188:	f803 4b01 	strb.w	r4, [r3], #1
 801818c:	3a01      	subs	r2, #1
 801818e:	2c00      	cmp	r4, #0
 8018190:	d1f7      	bne.n	8018182 <strncpy+0x6>
 8018192:	441a      	add	r2, r3
 8018194:	2100      	movs	r1, #0
 8018196:	4293      	cmp	r3, r2
 8018198:	d100      	bne.n	801819c <strncpy+0x20>
 801819a:	bd10      	pop	{r4, pc}
 801819c:	f803 1b01 	strb.w	r1, [r3], #1
 80181a0:	e7f9      	b.n	8018196 <strncpy+0x1a>

080181a2 <strstr>:
 80181a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181a4:	780c      	ldrb	r4, [r1, #0]
 80181a6:	b164      	cbz	r4, 80181c2 <strstr+0x20>
 80181a8:	4603      	mov	r3, r0
 80181aa:	781a      	ldrb	r2, [r3, #0]
 80181ac:	4618      	mov	r0, r3
 80181ae:	1c5e      	adds	r6, r3, #1
 80181b0:	b90a      	cbnz	r2, 80181b6 <strstr+0x14>
 80181b2:	4610      	mov	r0, r2
 80181b4:	e005      	b.n	80181c2 <strstr+0x20>
 80181b6:	4294      	cmp	r4, r2
 80181b8:	d108      	bne.n	80181cc <strstr+0x2a>
 80181ba:	460d      	mov	r5, r1
 80181bc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80181c0:	b902      	cbnz	r2, 80181c4 <strstr+0x22>
 80181c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181c4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80181c8:	4297      	cmp	r7, r2
 80181ca:	d0f7      	beq.n	80181bc <strstr+0x1a>
 80181cc:	4633      	mov	r3, r6
 80181ce:	e7ec      	b.n	80181aa <strstr+0x8>

080181d0 <__strtok_r>:
 80181d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181d2:	b908      	cbnz	r0, 80181d8 <__strtok_r+0x8>
 80181d4:	6810      	ldr	r0, [r2, #0]
 80181d6:	b188      	cbz	r0, 80181fc <__strtok_r+0x2c>
 80181d8:	4604      	mov	r4, r0
 80181da:	4620      	mov	r0, r4
 80181dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80181e0:	460f      	mov	r7, r1
 80181e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80181e6:	b91e      	cbnz	r6, 80181f0 <__strtok_r+0x20>
 80181e8:	b965      	cbnz	r5, 8018204 <__strtok_r+0x34>
 80181ea:	6015      	str	r5, [r2, #0]
 80181ec:	4628      	mov	r0, r5
 80181ee:	e005      	b.n	80181fc <__strtok_r+0x2c>
 80181f0:	42b5      	cmp	r5, r6
 80181f2:	d1f6      	bne.n	80181e2 <__strtok_r+0x12>
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d1f0      	bne.n	80181da <__strtok_r+0xa>
 80181f8:	6014      	str	r4, [r2, #0]
 80181fa:	7003      	strb	r3, [r0, #0]
 80181fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181fe:	461c      	mov	r4, r3
 8018200:	e00c      	b.n	801821c <__strtok_r+0x4c>
 8018202:	b915      	cbnz	r5, 801820a <__strtok_r+0x3a>
 8018204:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018208:	460e      	mov	r6, r1
 801820a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801820e:	42ab      	cmp	r3, r5
 8018210:	d1f7      	bne.n	8018202 <__strtok_r+0x32>
 8018212:	2b00      	cmp	r3, #0
 8018214:	d0f3      	beq.n	80181fe <__strtok_r+0x2e>
 8018216:	2300      	movs	r3, #0
 8018218:	f804 3c01 	strb.w	r3, [r4, #-1]
 801821c:	6014      	str	r4, [r2, #0]
 801821e:	e7ed      	b.n	80181fc <__strtok_r+0x2c>

08018220 <strtok_r>:
 8018220:	2301      	movs	r3, #1
 8018222:	f7ff bfd5 	b.w	80181d0 <__strtok_r>
	...

08018228 <_strtol_l.isra.0>:
 8018228:	2b01      	cmp	r3, #1
 801822a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801822e:	d001      	beq.n	8018234 <_strtol_l.isra.0+0xc>
 8018230:	2b24      	cmp	r3, #36	; 0x24
 8018232:	d906      	bls.n	8018242 <_strtol_l.isra.0+0x1a>
 8018234:	f000 f964 	bl	8018500 <__errno>
 8018238:	2316      	movs	r3, #22
 801823a:	6003      	str	r3, [r0, #0]
 801823c:	2000      	movs	r0, #0
 801823e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018242:	4f3a      	ldr	r7, [pc, #232]	; (801832c <_strtol_l.isra.0+0x104>)
 8018244:	468e      	mov	lr, r1
 8018246:	4676      	mov	r6, lr
 8018248:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801824c:	5de5      	ldrb	r5, [r4, r7]
 801824e:	f015 0508 	ands.w	r5, r5, #8
 8018252:	d1f8      	bne.n	8018246 <_strtol_l.isra.0+0x1e>
 8018254:	2c2d      	cmp	r4, #45	; 0x2d
 8018256:	d134      	bne.n	80182c2 <_strtol_l.isra.0+0x9a>
 8018258:	f89e 4000 	ldrb.w	r4, [lr]
 801825c:	f04f 0801 	mov.w	r8, #1
 8018260:	f106 0e02 	add.w	lr, r6, #2
 8018264:	2b00      	cmp	r3, #0
 8018266:	d05c      	beq.n	8018322 <_strtol_l.isra.0+0xfa>
 8018268:	2b10      	cmp	r3, #16
 801826a:	d10c      	bne.n	8018286 <_strtol_l.isra.0+0x5e>
 801826c:	2c30      	cmp	r4, #48	; 0x30
 801826e:	d10a      	bne.n	8018286 <_strtol_l.isra.0+0x5e>
 8018270:	f89e 4000 	ldrb.w	r4, [lr]
 8018274:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018278:	2c58      	cmp	r4, #88	; 0x58
 801827a:	d14d      	bne.n	8018318 <_strtol_l.isra.0+0xf0>
 801827c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018280:	2310      	movs	r3, #16
 8018282:	f10e 0e02 	add.w	lr, lr, #2
 8018286:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801828a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801828e:	2600      	movs	r6, #0
 8018290:	fbbc f9f3 	udiv	r9, ip, r3
 8018294:	4635      	mov	r5, r6
 8018296:	fb03 ca19 	mls	sl, r3, r9, ip
 801829a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801829e:	2f09      	cmp	r7, #9
 80182a0:	d818      	bhi.n	80182d4 <_strtol_l.isra.0+0xac>
 80182a2:	463c      	mov	r4, r7
 80182a4:	42a3      	cmp	r3, r4
 80182a6:	dd24      	ble.n	80182f2 <_strtol_l.isra.0+0xca>
 80182a8:	2e00      	cmp	r6, #0
 80182aa:	db1f      	blt.n	80182ec <_strtol_l.isra.0+0xc4>
 80182ac:	45a9      	cmp	r9, r5
 80182ae:	d31d      	bcc.n	80182ec <_strtol_l.isra.0+0xc4>
 80182b0:	d101      	bne.n	80182b6 <_strtol_l.isra.0+0x8e>
 80182b2:	45a2      	cmp	sl, r4
 80182b4:	db1a      	blt.n	80182ec <_strtol_l.isra.0+0xc4>
 80182b6:	fb05 4503 	mla	r5, r5, r3, r4
 80182ba:	2601      	movs	r6, #1
 80182bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80182c0:	e7eb      	b.n	801829a <_strtol_l.isra.0+0x72>
 80182c2:	2c2b      	cmp	r4, #43	; 0x2b
 80182c4:	bf08      	it	eq
 80182c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80182ca:	46a8      	mov	r8, r5
 80182cc:	bf08      	it	eq
 80182ce:	f106 0e02 	addeq.w	lr, r6, #2
 80182d2:	e7c7      	b.n	8018264 <_strtol_l.isra.0+0x3c>
 80182d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80182d8:	2f19      	cmp	r7, #25
 80182da:	d801      	bhi.n	80182e0 <_strtol_l.isra.0+0xb8>
 80182dc:	3c37      	subs	r4, #55	; 0x37
 80182de:	e7e1      	b.n	80182a4 <_strtol_l.isra.0+0x7c>
 80182e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80182e4:	2f19      	cmp	r7, #25
 80182e6:	d804      	bhi.n	80182f2 <_strtol_l.isra.0+0xca>
 80182e8:	3c57      	subs	r4, #87	; 0x57
 80182ea:	e7db      	b.n	80182a4 <_strtol_l.isra.0+0x7c>
 80182ec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80182f0:	e7e4      	b.n	80182bc <_strtol_l.isra.0+0x94>
 80182f2:	2e00      	cmp	r6, #0
 80182f4:	da05      	bge.n	8018302 <_strtol_l.isra.0+0xda>
 80182f6:	2322      	movs	r3, #34	; 0x22
 80182f8:	6003      	str	r3, [r0, #0]
 80182fa:	4665      	mov	r5, ip
 80182fc:	b942      	cbnz	r2, 8018310 <_strtol_l.isra.0+0xe8>
 80182fe:	4628      	mov	r0, r5
 8018300:	e79d      	b.n	801823e <_strtol_l.isra.0+0x16>
 8018302:	f1b8 0f00 	cmp.w	r8, #0
 8018306:	d000      	beq.n	801830a <_strtol_l.isra.0+0xe2>
 8018308:	426d      	negs	r5, r5
 801830a:	2a00      	cmp	r2, #0
 801830c:	d0f7      	beq.n	80182fe <_strtol_l.isra.0+0xd6>
 801830e:	b10e      	cbz	r6, 8018314 <_strtol_l.isra.0+0xec>
 8018310:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8018314:	6011      	str	r1, [r2, #0]
 8018316:	e7f2      	b.n	80182fe <_strtol_l.isra.0+0xd6>
 8018318:	2430      	movs	r4, #48	; 0x30
 801831a:	2b00      	cmp	r3, #0
 801831c:	d1b3      	bne.n	8018286 <_strtol_l.isra.0+0x5e>
 801831e:	2308      	movs	r3, #8
 8018320:	e7b1      	b.n	8018286 <_strtol_l.isra.0+0x5e>
 8018322:	2c30      	cmp	r4, #48	; 0x30
 8018324:	d0a4      	beq.n	8018270 <_strtol_l.isra.0+0x48>
 8018326:	230a      	movs	r3, #10
 8018328:	e7ad      	b.n	8018286 <_strtol_l.isra.0+0x5e>
 801832a:	bf00      	nop
 801832c:	080242db 	.word	0x080242db

08018330 <strtol>:
 8018330:	4613      	mov	r3, r2
 8018332:	460a      	mov	r2, r1
 8018334:	4601      	mov	r1, r0
 8018336:	4802      	ldr	r0, [pc, #8]	; (8018340 <strtol+0x10>)
 8018338:	6800      	ldr	r0, [r0, #0]
 801833a:	f7ff bf75 	b.w	8018228 <_strtol_l.isra.0>
 801833e:	bf00      	nop
 8018340:	200004ac 	.word	0x200004ac

08018344 <__swbuf_r>:
 8018344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018346:	460e      	mov	r6, r1
 8018348:	4614      	mov	r4, r2
 801834a:	4605      	mov	r5, r0
 801834c:	b118      	cbz	r0, 8018356 <__swbuf_r+0x12>
 801834e:	6983      	ldr	r3, [r0, #24]
 8018350:	b90b      	cbnz	r3, 8018356 <__swbuf_r+0x12>
 8018352:	f000 f9f5 	bl	8018740 <__sinit>
 8018356:	4b21      	ldr	r3, [pc, #132]	; (80183dc <__swbuf_r+0x98>)
 8018358:	429c      	cmp	r4, r3
 801835a:	d12b      	bne.n	80183b4 <__swbuf_r+0x70>
 801835c:	686c      	ldr	r4, [r5, #4]
 801835e:	69a3      	ldr	r3, [r4, #24]
 8018360:	60a3      	str	r3, [r4, #8]
 8018362:	89a3      	ldrh	r3, [r4, #12]
 8018364:	071a      	lsls	r2, r3, #28
 8018366:	d52f      	bpl.n	80183c8 <__swbuf_r+0x84>
 8018368:	6923      	ldr	r3, [r4, #16]
 801836a:	b36b      	cbz	r3, 80183c8 <__swbuf_r+0x84>
 801836c:	6923      	ldr	r3, [r4, #16]
 801836e:	6820      	ldr	r0, [r4, #0]
 8018370:	1ac0      	subs	r0, r0, r3
 8018372:	6963      	ldr	r3, [r4, #20]
 8018374:	b2f6      	uxtb	r6, r6
 8018376:	4283      	cmp	r3, r0
 8018378:	4637      	mov	r7, r6
 801837a:	dc04      	bgt.n	8018386 <__swbuf_r+0x42>
 801837c:	4621      	mov	r1, r4
 801837e:	4628      	mov	r0, r5
 8018380:	f000 f94a 	bl	8018618 <_fflush_r>
 8018384:	bb30      	cbnz	r0, 80183d4 <__swbuf_r+0x90>
 8018386:	68a3      	ldr	r3, [r4, #8]
 8018388:	3b01      	subs	r3, #1
 801838a:	60a3      	str	r3, [r4, #8]
 801838c:	6823      	ldr	r3, [r4, #0]
 801838e:	1c5a      	adds	r2, r3, #1
 8018390:	6022      	str	r2, [r4, #0]
 8018392:	701e      	strb	r6, [r3, #0]
 8018394:	6963      	ldr	r3, [r4, #20]
 8018396:	3001      	adds	r0, #1
 8018398:	4283      	cmp	r3, r0
 801839a:	d004      	beq.n	80183a6 <__swbuf_r+0x62>
 801839c:	89a3      	ldrh	r3, [r4, #12]
 801839e:	07db      	lsls	r3, r3, #31
 80183a0:	d506      	bpl.n	80183b0 <__swbuf_r+0x6c>
 80183a2:	2e0a      	cmp	r6, #10
 80183a4:	d104      	bne.n	80183b0 <__swbuf_r+0x6c>
 80183a6:	4621      	mov	r1, r4
 80183a8:	4628      	mov	r0, r5
 80183aa:	f000 f935 	bl	8018618 <_fflush_r>
 80183ae:	b988      	cbnz	r0, 80183d4 <__swbuf_r+0x90>
 80183b0:	4638      	mov	r0, r7
 80183b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183b4:	4b0a      	ldr	r3, [pc, #40]	; (80183e0 <__swbuf_r+0x9c>)
 80183b6:	429c      	cmp	r4, r3
 80183b8:	d101      	bne.n	80183be <__swbuf_r+0x7a>
 80183ba:	68ac      	ldr	r4, [r5, #8]
 80183bc:	e7cf      	b.n	801835e <__swbuf_r+0x1a>
 80183be:	4b09      	ldr	r3, [pc, #36]	; (80183e4 <__swbuf_r+0xa0>)
 80183c0:	429c      	cmp	r4, r3
 80183c2:	bf08      	it	eq
 80183c4:	68ec      	ldreq	r4, [r5, #12]
 80183c6:	e7ca      	b.n	801835e <__swbuf_r+0x1a>
 80183c8:	4621      	mov	r1, r4
 80183ca:	4628      	mov	r0, r5
 80183cc:	f000 f80c 	bl	80183e8 <__swsetup_r>
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d0cb      	beq.n	801836c <__swbuf_r+0x28>
 80183d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80183d8:	e7ea      	b.n	80183b0 <__swbuf_r+0x6c>
 80183da:	bf00      	nop
 80183dc:	080244b4 	.word	0x080244b4
 80183e0:	080244d4 	.word	0x080244d4
 80183e4:	08024494 	.word	0x08024494

080183e8 <__swsetup_r>:
 80183e8:	4b32      	ldr	r3, [pc, #200]	; (80184b4 <__swsetup_r+0xcc>)
 80183ea:	b570      	push	{r4, r5, r6, lr}
 80183ec:	681d      	ldr	r5, [r3, #0]
 80183ee:	4606      	mov	r6, r0
 80183f0:	460c      	mov	r4, r1
 80183f2:	b125      	cbz	r5, 80183fe <__swsetup_r+0x16>
 80183f4:	69ab      	ldr	r3, [r5, #24]
 80183f6:	b913      	cbnz	r3, 80183fe <__swsetup_r+0x16>
 80183f8:	4628      	mov	r0, r5
 80183fa:	f000 f9a1 	bl	8018740 <__sinit>
 80183fe:	4b2e      	ldr	r3, [pc, #184]	; (80184b8 <__swsetup_r+0xd0>)
 8018400:	429c      	cmp	r4, r3
 8018402:	d10f      	bne.n	8018424 <__swsetup_r+0x3c>
 8018404:	686c      	ldr	r4, [r5, #4]
 8018406:	89a3      	ldrh	r3, [r4, #12]
 8018408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801840c:	0719      	lsls	r1, r3, #28
 801840e:	d42c      	bmi.n	801846a <__swsetup_r+0x82>
 8018410:	06dd      	lsls	r5, r3, #27
 8018412:	d411      	bmi.n	8018438 <__swsetup_r+0x50>
 8018414:	2309      	movs	r3, #9
 8018416:	6033      	str	r3, [r6, #0]
 8018418:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801841c:	81a3      	strh	r3, [r4, #12]
 801841e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018422:	e03e      	b.n	80184a2 <__swsetup_r+0xba>
 8018424:	4b25      	ldr	r3, [pc, #148]	; (80184bc <__swsetup_r+0xd4>)
 8018426:	429c      	cmp	r4, r3
 8018428:	d101      	bne.n	801842e <__swsetup_r+0x46>
 801842a:	68ac      	ldr	r4, [r5, #8]
 801842c:	e7eb      	b.n	8018406 <__swsetup_r+0x1e>
 801842e:	4b24      	ldr	r3, [pc, #144]	; (80184c0 <__swsetup_r+0xd8>)
 8018430:	429c      	cmp	r4, r3
 8018432:	bf08      	it	eq
 8018434:	68ec      	ldreq	r4, [r5, #12]
 8018436:	e7e6      	b.n	8018406 <__swsetup_r+0x1e>
 8018438:	0758      	lsls	r0, r3, #29
 801843a:	d512      	bpl.n	8018462 <__swsetup_r+0x7a>
 801843c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801843e:	b141      	cbz	r1, 8018452 <__swsetup_r+0x6a>
 8018440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018444:	4299      	cmp	r1, r3
 8018446:	d002      	beq.n	801844e <__swsetup_r+0x66>
 8018448:	4630      	mov	r0, r6
 801844a:	f7ff fc85 	bl	8017d58 <_free_r>
 801844e:	2300      	movs	r3, #0
 8018450:	6363      	str	r3, [r4, #52]	; 0x34
 8018452:	89a3      	ldrh	r3, [r4, #12]
 8018454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018458:	81a3      	strh	r3, [r4, #12]
 801845a:	2300      	movs	r3, #0
 801845c:	6063      	str	r3, [r4, #4]
 801845e:	6923      	ldr	r3, [r4, #16]
 8018460:	6023      	str	r3, [r4, #0]
 8018462:	89a3      	ldrh	r3, [r4, #12]
 8018464:	f043 0308 	orr.w	r3, r3, #8
 8018468:	81a3      	strh	r3, [r4, #12]
 801846a:	6923      	ldr	r3, [r4, #16]
 801846c:	b94b      	cbnz	r3, 8018482 <__swsetup_r+0x9a>
 801846e:	89a3      	ldrh	r3, [r4, #12]
 8018470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018478:	d003      	beq.n	8018482 <__swsetup_r+0x9a>
 801847a:	4621      	mov	r1, r4
 801847c:	4630      	mov	r0, r6
 801847e:	f000 fa35 	bl	80188ec <__smakebuf_r>
 8018482:	89a0      	ldrh	r0, [r4, #12]
 8018484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018488:	f010 0301 	ands.w	r3, r0, #1
 801848c:	d00a      	beq.n	80184a4 <__swsetup_r+0xbc>
 801848e:	2300      	movs	r3, #0
 8018490:	60a3      	str	r3, [r4, #8]
 8018492:	6963      	ldr	r3, [r4, #20]
 8018494:	425b      	negs	r3, r3
 8018496:	61a3      	str	r3, [r4, #24]
 8018498:	6923      	ldr	r3, [r4, #16]
 801849a:	b943      	cbnz	r3, 80184ae <__swsetup_r+0xc6>
 801849c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80184a0:	d1ba      	bne.n	8018418 <__swsetup_r+0x30>
 80184a2:	bd70      	pop	{r4, r5, r6, pc}
 80184a4:	0781      	lsls	r1, r0, #30
 80184a6:	bf58      	it	pl
 80184a8:	6963      	ldrpl	r3, [r4, #20]
 80184aa:	60a3      	str	r3, [r4, #8]
 80184ac:	e7f4      	b.n	8018498 <__swsetup_r+0xb0>
 80184ae:	2000      	movs	r0, #0
 80184b0:	e7f7      	b.n	80184a2 <__swsetup_r+0xba>
 80184b2:	bf00      	nop
 80184b4:	200004ac 	.word	0x200004ac
 80184b8:	080244b4 	.word	0x080244b4
 80184bc:	080244d4 	.word	0x080244d4
 80184c0:	08024494 	.word	0x08024494

080184c4 <__assert_func>:
 80184c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184c6:	4614      	mov	r4, r2
 80184c8:	461a      	mov	r2, r3
 80184ca:	4b09      	ldr	r3, [pc, #36]	; (80184f0 <__assert_func+0x2c>)
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	4605      	mov	r5, r0
 80184d0:	68d8      	ldr	r0, [r3, #12]
 80184d2:	b14c      	cbz	r4, 80184e8 <__assert_func+0x24>
 80184d4:	4b07      	ldr	r3, [pc, #28]	; (80184f4 <__assert_func+0x30>)
 80184d6:	9100      	str	r1, [sp, #0]
 80184d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184dc:	4906      	ldr	r1, [pc, #24]	; (80184f8 <__assert_func+0x34>)
 80184de:	462b      	mov	r3, r5
 80184e0:	f000 f9ac 	bl	801883c <fiprintf>
 80184e4:	f000 feee 	bl	80192c4 <abort>
 80184e8:	4b04      	ldr	r3, [pc, #16]	; (80184fc <__assert_func+0x38>)
 80184ea:	461c      	mov	r4, r3
 80184ec:	e7f3      	b.n	80184d6 <__assert_func+0x12>
 80184ee:	bf00      	nop
 80184f0:	200004ac 	.word	0x200004ac
 80184f4:	08024456 	.word	0x08024456
 80184f8:	08024463 	.word	0x08024463
 80184fc:	08024491 	.word	0x08024491

08018500 <__errno>:
 8018500:	4b01      	ldr	r3, [pc, #4]	; (8018508 <__errno+0x8>)
 8018502:	6818      	ldr	r0, [r3, #0]
 8018504:	4770      	bx	lr
 8018506:	bf00      	nop
 8018508:	200004ac 	.word	0x200004ac

0801850c <__sflush_r>:
 801850c:	898a      	ldrh	r2, [r1, #12]
 801850e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018512:	4605      	mov	r5, r0
 8018514:	0710      	lsls	r0, r2, #28
 8018516:	460c      	mov	r4, r1
 8018518:	d458      	bmi.n	80185cc <__sflush_r+0xc0>
 801851a:	684b      	ldr	r3, [r1, #4]
 801851c:	2b00      	cmp	r3, #0
 801851e:	dc05      	bgt.n	801852c <__sflush_r+0x20>
 8018520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018522:	2b00      	cmp	r3, #0
 8018524:	dc02      	bgt.n	801852c <__sflush_r+0x20>
 8018526:	2000      	movs	r0, #0
 8018528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801852c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801852e:	2e00      	cmp	r6, #0
 8018530:	d0f9      	beq.n	8018526 <__sflush_r+0x1a>
 8018532:	2300      	movs	r3, #0
 8018534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018538:	682f      	ldr	r7, [r5, #0]
 801853a:	602b      	str	r3, [r5, #0]
 801853c:	d032      	beq.n	80185a4 <__sflush_r+0x98>
 801853e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018540:	89a3      	ldrh	r3, [r4, #12]
 8018542:	075a      	lsls	r2, r3, #29
 8018544:	d505      	bpl.n	8018552 <__sflush_r+0x46>
 8018546:	6863      	ldr	r3, [r4, #4]
 8018548:	1ac0      	subs	r0, r0, r3
 801854a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801854c:	b10b      	cbz	r3, 8018552 <__sflush_r+0x46>
 801854e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018550:	1ac0      	subs	r0, r0, r3
 8018552:	2300      	movs	r3, #0
 8018554:	4602      	mov	r2, r0
 8018556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018558:	6a21      	ldr	r1, [r4, #32]
 801855a:	4628      	mov	r0, r5
 801855c:	47b0      	blx	r6
 801855e:	1c43      	adds	r3, r0, #1
 8018560:	89a3      	ldrh	r3, [r4, #12]
 8018562:	d106      	bne.n	8018572 <__sflush_r+0x66>
 8018564:	6829      	ldr	r1, [r5, #0]
 8018566:	291d      	cmp	r1, #29
 8018568:	d82c      	bhi.n	80185c4 <__sflush_r+0xb8>
 801856a:	4a2a      	ldr	r2, [pc, #168]	; (8018614 <__sflush_r+0x108>)
 801856c:	40ca      	lsrs	r2, r1
 801856e:	07d6      	lsls	r6, r2, #31
 8018570:	d528      	bpl.n	80185c4 <__sflush_r+0xb8>
 8018572:	2200      	movs	r2, #0
 8018574:	6062      	str	r2, [r4, #4]
 8018576:	04d9      	lsls	r1, r3, #19
 8018578:	6922      	ldr	r2, [r4, #16]
 801857a:	6022      	str	r2, [r4, #0]
 801857c:	d504      	bpl.n	8018588 <__sflush_r+0x7c>
 801857e:	1c42      	adds	r2, r0, #1
 8018580:	d101      	bne.n	8018586 <__sflush_r+0x7a>
 8018582:	682b      	ldr	r3, [r5, #0]
 8018584:	b903      	cbnz	r3, 8018588 <__sflush_r+0x7c>
 8018586:	6560      	str	r0, [r4, #84]	; 0x54
 8018588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801858a:	602f      	str	r7, [r5, #0]
 801858c:	2900      	cmp	r1, #0
 801858e:	d0ca      	beq.n	8018526 <__sflush_r+0x1a>
 8018590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018594:	4299      	cmp	r1, r3
 8018596:	d002      	beq.n	801859e <__sflush_r+0x92>
 8018598:	4628      	mov	r0, r5
 801859a:	f7ff fbdd 	bl	8017d58 <_free_r>
 801859e:	2000      	movs	r0, #0
 80185a0:	6360      	str	r0, [r4, #52]	; 0x34
 80185a2:	e7c1      	b.n	8018528 <__sflush_r+0x1c>
 80185a4:	6a21      	ldr	r1, [r4, #32]
 80185a6:	2301      	movs	r3, #1
 80185a8:	4628      	mov	r0, r5
 80185aa:	47b0      	blx	r6
 80185ac:	1c41      	adds	r1, r0, #1
 80185ae:	d1c7      	bne.n	8018540 <__sflush_r+0x34>
 80185b0:	682b      	ldr	r3, [r5, #0]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d0c4      	beq.n	8018540 <__sflush_r+0x34>
 80185b6:	2b1d      	cmp	r3, #29
 80185b8:	d001      	beq.n	80185be <__sflush_r+0xb2>
 80185ba:	2b16      	cmp	r3, #22
 80185bc:	d101      	bne.n	80185c2 <__sflush_r+0xb6>
 80185be:	602f      	str	r7, [r5, #0]
 80185c0:	e7b1      	b.n	8018526 <__sflush_r+0x1a>
 80185c2:	89a3      	ldrh	r3, [r4, #12]
 80185c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185c8:	81a3      	strh	r3, [r4, #12]
 80185ca:	e7ad      	b.n	8018528 <__sflush_r+0x1c>
 80185cc:	690f      	ldr	r7, [r1, #16]
 80185ce:	2f00      	cmp	r7, #0
 80185d0:	d0a9      	beq.n	8018526 <__sflush_r+0x1a>
 80185d2:	0793      	lsls	r3, r2, #30
 80185d4:	680e      	ldr	r6, [r1, #0]
 80185d6:	bf08      	it	eq
 80185d8:	694b      	ldreq	r3, [r1, #20]
 80185da:	600f      	str	r7, [r1, #0]
 80185dc:	bf18      	it	ne
 80185de:	2300      	movne	r3, #0
 80185e0:	eba6 0807 	sub.w	r8, r6, r7
 80185e4:	608b      	str	r3, [r1, #8]
 80185e6:	f1b8 0f00 	cmp.w	r8, #0
 80185ea:	dd9c      	ble.n	8018526 <__sflush_r+0x1a>
 80185ec:	6a21      	ldr	r1, [r4, #32]
 80185ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80185f0:	4643      	mov	r3, r8
 80185f2:	463a      	mov	r2, r7
 80185f4:	4628      	mov	r0, r5
 80185f6:	47b0      	blx	r6
 80185f8:	2800      	cmp	r0, #0
 80185fa:	dc06      	bgt.n	801860a <__sflush_r+0xfe>
 80185fc:	89a3      	ldrh	r3, [r4, #12]
 80185fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018602:	81a3      	strh	r3, [r4, #12]
 8018604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018608:	e78e      	b.n	8018528 <__sflush_r+0x1c>
 801860a:	4407      	add	r7, r0
 801860c:	eba8 0800 	sub.w	r8, r8, r0
 8018610:	e7e9      	b.n	80185e6 <__sflush_r+0xda>
 8018612:	bf00      	nop
 8018614:	20400001 	.word	0x20400001

08018618 <_fflush_r>:
 8018618:	b538      	push	{r3, r4, r5, lr}
 801861a:	690b      	ldr	r3, [r1, #16]
 801861c:	4605      	mov	r5, r0
 801861e:	460c      	mov	r4, r1
 8018620:	b913      	cbnz	r3, 8018628 <_fflush_r+0x10>
 8018622:	2500      	movs	r5, #0
 8018624:	4628      	mov	r0, r5
 8018626:	bd38      	pop	{r3, r4, r5, pc}
 8018628:	b118      	cbz	r0, 8018632 <_fflush_r+0x1a>
 801862a:	6983      	ldr	r3, [r0, #24]
 801862c:	b90b      	cbnz	r3, 8018632 <_fflush_r+0x1a>
 801862e:	f000 f887 	bl	8018740 <__sinit>
 8018632:	4b14      	ldr	r3, [pc, #80]	; (8018684 <_fflush_r+0x6c>)
 8018634:	429c      	cmp	r4, r3
 8018636:	d11b      	bne.n	8018670 <_fflush_r+0x58>
 8018638:	686c      	ldr	r4, [r5, #4]
 801863a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d0ef      	beq.n	8018622 <_fflush_r+0xa>
 8018642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018644:	07d0      	lsls	r0, r2, #31
 8018646:	d404      	bmi.n	8018652 <_fflush_r+0x3a>
 8018648:	0599      	lsls	r1, r3, #22
 801864a:	d402      	bmi.n	8018652 <_fflush_r+0x3a>
 801864c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801864e:	f000 f927 	bl	80188a0 <__retarget_lock_acquire_recursive>
 8018652:	4628      	mov	r0, r5
 8018654:	4621      	mov	r1, r4
 8018656:	f7ff ff59 	bl	801850c <__sflush_r>
 801865a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801865c:	07da      	lsls	r2, r3, #31
 801865e:	4605      	mov	r5, r0
 8018660:	d4e0      	bmi.n	8018624 <_fflush_r+0xc>
 8018662:	89a3      	ldrh	r3, [r4, #12]
 8018664:	059b      	lsls	r3, r3, #22
 8018666:	d4dd      	bmi.n	8018624 <_fflush_r+0xc>
 8018668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801866a:	f000 f91a 	bl	80188a2 <__retarget_lock_release_recursive>
 801866e:	e7d9      	b.n	8018624 <_fflush_r+0xc>
 8018670:	4b05      	ldr	r3, [pc, #20]	; (8018688 <_fflush_r+0x70>)
 8018672:	429c      	cmp	r4, r3
 8018674:	d101      	bne.n	801867a <_fflush_r+0x62>
 8018676:	68ac      	ldr	r4, [r5, #8]
 8018678:	e7df      	b.n	801863a <_fflush_r+0x22>
 801867a:	4b04      	ldr	r3, [pc, #16]	; (801868c <_fflush_r+0x74>)
 801867c:	429c      	cmp	r4, r3
 801867e:	bf08      	it	eq
 8018680:	68ec      	ldreq	r4, [r5, #12]
 8018682:	e7da      	b.n	801863a <_fflush_r+0x22>
 8018684:	080244b4 	.word	0x080244b4
 8018688:	080244d4 	.word	0x080244d4
 801868c:	08024494 	.word	0x08024494

08018690 <std>:
 8018690:	2300      	movs	r3, #0
 8018692:	b510      	push	{r4, lr}
 8018694:	4604      	mov	r4, r0
 8018696:	e9c0 3300 	strd	r3, r3, [r0]
 801869a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801869e:	6083      	str	r3, [r0, #8]
 80186a0:	8181      	strh	r1, [r0, #12]
 80186a2:	6643      	str	r3, [r0, #100]	; 0x64
 80186a4:	81c2      	strh	r2, [r0, #14]
 80186a6:	6183      	str	r3, [r0, #24]
 80186a8:	4619      	mov	r1, r3
 80186aa:	2208      	movs	r2, #8
 80186ac:	305c      	adds	r0, #92	; 0x5c
 80186ae:	f7ff fb4b 	bl	8017d48 <memset>
 80186b2:	4b05      	ldr	r3, [pc, #20]	; (80186c8 <std+0x38>)
 80186b4:	6263      	str	r3, [r4, #36]	; 0x24
 80186b6:	4b05      	ldr	r3, [pc, #20]	; (80186cc <std+0x3c>)
 80186b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80186ba:	4b05      	ldr	r3, [pc, #20]	; (80186d0 <std+0x40>)
 80186bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80186be:	4b05      	ldr	r3, [pc, #20]	; (80186d4 <std+0x44>)
 80186c0:	6224      	str	r4, [r4, #32]
 80186c2:	6323      	str	r3, [r4, #48]	; 0x30
 80186c4:	bd10      	pop	{r4, pc}
 80186c6:	bf00      	nop
 80186c8:	08019219 	.word	0x08019219
 80186cc:	0801923b 	.word	0x0801923b
 80186d0:	08019273 	.word	0x08019273
 80186d4:	08019297 	.word	0x08019297

080186d8 <_cleanup_r>:
 80186d8:	4901      	ldr	r1, [pc, #4]	; (80186e0 <_cleanup_r+0x8>)
 80186da:	f000 b8c1 	b.w	8018860 <_fwalk_reent>
 80186de:	bf00      	nop
 80186e0:	08018619 	.word	0x08018619

080186e4 <__sfmoreglue>:
 80186e4:	b570      	push	{r4, r5, r6, lr}
 80186e6:	1e4a      	subs	r2, r1, #1
 80186e8:	2568      	movs	r5, #104	; 0x68
 80186ea:	4355      	muls	r5, r2
 80186ec:	460e      	mov	r6, r1
 80186ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80186f2:	f7ff fb81 	bl	8017df8 <_malloc_r>
 80186f6:	4604      	mov	r4, r0
 80186f8:	b140      	cbz	r0, 801870c <__sfmoreglue+0x28>
 80186fa:	2100      	movs	r1, #0
 80186fc:	e9c0 1600 	strd	r1, r6, [r0]
 8018700:	300c      	adds	r0, #12
 8018702:	60a0      	str	r0, [r4, #8]
 8018704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018708:	f7ff fb1e 	bl	8017d48 <memset>
 801870c:	4620      	mov	r0, r4
 801870e:	bd70      	pop	{r4, r5, r6, pc}

08018710 <__sfp_lock_acquire>:
 8018710:	4801      	ldr	r0, [pc, #4]	; (8018718 <__sfp_lock_acquire+0x8>)
 8018712:	f000 b8c5 	b.w	80188a0 <__retarget_lock_acquire_recursive>
 8018716:	bf00      	nop
 8018718:	2000fb38 	.word	0x2000fb38

0801871c <__sfp_lock_release>:
 801871c:	4801      	ldr	r0, [pc, #4]	; (8018724 <__sfp_lock_release+0x8>)
 801871e:	f000 b8c0 	b.w	80188a2 <__retarget_lock_release_recursive>
 8018722:	bf00      	nop
 8018724:	2000fb38 	.word	0x2000fb38

08018728 <__sinit_lock_acquire>:
 8018728:	4801      	ldr	r0, [pc, #4]	; (8018730 <__sinit_lock_acquire+0x8>)
 801872a:	f000 b8b9 	b.w	80188a0 <__retarget_lock_acquire_recursive>
 801872e:	bf00      	nop
 8018730:	2000fb33 	.word	0x2000fb33

08018734 <__sinit_lock_release>:
 8018734:	4801      	ldr	r0, [pc, #4]	; (801873c <__sinit_lock_release+0x8>)
 8018736:	f000 b8b4 	b.w	80188a2 <__retarget_lock_release_recursive>
 801873a:	bf00      	nop
 801873c:	2000fb33 	.word	0x2000fb33

08018740 <__sinit>:
 8018740:	b510      	push	{r4, lr}
 8018742:	4604      	mov	r4, r0
 8018744:	f7ff fff0 	bl	8018728 <__sinit_lock_acquire>
 8018748:	69a3      	ldr	r3, [r4, #24]
 801874a:	b11b      	cbz	r3, 8018754 <__sinit+0x14>
 801874c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018750:	f7ff bff0 	b.w	8018734 <__sinit_lock_release>
 8018754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018758:	6523      	str	r3, [r4, #80]	; 0x50
 801875a:	4b13      	ldr	r3, [pc, #76]	; (80187a8 <__sinit+0x68>)
 801875c:	4a13      	ldr	r2, [pc, #76]	; (80187ac <__sinit+0x6c>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	62a2      	str	r2, [r4, #40]	; 0x28
 8018762:	42a3      	cmp	r3, r4
 8018764:	bf04      	itt	eq
 8018766:	2301      	moveq	r3, #1
 8018768:	61a3      	streq	r3, [r4, #24]
 801876a:	4620      	mov	r0, r4
 801876c:	f000 f820 	bl	80187b0 <__sfp>
 8018770:	6060      	str	r0, [r4, #4]
 8018772:	4620      	mov	r0, r4
 8018774:	f000 f81c 	bl	80187b0 <__sfp>
 8018778:	60a0      	str	r0, [r4, #8]
 801877a:	4620      	mov	r0, r4
 801877c:	f000 f818 	bl	80187b0 <__sfp>
 8018780:	2200      	movs	r2, #0
 8018782:	60e0      	str	r0, [r4, #12]
 8018784:	2104      	movs	r1, #4
 8018786:	6860      	ldr	r0, [r4, #4]
 8018788:	f7ff ff82 	bl	8018690 <std>
 801878c:	68a0      	ldr	r0, [r4, #8]
 801878e:	2201      	movs	r2, #1
 8018790:	2109      	movs	r1, #9
 8018792:	f7ff ff7d 	bl	8018690 <std>
 8018796:	68e0      	ldr	r0, [r4, #12]
 8018798:	2202      	movs	r2, #2
 801879a:	2112      	movs	r1, #18
 801879c:	f7ff ff78 	bl	8018690 <std>
 80187a0:	2301      	movs	r3, #1
 80187a2:	61a3      	str	r3, [r4, #24]
 80187a4:	e7d2      	b.n	801874c <__sinit+0xc>
 80187a6:	bf00      	nop
 80187a8:	080243dc 	.word	0x080243dc
 80187ac:	080186d9 	.word	0x080186d9

080187b0 <__sfp>:
 80187b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187b2:	4607      	mov	r7, r0
 80187b4:	f7ff ffac 	bl	8018710 <__sfp_lock_acquire>
 80187b8:	4b1e      	ldr	r3, [pc, #120]	; (8018834 <__sfp+0x84>)
 80187ba:	681e      	ldr	r6, [r3, #0]
 80187bc:	69b3      	ldr	r3, [r6, #24]
 80187be:	b913      	cbnz	r3, 80187c6 <__sfp+0x16>
 80187c0:	4630      	mov	r0, r6
 80187c2:	f7ff ffbd 	bl	8018740 <__sinit>
 80187c6:	3648      	adds	r6, #72	; 0x48
 80187c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80187cc:	3b01      	subs	r3, #1
 80187ce:	d503      	bpl.n	80187d8 <__sfp+0x28>
 80187d0:	6833      	ldr	r3, [r6, #0]
 80187d2:	b30b      	cbz	r3, 8018818 <__sfp+0x68>
 80187d4:	6836      	ldr	r6, [r6, #0]
 80187d6:	e7f7      	b.n	80187c8 <__sfp+0x18>
 80187d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80187dc:	b9d5      	cbnz	r5, 8018814 <__sfp+0x64>
 80187de:	4b16      	ldr	r3, [pc, #88]	; (8018838 <__sfp+0x88>)
 80187e0:	60e3      	str	r3, [r4, #12]
 80187e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80187e6:	6665      	str	r5, [r4, #100]	; 0x64
 80187e8:	f000 f859 	bl	801889e <__retarget_lock_init_recursive>
 80187ec:	f7ff ff96 	bl	801871c <__sfp_lock_release>
 80187f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80187f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80187f8:	6025      	str	r5, [r4, #0]
 80187fa:	61a5      	str	r5, [r4, #24]
 80187fc:	2208      	movs	r2, #8
 80187fe:	4629      	mov	r1, r5
 8018800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018804:	f7ff faa0 	bl	8017d48 <memset>
 8018808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801880c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018810:	4620      	mov	r0, r4
 8018812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018814:	3468      	adds	r4, #104	; 0x68
 8018816:	e7d9      	b.n	80187cc <__sfp+0x1c>
 8018818:	2104      	movs	r1, #4
 801881a:	4638      	mov	r0, r7
 801881c:	f7ff ff62 	bl	80186e4 <__sfmoreglue>
 8018820:	4604      	mov	r4, r0
 8018822:	6030      	str	r0, [r6, #0]
 8018824:	2800      	cmp	r0, #0
 8018826:	d1d5      	bne.n	80187d4 <__sfp+0x24>
 8018828:	f7ff ff78 	bl	801871c <__sfp_lock_release>
 801882c:	230c      	movs	r3, #12
 801882e:	603b      	str	r3, [r7, #0]
 8018830:	e7ee      	b.n	8018810 <__sfp+0x60>
 8018832:	bf00      	nop
 8018834:	080243dc 	.word	0x080243dc
 8018838:	ffff0001 	.word	0xffff0001

0801883c <fiprintf>:
 801883c:	b40e      	push	{r1, r2, r3}
 801883e:	b503      	push	{r0, r1, lr}
 8018840:	4601      	mov	r1, r0
 8018842:	ab03      	add	r3, sp, #12
 8018844:	4805      	ldr	r0, [pc, #20]	; (801885c <fiprintf+0x20>)
 8018846:	f853 2b04 	ldr.w	r2, [r3], #4
 801884a:	6800      	ldr	r0, [r0, #0]
 801884c:	9301      	str	r3, [sp, #4]
 801884e:	f000 fa1f 	bl	8018c90 <_vfiprintf_r>
 8018852:	b002      	add	sp, #8
 8018854:	f85d eb04 	ldr.w	lr, [sp], #4
 8018858:	b003      	add	sp, #12
 801885a:	4770      	bx	lr
 801885c:	200004ac 	.word	0x200004ac

08018860 <_fwalk_reent>:
 8018860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018864:	4606      	mov	r6, r0
 8018866:	4688      	mov	r8, r1
 8018868:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801886c:	2700      	movs	r7, #0
 801886e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018872:	f1b9 0901 	subs.w	r9, r9, #1
 8018876:	d505      	bpl.n	8018884 <_fwalk_reent+0x24>
 8018878:	6824      	ldr	r4, [r4, #0]
 801887a:	2c00      	cmp	r4, #0
 801887c:	d1f7      	bne.n	801886e <_fwalk_reent+0xe>
 801887e:	4638      	mov	r0, r7
 8018880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018884:	89ab      	ldrh	r3, [r5, #12]
 8018886:	2b01      	cmp	r3, #1
 8018888:	d907      	bls.n	801889a <_fwalk_reent+0x3a>
 801888a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801888e:	3301      	adds	r3, #1
 8018890:	d003      	beq.n	801889a <_fwalk_reent+0x3a>
 8018892:	4629      	mov	r1, r5
 8018894:	4630      	mov	r0, r6
 8018896:	47c0      	blx	r8
 8018898:	4307      	orrs	r7, r0
 801889a:	3568      	adds	r5, #104	; 0x68
 801889c:	e7e9      	b.n	8018872 <_fwalk_reent+0x12>

0801889e <__retarget_lock_init_recursive>:
 801889e:	4770      	bx	lr

080188a0 <__retarget_lock_acquire_recursive>:
 80188a0:	4770      	bx	lr

080188a2 <__retarget_lock_release_recursive>:
 80188a2:	4770      	bx	lr

080188a4 <__swhatbuf_r>:
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	460e      	mov	r6, r1
 80188a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188ac:	2900      	cmp	r1, #0
 80188ae:	b096      	sub	sp, #88	; 0x58
 80188b0:	4614      	mov	r4, r2
 80188b2:	461d      	mov	r5, r3
 80188b4:	da07      	bge.n	80188c6 <__swhatbuf_r+0x22>
 80188b6:	2300      	movs	r3, #0
 80188b8:	602b      	str	r3, [r5, #0]
 80188ba:	89b3      	ldrh	r3, [r6, #12]
 80188bc:	061a      	lsls	r2, r3, #24
 80188be:	d410      	bmi.n	80188e2 <__swhatbuf_r+0x3e>
 80188c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80188c4:	e00e      	b.n	80188e4 <__swhatbuf_r+0x40>
 80188c6:	466a      	mov	r2, sp
 80188c8:	f000 fd14 	bl	80192f4 <_fstat_r>
 80188cc:	2800      	cmp	r0, #0
 80188ce:	dbf2      	blt.n	80188b6 <__swhatbuf_r+0x12>
 80188d0:	9a01      	ldr	r2, [sp, #4]
 80188d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80188d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80188da:	425a      	negs	r2, r3
 80188dc:	415a      	adcs	r2, r3
 80188de:	602a      	str	r2, [r5, #0]
 80188e0:	e7ee      	b.n	80188c0 <__swhatbuf_r+0x1c>
 80188e2:	2340      	movs	r3, #64	; 0x40
 80188e4:	2000      	movs	r0, #0
 80188e6:	6023      	str	r3, [r4, #0]
 80188e8:	b016      	add	sp, #88	; 0x58
 80188ea:	bd70      	pop	{r4, r5, r6, pc}

080188ec <__smakebuf_r>:
 80188ec:	898b      	ldrh	r3, [r1, #12]
 80188ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80188f0:	079d      	lsls	r5, r3, #30
 80188f2:	4606      	mov	r6, r0
 80188f4:	460c      	mov	r4, r1
 80188f6:	d507      	bpl.n	8018908 <__smakebuf_r+0x1c>
 80188f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80188fc:	6023      	str	r3, [r4, #0]
 80188fe:	6123      	str	r3, [r4, #16]
 8018900:	2301      	movs	r3, #1
 8018902:	6163      	str	r3, [r4, #20]
 8018904:	b002      	add	sp, #8
 8018906:	bd70      	pop	{r4, r5, r6, pc}
 8018908:	ab01      	add	r3, sp, #4
 801890a:	466a      	mov	r2, sp
 801890c:	f7ff ffca 	bl	80188a4 <__swhatbuf_r>
 8018910:	9900      	ldr	r1, [sp, #0]
 8018912:	4605      	mov	r5, r0
 8018914:	4630      	mov	r0, r6
 8018916:	f7ff fa6f 	bl	8017df8 <_malloc_r>
 801891a:	b948      	cbnz	r0, 8018930 <__smakebuf_r+0x44>
 801891c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018920:	059a      	lsls	r2, r3, #22
 8018922:	d4ef      	bmi.n	8018904 <__smakebuf_r+0x18>
 8018924:	f023 0303 	bic.w	r3, r3, #3
 8018928:	f043 0302 	orr.w	r3, r3, #2
 801892c:	81a3      	strh	r3, [r4, #12]
 801892e:	e7e3      	b.n	80188f8 <__smakebuf_r+0xc>
 8018930:	4b0d      	ldr	r3, [pc, #52]	; (8018968 <__smakebuf_r+0x7c>)
 8018932:	62b3      	str	r3, [r6, #40]	; 0x28
 8018934:	89a3      	ldrh	r3, [r4, #12]
 8018936:	6020      	str	r0, [r4, #0]
 8018938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801893c:	81a3      	strh	r3, [r4, #12]
 801893e:	9b00      	ldr	r3, [sp, #0]
 8018940:	6163      	str	r3, [r4, #20]
 8018942:	9b01      	ldr	r3, [sp, #4]
 8018944:	6120      	str	r0, [r4, #16]
 8018946:	b15b      	cbz	r3, 8018960 <__smakebuf_r+0x74>
 8018948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801894c:	4630      	mov	r0, r6
 801894e:	f000 fce3 	bl	8019318 <_isatty_r>
 8018952:	b128      	cbz	r0, 8018960 <__smakebuf_r+0x74>
 8018954:	89a3      	ldrh	r3, [r4, #12]
 8018956:	f023 0303 	bic.w	r3, r3, #3
 801895a:	f043 0301 	orr.w	r3, r3, #1
 801895e:	81a3      	strh	r3, [r4, #12]
 8018960:	89a0      	ldrh	r0, [r4, #12]
 8018962:	4305      	orrs	r5, r0
 8018964:	81a5      	strh	r5, [r4, #12]
 8018966:	e7cd      	b.n	8018904 <__smakebuf_r+0x18>
 8018968:	080186d9 	.word	0x080186d9

0801896c <__malloc_lock>:
 801896c:	4801      	ldr	r0, [pc, #4]	; (8018974 <__malloc_lock+0x8>)
 801896e:	f7ff bf97 	b.w	80188a0 <__retarget_lock_acquire_recursive>
 8018972:	bf00      	nop
 8018974:	2000fb34 	.word	0x2000fb34

08018978 <__malloc_unlock>:
 8018978:	4801      	ldr	r0, [pc, #4]	; (8018980 <__malloc_unlock+0x8>)
 801897a:	f7ff bf92 	b.w	80188a2 <__retarget_lock_release_recursive>
 801897e:	bf00      	nop
 8018980:	2000fb34 	.word	0x2000fb34

08018984 <__ssputs_r>:
 8018984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018988:	688e      	ldr	r6, [r1, #8]
 801898a:	429e      	cmp	r6, r3
 801898c:	4682      	mov	sl, r0
 801898e:	460c      	mov	r4, r1
 8018990:	4690      	mov	r8, r2
 8018992:	461f      	mov	r7, r3
 8018994:	d838      	bhi.n	8018a08 <__ssputs_r+0x84>
 8018996:	898a      	ldrh	r2, [r1, #12]
 8018998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801899c:	d032      	beq.n	8018a04 <__ssputs_r+0x80>
 801899e:	6825      	ldr	r5, [r4, #0]
 80189a0:	6909      	ldr	r1, [r1, #16]
 80189a2:	eba5 0901 	sub.w	r9, r5, r1
 80189a6:	6965      	ldr	r5, [r4, #20]
 80189a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80189b0:	3301      	adds	r3, #1
 80189b2:	444b      	add	r3, r9
 80189b4:	106d      	asrs	r5, r5, #1
 80189b6:	429d      	cmp	r5, r3
 80189b8:	bf38      	it	cc
 80189ba:	461d      	movcc	r5, r3
 80189bc:	0553      	lsls	r3, r2, #21
 80189be:	d531      	bpl.n	8018a24 <__ssputs_r+0xa0>
 80189c0:	4629      	mov	r1, r5
 80189c2:	f7ff fa19 	bl	8017df8 <_malloc_r>
 80189c6:	4606      	mov	r6, r0
 80189c8:	b950      	cbnz	r0, 80189e0 <__ssputs_r+0x5c>
 80189ca:	230c      	movs	r3, #12
 80189cc:	f8ca 3000 	str.w	r3, [sl]
 80189d0:	89a3      	ldrh	r3, [r4, #12]
 80189d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189d6:	81a3      	strh	r3, [r4, #12]
 80189d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80189dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189e0:	6921      	ldr	r1, [r4, #16]
 80189e2:	464a      	mov	r2, r9
 80189e4:	f7ff f988 	bl	8017cf8 <memcpy>
 80189e8:	89a3      	ldrh	r3, [r4, #12]
 80189ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80189ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189f2:	81a3      	strh	r3, [r4, #12]
 80189f4:	6126      	str	r6, [r4, #16]
 80189f6:	6165      	str	r5, [r4, #20]
 80189f8:	444e      	add	r6, r9
 80189fa:	eba5 0509 	sub.w	r5, r5, r9
 80189fe:	6026      	str	r6, [r4, #0]
 8018a00:	60a5      	str	r5, [r4, #8]
 8018a02:	463e      	mov	r6, r7
 8018a04:	42be      	cmp	r6, r7
 8018a06:	d900      	bls.n	8018a0a <__ssputs_r+0x86>
 8018a08:	463e      	mov	r6, r7
 8018a0a:	4632      	mov	r2, r6
 8018a0c:	6820      	ldr	r0, [r4, #0]
 8018a0e:	4641      	mov	r1, r8
 8018a10:	f7ff f980 	bl	8017d14 <memmove>
 8018a14:	68a3      	ldr	r3, [r4, #8]
 8018a16:	6822      	ldr	r2, [r4, #0]
 8018a18:	1b9b      	subs	r3, r3, r6
 8018a1a:	4432      	add	r2, r6
 8018a1c:	60a3      	str	r3, [r4, #8]
 8018a1e:	6022      	str	r2, [r4, #0]
 8018a20:	2000      	movs	r0, #0
 8018a22:	e7db      	b.n	80189dc <__ssputs_r+0x58>
 8018a24:	462a      	mov	r2, r5
 8018a26:	f000 fc99 	bl	801935c <_realloc_r>
 8018a2a:	4606      	mov	r6, r0
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	d1e1      	bne.n	80189f4 <__ssputs_r+0x70>
 8018a30:	6921      	ldr	r1, [r4, #16]
 8018a32:	4650      	mov	r0, sl
 8018a34:	f7ff f990 	bl	8017d58 <_free_r>
 8018a38:	e7c7      	b.n	80189ca <__ssputs_r+0x46>
	...

08018a3c <_svfiprintf_r>:
 8018a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a40:	4698      	mov	r8, r3
 8018a42:	898b      	ldrh	r3, [r1, #12]
 8018a44:	061b      	lsls	r3, r3, #24
 8018a46:	b09d      	sub	sp, #116	; 0x74
 8018a48:	4607      	mov	r7, r0
 8018a4a:	460d      	mov	r5, r1
 8018a4c:	4614      	mov	r4, r2
 8018a4e:	d50e      	bpl.n	8018a6e <_svfiprintf_r+0x32>
 8018a50:	690b      	ldr	r3, [r1, #16]
 8018a52:	b963      	cbnz	r3, 8018a6e <_svfiprintf_r+0x32>
 8018a54:	2140      	movs	r1, #64	; 0x40
 8018a56:	f7ff f9cf 	bl	8017df8 <_malloc_r>
 8018a5a:	6028      	str	r0, [r5, #0]
 8018a5c:	6128      	str	r0, [r5, #16]
 8018a5e:	b920      	cbnz	r0, 8018a6a <_svfiprintf_r+0x2e>
 8018a60:	230c      	movs	r3, #12
 8018a62:	603b      	str	r3, [r7, #0]
 8018a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a68:	e0d1      	b.n	8018c0e <_svfiprintf_r+0x1d2>
 8018a6a:	2340      	movs	r3, #64	; 0x40
 8018a6c:	616b      	str	r3, [r5, #20]
 8018a6e:	2300      	movs	r3, #0
 8018a70:	9309      	str	r3, [sp, #36]	; 0x24
 8018a72:	2320      	movs	r3, #32
 8018a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a7c:	2330      	movs	r3, #48	; 0x30
 8018a7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018c28 <_svfiprintf_r+0x1ec>
 8018a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a86:	f04f 0901 	mov.w	r9, #1
 8018a8a:	4623      	mov	r3, r4
 8018a8c:	469a      	mov	sl, r3
 8018a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a92:	b10a      	cbz	r2, 8018a98 <_svfiprintf_r+0x5c>
 8018a94:	2a25      	cmp	r2, #37	; 0x25
 8018a96:	d1f9      	bne.n	8018a8c <_svfiprintf_r+0x50>
 8018a98:	ebba 0b04 	subs.w	fp, sl, r4
 8018a9c:	d00b      	beq.n	8018ab6 <_svfiprintf_r+0x7a>
 8018a9e:	465b      	mov	r3, fp
 8018aa0:	4622      	mov	r2, r4
 8018aa2:	4629      	mov	r1, r5
 8018aa4:	4638      	mov	r0, r7
 8018aa6:	f7ff ff6d 	bl	8018984 <__ssputs_r>
 8018aaa:	3001      	adds	r0, #1
 8018aac:	f000 80aa 	beq.w	8018c04 <_svfiprintf_r+0x1c8>
 8018ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ab2:	445a      	add	r2, fp
 8018ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8018ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	f000 80a2 	beq.w	8018c04 <_svfiprintf_r+0x1c8>
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018aca:	f10a 0a01 	add.w	sl, sl, #1
 8018ace:	9304      	str	r3, [sp, #16]
 8018ad0:	9307      	str	r3, [sp, #28]
 8018ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8018ad8:	4654      	mov	r4, sl
 8018ada:	2205      	movs	r2, #5
 8018adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ae0:	4851      	ldr	r0, [pc, #324]	; (8018c28 <_svfiprintf_r+0x1ec>)
 8018ae2:	f7e7 fb8d 	bl	8000200 <memchr>
 8018ae6:	9a04      	ldr	r2, [sp, #16]
 8018ae8:	b9d8      	cbnz	r0, 8018b22 <_svfiprintf_r+0xe6>
 8018aea:	06d0      	lsls	r0, r2, #27
 8018aec:	bf44      	itt	mi
 8018aee:	2320      	movmi	r3, #32
 8018af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018af4:	0711      	lsls	r1, r2, #28
 8018af6:	bf44      	itt	mi
 8018af8:	232b      	movmi	r3, #43	; 0x2b
 8018afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018afe:	f89a 3000 	ldrb.w	r3, [sl]
 8018b02:	2b2a      	cmp	r3, #42	; 0x2a
 8018b04:	d015      	beq.n	8018b32 <_svfiprintf_r+0xf6>
 8018b06:	9a07      	ldr	r2, [sp, #28]
 8018b08:	4654      	mov	r4, sl
 8018b0a:	2000      	movs	r0, #0
 8018b0c:	f04f 0c0a 	mov.w	ip, #10
 8018b10:	4621      	mov	r1, r4
 8018b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b16:	3b30      	subs	r3, #48	; 0x30
 8018b18:	2b09      	cmp	r3, #9
 8018b1a:	d94e      	bls.n	8018bba <_svfiprintf_r+0x17e>
 8018b1c:	b1b0      	cbz	r0, 8018b4c <_svfiprintf_r+0x110>
 8018b1e:	9207      	str	r2, [sp, #28]
 8018b20:	e014      	b.n	8018b4c <_svfiprintf_r+0x110>
 8018b22:	eba0 0308 	sub.w	r3, r0, r8
 8018b26:	fa09 f303 	lsl.w	r3, r9, r3
 8018b2a:	4313      	orrs	r3, r2
 8018b2c:	9304      	str	r3, [sp, #16]
 8018b2e:	46a2      	mov	sl, r4
 8018b30:	e7d2      	b.n	8018ad8 <_svfiprintf_r+0x9c>
 8018b32:	9b03      	ldr	r3, [sp, #12]
 8018b34:	1d19      	adds	r1, r3, #4
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	9103      	str	r1, [sp, #12]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	bfbb      	ittet	lt
 8018b3e:	425b      	neglt	r3, r3
 8018b40:	f042 0202 	orrlt.w	r2, r2, #2
 8018b44:	9307      	strge	r3, [sp, #28]
 8018b46:	9307      	strlt	r3, [sp, #28]
 8018b48:	bfb8      	it	lt
 8018b4a:	9204      	strlt	r2, [sp, #16]
 8018b4c:	7823      	ldrb	r3, [r4, #0]
 8018b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8018b50:	d10c      	bne.n	8018b6c <_svfiprintf_r+0x130>
 8018b52:	7863      	ldrb	r3, [r4, #1]
 8018b54:	2b2a      	cmp	r3, #42	; 0x2a
 8018b56:	d135      	bne.n	8018bc4 <_svfiprintf_r+0x188>
 8018b58:	9b03      	ldr	r3, [sp, #12]
 8018b5a:	1d1a      	adds	r2, r3, #4
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	9203      	str	r2, [sp, #12]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	bfb8      	it	lt
 8018b64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018b68:	3402      	adds	r4, #2
 8018b6a:	9305      	str	r3, [sp, #20]
 8018b6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018c38 <_svfiprintf_r+0x1fc>
 8018b70:	7821      	ldrb	r1, [r4, #0]
 8018b72:	2203      	movs	r2, #3
 8018b74:	4650      	mov	r0, sl
 8018b76:	f7e7 fb43 	bl	8000200 <memchr>
 8018b7a:	b140      	cbz	r0, 8018b8e <_svfiprintf_r+0x152>
 8018b7c:	2340      	movs	r3, #64	; 0x40
 8018b7e:	eba0 000a 	sub.w	r0, r0, sl
 8018b82:	fa03 f000 	lsl.w	r0, r3, r0
 8018b86:	9b04      	ldr	r3, [sp, #16]
 8018b88:	4303      	orrs	r3, r0
 8018b8a:	3401      	adds	r4, #1
 8018b8c:	9304      	str	r3, [sp, #16]
 8018b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b92:	4826      	ldr	r0, [pc, #152]	; (8018c2c <_svfiprintf_r+0x1f0>)
 8018b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b98:	2206      	movs	r2, #6
 8018b9a:	f7e7 fb31 	bl	8000200 <memchr>
 8018b9e:	2800      	cmp	r0, #0
 8018ba0:	d038      	beq.n	8018c14 <_svfiprintf_r+0x1d8>
 8018ba2:	4b23      	ldr	r3, [pc, #140]	; (8018c30 <_svfiprintf_r+0x1f4>)
 8018ba4:	bb1b      	cbnz	r3, 8018bee <_svfiprintf_r+0x1b2>
 8018ba6:	9b03      	ldr	r3, [sp, #12]
 8018ba8:	3307      	adds	r3, #7
 8018baa:	f023 0307 	bic.w	r3, r3, #7
 8018bae:	3308      	adds	r3, #8
 8018bb0:	9303      	str	r3, [sp, #12]
 8018bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bb4:	4433      	add	r3, r6
 8018bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8018bb8:	e767      	b.n	8018a8a <_svfiprintf_r+0x4e>
 8018bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8018bbe:	460c      	mov	r4, r1
 8018bc0:	2001      	movs	r0, #1
 8018bc2:	e7a5      	b.n	8018b10 <_svfiprintf_r+0xd4>
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	3401      	adds	r4, #1
 8018bc8:	9305      	str	r3, [sp, #20]
 8018bca:	4619      	mov	r1, r3
 8018bcc:	f04f 0c0a 	mov.w	ip, #10
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018bd6:	3a30      	subs	r2, #48	; 0x30
 8018bd8:	2a09      	cmp	r2, #9
 8018bda:	d903      	bls.n	8018be4 <_svfiprintf_r+0x1a8>
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d0c5      	beq.n	8018b6c <_svfiprintf_r+0x130>
 8018be0:	9105      	str	r1, [sp, #20]
 8018be2:	e7c3      	b.n	8018b6c <_svfiprintf_r+0x130>
 8018be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8018be8:	4604      	mov	r4, r0
 8018bea:	2301      	movs	r3, #1
 8018bec:	e7f0      	b.n	8018bd0 <_svfiprintf_r+0x194>
 8018bee:	ab03      	add	r3, sp, #12
 8018bf0:	9300      	str	r3, [sp, #0]
 8018bf2:	462a      	mov	r2, r5
 8018bf4:	4b0f      	ldr	r3, [pc, #60]	; (8018c34 <_svfiprintf_r+0x1f8>)
 8018bf6:	a904      	add	r1, sp, #16
 8018bf8:	4638      	mov	r0, r7
 8018bfa:	f3af 8000 	nop.w
 8018bfe:	1c42      	adds	r2, r0, #1
 8018c00:	4606      	mov	r6, r0
 8018c02:	d1d6      	bne.n	8018bb2 <_svfiprintf_r+0x176>
 8018c04:	89ab      	ldrh	r3, [r5, #12]
 8018c06:	065b      	lsls	r3, r3, #25
 8018c08:	f53f af2c 	bmi.w	8018a64 <_svfiprintf_r+0x28>
 8018c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c0e:	b01d      	add	sp, #116	; 0x74
 8018c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c14:	ab03      	add	r3, sp, #12
 8018c16:	9300      	str	r3, [sp, #0]
 8018c18:	462a      	mov	r2, r5
 8018c1a:	4b06      	ldr	r3, [pc, #24]	; (8018c34 <_svfiprintf_r+0x1f8>)
 8018c1c:	a904      	add	r1, sp, #16
 8018c1e:	4638      	mov	r0, r7
 8018c20:	f000 f9d4 	bl	8018fcc <_printf_i>
 8018c24:	e7eb      	b.n	8018bfe <_svfiprintf_r+0x1c2>
 8018c26:	bf00      	nop
 8018c28:	080244f4 	.word	0x080244f4
 8018c2c:	080244fe 	.word	0x080244fe
 8018c30:	00000000 	.word	0x00000000
 8018c34:	08018985 	.word	0x08018985
 8018c38:	080244fa 	.word	0x080244fa

08018c3c <__sfputc_r>:
 8018c3c:	6893      	ldr	r3, [r2, #8]
 8018c3e:	3b01      	subs	r3, #1
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	b410      	push	{r4}
 8018c44:	6093      	str	r3, [r2, #8]
 8018c46:	da08      	bge.n	8018c5a <__sfputc_r+0x1e>
 8018c48:	6994      	ldr	r4, [r2, #24]
 8018c4a:	42a3      	cmp	r3, r4
 8018c4c:	db01      	blt.n	8018c52 <__sfputc_r+0x16>
 8018c4e:	290a      	cmp	r1, #10
 8018c50:	d103      	bne.n	8018c5a <__sfputc_r+0x1e>
 8018c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c56:	f7ff bb75 	b.w	8018344 <__swbuf_r>
 8018c5a:	6813      	ldr	r3, [r2, #0]
 8018c5c:	1c58      	adds	r0, r3, #1
 8018c5e:	6010      	str	r0, [r2, #0]
 8018c60:	7019      	strb	r1, [r3, #0]
 8018c62:	4608      	mov	r0, r1
 8018c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c68:	4770      	bx	lr

08018c6a <__sfputs_r>:
 8018c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c6c:	4606      	mov	r6, r0
 8018c6e:	460f      	mov	r7, r1
 8018c70:	4614      	mov	r4, r2
 8018c72:	18d5      	adds	r5, r2, r3
 8018c74:	42ac      	cmp	r4, r5
 8018c76:	d101      	bne.n	8018c7c <__sfputs_r+0x12>
 8018c78:	2000      	movs	r0, #0
 8018c7a:	e007      	b.n	8018c8c <__sfputs_r+0x22>
 8018c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c80:	463a      	mov	r2, r7
 8018c82:	4630      	mov	r0, r6
 8018c84:	f7ff ffda 	bl	8018c3c <__sfputc_r>
 8018c88:	1c43      	adds	r3, r0, #1
 8018c8a:	d1f3      	bne.n	8018c74 <__sfputs_r+0xa>
 8018c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c90 <_vfiprintf_r>:
 8018c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c94:	460d      	mov	r5, r1
 8018c96:	b09d      	sub	sp, #116	; 0x74
 8018c98:	4614      	mov	r4, r2
 8018c9a:	4698      	mov	r8, r3
 8018c9c:	4606      	mov	r6, r0
 8018c9e:	b118      	cbz	r0, 8018ca8 <_vfiprintf_r+0x18>
 8018ca0:	6983      	ldr	r3, [r0, #24]
 8018ca2:	b90b      	cbnz	r3, 8018ca8 <_vfiprintf_r+0x18>
 8018ca4:	f7ff fd4c 	bl	8018740 <__sinit>
 8018ca8:	4b89      	ldr	r3, [pc, #548]	; (8018ed0 <_vfiprintf_r+0x240>)
 8018caa:	429d      	cmp	r5, r3
 8018cac:	d11b      	bne.n	8018ce6 <_vfiprintf_r+0x56>
 8018cae:	6875      	ldr	r5, [r6, #4]
 8018cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018cb2:	07d9      	lsls	r1, r3, #31
 8018cb4:	d405      	bmi.n	8018cc2 <_vfiprintf_r+0x32>
 8018cb6:	89ab      	ldrh	r3, [r5, #12]
 8018cb8:	059a      	lsls	r2, r3, #22
 8018cba:	d402      	bmi.n	8018cc2 <_vfiprintf_r+0x32>
 8018cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cbe:	f7ff fdef 	bl	80188a0 <__retarget_lock_acquire_recursive>
 8018cc2:	89ab      	ldrh	r3, [r5, #12]
 8018cc4:	071b      	lsls	r3, r3, #28
 8018cc6:	d501      	bpl.n	8018ccc <_vfiprintf_r+0x3c>
 8018cc8:	692b      	ldr	r3, [r5, #16]
 8018cca:	b9eb      	cbnz	r3, 8018d08 <_vfiprintf_r+0x78>
 8018ccc:	4629      	mov	r1, r5
 8018cce:	4630      	mov	r0, r6
 8018cd0:	f7ff fb8a 	bl	80183e8 <__swsetup_r>
 8018cd4:	b1c0      	cbz	r0, 8018d08 <_vfiprintf_r+0x78>
 8018cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018cd8:	07dc      	lsls	r4, r3, #31
 8018cda:	d50e      	bpl.n	8018cfa <_vfiprintf_r+0x6a>
 8018cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ce0:	b01d      	add	sp, #116	; 0x74
 8018ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ce6:	4b7b      	ldr	r3, [pc, #492]	; (8018ed4 <_vfiprintf_r+0x244>)
 8018ce8:	429d      	cmp	r5, r3
 8018cea:	d101      	bne.n	8018cf0 <_vfiprintf_r+0x60>
 8018cec:	68b5      	ldr	r5, [r6, #8]
 8018cee:	e7df      	b.n	8018cb0 <_vfiprintf_r+0x20>
 8018cf0:	4b79      	ldr	r3, [pc, #484]	; (8018ed8 <_vfiprintf_r+0x248>)
 8018cf2:	429d      	cmp	r5, r3
 8018cf4:	bf08      	it	eq
 8018cf6:	68f5      	ldreq	r5, [r6, #12]
 8018cf8:	e7da      	b.n	8018cb0 <_vfiprintf_r+0x20>
 8018cfa:	89ab      	ldrh	r3, [r5, #12]
 8018cfc:	0598      	lsls	r0, r3, #22
 8018cfe:	d4ed      	bmi.n	8018cdc <_vfiprintf_r+0x4c>
 8018d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018d02:	f7ff fdce 	bl	80188a2 <__retarget_lock_release_recursive>
 8018d06:	e7e9      	b.n	8018cdc <_vfiprintf_r+0x4c>
 8018d08:	2300      	movs	r3, #0
 8018d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8018d0c:	2320      	movs	r3, #32
 8018d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d16:	2330      	movs	r3, #48	; 0x30
 8018d18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018edc <_vfiprintf_r+0x24c>
 8018d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018d20:	f04f 0901 	mov.w	r9, #1
 8018d24:	4623      	mov	r3, r4
 8018d26:	469a      	mov	sl, r3
 8018d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d2c:	b10a      	cbz	r2, 8018d32 <_vfiprintf_r+0xa2>
 8018d2e:	2a25      	cmp	r2, #37	; 0x25
 8018d30:	d1f9      	bne.n	8018d26 <_vfiprintf_r+0x96>
 8018d32:	ebba 0b04 	subs.w	fp, sl, r4
 8018d36:	d00b      	beq.n	8018d50 <_vfiprintf_r+0xc0>
 8018d38:	465b      	mov	r3, fp
 8018d3a:	4622      	mov	r2, r4
 8018d3c:	4629      	mov	r1, r5
 8018d3e:	4630      	mov	r0, r6
 8018d40:	f7ff ff93 	bl	8018c6a <__sfputs_r>
 8018d44:	3001      	adds	r0, #1
 8018d46:	f000 80aa 	beq.w	8018e9e <_vfiprintf_r+0x20e>
 8018d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d4c:	445a      	add	r2, fp
 8018d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8018d50:	f89a 3000 	ldrb.w	r3, [sl]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	f000 80a2 	beq.w	8018e9e <_vfiprintf_r+0x20e>
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d64:	f10a 0a01 	add.w	sl, sl, #1
 8018d68:	9304      	str	r3, [sp, #16]
 8018d6a:	9307      	str	r3, [sp, #28]
 8018d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d70:	931a      	str	r3, [sp, #104]	; 0x68
 8018d72:	4654      	mov	r4, sl
 8018d74:	2205      	movs	r2, #5
 8018d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d7a:	4858      	ldr	r0, [pc, #352]	; (8018edc <_vfiprintf_r+0x24c>)
 8018d7c:	f7e7 fa40 	bl	8000200 <memchr>
 8018d80:	9a04      	ldr	r2, [sp, #16]
 8018d82:	b9d8      	cbnz	r0, 8018dbc <_vfiprintf_r+0x12c>
 8018d84:	06d1      	lsls	r1, r2, #27
 8018d86:	bf44      	itt	mi
 8018d88:	2320      	movmi	r3, #32
 8018d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d8e:	0713      	lsls	r3, r2, #28
 8018d90:	bf44      	itt	mi
 8018d92:	232b      	movmi	r3, #43	; 0x2b
 8018d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d98:	f89a 3000 	ldrb.w	r3, [sl]
 8018d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8018d9e:	d015      	beq.n	8018dcc <_vfiprintf_r+0x13c>
 8018da0:	9a07      	ldr	r2, [sp, #28]
 8018da2:	4654      	mov	r4, sl
 8018da4:	2000      	movs	r0, #0
 8018da6:	f04f 0c0a 	mov.w	ip, #10
 8018daa:	4621      	mov	r1, r4
 8018dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018db0:	3b30      	subs	r3, #48	; 0x30
 8018db2:	2b09      	cmp	r3, #9
 8018db4:	d94e      	bls.n	8018e54 <_vfiprintf_r+0x1c4>
 8018db6:	b1b0      	cbz	r0, 8018de6 <_vfiprintf_r+0x156>
 8018db8:	9207      	str	r2, [sp, #28]
 8018dba:	e014      	b.n	8018de6 <_vfiprintf_r+0x156>
 8018dbc:	eba0 0308 	sub.w	r3, r0, r8
 8018dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8018dc4:	4313      	orrs	r3, r2
 8018dc6:	9304      	str	r3, [sp, #16]
 8018dc8:	46a2      	mov	sl, r4
 8018dca:	e7d2      	b.n	8018d72 <_vfiprintf_r+0xe2>
 8018dcc:	9b03      	ldr	r3, [sp, #12]
 8018dce:	1d19      	adds	r1, r3, #4
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	9103      	str	r1, [sp, #12]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	bfbb      	ittet	lt
 8018dd8:	425b      	neglt	r3, r3
 8018dda:	f042 0202 	orrlt.w	r2, r2, #2
 8018dde:	9307      	strge	r3, [sp, #28]
 8018de0:	9307      	strlt	r3, [sp, #28]
 8018de2:	bfb8      	it	lt
 8018de4:	9204      	strlt	r2, [sp, #16]
 8018de6:	7823      	ldrb	r3, [r4, #0]
 8018de8:	2b2e      	cmp	r3, #46	; 0x2e
 8018dea:	d10c      	bne.n	8018e06 <_vfiprintf_r+0x176>
 8018dec:	7863      	ldrb	r3, [r4, #1]
 8018dee:	2b2a      	cmp	r3, #42	; 0x2a
 8018df0:	d135      	bne.n	8018e5e <_vfiprintf_r+0x1ce>
 8018df2:	9b03      	ldr	r3, [sp, #12]
 8018df4:	1d1a      	adds	r2, r3, #4
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	9203      	str	r2, [sp, #12]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	bfb8      	it	lt
 8018dfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018e02:	3402      	adds	r4, #2
 8018e04:	9305      	str	r3, [sp, #20]
 8018e06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018eec <_vfiprintf_r+0x25c>
 8018e0a:	7821      	ldrb	r1, [r4, #0]
 8018e0c:	2203      	movs	r2, #3
 8018e0e:	4650      	mov	r0, sl
 8018e10:	f7e7 f9f6 	bl	8000200 <memchr>
 8018e14:	b140      	cbz	r0, 8018e28 <_vfiprintf_r+0x198>
 8018e16:	2340      	movs	r3, #64	; 0x40
 8018e18:	eba0 000a 	sub.w	r0, r0, sl
 8018e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8018e20:	9b04      	ldr	r3, [sp, #16]
 8018e22:	4303      	orrs	r3, r0
 8018e24:	3401      	adds	r4, #1
 8018e26:	9304      	str	r3, [sp, #16]
 8018e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e2c:	482c      	ldr	r0, [pc, #176]	; (8018ee0 <_vfiprintf_r+0x250>)
 8018e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e32:	2206      	movs	r2, #6
 8018e34:	f7e7 f9e4 	bl	8000200 <memchr>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	d03f      	beq.n	8018ebc <_vfiprintf_r+0x22c>
 8018e3c:	4b29      	ldr	r3, [pc, #164]	; (8018ee4 <_vfiprintf_r+0x254>)
 8018e3e:	bb1b      	cbnz	r3, 8018e88 <_vfiprintf_r+0x1f8>
 8018e40:	9b03      	ldr	r3, [sp, #12]
 8018e42:	3307      	adds	r3, #7
 8018e44:	f023 0307 	bic.w	r3, r3, #7
 8018e48:	3308      	adds	r3, #8
 8018e4a:	9303      	str	r3, [sp, #12]
 8018e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e4e:	443b      	add	r3, r7
 8018e50:	9309      	str	r3, [sp, #36]	; 0x24
 8018e52:	e767      	b.n	8018d24 <_vfiprintf_r+0x94>
 8018e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e58:	460c      	mov	r4, r1
 8018e5a:	2001      	movs	r0, #1
 8018e5c:	e7a5      	b.n	8018daa <_vfiprintf_r+0x11a>
 8018e5e:	2300      	movs	r3, #0
 8018e60:	3401      	adds	r4, #1
 8018e62:	9305      	str	r3, [sp, #20]
 8018e64:	4619      	mov	r1, r3
 8018e66:	f04f 0c0a 	mov.w	ip, #10
 8018e6a:	4620      	mov	r0, r4
 8018e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e70:	3a30      	subs	r2, #48	; 0x30
 8018e72:	2a09      	cmp	r2, #9
 8018e74:	d903      	bls.n	8018e7e <_vfiprintf_r+0x1ee>
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d0c5      	beq.n	8018e06 <_vfiprintf_r+0x176>
 8018e7a:	9105      	str	r1, [sp, #20]
 8018e7c:	e7c3      	b.n	8018e06 <_vfiprintf_r+0x176>
 8018e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e82:	4604      	mov	r4, r0
 8018e84:	2301      	movs	r3, #1
 8018e86:	e7f0      	b.n	8018e6a <_vfiprintf_r+0x1da>
 8018e88:	ab03      	add	r3, sp, #12
 8018e8a:	9300      	str	r3, [sp, #0]
 8018e8c:	462a      	mov	r2, r5
 8018e8e:	4b16      	ldr	r3, [pc, #88]	; (8018ee8 <_vfiprintf_r+0x258>)
 8018e90:	a904      	add	r1, sp, #16
 8018e92:	4630      	mov	r0, r6
 8018e94:	f3af 8000 	nop.w
 8018e98:	4607      	mov	r7, r0
 8018e9a:	1c78      	adds	r0, r7, #1
 8018e9c:	d1d6      	bne.n	8018e4c <_vfiprintf_r+0x1bc>
 8018e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ea0:	07d9      	lsls	r1, r3, #31
 8018ea2:	d405      	bmi.n	8018eb0 <_vfiprintf_r+0x220>
 8018ea4:	89ab      	ldrh	r3, [r5, #12]
 8018ea6:	059a      	lsls	r2, r3, #22
 8018ea8:	d402      	bmi.n	8018eb0 <_vfiprintf_r+0x220>
 8018eaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018eac:	f7ff fcf9 	bl	80188a2 <__retarget_lock_release_recursive>
 8018eb0:	89ab      	ldrh	r3, [r5, #12]
 8018eb2:	065b      	lsls	r3, r3, #25
 8018eb4:	f53f af12 	bmi.w	8018cdc <_vfiprintf_r+0x4c>
 8018eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018eba:	e711      	b.n	8018ce0 <_vfiprintf_r+0x50>
 8018ebc:	ab03      	add	r3, sp, #12
 8018ebe:	9300      	str	r3, [sp, #0]
 8018ec0:	462a      	mov	r2, r5
 8018ec2:	4b09      	ldr	r3, [pc, #36]	; (8018ee8 <_vfiprintf_r+0x258>)
 8018ec4:	a904      	add	r1, sp, #16
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	f000 f880 	bl	8018fcc <_printf_i>
 8018ecc:	e7e4      	b.n	8018e98 <_vfiprintf_r+0x208>
 8018ece:	bf00      	nop
 8018ed0:	080244b4 	.word	0x080244b4
 8018ed4:	080244d4 	.word	0x080244d4
 8018ed8:	08024494 	.word	0x08024494
 8018edc:	080244f4 	.word	0x080244f4
 8018ee0:	080244fe 	.word	0x080244fe
 8018ee4:	00000000 	.word	0x00000000
 8018ee8:	08018c6b 	.word	0x08018c6b
 8018eec:	080244fa 	.word	0x080244fa

08018ef0 <_printf_common>:
 8018ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ef4:	4616      	mov	r6, r2
 8018ef6:	4699      	mov	r9, r3
 8018ef8:	688a      	ldr	r2, [r1, #8]
 8018efa:	690b      	ldr	r3, [r1, #16]
 8018efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018f00:	4293      	cmp	r3, r2
 8018f02:	bfb8      	it	lt
 8018f04:	4613      	movlt	r3, r2
 8018f06:	6033      	str	r3, [r6, #0]
 8018f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018f0c:	4607      	mov	r7, r0
 8018f0e:	460c      	mov	r4, r1
 8018f10:	b10a      	cbz	r2, 8018f16 <_printf_common+0x26>
 8018f12:	3301      	adds	r3, #1
 8018f14:	6033      	str	r3, [r6, #0]
 8018f16:	6823      	ldr	r3, [r4, #0]
 8018f18:	0699      	lsls	r1, r3, #26
 8018f1a:	bf42      	ittt	mi
 8018f1c:	6833      	ldrmi	r3, [r6, #0]
 8018f1e:	3302      	addmi	r3, #2
 8018f20:	6033      	strmi	r3, [r6, #0]
 8018f22:	6825      	ldr	r5, [r4, #0]
 8018f24:	f015 0506 	ands.w	r5, r5, #6
 8018f28:	d106      	bne.n	8018f38 <_printf_common+0x48>
 8018f2a:	f104 0a19 	add.w	sl, r4, #25
 8018f2e:	68e3      	ldr	r3, [r4, #12]
 8018f30:	6832      	ldr	r2, [r6, #0]
 8018f32:	1a9b      	subs	r3, r3, r2
 8018f34:	42ab      	cmp	r3, r5
 8018f36:	dc26      	bgt.n	8018f86 <_printf_common+0x96>
 8018f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018f3c:	1e13      	subs	r3, r2, #0
 8018f3e:	6822      	ldr	r2, [r4, #0]
 8018f40:	bf18      	it	ne
 8018f42:	2301      	movne	r3, #1
 8018f44:	0692      	lsls	r2, r2, #26
 8018f46:	d42b      	bmi.n	8018fa0 <_printf_common+0xb0>
 8018f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018f4c:	4649      	mov	r1, r9
 8018f4e:	4638      	mov	r0, r7
 8018f50:	47c0      	blx	r8
 8018f52:	3001      	adds	r0, #1
 8018f54:	d01e      	beq.n	8018f94 <_printf_common+0xa4>
 8018f56:	6823      	ldr	r3, [r4, #0]
 8018f58:	68e5      	ldr	r5, [r4, #12]
 8018f5a:	6832      	ldr	r2, [r6, #0]
 8018f5c:	f003 0306 	and.w	r3, r3, #6
 8018f60:	2b04      	cmp	r3, #4
 8018f62:	bf08      	it	eq
 8018f64:	1aad      	subeq	r5, r5, r2
 8018f66:	68a3      	ldr	r3, [r4, #8]
 8018f68:	6922      	ldr	r2, [r4, #16]
 8018f6a:	bf0c      	ite	eq
 8018f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018f70:	2500      	movne	r5, #0
 8018f72:	4293      	cmp	r3, r2
 8018f74:	bfc4      	itt	gt
 8018f76:	1a9b      	subgt	r3, r3, r2
 8018f78:	18ed      	addgt	r5, r5, r3
 8018f7a:	2600      	movs	r6, #0
 8018f7c:	341a      	adds	r4, #26
 8018f7e:	42b5      	cmp	r5, r6
 8018f80:	d11a      	bne.n	8018fb8 <_printf_common+0xc8>
 8018f82:	2000      	movs	r0, #0
 8018f84:	e008      	b.n	8018f98 <_printf_common+0xa8>
 8018f86:	2301      	movs	r3, #1
 8018f88:	4652      	mov	r2, sl
 8018f8a:	4649      	mov	r1, r9
 8018f8c:	4638      	mov	r0, r7
 8018f8e:	47c0      	blx	r8
 8018f90:	3001      	adds	r0, #1
 8018f92:	d103      	bne.n	8018f9c <_printf_common+0xac>
 8018f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f9c:	3501      	adds	r5, #1
 8018f9e:	e7c6      	b.n	8018f2e <_printf_common+0x3e>
 8018fa0:	18e1      	adds	r1, r4, r3
 8018fa2:	1c5a      	adds	r2, r3, #1
 8018fa4:	2030      	movs	r0, #48	; 0x30
 8018fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018faa:	4422      	add	r2, r4
 8018fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018fb4:	3302      	adds	r3, #2
 8018fb6:	e7c7      	b.n	8018f48 <_printf_common+0x58>
 8018fb8:	2301      	movs	r3, #1
 8018fba:	4622      	mov	r2, r4
 8018fbc:	4649      	mov	r1, r9
 8018fbe:	4638      	mov	r0, r7
 8018fc0:	47c0      	blx	r8
 8018fc2:	3001      	adds	r0, #1
 8018fc4:	d0e6      	beq.n	8018f94 <_printf_common+0xa4>
 8018fc6:	3601      	adds	r6, #1
 8018fc8:	e7d9      	b.n	8018f7e <_printf_common+0x8e>
	...

08018fcc <_printf_i>:
 8018fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018fd0:	460c      	mov	r4, r1
 8018fd2:	4691      	mov	r9, r2
 8018fd4:	7e27      	ldrb	r7, [r4, #24]
 8018fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018fd8:	2f78      	cmp	r7, #120	; 0x78
 8018fda:	4680      	mov	r8, r0
 8018fdc:	469a      	mov	sl, r3
 8018fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018fe2:	d807      	bhi.n	8018ff4 <_printf_i+0x28>
 8018fe4:	2f62      	cmp	r7, #98	; 0x62
 8018fe6:	d80a      	bhi.n	8018ffe <_printf_i+0x32>
 8018fe8:	2f00      	cmp	r7, #0
 8018fea:	f000 80d8 	beq.w	801919e <_printf_i+0x1d2>
 8018fee:	2f58      	cmp	r7, #88	; 0x58
 8018ff0:	f000 80a3 	beq.w	801913a <_printf_i+0x16e>
 8018ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018ffc:	e03a      	b.n	8019074 <_printf_i+0xa8>
 8018ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019002:	2b15      	cmp	r3, #21
 8019004:	d8f6      	bhi.n	8018ff4 <_printf_i+0x28>
 8019006:	a001      	add	r0, pc, #4	; (adr r0, 801900c <_printf_i+0x40>)
 8019008:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801900c:	08019065 	.word	0x08019065
 8019010:	08019079 	.word	0x08019079
 8019014:	08018ff5 	.word	0x08018ff5
 8019018:	08018ff5 	.word	0x08018ff5
 801901c:	08018ff5 	.word	0x08018ff5
 8019020:	08018ff5 	.word	0x08018ff5
 8019024:	08019079 	.word	0x08019079
 8019028:	08018ff5 	.word	0x08018ff5
 801902c:	08018ff5 	.word	0x08018ff5
 8019030:	08018ff5 	.word	0x08018ff5
 8019034:	08018ff5 	.word	0x08018ff5
 8019038:	08019185 	.word	0x08019185
 801903c:	080190a9 	.word	0x080190a9
 8019040:	08019167 	.word	0x08019167
 8019044:	08018ff5 	.word	0x08018ff5
 8019048:	08018ff5 	.word	0x08018ff5
 801904c:	080191a7 	.word	0x080191a7
 8019050:	08018ff5 	.word	0x08018ff5
 8019054:	080190a9 	.word	0x080190a9
 8019058:	08018ff5 	.word	0x08018ff5
 801905c:	08018ff5 	.word	0x08018ff5
 8019060:	0801916f 	.word	0x0801916f
 8019064:	680b      	ldr	r3, [r1, #0]
 8019066:	1d1a      	adds	r2, r3, #4
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	600a      	str	r2, [r1, #0]
 801906c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019074:	2301      	movs	r3, #1
 8019076:	e0a3      	b.n	80191c0 <_printf_i+0x1f4>
 8019078:	6825      	ldr	r5, [r4, #0]
 801907a:	6808      	ldr	r0, [r1, #0]
 801907c:	062e      	lsls	r6, r5, #24
 801907e:	f100 0304 	add.w	r3, r0, #4
 8019082:	d50a      	bpl.n	801909a <_printf_i+0xce>
 8019084:	6805      	ldr	r5, [r0, #0]
 8019086:	600b      	str	r3, [r1, #0]
 8019088:	2d00      	cmp	r5, #0
 801908a:	da03      	bge.n	8019094 <_printf_i+0xc8>
 801908c:	232d      	movs	r3, #45	; 0x2d
 801908e:	426d      	negs	r5, r5
 8019090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019094:	485e      	ldr	r0, [pc, #376]	; (8019210 <_printf_i+0x244>)
 8019096:	230a      	movs	r3, #10
 8019098:	e019      	b.n	80190ce <_printf_i+0x102>
 801909a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801909e:	6805      	ldr	r5, [r0, #0]
 80190a0:	600b      	str	r3, [r1, #0]
 80190a2:	bf18      	it	ne
 80190a4:	b22d      	sxthne	r5, r5
 80190a6:	e7ef      	b.n	8019088 <_printf_i+0xbc>
 80190a8:	680b      	ldr	r3, [r1, #0]
 80190aa:	6825      	ldr	r5, [r4, #0]
 80190ac:	1d18      	adds	r0, r3, #4
 80190ae:	6008      	str	r0, [r1, #0]
 80190b0:	0628      	lsls	r0, r5, #24
 80190b2:	d501      	bpl.n	80190b8 <_printf_i+0xec>
 80190b4:	681d      	ldr	r5, [r3, #0]
 80190b6:	e002      	b.n	80190be <_printf_i+0xf2>
 80190b8:	0669      	lsls	r1, r5, #25
 80190ba:	d5fb      	bpl.n	80190b4 <_printf_i+0xe8>
 80190bc:	881d      	ldrh	r5, [r3, #0]
 80190be:	4854      	ldr	r0, [pc, #336]	; (8019210 <_printf_i+0x244>)
 80190c0:	2f6f      	cmp	r7, #111	; 0x6f
 80190c2:	bf0c      	ite	eq
 80190c4:	2308      	moveq	r3, #8
 80190c6:	230a      	movne	r3, #10
 80190c8:	2100      	movs	r1, #0
 80190ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80190ce:	6866      	ldr	r6, [r4, #4]
 80190d0:	60a6      	str	r6, [r4, #8]
 80190d2:	2e00      	cmp	r6, #0
 80190d4:	bfa2      	ittt	ge
 80190d6:	6821      	ldrge	r1, [r4, #0]
 80190d8:	f021 0104 	bicge.w	r1, r1, #4
 80190dc:	6021      	strge	r1, [r4, #0]
 80190de:	b90d      	cbnz	r5, 80190e4 <_printf_i+0x118>
 80190e0:	2e00      	cmp	r6, #0
 80190e2:	d04d      	beq.n	8019180 <_printf_i+0x1b4>
 80190e4:	4616      	mov	r6, r2
 80190e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80190ea:	fb03 5711 	mls	r7, r3, r1, r5
 80190ee:	5dc7      	ldrb	r7, [r0, r7]
 80190f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80190f4:	462f      	mov	r7, r5
 80190f6:	42bb      	cmp	r3, r7
 80190f8:	460d      	mov	r5, r1
 80190fa:	d9f4      	bls.n	80190e6 <_printf_i+0x11a>
 80190fc:	2b08      	cmp	r3, #8
 80190fe:	d10b      	bne.n	8019118 <_printf_i+0x14c>
 8019100:	6823      	ldr	r3, [r4, #0]
 8019102:	07df      	lsls	r7, r3, #31
 8019104:	d508      	bpl.n	8019118 <_printf_i+0x14c>
 8019106:	6923      	ldr	r3, [r4, #16]
 8019108:	6861      	ldr	r1, [r4, #4]
 801910a:	4299      	cmp	r1, r3
 801910c:	bfde      	ittt	le
 801910e:	2330      	movle	r3, #48	; 0x30
 8019110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019114:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8019118:	1b92      	subs	r2, r2, r6
 801911a:	6122      	str	r2, [r4, #16]
 801911c:	f8cd a000 	str.w	sl, [sp]
 8019120:	464b      	mov	r3, r9
 8019122:	aa03      	add	r2, sp, #12
 8019124:	4621      	mov	r1, r4
 8019126:	4640      	mov	r0, r8
 8019128:	f7ff fee2 	bl	8018ef0 <_printf_common>
 801912c:	3001      	adds	r0, #1
 801912e:	d14c      	bne.n	80191ca <_printf_i+0x1fe>
 8019130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019134:	b004      	add	sp, #16
 8019136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801913a:	4835      	ldr	r0, [pc, #212]	; (8019210 <_printf_i+0x244>)
 801913c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019140:	6823      	ldr	r3, [r4, #0]
 8019142:	680e      	ldr	r6, [r1, #0]
 8019144:	061f      	lsls	r7, r3, #24
 8019146:	f856 5b04 	ldr.w	r5, [r6], #4
 801914a:	600e      	str	r6, [r1, #0]
 801914c:	d514      	bpl.n	8019178 <_printf_i+0x1ac>
 801914e:	07d9      	lsls	r1, r3, #31
 8019150:	bf44      	itt	mi
 8019152:	f043 0320 	orrmi.w	r3, r3, #32
 8019156:	6023      	strmi	r3, [r4, #0]
 8019158:	b91d      	cbnz	r5, 8019162 <_printf_i+0x196>
 801915a:	6823      	ldr	r3, [r4, #0]
 801915c:	f023 0320 	bic.w	r3, r3, #32
 8019160:	6023      	str	r3, [r4, #0]
 8019162:	2310      	movs	r3, #16
 8019164:	e7b0      	b.n	80190c8 <_printf_i+0xfc>
 8019166:	6823      	ldr	r3, [r4, #0]
 8019168:	f043 0320 	orr.w	r3, r3, #32
 801916c:	6023      	str	r3, [r4, #0]
 801916e:	2378      	movs	r3, #120	; 0x78
 8019170:	4828      	ldr	r0, [pc, #160]	; (8019214 <_printf_i+0x248>)
 8019172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019176:	e7e3      	b.n	8019140 <_printf_i+0x174>
 8019178:	065e      	lsls	r6, r3, #25
 801917a:	bf48      	it	mi
 801917c:	b2ad      	uxthmi	r5, r5
 801917e:	e7e6      	b.n	801914e <_printf_i+0x182>
 8019180:	4616      	mov	r6, r2
 8019182:	e7bb      	b.n	80190fc <_printf_i+0x130>
 8019184:	680b      	ldr	r3, [r1, #0]
 8019186:	6826      	ldr	r6, [r4, #0]
 8019188:	6960      	ldr	r0, [r4, #20]
 801918a:	1d1d      	adds	r5, r3, #4
 801918c:	600d      	str	r5, [r1, #0]
 801918e:	0635      	lsls	r5, r6, #24
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	d501      	bpl.n	8019198 <_printf_i+0x1cc>
 8019194:	6018      	str	r0, [r3, #0]
 8019196:	e002      	b.n	801919e <_printf_i+0x1d2>
 8019198:	0671      	lsls	r1, r6, #25
 801919a:	d5fb      	bpl.n	8019194 <_printf_i+0x1c8>
 801919c:	8018      	strh	r0, [r3, #0]
 801919e:	2300      	movs	r3, #0
 80191a0:	6123      	str	r3, [r4, #16]
 80191a2:	4616      	mov	r6, r2
 80191a4:	e7ba      	b.n	801911c <_printf_i+0x150>
 80191a6:	680b      	ldr	r3, [r1, #0]
 80191a8:	1d1a      	adds	r2, r3, #4
 80191aa:	600a      	str	r2, [r1, #0]
 80191ac:	681e      	ldr	r6, [r3, #0]
 80191ae:	6862      	ldr	r2, [r4, #4]
 80191b0:	2100      	movs	r1, #0
 80191b2:	4630      	mov	r0, r6
 80191b4:	f7e7 f824 	bl	8000200 <memchr>
 80191b8:	b108      	cbz	r0, 80191be <_printf_i+0x1f2>
 80191ba:	1b80      	subs	r0, r0, r6
 80191bc:	6060      	str	r0, [r4, #4]
 80191be:	6863      	ldr	r3, [r4, #4]
 80191c0:	6123      	str	r3, [r4, #16]
 80191c2:	2300      	movs	r3, #0
 80191c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80191c8:	e7a8      	b.n	801911c <_printf_i+0x150>
 80191ca:	6923      	ldr	r3, [r4, #16]
 80191cc:	4632      	mov	r2, r6
 80191ce:	4649      	mov	r1, r9
 80191d0:	4640      	mov	r0, r8
 80191d2:	47d0      	blx	sl
 80191d4:	3001      	adds	r0, #1
 80191d6:	d0ab      	beq.n	8019130 <_printf_i+0x164>
 80191d8:	6823      	ldr	r3, [r4, #0]
 80191da:	079b      	lsls	r3, r3, #30
 80191dc:	d413      	bmi.n	8019206 <_printf_i+0x23a>
 80191de:	68e0      	ldr	r0, [r4, #12]
 80191e0:	9b03      	ldr	r3, [sp, #12]
 80191e2:	4298      	cmp	r0, r3
 80191e4:	bfb8      	it	lt
 80191e6:	4618      	movlt	r0, r3
 80191e8:	e7a4      	b.n	8019134 <_printf_i+0x168>
 80191ea:	2301      	movs	r3, #1
 80191ec:	4632      	mov	r2, r6
 80191ee:	4649      	mov	r1, r9
 80191f0:	4640      	mov	r0, r8
 80191f2:	47d0      	blx	sl
 80191f4:	3001      	adds	r0, #1
 80191f6:	d09b      	beq.n	8019130 <_printf_i+0x164>
 80191f8:	3501      	adds	r5, #1
 80191fa:	68e3      	ldr	r3, [r4, #12]
 80191fc:	9903      	ldr	r1, [sp, #12]
 80191fe:	1a5b      	subs	r3, r3, r1
 8019200:	42ab      	cmp	r3, r5
 8019202:	dcf2      	bgt.n	80191ea <_printf_i+0x21e>
 8019204:	e7eb      	b.n	80191de <_printf_i+0x212>
 8019206:	2500      	movs	r5, #0
 8019208:	f104 0619 	add.w	r6, r4, #25
 801920c:	e7f5      	b.n	80191fa <_printf_i+0x22e>
 801920e:	bf00      	nop
 8019210:	08024505 	.word	0x08024505
 8019214:	08024516 	.word	0x08024516

08019218 <__sread>:
 8019218:	b510      	push	{r4, lr}
 801921a:	460c      	mov	r4, r1
 801921c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019220:	f000 f8c2 	bl	80193a8 <_read_r>
 8019224:	2800      	cmp	r0, #0
 8019226:	bfab      	itete	ge
 8019228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801922a:	89a3      	ldrhlt	r3, [r4, #12]
 801922c:	181b      	addge	r3, r3, r0
 801922e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019232:	bfac      	ite	ge
 8019234:	6563      	strge	r3, [r4, #84]	; 0x54
 8019236:	81a3      	strhlt	r3, [r4, #12]
 8019238:	bd10      	pop	{r4, pc}

0801923a <__swrite>:
 801923a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801923e:	461f      	mov	r7, r3
 8019240:	898b      	ldrh	r3, [r1, #12]
 8019242:	05db      	lsls	r3, r3, #23
 8019244:	4605      	mov	r5, r0
 8019246:	460c      	mov	r4, r1
 8019248:	4616      	mov	r6, r2
 801924a:	d505      	bpl.n	8019258 <__swrite+0x1e>
 801924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019250:	2302      	movs	r3, #2
 8019252:	2200      	movs	r2, #0
 8019254:	f000 f870 	bl	8019338 <_lseek_r>
 8019258:	89a3      	ldrh	r3, [r4, #12]
 801925a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801925e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019262:	81a3      	strh	r3, [r4, #12]
 8019264:	4632      	mov	r2, r6
 8019266:	463b      	mov	r3, r7
 8019268:	4628      	mov	r0, r5
 801926a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801926e:	f000 b817 	b.w	80192a0 <_write_r>

08019272 <__sseek>:
 8019272:	b510      	push	{r4, lr}
 8019274:	460c      	mov	r4, r1
 8019276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801927a:	f000 f85d 	bl	8019338 <_lseek_r>
 801927e:	1c43      	adds	r3, r0, #1
 8019280:	89a3      	ldrh	r3, [r4, #12]
 8019282:	bf15      	itete	ne
 8019284:	6560      	strne	r0, [r4, #84]	; 0x54
 8019286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801928a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801928e:	81a3      	strheq	r3, [r4, #12]
 8019290:	bf18      	it	ne
 8019292:	81a3      	strhne	r3, [r4, #12]
 8019294:	bd10      	pop	{r4, pc}

08019296 <__sclose>:
 8019296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801929a:	f000 b81b 	b.w	80192d4 <_close_r>
	...

080192a0 <_write_r>:
 80192a0:	b538      	push	{r3, r4, r5, lr}
 80192a2:	4d07      	ldr	r5, [pc, #28]	; (80192c0 <_write_r+0x20>)
 80192a4:	4604      	mov	r4, r0
 80192a6:	4608      	mov	r0, r1
 80192a8:	4611      	mov	r1, r2
 80192aa:	2200      	movs	r2, #0
 80192ac:	602a      	str	r2, [r5, #0]
 80192ae:	461a      	mov	r2, r3
 80192b0:	f7e8 fe24 	bl	8001efc <_write>
 80192b4:	1c43      	adds	r3, r0, #1
 80192b6:	d102      	bne.n	80192be <_write_r+0x1e>
 80192b8:	682b      	ldr	r3, [r5, #0]
 80192ba:	b103      	cbz	r3, 80192be <_write_r+0x1e>
 80192bc:	6023      	str	r3, [r4, #0]
 80192be:	bd38      	pop	{r3, r4, r5, pc}
 80192c0:	2000fb2c 	.word	0x2000fb2c

080192c4 <abort>:
 80192c4:	b508      	push	{r3, lr}
 80192c6:	2006      	movs	r0, #6
 80192c8:	f000 f8a8 	bl	801941c <raise>
 80192cc:	2001      	movs	r0, #1
 80192ce:	f7e9 fa07 	bl	80026e0 <_exit>
	...

080192d4 <_close_r>:
 80192d4:	b538      	push	{r3, r4, r5, lr}
 80192d6:	4d06      	ldr	r5, [pc, #24]	; (80192f0 <_close_r+0x1c>)
 80192d8:	2300      	movs	r3, #0
 80192da:	4604      	mov	r4, r0
 80192dc:	4608      	mov	r0, r1
 80192de:	602b      	str	r3, [r5, #0]
 80192e0:	f7e9 fa25 	bl	800272e <_close>
 80192e4:	1c43      	adds	r3, r0, #1
 80192e6:	d102      	bne.n	80192ee <_close_r+0x1a>
 80192e8:	682b      	ldr	r3, [r5, #0]
 80192ea:	b103      	cbz	r3, 80192ee <_close_r+0x1a>
 80192ec:	6023      	str	r3, [r4, #0]
 80192ee:	bd38      	pop	{r3, r4, r5, pc}
 80192f0:	2000fb2c 	.word	0x2000fb2c

080192f4 <_fstat_r>:
 80192f4:	b538      	push	{r3, r4, r5, lr}
 80192f6:	4d07      	ldr	r5, [pc, #28]	; (8019314 <_fstat_r+0x20>)
 80192f8:	2300      	movs	r3, #0
 80192fa:	4604      	mov	r4, r0
 80192fc:	4608      	mov	r0, r1
 80192fe:	4611      	mov	r1, r2
 8019300:	602b      	str	r3, [r5, #0]
 8019302:	f7e9 fa20 	bl	8002746 <_fstat>
 8019306:	1c43      	adds	r3, r0, #1
 8019308:	d102      	bne.n	8019310 <_fstat_r+0x1c>
 801930a:	682b      	ldr	r3, [r5, #0]
 801930c:	b103      	cbz	r3, 8019310 <_fstat_r+0x1c>
 801930e:	6023      	str	r3, [r4, #0]
 8019310:	bd38      	pop	{r3, r4, r5, pc}
 8019312:	bf00      	nop
 8019314:	2000fb2c 	.word	0x2000fb2c

08019318 <_isatty_r>:
 8019318:	b538      	push	{r3, r4, r5, lr}
 801931a:	4d06      	ldr	r5, [pc, #24]	; (8019334 <_isatty_r+0x1c>)
 801931c:	2300      	movs	r3, #0
 801931e:	4604      	mov	r4, r0
 8019320:	4608      	mov	r0, r1
 8019322:	602b      	str	r3, [r5, #0]
 8019324:	f7e9 fa1f 	bl	8002766 <_isatty>
 8019328:	1c43      	adds	r3, r0, #1
 801932a:	d102      	bne.n	8019332 <_isatty_r+0x1a>
 801932c:	682b      	ldr	r3, [r5, #0]
 801932e:	b103      	cbz	r3, 8019332 <_isatty_r+0x1a>
 8019330:	6023      	str	r3, [r4, #0]
 8019332:	bd38      	pop	{r3, r4, r5, pc}
 8019334:	2000fb2c 	.word	0x2000fb2c

08019338 <_lseek_r>:
 8019338:	b538      	push	{r3, r4, r5, lr}
 801933a:	4d07      	ldr	r5, [pc, #28]	; (8019358 <_lseek_r+0x20>)
 801933c:	4604      	mov	r4, r0
 801933e:	4608      	mov	r0, r1
 8019340:	4611      	mov	r1, r2
 8019342:	2200      	movs	r2, #0
 8019344:	602a      	str	r2, [r5, #0]
 8019346:	461a      	mov	r2, r3
 8019348:	f7e9 fa18 	bl	800277c <_lseek>
 801934c:	1c43      	adds	r3, r0, #1
 801934e:	d102      	bne.n	8019356 <_lseek_r+0x1e>
 8019350:	682b      	ldr	r3, [r5, #0]
 8019352:	b103      	cbz	r3, 8019356 <_lseek_r+0x1e>
 8019354:	6023      	str	r3, [r4, #0]
 8019356:	bd38      	pop	{r3, r4, r5, pc}
 8019358:	2000fb2c 	.word	0x2000fb2c

0801935c <_realloc_r>:
 801935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801935e:	4607      	mov	r7, r0
 8019360:	4614      	mov	r4, r2
 8019362:	460e      	mov	r6, r1
 8019364:	b921      	cbnz	r1, 8019370 <_realloc_r+0x14>
 8019366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801936a:	4611      	mov	r1, r2
 801936c:	f7fe bd44 	b.w	8017df8 <_malloc_r>
 8019370:	b922      	cbnz	r2, 801937c <_realloc_r+0x20>
 8019372:	f7fe fcf1 	bl	8017d58 <_free_r>
 8019376:	4625      	mov	r5, r4
 8019378:	4628      	mov	r0, r5
 801937a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801937c:	f000 f86a 	bl	8019454 <_malloc_usable_size_r>
 8019380:	42a0      	cmp	r0, r4
 8019382:	d20f      	bcs.n	80193a4 <_realloc_r+0x48>
 8019384:	4621      	mov	r1, r4
 8019386:	4638      	mov	r0, r7
 8019388:	f7fe fd36 	bl	8017df8 <_malloc_r>
 801938c:	4605      	mov	r5, r0
 801938e:	2800      	cmp	r0, #0
 8019390:	d0f2      	beq.n	8019378 <_realloc_r+0x1c>
 8019392:	4631      	mov	r1, r6
 8019394:	4622      	mov	r2, r4
 8019396:	f7fe fcaf 	bl	8017cf8 <memcpy>
 801939a:	4631      	mov	r1, r6
 801939c:	4638      	mov	r0, r7
 801939e:	f7fe fcdb 	bl	8017d58 <_free_r>
 80193a2:	e7e9      	b.n	8019378 <_realloc_r+0x1c>
 80193a4:	4635      	mov	r5, r6
 80193a6:	e7e7      	b.n	8019378 <_realloc_r+0x1c>

080193a8 <_read_r>:
 80193a8:	b538      	push	{r3, r4, r5, lr}
 80193aa:	4d07      	ldr	r5, [pc, #28]	; (80193c8 <_read_r+0x20>)
 80193ac:	4604      	mov	r4, r0
 80193ae:	4608      	mov	r0, r1
 80193b0:	4611      	mov	r1, r2
 80193b2:	2200      	movs	r2, #0
 80193b4:	602a      	str	r2, [r5, #0]
 80193b6:	461a      	mov	r2, r3
 80193b8:	f7e9 f99c 	bl	80026f4 <_read>
 80193bc:	1c43      	adds	r3, r0, #1
 80193be:	d102      	bne.n	80193c6 <_read_r+0x1e>
 80193c0:	682b      	ldr	r3, [r5, #0]
 80193c2:	b103      	cbz	r3, 80193c6 <_read_r+0x1e>
 80193c4:	6023      	str	r3, [r4, #0]
 80193c6:	bd38      	pop	{r3, r4, r5, pc}
 80193c8:	2000fb2c 	.word	0x2000fb2c

080193cc <_raise_r>:
 80193cc:	291f      	cmp	r1, #31
 80193ce:	b538      	push	{r3, r4, r5, lr}
 80193d0:	4604      	mov	r4, r0
 80193d2:	460d      	mov	r5, r1
 80193d4:	d904      	bls.n	80193e0 <_raise_r+0x14>
 80193d6:	2316      	movs	r3, #22
 80193d8:	6003      	str	r3, [r0, #0]
 80193da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80193de:	bd38      	pop	{r3, r4, r5, pc}
 80193e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80193e2:	b112      	cbz	r2, 80193ea <_raise_r+0x1e>
 80193e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80193e8:	b94b      	cbnz	r3, 80193fe <_raise_r+0x32>
 80193ea:	4620      	mov	r0, r4
 80193ec:	f000 f830 	bl	8019450 <_getpid_r>
 80193f0:	462a      	mov	r2, r5
 80193f2:	4601      	mov	r1, r0
 80193f4:	4620      	mov	r0, r4
 80193f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193fa:	f000 b817 	b.w	801942c <_kill_r>
 80193fe:	2b01      	cmp	r3, #1
 8019400:	d00a      	beq.n	8019418 <_raise_r+0x4c>
 8019402:	1c59      	adds	r1, r3, #1
 8019404:	d103      	bne.n	801940e <_raise_r+0x42>
 8019406:	2316      	movs	r3, #22
 8019408:	6003      	str	r3, [r0, #0]
 801940a:	2001      	movs	r0, #1
 801940c:	e7e7      	b.n	80193de <_raise_r+0x12>
 801940e:	2400      	movs	r4, #0
 8019410:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019414:	4628      	mov	r0, r5
 8019416:	4798      	blx	r3
 8019418:	2000      	movs	r0, #0
 801941a:	e7e0      	b.n	80193de <_raise_r+0x12>

0801941c <raise>:
 801941c:	4b02      	ldr	r3, [pc, #8]	; (8019428 <raise+0xc>)
 801941e:	4601      	mov	r1, r0
 8019420:	6818      	ldr	r0, [r3, #0]
 8019422:	f7ff bfd3 	b.w	80193cc <_raise_r>
 8019426:	bf00      	nop
 8019428:	200004ac 	.word	0x200004ac

0801942c <_kill_r>:
 801942c:	b538      	push	{r3, r4, r5, lr}
 801942e:	4d07      	ldr	r5, [pc, #28]	; (801944c <_kill_r+0x20>)
 8019430:	2300      	movs	r3, #0
 8019432:	4604      	mov	r4, r0
 8019434:	4608      	mov	r0, r1
 8019436:	4611      	mov	r1, r2
 8019438:	602b      	str	r3, [r5, #0]
 801943a:	f7e9 f93f 	bl	80026bc <_kill>
 801943e:	1c43      	adds	r3, r0, #1
 8019440:	d102      	bne.n	8019448 <_kill_r+0x1c>
 8019442:	682b      	ldr	r3, [r5, #0]
 8019444:	b103      	cbz	r3, 8019448 <_kill_r+0x1c>
 8019446:	6023      	str	r3, [r4, #0]
 8019448:	bd38      	pop	{r3, r4, r5, pc}
 801944a:	bf00      	nop
 801944c:	2000fb2c 	.word	0x2000fb2c

08019450 <_getpid_r>:
 8019450:	f7e9 b92c 	b.w	80026ac <_getpid>

08019454 <_malloc_usable_size_r>:
 8019454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019458:	1f18      	subs	r0, r3, #4
 801945a:	2b00      	cmp	r3, #0
 801945c:	bfbc      	itt	lt
 801945e:	580b      	ldrlt	r3, [r1, r0]
 8019460:	18c0      	addlt	r0, r0, r3
 8019462:	4770      	bx	lr

08019464 <_init>:
 8019464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019466:	bf00      	nop
 8019468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801946a:	bc08      	pop	{r3}
 801946c:	469e      	mov	lr, r3
 801946e:	4770      	bx	lr

08019470 <_fini>:
 8019470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019472:	bf00      	nop
 8019474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019476:	bc08      	pop	{r3}
 8019478:	469e      	mov	lr, r3
 801947a:	4770      	bx	lr
