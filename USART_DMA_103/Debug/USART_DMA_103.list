
USART_DMA_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000263c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002778  08002778  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002778  08002778  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002778  08002778  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  0800278c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  0800278c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072ba  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001799  00000000  00000000  000272ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00028a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  00029168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001650c  00000000  00000000  000297d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078f7  00000000  00000000  0003fce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081592  00000000  00000000  000475db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8b6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a80  00000000  00000000  000c8bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002730 	.word	0x08002730

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002730 	.word	0x08002730

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fb6a 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f81a 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8a6 	bl	80002b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800016c:	f000 f886 	bl	800027c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f85a 	bl	8000228 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_Init();
 8000174:	f000 f9cc 	bl	8000510 <Ringbuf_Init>
//  {
//	  Error_Handler();
//  }


  if (waitFor("hello", 6000)!= 1)
 8000178:	f241 7170 	movw	r1, #6000	; 0x1770
 800017c:	4806      	ldr	r0, [pc, #24]	; (8000198 <main+0x3c>)
 800017e:	f000 f9ff 	bl	8000580 <waitFor>
 8000182:	4603      	mov	r3, r0
 8000184:	2b01      	cmp	r3, #1
 8000186:	d001      	beq.n	800018c <main+0x30>
  {
	  Error_Handler();
 8000188:	f000 f8c4 	bl	8000314 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay (1000);
 800018c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000190:	f000 fbb4 	bl	80008fc <HAL_Delay>
 8000194:	e7fa      	b.n	800018c <main+0x30>
 8000196:	bf00      	nop
 8000198:	08002748 	.word	0x08002748

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b090      	sub	sp, #64	; 0x40
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	2228      	movs	r2, #40	; 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f002 fab8 	bl	8002720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001be:	2301      	movs	r3, #1
 80001c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001cc:	2301      	movs	r3, #1
 80001ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d0:	2302      	movs	r3, #2
 80001d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 f8dd 	bl	80013a4 <HAL_RCC_OscConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f0:	f000 f890 	bl	8000314 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	230f      	movs	r3, #15
 80001f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f8:	2302      	movs	r3, #2
 80001fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fb48 	bl	80018a4 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021a:	f000 f87b 	bl	8000314 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3740      	adds	r7, #64	; 0x40
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 800022e:	4a12      	ldr	r2, [pc, #72]	; (8000278 <MX_USART2_UART_Init+0x50>)
 8000230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 800024e:	220c      	movs	r2, #12
 8000250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <MX_USART2_UART_Init+0x4c>)
 8000260:	f001 fcba 	bl	8001bd8 <HAL_UART_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800026a:	f000 f853 	bl	8000314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	200000e0 	.word	0x200000e0
 8000278:	40004400 	.word	0x40004400

0800027c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <MX_DMA_Init+0x38>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <MX_DMA_Init+0x38>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6153      	str	r3, [r2, #20]
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <MX_DMA_Init+0x38>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2100      	movs	r1, #0
 800029e:	2010      	movs	r0, #16
 80002a0:	f000 fc27 	bl	8000af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002a4:	2010      	movs	r0, #16
 80002a6:	f000 fc40 	bl	8000b2a <HAL_NVIC_EnableIRQ>

}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40021000 	.word	0x40021000

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_GPIO_Init+0x58>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <MX_GPIO_Init+0x58>)
 80002c4:	f043 0320 	orr.w	r3, r3, #32
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_GPIO_Init+0x58>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f003 0320 	and.w	r3, r3, #32
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_GPIO_Init+0x58>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <MX_GPIO_Init+0x58>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <MX_GPIO_Init+0x58>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0304 	and.w	r3, r3, #4
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <MX_GPIO_Init+0x58>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <MX_GPIO_Init+0x58>)
 80002f4:	f043 0308 	orr.w	r3, r3, #8
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <MX_GPIO_Init+0x58>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0308 	and.w	r3, r3, #8
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

}
 8000306:	bf00      	nop
 8000308:	3714      	adds	r7, #20
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	40021000 	.word	0x40021000

08000314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000318:	b672      	cpsid	i
}
 800031a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800031c:	e7fe      	b.n	800031c <Error_Handler+0x8>
	...

08000320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <HAL_MspInit+0x5c>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a14      	ldr	r2, [pc, #80]	; (800037c <HAL_MspInit+0x5c>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <HAL_MspInit+0x5c>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <HAL_MspInit+0x5c>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	4a0e      	ldr	r2, [pc, #56]	; (800037c <HAL_MspInit+0x5c>)
 8000344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000348:	61d3      	str	r3, [r2, #28]
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <HAL_MspInit+0x5c>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <HAL_MspInit+0x60>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <HAL_MspInit+0x60>)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000372:	bf00      	nop
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	40021000 	.word	0x40021000
 8000380:	40010000 	.word	0x40010000

08000384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a32      	ldr	r2, [pc, #200]	; (8000468 <HAL_UART_MspInit+0xe4>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d15d      	bne.n	8000460 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003a4:	4b31      	ldr	r3, [pc, #196]	; (800046c <HAL_UART_MspInit+0xe8>)
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	4a30      	ldr	r2, [pc, #192]	; (800046c <HAL_UART_MspInit+0xe8>)
 80003aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ae:	61d3      	str	r3, [r2, #28]
 80003b0:	4b2e      	ldr	r3, [pc, #184]	; (800046c <HAL_UART_MspInit+0xe8>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b2b      	ldr	r3, [pc, #172]	; (800046c <HAL_UART_MspInit+0xe8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a2a      	ldr	r2, [pc, #168]	; (800046c <HAL_UART_MspInit+0xe8>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b28      	ldr	r3, [pc, #160]	; (800046c <HAL_UART_MspInit+0xe8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003d4:	2304      	movs	r3, #4
 80003d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d8:	2302      	movs	r3, #2
 80003da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003dc:	2303      	movs	r3, #3
 80003de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4822      	ldr	r0, [pc, #136]	; (8000470 <HAL_UART_MspInit+0xec>)
 80003e8:	f000 fe58 	bl	800109c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003ec:	2308      	movs	r3, #8
 80003ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	481c      	ldr	r0, [pc, #112]	; (8000470 <HAL_UART_MspInit+0xec>)
 8000400:	f000 fe4c 	bl	800109c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <HAL_UART_MspInit+0xf0>)
 8000406:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <HAL_UART_MspInit+0xf4>)
 8000408:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <HAL_UART_MspInit+0xf0>)
 800040c:	2200      	movs	r2, #0
 800040e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <HAL_UART_MspInit+0xf0>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <HAL_UART_MspInit+0xf0>)
 8000418:	2280      	movs	r2, #128	; 0x80
 800041a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <HAL_UART_MspInit+0xf0>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_UART_MspInit+0xf0>)
 8000424:	2200      	movs	r2, #0
 8000426:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_UART_MspInit+0xf0>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_UART_MspInit+0xf0>)
 8000430:	2200      	movs	r2, #0
 8000432:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <HAL_UART_MspInit+0xf0>)
 8000436:	f000 fb93 	bl	8000b60 <HAL_DMA_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000440:	f7ff ff68 	bl	8000314 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <HAL_UART_MspInit+0xf0>)
 8000448:	639a      	str	r2, [r3, #56]	; 0x38
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <HAL_UART_MspInit+0xf0>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	2026      	movs	r0, #38	; 0x26
 8000456:	f000 fb4c 	bl	8000af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800045a:	2026      	movs	r0, #38	; 0x26
 800045c:	f000 fb65 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40004400 	.word	0x40004400
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800
 8000474:	20000038 	.word	0x20000038
 8000478:	4002006c 	.word	0x4002006c

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
	...

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f9fe 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TIMEOUT--;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <SysTick_Handler+0x18>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a02      	ldr	r2, [pc, #8]	; (80004d8 <SysTick_Handler+0x18>)
 80004d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000034 	.word	0x20000034

080004dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <DMA1_Channel6_IRQHandler+0x10>)
 80004e2:	f000 fca7 	bl	8000e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000038 	.word	0x20000038

080004f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <USART2_IRQHandler+0x10>)
 80004f6:	f001 fc0b 	bl	8001d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200000e0 	.word	0x200000e0

08000504 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <Ringbuf_Init>:
/* Timeout is in milliseconds */
int32_t TIMEOUT = 0;

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8000514:	2214      	movs	r2, #20
 8000516:	2100      	movs	r1, #0
 8000518:	4811      	ldr	r0, [pc, #68]	; (8000560 <Ringbuf_Init+0x50>)
 800051a:	f002 f901 	bl	8002720 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4810      	ldr	r0, [pc, #64]	; (8000564 <Ringbuf_Init+0x54>)
 8000524:	f002 f8fc 	bl	8002720 <memset>

	Head = Tail = 0;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <Ringbuf_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <Ringbuf_Init+0x58>)
 8000530:	881a      	ldrh	r2, [r3, #0]
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <Ringbuf_Init+0x5c>)
 8000534:	801a      	strh	r2, [r3, #0]
	oldPos = 0;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <Ringbuf_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <Ringbuf_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8000542:	2214      	movs	r2, #20
 8000544:	4906      	ldr	r1, [pc, #24]	; (8000560 <Ringbuf_Init+0x50>)
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <Ringbuf_Init+0x68>)
 8000548:	f001 fb93 	bl	8001c72 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <Ringbuf_Init+0x6c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <Ringbuf_Init+0x6c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f022 0204 	bic.w	r2, r2, #4
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000128 	.word	0x20000128
 8000564:	2000013c 	.word	0x2000013c
 8000568:	20000164 	.word	0x20000164
 800056c:	20000124 	.word	0x20000124
 8000570:	20000028 	.word	0x20000028
 8000574:	2000002a 	.word	0x2000002a
 8000578:	200000e0 	.word	0x200000e0
 800057c:	20000038 	.word	0x20000038

08000580 <waitFor>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 * return 0, in case of the timeout
 */
int waitFor (char *string, uint32_t Timeout)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff fddc 	bl	800014c <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	60bb      	str	r3, [r7, #8]

	TIMEOUT = Timeout;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	4a40      	ldr	r2, [pc, #256]	; (800069c <waitFor+0x11c>)
 800059c:	6013      	str	r3, [r2, #0]

	while ((Tail==Head)&&TIMEOUT);  // let's wait for the data to show up
 800059e:	bf00      	nop
 80005a0:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <waitFor+0x120>)
 80005a2:	881a      	ldrh	r2, [r3, #0]
 80005a4:	4b3f      	ldr	r3, [pc, #252]	; (80006a4 <waitFor+0x124>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d103      	bne.n	80005b4 <waitFor+0x34>
 80005ac:	4b3b      	ldr	r3, [pc, #236]	; (800069c <waitFor+0x11c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f5      	bne.n	80005a0 <waitFor+0x20>
	isDataAvailable = 0;
 80005b4:	4b3c      	ldr	r3, [pc, #240]	; (80006a8 <waitFor+0x128>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]

again:

	/* If the data doesn't show up, then return 0 */
	if (TIMEOUT <= 0) return 0;
 80005ba:	4b38      	ldr	r3, [pc, #224]	; (800069c <waitFor+0x11c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dc1b      	bgt.n	80005fa <waitFor+0x7a>
 80005c2:	2300      	movs	r3, #0
 80005c4:	e065      	b.n	8000692 <waitFor+0x112>
	/* if the incoming data does not match with the string, we will simply increment the index
	 * And wait for the string to arrive in the incoming data
	 * */
	while (MainBuf[Tail] != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (TIMEOUT <= 0) return 0;
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <waitFor+0x11c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	dc01      	bgt.n	80005d2 <waitFor+0x52>
 80005ce:	2300      	movs	r3, #0
 80005d0:	e05f      	b.n	8000692 <waitFor+0x112>


		if (Tail == Head) goto again;
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <waitFor+0x120>)
 80005d4:	881a      	ldrh	r2, [r3, #0]
 80005d6:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <waitFor+0x124>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d100      	bne.n	80005e0 <waitFor+0x60>
 80005de:	e7ec      	b.n	80005ba <waitFor+0x3a>
		Tail++;
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <waitFor+0x120>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <waitFor+0x120>)
 80005ea:	801a      	strh	r2, [r3, #0]

		if (Tail==MainBuf_SIZE) Tail = 0;
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <waitFor+0x120>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	2b28      	cmp	r3, #40	; 0x28
 80005f2:	d102      	bne.n	80005fa <waitFor+0x7a>
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <waitFor+0x120>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	801a      	strh	r2, [r3, #0]
	while (MainBuf[Tail] != string[so_far])  // peek in the rx_buffer to see if we get the string
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <waitFor+0x120>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <waitFor+0x12c>)
 8000602:	5c9a      	ldrb	r2, [r3, r2]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	440b      	add	r3, r1
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	429a      	cmp	r2, r3
 800060e:	d1da      	bne.n	80005c6 <waitFor+0x46>
	}

	/* If the incoming data does match with the string, we will return 1 to indicate this */
	while (MainBuf[Tail] == string[so_far]) // if we got the first letter of the string
 8000610:	e022      	b.n	8000658 <waitFor+0xd8>
	{
		if (TIMEOUT <= 0) return 0;
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <waitFor+0x11c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	dc01      	bgt.n	800061e <waitFor+0x9e>
 800061a:	2300      	movs	r3, #0
 800061c:	e039      	b.n	8000692 <waitFor+0x112>
		so_far++;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3301      	adds	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]

		if (Tail == Head) goto again;
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <waitFor+0x120>)
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <waitFor+0x124>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d100      	bne.n	8000632 <waitFor+0xb2>
 8000630:	e7c3      	b.n	80005ba <waitFor+0x3a>
		Tail++;
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <waitFor+0x120>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <waitFor+0x120>)
 800063c:	801a      	strh	r2, [r3, #0]
		if (Tail==MainBuf_SIZE) Tail = 0;
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <waitFor+0x120>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	2b28      	cmp	r3, #40	; 0x28
 8000644:	d102      	bne.n	800064c <waitFor+0xcc>
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <waitFor+0x120>)
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
		if (so_far == len) return 1;
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	429a      	cmp	r2, r3
 8000652:	d101      	bne.n	8000658 <waitFor+0xd8>
 8000654:	2301      	movs	r3, #1
 8000656:	e01c      	b.n	8000692 <waitFor+0x112>
	while (MainBuf[Tail] == string[so_far]) // if we got the first letter of the string
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <waitFor+0x120>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <waitFor+0x12c>)
 8000660:	5c9a      	ldrb	r2, [r3, r2]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	440b      	add	r3, r1
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d0d1      	beq.n	8000612 <waitFor+0x92>
//	{
//		so_far = 0;
//		goto again;
//	}

	HAL_Delay (100);
 800066e:	2064      	movs	r0, #100	; 0x64
 8000670:	f000 f944 	bl	80008fc <HAL_Delay>

	if ((so_far!=len)&&isDataAvailable)
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	429a      	cmp	r2, r3
 800067a:	d007      	beq.n	800068c <waitFor+0x10c>
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <waitFor+0x128>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <waitFor+0x10c>
	{
		isDataAvailable = 0;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <waitFor+0x128>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
//		so_far = 0;
		goto again;
 800068a:	e796      	b.n	80005ba <waitFor+0x3a>
	}
	else
	{
		so_far = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
		goto again;
 8000690:	e793      	b.n	80005ba <waitFor+0x3a>
	}


	return 0;
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000034 	.word	0x20000034
 80006a0:	20000164 	.word	0x20000164
 80006a4:	20000124 	.word	0x20000124
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	2000013c 	.word	0x2000013c

080006b0 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	807b      	strh	r3, [r7, #2]
		isDataAvailable = 1;
 80006bc:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x118>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]

		oldPos = newPos;  // Update the last position before copying new data
 80006c2:	4b42      	ldr	r3, [pc, #264]	; (80007cc <HAL_UARTEx_RxEventCallback+0x11c>)
 80006c4:	881a      	ldrh	r2, [r3, #0]
 80006c6:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x120>)
 80006c8:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 80006ca:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x120>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	4413      	add	r3, r2
 80006d4:	2b28      	cmp	r3, #40	; 0x28
 80006d6:	dd22      	ble.n	800071e <HAL_UARTEx_RxEventCallback+0x6e>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 80006d8:	4b3d      	ldr	r3, [pc, #244]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x120>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80006e0:	817b      	strh	r3, [r7, #10]
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, datatocopy);  // copy data in that remaining space
 80006e2:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x120>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x124>)
 80006ea:	4413      	add	r3, r2
 80006ec:	897a      	ldrh	r2, [r7, #10]
 80006ee:	493a      	ldr	r1, [pc, #232]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x128>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 f807 	bl	8002704 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x120>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80006fc:	897b      	ldrh	r3, [r7, #10]
 80006fe:	4a36      	ldr	r2, [pc, #216]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000700:	1899      	adds	r1, r3, r2
 8000702:	887a      	ldrh	r2, [r7, #2]
 8000704:	897b      	ldrh	r3, [r7, #10]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	461a      	mov	r2, r3
 800070a:	4832      	ldr	r0, [pc, #200]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x124>)
 800070c:	f001 fffa 	bl	8002704 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <HAL_UARTEx_RxEventCallback+0x11c>)
 800071a:	801a      	strh	r2, [r3, #0]
 800071c:	e010      	b.n	8000740 <HAL_UARTEx_RxEventCallback+0x90>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, Size);
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x124>)
 8000726:	4413      	add	r3, r2
 8000728:	887a      	ldrh	r2, [r7, #2]
 800072a:	492b      	ldr	r1, [pc, #172]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x128>)
 800072c:	4618      	mov	r0, r3
 800072e:	f001 ffe9 	bl	8002704 <memcpy>
			newPos = Size+oldPos;
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x120>)
 8000734:	881a      	ldrh	r2, [r3, #0]
 8000736:	887b      	ldrh	r3, [r7, #2]
 8000738:	4413      	add	r3, r2
 800073a:	b29a      	uxth	r2, r3
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <HAL_UARTEx_RxEventCallback+0x11c>)
 800073e:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <HAL_UARTEx_RxEventCallback+0x12c>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	4413      	add	r3, r2
 800074a:	2b27      	cmp	r3, #39	; 0x27
 800074c:	dc07      	bgt.n	800075e <HAL_UARTEx_RxEventCallback+0xae>
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <HAL_UARTEx_RxEventCallback+0x12c>)
 8000750:	881a      	ldrh	r2, [r3, #0]
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	4413      	add	r3, r2
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <HAL_UARTEx_RxEventCallback+0x12c>)
 800075a:	801a      	strh	r2, [r3, #0]
 800075c:	e008      	b.n	8000770 <HAL_UARTEx_RxEventCallback+0xc0>
		else Head = Head+Size - MainBuf_SIZE;
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <HAL_UARTEx_RxEventCallback+0x12c>)
 8000760:	881a      	ldrh	r2, [r3, #0]
 8000762:	887b      	ldrh	r3, [r7, #2]
 8000764:	4413      	add	r3, r2
 8000766:	b29b      	uxth	r3, r3
 8000768:	3b28      	subs	r3, #40	; 0x28
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_UARTEx_RxEventCallback+0x12c>)
 800076e:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8000770:	2214      	movs	r2, #20
 8000772:	4919      	ldr	r1, [pc, #100]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x130>)
 8000776:	f001 fa7c 	bl	8001c72 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x134>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x134>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f022 0204 	bic.w	r2, r2, #4
 8000788:	601a      	str	r2, [r3, #0]
	/****************** PROCESS (Little) THE DATA HERE *********************
	 * This is the PART OF  "isConfirmed" Function
	 */

	/* Let's say we want to check for the keyword "OK" within our incoming DATA */
	for (int i=0; i<Size; i++)
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e011      	b.n	80007b4 <HAL_UARTEx_RxEventCallback+0x104>
	{
		if ((RxBuf[i] == 'O') && (RxBuf[i+1] == 'K'))
 8000790:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x128>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b4f      	cmp	r3, #79	; 0x4f
 800079a:	d108      	bne.n	80007ae <HAL_UARTEx_RxEventCallback+0xfe>
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x128>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	2b4b      	cmp	r3, #75	; 0x4b
 80007a6:	d102      	bne.n	80007ae <HAL_UARTEx_RxEventCallback+0xfe>
		{
			isOK = 1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x138>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
	for (int i=0; i<Size; i++)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	887b      	ldrh	r3, [r7, #2]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dbe9      	blt.n	8000790 <HAL_UARTEx_RxEventCallback+0xe0>
		}
	}
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000002c 	.word	0x2000002c
 80007cc:	2000002a 	.word	0x2000002a
 80007d0:	20000028 	.word	0x20000028
 80007d4:	2000013c 	.word	0x2000013c
 80007d8:	20000128 	.word	0x20000128
 80007dc:	20000124 	.word	0x20000124
 80007e0:	200000e0 	.word	0x200000e0
 80007e4:	20000038 	.word	0x20000038
 80007e8:	20000030 	.word	0x20000030

080007ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	; (8000830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff fe77 	bl	8000504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f001 ff51 	bl	80026bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fc9f 	bl	800015c <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000828:	08002780 	.word	0x08002780
  ldr r2, =_sbss
 800082c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000830:	2000016c 	.word	0x2000016c

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f947 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	200f      	movs	r0, #15
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fd64 	bl	8000320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f95f 	bl	8000b46 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 f927 	bl	8000af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000168 	.word	0x20000168

080008e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	20000168 	.word	0x20000168

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000904:	f7ff fff0 	bl	80008e8 <HAL_GetTick>
 8000908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Delay+0x44>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000922:	bf00      	nop
 8000924:	f7ff ffe0 	bl	80008e8 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
  {
  }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <__NVIC_EnableIRQ+0x34>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	f7ff ff90 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff2d 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff42 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff90 	bl	8000a34 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5f 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff35 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa2 	bl	8000a98 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e043      	b.n	8000bfe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <HAL_DMA_Init+0xa8>)
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <HAL_DMA_Init+0xac>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	009a      	lsls	r2, r3, #2
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <HAL_DMA_Init+0xb0>)
 8000b92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2202      	movs	r2, #2
 8000b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000baa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	bffdfff8 	.word	0xbffdfff8
 8000c0c:	cccccccd 	.word	0xcccccccd
 8000c10:	40020000 	.word	0x40020000

08000c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d101      	bne.n	8000c34 <HAL_DMA_Start_IT+0x20>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e04a      	b.n	8000cca <HAL_DMA_Start_IT+0xb6>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d13a      	bne.n	8000cbc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2202      	movs	r2, #2
 8000c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2200      	movs	r2, #0
 8000c52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0201 	bic.w	r2, r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f000 f9e8 	bl	8001040 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d008      	beq.n	8000c8a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 020e 	orr.w	r2, r2, #14
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e00f      	b.n	8000caa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0204 	bic.w	r2, r2, #4
 8000c98:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f042 020a 	orr.w	r2, r2, #10
 8000ca8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0201 	orr.w	r2, r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e005      	b.n	8000cc8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b085      	sub	sp, #20
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d008      	beq.n	8000cfa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2204      	movs	r2, #4
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e020      	b.n	8000d3c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 020e 	bic.w	r2, r2, #14
 8000d08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0201 	bic.w	r2, r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d22:	2101      	movs	r1, #1
 8000d24:	fa01 f202 	lsl.w	r2, r1, r2
 8000d28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d005      	beq.n	8000d6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2204      	movs	r2, #4
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	e051      	b.n	8000e0e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 020e 	bic.w	r2, r2, #14
 8000d78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0201 	bic.w	r2, r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <HAL_DMA_Abort_IT+0xd0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d029      	beq.n	8000de8 <HAL_DMA_Abort_IT+0xa0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <HAL_DMA_Abort_IT+0xd4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d022      	beq.n	8000de4 <HAL_DMA_Abort_IT+0x9c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <HAL_DMA_Abort_IT+0xd8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d01a      	beq.n	8000dde <HAL_DMA_Abort_IT+0x96>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_DMA_Abort_IT+0xdc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d012      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x90>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <HAL_DMA_Abort_IT+0xe0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00a      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x8a>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_DMA_Abort_IT+0xe4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d102      	bne.n	8000dcc <HAL_DMA_Abort_IT+0x84>
 8000dc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dca:	e00e      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dd0:	e00b      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd6:	e008      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	e005      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	e002      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000de4:	2310      	movs	r3, #16
 8000de6:	e000      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000de8:	2301      	movs	r3, #1
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <HAL_DMA_Abort_IT+0xe8>)
 8000dec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	4798      	blx	r3
    } 
  }
  return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40020008 	.word	0x40020008
 8000e1c:	4002001c 	.word	0x4002001c
 8000e20:	40020030 	.word	0x40020030
 8000e24:	40020044 	.word	0x40020044
 8000e28:	40020058 	.word	0x40020058
 8000e2c:	4002006c 	.word	0x4002006c
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	2204      	movs	r2, #4
 8000e52:	409a      	lsls	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d04f      	beq.n	8000efc <HAL_DMA_IRQHandler+0xc8>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d04a      	beq.n	8000efc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d107      	bne.n	8000e84 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0204 	bic.w	r2, r2, #4
 8000e82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a66      	ldr	r2, [pc, #408]	; (8001024 <HAL_DMA_IRQHandler+0x1f0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d029      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0xae>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a65      	ldr	r2, [pc, #404]	; (8001028 <HAL_DMA_IRQHandler+0x1f4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d022      	beq.n	8000ede <HAL_DMA_IRQHandler+0xaa>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a63      	ldr	r2, [pc, #396]	; (800102c <HAL_DMA_IRQHandler+0x1f8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d01a      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0xa4>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a62      	ldr	r2, [pc, #392]	; (8001030 <HAL_DMA_IRQHandler+0x1fc>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d012      	beq.n	8000ed2 <HAL_DMA_IRQHandler+0x9e>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a60      	ldr	r2, [pc, #384]	; (8001034 <HAL_DMA_IRQHandler+0x200>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00a      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x98>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a5f      	ldr	r2, [pc, #380]	; (8001038 <HAL_DMA_IRQHandler+0x204>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d102      	bne.n	8000ec6 <HAL_DMA_IRQHandler+0x92>
 8000ec0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec4:	e00e      	b.n	8000ee4 <HAL_DMA_IRQHandler+0xb0>
 8000ec6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eca:	e00b      	b.n	8000ee4 <HAL_DMA_IRQHandler+0xb0>
 8000ecc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ed0:	e008      	b.n	8000ee4 <HAL_DMA_IRQHandler+0xb0>
 8000ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ed6:	e005      	b.n	8000ee4 <HAL_DMA_IRQHandler+0xb0>
 8000ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000edc:	e002      	b.n	8000ee4 <HAL_DMA_IRQHandler+0xb0>
 8000ede:	2340      	movs	r3, #64	; 0x40
 8000ee0:	e000      	b.n	8000ee4 <HAL_DMA_IRQHandler+0xb0>
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	4a55      	ldr	r2, [pc, #340]	; (800103c <HAL_DMA_IRQHandler+0x208>)
 8000ee6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 8094 	beq.w	800101a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000efa:	e08e      	b.n	800101a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	2202      	movs	r2, #2
 8000f02:	409a      	lsls	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d056      	beq.n	8000fba <HAL_DMA_IRQHandler+0x186>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d051      	beq.n	8000fba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0320 	and.w	r3, r3, #32
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10b      	bne.n	8000f3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 020a 	bic.w	r2, r2, #10
 8000f32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a38      	ldr	r2, [pc, #224]	; (8001024 <HAL_DMA_IRQHandler+0x1f0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d029      	beq.n	8000f9a <HAL_DMA_IRQHandler+0x166>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a37      	ldr	r2, [pc, #220]	; (8001028 <HAL_DMA_IRQHandler+0x1f4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d022      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x162>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a35      	ldr	r2, [pc, #212]	; (800102c <HAL_DMA_IRQHandler+0x1f8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d01a      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x15c>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a34      	ldr	r2, [pc, #208]	; (8001030 <HAL_DMA_IRQHandler+0x1fc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d012      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x156>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a32      	ldr	r2, [pc, #200]	; (8001034 <HAL_DMA_IRQHandler+0x200>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00a      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x150>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a31      	ldr	r2, [pc, #196]	; (8001038 <HAL_DMA_IRQHandler+0x204>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d102      	bne.n	8000f7e <HAL_DMA_IRQHandler+0x14a>
 8000f78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f7c:	e00e      	b.n	8000f9c <HAL_DMA_IRQHandler+0x168>
 8000f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f82:	e00b      	b.n	8000f9c <HAL_DMA_IRQHandler+0x168>
 8000f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f88:	e008      	b.n	8000f9c <HAL_DMA_IRQHandler+0x168>
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	e005      	b.n	8000f9c <HAL_DMA_IRQHandler+0x168>
 8000f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f94:	e002      	b.n	8000f9c <HAL_DMA_IRQHandler+0x168>
 8000f96:	2320      	movs	r3, #32
 8000f98:	e000      	b.n	8000f9c <HAL_DMA_IRQHandler+0x168>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	4a27      	ldr	r2, [pc, #156]	; (800103c <HAL_DMA_IRQHandler+0x208>)
 8000f9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d034      	beq.n	800101a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fb8:	e02f      	b.n	800101a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d028      	beq.n	800101c <HAL_DMA_IRQHandler+0x1e8>
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d023      	beq.n	800101c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 020e 	bic.w	r2, r2, #14
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fec:	2101      	movs	r1, #1
 8000fee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	4798      	blx	r3
    }
  }
  return;
 800101a:	bf00      	nop
 800101c:	bf00      	nop
}
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40020008 	.word	0x40020008
 8001028:	4002001c 	.word	0x4002001c
 800102c:	40020030 	.word	0x40020030
 8001030:	40020044 	.word	0x40020044
 8001034:	40020058 	.word	0x40020058
 8001038:	4002006c 	.word	0x4002006c
 800103c:	40020000 	.word	0x40020000

08001040 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b10      	cmp	r3, #16
 800106c:	d108      	bne.n	8001080 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800107e:	e007      	b.n	8001090 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	60da      	str	r2, [r3, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b08b      	sub	sp, #44	; 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	e169      	b.n	8001384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b0:	2201      	movs	r2, #1
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8158 	bne.w	800137e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a9a      	ldr	r2, [pc, #616]	; (800133c <HAL_GPIO_Init+0x2a0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d05e      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010d8:	4a98      	ldr	r2, [pc, #608]	; (800133c <HAL_GPIO_Init+0x2a0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d875      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010de:	4a98      	ldr	r2, [pc, #608]	; (8001340 <HAL_GPIO_Init+0x2a4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d058      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010e4:	4a96      	ldr	r2, [pc, #600]	; (8001340 <HAL_GPIO_Init+0x2a4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d86f      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010ea:	4a96      	ldr	r2, [pc, #600]	; (8001344 <HAL_GPIO_Init+0x2a8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d052      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010f0:	4a94      	ldr	r2, [pc, #592]	; (8001344 <HAL_GPIO_Init+0x2a8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d869      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010f6:	4a94      	ldr	r2, [pc, #592]	; (8001348 <HAL_GPIO_Init+0x2ac>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d04c      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010fc:	4a92      	ldr	r2, [pc, #584]	; (8001348 <HAL_GPIO_Init+0x2ac>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d863      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 8001102:	4a92      	ldr	r2, [pc, #584]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d046      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 8001108:	4a90      	ldr	r2, [pc, #576]	; (800134c <HAL_GPIO_Init+0x2b0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d85d      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 800110e:	2b12      	cmp	r3, #18
 8001110:	d82a      	bhi.n	8001168 <HAL_GPIO_Init+0xcc>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d859      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <HAL_GPIO_Init+0x80>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001197 	.word	0x08001197
 8001120:	08001171 	.word	0x08001171
 8001124:	08001183 	.word	0x08001183
 8001128:	080011c5 	.word	0x080011c5
 800112c:	080011cb 	.word	0x080011cb
 8001130:	080011cb 	.word	0x080011cb
 8001134:	080011cb 	.word	0x080011cb
 8001138:	080011cb 	.word	0x080011cb
 800113c:	080011cb 	.word	0x080011cb
 8001140:	080011cb 	.word	0x080011cb
 8001144:	080011cb 	.word	0x080011cb
 8001148:	080011cb 	.word	0x080011cb
 800114c:	080011cb 	.word	0x080011cb
 8001150:	080011cb 	.word	0x080011cb
 8001154:	080011cb 	.word	0x080011cb
 8001158:	080011cb 	.word	0x080011cb
 800115c:	080011cb 	.word	0x080011cb
 8001160:	08001179 	.word	0x08001179
 8001164:	0800118d 	.word	0x0800118d
 8001168:	4a79      	ldr	r2, [pc, #484]	; (8001350 <HAL_GPIO_Init+0x2b4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800116e:	e02c      	b.n	80011ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e029      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	3304      	adds	r3, #4
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e024      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	3308      	adds	r3, #8
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e01f      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	330c      	adds	r3, #12
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e01a      	b.n	80011cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800119e:	2304      	movs	r3, #4
 80011a0:	623b      	str	r3, [r7, #32]
          break;
 80011a2:	e013      	b.n	80011cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d105      	bne.n	80011b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ac:	2308      	movs	r3, #8
 80011ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	611a      	str	r2, [r3, #16]
          break;
 80011b6:	e009      	b.n	80011cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b8:	2308      	movs	r3, #8
 80011ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	615a      	str	r2, [r3, #20]
          break;
 80011c2:	e003      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x130>
          break;
 80011ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2bff      	cmp	r3, #255	; 0xff
 80011d0:	d801      	bhi.n	80011d6 <HAL_GPIO_Init+0x13a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e001      	b.n	80011da <HAL_GPIO_Init+0x13e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2bff      	cmp	r3, #255	; 0xff
 80011e0:	d802      	bhi.n	80011e8 <HAL_GPIO_Init+0x14c>
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x152>
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	3b08      	subs	r3, #8
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	210f      	movs	r1, #15
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	6a39      	ldr	r1, [r7, #32]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80b1 	beq.w	800137e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001234:	4a48      	ldr	r2, [pc, #288]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a40      	ldr	r2, [pc, #256]	; (800135c <HAL_GPIO_Init+0x2c0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x1ec>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3f      	ldr	r2, [pc, #252]	; (8001360 <HAL_GPIO_Init+0x2c4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1e8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3e      	ldr	r2, [pc, #248]	; (8001364 <HAL_GPIO_Init+0x2c8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1e4>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a3d      	ldr	r2, [pc, #244]	; (8001368 <HAL_GPIO_Init+0x2cc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1e0>
 8001278:	2303      	movs	r3, #3
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 800127c:	2304      	movs	r3, #4
 800127e:	e004      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001280:	2302      	movs	r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x1ee>
 8001288:	2300      	movs	r3, #0
 800128a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800129a:	492f      	ldr	r1, [pc, #188]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	492c      	ldr	r1, [pc, #176]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4928      	ldr	r1, [pc, #160]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4922      	ldr	r1, [pc, #136]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	491e      	ldr	r1, [pc, #120]	; (800136c <HAL_GPIO_Init+0x2d0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_GPIO_Init+0x2d0>)
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	4918      	ldr	r1, [pc, #96]	; (800136c <HAL_GPIO_Init+0x2d0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_GPIO_Init+0x2d0>)
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	43db      	mvns	r3, r3
 800131a:	4914      	ldr	r1, [pc, #80]	; (800136c <HAL_GPIO_Init+0x2d0>)
 800131c:	4013      	ands	r3, r2
 800131e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d021      	beq.n	8001370 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_GPIO_Init+0x2d0>)
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	490e      	ldr	r1, [pc, #56]	; (800136c <HAL_GPIO_Init+0x2d0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	60cb      	str	r3, [r1, #12]
 8001338:	e021      	b.n	800137e <HAL_GPIO_Init+0x2e2>
 800133a:	bf00      	nop
 800133c:	10320000 	.word	0x10320000
 8001340:	10310000 	.word	0x10310000
 8001344:	10220000 	.word	0x10220000
 8001348:	10210000 	.word	0x10210000
 800134c:	10120000 	.word	0x10120000
 8001350:	10110000 	.word	0x10110000
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00
 8001364:	40011000 	.word	0x40011000
 8001368:	40011400 	.word	0x40011400
 800136c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_GPIO_Init+0x304>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	43db      	mvns	r3, r3
 8001378:	4909      	ldr	r1, [pc, #36]	; (80013a0 <HAL_GPIO_Init+0x304>)
 800137a:	4013      	ands	r3, r2
 800137c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	3301      	adds	r3, #1
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	f47f ae8e 	bne.w	80010b0 <HAL_GPIO_Init+0x14>
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	372c      	adds	r7, #44	; 0x2c
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e26c      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8087 	beq.w	80014d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c4:	4b92      	ldr	r3, [pc, #584]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d00c      	beq.n	80013ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013d0:	4b8f      	ldr	r3, [pc, #572]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d112      	bne.n	8001402 <HAL_RCC_OscConfig+0x5e>
 80013dc:	4b8c      	ldr	r3, [pc, #560]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e8:	d10b      	bne.n	8001402 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ea:	4b89      	ldr	r3, [pc, #548]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d06c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x12c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d168      	bne.n	80014d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e246      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x76>
 800140c:	4b80      	ldr	r3, [pc, #512]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a7f      	ldr	r2, [pc, #508]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e02e      	b.n	8001478 <HAL_RCC_OscConfig+0xd4>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x98>
 8001422:	4b7b      	ldr	r3, [pc, #492]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7a      	ldr	r2, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b78      	ldr	r3, [pc, #480]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a77      	ldr	r2, [pc, #476]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e01d      	b.n	8001478 <HAL_RCC_OscConfig+0xd4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0xbc>
 8001446:	4b72      	ldr	r3, [pc, #456]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a71      	ldr	r2, [pc, #452]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b6f      	ldr	r3, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a6e      	ldr	r2, [pc, #440]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e00b      	b.n	8001478 <HAL_RCC_OscConfig+0xd4>
 8001460:	4b6b      	ldr	r3, [pc, #428]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6a      	ldr	r2, [pc, #424]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b68      	ldr	r3, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a67      	ldr	r2, [pc, #412]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001476:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d013      	beq.n	80014a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fa32 	bl	80008e8 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fa2e 	bl	80008e8 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e1fa      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0xe4>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa1e 	bl	80008e8 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fa1a 	bl	80008e8 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1e6      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x10c>
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d063      	beq.n	80015a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014de:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00b      	beq.n	8001502 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ea:	4b49      	ldr	r3, [pc, #292]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d11c      	bne.n	8001530 <HAL_RCC_OscConfig+0x18c>
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d116      	bne.n	8001530 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <HAL_RCC_OscConfig+0x176>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e1ba      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4939      	ldr	r1, [pc, #228]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	e03a      	b.n	80015a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff f9d3 	bl	80008e8 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff f9cf 	bl	80008e8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e19b      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4927      	ldr	r1, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
 8001578:	e015      	b.n	80015a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff f9b2 	bl	80008e8 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff f9ae 	bl	80008e8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e17a      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d03a      	beq.n	8001628 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d019      	beq.n	80015ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_RCC_OscConfig+0x274>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff f992 	bl	80008e8 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c8:	f7ff f98e 	bl	80008e8 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e15a      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f000 fad8 	bl	8001b9c <RCC_Delay>
 80015ec:	e01c      	b.n	8001628 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_RCC_OscConfig+0x274>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff f978 	bl	80008e8 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fa:	e00f      	b.n	800161c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff f974 	bl	80008e8 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d908      	bls.n	800161c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e140      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	42420000 	.word	0x42420000
 8001618:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	4b9e      	ldr	r3, [pc, #632]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e9      	bne.n	80015fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a6 	beq.w	8001782 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b97      	ldr	r3, [pc, #604]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10d      	bne.n	8001662 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b94      	ldr	r3, [pc, #592]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a93      	ldr	r2, [pc, #588]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b91      	ldr	r3, [pc, #580]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165e:	2301      	movs	r3, #1
 8001660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	4b8e      	ldr	r3, [pc, #568]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d118      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166e:	4b8b      	ldr	r3, [pc, #556]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a8a      	ldr	r2, [pc, #552]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167a:	f7ff f935 	bl	80008e8 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001682:	f7ff f931 	bl	80008e8 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b64      	cmp	r3, #100	; 0x64
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e0fd      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	4b81      	ldr	r3, [pc, #516]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x312>
 80016a8:	4b7b      	ldr	r3, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a7a      	ldr	r2, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	e02d      	b.n	8001712 <HAL_RCC_OscConfig+0x36e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x334>
 80016be:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a75      	ldr	r2, [pc, #468]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	4b73      	ldr	r3, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a72      	ldr	r2, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	f023 0304 	bic.w	r3, r3, #4
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	e01c      	b.n	8001712 <HAL_RCC_OscConfig+0x36e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0x356>
 80016e0:	4b6d      	ldr	r3, [pc, #436]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a6c      	ldr	r2, [pc, #432]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a69      	ldr	r2, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	e00b      	b.n	8001712 <HAL_RCC_OscConfig+0x36e>
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a66      	ldr	r2, [pc, #408]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a63      	ldr	r2, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 800170c:	f023 0304 	bic.w	r3, r3, #4
 8001710:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d015      	beq.n	8001746 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff f8e5 	bl	80008e8 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff f8e1 	bl	80008e8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0ab      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	4b57      	ldr	r3, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ee      	beq.n	8001722 <HAL_RCC_OscConfig+0x37e>
 8001744:	e014      	b.n	8001770 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001746:	f7ff f8cf 	bl	80008e8 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff f8cb 	bl	80008e8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	; 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e095      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ee      	bne.n	800174e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d105      	bne.n	8001782 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001776:	4b48      	ldr	r3, [pc, #288]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a47      	ldr	r2, [pc, #284]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001780:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8081 	beq.w	800188e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178c:	4b42      	ldr	r3, [pc, #264]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d061      	beq.n	800185c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d146      	bne.n	800182e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a0:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_OscConfig+0x4fc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f89f 	bl	80008e8 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff f89b 	bl	80008e8 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e067      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	492d      	ldr	r1, [pc, #180]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a19      	ldr	r1, [r3, #32]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	430b      	orrs	r3, r1
 80017fa:	4927      	ldr	r1, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x4fc>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff f86f 	bl	80008e8 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff f86b 	bl	80008e8 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e037      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x46a>
 800182c:	e02f      	b.n	800188e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_RCC_OscConfig+0x4fc>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff f858 	bl	80008e8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f854 	bl	80008e8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e020      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x498>
 800185a:	e018      	b.n	800188e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e013      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	429a      	cmp	r2, r3
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	40007000 	.word	0x40007000
 80018a0:	42420060 	.word	0x42420060

080018a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0d0      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d910      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 0207 	bic.w	r2, r3, #7
 80018ce:	4965      	ldr	r1, [pc, #404]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0b8      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800190a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001922:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	494d      	ldr	r1, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d040      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d115      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e07f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e073      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06b      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4936      	ldr	r1, [pc, #216]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7fe ffa8 	bl	80008e8 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7fe ffa4 	bl	80008e8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e053      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d210      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4922      	ldr	r1, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a32:	f000 f821 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	490a      	ldr	r1, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1cc>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1d0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe ff06 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	08002760 	.word	0x08002760
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b490      	push	{r4, r7}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a80:	1d3c      	adds	r4, r7, #4
 8001a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a88:	f240 2301 	movw	r3, #513	; 0x201
 8001a8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x46>
 8001ab6:	e02d      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aba:	623b      	str	r3, [r7, #32]
      break;
 8001abc:	e02d      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	0c9b      	lsrs	r3, r3, #18
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aca:	4413      	add	r3, r2
 8001acc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ad0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0c5b      	lsrs	r3, r3, #17
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aea:	4413      	add	r3, r2
 8001aec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001af0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af6:	fb02 f203 	mul.w	r2, r2, r3
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	e004      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	623b      	str	r3, [r7, #32]
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b16:	623b      	str	r3, [r7, #32]
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3728      	adds	r7, #40	; 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc90      	pop	{r4, r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	08002750 	.word	0x08002750
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	007a1200 	.word	0x007a1200
 8001b34:	003d0900 	.word	0x003d0900

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b50:	f7ff fff2 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08002770 	.word	0x08002770

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	0adb      	lsrs	r3, r3, #11
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08002770 	.word	0x08002770

08001b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <RCC_Delay+0x34>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <RCC_Delay+0x38>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0a5b      	lsrs	r3, r3, #9
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bb8:	bf00      	nop
  }
  while (Delay --);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e5a      	subs	r2, r3, #1
 8001bbe:	60fa      	str	r2, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f9      	bne.n	8001bb8 <RCC_Delay+0x1c>
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	10624dd3 	.word	0x10624dd3

08001bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e03f      	b.n	8001c6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fbc0 	bl	8000384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2224      	movs	r2, #36	; 0x24
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fcbf 	bl	80025a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d13c      	bne.n	8001d06 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e035      	b.n	8001d08 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e02e      	b.n	8001d08 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 faa4 	bl	800220c <UART_Start_Receive_DMA>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d113      	bne.n	8001cfe <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0210 	orr.w	r2, r2, #16
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	e001      	b.n	8001d02 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	e000      	b.n	8001d08 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
  }
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_UART_IRQHandler+0x52>
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fb76 	bl	800244c <UART_Receive_IT>
      return;
 8001d60:	e17b      	b.n	800205a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80b1 	beq.w	8001ecc <HAL_UART_IRQHandler+0x1bc>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_UART_IRQHandler+0x70>
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80a6 	beq.w	8001ecc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_UART_IRQHandler+0x90>
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_UART_IRQHandler+0xb0>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f043 0202 	orr.w	r2, r3, #2
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <HAL_UART_IRQHandler+0xd0>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0204 	orr.w	r2, r3, #4
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00f      	beq.n	8001e0a <HAL_UART_IRQHandler+0xfa>
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <HAL_UART_IRQHandler+0xee>
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f043 0208 	orr.w	r2, r3, #8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 811e 	beq.w	8002050 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <HAL_UART_IRQHandler+0x11e>
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fb0f 	bl	800244c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <HAL_UART_IRQHandler+0x146>
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d031      	beq.n	8001eba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fa51 	bl	80022fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d023      	beq.n	8001eb2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d013      	beq.n	8001eaa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	4a76      	ldr	r2, [pc, #472]	; (8002060 <HAL_UART_IRQHandler+0x350>)
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe ff5a 	bl	8000d48 <HAL_DMA_Abort_IT>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d016      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea8:	e00e      	b.n	8001ec8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8f5 	bl	800209a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb0:	e00a      	b.n	8001ec8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8f1 	bl	800209a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb8:	e006      	b.n	8001ec8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8ed 	bl	800209a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001ec6:	e0c3      	b.n	8002050 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec8:	bf00      	nop
    return;
 8001eca:	e0c1      	b.n	8002050 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 80a1 	bne.w	8002018 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 809b 	beq.w	8002018 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8095 	beq.w	8002018 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04e      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001f1c:	8a3b      	ldrh	r3, [r7, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8098 	beq.w	8002054 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f28:	8a3a      	ldrh	r2, [r7, #16]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	f080 8092 	bcs.w	8002054 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	8a3a      	ldrh	r2, [r7, #16]
 8001f34:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d02b      	beq.n	8001f98 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f4e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0210 	bic.w	r2, r2, #16
 8001f8c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fe9d 	bl	8000cd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7fe fb81 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001fae:	e051      	b.n	8002054 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d047      	beq.n	8002058 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001fc8:	8a7b      	ldrh	r3, [r7, #18]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d044      	beq.n	8002058 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001fdc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0210 	bic.w	r2, r2, #16
 800200a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800200c:	8a7b      	ldrh	r3, [r7, #18]
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7fe fb4d 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002016:	e01f      	b.n	8002058 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_UART_IRQHandler+0x324>
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9a6 	bl	800237e <UART_Transmit_IT>
    return;
 8002032:	e012      	b.n	800205a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <HAL_UART_IRQHandler+0x34a>
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f9e7 	bl	800241c <UART_EndTransmit_IT>
    return;
 800204e:	e004      	b.n	800205a <HAL_UART_IRQHandler+0x34a>
    return;
 8002050:	bf00      	nop
 8002052:	e002      	b.n	800205a <HAL_UART_IRQHandler+0x34a>
      return;
 8002054:	bf00      	nop
 8002056:	e000      	b.n	800205a <HAL_UART_IRQHandler+0x34a>
      return;
 8002058:	bf00      	nop
  }
}
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	08002357 	.word	0x08002357

08002064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d12a      	bne.n	800211e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020dc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0210 	bic.w	r2, r2, #16
 800211c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	2b01      	cmp	r3, #1
 8002124:	d106      	bne.n	8002134 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800212a:	4619      	mov	r1, r3
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7fe fabf 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002132:	e002      	b.n	800213a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff ff9e 	bl	8002076 <HAL_UART_RxCpltCallback>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	2b01      	cmp	r3, #1
 8002156:	d108      	bne.n	800216a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	4619      	mov	r1, r3
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7fe faa4 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002168:	e002      	b.n	8002170 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff ff8c 	bl	8002088 <HAL_UART_RxHalfCpltCallback>
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b21      	cmp	r3, #33	; 0x21
 80021aa:	d108      	bne.n	80021be <UART_DMAError+0x46>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2200      	movs	r2, #0
 80021b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f000 f88b 	bl	80022d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b22      	cmp	r3, #34	; 0x22
 80021de:	d108      	bne.n	80021f2 <UART_DMAError+0x7a>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2200      	movs	r2, #0
 80021ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80021ec:	68b8      	ldr	r0, [r7, #8]
 80021ee:	f000 f886 	bl	80022fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021fe:	68b8      	ldr	r0, [r7, #8]
 8002200:	f7ff ff4b 	bl	800209a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2222      	movs	r2, #34	; 0x22
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002238:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <UART_Start_Receive_DMA+0xbc>)
 800223a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	4a22      	ldr	r2, [pc, #136]	; (80022cc <UART_Start_Receive_DMA+0xc0>)
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <UART_Start_Receive_DMA+0xc4>)
 800224a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	2200      	movs	r2, #0
 8002252:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	f7fe fcd2 	bl	8000c14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800229c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	080020ad 	.word	0x080020ad
 80022cc:	08002143 	.word	0x08002143
 80022d0:	08002179 	.word	0x08002179

080022d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002314:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0210 	bic.w	r2, r2, #16
 800233c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f7ff fe92 	bl	800209a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b21      	cmp	r3, #33	; 0x21
 8002390:	d13e      	bne.n	8002410 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	d114      	bne.n	80023c6 <UART_Transmit_IT+0x48>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d110      	bne.n	80023c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	1c9a      	adds	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	621a      	str	r2, [r3, #32]
 80023c4:	e008      	b.n	80023d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6211      	str	r1, [r2, #32]
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4619      	mov	r1, r3
 80023e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10f      	bne.n	800240c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002432:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fe11 	bl	8002064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b22      	cmp	r3, #34	; 0x22
 800245e:	f040 8099 	bne.w	8002594 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246a:	d117      	bne.n	800249c <UART_Receive_IT+0x50>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d113      	bne.n	800249c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	b29b      	uxth	r3, r3
 8002486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248a:	b29a      	uxth	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	1c9a      	adds	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
 800249a:	e026      	b.n	80024ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ae:	d007      	beq.n	80024c0 <UART_Receive_IT+0x74>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <UART_Receive_IT+0x82>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d106      	bne.n	80024ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e008      	b.n	80024e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4619      	mov	r1, r3
 80024f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d148      	bne.n	8002590 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0220 	bic.w	r2, r2, #32
 800250c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800251c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	2b01      	cmp	r3, #1
 800253c:	d123      	bne.n	8002586 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0210 	bic.w	r2, r2, #16
 8002552:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d10a      	bne.n	8002578 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe f896 	bl	80006b0 <HAL_UARTEx_RxEventCallback>
 8002584:	e002      	b.n	800258c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fd75 	bl	8002076 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e002      	b.n	8002596 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025da:	f023 030c 	bic.w	r3, r3, #12
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <UART_SetConfig+0x114>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d103      	bne.n	8002610 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002608:	f7ff fab4 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	e002      	b.n	8002616 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002610:	f7ff fa9c 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8002614:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <UART_SetConfig+0x118>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	0119      	lsls	r1, r3, #4
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fbb2 f2f3 	udiv	r2, r2, r3
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <UART_SetConfig+0x118>)
 800264e:	fba3 0302 	umull	r0, r3, r3, r2
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2064      	movs	r0, #100	; 0x64
 8002656:	fb00 f303 	mul.w	r3, r0, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	3332      	adds	r3, #50	; 0x32
 8002660:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <UART_SetConfig+0x118>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266c:	4419      	add	r1, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fbb2 f2f3 	udiv	r2, r2, r3
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <UART_SetConfig+0x118>)
 8002686:	fba3 0302 	umull	r0, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2064      	movs	r0, #100	; 0x64
 800268e:	fb00 f303 	mul.w	r3, r0, r3
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	3332      	adds	r3, #50	; 0x32
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <UART_SetConfig+0x118>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	440a      	add	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40013800 	.word	0x40013800
 80026b8:	51eb851f 	.word	0x51eb851f

080026bc <__libc_init_array>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	2600      	movs	r6, #0
 80026c0:	4d0c      	ldr	r5, [pc, #48]	; (80026f4 <__libc_init_array+0x38>)
 80026c2:	4c0d      	ldr	r4, [pc, #52]	; (80026f8 <__libc_init_array+0x3c>)
 80026c4:	1b64      	subs	r4, r4, r5
 80026c6:	10a4      	asrs	r4, r4, #2
 80026c8:	42a6      	cmp	r6, r4
 80026ca:	d109      	bne.n	80026e0 <__libc_init_array+0x24>
 80026cc:	f000 f830 	bl	8002730 <_init>
 80026d0:	2600      	movs	r6, #0
 80026d2:	4d0a      	ldr	r5, [pc, #40]	; (80026fc <__libc_init_array+0x40>)
 80026d4:	4c0a      	ldr	r4, [pc, #40]	; (8002700 <__libc_init_array+0x44>)
 80026d6:	1b64      	subs	r4, r4, r5
 80026d8:	10a4      	asrs	r4, r4, #2
 80026da:	42a6      	cmp	r6, r4
 80026dc:	d105      	bne.n	80026ea <__libc_init_array+0x2e>
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e4:	4798      	blx	r3
 80026e6:	3601      	adds	r6, #1
 80026e8:	e7ee      	b.n	80026c8 <__libc_init_array+0xc>
 80026ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ee:	4798      	blx	r3
 80026f0:	3601      	adds	r6, #1
 80026f2:	e7f2      	b.n	80026da <__libc_init_array+0x1e>
 80026f4:	08002778 	.word	0x08002778
 80026f8:	08002778 	.word	0x08002778
 80026fc:	08002778 	.word	0x08002778
 8002700:	0800277c 	.word	0x0800277c

08002704 <memcpy>:
 8002704:	440a      	add	r2, r1
 8002706:	4291      	cmp	r1, r2
 8002708:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800270c:	d100      	bne.n	8002710 <memcpy+0xc>
 800270e:	4770      	bx	lr
 8002710:	b510      	push	{r4, lr}
 8002712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002716:	4291      	cmp	r1, r2
 8002718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800271c:	d1f9      	bne.n	8002712 <memcpy+0xe>
 800271e:	bd10      	pop	{r4, pc}

08002720 <memset>:
 8002720:	4603      	mov	r3, r0
 8002722:	4402      	add	r2, r0
 8002724:	4293      	cmp	r3, r2
 8002726:	d100      	bne.n	800272a <memset+0xa>
 8002728:	4770      	bx	lr
 800272a:	f803 1b01 	strb.w	r1, [r3], #1
 800272e:	e7f9      	b.n	8002724 <memset+0x4>

08002730 <_init>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	bf00      	nop
 8002734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002736:	bc08      	pop	{r3}
 8002738:	469e      	mov	lr, r3
 800273a:	4770      	bx	lr

0800273c <_fini>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr
