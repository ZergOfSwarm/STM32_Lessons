
SEGGER_ISR_Print_767_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e30  08008e30  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e38  08008e38  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e3c  08008e3c  00018e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f64  20000078  08008eb8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005fdc  08008eb8  00025fdc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026ce0  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045b7  00000000  00000000  00046d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  0004b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  0004d008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053e5  00000000  00000000  0004eb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211ad  00000000  00000000  00053eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ecc9  00000000  00000000  0007509a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183d63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d88  00000000  00000000  00183db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08008c18 	.word	0x08008c18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08008c18 	.word	0x08008c18

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	20005604 	.word	0x20005604

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	hMenuButton.buttonFlag.data = RESET; //Flag reset
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <main+0x6c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	719a      	strb	r2, [r3, #6]

	SEGGER_SYSVIEW_Conf();
 80005e2:	f006 fc91 	bl	8006f08 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fd58 	bl	800109a <HAL_Init>

  /* USER CODE BEGIN Init */
	T = HAL_GetTick();
 80005ea:	f000 fd77 	bl	80010dc <HAL_GetTick>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a15      	ldr	r2, [pc, #84]	; (8000648 <main+0x70>)
 80005f2:	6013      	str	r3, [r2, #0]
	flag = 1;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <main+0x74>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f83b 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f907 	bl	8000810 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f8a7 	bl	8000754 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000606:	f000 f8d5 	bl	80007b4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060a:	f003 fdaf 	bl	800416c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <main+0x78>)
 8000610:	2100      	movs	r1, #0
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <main+0x7c>)
 8000614:	f003 fe14 	bl	8004240 <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <main+0x80>)
 800061c:	6013      	str	r3, [r2, #0]

  /* creation of myTask_ON */
  myTask_ONHandle = osThreadNew(StartTask_ON, NULL, &myTask_ON_attributes);
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <main+0x84>)
 8000620:	2100      	movs	r1, #0
 8000622:	480f      	ldr	r0, [pc, #60]	; (8000660 <main+0x88>)
 8000624:	f003 fe0c 	bl	8004240 <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <main+0x8c>)
 800062c:	6013      	str	r3, [r2, #0]

  /* creation of myTask_OFF */
  myTask_OFFHandle = osThreadNew(StartTask_OFF, NULL, &myTask_OFF_attributes);
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <main+0x90>)
 8000630:	2100      	movs	r1, #0
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <main+0x94>)
 8000634:	f003 fe04 	bl	8004240 <osThreadNew>
 8000638:	4603      	mov	r3, r0
 800063a:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0x98>)
 800063c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063e:	f003 fdc9 	bl	80041d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x6a>
 8000644:	20000af8 	.word	0x20000af8
 8000648:	20000098 	.word	0x20000098
 800064c:	20000094 	.word	0x20000094
 8000650:	08008d24 	.word	0x08008d24
 8000654:	08000ad5 	.word	0x08000ad5
 8000658:	2000062c 	.word	0x2000062c
 800065c:	08008d48 	.word	0x08008d48
 8000660:	08000be5 	.word	0x08000be5
 8000664:	20000630 	.word	0x20000630
 8000668:	08008d6c 	.word	0x08008d6c
 800066c:	08000c39 	.word	0x08000c39
 8000670:	20000634 	.word	0x20000634

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2234      	movs	r2, #52	; 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f008 f9fe 	bl	8008a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000698:	f001 f996 	bl	80019c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <SystemClock_Config+0xd8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a2a      	ldr	r2, [pc, #168]	; (800074c <SystemClock_Config+0xd8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0xd8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <SystemClock_Config+0xdc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a25      	ldr	r2, [pc, #148]	; (8000750 <SystemClock_Config+0xdc>)
 80006ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <SystemClock_Config+0xdc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006e4:	23d8      	movs	r3, #216	; 0xd8
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ec:	2309      	movs	r3, #9
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f9c5 	bl	8001a88 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 fad0 	bl	8000ca8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000708:	f001 f96e 	bl	80019e8 <HAL_PWREx_EnableOverDrive>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000712:	f000 fac9 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	2107      	movs	r1, #7
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fc55 	bl	8001fe4 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000740:	f000 fab2 	bl	8000ca8 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	; 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART3_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART3_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART3_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART3_UART_Init+0x58>)
 8000798:	f002 fd84 	bl	80032a4 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 fa81 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000009c 	.word	0x2000009c
 80007b0:	40004800 	.word	0x40004800

080007b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2206      	movs	r2, #6
 80007c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2201      	movs	r2, #1
 80007dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	f000 ff9d 	bl	8001736 <HAL_PCD_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 fa51 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000124 	.word	0x20000124

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b77      	ldr	r3, [pc, #476]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a76      	ldr	r2, [pc, #472]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b74      	ldr	r3, [pc, #464]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b71      	ldr	r3, [pc, #452]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a70      	ldr	r2, [pc, #448]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b6e      	ldr	r3, [pc, #440]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b6b      	ldr	r3, [pc, #428]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a6a      	ldr	r2, [pc, #424]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b68      	ldr	r3, [pc, #416]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b65      	ldr	r3, [pc, #404]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b62      	ldr	r3, [pc, #392]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b5f      	ldr	r3, [pc, #380]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a5e      	ldr	r2, [pc, #376]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b5c      	ldr	r3, [pc, #368]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	4b59      	ldr	r3, [pc, #356]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <MX_GPIO_Init+0x1f4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008bc:	4852      	ldr	r0, [pc, #328]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 80008be:	f000 fee3 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	4851      	ldr	r0, [pc, #324]	; (8000a0c <MX_GPIO_Init+0x1fc>)
 80008c8:	f000 fede 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	484b      	ldr	r0, [pc, #300]	; (8000a10 <MX_GPIO_Init+0x200>)
 80008e4:	f000 fd0c 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008e8:	2332      	movs	r3, #50	; 0x32
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f8:	230b      	movs	r3, #11
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4843      	ldr	r0, [pc, #268]	; (8000a10 <MX_GPIO_Init+0x200>)
 8000904:	f000 fcfc 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000908:	2386      	movs	r3, #134	; 0x86
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000918:	230b      	movs	r3, #11
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	483c      	ldr	r0, [pc, #240]	; (8000a14 <MX_GPIO_Init+0x204>)
 8000924:	f000 fcec 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000928:	f244 0381 	movw	r3, #16513	; 0x4081
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4831      	ldr	r0, [pc, #196]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000942:	f000 fcdd 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000958:	230b      	movs	r3, #11
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4829      	ldr	r0, [pc, #164]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 8000964:	f000 fccc 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4823      	ldr	r0, [pc, #140]	; (8000a0c <MX_GPIO_Init+0x1fc>)
 8000980:	f000 fcbe 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	481d      	ldr	r0, [pc, #116]	; (8000a0c <MX_GPIO_Init+0x1fc>)
 8000998:	f000 fcb2 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800099c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ae:	230b      	movs	r3, #11
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <MX_GPIO_Init+0x1fc>)
 80009ba:	f000 fca1 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : menu_button_Pin */
  GPIO_InitStruct.Pin = menu_button_Pin;
 80009be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(menu_button_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_GPIO_Init+0x1f8>)
 80009d6:	f000 fc93 	bl	8001300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2017      	movs	r0, #23
 80009e0:	f000 fc64 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009e4:	2017      	movs	r0, #23
 80009e6:	f000 fc7d 	bl	80012e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2105      	movs	r1, #5
 80009ee:	2028      	movs	r0, #40	; 0x28
 80009f0:	f000 fc5c 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f4:	2028      	movs	r0, #40	; 0x28
 80009f6:	f000 fc75 	bl	80012e4 <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	40021800 	.word	0x40021800
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020000 	.word	0x40020000

08000a18 <MenuButton_Debounce>:

/* USER CODE BEGIN 4 */
uint8_t MenuButton_Debounce(void) //Menu Button debounce function
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	uint8_t 		ret = DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
	static uint16_t Level = Restart_Level;
	if(!HAL_GPIO_ReadPin(menu_button_GPIO_Port, menu_button_Pin))
 8000a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a26:	4816      	ldr	r0, [pc, #88]	; (8000a80 <MenuButton_Debounce+0x68>)
 8000a28:	f000 fe16 	bl	8001658 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d106      	bne.n	8000a40 <MenuButton_Debounce+0x28>
	{
		++Level;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MenuButton_Debounce+0x6c>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MenuButton_Debounce+0x6c>)
 8000a3c:	801a      	strh	r2, [r3, #0]
 8000a3e:	e00e      	b.n	8000a5e <MenuButton_Debounce+0x46>
	}
	else
	{
		--Level;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MenuButton_Debounce+0x6c>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MenuButton_Debounce+0x6c>)
 8000a4a:	801a      	strh	r2, [r3, #0]
		if(Level <= Restart_Level)
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MenuButton_Debounce+0x6c>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a54:	d803      	bhi.n	8000a5e <MenuButton_Debounce+0x46>
		{
			Level = Restart_Level;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MenuButton_Debounce+0x6c>)
 8000a58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a5c:	801a      	strh	r2, [r3, #0]
		}
	}
	if(Level >= 4000)
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MenuButton_Debounce+0x6c>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000a66:	d305      	bcc.n	8000a74 <MenuButton_Debounce+0x5c>
	{
		Level = Acceptance_Level;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MenuButton_Debounce+0x6c>)
 8000a6a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a6e:	801a      	strh	r2, [r3, #0]
		ret = ENABLE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	71fb      	strb	r3, [r7, #7]
	}
	return ret;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020400 	.word	0x40020400
 8000a84:	20000000 	.word	0x20000000

08000a88 <setTimer>:

void setTimer(uint32_t* timer)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	*timer = HAL_GetTick();
 8000a90:	f000 fb24 	bl	80010dc <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <checkTimer>:
uint8_t checkTimer(uint32_t* timer, uint32_t msTime)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
	uint8_t ret = RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
	ret = ((HAL_GetTick() - *timer) > msTime)  ? ENABLE : DISABLE;
 8000ab0:	f000 fb14 	bl	80010dc <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	bf34      	ite	cc
 8000ac2:	2301      	movcc	r3, #1
 8000ac4:	2300      	movcs	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(hMenuButton.buttonFlag.bit.B0)
 8000adc:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <StartDefaultTask+0x108>)
 8000ade:	799b      	ldrb	r3, [r3, #6]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d01d      	beq.n	8000b26 <StartDefaultTask+0x52>
		  {
			  if(MenuButton_Debounce())											//Apply de-bounce algorithm before taking any action
 8000aea:	f7ff ff95 	bl	8000a18 <MenuButton_Debounce>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d018      	beq.n	8000b26 <StartDefaultTask+0x52>
			  {
				  hMenuButton.buttonFlag.bit.B0 = RESET;						//Reset interrupt flag
 8000af4:	4a39      	ldr	r2, [pc, #228]	; (8000bdc <StartDefaultTask+0x108>)
 8000af6:	7993      	ldrb	r3, [r2, #6]
 8000af8:	f36f 0300 	bfc	r3, #0, #1
 8000afc:	7193      	strb	r3, [r2, #6]

				  if(hMenuButton.buttonTimerEnable != SET)						//Start timer when the menu button gets pressed for the first time
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <StartDefaultTask+0x108>)
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	f083 0301 	eor.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d009      	beq.n	8000b20 <StartDefaultTask+0x4c>
				  {
					  hMenuButton.buttonTimerEnable = SET;						//Enable software timer
 8000b0c:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <StartDefaultTask+0x108>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	711a      	strb	r2, [r3, #4]
					  hMenuButton.buttonStatus = MenuButtonStatus_oneClick;		//The menu button has been pressed for one time
 8000b12:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <StartDefaultTask+0x108>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	715a      	strb	r2, [r3, #5]
					  setTimer(&hMenuButton.buttonTimer);						//Start software timer
 8000b18:	4830      	ldr	r0, [pc, #192]	; (8000bdc <StartDefaultTask+0x108>)
 8000b1a:	f7ff ffb5 	bl	8000a88 <setTimer>
 8000b1e:	e002      	b.n	8000b26 <StartDefaultTask+0x52>
				  }
				  else
				  {
					  hMenuButton.buttonStatus = MenuButtonStatus_doubleClick;	//If the timer is already started this means that the button is pressed for the second time
 8000b20:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <StartDefaultTask+0x108>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	715a      	strb	r2, [r3, #5]
				  }
			  }
		  }
		  if((checkTimer(&hMenuButton.buttonTimer, 5 * hMenuButton.buttonHeldPressedCounter)) && ( hMenuButton.buttonStatus == MenuButtonStatus_oneClick))
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <StartDefaultTask+0x108>)
 8000b28:	79db      	ldrb	r3, [r3, #7]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	4619      	mov	r1, r3
 8000b34:	4829      	ldr	r0, [pc, #164]	; (8000bdc <StartDefaultTask+0x108>)
 8000b36:	f7ff ffb4 	bl	8000aa2 <checkTimer>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d01b      	beq.n	8000b78 <StartDefaultTask+0xa4>
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <StartDefaultTask+0x108>)
 8000b42:	795b      	ldrb	r3, [r3, #5]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d117      	bne.n	8000b78 <StartDefaultTask+0xa4>
		  {																		//If the menu button has been pressed, take logic sample every 10 ms from the button read pin
			  if(!HAL_GPIO_ReadPin(menu_button_GPIO_Port, menu_button_Pin))		//To check if the button is still pressed
 8000b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <StartDefaultTask+0x10c>)
 8000b4e:	f000 fd83 	bl	8001658 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d105      	bne.n	8000b64 <StartDefaultTask+0x90>
			  {
				  ++hMenuButton.buttonHeldPressedCounter;						//Increment samples number
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <StartDefaultTask+0x108>)
 8000b5a:	79db      	ldrb	r3, [r3, #7]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <StartDefaultTask+0x108>)
 8000b62:	71da      	strb	r2, [r3, #7]
			  }
			  hMenuButton.buttonStatus = (hMenuButton.buttonHeldPressedCounter >= 65)  ? MenuButtonStatus_heldPressed : hMenuButton.buttonStatus;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <StartDefaultTask+0x108>)
 8000b66:	79db      	ldrb	r3, [r3, #7]
 8000b68:	2b40      	cmp	r3, #64	; 0x40
 8000b6a:	d802      	bhi.n	8000b72 <StartDefaultTask+0x9e>
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <StartDefaultTask+0x108>)
 8000b6e:	795b      	ldrb	r3, [r3, #5]
 8000b70:	e000      	b.n	8000b74 <StartDefaultTask+0xa0>
 8000b72:	2302      	movs	r3, #2
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <StartDefaultTask+0x108>)
 8000b76:	7153      	strb	r3, [r2, #5]
		  }																		//If the button is held pressed change button status
		  if((checkTimer(&hMenuButton.buttonTimer, 350)) && hMenuButton.buttonTimerEnable)
 8000b78:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000b7c:	4817      	ldr	r0, [pc, #92]	; (8000bdc <StartDefaultTask+0x108>)
 8000b7e:	f7ff ff90 	bl	8000aa2 <checkTimer>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0a9      	beq.n	8000adc <StartDefaultTask+0x8>
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <StartDefaultTask+0x108>)
 8000b8a:	791b      	ldrb	r3, [r3, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0a5      	beq.n	8000adc <StartDefaultTask+0x8>
		  {																		//Take decision after 300 ms whether one click, double click or held pressed event has occured
			  switch(hMenuButton.buttonStatus)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <StartDefaultTask+0x108>)
 8000b92:	795b      	ldrb	r3, [r3, #5]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d816      	bhi.n	8000bc6 <StartDefaultTask+0xf2>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <StartDefaultTask+0xcc>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bb1 	.word	0x08000bb1
 8000ba4:	08000bc7 	.word	0x08000bc7
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bc7 	.word	0x08000bc7
			  {
			  	  case	MenuButtonStatus_oneClick:
			  		//printf("oneClick \r\n");
			  		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // Red
 8000bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb4:	480a      	ldr	r0, [pc, #40]	; (8000be0 <StartDefaultTask+0x10c>)
 8000bb6:	f000 fd80 	bl	80016ba <HAL_GPIO_TogglePin>
			  		  break;
 8000bba:	e004      	b.n	8000bc6 <StartDefaultTask+0xf2>
			  	  case 	MenuButtonStatus_doubleClick:
			  		//printf("doubleClick \r\n");
			  		 break;
			  	  case MenuButtonStatus_heldPressed:
			  		//printf("heldPressed \r\n");
			  		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); // Green
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <StartDefaultTask+0x10c>)
 8000bc0:	f000 fd7b 	bl	80016ba <HAL_GPIO_TogglePin>
			  		 break;
 8000bc4:	bf00      	nop
			  	case MenuButtonStatus_notPressed:
			  		 break;

			  }
			  hMenuButton.buttonTimerEnable 		= RESET;					//Disable software timer
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <StartDefaultTask+0x108>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	711a      	strb	r2, [r3, #4]
			  hMenuButton.buttonHeldPressedCounter 	= RESET;					//Reset counter
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <StartDefaultTask+0x108>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	71da      	strb	r2, [r3, #7]
			  hMenuButton.buttonStatus 				= MenuButtonStatus_notPressed;
 8000bd2:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <StartDefaultTask+0x108>)
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	715a      	strb	r2, [r3, #5]
	  if(hMenuButton.buttonFlag.bit.B0)
 8000bd8:	e780      	b.n	8000adc <StartDefaultTask+0x8>
 8000bda:	bf00      	nop
 8000bdc:	20000af8 	.word	0x20000af8
 8000be0:	40020400 	.word	0x40020400

08000be4 <StartTask_ON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_ON */
void StartTask_ON(void *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_ON */
  /* Infinite loop */
  for(;;)
  {
		if (flag == 0) {
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <StartTask_ON+0x48>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f083 0301 	eor.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00f      	beq.n	8000c1a <StartTask_ON+0x36>
			if (HAL_GetTick() - T >= 250) {
 8000bfa:	f000 fa6f 	bl	80010dc <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <StartTask_ON+0x4c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2bf9      	cmp	r3, #249	; 0xf9
 8000c08:	d907      	bls.n	8000c1a <StartTask_ON+0x36>
				flag = 1;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <StartTask_ON+0x48>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 8000c10:	f000 fa64 	bl	80010dc <HAL_GetTick>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <StartTask_ON+0x4c>)
 8000c18:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, flag);// Blue
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <StartTask_ON+0x48>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <StartTask_ON+0x50>)
 8000c24:	f000 fd30 	bl	8001688 <HAL_GPIO_WritePin>
		if (flag == 0) {
 8000c28:	e7e0      	b.n	8000bec <StartTask_ON+0x8>
 8000c2a:	bf00      	nop
 8000c2c:	20000094 	.word	0x20000094
 8000c30:	20000098 	.word	0x20000098
 8000c34:	40020400 	.word	0x40020400

08000c38 <StartTask_OFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_OFF */
void StartTask_OFF(void *argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_OFF */
  /* Infinite loop */
  for(;;)
  {
		if (flag == 1) {
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <StartTask_OFF+0x40>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00f      	beq.n	8000c68 <StartTask_OFF+0x30>
			if (HAL_GetTick() - T >= 250) {
 8000c48:	f000 fa48 	bl	80010dc <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <StartTask_OFF+0x44>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2bf9      	cmp	r3, #249	; 0xf9
 8000c56:	d907      	bls.n	8000c68 <StartTask_OFF+0x30>
				flag = 0;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <StartTask_OFF+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 8000c5e:	f000 fa3d 	bl	80010dc <HAL_GetTick>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <StartTask_OFF+0x44>)
 8000c66:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, flag);// Blue
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <StartTask_OFF+0x40>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <StartTask_OFF+0x48>)
 8000c72:	f000 fd09 	bl	8001688 <HAL_GPIO_WritePin>
		if (flag == 1) {
 8000c76:	e7e3      	b.n	8000c40 <StartTask_OFF+0x8>
 8000c78:	20000094 	.word	0x20000094
 8000c7c:	20000098 	.word	0x20000098
 8000c80:	40020400 	.word	0x40020400

08000c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c96:	f000 fa0d 	bl	80010b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40002000 	.word	0x40002000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	210f      	movs	r1, #15
 8000cee:	f06f 0001 	mvn.w	r0, #1
 8000cf2:	f000 fadb 	bl	80012ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ae      	sub	sp, #184	; 0xb8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2290      	movs	r2, #144	; 0x90
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f007 fead 	bl	8008a84 <memset>
  if(huart->Instance==USART3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_UART_MspInit+0xb4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d13c      	bne.n	8000dae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fba6 	bl	8002494 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4e:	f7ff ffab 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_UART_MspInit+0xb8>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_UART_MspInit+0xb8>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0xb8>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0xb8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_UART_MspInit+0xb8>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0xb8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0xbc>)
 8000daa:	f000 faa9 	bl	8001300 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	37b8      	adds	r7, #184	; 0xb8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004800 	.word	0x40004800
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020c00 	.word	0x40020c00

08000dc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ae      	sub	sp, #184	; 0xb8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2290      	movs	r2, #144	; 0x90
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f007 fe4d 	bl	8008a84 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df2:	d159      	bne.n	8000ea8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000df4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000df8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fb45 	bl	8002494 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e10:	f7ff ff4a 	bl	8000ca8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e2c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e46:	230a      	movs	r3, #10
 8000e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <HAL_PCD_MspInit+0xf0>)
 8000e54:	f000 fa54 	bl	8001300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <HAL_PCD_MspInit+0xf0>)
 8000e74:	f000 fa44 	bl	8001300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e82:	6353      	str	r3, [r2, #52]	; 0x34
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	37b8      	adds	r7, #184	; 0xb8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	; 0x38
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <HAL_InitTick+0xe0>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <HAL_InitTick+0xe0>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <HAL_InitTick+0xe0>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee0:	f107 0210 	add.w	r2, r7, #16
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 faa0 	bl	8002430 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000efa:	f001 fa71 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8000efe:	6378      	str	r0, [r7, #52]	; 0x34
 8000f00:	e004      	b.n	8000f0c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f02:	f001 fa6d 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8000f06:	4603      	mov	r3, r0
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <HAL_InitTick+0xe4>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	0c9b      	lsrs	r3, r3, #18
 8000f16:	3b01      	subs	r3, #1
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_InitTick+0xe8>)
 8000f1c:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <HAL_InitTick+0xec>)
 8000f1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <HAL_InitTick+0xe8>)
 8000f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f26:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000f28:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <HAL_InitTick+0xe8>)
 8000f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_InitTick+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_InitTick+0xe8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_InitTick+0xe8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000f40:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <HAL_InitTick+0xe8>)
 8000f42:	f001 fecf 	bl	8002ce4 <HAL_TIM_Base_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d11b      	bne.n	8000f8c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000f54:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <HAL_InitTick+0xe8>)
 8000f56:	f001 ff27 	bl	8002da8 <HAL_TIM_Base_Start_IT>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d111      	bne.n	8000f8c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f68:	202d      	movs	r0, #45	; 0x2d
 8000f6a:	f000 f9bb 	bl	80012e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d808      	bhi.n	8000f86 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	202d      	movs	r0, #45	; 0x2d
 8000f7a:	f000 f997 	bl	80012ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_InitTick+0xf0>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e002      	b.n	8000f8c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3738      	adds	r7, #56	; 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	20000b00 	.word	0x20000b00
 8000fa4:	40002000 	.word	0x40002000
 8000fa8:	20000008 	.word	0x20000008

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	hMenuButton.buttonFlag.bit.B0 = SET; //Flag bit0 is set for interrupt detection flag
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <EXTI9_5_IRQHandler+0x24>)
 8000fde:	7993      	ldrb	r3, [r2, #6]
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	7193      	strb	r3, [r2, #6]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000fe6:	f007 fa05 	bl	80083f4 <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(menu_button_Pin);
 8000fea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fee:	f000 fb7f 	bl	80016f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  SEGGER_SYSVIEW_RecordExitISR();
 8000ff2:	f007 fa41 	bl	8008478 <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000af8 	.word	0x20000af8

08001000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001004:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001008:	f000 fb72 	bl	80016f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001016:	f001 ff3f 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000b00 	.word	0x20000b00

08001024 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001072:	f7ff ffd7 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f007 fcc1 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff faad 	bl	80005d8 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800108c:	08008e40 	.word	0x08008e40
  ldr r2, =_sbss
 8001090:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001094:	20005fdc 	.word	0x20005fdc

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>

0800109a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109e:	2003      	movs	r0, #3
 80010a0:	f000 f8f9 	bl	8001296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a4:	200f      	movs	r0, #15
 80010a6:	f7ff ff07 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010aa:	f7ff fe03 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	20000b4c 	.word	0x20000b4c

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000b4c 	.word	0x20000b4c

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000000c 	.word	0x2000000c

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <__NVIC_SetPriorityGrouping+0x40>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	4313      	orrs	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x40>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	05fa0000 	.word	0x05fa0000

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff4c 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012be:	f7ff ff61 	bl	8001184 <__NVIC_GetPriorityGrouping>
 80012c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	6978      	ldr	r0, [r7, #20]
 80012ca:	f7ff ffb1 	bl	8001230 <NVIC_EncodePriority>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff80 	bl	80011dc <__NVIC_SetPriority>
}
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff54 	bl	80011a0 <__NVIC_EnableIRQ>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	e175      	b.n	800160c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	429a      	cmp	r2, r3
 800133a:	f040 8164 	bne.w	8001606 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d005      	beq.n	8001356 <HAL_GPIO_Init+0x56>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d130      	bne.n	80013b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 0201 	and.w	r2, r3, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d017      	beq.n	80013f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d123      	bne.n	8001448 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0203 	and.w	r2, r3, #3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80be 	beq.w	8001606 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b66      	ldr	r3, [pc, #408]	; (8001624 <HAL_GPIO_Init+0x324>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a65      	ldr	r2, [pc, #404]	; (8001624 <HAL_GPIO_Init+0x324>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_GPIO_Init+0x324>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014a2:	4a61      	ldr	r2, [pc, #388]	; (8001628 <HAL_GPIO_Init+0x328>)
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <HAL_GPIO_Init+0x32c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d037      	beq.n	800153e <HAL_GPIO_Init+0x23e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a57      	ldr	r2, [pc, #348]	; (8001630 <HAL_GPIO_Init+0x330>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d031      	beq.n	800153a <HAL_GPIO_Init+0x23a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a56      	ldr	r2, [pc, #344]	; (8001634 <HAL_GPIO_Init+0x334>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d02b      	beq.n	8001536 <HAL_GPIO_Init+0x236>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a55      	ldr	r2, [pc, #340]	; (8001638 <HAL_GPIO_Init+0x338>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d025      	beq.n	8001532 <HAL_GPIO_Init+0x232>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a54      	ldr	r2, [pc, #336]	; (800163c <HAL_GPIO_Init+0x33c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d01f      	beq.n	800152e <HAL_GPIO_Init+0x22e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a53      	ldr	r2, [pc, #332]	; (8001640 <HAL_GPIO_Init+0x340>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x22a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a52      	ldr	r2, [pc, #328]	; (8001644 <HAL_GPIO_Init+0x344>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x226>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_GPIO_Init+0x348>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x222>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a50      	ldr	r2, [pc, #320]	; (800164c <HAL_GPIO_Init+0x34c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x21e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x350>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x21a>
 8001516:	2309      	movs	r3, #9
 8001518:	e012      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800151a:	230a      	movs	r3, #10
 800151c:	e010      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800151e:	2308      	movs	r3, #8
 8001520:	e00e      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001522:	2307      	movs	r3, #7
 8001524:	e00c      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001526:	2306      	movs	r3, #6
 8001528:	e00a      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800152e:	2304      	movs	r3, #4
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800153e:	2300      	movs	r3, #0
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001550:	4935      	ldr	r1, [pc, #212]	; (8001628 <HAL_GPIO_Init+0x328>)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_GPIO_Init+0x354>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001582:	4a34      	ldr	r2, [pc, #208]	; (8001654 <HAL_GPIO_Init+0x354>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001588:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_GPIO_Init+0x354>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ac:	4a29      	ldr	r2, [pc, #164]	; (8001654 <HAL_GPIO_Init+0x354>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_GPIO_Init+0x354>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d6:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_GPIO_Init+0x354>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_GPIO_Init+0x354>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_GPIO_Init+0x354>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3301      	adds	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b0f      	cmp	r3, #15
 8001610:	f67f ae86 	bls.w	8001320 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40013800 	.word	0x40013800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40021400 	.word	0x40021400
 8001644:	40021800 	.word	0x40021800
 8001648:	40021c00 	.word	0x40021c00
 800164c:	40022000 	.word	0x40022000
 8001650:	40022400 	.word	0x40022400
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e001      	b.n	800167a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016a4:	e003      	b.n	80016ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	041a      	lsls	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	619a      	str	r2, [r3, #24]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4013      	ands	r3, r2
 80016d2:	041a      	lsls	r2, r3, #16
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	400b      	ands	r3, r1
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f806 	bl	8001720 <HAL_GPIO_EXTI_Callback>
  }
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001738:	b08f      	sub	sp, #60	; 0x3c
 800173a:	af0a      	add	r7, sp, #40	; 0x28
 800173c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e116      	b.n	8001976 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fb2e 	bl	8000dc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fa4c 	bl	8003c24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	687e      	ldr	r6, [r7, #4]
 8001794:	466d      	mov	r5, sp
 8001796:	f106 0410 	add.w	r4, r6, #16
 800179a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017aa:	1d33      	adds	r3, r6, #4
 80017ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f002 f9e0 	bl	8003b74 <USB_CoreInit>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0d7      	b.n	8001976 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 fa3a 	bl	8003c46 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e04a      	b.n	800186e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	333d      	adds	r3, #61	; 0x3d
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	333c      	adds	r3, #60	; 0x3c
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	b298      	uxth	r0, r3
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3344      	adds	r3, #68	; 0x44
 8001814:	4602      	mov	r2, r0
 8001816:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	3340      	adds	r3, #64	; 0x40
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3348      	adds	r3, #72	; 0x48
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	334c      	adds	r3, #76	; 0x4c
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3354      	adds	r3, #84	; 0x54
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d3af      	bcc.n	80017d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e044      	b.n	8001908 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018c0:	7bfa      	ldrb	r2, [r7, #15]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	3301      	adds	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3b5      	bcc.n	800187e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	687e      	ldr	r6, [r7, #4]
 800191a:	466d      	mov	r5, sp
 800191c:	f106 0410 	add.w	r4, r6, #16
 8001920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001928:	e894 0003 	ldmia.w	r4, {r0, r1}
 800192c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001930:	1d33      	adds	r3, r6, #4
 8001932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001934:	6838      	ldr	r0, [r7, #0]
 8001936:	f002 f9d3 	bl	8003ce0 <USB_DevInit>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e014      	b.n	8001976 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f80b 	bl	8001980 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fb91 	bl	8004096 <USB_DevDisconnect>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001980 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	10000003 	.word	0x10000003

080019c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40007000 	.word	0x40007000

080019e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a16:	f7ff fb61 	bl	80010dc <HAL_GetTick>
 8001a1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a1c:	e009      	b.n	8001a32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a1e:	f7ff fb5d 	bl	80010dc <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a2c:	d901      	bls.n	8001a32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e022      	b.n	8001a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4c:	f7ff fb46 	bl	80010dc <HAL_GetTick>
 8001a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a52:	e009      	b.n	8001a68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a54:	f7ff fb42 	bl	80010dc <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a62:	d901      	bls.n	8001a68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e007      	b.n	8001a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a74:	d1ee      	bne.n	8001a54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e29b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8087 	beq.w	8001bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aac:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab8:	4b93      	ldr	r3, [pc, #588]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d112      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
 8001ac4:	4b90      	ldr	r3, [pc, #576]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad0:	d10b      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad2:	4b8d      	ldr	r3, [pc, #564]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d06c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x130>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d168      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e275      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x7a>
 8001af4:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a83      	ldr	r2, [pc, #524]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e02e      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x9c>
 8001b0a:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7e      	ldr	r2, [pc, #504]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7b      	ldr	r2, [pc, #492]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e01d      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0xc0>
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a75      	ldr	r2, [pc, #468]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a72      	ldr	r2, [pc, #456]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6e      	ldr	r2, [pc, #440]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6b      	ldr	r2, [pc, #428]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fab8 	bl	80010dc <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fab4 	bl	80010dc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e229      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b61      	ldr	r3, [pc, #388]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0xe8>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff faa4 	bl	80010dc <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff faa0 	bl	80010dc <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e215      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x110>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d069      	beq.n	8001c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc6:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd2:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d11c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x190>
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d116      	bne.n	8001c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_RCC_OscConfig+0x17a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e1e9      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	493d      	ldr	r1, [pc, #244]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	e040      	b.n	8001c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d023      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a38      	ldr	r2, [pc, #224]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fa56 	bl	80010dc <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff fa52 	bl	80010dc <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1c7      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4929      	ldr	r1, [pc, #164]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
 8001c66:	e018      	b.n	8001c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a26      	ldr	r2, [pc, #152]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff fa32 	bl	80010dc <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fa2e 	bl	80010dc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1a3      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d038      	beq.n	8001d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d019      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff fa0f 	bl	80010dc <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fa0b 	bl	80010dc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e180      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x23a>
 8001ce0:	e01a      	b.n	8001d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff f9f5 	bl	80010dc <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f9f1 	bl	80010dc <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d903      	bls.n	8001d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e166      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
 8001d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ee      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a4 	beq.w	8001e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a88      	ldr	r2, [pc, #544]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b86      	ldr	r3, [pc, #536]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4e:	4b83      	ldr	r3, [pc, #524]	; (8001f5c <HAL_RCC_OscConfig+0x4d4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d118      	bne.n	8001d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d5a:	4b80      	ldr	r3, [pc, #512]	; (8001f5c <HAL_RCC_OscConfig+0x4d4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a7f      	ldr	r2, [pc, #508]	; (8001f5c <HAL_RCC_OscConfig+0x4d4>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7ff f9b9 	bl	80010dc <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6e:	f7ff f9b5 	bl	80010dc <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e12a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d80:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x4d4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x31a>
 8001d94:	4b70      	ldr	r3, [pc, #448]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	4a6f      	ldr	r2, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001da0:	e02d      	b.n	8001dfe <HAL_RCC_OscConfig+0x376>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x33c>
 8001daa:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	4a6a      	ldr	r2, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6713      	str	r3, [r2, #112]	; 0x70
 8001db6:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	4a67      	ldr	r2, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc2:	e01c      	b.n	8001dfe <HAL_RCC_OscConfig+0x376>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x35e>
 8001dcc:	4b62      	ldr	r3, [pc, #392]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a61      	ldr	r2, [pc, #388]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	4b5f      	ldr	r3, [pc, #380]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a5e      	ldr	r2, [pc, #376]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x376>
 8001de6:	4b5c      	ldr	r3, [pc, #368]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a5b      	ldr	r2, [pc, #364]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d015      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff f969 	bl	80010dc <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff f965 	bl	80010dc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0d8      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ee      	beq.n	8001e0e <HAL_RCC_OscConfig+0x386>
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff f953 	bl	80010dc <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f94f 	bl	80010dc <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0c2      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ee      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a3c      	ldr	r2, [pc, #240]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80ae 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e78:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d06d      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d14b      	bne.n	8001f24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f920 	bl	80010dc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f91c 	bl	80010dc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e091      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	071b      	lsls	r3, r3, #28
 8001eea:	491b      	ldr	r1, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f8ee 	bl	80010dc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f8ea 	bl	80010dc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e05f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x47c>
 8001f22:	e057      	b.n	8001fd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f8d4 	bl	80010dc <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff f8d0 	bl	80010dc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e045      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4b0>
 8001f56:	e03d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x54c>
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCC_OscConfig+0x558>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d030      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d129      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d122      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d119      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d10f      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d0      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4965      	ldr	r1, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d040      	beq.n	8002108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d115      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e073      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c6:	4b39      	ldr	r3, [pc, #228]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f023 0203 	bic.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4936      	ldr	r1, [pc, #216]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d8:	f7ff f800 	bl	80010dc <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7fe fffc 	bl	80010dc <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e053      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 020c 	and.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d1eb      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d210      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 020f 	bic.w	r2, r3, #15
 800211e:	4922      	ldr	r1, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1d4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fe8e 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	08008d90 	.word	0x08008d90
 80021b4:	20000004 	.word	0x20000004
 80021b8:	20000008 	.word	0x20000008

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c0:	b094      	sub	sp, #80	; 0x50
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
 80021c8:	2300      	movs	r3, #0
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021cc:	2300      	movs	r3, #0
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d00d      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	f200 80e1 	bhi.w	80023a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ee:	e0db      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021f4:	e0db      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f6:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021fa:	e0d8      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002206:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d063      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
 800221c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
 800222a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800222e:	4622      	mov	r2, r4
 8002230:	462b      	mov	r3, r5
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	0159      	lsls	r1, r3, #5
 800223c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002240:	0150      	lsls	r0, r2, #5
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4621      	mov	r1, r4
 8002248:	1a51      	subs	r1, r2, r1
 800224a:	6139      	str	r1, [r7, #16]
 800224c:	4629      	mov	r1, r5
 800224e:	eb63 0301 	sbc.w	r3, r3, r1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002260:	4659      	mov	r1, fp
 8002262:	018b      	lsls	r3, r1, #6
 8002264:	4651      	mov	r1, sl
 8002266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800226a:	4651      	mov	r1, sl
 800226c:	018a      	lsls	r2, r1, #6
 800226e:	4651      	mov	r1, sl
 8002270:	ebb2 0801 	subs.w	r8, r2, r1
 8002274:	4659      	mov	r1, fp
 8002276:	eb63 0901 	sbc.w	r9, r3, r1
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800228e:	4690      	mov	r8, r2
 8002290:	4699      	mov	r9, r3
 8002292:	4623      	mov	r3, r4
 8002294:	eb18 0303 	adds.w	r3, r8, r3
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	462b      	mov	r3, r5
 800229c:	eb49 0303 	adc.w	r3, r9, r3
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ae:	4629      	mov	r1, r5
 80022b0:	024b      	lsls	r3, r1, #9
 80022b2:	4621      	mov	r1, r4
 80022b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022b8:	4621      	mov	r1, r4
 80022ba:	024a      	lsls	r2, r1, #9
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c2:	2200      	movs	r2, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022cc:	f7fe f802 	bl	80002d4 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d8:	e058      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	2200      	movs	r2, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	4611      	mov	r1, r2
 80022e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022f4:	4642      	mov	r2, r8
 80022f6:	464b      	mov	r3, r9
 80022f8:	f04f 0000 	mov.w	r0, #0
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	0159      	lsls	r1, r3, #5
 8002302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002306:	0150      	lsls	r0, r2, #5
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4641      	mov	r1, r8
 800230e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002312:	4649      	mov	r1, r9
 8002314:	eb63 0b01 	sbc.w	fp, r3, r1
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800232c:	ebb2 040a 	subs.w	r4, r2, sl
 8002330:	eb63 050b 	sbc.w	r5, r3, fp
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	00eb      	lsls	r3, r5, #3
 800233e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002342:	00e2      	lsls	r2, r4, #3
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	4643      	mov	r3, r8
 800234a:	18e3      	adds	r3, r4, r3
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	464b      	mov	r3, r9
 8002350:	eb45 0303 	adc.w	r3, r5, r3
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002362:	4629      	mov	r1, r5
 8002364:	028b      	lsls	r3, r1, #10
 8002366:	4621      	mov	r1, r4
 8002368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800236c:	4621      	mov	r1, r4
 800236e:	028a      	lsls	r2, r1, #10
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002376:	2200      	movs	r2, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	61fa      	str	r2, [r7, #28]
 800237c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002380:	f7fd ffa8 	bl	80002d4 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4613      	mov	r3, r2
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800239c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3750      	adds	r7, #80	; 0x50
 80023b4:	46bd      	mov	sp, r7
 80023b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000004 	.word	0x20000004

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	08008da0 	.word	0x08008da0

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800240c:	f7ff ffdc 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0b5b      	lsrs	r3, r3, #13
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK2Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	08008da0 	.word	0x08008da0

08002430 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	220f      	movs	r2, #15
 800243e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_RCC_GetClockConfig+0x5c>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_RCC_GetClockConfig+0x5c>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCC_GetClockConfig+0x5c>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_GetClockConfig+0x5c>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RCC_GetClockConfig+0x60>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 020f 	and.w	r2, r3, #15
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	601a      	str	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40023c00 	.word	0x40023c00

08002494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024bc:	4b69      	ldr	r3, [pc, #420]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a68      	ldr	r2, [pc, #416]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024c6:	6093      	str	r3, [r2, #8]
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d0:	4964      	ldr	r1, [pc, #400]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024de:	2301      	movs	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d017      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ee:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	4959      	ldr	r1, [pc, #356]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250c:	d101      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800250e:	2301      	movs	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800251a:	2301      	movs	r3, #1
 800251c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002530:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	494a      	ldr	r1, [pc, #296]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002548:	d101      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800254a:	2301      	movs	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002566:	2301      	movs	r3, #1
 8002568:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 808b 	beq.w	800268e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002578:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a39      	ldr	r2, [pc, #228]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
 8002584:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a34      	ldr	r2, [pc, #208]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259c:	f7fe fd9e 	bl	80010dc <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe fd9a 	bl	80010dc <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e38f      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025b6:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025c2:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d035      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d02e      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e0:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002600:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d114      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fd62 	bl	80010dc <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7fe fd5e 	bl	80010dc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e351      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0ee      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800264a:	d111      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800265a:	400b      	ands	r3, r1
 800265c:	4901      	ldr	r1, [pc, #4]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
 8002662:	e00b      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002664:	40023800 	.word	0x40023800
 8002668:	40007000 	.word	0x40007000
 800266c:	0ffffcff 	.word	0x0ffffcff
 8002670:	4bac      	ldr	r3, [pc, #688]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4aab      	ldr	r2, [pc, #684]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002676:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800267a:	6093      	str	r3, [r2, #8]
 800267c:	4ba9      	ldr	r3, [pc, #676]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002688:	49a6      	ldr	r1, [pc, #664]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268a:	4313      	orrs	r3, r2
 800268c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	d010      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800269a:	4ba2      	ldr	r3, [pc, #648]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a0:	4aa0      	ldr	r2, [pc, #640]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026aa:	4b9e      	ldr	r3, [pc, #632]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	499b      	ldr	r1, [pc, #620]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026c8:	4b96      	ldr	r3, [pc, #600]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d6:	4993      	ldr	r1, [pc, #588]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026ea:	4b8e      	ldr	r3, [pc, #568]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f8:	498a      	ldr	r1, [pc, #552]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800270c:	4b85      	ldr	r3, [pc, #532]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271a:	4982      	ldr	r1, [pc, #520]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800272e:	4b7d      	ldr	r3, [pc, #500]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4979      	ldr	r1, [pc, #484]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002750:	4b74      	ldr	r3, [pc, #464]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4971      	ldr	r1, [pc, #452]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002772:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f023 020c 	bic.w	r2, r3, #12
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002780:	4968      	ldr	r1, [pc, #416]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002794:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	4960      	ldr	r1, [pc, #384]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b6:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	4957      	ldr	r1, [pc, #348]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d8:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	494f      	ldr	r1, [pc, #316]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4946      	ldr	r1, [pc, #280]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800281c:	4b41      	ldr	r3, [pc, #260]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	493e      	ldr	r1, [pc, #248]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800283e:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284c:	4935      	ldr	r1, [pc, #212]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002860:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286e:	492d      	ldr	r1, [pc, #180]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d011      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002890:	4924      	ldr	r1, [pc, #144]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a0:	d101      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d0:	4914      	ldr	r1, [pc, #80]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f4:	490b      	ldr	r1, [pc, #44]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00f      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002918:	4902      	ldr	r1, [pc, #8]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002920:	e002      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002934:	4b8a      	ldr	r3, [pc, #552]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	4986      	ldr	r1, [pc, #536]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002958:	4b81      	ldr	r3, [pc, #516]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800295a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002968:	497d      	ldr	r1, [pc, #500]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d006      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80d6 	beq.w	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002984:	4b76      	ldr	r3, [pc, #472]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800298a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800298e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fba4 	bl	80010dc <HAL_GetTick>
 8002994:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002998:	f7fe fba0 	bl	80010dc <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e195      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029aa:	4b6d      	ldr	r3, [pc, #436]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d021      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11d      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029ca:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029d8:	4b61      	ldr	r3, [pc, #388]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029de:	0e1b      	lsrs	r3, r3, #24
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	019a      	lsls	r2, r3, #6
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	041b      	lsls	r3, r3, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	071b      	lsls	r3, r3, #28
 80029fe:	4958      	ldr	r1, [pc, #352]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02e      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a30:	d129      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a32:	4b4b      	ldr	r3, [pc, #300]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a40:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	0f1b      	lsrs	r3, r3, #28
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	431a      	orrs	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	071b      	lsls	r3, r3, #28
 8002a66:	493e      	ldr	r1, [pc, #248]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a74:	f023 021f 	bic.w	r2, r3, #31
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	4938      	ldr	r1, [pc, #224]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01d      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a98:	0e1b      	lsrs	r3, r3, #24
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa6:	0f1b      	lsrs	r3, r3, #28
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	019a      	lsls	r2, r3, #6
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	431a      	orrs	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	061b      	lsls	r3, r3, #24
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	071b      	lsls	r3, r3, #28
 8002ac6:	4926      	ldr	r1, [pc, #152]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d011      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	019a      	lsls	r2, r3, #6
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	071b      	lsls	r3, r3, #28
 8002af6:	491a      	ldr	r1, [pc, #104]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b0a:	f7fe fae7 	bl	80010dc <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b12:	f7fe fae3 	bl	80010dc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	; 0x64
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0d8      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	f040 80ce 	bne.w	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b44:	f7fe faca 	bl	80010dc <HAL_GetTick>
 8002b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b4c:	f7fe fac6 	bl	80010dc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d904      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0bb      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b64:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b70:	d0ec      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02e      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d12a      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b9a:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	0f1b      	lsrs	r3, r3, #28
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	019a      	lsls	r2, r3, #6
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	071b      	lsls	r3, r3, #28
 8002bce:	4944      	ldr	r1, [pc, #272]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bd6:	4b42      	ldr	r3, [pc, #264]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	493d      	ldr	r1, [pc, #244]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d022      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c04:	d11d      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	0e1b      	lsrs	r3, r3, #24
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	0f1b      	lsrs	r3, r3, #28
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	019a      	lsls	r2, r3, #6
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	061b      	lsls	r3, r3, #24
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	4929      	ldr	r1, [pc, #164]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d028      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	0e1b      	lsrs	r3, r3, #24
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c5c:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	019a      	lsls	r2, r3, #6
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	4917      	ldr	r1, [pc, #92]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	4911      	ldr	r1, [pc, #68]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe fa16 	bl	80010dc <HAL_GetTick>
 8002cb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cb4:	f7fe fa12 	bl	80010dc <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e007      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd2:	d1ef      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e049      	b.n	8002d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f841 	bl	8002d92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 fa00 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d001      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e054      	b.n	8002e6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dea:	d01d      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <HAL_TIM_Base_Start_IT+0xe0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_TIM_Base_Start_IT+0xe4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x80>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d115      	bne.n	8002e54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_TIM_Base_Start_IT+0xec>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d015      	beq.n	8002e66 <HAL_TIM_Base_Start_IT+0xbe>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d011      	beq.n	8002e66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	e008      	b.n	8002e66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e000      	b.n	8002e68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40000c00 	.word	0x40000c00
 8002e88:	40010400 	.word	0x40010400
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40001800 	.word	0x40001800
 8002e94:	00010007 	.word	0x00010007

08002e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0202 	mvn.w	r2, #2
 8002ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f905 	bl	80030ea <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8f7 	bl	80030d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f908 	bl	80030fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0204 	mvn.w	r2, #4
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8db 	bl	80030ea <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8cd 	bl	80030d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f8de 	bl	80030fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0208 	mvn.w	r2, #8
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8b1 	bl	80030ea <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8a3 	bl	80030d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f8b4 	bl	80030fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0210 	mvn.w	r2, #16
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f887 	bl	80030ea <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f879 	bl	80030d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f88a 	bl	80030fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0201 	mvn.w	r2, #1
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fe34 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d10e      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d107      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f91a 	bl	800327c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003056:	d10e      	bne.n	8003076 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d107      	bne.n	8003076 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800306e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f90d 	bl	8003290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d10e      	bne.n	80030a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d107      	bne.n	80030a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800309a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f838 	bl	8003112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d10e      	bne.n	80030ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d107      	bne.n	80030ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0220 	mvn.w	r2, #32
 80030c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f8cd 	bl	8003268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a40      	ldr	r2, [pc, #256]	; (800323c <TIM_Base_SetConfig+0x114>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d00f      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3d      	ldr	r2, [pc, #244]	; (8003240 <TIM_Base_SetConfig+0x118>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00b      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3c      	ldr	r2, [pc, #240]	; (8003244 <TIM_Base_SetConfig+0x11c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3b      	ldr	r2, [pc, #236]	; (8003248 <TIM_Base_SetConfig+0x120>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3a      	ldr	r2, [pc, #232]	; (800324c <TIM_Base_SetConfig+0x124>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a2f      	ldr	r2, [pc, #188]	; (800323c <TIM_Base_SetConfig+0x114>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d027      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2c      	ldr	r2, [pc, #176]	; (8003240 <TIM_Base_SetConfig+0x118>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d023      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2b      	ldr	r2, [pc, #172]	; (8003244 <TIM_Base_SetConfig+0x11c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01f      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <TIM_Base_SetConfig+0x120>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a29      	ldr	r2, [pc, #164]	; (800324c <TIM_Base_SetConfig+0x124>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d017      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a28      	ldr	r2, [pc, #160]	; (8003250 <TIM_Base_SetConfig+0x128>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <TIM_Base_SetConfig+0x12c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00f      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a26      	ldr	r2, [pc, #152]	; (8003258 <TIM_Base_SetConfig+0x130>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a25      	ldr	r2, [pc, #148]	; (800325c <TIM_Base_SetConfig+0x134>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a24      	ldr	r2, [pc, #144]	; (8003260 <TIM_Base_SetConfig+0x138>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a23      	ldr	r2, [pc, #140]	; (8003264 <TIM_Base_SetConfig+0x13c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <TIM_Base_SetConfig+0x114>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_Base_SetConfig+0xf8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <TIM_Base_SetConfig+0x124>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d103      	bne.n	8003228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	615a      	str	r2, [r3, #20]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40010000 	.word	0x40010000
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800
 8003248:	40000c00 	.word	0x40000c00
 800324c:	40010400 	.word	0x40010400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800
 800325c:	40001800 	.word	0x40001800
 8003260:	40001c00 	.word	0x40001c00
 8003264:	40002000 	.word	0x40002000

08003268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e040      	b.n	8003338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd fd1c 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f82c 	bl	8003340 <UART_SetConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e022      	b.n	8003338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fa84 	bl	8003808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800330e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800331e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fb0b 	bl	800394c <UART_CheckIdleState>
 8003336:	4603      	mov	r3, r0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4ba6      	ldr	r3, [pc, #664]	; (8003604 <UART_SetConfig+0x2c4>)
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	430b      	orrs	r3, r1
 8003376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a94      	ldr	r2, [pc, #592]	; (8003608 <UART_SetConfig+0x2c8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d120      	bne.n	80033fe <UART_SetConfig+0xbe>
 80033bc:	4b93      	ldr	r3, [pc, #588]	; (800360c <UART_SetConfig+0x2cc>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d816      	bhi.n	80033f8 <UART_SetConfig+0xb8>
 80033ca:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <UART_SetConfig+0x90>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	080033e1 	.word	0x080033e1
 80033d4:	080033ed 	.word	0x080033ed
 80033d8:	080033e7 	.word	0x080033e7
 80033dc:	080033f3 	.word	0x080033f3
 80033e0:	2301      	movs	r3, #1
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e150      	b.n	8003688 <UART_SetConfig+0x348>
 80033e6:	2302      	movs	r3, #2
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e14d      	b.n	8003688 <UART_SetConfig+0x348>
 80033ec:	2304      	movs	r3, #4
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e14a      	b.n	8003688 <UART_SetConfig+0x348>
 80033f2:	2308      	movs	r3, #8
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e147      	b.n	8003688 <UART_SetConfig+0x348>
 80033f8:	2310      	movs	r3, #16
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e144      	b.n	8003688 <UART_SetConfig+0x348>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a83      	ldr	r2, [pc, #524]	; (8003610 <UART_SetConfig+0x2d0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d132      	bne.n	800346e <UART_SetConfig+0x12e>
 8003408:	4b80      	ldr	r3, [pc, #512]	; (800360c <UART_SetConfig+0x2cc>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d828      	bhi.n	8003468 <UART_SetConfig+0x128>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <UART_SetConfig+0xdc>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003451 	.word	0x08003451
 8003420:	08003469 	.word	0x08003469
 8003424:	08003469 	.word	0x08003469
 8003428:	08003469 	.word	0x08003469
 800342c:	0800345d 	.word	0x0800345d
 8003430:	08003469 	.word	0x08003469
 8003434:	08003469 	.word	0x08003469
 8003438:	08003469 	.word	0x08003469
 800343c:	08003457 	.word	0x08003457
 8003440:	08003469 	.word	0x08003469
 8003444:	08003469 	.word	0x08003469
 8003448:	08003469 	.word	0x08003469
 800344c:	08003463 	.word	0x08003463
 8003450:	2300      	movs	r3, #0
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e118      	b.n	8003688 <UART_SetConfig+0x348>
 8003456:	2302      	movs	r3, #2
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e115      	b.n	8003688 <UART_SetConfig+0x348>
 800345c:	2304      	movs	r3, #4
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e112      	b.n	8003688 <UART_SetConfig+0x348>
 8003462:	2308      	movs	r3, #8
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e10f      	b.n	8003688 <UART_SetConfig+0x348>
 8003468:	2310      	movs	r3, #16
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e10c      	b.n	8003688 <UART_SetConfig+0x348>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a68      	ldr	r2, [pc, #416]	; (8003614 <UART_SetConfig+0x2d4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d120      	bne.n	80034ba <UART_SetConfig+0x17a>
 8003478:	4b64      	ldr	r3, [pc, #400]	; (800360c <UART_SetConfig+0x2cc>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003482:	2b30      	cmp	r3, #48	; 0x30
 8003484:	d013      	beq.n	80034ae <UART_SetConfig+0x16e>
 8003486:	2b30      	cmp	r3, #48	; 0x30
 8003488:	d814      	bhi.n	80034b4 <UART_SetConfig+0x174>
 800348a:	2b20      	cmp	r3, #32
 800348c:	d009      	beq.n	80034a2 <UART_SetConfig+0x162>
 800348e:	2b20      	cmp	r3, #32
 8003490:	d810      	bhi.n	80034b4 <UART_SetConfig+0x174>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <UART_SetConfig+0x15c>
 8003496:	2b10      	cmp	r3, #16
 8003498:	d006      	beq.n	80034a8 <UART_SetConfig+0x168>
 800349a:	e00b      	b.n	80034b4 <UART_SetConfig+0x174>
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e0f2      	b.n	8003688 <UART_SetConfig+0x348>
 80034a2:	2302      	movs	r3, #2
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e0ef      	b.n	8003688 <UART_SetConfig+0x348>
 80034a8:	2304      	movs	r3, #4
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e0ec      	b.n	8003688 <UART_SetConfig+0x348>
 80034ae:	2308      	movs	r3, #8
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e0e9      	b.n	8003688 <UART_SetConfig+0x348>
 80034b4:	2310      	movs	r3, #16
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e0e6      	b.n	8003688 <UART_SetConfig+0x348>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a56      	ldr	r2, [pc, #344]	; (8003618 <UART_SetConfig+0x2d8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d120      	bne.n	8003506 <UART_SetConfig+0x1c6>
 80034c4:	4b51      	ldr	r3, [pc, #324]	; (800360c <UART_SetConfig+0x2cc>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034ce:	2bc0      	cmp	r3, #192	; 0xc0
 80034d0:	d013      	beq.n	80034fa <UART_SetConfig+0x1ba>
 80034d2:	2bc0      	cmp	r3, #192	; 0xc0
 80034d4:	d814      	bhi.n	8003500 <UART_SetConfig+0x1c0>
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d009      	beq.n	80034ee <UART_SetConfig+0x1ae>
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d810      	bhi.n	8003500 <UART_SetConfig+0x1c0>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <UART_SetConfig+0x1a8>
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d006      	beq.n	80034f4 <UART_SetConfig+0x1b4>
 80034e6:	e00b      	b.n	8003500 <UART_SetConfig+0x1c0>
 80034e8:	2300      	movs	r3, #0
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e0cc      	b.n	8003688 <UART_SetConfig+0x348>
 80034ee:	2302      	movs	r3, #2
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e0c9      	b.n	8003688 <UART_SetConfig+0x348>
 80034f4:	2304      	movs	r3, #4
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e0c6      	b.n	8003688 <UART_SetConfig+0x348>
 80034fa:	2308      	movs	r3, #8
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e0c3      	b.n	8003688 <UART_SetConfig+0x348>
 8003500:	2310      	movs	r3, #16
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e0c0      	b.n	8003688 <UART_SetConfig+0x348>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a44      	ldr	r2, [pc, #272]	; (800361c <UART_SetConfig+0x2dc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d125      	bne.n	800355c <UART_SetConfig+0x21c>
 8003510:	4b3e      	ldr	r3, [pc, #248]	; (800360c <UART_SetConfig+0x2cc>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800351e:	d017      	beq.n	8003550 <UART_SetConfig+0x210>
 8003520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003524:	d817      	bhi.n	8003556 <UART_SetConfig+0x216>
 8003526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352a:	d00b      	beq.n	8003544 <UART_SetConfig+0x204>
 800352c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003530:	d811      	bhi.n	8003556 <UART_SetConfig+0x216>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <UART_SetConfig+0x1fe>
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d006      	beq.n	800354a <UART_SetConfig+0x20a>
 800353c:	e00b      	b.n	8003556 <UART_SetConfig+0x216>
 800353e:	2300      	movs	r3, #0
 8003540:	77fb      	strb	r3, [r7, #31]
 8003542:	e0a1      	b.n	8003688 <UART_SetConfig+0x348>
 8003544:	2302      	movs	r3, #2
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e09e      	b.n	8003688 <UART_SetConfig+0x348>
 800354a:	2304      	movs	r3, #4
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e09b      	b.n	8003688 <UART_SetConfig+0x348>
 8003550:	2308      	movs	r3, #8
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e098      	b.n	8003688 <UART_SetConfig+0x348>
 8003556:	2310      	movs	r3, #16
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e095      	b.n	8003688 <UART_SetConfig+0x348>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <UART_SetConfig+0x2e0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d125      	bne.n	80035b2 <UART_SetConfig+0x272>
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <UART_SetConfig+0x2cc>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003574:	d017      	beq.n	80035a6 <UART_SetConfig+0x266>
 8003576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357a:	d817      	bhi.n	80035ac <UART_SetConfig+0x26c>
 800357c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003580:	d00b      	beq.n	800359a <UART_SetConfig+0x25a>
 8003582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003586:	d811      	bhi.n	80035ac <UART_SetConfig+0x26c>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <UART_SetConfig+0x254>
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d006      	beq.n	80035a0 <UART_SetConfig+0x260>
 8003592:	e00b      	b.n	80035ac <UART_SetConfig+0x26c>
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e076      	b.n	8003688 <UART_SetConfig+0x348>
 800359a:	2302      	movs	r3, #2
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e073      	b.n	8003688 <UART_SetConfig+0x348>
 80035a0:	2304      	movs	r3, #4
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e070      	b.n	8003688 <UART_SetConfig+0x348>
 80035a6:	2308      	movs	r3, #8
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e06d      	b.n	8003688 <UART_SetConfig+0x348>
 80035ac:	2310      	movs	r3, #16
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e06a      	b.n	8003688 <UART_SetConfig+0x348>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <UART_SetConfig+0x2e4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d138      	bne.n	800362e <UART_SetConfig+0x2ee>
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <UART_SetConfig+0x2cc>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035ca:	d017      	beq.n	80035fc <UART_SetConfig+0x2bc>
 80035cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035d0:	d82a      	bhi.n	8003628 <UART_SetConfig+0x2e8>
 80035d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d6:	d00b      	beq.n	80035f0 <UART_SetConfig+0x2b0>
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035dc:	d824      	bhi.n	8003628 <UART_SetConfig+0x2e8>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <UART_SetConfig+0x2aa>
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e6:	d006      	beq.n	80035f6 <UART_SetConfig+0x2b6>
 80035e8:	e01e      	b.n	8003628 <UART_SetConfig+0x2e8>
 80035ea:	2300      	movs	r3, #0
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e04b      	b.n	8003688 <UART_SetConfig+0x348>
 80035f0:	2302      	movs	r3, #2
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e048      	b.n	8003688 <UART_SetConfig+0x348>
 80035f6:	2304      	movs	r3, #4
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e045      	b.n	8003688 <UART_SetConfig+0x348>
 80035fc:	2308      	movs	r3, #8
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e042      	b.n	8003688 <UART_SetConfig+0x348>
 8003602:	bf00      	nop
 8003604:	efff69f3 	.word	0xefff69f3
 8003608:	40011000 	.word	0x40011000
 800360c:	40023800 	.word	0x40023800
 8003610:	40004400 	.word	0x40004400
 8003614:	40004800 	.word	0x40004800
 8003618:	40004c00 	.word	0x40004c00
 800361c:	40005000 	.word	0x40005000
 8003620:	40011400 	.word	0x40011400
 8003624:	40007800 	.word	0x40007800
 8003628:	2310      	movs	r3, #16
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e02c      	b.n	8003688 <UART_SetConfig+0x348>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a72      	ldr	r2, [pc, #456]	; (80037fc <UART_SetConfig+0x4bc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d125      	bne.n	8003684 <UART_SetConfig+0x344>
 8003638:	4b71      	ldr	r3, [pc, #452]	; (8003800 <UART_SetConfig+0x4c0>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003642:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003646:	d017      	beq.n	8003678 <UART_SetConfig+0x338>
 8003648:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800364c:	d817      	bhi.n	800367e <UART_SetConfig+0x33e>
 800364e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003652:	d00b      	beq.n	800366c <UART_SetConfig+0x32c>
 8003654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003658:	d811      	bhi.n	800367e <UART_SetConfig+0x33e>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <UART_SetConfig+0x326>
 800365e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003662:	d006      	beq.n	8003672 <UART_SetConfig+0x332>
 8003664:	e00b      	b.n	800367e <UART_SetConfig+0x33e>
 8003666:	2300      	movs	r3, #0
 8003668:	77fb      	strb	r3, [r7, #31]
 800366a:	e00d      	b.n	8003688 <UART_SetConfig+0x348>
 800366c:	2302      	movs	r3, #2
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e00a      	b.n	8003688 <UART_SetConfig+0x348>
 8003672:	2304      	movs	r3, #4
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e007      	b.n	8003688 <UART_SetConfig+0x348>
 8003678:	2308      	movs	r3, #8
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e004      	b.n	8003688 <UART_SetConfig+0x348>
 800367e:	2310      	movs	r3, #16
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e001      	b.n	8003688 <UART_SetConfig+0x348>
 8003684:	2310      	movs	r3, #16
 8003686:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003690:	d15b      	bne.n	800374a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003692:	7ffb      	ldrb	r3, [r7, #31]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d828      	bhi.n	80036ea <UART_SetConfig+0x3aa>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <UART_SetConfig+0x360>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036cd 	.word	0x080036cd
 80036a8:	080036d5 	.word	0x080036d5
 80036ac:	080036eb 	.word	0x080036eb
 80036b0:	080036db 	.word	0x080036db
 80036b4:	080036eb 	.word	0x080036eb
 80036b8:	080036eb 	.word	0x080036eb
 80036bc:	080036eb 	.word	0x080036eb
 80036c0:	080036e3 	.word	0x080036e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c4:	f7fe fe8c 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 80036c8:	61b8      	str	r0, [r7, #24]
        break;
 80036ca:	e013      	b.n	80036f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7fe fe9c 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 80036d0:	61b8      	str	r0, [r7, #24]
        break;
 80036d2:	e00f      	b.n	80036f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d4:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <UART_SetConfig+0x4c4>)
 80036d6:	61bb      	str	r3, [r7, #24]
        break;
 80036d8:	e00c      	b.n	80036f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036da:	f7fe fd6f 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 80036de:	61b8      	str	r0, [r7, #24]
        break;
 80036e0:	e008      	b.n	80036f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e6:	61bb      	str	r3, [r7, #24]
        break;
 80036e8:	e004      	b.n	80036f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	77bb      	strb	r3, [r7, #30]
        break;
 80036f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d074      	beq.n	80037e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	005a      	lsls	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b0f      	cmp	r3, #15
 8003714:	d916      	bls.n	8003744 <UART_SetConfig+0x404>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371c:	d212      	bcs.n	8003744 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	b29b      	uxth	r3, r3
 8003722:	f023 030f 	bic.w	r3, r3, #15
 8003726:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	b29b      	uxth	r3, r3
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	b29a      	uxth	r2, r3
 8003734:	89fb      	ldrh	r3, [r7, #14]
 8003736:	4313      	orrs	r3, r2
 8003738:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	89fa      	ldrh	r2, [r7, #14]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	e04f      	b.n	80037e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	77bb      	strb	r3, [r7, #30]
 8003748:	e04c      	b.n	80037e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d828      	bhi.n	80037a2 <UART_SetConfig+0x462>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <UART_SetConfig+0x418>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	0800377d 	.word	0x0800377d
 800375c:	08003785 	.word	0x08003785
 8003760:	0800378d 	.word	0x0800378d
 8003764:	080037a3 	.word	0x080037a3
 8003768:	08003793 	.word	0x08003793
 800376c:	080037a3 	.word	0x080037a3
 8003770:	080037a3 	.word	0x080037a3
 8003774:	080037a3 	.word	0x080037a3
 8003778:	0800379b 	.word	0x0800379b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7fe fe30 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8003780:	61b8      	str	r0, [r7, #24]
        break;
 8003782:	e013      	b.n	80037ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003784:	f7fe fe40 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8003788:	61b8      	str	r0, [r7, #24]
        break;
 800378a:	e00f      	b.n	80037ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <UART_SetConfig+0x4c4>)
 800378e:	61bb      	str	r3, [r7, #24]
        break;
 8003790:	e00c      	b.n	80037ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003792:	f7fe fd13 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8003796:	61b8      	str	r0, [r7, #24]
        break;
 8003798:	e008      	b.n	80037ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379e:	61bb      	str	r3, [r7, #24]
        break;
 80037a0:	e004      	b.n	80037ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	77bb      	strb	r3, [r7, #30]
        break;
 80037aa:	bf00      	nop
    }

    if (pclk != 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d018      	beq.n	80037e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	085a      	lsrs	r2, r3, #1
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	441a      	add	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b0f      	cmp	r3, #15
 80037ca:	d909      	bls.n	80037e0 <UART_SetConfig+0x4a0>
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d2:	d205      	bcs.n	80037e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	e001      	b.n	80037e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40007c00 	.word	0x40007c00
 8003800:	40023800 	.word	0x40023800
 8003804:	00f42400 	.word	0x00f42400

08003808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01a      	beq.n	800391e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003906:	d10a      	bne.n	800391e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  }
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af02      	add	r7, sp, #8
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800395c:	f7fd fbbe 	bl	80010dc <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b08      	cmp	r3, #8
 800396e:	d10e      	bne.n	800398e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f831 	bl	80039e6 <UART_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e027      	b.n	80039de <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d10e      	bne.n	80039ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f81b 	bl	80039e6 <UART_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e011      	b.n	80039de <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b09c      	sub	sp, #112	; 0x70
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	4613      	mov	r3, r2
 80039f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f6:	e0a7      	b.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039fe:	f000 80a3 	beq.w	8003b48 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fd fb6b 	bl	80010dc <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d13f      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a2c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e6      	bne.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	663b      	str	r3, [r7, #96]	; 0x60
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3308      	adds	r3, #8
 8003a68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e5      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e068      	b.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d050      	beq.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab4:	d148      	bne.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003abe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ade:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e6      	bne.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	613b      	str	r3, [r7, #16]
   return(result);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b12:	623a      	str	r2, [r7, #32]
 8003b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	69f9      	ldr	r1, [r7, #28]
 8003b18:	6a3a      	ldr	r2, [r7, #32]
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e010      	b.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	f43f af48 	beq.w	80039f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3770      	adds	r7, #112	; 0x70
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b74:	b084      	sub	sp, #16
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	f107 001c 	add.w	r0, r7, #28
 8003b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d120      	bne.n	8003bce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <USB_CoreInit+0xac>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d105      	bne.n	8003bc2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa96 	bl	80040f4 <USB_CoreReset>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]
 8003bcc:	e010      	b.n	8003bf0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fa8a 	bl	80040f4 <USB_CoreReset>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10b      	bne.n	8003c0e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f043 0206 	orr.w	r2, r3, #6
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c1a:	b004      	add	sp, #16
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	ffbdffbf 	.word	0xffbdffbf

08003c24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 0201 	bic.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d115      	bne.n	8003c94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c74:	2001      	movs	r0, #1
 8003c76:	f7fd fa3d 	bl	80010f4 <HAL_Delay>
      ms++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fa29 	bl	80040d8 <USB_GetMode>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d01e      	beq.n	8003cca <USB_SetCurrentMode+0x84>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b31      	cmp	r3, #49	; 0x31
 8003c90:	d9f0      	bls.n	8003c74 <USB_SetCurrentMode+0x2e>
 8003c92:	e01a      	b.n	8003cca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d115      	bne.n	8003cc6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f7fd fa24 	bl	80010f4 <HAL_Delay>
      ms++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa10 	bl	80040d8 <USB_GetMode>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <USB_SetCurrentMode+0x84>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b31      	cmp	r3, #49	; 0x31
 8003cc2:	d9f0      	bls.n	8003ca6 <USB_SetCurrentMode+0x60>
 8003cc4:	e001      	b.n	8003cca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e005      	b.n	8003cd6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b32      	cmp	r3, #50	; 0x32
 8003cce:	d101      	bne.n	8003cd4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e009      	b.n	8003d14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3340      	adds	r3, #64	; 0x40
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3301      	adds	r3, #1
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b0e      	cmp	r3, #14
 8003d18:	d9f2      	bls.n	8003d00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11c      	bne.n	8003d5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e005      	b.n	8003d66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	4619      	mov	r1, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d80:	461a      	mov	r2, r3
 8003d82:	680b      	ldr	r3, [r1, #0]
 8003d84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10c      	bne.n	8003da6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d92:	2100      	movs	r1, #0
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f965 	bl	8004064 <USB_SetDevSpeed>
 8003d9a:	e008      	b.n	8003dae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f960 	bl	8004064 <USB_SetDevSpeed>
 8003da4:	e003      	b.n	8003dae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003da6:	2103      	movs	r1, #3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f95b 	bl	8004064 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dae:	2110      	movs	r1, #16
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8f3 	bl	8003f9c <USB_FlushTxFifo>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f91f 	bl	8004004 <USB_FlushRxFifo>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2300      	movs	r3, #0
 8003dda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	461a      	mov	r2, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	461a      	mov	r2, r3
 8003df0:	2300      	movs	r3, #0
 8003df2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e043      	b.n	8003e82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e10:	d118      	bne.n	8003e44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	461a      	mov	r2, r3
 8003e26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e013      	b.n	8003e56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e008      	b.n	8003e56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	461a      	mov	r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	461a      	mov	r2, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	461a      	mov	r2, r3
 8003e76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d3b7      	bcc.n	8003dfa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e043      	b.n	8003f18 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea6:	d118      	bne.n	8003eda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e013      	b.n	8003eec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e008      	b.n	8003eec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2300      	movs	r3, #0
 8003efc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	3301      	adds	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3b7      	bcc.n	8003e90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f043 0210 	orr.w	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <USB_DevInit+0x2b4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f043 0208 	orr.w	r2, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d105      	bne.n	8003f84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <USB_DevInit+0x2b8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f90:	b004      	add	sp, #16
 8003f92:	4770      	bx	lr
 8003f94:	803c3800 	.word	0x803c3800
 8003f98:	40000004 	.word	0x40000004

08003f9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3301      	adds	r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <USB_FlushTxFifo+0x64>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e01b      	b.n	8003ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	daf2      	bge.n	8003faa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	019b      	lsls	r3, r3, #6
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a08      	ldr	r2, [pc, #32]	; (8004000 <USB_FlushTxFifo+0x64>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e006      	b.n	8003ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d0f0      	beq.n	8003fd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	00030d40 	.word	0x00030d40

08004004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a11      	ldr	r2, [pc, #68]	; (8004060 <USB_FlushRxFifo+0x5c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e018      	b.n	8004054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	daf2      	bge.n	8004010 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2210      	movs	r2, #16
 8004032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a08      	ldr	r2, [pc, #32]	; (8004060 <USB_FlushRxFifo+0x5c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e006      	b.n	8004054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b10      	cmp	r3, #16
 8004050:	d0f0      	beq.n	8004034 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	00030d40 	.word	0x00030d40

08004064 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040b0:	f023 0303 	bic.w	r3, r3, #3
 80040b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0301 	and.w	r3, r3, #1
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <USB_CoreReset+0x64>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e01b      	b.n	800414a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	daf2      	bge.n	8004100 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <USB_CoreReset+0x64>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d0f0      	beq.n	800412a <USB_CoreReset+0x36>

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	00030d40 	.word	0x00030d40

0800415c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004172:	f3ef 8305 	mrs	r3, IPSR
 8004176:	60bb      	str	r3, [r7, #8]
  return(result);
 8004178:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417e:	f3ef 8310 	mrs	r3, PRIMASK
 8004182:	607b      	str	r3, [r7, #4]
  return(result);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800418a:	f3ef 8311 	mrs	r3, BASEPRI
 800418e:	603b      	str	r3, [r7, #0]
  return(result);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <osKernelInitialize+0x3a>
 8004196:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <osKernelInitialize+0x64>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d103      	bne.n	80041a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800419e:	f06f 0305 	mvn.w	r3, #5
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e00c      	b.n	80041c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <osKernelInitialize+0x64>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d105      	bne.n	80041ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <osKernelInitialize+0x64>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e002      	b.n	80041c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041c0:	68fb      	ldr	r3, [r7, #12]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000b50 	.word	0x20000b50

080041d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041da:	f3ef 8305 	mrs	r3, IPSR
 80041de:	60bb      	str	r3, [r7, #8]
  return(result);
 80041e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ea:	607b      	str	r3, [r7, #4]
  return(result);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041f2:	f3ef 8311 	mrs	r3, BASEPRI
 80041f6:	603b      	str	r3, [r7, #0]
  return(result);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <osKernelStart+0x3a>
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <osKernelStart+0x68>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d103      	bne.n	800420e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004206:	f06f 0305 	mvn.w	r3, #5
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e010      	b.n	8004230 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <osKernelStart+0x68>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d109      	bne.n	800422a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004216:	f7ff ffa1 	bl	800415c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <osKernelStart+0x68>)
 800421c:	2202      	movs	r2, #2
 800421e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004220:	f001 f902 	bl	8005428 <vTaskStartScheduler>
      stat = osOK;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e002      	b.n	8004230 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800422a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800422e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000b50 	.word	0x20000b50

08004240 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b090      	sub	sp, #64	; 0x40
 8004244:	af04      	add	r7, sp, #16
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004250:	f3ef 8305 	mrs	r3, IPSR
 8004254:	61fb      	str	r3, [r7, #28]
  return(result);
 8004256:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 808f 	bne.w	800437c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425e:	f3ef 8310 	mrs	r3, PRIMASK
 8004262:	61bb      	str	r3, [r7, #24]
  return(result);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800426a:	f3ef 8311 	mrs	r3, BASEPRI
 800426e:	617b      	str	r3, [r7, #20]
  return(result);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <osThreadNew+0x3e>
 8004276:	4b44      	ldr	r3, [pc, #272]	; (8004388 <osThreadNew+0x148>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d07e      	beq.n	800437c <osThreadNew+0x13c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d07b      	beq.n	800437c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004288:	2318      	movs	r3, #24
 800428a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004294:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d045      	beq.n	8004328 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <osThreadNew+0x6a>
        name = attr->name;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <osThreadNew+0x90>
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	2b38      	cmp	r3, #56	; 0x38
 80042c2:	d805      	bhi.n	80042d0 <osThreadNew+0x90>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <osThreadNew+0x94>
        return (NULL);
 80042d0:	2300      	movs	r3, #0
 80042d2:	e054      	b.n	800437e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00e      	beq.n	800430a <osThreadNew+0xca>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2bbf      	cmp	r3, #191	; 0xbf
 80042f2:	d90a      	bls.n	800430a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d006      	beq.n	800430a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <osThreadNew+0xca>
        mem = 1;
 8004304:	2301      	movs	r3, #1
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	e010      	b.n	800432c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <osThreadNew+0xec>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <osThreadNew+0xec>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <osThreadNew+0xec>
          mem = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	623b      	str	r3, [r7, #32]
 8004326:	e001      	b.n	800432c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d110      	bne.n	8004354 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800433a:	9202      	str	r2, [sp, #8]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fe8b 	bl	8005064 <xTaskCreateStatic>
 800434e:	4603      	mov	r3, r0
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	e013      	b.n	800437c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d110      	bne.n	800437c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	b29a      	uxth	r2, r3
 800435e:	f107 0310 	add.w	r3, r7, #16
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fedc 	bl	800512a <xTaskCreate>
 8004372:	4603      	mov	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d001      	beq.n	800437c <osThreadNew+0x13c>
          hTask = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800437c:	693b      	ldr	r3, [r7, #16]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3730      	adds	r7, #48	; 0x30
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000b50 	.word	0x20000b50

0800438c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a07      	ldr	r2, [pc, #28]	; (80043b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800439c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a06      	ldr	r2, [pc, #24]	; (80043bc <vApplicationGetIdleTaskMemory+0x30>)
 80043a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	601a      	str	r2, [r3, #0]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000b54 	.word	0x20000b54
 80043bc:	20000c14 	.word	0x20000c14

080043c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a07      	ldr	r2, [pc, #28]	; (80043ec <vApplicationGetTimerTaskMemory+0x2c>)
 80043d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <vApplicationGetTimerTaskMemory+0x30>)
 80043d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043de:	601a      	str	r2, [r3, #0]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000e14 	.word	0x20000e14
 80043f0:	20000ed4 	.word	0x20000ed4

080043f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f103 0208 	add.w	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800440c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f103 0208 	add.w	r2, r3, #8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f103 0208 	add.w	r2, r3, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ac:	d103      	bne.n	80044b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e00c      	b.n	80044d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3308      	adds	r3, #8
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e002      	b.n	80044c4 <vListInsert+0x2e>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d2f6      	bcs.n	80044be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6892      	ldr	r2, [r2, #8]
 800451e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6852      	ldr	r2, [r2, #4]
 8004528:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d103      	bne.n	800453c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	1e5a      	subs	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10c      	bne.n	800458a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	b672      	cpsid	i
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	b662      	cpsie	i
 8004584:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800458a:	f002 f997 	bl	80068bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	441a      	add	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ba:	3b01      	subs	r3, #1
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	441a      	add	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	22ff      	movs	r2, #255	; 0xff
 80045ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d114      	bne.n	800460a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01a      	beq.n	800461e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3310      	adds	r3, #16
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f9fb 	bl	80059e8 <xTaskRemoveFromEventList>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d012      	beq.n	800461e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <xQueueGenericReset+0xd0>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	e009      	b.n	800461e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3310      	adds	r3, #16
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fef0 	bl	80043f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3324      	adds	r3, #36	; 0x24
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff feeb 	bl	80043f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800461e:	f002 f981 	bl	8006924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004622:	2301      	movs	r3, #1
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08e      	sub	sp, #56	; 0x38
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10c      	bne.n	800465e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	b672      	cpsid	i
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	b662      	cpsie	i
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10c      	bne.n	800467e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	b672      	cpsid	i
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	b662      	cpsie	i
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <xQueueGenericCreateStatic+0x5a>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <xQueueGenericCreateStatic+0x5e>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <xQueueGenericCreateStatic+0x60>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10c      	bne.n	80046ae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	b672      	cpsid	i
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	b662      	cpsie	i
 80046a8:	623b      	str	r3, [r7, #32]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d102      	bne.n	80046ba <xQueueGenericCreateStatic+0x8a>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <xQueueGenericCreateStatic+0x8e>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <xQueueGenericCreateStatic+0x90>
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10c      	bne.n	80046de <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	b672      	cpsid	i
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	b662      	cpsie	i
 80046d8:	61fb      	str	r3, [r7, #28]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046de:	2350      	movs	r3, #80	; 0x50
 80046e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d00c      	beq.n	8004702 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	b672      	cpsid	i
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	b662      	cpsie	i
 80046fc:	61bb      	str	r3, [r7, #24]
}
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004702:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00d      	beq.n	800472a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004716:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4613      	mov	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f805 	bl	8004734 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800472c:	4618      	mov	r0, r3
 800472e:	3730      	adds	r7, #48	; 0x30
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e002      	b.n	8004756 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004762:	2101      	movs	r1, #1
 8004764:	69b8      	ldr	r0, [r7, #24]
 8004766:	f7ff fef9 	bl	800455c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	2073      	movs	r0, #115	; 0x73
 800477a:	f003 fa6b 	bl	8007c54 <SEGGER_SYSVIEW_RecordU32x3>
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b090      	sub	sp, #64	; 0x40
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10c      	bne.n	80047be <xQueueGenericSend+0x36>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	b672      	cpsid	i
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	b662      	cpsie	i
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <xQueueGenericSend+0x44>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <xQueueGenericSend+0x48>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <xQueueGenericSend+0x4a>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <xQueueGenericSend+0x68>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	b672      	cpsid	i
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	b662      	cpsie	i
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d103      	bne.n	80047fe <xQueueGenericSend+0x76>
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <xQueueGenericSend+0x7a>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <xQueueGenericSend+0x7c>
 8004802:	2300      	movs	r3, #0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10c      	bne.n	8004822 <xQueueGenericSend+0x9a>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	b672      	cpsid	i
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	b662      	cpsie	i
 800481c:	623b      	str	r3, [r7, #32]
}
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004822:	f001 fae7 	bl	8005df4 <xTaskGetSchedulerState>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <xQueueGenericSend+0xaa>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <xQueueGenericSend+0xae>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <xQueueGenericSend+0xb0>
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10c      	bne.n	8004856 <xQueueGenericSend+0xce>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	b672      	cpsid	i
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	b662      	cpsie	i
 8004850:	61fb      	str	r3, [r7, #28]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004856:	f002 f831 	bl	80068bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <xQueueGenericSend+0xe4>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d136      	bne.n	80048da <xQueueGenericSend+0x152>
			{
				traceQUEUE_SEND( pxQueue );
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	4618      	mov	r0, r3
 8004870:	f003 ff7c 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	460b      	mov	r3, r1
 800487e:	4601      	mov	r1, r0
 8004880:	205a      	movs	r0, #90	; 0x5a
 8004882:	f003 fa5d 	bl	8007d40 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488c:	f000 fa74 	bl	8004d78 <prvCopyDataToQueue>
 8004890:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b00      	cmp	r3, #0
 8004898:	d010      	beq.n	80048bc <xQueueGenericSend+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	3324      	adds	r3, #36	; 0x24
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 f8a2 	bl	80059e8 <xTaskRemoveFromEventList>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d013      	beq.n	80048d2 <xQueueGenericSend+0x14a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048aa:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <xQueueGenericSend+0x258>)
 80048ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	e00a      	b.n	80048d2 <xQueueGenericSend+0x14a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <xQueueGenericSend+0x14a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <xQueueGenericSend+0x258>)
 80048c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048d2:	f002 f827 	bl	8006924 <vPortExitCritical>
				return pdPASS;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07d      	b.n	80049d6 <xQueueGenericSend+0x24e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d110      	bne.n	8004902 <xQueueGenericSend+0x17a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048e0:	f002 f820 	bl	8006924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	4618      	mov	r0, r3
 80048e8:	f003 ff40 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	460b      	mov	r3, r1
 80048f6:	4601      	mov	r1, r0
 80048f8:	205a      	movs	r0, #90	; 0x5a
 80048fa:	f003 fa21 	bl	8007d40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	e069      	b.n	80049d6 <xQueueGenericSend+0x24e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <xQueueGenericSend+0x18e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	4618      	mov	r0, r3
 800490e:	f001 f8d5 	bl	8005abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004916:	f002 f805 	bl	8006924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800491a:	f000 fe07 	bl	800552c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800491e:	f001 ffcd 	bl	80068bc <vPortEnterCritical>
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004928:	b25b      	sxtb	r3, r3
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492e:	d103      	bne.n	8004938 <xQueueGenericSend+0x1b0>
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800493e:	b25b      	sxtb	r3, r3
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004944:	d103      	bne.n	800494e <xQueueGenericSend+0x1c6>
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800494e:	f001 ffe9 	bl	8006924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004952:	1d3a      	adds	r2, r7, #4
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f001 f8c4 	bl	8005ae8 <xTaskCheckForTimeOut>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d124      	bne.n	80049b0 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004968:	f000 fafe 	bl	8004f68 <prvIsQueueFull>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <xQueueGenericSend+0x21c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	3310      	adds	r3, #16
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 ffde 	bl	800593c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004982:	f000 fa89 	bl	8004e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004986:	f000 fddf 	bl	8005548 <xTaskResumeAll>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	f47f af62 	bne.w	8004856 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <xQueueGenericSend+0x258>)
 8004994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	e758      	b.n	8004856 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049a6:	f000 fa77 	bl	8004e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049aa:	f000 fdcd 	bl	8005548 <xTaskResumeAll>
 80049ae:	e752      	b.n	8004856 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b2:	f000 fa71 	bl	8004e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049b6:	f000 fdc7 	bl	8005548 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	4618      	mov	r0, r3
 80049be:	f003 fed5 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	460b      	mov	r3, r1
 80049cc:	4601      	mov	r1, r0
 80049ce:	205a      	movs	r0, #90	; 0x5a
 80049d0:	f003 f9b6 	bl	8007d40 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80049d4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3738      	adds	r7, #56	; 0x38
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	e000ed04 	.word	0xe000ed04

080049e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08e      	sub	sp, #56	; 0x38
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10c      	bne.n	8004a16 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	b672      	cpsid	i
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	b662      	cpsie	i
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d103      	bne.n	8004a24 <xQueueGenericSendFromISR+0x40>
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <xQueueGenericSendFromISR+0x44>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <xQueueGenericSendFromISR+0x46>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10c      	bne.n	8004a48 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	b672      	cpsid	i
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	b662      	cpsie	i
 8004a42:	623b      	str	r3, [r7, #32]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d103      	bne.n	8004a56 <xQueueGenericSendFromISR+0x72>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <xQueueGenericSendFromISR+0x76>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <xQueueGenericSendFromISR+0x78>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10c      	bne.n	8004a7a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	b672      	cpsid	i
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	b662      	cpsie	i
 8004a74:	61fb      	str	r3, [r7, #28]
}
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a7a:	f002 f80f 	bl	8006a9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	b672      	cpsid	i
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	b662      	cpsie	i
 8004a96:	61ba      	str	r2, [r7, #24]
 8004a98:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <xQueueGenericSendFromISR+0xcc>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d136      	bne.n	8004b1e <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	4618      	mov	r0, r3
 8004abe:	f003 fe55 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2060      	movs	r0, #96	; 0x60
 8004aca:	f003 f869 	bl	8007ba0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad4:	f000 f950 	bl	8004d78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ad8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae0:	d112      	bne.n	8004b08 <xQueueGenericSendFromISR+0x124>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d016      	beq.n	8004b18 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 ff7a 	bl	80059e8 <xTaskRemoveFromEventList>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00e      	beq.n	8004b18 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e007      	b.n	8004b18 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	b25a      	sxtb	r2, r3
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b1c:	e00b      	b.n	8004b36 <xQueueGenericSendFromISR+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	4618      	mov	r0, r3
 8004b22:	f003 fe23 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004b26:	4601      	mov	r1, r0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2060      	movs	r0, #96	; 0x60
 8004b2e:	f003 f837 	bl	8007ba0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3738      	adds	r7, #56	; 0x38
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b08f      	sub	sp, #60	; 0x3c
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <xQueueReceive+0x34>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	b672      	cpsid	i
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	b662      	cpsie	i
 8004b7a:	623b      	str	r3, [r7, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <xQueueReceive+0x42>
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <xQueueReceive+0x46>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <xQueueReceive+0x48>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10c      	bne.n	8004bb2 <xQueueReceive+0x66>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	b672      	cpsid	i
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	b662      	cpsie	i
 8004bac:	61fb      	str	r3, [r7, #28]
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bb2:	f001 f91f 	bl	8005df4 <xTaskGetSchedulerState>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <xQueueReceive+0x76>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <xQueueReceive+0x7a>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <xQueueReceive+0x7c>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10c      	bne.n	8004be6 <xQueueReceive+0x9a>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	b672      	cpsid	i
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	b662      	cpsie	i
 8004be0:	61bb      	str	r3, [r7, #24]
}
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004be6:	f001 fe69 	bl	80068bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d02f      	beq.n	8004c56 <xQueueReceive+0x10a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bfa:	f000 f927 	bl	8004e4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	4618      	mov	r0, r3
 8004c02:	f003 fdb3 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004c06:	4604      	mov	r4, r0
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f003 fdaf 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2101      	movs	r1, #1
 8004c14:	9100      	str	r1, [sp, #0]
 8004c16:	4621      	mov	r1, r4
 8004c18:	205c      	movs	r0, #92	; 0x5c
 8004c1a:	f003 f891 	bl	8007d40 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00f      	beq.n	8004c4e <xQueueReceive+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	3310      	adds	r3, #16
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fed8 	bl	80059e8 <xTaskRemoveFromEventList>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <xQueueReceive+0x102>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c3e:	4b4d      	ldr	r3, [pc, #308]	; (8004d74 <xQueueReceive+0x228>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c4e:	f001 fe69 	bl	8006924 <vPortExitCritical>
				return pdPASS;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e08a      	b.n	8004d6c <xQueueReceive+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d113      	bne.n	8004c84 <xQueueReceive+0x138>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c5c:	f001 fe62 	bl	8006924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	4618      	mov	r0, r3
 8004c64:	f003 fd82 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004c68:	4604      	mov	r4, r0
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f003 fd7e 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004c70:	4602      	mov	r2, r0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2101      	movs	r1, #1
 8004c76:	9100      	str	r1, [sp, #0]
 8004c78:	4621      	mov	r1, r4
 8004c7a:	205c      	movs	r0, #92	; 0x5c
 8004c7c:	f003 f860 	bl	8007d40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e073      	b.n	8004d6c <xQueueReceive+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <xQueueReceive+0x14c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c8a:	f107 0310 	add.w	r3, r7, #16
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 ff14 	bl	8005abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c98:	f001 fe44 	bl	8006924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c9c:	f000 fc46 	bl	800552c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ca0:	f001 fe0c 	bl	80068bc <vPortEnterCritical>
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004caa:	b25b      	sxtb	r3, r3
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb0:	d103      	bne.n	8004cba <xQueueReceive+0x16e>
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc0:	b25b      	sxtb	r3, r3
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc6:	d103      	bne.n	8004cd0 <xQueueReceive+0x184>
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd0:	f001 fe28 	bl	8006924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cd4:	1d3a      	adds	r2, r7, #4
 8004cd6:	f107 0310 	add.w	r3, r7, #16
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 ff03 	bl	8005ae8 <xTaskCheckForTimeOut>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d124      	bne.n	8004d32 <xQueueReceive+0x1e6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cea:	f000 f927 	bl	8004f3c <prvIsQueueEmpty>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d018      	beq.n	8004d26 <xQueueReceive+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	3324      	adds	r3, #36	; 0x24
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fe1d 	bl	800593c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d04:	f000 f8c8 	bl	8004e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d08:	f000 fc1e 	bl	8005548 <xTaskResumeAll>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f47f af69 	bne.w	8004be6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004d14:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <xQueueReceive+0x228>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	e75f      	b.n	8004be6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d28:	f000 f8b6 	bl	8004e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d2c:	f000 fc0c 	bl	8005548 <xTaskResumeAll>
 8004d30:	e759      	b.n	8004be6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d34:	f000 f8b0 	bl	8004e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d38:	f000 fc06 	bl	8005548 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3e:	f000 f8fd 	bl	8004f3c <prvIsQueueEmpty>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f43f af4e 	beq.w	8004be6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f003 fd0d 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004d52:	4604      	mov	r4, r0
 8004d54:	2000      	movs	r0, #0
 8004d56:	f003 fd09 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2101      	movs	r1, #1
 8004d60:	9100      	str	r1, [sp, #0]
 8004d62:	4621      	mov	r1, r4
 8004d64:	205c      	movs	r0, #92	; 0x5c
 8004d66:	f002 ffeb 	bl	8007d40 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004d6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3734      	adds	r7, #52	; 0x34
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd90      	pop	{r4, r7, pc}
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10d      	bne.n	8004db2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d14d      	bne.n	8004e3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f001 f844 	bl	8005e30 <xTaskPriorityDisinherit>
 8004da8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	e043      	b.n	8004e3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d119      	bne.n	8004dec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6858      	ldr	r0, [r3, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	f003 fe50 	bl	8008a68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	441a      	add	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d32b      	bcc.n	8004e3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	e026      	b.n	8004e3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68d8      	ldr	r0, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	461a      	mov	r2, r3
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	f003 fe36 	bl	8008a68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	425b      	negs	r3, r3
 8004e06:	441a      	add	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d207      	bcs.n	8004e28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	425b      	negs	r3, r3
 8004e22:	441a      	add	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d105      	bne.n	8004e3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e42:	697b      	ldr	r3, [r7, #20]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d018      	beq.n	8004e90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	441a      	add	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d303      	bcc.n	8004e80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68d9      	ldr	r1, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6838      	ldr	r0, [r7, #0]
 8004e8c:	f003 fdec 	bl	8008a68 <memcpy>
	}
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ea0:	f001 fd0c 	bl	80068bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eac:	e011      	b.n	8004ed2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3324      	adds	r3, #36	; 0x24
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fd94 	bl	80059e8 <xTaskRemoveFromEventList>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ec6:	f000 fe75 	bl	8005bb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dce9      	bgt.n	8004eae <prvUnlockQueue+0x16>
 8004eda:	e000      	b.n	8004ede <prvUnlockQueue+0x46>
					break;
 8004edc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ee6:	f001 fd1d 	bl	8006924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004eea:	f001 fce7 	bl	80068bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ef6:	e011      	b.n	8004f1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d012      	beq.n	8004f26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3310      	adds	r3, #16
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fd6f 	bl	80059e8 <xTaskRemoveFromEventList>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f10:	f000 fe50 	bl	8005bb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f14:	7bbb      	ldrb	r3, [r7, #14]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	dce9      	bgt.n	8004ef8 <prvUnlockQueue+0x60>
 8004f24:	e000      	b.n	8004f28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	22ff      	movs	r2, #255	; 0xff
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f30:	f001 fcf8 	bl	8006924 <vPortExitCritical>
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f44:	f001 fcba 	bl	80068bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f50:	2301      	movs	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e001      	b.n	8004f5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f5a:	f001 fce3 	bl	8006924 <vPortExitCritical>

	return xReturn;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f70:	f001 fca4 	bl	80068bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d102      	bne.n	8004f86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e001      	b.n	8004f8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f8a:	f001 fccb 	bl	8006924 <vPortExitCritical>

	return xReturn;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e01e      	b.n	8004fe6 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fa8:	4a13      	ldr	r2, [pc, #76]	; (8004ff8 <vQueueAddToRegistry+0x60>)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d115      	bne.n	8004fe0 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fb4:	4910      	ldr	r1, [pc, #64]	; (8004ff8 <vQueueAddToRegistry+0x60>)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <vQueueAddToRegistry+0x60>)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f003 fbcd 	bl	800876c <SEGGER_SYSVIEW_ShrinkId>
 8004fd2:	4601      	mov	r1, r0
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2071      	movs	r0, #113	; 0x71
 8004fda:	f002 fde1 	bl	8007ba0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8004fde:	e006      	b.n	8004fee <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b07      	cmp	r3, #7
 8004fea:	d9dd      	bls.n	8004fa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200012d4 	.word	0x200012d4

08004ffc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800500c:	f001 fc56 	bl	80068bc <vPortEnterCritical>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005016:	b25b      	sxtb	r3, r3
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501c:	d103      	bne.n	8005026 <vQueueWaitForMessageRestricted+0x2a>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800502c:	b25b      	sxtb	r3, r3
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005032:	d103      	bne.n	800503c <vQueueWaitForMessageRestricted+0x40>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503c:	f001 fc72 	bl	8006924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3324      	adds	r3, #36	; 0x24
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fc99 	bl	8005988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005056:	6978      	ldr	r0, [r7, #20]
 8005058:	f7ff ff1e 	bl	8004e98 <prvUnlockQueue>
	}
 800505c:	bf00      	nop
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08e      	sub	sp, #56	; 0x38
 8005068:	af04      	add	r7, sp, #16
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10c      	bne.n	8005092 <xTaskCreateStatic+0x2e>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	b672      	cpsid	i
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	b662      	cpsie	i
 800508c:	623b      	str	r3, [r7, #32]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10c      	bne.n	80050b2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	b672      	cpsid	i
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	b662      	cpsie	i
 80050ac:	61fb      	str	r3, [r7, #28]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050b2:	23c0      	movs	r3, #192	; 0xc0
 80050b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2bc0      	cmp	r3, #192	; 0xc0
 80050ba:	d00c      	beq.n	80050d6 <xTaskCreateStatic+0x72>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	b672      	cpsid	i
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	b662      	cpsie	i
 80050d0:	61bb      	str	r3, [r7, #24]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01e      	beq.n	800511c <xTaskCreateStatic+0xb8>
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01b      	beq.n	800511c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050f6:	2300      	movs	r3, #0
 80050f8:	9303      	str	r3, [sp, #12]
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	9302      	str	r3, [sp, #8]
 80050fe:	f107 0314 	add.w	r3, r7, #20
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f850 	bl	80051b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005116:	f000 f8f9 	bl	800530c <prvAddNewTaskToReadyList>
 800511a:	e001      	b.n	8005120 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005120:	697b      	ldr	r3, [r7, #20]
	}
 8005122:	4618      	mov	r0, r3
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800512a:	b580      	push	{r7, lr}
 800512c:	b08c      	sub	sp, #48	; 0x30
 800512e:	af04      	add	r7, sp, #16
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4618      	mov	r0, r3
 8005140:	f001 fcf0 	bl	8006b24 <pvPortMalloc>
 8005144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00e      	beq.n	800516a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800514c:	20c0      	movs	r0, #192	; 0xc0
 800514e:	f001 fce9 	bl	8006b24 <pvPortMalloc>
 8005152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	631a      	str	r2, [r3, #48]	; 0x30
 8005160:	e005      	b.n	800516e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005162:	6978      	ldr	r0, [r7, #20]
 8005164:	f001 fda8 	bl	8006cb8 <vPortFree>
 8005168:	e001      	b.n	800516e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d017      	beq.n	80051a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800517c:	88fa      	ldrh	r2, [r7, #6]
 800517e:	2300      	movs	r3, #0
 8005180:	9303      	str	r3, [sp, #12]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	9302      	str	r3, [sp, #8]
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f80e 	bl	80051b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005198:	69f8      	ldr	r0, [r7, #28]
 800519a:	f000 f8b7 	bl	800530c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800519e:	2301      	movs	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	e002      	b.n	80051aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051aa:	69bb      	ldr	r3, [r7, #24]
	}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3720      	adds	r7, #32
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	461a      	mov	r2, r3
 80051cc:	21a5      	movs	r1, #165	; 0xa5
 80051ce:	f003 fc59 	bl	8008a84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80051dc:	440b      	add	r3, r1
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f023 0307 	bic.w	r3, r3, #7
 80051ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	b672      	cpsid	i
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	b662      	cpsie	i
 800520a:	617b      	str	r3, [r7, #20]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01f      	beq.n	800525c <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	e012      	b.n	8005248 <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	7819      	ldrb	r1, [r3, #0]
 800522a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	3334      	adds	r3, #52	; 0x34
 8005232:	460a      	mov	r2, r1
 8005234:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d9e9      	bls.n	8005222 <prvInitialiseNewTask+0x6e>
 800524e:	e000      	b.n	8005252 <prvInitialiseNewTask+0x9e>
			{
				break;
 8005250:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800525a:	e003      	b.n	8005264 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	2b37      	cmp	r3, #55	; 0x37
 8005268:	d901      	bls.n	800526e <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800526a:	2337      	movs	r3, #55	; 0x37
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005278:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2200      	movs	r2, #0
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff f8d5 	bl	8004434 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	3318      	adds	r3, #24
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff f8d0 	bl	8004434 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005298:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	3358      	adds	r3, #88	; 0x58
 80052be:	2260      	movs	r2, #96	; 0x60
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f003 fbde 	bl	8008a84 <memset>
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	4a0d      	ldr	r2, [pc, #52]	; (8005300 <prvInitialiseNewTask+0x14c>)
 80052cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <prvInitialiseNewTask+0x150>)
 80052d2:	661a      	str	r2, [r3, #96]	; 0x60
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	4a0c      	ldr	r2, [pc, #48]	; (8005308 <prvInitialiseNewTask+0x154>)
 80052d8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68f9      	ldr	r1, [r7, #12]
 80052de:	69b8      	ldr	r0, [r7, #24]
 80052e0:	f001 f9de 	bl	80066a0 <pxPortInitialiseStack>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052f6:	bf00      	nop
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	08008df0 	.word	0x08008df0
 8005304:	08008e10 	.word	0x08008e10
 8005308:	08008dd0 	.word	0x08008dd0

0800530c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800530c:	b5b0      	push	{r4, r5, r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005314:	f001 fad2 	bl	80068bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005318:	4b3c      	ldr	r3, [pc, #240]	; (800540c <prvAddNewTaskToReadyList+0x100>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	4a3b      	ldr	r2, [pc, #236]	; (800540c <prvAddNewTaskToReadyList+0x100>)
 8005320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005322:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <prvAddNewTaskToReadyList+0x104>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800532a:	4a39      	ldr	r2, [pc, #228]	; (8005410 <prvAddNewTaskToReadyList+0x104>)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005330:	4b36      	ldr	r3, [pc, #216]	; (800540c <prvAddNewTaskToReadyList+0x100>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d110      	bne.n	800535a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005338:	f000 fc60 	bl	8005bfc <prvInitialiseTaskLists>
 800533c:	e00d      	b.n	800535a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800533e:	4b35      	ldr	r3, [pc, #212]	; (8005414 <prvAddNewTaskToReadyList+0x108>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005346:	4b32      	ldr	r3, [pc, #200]	; (8005410 <prvAddNewTaskToReadyList+0x104>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	429a      	cmp	r2, r3
 8005352:	d802      	bhi.n	800535a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005354:	4a2e      	ldr	r2, [pc, #184]	; (8005410 <prvAddNewTaskToReadyList+0x104>)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800535a:	4b2f      	ldr	r3, [pc, #188]	; (8005418 <prvAddNewTaskToReadyList+0x10c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	4a2d      	ldr	r2, [pc, #180]	; (8005418 <prvAddNewTaskToReadyList+0x10c>)
 8005362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005364:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <prvAddNewTaskToReadyList+0x10c>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <prvAddNewTaskToReadyList+0x94>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4618      	mov	r0, r3
 8005376:	f003 f8d3 	bl	8008520 <SEGGER_SYSVIEW_OnTaskCreate>
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	461d      	mov	r5, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461c      	mov	r4, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	1ae3      	subs	r3, r4, r3
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	462b      	mov	r3, r5
 800539c:	f001 fe6c 	bl	8007078 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f003 f940 	bl	8008628 <SEGGER_SYSVIEW_OnTaskStartReady>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <prvAddNewTaskToReadyList+0x110>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <prvAddNewTaskToReadyList+0xb0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <prvAddNewTaskToReadyList+0x110>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <prvAddNewTaskToReadyList+0x114>)
 80053ca:	441a      	add	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7ff f83b 	bl	800444e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053d8:	f001 faa4 	bl	8006924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053dc:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <prvAddNewTaskToReadyList+0x108>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <prvAddNewTaskToReadyList+0x104>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d207      	bcs.n	8005402 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <prvAddNewTaskToReadyList+0x118>)
 80053f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bdb0      	pop	{r4, r5, r7, pc}
 800540a:	bf00      	nop
 800540c:	200017e8 	.word	0x200017e8
 8005410:	20001314 	.word	0x20001314
 8005414:	200017f4 	.word	0x200017f4
 8005418:	20001804 	.word	0x20001804
 800541c:	200017f0 	.word	0x200017f0
 8005420:	20001318 	.word	0x20001318
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005436:	463a      	mov	r2, r7
 8005438:	1d39      	adds	r1, r7, #4
 800543a:	f107 0308 	add.w	r3, r7, #8
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe ffa4 	bl	800438c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005444:	6839      	ldr	r1, [r7, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	9202      	str	r2, [sp, #8]
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	2300      	movs	r3, #0
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	460a      	mov	r2, r1
 8005456:	492d      	ldr	r1, [pc, #180]	; (800550c <vTaskStartScheduler+0xe4>)
 8005458:	482d      	ldr	r0, [pc, #180]	; (8005510 <vTaskStartScheduler+0xe8>)
 800545a:	f7ff fe03 	bl	8005064 <xTaskCreateStatic>
 800545e:	4603      	mov	r3, r0
 8005460:	4a2c      	ldr	r2, [pc, #176]	; (8005514 <vTaskStartScheduler+0xec>)
 8005462:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005464:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <vTaskStartScheduler+0xec>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800546c:	2301      	movs	r3, #1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e001      	b.n	8005476 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d102      	bne.n	8005482 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800547c:	f000 fdb4 	bl	8005fe8 <xTimerCreateTimerTask>
 8005480:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d12b      	bne.n	80054e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	b672      	cpsid	i
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	b662      	cpsie	i
 800549c:	613b      	str	r3, [r7, #16]
}
 800549e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054a0:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <vTaskStartScheduler+0xf0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3358      	adds	r3, #88	; 0x58
 80054a6:	4a1d      	ldr	r2, [pc, #116]	; (800551c <vTaskStartScheduler+0xf4>)
 80054a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <vTaskStartScheduler+0xf8>)
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054b2:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <vTaskStartScheduler+0xfc>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054b8:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <vTaskStartScheduler+0x100>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80054be:	4b16      	ldr	r3, [pc, #88]	; (8005518 <vTaskStartScheduler+0xf0>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <vTaskStartScheduler+0xec>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d102      	bne.n	80054d0 <vTaskStartScheduler+0xa8>
 80054ca:	f003 f80d 	bl	80084e8 <SEGGER_SYSVIEW_OnIdle>
 80054ce:	e004      	b.n	80054da <vTaskStartScheduler+0xb2>
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <vTaskStartScheduler+0xf0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f003 f865 	bl	80085a4 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054da:	f001 f971 	bl	80067c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054de:	e010      	b.n	8005502 <vTaskStartScheduler+0xda>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e6:	d10c      	bne.n	8005502 <vTaskStartScheduler+0xda>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	b672      	cpsid	i
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	b662      	cpsie	i
 80054fc:	60fb      	str	r3, [r7, #12]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <vTaskStartScheduler+0xd8>
}
 8005502:	bf00      	nop
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	08008c54 	.word	0x08008c54
 8005510:	08005bcd 	.word	0x08005bcd
 8005514:	2000180c 	.word	0x2000180c
 8005518:	20001314 	.word	0x20001314
 800551c:	20000014 	.word	0x20000014
 8005520:	20001808 	.word	0x20001808
 8005524:	200017f4 	.word	0x200017f4
 8005528:	200017ec 	.word	0x200017ec

0800552c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <vTaskSuspendAll+0x18>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	4a03      	ldr	r2, [pc, #12]	; (8005544 <vTaskSuspendAll+0x18>)
 8005538:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	20001810 	.word	0x20001810

08005548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005556:	4b45      	ldr	r3, [pc, #276]	; (800566c <xTaskResumeAll+0x124>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10c      	bne.n	8005578 <xTaskResumeAll+0x30>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	b672      	cpsid	i
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	b662      	cpsie	i
 8005572:	603b      	str	r3, [r7, #0]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005578:	f001 f9a0 	bl	80068bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800557c:	4b3b      	ldr	r3, [pc, #236]	; (800566c <xTaskResumeAll+0x124>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3b01      	subs	r3, #1
 8005582:	4a3a      	ldr	r2, [pc, #232]	; (800566c <xTaskResumeAll+0x124>)
 8005584:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005586:	4b39      	ldr	r3, [pc, #228]	; (800566c <xTaskResumeAll+0x124>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d166      	bne.n	800565c <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800558e:	4b38      	ldr	r3, [pc, #224]	; (8005670 <xTaskResumeAll+0x128>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d062      	beq.n	800565c <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005596:	e033      	b.n	8005600 <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005598:	4b36      	ldr	r3, [pc, #216]	; (8005674 <xTaskResumeAll+0x12c>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3318      	adds	r3, #24
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe ffaf 	bl	8004508 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe ffaa 	bl	8004508 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f003 f836 	bl	8008628 <SEGGER_SYSVIEW_OnTaskStartReady>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c0:	4b2d      	ldr	r3, [pc, #180]	; (8005678 <xTaskResumeAll+0x130>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d903      	bls.n	80055d0 <xTaskResumeAll+0x88>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	4a2a      	ldr	r2, [pc, #168]	; (8005678 <xTaskResumeAll+0x130>)
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4a27      	ldr	r2, [pc, #156]	; (800567c <xTaskResumeAll+0x134>)
 80055de:	441a      	add	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f7fe ff31 	bl	800444e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	4b23      	ldr	r3, [pc, #140]	; (8005680 <xTaskResumeAll+0x138>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <xTaskResumeAll+0x13c>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005600:	4b1c      	ldr	r3, [pc, #112]	; (8005674 <xTaskResumeAll+0x12c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1c7      	bne.n	8005598 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800560e:	f000 fbd1 	bl	8005db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005612:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <xTaskResumeAll+0x140>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d010      	beq.n	8005640 <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800561e:	f000 f859 	bl	80056d4 <xTaskIncrementTick>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 8005628:	4b16      	ldr	r3, [pc, #88]	; (8005684 <xTaskResumeAll+0x13c>)
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3b01      	subs	r3, #1
 8005632:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f1      	bne.n	800561e <xTaskResumeAll+0xd6>

						uxPendedTicks = 0;
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <xTaskResumeAll+0x140>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005640:	4b10      	ldr	r3, [pc, #64]	; (8005684 <xTaskResumeAll+0x13c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d009      	beq.n	800565c <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <xTaskResumeAll+0x144>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800565c:	f001 f962 	bl	8006924 <vPortExitCritical>

	return xAlreadyYielded;
 8005660:	68bb      	ldr	r3, [r7, #8]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20001810 	.word	0x20001810
 8005670:	200017e8 	.word	0x200017e8
 8005674:	200017a8 	.word	0x200017a8
 8005678:	200017f0 	.word	0x200017f0
 800567c:	20001318 	.word	0x20001318
 8005680:	20001314 	.word	0x20001314
 8005684:	200017fc 	.word	0x200017fc
 8005688:	200017f8 	.word	0x200017f8
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <xTaskGetTickCount+0x1c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800569c:	687b      	ldr	r3, [r7, #4]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	200017ec 	.word	0x200017ec

080056b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056b6:	f001 f9f1 	bl	8006a9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80056ba:	2300      	movs	r3, #0
 80056bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80056be:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <xTaskGetTickCountFromISR+0x20>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056c4:	683b      	ldr	r3, [r7, #0]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200017ec 	.word	0x200017ec

080056d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056de:	4b52      	ldr	r3, [pc, #328]	; (8005828 <xTaskIncrementTick+0x154>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 808f 	bne.w	8005806 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <xTaskIncrementTick+0x158>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056f0:	4a4e      	ldr	r2, [pc, #312]	; (800582c <xTaskIncrementTick+0x158>)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d122      	bne.n	8005742 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80056fc:	4b4c      	ldr	r3, [pc, #304]	; (8005830 <xTaskIncrementTick+0x15c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	b672      	cpsid	i
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	b662      	cpsie	i
 800571a:	603b      	str	r3, [r7, #0]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <xTaskIncrementTick+0x4a>
 8005720:	4b43      	ldr	r3, [pc, #268]	; (8005830 <xTaskIncrementTick+0x15c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b43      	ldr	r3, [pc, #268]	; (8005834 <xTaskIncrementTick+0x160>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a41      	ldr	r2, [pc, #260]	; (8005830 <xTaskIncrementTick+0x15c>)
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	4a41      	ldr	r2, [pc, #260]	; (8005834 <xTaskIncrementTick+0x160>)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	4b40      	ldr	r3, [pc, #256]	; (8005838 <xTaskIncrementTick+0x164>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3301      	adds	r3, #1
 800573a:	4a3f      	ldr	r2, [pc, #252]	; (8005838 <xTaskIncrementTick+0x164>)
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	f000 fb39 	bl	8005db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005742:	4b3e      	ldr	r3, [pc, #248]	; (800583c <xTaskIncrementTick+0x168>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	429a      	cmp	r2, r3
 800574a:	d34d      	bcc.n	80057e8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800574c:	4b38      	ldr	r3, [pc, #224]	; (8005830 <xTaskIncrementTick+0x15c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005756:	4b39      	ldr	r3, [pc, #228]	; (800583c <xTaskIncrementTick+0x168>)
 8005758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800575c:	601a      	str	r2, [r3, #0]
					break;
 800575e:	e043      	b.n	80057e8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005760:	4b33      	ldr	r3, [pc, #204]	; (8005830 <xTaskIncrementTick+0x15c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d203      	bcs.n	8005780 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005778:	4a30      	ldr	r2, [pc, #192]	; (800583c <xTaskIncrementTick+0x168>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800577e:	e033      	b.n	80057e8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3304      	adds	r3, #4
 8005784:	4618      	mov	r0, r3
 8005786:	f7fe febf 	bl	8004508 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	3318      	adds	r3, #24
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe feb6 	bl	8004508 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f002 ff42 	bl	8008628 <SEGGER_SYSVIEW_OnTaskStartReady>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4b25      	ldr	r3, [pc, #148]	; (8005840 <xTaskIncrementTick+0x16c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d903      	bls.n	80057b8 <xTaskIncrementTick+0xe4>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	4a22      	ldr	r2, [pc, #136]	; (8005840 <xTaskIncrementTick+0x16c>)
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <xTaskIncrementTick+0x170>)
 80057c6:	441a      	add	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fe3d 	bl	800444e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d8:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <xTaskIncrementTick+0x174>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3b4      	bcc.n	800574c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80057e2:	2301      	movs	r3, #1
 80057e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e6:	e7b1      	b.n	800574c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057e8:	4b17      	ldr	r3, [pc, #92]	; (8005848 <xTaskIncrementTick+0x174>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	4915      	ldr	r1, [pc, #84]	; (8005844 <xTaskIncrementTick+0x170>)
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d907      	bls.n	8005810 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005800:	2301      	movs	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e004      	b.n	8005810 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005806:	4b11      	ldr	r3, [pc, #68]	; (800584c <xTaskIncrementTick+0x178>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	4a0f      	ldr	r2, [pc, #60]	; (800584c <xTaskIncrementTick+0x178>)
 800580e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005810:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <xTaskIncrementTick+0x17c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005818:	2301      	movs	r3, #1
 800581a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800581c:	697b      	ldr	r3, [r7, #20]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20001810 	.word	0x20001810
 800582c:	200017ec 	.word	0x200017ec
 8005830:	200017a0 	.word	0x200017a0
 8005834:	200017a4 	.word	0x200017a4
 8005838:	20001800 	.word	0x20001800
 800583c:	20001808 	.word	0x20001808
 8005840:	200017f0 	.word	0x200017f0
 8005844:	20001318 	.word	0x20001318
 8005848:	20001314 	.word	0x20001314
 800584c:	200017f8 	.word	0x200017f8
 8005850:	200017fc 	.word	0x200017fc

08005854 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800585a:	4b31      	ldr	r3, [pc, #196]	; (8005920 <vTaskSwitchContext+0xcc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005862:	4b30      	ldr	r3, [pc, #192]	; (8005924 <vTaskSwitchContext+0xd0>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005868:	e056      	b.n	8005918 <vTaskSwitchContext+0xc4>
		xYieldPending = pdFALSE;
 800586a:	4b2e      	ldr	r3, [pc, #184]	; (8005924 <vTaskSwitchContext+0xd0>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005870:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <vTaskSwitchContext+0xd4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e012      	b.n	800589e <vTaskSwitchContext+0x4a>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10c      	bne.n	8005898 <vTaskSwitchContext+0x44>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	b672      	cpsid	i
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	b662      	cpsie	i
 8005892:	607b      	str	r3, [r7, #4]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <vTaskSwitchContext+0x42>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3b01      	subs	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	4923      	ldr	r1, [pc, #140]	; (800592c <vTaskSwitchContext+0xd8>)
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0e2      	beq.n	8005878 <vTaskSwitchContext+0x24>
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4a1b      	ldr	r2, [pc, #108]	; (800592c <vTaskSwitchContext+0xd8>)
 80058be:	4413      	add	r3, r2
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	605a      	str	r2, [r3, #4]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	3308      	adds	r3, #8
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d104      	bne.n	80058e2 <vTaskSwitchContext+0x8e>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4a11      	ldr	r2, [pc, #68]	; (8005930 <vTaskSwitchContext+0xdc>)
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <vTaskSwitchContext+0xd4>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80058f2:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <vTaskSwitchContext+0xdc>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <vTaskSwitchContext+0xe0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d102      	bne.n	8005904 <vTaskSwitchContext+0xb0>
 80058fe:	f002 fdf3 	bl	80084e8 <SEGGER_SYSVIEW_OnIdle>
 8005902:	e004      	b.n	800590e <vTaskSwitchContext+0xba>
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <vTaskSwitchContext+0xdc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f002 fe4b 	bl	80085a4 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <vTaskSwitchContext+0xdc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3358      	adds	r3, #88	; 0x58
 8005914:	4a08      	ldr	r2, [pc, #32]	; (8005938 <vTaskSwitchContext+0xe4>)
 8005916:	6013      	str	r3, [r2, #0]
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20001810 	.word	0x20001810
 8005924:	200017fc 	.word	0x200017fc
 8005928:	200017f0 	.word	0x200017f0
 800592c:	20001318 	.word	0x20001318
 8005930:	20001314 	.word	0x20001314
 8005934:	2000180c 	.word	0x2000180c
 8005938:	20000014 	.word	0x20000014

0800593c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10c      	bne.n	8005966 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	b672      	cpsid	i
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	b662      	cpsie	i
 8005960:	60fb      	str	r3, [r7, #12]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <vTaskPlaceOnEventList+0x48>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3318      	adds	r3, #24
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fe fd91 	bl	8004496 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005974:	2101      	movs	r1, #1
 8005976:	6838      	ldr	r0, [r7, #0]
 8005978:	f000 fad0 	bl	8005f1c <prvAddCurrentTaskToDelayedList>
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20001314 	.word	0x20001314

08005988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10c      	bne.n	80059b4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	b672      	cpsid	i
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	b662      	cpsie	i
 80059ae:	617b      	str	r3, [r7, #20]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <vTaskPlaceOnEventListRestricted+0x5c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3318      	adds	r3, #24
 80059ba:	4619      	mov	r1, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7fe fd46 	bl	800444e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80059c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80059ce:	2024      	movs	r0, #36	; 0x24
 80059d0:	f002 f88c 	bl	8007aec <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	68b8      	ldr	r0, [r7, #8]
 80059d8:	f000 faa0 	bl	8005f1c <prvAddCurrentTaskToDelayedList>
	}
 80059dc:	bf00      	nop
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20001314 	.word	0x20001314

080059e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10c      	bne.n	8005a18 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	b672      	cpsid	i
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	b662      	cpsie	i
 8005a12:	60fb      	str	r3, [r7, #12]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe fd73 	bl	8004508 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a22:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <xTaskRemoveFromEventList+0xbc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d121      	bne.n	8005a6e <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fd6a 	bl	8004508 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f002 fdf6 	bl	8008628 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a40:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <xTaskRemoveFromEventList+0xc0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d903      	bls.n	8005a50 <xTaskRemoveFromEventList+0x68>
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <xTaskRemoveFromEventList+0xc0>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <xTaskRemoveFromEventList+0xc4>)
 8005a5e:	441a      	add	r2, r3
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe fcf1 	bl	800444e <vListInsertEnd>
 8005a6c:	e005      	b.n	8005a7a <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3318      	adds	r3, #24
 8005a72:	4619      	mov	r1, r3
 8005a74:	480e      	ldr	r0, [pc, #56]	; (8005ab0 <xTaskRemoveFromEventList+0xc8>)
 8005a76:	f7fe fcea 	bl	800444e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <xTaskRemoveFromEventList+0xcc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d905      	bls.n	8005a94 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <xTaskRemoveFromEventList+0xd0>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e001      	b.n	8005a98 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a98:	697b      	ldr	r3, [r7, #20]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20001810 	.word	0x20001810
 8005aa8:	200017f0 	.word	0x200017f0
 8005aac:	20001318 	.word	0x20001318
 8005ab0:	200017a8 	.word	0x200017a8
 8005ab4:	20001314 	.word	0x20001314
 8005ab8:	200017fc 	.word	0x200017fc

08005abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <vTaskInternalSetTimeOutState+0x24>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <vTaskInternalSetTimeOutState+0x28>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	605a      	str	r2, [r3, #4]
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20001800 	.word	0x20001800
 8005ae4:	200017ec 	.word	0x200017ec

08005ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10c      	bne.n	8005b12 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	b672      	cpsid	i
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	b662      	cpsie	i
 8005b0c:	613b      	str	r3, [r7, #16]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10c      	bne.n	8005b32 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	b672      	cpsid	i
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	b662      	cpsie	i
 8005b2c:	60fb      	str	r3, [r7, #12]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005b32:	f000 fec3 	bl	80068bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b36:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <xTaskCheckForTimeOut+0xc4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b4e:	d102      	bne.n	8005b56 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e023      	b.n	8005b9e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <xTaskCheckForTimeOut+0xc8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d007      	beq.n	8005b72 <xTaskCheckForTimeOut+0x8a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e015      	b.n	8005b9e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d20b      	bcs.n	8005b94 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff ff97 	bl	8005abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
 8005b92:	e004      	b.n	8005b9e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b9e:	f000 fec1 	bl	8006924 <vPortExitCritical>

	return xReturn;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	200017ec 	.word	0x200017ec
 8005bb0:	20001800 	.word	0x20001800

08005bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <vTaskMissedYield+0x14>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	200017fc 	.word	0x200017fc

08005bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bd4:	f000 f852 	bl	8005c7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <prvIdleTask+0x28>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d9f9      	bls.n	8005bd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <prvIdleTask+0x2c>)
 8005be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bf0:	e7f0      	b.n	8005bd4 <prvIdleTask+0x8>
 8005bf2:	bf00      	nop
 8005bf4:	20001318 	.word	0x20001318
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	e00c      	b.n	8005c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <prvInitialiseTaskLists+0x60>)
 8005c14:	4413      	add	r3, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fbec 	bl	80043f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b37      	cmp	r3, #55	; 0x37
 8005c26:	d9ef      	bls.n	8005c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c28:	480d      	ldr	r0, [pc, #52]	; (8005c60 <prvInitialiseTaskLists+0x64>)
 8005c2a:	f7fe fbe3 	bl	80043f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c2e:	480d      	ldr	r0, [pc, #52]	; (8005c64 <prvInitialiseTaskLists+0x68>)
 8005c30:	f7fe fbe0 	bl	80043f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c34:	480c      	ldr	r0, [pc, #48]	; (8005c68 <prvInitialiseTaskLists+0x6c>)
 8005c36:	f7fe fbdd 	bl	80043f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c3a:	480c      	ldr	r0, [pc, #48]	; (8005c6c <prvInitialiseTaskLists+0x70>)
 8005c3c:	f7fe fbda 	bl	80043f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c40:	480b      	ldr	r0, [pc, #44]	; (8005c70 <prvInitialiseTaskLists+0x74>)
 8005c42:	f7fe fbd7 	bl	80043f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <prvInitialiseTaskLists+0x78>)
 8005c48:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <prvInitialiseTaskLists+0x64>)
 8005c4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <prvInitialiseTaskLists+0x7c>)
 8005c4e:	4a05      	ldr	r2, [pc, #20]	; (8005c64 <prvInitialiseTaskLists+0x68>)
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20001318 	.word	0x20001318
 8005c60:	20001778 	.word	0x20001778
 8005c64:	2000178c 	.word	0x2000178c
 8005c68:	200017a8 	.word	0x200017a8
 8005c6c:	200017bc 	.word	0x200017bc
 8005c70:	200017d4 	.word	0x200017d4
 8005c74:	200017a0 	.word	0x200017a0
 8005c78:	200017a4 	.word	0x200017a4

08005c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c82:	e019      	b.n	8005cb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c84:	f000 fe1a 	bl	80068bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c88:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <prvCheckTasksWaitingTermination+0x50>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fc37 	bl	8004508 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <prvCheckTasksWaitingTermination+0x54>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <prvCheckTasksWaitingTermination+0x54>)
 8005ca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <prvCheckTasksWaitingTermination+0x58>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <prvCheckTasksWaitingTermination+0x58>)
 8005cac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cae:	f000 fe39 	bl	8006924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f848 	bl	8005d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <prvCheckTasksWaitingTermination+0x58>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e1      	bne.n	8005c84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	200017bc 	.word	0x200017bc
 8005cd0:	200017e8 	.word	0x200017e8
 8005cd4:	200017d0 	.word	0x200017d0

08005cd8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005ce4:	e005      	b.n	8005cf2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2ba5      	cmp	r3, #165	; 0xa5
 8005cf8:	d0f5      	beq.n	8005ce6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	089b      	lsrs	r3, r3, #2
 8005cfe:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	b29b      	uxth	r3, r3
	}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <uxTaskGetStackHighWaterMark+0x14>
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <uxTaskGetStackHighWaterMark+0x34>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	e000      	b.n	8005d26 <uxTaskGetStackHighWaterMark+0x16>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005d2e:	6938      	ldr	r0, [r7, #16]
 8005d30:	f7ff ffd2 	bl	8005cd8 <prvTaskCheckFreeStackSpace>
 8005d34:	4603      	mov	r3, r0
 8005d36:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005d38:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20001314 	.word	0x20001314

08005d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3358      	adds	r3, #88	; 0x58
 8005d54:	4618      	mov	r0, r3
 8005d56:	f002 feab 	bl	8008ab0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d108      	bne.n	8005d76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 ffa5 	bl	8006cb8 <vPortFree>
				vPortFree( pxTCB );
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 ffa2 	bl	8006cb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d74:	e01a      	b.n	8005dac <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d103      	bne.n	8005d88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 ff99 	bl	8006cb8 <vPortFree>
	}
 8005d86:	e011      	b.n	8005dac <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d00c      	beq.n	8005dac <prvDeleteTCB+0x64>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	b672      	cpsid	i
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	b662      	cpsie	i
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <prvDeleteTCB+0x62>
	}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <prvResetNextTaskUnblockTime+0x38>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <prvResetNextTaskUnblockTime+0x3c>)
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dcc:	e008      	b.n	8005de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <prvResetNextTaskUnblockTime+0x38>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4a04      	ldr	r2, [pc, #16]	; (8005df0 <prvResetNextTaskUnblockTime+0x3c>)
 8005dde:	6013      	str	r3, [r2, #0]
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	200017a0 	.word	0x200017a0
 8005df0:	20001808 	.word	0x20001808

08005df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <xTaskGetSchedulerState+0x34>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e02:	2301      	movs	r3, #1
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	e008      	b.n	8005e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <xTaskGetSchedulerState+0x38>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e10:	2302      	movs	r3, #2
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	e001      	b.n	8005e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e1a:	687b      	ldr	r3, [r7, #4]
	}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	200017f4 	.word	0x200017f4
 8005e2c:	20001810 	.word	0x20001810

08005e30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d05f      	beq.n	8005f06 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e46:	4b32      	ldr	r3, [pc, #200]	; (8005f10 <xTaskPriorityDisinherit+0xe0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00c      	beq.n	8005e6a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	b672      	cpsid	i
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	b662      	cpsie	i
 8005e64:	60fb      	str	r3, [r7, #12]
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10c      	bne.n	8005e8c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	b672      	cpsid	i
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	b662      	cpsie	i
 8005e86:	60bb      	str	r3, [r7, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	1e5a      	subs	r2, r3, #1
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d031      	beq.n	8005f06 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d12d      	bne.n	8005f06 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	3304      	adds	r3, #4
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe fb2a 	bl	8004508 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	204a      	movs	r0, #74	; 0x4a
 8005eba:	f001 fe35 	bl	8007b28 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	619a      	str	r2, [r3, #24]
					//Original Code From FreeRTOS 10.2.0
					//prvAddTaskToReadyList( pxTCB );
					//Segger StyleView Code
					prvReaddTaskToReadyList( pxTCB );
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <xTaskPriorityDisinherit+0xe4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d903      	bls.n	8005ee6 <xTaskPriorityDisinherit+0xb6>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	4a0c      	ldr	r2, [pc, #48]	; (8005f14 <xTaskPriorityDisinherit+0xe4>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <xTaskPriorityDisinherit+0xe8>)
 8005ef4:	441a      	add	r2, r3
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fe faa6 	bl	800444e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f02:	2301      	movs	r3, #1
 8005f04:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f06:	697b      	ldr	r3, [r7, #20]
	}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20001314 	.word	0x20001314
 8005f14:	200017f0 	.word	0x200017f0
 8005f18:	20001318 	.word	0x20001318

08005f1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f26:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f2c:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fae8 	bl	8004508 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3e:	d110      	bne.n	8005f62 <prvAddCurrentTaskToDelayedList+0x46>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
		    traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8005f46:	4b23      	ldr	r3, [pc, #140]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	211b      	movs	r1, #27
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f002 fbad 	bl	80086ac <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f52:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	481f      	ldr	r0, [pc, #124]	; (8005fd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f5c:	f7fe fa77 	bl	800444e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f60:	e032      	b.n	8005fc8 <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d20f      	bcs.n	8005f9a <prvAddCurrentTaskToDelayedList+0x7e>
			    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005f7a:	4b16      	ldr	r3, [pc, #88]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2104      	movs	r1, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f002 fb93 	bl	80086ac <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f86:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7fe fa7f 	bl	8004496 <vListInsert>
}
 8005f98:	e016      	b.n	8005fc8 <prvAddCurrentTaskToDelayedList+0xac>
			    traceMOVED_TASK_TO_DELAYED_LIST();
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2104      	movs	r1, #4
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f002 fb83 	bl	80086ac <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f7fe fa6f 	bl	8004496 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d202      	bcs.n	8005fc8 <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 8005fc2:	4a08      	ldr	r2, [pc, #32]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6013      	str	r3, [r2, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	200017ec 	.word	0x200017ec
 8005fd4:	20001314 	.word	0x20001314
 8005fd8:	200017d4 	.word	0x200017d4
 8005fdc:	200017a4 	.word	0x200017a4
 8005fe0:	200017a0 	.word	0x200017a0
 8005fe4:	20001808 	.word	0x20001808

08005fe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ff2:	f000 fb15 	bl	8006620 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	; (800606c <xTimerCreateTimerTask+0x84>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d021      	beq.n	8006042 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006006:	1d3a      	adds	r2, r7, #4
 8006008:	f107 0108 	add.w	r1, r7, #8
 800600c:	f107 030c 	add.w	r3, r7, #12
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe f9d5 	bl	80043c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	9202      	str	r2, [sp, #8]
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	2302      	movs	r3, #2
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	2300      	movs	r3, #0
 8006026:	460a      	mov	r2, r1
 8006028:	4911      	ldr	r1, [pc, #68]	; (8006070 <xTimerCreateTimerTask+0x88>)
 800602a:	4812      	ldr	r0, [pc, #72]	; (8006074 <xTimerCreateTimerTask+0x8c>)
 800602c:	f7ff f81a 	bl	8005064 <xTaskCreateStatic>
 8006030:	4603      	mov	r3, r0
 8006032:	4a11      	ldr	r2, [pc, #68]	; (8006078 <xTimerCreateTimerTask+0x90>)
 8006034:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006036:	4b10      	ldr	r3, [pc, #64]	; (8006078 <xTimerCreateTimerTask+0x90>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800603e:	2301      	movs	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10c      	bne.n	8006062 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	b672      	cpsid	i
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	b662      	cpsie	i
 800605c:	613b      	str	r3, [r7, #16]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006062:	697b      	ldr	r3, [r7, #20]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20001844 	.word	0x20001844
 8006070:	08008c5c 	.word	0x08008c5c
 8006074:	080061b9 	.word	0x080061b9
 8006078:	20001848 	.word	0x20001848

0800607c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800608a:	2300      	movs	r3, #0
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10c      	bne.n	80060ae <xTimerGenericCommand+0x32>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	b672      	cpsid	i
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	b662      	cpsie	i
 80060a8:	623b      	str	r3, [r7, #32]
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060ae:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <xTimerGenericCommand+0x9c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d02a      	beq.n	800610c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b05      	cmp	r3, #5
 80060c6:	dc18      	bgt.n	80060fa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060c8:	f7ff fe94 	bl	8005df4 <xTaskGetSchedulerState>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d109      	bne.n	80060e6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060d2:	4b11      	ldr	r3, [pc, #68]	; (8006118 <xTimerGenericCommand+0x9c>)
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	f107 0110 	add.w	r1, r7, #16
 80060da:	2300      	movs	r3, #0
 80060dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060de:	f7fe fb53 	bl	8004788 <xQueueGenericSend>
 80060e2:	6278      	str	r0, [r7, #36]	; 0x24
 80060e4:	e012      	b.n	800610c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <xTimerGenericCommand+0x9c>)
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	f107 0110 	add.w	r1, r7, #16
 80060ee:	2300      	movs	r3, #0
 80060f0:	2200      	movs	r2, #0
 80060f2:	f7fe fb49 	bl	8004788 <xQueueGenericSend>
 80060f6:	6278      	str	r0, [r7, #36]	; 0x24
 80060f8:	e008      	b.n	800610c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060fa:	4b07      	ldr	r3, [pc, #28]	; (8006118 <xTimerGenericCommand+0x9c>)
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	f107 0110 	add.w	r1, r7, #16
 8006102:	2300      	movs	r3, #0
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	f7fe fc6d 	bl	80049e4 <xQueueGenericSendFromISR>
 800610a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800610e:	4618      	mov	r0, r3
 8006110:	3728      	adds	r7, #40	; 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20001844 	.word	0x20001844

0800611c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af02      	add	r7, sp, #8
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006126:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <prvProcessExpiredTimer+0x98>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	3304      	adds	r3, #4
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe f9e7 	bl	8004508 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d024      	beq.n	8006192 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	18d1      	adds	r1, r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	6978      	ldr	r0, [r7, #20]
 8006156:	f000 f8d3 	bl	8006300 <prvInsertTimerInActiveList>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d021      	beq.n	80061a4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006160:	2300      	movs	r3, #0
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	2100      	movs	r1, #0
 800616a:	6978      	ldr	r0, [r7, #20]
 800616c:	f7ff ff86 	bl	800607c <xTimerGenericCommand>
 8006170:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d115      	bne.n	80061a4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	b672      	cpsid	i
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	b662      	cpsie	i
 800618c:	60fb      	str	r3, [r7, #12]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	6978      	ldr	r0, [r7, #20]
 80061aa:	4798      	blx	r3
}
 80061ac:	bf00      	nop
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	2000183c 	.word	0x2000183c

080061b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f857 	bl	8006278 <prvGetNextExpireTime>
 80061ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4619      	mov	r1, r3
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f803 	bl	80061dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061d6:	f000 f8d5 	bl	8006384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061da:	e7f1      	b.n	80061c0 <prvTimerTask+0x8>

080061dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061e6:	f7ff f9a1 	bl	800552c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f866 	bl	80062c0 <prvSampleTimeNow>
 80061f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d130      	bne.n	800625e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <prvProcessTimerOrBlockTask+0x3c>
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	429a      	cmp	r2, r3
 8006208:	d806      	bhi.n	8006218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800620a:	f7ff f99d 	bl	8005548 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ff83 	bl	800611c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006216:	e024      	b.n	8006262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800621e:	4b13      	ldr	r3, [pc, #76]	; (800626c <prvProcessTimerOrBlockTask+0x90>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <prvProcessTimerOrBlockTask+0x50>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <prvProcessTimerOrBlockTask+0x52>
 800622c:	2300      	movs	r3, #0
 800622e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <prvProcessTimerOrBlockTask+0x94>)
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	4619      	mov	r1, r3
 800623e:	f7fe fedd 	bl	8004ffc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006242:	f7ff f981 	bl	8005548 <xTaskResumeAll>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <prvProcessTimerOrBlockTask+0x98>)
 800624e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	f3bf 8f6f 	isb	sy
}
 800625c:	e001      	b.n	8006262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800625e:	f7ff f973 	bl	8005548 <xTaskResumeAll>
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20001840 	.word	0x20001840
 8006270:	20001844 	.word	0x20001844
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <prvGetNextExpireTime+0x44>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <prvGetNextExpireTime+0x16>
 800628a:	2201      	movs	r2, #1
 800628c:	e000      	b.n	8006290 <prvGetNextExpireTime+0x18>
 800628e:	2200      	movs	r2, #0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800629c:	4b07      	ldr	r3, [pc, #28]	; (80062bc <prvGetNextExpireTime+0x44>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e001      	b.n	80062ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062ac:	68fb      	ldr	r3, [r7, #12]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	2000183c 	.word	0x2000183c

080062c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062c8:	f7ff f9e2 	bl	8005690 <xTaskGetTickCount>
 80062cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <prvSampleTimeNow+0x3c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d205      	bcs.n	80062e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062d8:	f000 f93c 	bl	8006554 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e002      	b.n	80062ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062ea:	4a04      	ldr	r2, [pc, #16]	; (80062fc <prvSampleTimeNow+0x3c>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	2000184c 	.word	0x2000184c

08006300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d812      	bhi.n	800634c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	d302      	bcc.n	800633a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e01b      	b.n	8006372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <prvInsertTimerInActiveList+0x7c>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3304      	adds	r3, #4
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7fe f8a6 	bl	8004496 <vListInsert>
 800634a:	e012      	b.n	8006372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d206      	bcs.n	8006362 <prvInsertTimerInActiveList+0x62>
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e007      	b.n	8006372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <prvInsertTimerInActiveList+0x80>)
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3304      	adds	r3, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7fe f892 	bl	8004496 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006372:	697b      	ldr	r3, [r7, #20]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20001840 	.word	0x20001840
 8006380:	2000183c 	.word	0x2000183c

08006384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	; 0x38
 8006388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800638a:	e0d0      	b.n	800652e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	da1a      	bge.n	80063c8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	3304      	adds	r3, #4
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10c      	bne.n	80063b8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	b672      	cpsid	i
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	b662      	cpsie	i
 80063b2:	61fb      	str	r3, [r7, #28]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063be:	6850      	ldr	r0, [r2, #4]
 80063c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c2:	6892      	ldr	r2, [r2, #8]
 80063c4:	4611      	mov	r1, r2
 80063c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f2c0 80ae 	blt.w	800652c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	3304      	adds	r3, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe f891 	bl	8004508 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063e6:	463b      	mov	r3, r7
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff ff69 	bl	80062c0 <prvSampleTimeNow>
 80063ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b09      	cmp	r3, #9
 80063f4:	f200 809b 	bhi.w	800652e <prvProcessReceivedCommands+0x1aa>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <prvProcessReceivedCommands+0x7c>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006429 	.word	0x08006429
 8006404:	08006429 	.word	0x08006429
 8006408:	08006429 	.word	0x08006429
 800640c:	080064a1 	.word	0x080064a1
 8006410:	080064b5 	.word	0x080064b5
 8006414:	08006503 	.word	0x08006503
 8006418:	08006429 	.word	0x08006429
 800641c:	08006429 	.word	0x08006429
 8006420:	080064a1 	.word	0x080064a1
 8006424:	080064b5 	.word	0x080064b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	b2da      	uxtb	r2, r3
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	18d1      	adds	r1, r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006448:	f7ff ff5a 	bl	8006300 <prvInsertTimerInActiveList>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d06d      	beq.n	800652e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006458:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d062      	beq.n	800652e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	441a      	add	r2, r3
 8006470:	2300      	movs	r3, #0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	2100      	movs	r1, #0
 8006478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647a:	f7ff fdff 	bl	800607c <xTimerGenericCommand>
 800647e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d153      	bne.n	800652e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	b672      	cpsid	i
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	b662      	cpsie	i
 800649a:	61bb      	str	r3, [r7, #24]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80064b2:	e03c      	b.n	800652e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10c      	bne.n	80064ee <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	b672      	cpsid	i
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	b662      	cpsie	i
 80064e8:	617b      	str	r3, [r7, #20]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	18d1      	adds	r1, r2, r3
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fc:	f7ff ff00 	bl	8006300 <prvInsertTimerInActiveList>
					break;
 8006500:	e015      	b.n	800652e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d103      	bne.n	8006518 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006512:	f000 fbd1 	bl	8006cb8 <vPortFree>
 8006516:	e00a      	b.n	800652e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	b2da      	uxtb	r2, r3
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800652a:	e000      	b.n	800652e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800652c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <prvProcessReceivedCommands+0x1cc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	1d39      	adds	r1, r7, #4
 8006534:	2200      	movs	r2, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fb08 	bl	8004b4c <xQueueReceive>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	f47f af24 	bne.w	800638c <prvProcessReceivedCommands+0x8>
	}
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	3730      	adds	r7, #48	; 0x30
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20001844 	.word	0x20001844

08006554 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800655a:	e04a      	b.n	80065f2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800655c:	4b2e      	ldr	r3, [pc, #184]	; (8006618 <prvSwitchTimerLists+0xc4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006566:	4b2c      	ldr	r3, [pc, #176]	; (8006618 <prvSwitchTimerLists+0xc4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3304      	adds	r3, #4
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd ffc7 	bl	8004508 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d030      	beq.n	80065f2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4413      	add	r3, r2
 8006598:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d90e      	bls.n	80065c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ae:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <prvSwitchTimerLists+0xc4>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7fd ff6c 	bl	8004496 <vListInsert>
 80065be:	e018      	b.n	80065f2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065c0:	2300      	movs	r3, #0
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	2300      	movs	r3, #0
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	2100      	movs	r1, #0
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7ff fd56 	bl	800607c <xTimerGenericCommand>
 80065d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10c      	bne.n	80065f2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	b672      	cpsid	i
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	b662      	cpsie	i
 80065ec:	603b      	str	r3, [r7, #0]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <prvSwitchTimerLists+0xc4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1af      	bne.n	800655c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <prvSwitchTimerLists+0xc4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <prvSwitchTimerLists+0xc8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a04      	ldr	r2, [pc, #16]	; (8006618 <prvSwitchTimerLists+0xc4>)
 8006608:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800660a:	4a04      	ldr	r2, [pc, #16]	; (800661c <prvSwitchTimerLists+0xc8>)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	6013      	str	r3, [r2, #0]
}
 8006610:	bf00      	nop
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	2000183c 	.word	0x2000183c
 800661c:	20001840 	.word	0x20001840

08006620 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006626:	f000 f949 	bl	80068bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800662a:	4b15      	ldr	r3, [pc, #84]	; (8006680 <prvCheckForValidListAndQueue+0x60>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d120      	bne.n	8006674 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006632:	4814      	ldr	r0, [pc, #80]	; (8006684 <prvCheckForValidListAndQueue+0x64>)
 8006634:	f7fd fede 	bl	80043f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006638:	4813      	ldr	r0, [pc, #76]	; (8006688 <prvCheckForValidListAndQueue+0x68>)
 800663a:	f7fd fedb 	bl	80043f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <prvCheckForValidListAndQueue+0x6c>)
 8006640:	4a10      	ldr	r2, [pc, #64]	; (8006684 <prvCheckForValidListAndQueue+0x64>)
 8006642:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006644:	4b12      	ldr	r3, [pc, #72]	; (8006690 <prvCheckForValidListAndQueue+0x70>)
 8006646:	4a10      	ldr	r2, [pc, #64]	; (8006688 <prvCheckForValidListAndQueue+0x68>)
 8006648:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800664a:	2300      	movs	r3, #0
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	4b11      	ldr	r3, [pc, #68]	; (8006694 <prvCheckForValidListAndQueue+0x74>)
 8006650:	4a11      	ldr	r2, [pc, #68]	; (8006698 <prvCheckForValidListAndQueue+0x78>)
 8006652:	2110      	movs	r1, #16
 8006654:	200a      	movs	r0, #10
 8006656:	f7fd ffeb 	bl	8004630 <xQueueGenericCreateStatic>
 800665a:	4603      	mov	r3, r0
 800665c:	4a08      	ldr	r2, [pc, #32]	; (8006680 <prvCheckForValidListAndQueue+0x60>)
 800665e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <prvCheckForValidListAndQueue+0x60>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <prvCheckForValidListAndQueue+0x60>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	490b      	ldr	r1, [pc, #44]	; (800669c <prvCheckForValidListAndQueue+0x7c>)
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe fc92 	bl	8004f98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006674:	f000 f956 	bl	8006924 <vPortExitCritical>
}
 8006678:	bf00      	nop
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20001844 	.word	0x20001844
 8006684:	20001814 	.word	0x20001814
 8006688:	20001828 	.word	0x20001828
 800668c:	2000183c 	.word	0x2000183c
 8006690:	20001840 	.word	0x20001840
 8006694:	200018f0 	.word	0x200018f0
 8006698:	20001850 	.word	0x20001850
 800669c:	08008c64 	.word	0x08008c64

080066a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3b04      	subs	r3, #4
 80066b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b04      	subs	r3, #4
 80066be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f023 0201 	bic.w	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3b04      	subs	r3, #4
 80066ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066d0:	4a0c      	ldr	r2, [pc, #48]	; (8006704 <pxPortInitialiseStack+0x64>)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3b14      	subs	r3, #20
 80066da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3b04      	subs	r3, #4
 80066e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f06f 0202 	mvn.w	r2, #2
 80066ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3b20      	subs	r3, #32
 80066f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066f6:	68fb      	ldr	r3, [r7, #12]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	08006709 	.word	0x08006709

08006708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <prvTaskExitError+0x5c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800671a:	d00c      	beq.n	8006736 <prvTaskExitError+0x2e>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <prvTaskExitError+0x2c>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	b672      	cpsid	i
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	b662      	cpsie	i
 800674a:	60bb      	str	r3, [r7, #8]
}
 800674c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800674e:	bf00      	nop
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0fc      	beq.n	8006750 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	20000010 	.word	0x20000010
	...

08006770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <pxCurrentTCBConst2>)
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	6808      	ldr	r0, [r1, #0]
 8006776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	f380 8809 	msr	PSP, r0
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8811 	msr	BASEPRI, r0
 800678a:	4770      	bx	lr
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst2>:
 8006790:	20001314 	.word	0x20001314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006798:	4808      	ldr	r0, [pc, #32]	; (80067bc <prvPortStartFirstTask+0x24>)
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	f380 8808 	msr	MSP, r0
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8814 	msr	CONTROL, r0
 80067aa:	b662      	cpsie	i
 80067ac:	b661      	cpsie	f
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	df00      	svc	0
 80067b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ba:	bf00      	nop
 80067bc:	e000ed08 	.word	0xe000ed08

080067c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067c6:	4b37      	ldr	r3, [pc, #220]	; (80068a4 <xPortStartScheduler+0xe4>)
 80067c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	22ff      	movs	r2, #255	; 0xff
 80067d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4b2f      	ldr	r3, [pc, #188]	; (80068a8 <xPortStartScheduler+0xe8>)
 80067ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ee:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <xPortStartScheduler+0xec>)
 80067f0:	2207      	movs	r2, #7
 80067f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067f4:	e009      	b.n	800680a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067f6:	4b2d      	ldr	r3, [pc, #180]	; (80068ac <xPortStartScheduler+0xec>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	4a2b      	ldr	r2, [pc, #172]	; (80068ac <xPortStartScheduler+0xec>)
 80067fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	b2db      	uxtb	r3, r3
 8006808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d0ef      	beq.n	80067f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006816:	4b25      	ldr	r3, [pc, #148]	; (80068ac <xPortStartScheduler+0xec>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1c3 0307 	rsb	r3, r3, #7
 800681e:	2b04      	cmp	r3, #4
 8006820:	d00c      	beq.n	800683c <xPortStartScheduler+0x7c>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	b672      	cpsid	i
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	b662      	cpsie	i
 8006836:	60bb      	str	r3, [r7, #8]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <xPortStartScheduler+0xec>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	021b      	lsls	r3, r3, #8
 8006842:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <xPortStartScheduler+0xec>)
 8006844:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006846:	4b19      	ldr	r3, [pc, #100]	; (80068ac <xPortStartScheduler+0xec>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800684e:	4a17      	ldr	r2, [pc, #92]	; (80068ac <xPortStartScheduler+0xec>)
 8006850:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <xPortStartScheduler+0xf0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a14      	ldr	r2, [pc, #80]	; (80068b0 <xPortStartScheduler+0xf0>)
 8006860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006864:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006866:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <xPortStartScheduler+0xf0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a11      	ldr	r2, [pc, #68]	; (80068b0 <xPortStartScheduler+0xf0>)
 800686c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006870:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006872:	f000 f8e5 	bl	8006a40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006876:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <xPortStartScheduler+0xf4>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800687c:	f000 f904 	bl	8006a88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <xPortStartScheduler+0xf8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a0c      	ldr	r2, [pc, #48]	; (80068b8 <xPortStartScheduler+0xf8>)
 8006886:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800688a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800688c:	f7ff ff84 	bl	8006798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006890:	f7fe ffe0 	bl	8005854 <vTaskSwitchContext>
	prvTaskExitError();
 8006894:	f7ff ff38 	bl	8006708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	e000e400 	.word	0xe000e400
 80068a8:	20001940 	.word	0x20001940
 80068ac:	20001944 	.word	0x20001944
 80068b0:	e000ed20 	.word	0xe000ed20
 80068b4:	20000010 	.word	0x20000010
 80068b8:	e000ef34 	.word	0xe000ef34

080068bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	b672      	cpsid	i
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	b662      	cpsie	i
 80068d6:	607b      	str	r3, [r7, #4]
}
 80068d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068da:	4b10      	ldr	r3, [pc, #64]	; (800691c <vPortEnterCritical+0x60>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	4a0e      	ldr	r2, [pc, #56]	; (800691c <vPortEnterCritical+0x60>)
 80068e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068e4:	4b0d      	ldr	r3, [pc, #52]	; (800691c <vPortEnterCritical+0x60>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d111      	bne.n	8006910 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <vPortEnterCritical+0x64>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00c      	beq.n	8006910 <vPortEnterCritical+0x54>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	b672      	cpsid	i
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	b662      	cpsie	i
 800690a:	603b      	str	r3, [r7, #0]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vPortEnterCritical+0x52>
	}
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	20000010 	.word	0x20000010
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <vPortExitCritical+0x54>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10c      	bne.n	800694c <vPortExitCritical+0x28>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	b672      	cpsid	i
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	b662      	cpsie	i
 8006946:	607b      	str	r3, [r7, #4]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <vPortExitCritical+0x54>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3b01      	subs	r3, #1
 8006952:	4a09      	ldr	r2, [pc, #36]	; (8006978 <vPortExitCritical+0x54>)
 8006954:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006956:	4b08      	ldr	r3, [pc, #32]	; (8006978 <vPortExitCritical+0x54>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d105      	bne.n	800696a <vPortExitCritical+0x46>
 800695e:	2300      	movs	r3, #0
 8006960:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f383 8811 	msr	BASEPRI, r3
}
 8006968:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20000010 	.word	0x20000010
 800697c:	00000000 	.word	0x00000000

08006980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006980:	f3ef 8009 	mrs	r0, PSP
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <pxCurrentTCBConst>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f01e 0f10 	tst.w	lr, #16
 8006990:	bf08      	it	eq
 8006992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699a:	6010      	str	r0, [r2, #0]
 800699c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069a4:	b672      	cpsid	i
 80069a6:	f380 8811 	msr	BASEPRI, r0
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	b662      	cpsie	i
 80069b4:	f7fe ff4e 	bl	8005854 <vTaskSwitchContext>
 80069b8:	f04f 0000 	mov.w	r0, #0
 80069bc:	f380 8811 	msr	BASEPRI, r0
 80069c0:	bc09      	pop	{r0, r3}
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	f01e 0f10 	tst.w	lr, #16
 80069ce:	bf08      	it	eq
 80069d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069d4:	f380 8809 	msr	PSP, r0
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop

080069e0 <pxCurrentTCBConst>:
 80069e0:	20001314 	.word	0x20001314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	b672      	cpsid	i
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	b662      	cpsie	i
 8006a02:	607b      	str	r3, [r7, #4]
}
 8006a04:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006a06:	f001 fcf5 	bl	80083f4 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a0a:	f7fe fe63 	bl	80056d4 <xTaskIncrementTick>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <SysTick_Handler+0x3a>
		{
		    traceISR_EXIT_TO_SCHEDULER();
 8006a14:	f001 fd4c 	bl	80084b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a18:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <SysTick_Handler+0x54>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	e001      	b.n	8006a26 <SysTick_Handler+0x3e>
		}
		else
		{
		    traceISR_EXIT();
 8006a22:	f001 fd29 	bl	8008478 <SEGGER_SYSVIEW_RecordExitISR>
 8006a26:	2300      	movs	r3, #0
 8006a28:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	f383 8811 	msr	BASEPRI, r3
}
 8006a30:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	e000ed04 	.word	0xe000ed04

08006a40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <vPortSetupTimerInterrupt+0x34>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <vPortSetupTimerInterrupt+0x38>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <vPortSetupTimerInterrupt+0x3c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <vPortSetupTimerInterrupt+0x40>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	099b      	lsrs	r3, r3, #6
 8006a5c:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <vPortSetupTimerInterrupt+0x44>)
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a62:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <vPortSetupTimerInterrupt+0x34>)
 8006a64:	2207      	movs	r2, #7
 8006a66:	601a      	str	r2, [r3, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	e000e010 	.word	0xe000e010
 8006a78:	e000e018 	.word	0xe000e018
 8006a7c:	20000004 	.word	0x20000004
 8006a80:	10624dd3 	.word	0x10624dd3
 8006a84:	e000e014 	.word	0xe000e014

08006a88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a98 <vPortEnableVFP+0x10>
 8006a8c:	6801      	ldr	r1, [r0, #0]
 8006a8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a92:	6001      	str	r1, [r0, #0]
 8006a94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a96:	bf00      	nop
 8006a98:	e000ed88 	.word	0xe000ed88

08006a9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006aa2:	f3ef 8305 	mrs	r3, IPSR
 8006aa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b0f      	cmp	r3, #15
 8006aac:	d916      	bls.n	8006adc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aae:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <vPortValidateInterruptPriority+0x78>)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ab8:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <vPortValidateInterruptPriority+0x7c>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	7afa      	ldrb	r2, [r7, #11]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d20c      	bcs.n	8006adc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	b672      	cpsid	i
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	b662      	cpsie	i
 8006ad6:	607b      	str	r3, [r7, #4]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006adc:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <vPortValidateInterruptPriority+0x80>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ae4:	4b0e      	ldr	r3, [pc, #56]	; (8006b20 <vPortValidateInterruptPriority+0x84>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d90c      	bls.n	8006b06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	b672      	cpsid	i
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	b662      	cpsie	i
 8006b00:	603b      	str	r3, [r7, #0]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <vPortValidateInterruptPriority+0x68>
	}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	e000e3f0 	.word	0xe000e3f0
 8006b18:	20001940 	.word	0x20001940
 8006b1c:	e000ed0c 	.word	0xe000ed0c
 8006b20:	20001944 	.word	0x20001944

08006b24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b30:	f7fe fcfc 	bl	800552c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b34:	4b5b      	ldr	r3, [pc, #364]	; (8006ca4 <pvPortMalloc+0x180>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b3c:	f000 f91a 	bl	8006d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b40:	4b59      	ldr	r3, [pc, #356]	; (8006ca8 <pvPortMalloc+0x184>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f040 8092 	bne.w	8006c72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01f      	beq.n	8006b94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006b54:	2208      	movs	r2, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4413      	add	r3, r2
 8006b5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d016      	beq.n	8006b94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f023 0307 	bic.w	r3, r3, #7
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00c      	beq.n	8006b94 <pvPortMalloc+0x70>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	b672      	cpsid	i
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	b662      	cpsie	i
 8006b8e:	617b      	str	r3, [r7, #20]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d06b      	beq.n	8006c72 <pvPortMalloc+0x14e>
 8006b9a:	4b44      	ldr	r3, [pc, #272]	; (8006cac <pvPortMalloc+0x188>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d866      	bhi.n	8006c72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ba4:	4b42      	ldr	r3, [pc, #264]	; (8006cb0 <pvPortMalloc+0x18c>)
 8006ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ba8:	4b41      	ldr	r3, [pc, #260]	; (8006cb0 <pvPortMalloc+0x18c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bae:	e004      	b.n	8006bba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d903      	bls.n	8006bcc <pvPortMalloc+0xa8>
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f1      	bne.n	8006bb0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bcc:	4b35      	ldr	r3, [pc, #212]	; (8006ca4 <pvPortMalloc+0x180>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d04d      	beq.n	8006c72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2208      	movs	r2, #8
 8006bdc:	4413      	add	r3, r2
 8006bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	1ad2      	subs	r2, r2, r3
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d921      	bls.n	8006c3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00c      	beq.n	8006c24 <pvPortMalloc+0x100>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	b672      	cpsid	i
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	b662      	cpsie	i
 8006c1e:	613b      	str	r3, [r7, #16]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	1ad2      	subs	r2, r2, r3
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c36:	69b8      	ldr	r0, [r7, #24]
 8006c38:	f000 f8fe 	bl	8006e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <pvPortMalloc+0x188>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	4a19      	ldr	r2, [pc, #100]	; (8006cac <pvPortMalloc+0x188>)
 8006c48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c4a:	4b18      	ldr	r3, [pc, #96]	; (8006cac <pvPortMalloc+0x188>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b19      	ldr	r3, [pc, #100]	; (8006cb4 <pvPortMalloc+0x190>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d203      	bcs.n	8006c5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c56:	4b15      	ldr	r3, [pc, #84]	; (8006cac <pvPortMalloc+0x188>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a16      	ldr	r2, [pc, #88]	; (8006cb4 <pvPortMalloc+0x190>)
 8006c5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <pvPortMalloc+0x184>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c72:	f7fe fc69 	bl	8005548 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00c      	beq.n	8006c9a <pvPortMalloc+0x176>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	b672      	cpsid	i
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	b662      	cpsie	i
 8006c94:	60fb      	str	r3, [r7, #12]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <pvPortMalloc+0x174>
	return pvReturn;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3728      	adds	r7, #40	; 0x28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20005550 	.word	0x20005550
 8006ca8:	2000555c 	.word	0x2000555c
 8006cac:	20005554 	.word	0x20005554
 8006cb0:	20005548 	.word	0x20005548
 8006cb4:	20005558 	.word	0x20005558

08006cb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d04c      	beq.n	8006d64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cca:	2308      	movs	r3, #8
 8006ccc:	425b      	negs	r3, r3
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4b23      	ldr	r3, [pc, #140]	; (8006d6c <vPortFree+0xb4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10c      	bne.n	8006d00 <vPortFree+0x48>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	b672      	cpsid	i
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	b662      	cpsie	i
 8006cfa:	60fb      	str	r3, [r7, #12]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00c      	beq.n	8006d22 <vPortFree+0x6a>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	b672      	cpsid	i
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	b662      	cpsie	i
 8006d1c:	60bb      	str	r3, [r7, #8]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <vPortFree+0xb4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d019      	beq.n	8006d64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d115      	bne.n	8006d64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <vPortFree+0xb4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	401a      	ands	r2, r3
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d48:	f7fe fbf0 	bl	800552c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <vPortFree+0xb8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4413      	add	r3, r2
 8006d56:	4a06      	ldr	r2, [pc, #24]	; (8006d70 <vPortFree+0xb8>)
 8006d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d5a:	6938      	ldr	r0, [r7, #16]
 8006d5c:	f000 f86c 	bl	8006e38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d60:	f7fe fbf2 	bl	8005548 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d64:	bf00      	nop
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	2000555c 	.word	0x2000555c
 8006d70:	20005554 	.word	0x20005554

08006d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d80:	4b27      	ldr	r3, [pc, #156]	; (8006e20 <prvHeapInit+0xac>)
 8006d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3307      	adds	r3, #7
 8006d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0307 	bic.w	r3, r3, #7
 8006d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <prvHeapInit+0xac>)
 8006da4:	4413      	add	r3, r2
 8006da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dac:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <prvHeapInit+0xb0>)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006db2:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <prvHeapInit+0xb0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0307 	bic.w	r3, r3, #7
 8006dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4a15      	ldr	r2, [pc, #84]	; (8006e28 <prvHeapInit+0xb4>)
 8006dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <prvHeapInit+0xb4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dde:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <prvHeapInit+0xb4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006df4:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <prvHeapInit+0xb4>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <prvHeapInit+0xb8>)
 8006e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <prvHeapInit+0xbc>)
 8006e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e0c:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <prvHeapInit+0xc0>)
 8006e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	20001948 	.word	0x20001948
 8006e24:	20005548 	.word	0x20005548
 8006e28:	20005550 	.word	0x20005550
 8006e2c:	20005558 	.word	0x20005558
 8006e30:	20005554 	.word	0x20005554
 8006e34:	2000555c 	.word	0x2000555c

08006e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e40:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <prvInsertBlockIntoFreeList+0xac>)
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e002      	b.n	8006e4c <prvInsertBlockIntoFreeList+0x14>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d8f7      	bhi.n	8006e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	4413      	add	r3, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d108      	bne.n	8006e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	441a      	add	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	441a      	add	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d118      	bne.n	8006ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d00d      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e008      	b.n	8006ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	e003      	b.n	8006ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d002      	beq.n	8006ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20005548 	.word	0x20005548
 8006ee8:	20005550 	.word	0x20005550

08006eec <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006ef0:	4803      	ldr	r0, [pc, #12]	; (8006f00 <_cbSendSystemDesc+0x14>)
 8006ef2:	f001 fa29 	bl	8008348 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006ef6:	4803      	ldr	r0, [pc, #12]	; (8006f04 <_cbSendSystemDesc+0x18>)
 8006ef8:	f001 fa26 	bl	8008348 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006efc:	bf00      	nop
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	08008c6c 	.word	0x08008c6c
 8006f04:	08008ca8 	.word	0x08008ca8

08006f08 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006f0c:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <SEGGER_SYSVIEW_Conf+0x20>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <SEGGER_SYSVIEW_Conf+0x20>)
 8006f12:	6819      	ldr	r1, [r3, #0]
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <SEGGER_SYSVIEW_Conf+0x24>)
 8006f16:	4a06      	ldr	r2, [pc, #24]	; (8006f30 <SEGGER_SYSVIEW_Conf+0x28>)
 8006f18:	f000 fd94 	bl	8007a44 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006f1c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8006f20:	f000 fdd4 	bl	8007acc <SEGGER_SYSVIEW_SetRAMBase>
}
 8006f24:	bf00      	nop
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20000004 	.word	0x20000004
 8006f2c:	08006eed 	.word	0x08006eed
 8006f30:	08008da8 	.word	0x08008da8

08006f34 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	e048      	b.n	8006fd2 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8006f40:	4929      	ldr	r1, [pc, #164]	; (8006fe8 <_cbSendTaskList+0xb4>)
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fedd 	bl	8005d10 <uxTaskGetStackHighWaterMark>
 8006f56:	4601      	mov	r1, r0
 8006f58:	4823      	ldr	r0, [pc, #140]	; (8006fe8 <_cbSendTaskList+0xb4>)
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4403      	add	r3, r0
 8006f66:	3310      	adds	r3, #16
 8006f68:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006f6a:	491f      	ldr	r1, [pc, #124]	; (8006fe8 <_cbSendTaskList+0xb4>)
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	491b      	ldr	r1, [pc, #108]	; (8006fe8 <_cbSendTaskList+0xb4>)
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	3304      	adds	r3, #4
 8006f8a:	6819      	ldr	r1, [r3, #0]
 8006f8c:	4c16      	ldr	r4, [pc, #88]	; (8006fe8 <_cbSendTaskList+0xb4>)
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4423      	add	r3, r4
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	681c      	ldr	r4, [r3, #0]
 8006f9e:	4d12      	ldr	r5, [pc, #72]	; (8006fe8 <_cbSendTaskList+0xb4>)
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	442b      	add	r3, r5
 8006fac:	330c      	adds	r3, #12
 8006fae:	681d      	ldr	r5, [r3, #0]
 8006fb0:	4e0d      	ldr	r6, [pc, #52]	; (8006fe8 <_cbSendTaskList+0xb4>)
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4433      	add	r3, r6
 8006fbe:	3310      	adds	r3, #16
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	4622      	mov	r2, r4
 8006fc8:	f000 f8be 	bl	8007148 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	607b      	str	r3, [r7, #4]
 8006fd2:	4b06      	ldr	r3, [pc, #24]	; (8006fec <_cbSendTaskList+0xb8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d3b1      	bcc.n	8006f40 <_cbSendTaskList+0xc>
  }
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20005560 	.word	0x20005560
 8006fec:	20005600 	.word	0x20005600

08006ff0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006ff8:	f7fe fb5a 	bl	80056b0 <xTaskGetTickCountFromISR>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2200      	movs	r2, #0
 8007000:	469a      	mov	sl, r3
 8007002:	4693      	mov	fp, r2
 8007004:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	f04f 0a00 	mov.w	sl, #0
 8007014:	f04f 0b00 	mov.w	fp, #0
 8007018:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800701c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007020:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007024:	4652      	mov	r2, sl
 8007026:	465b      	mov	r3, fp
 8007028:	1a14      	subs	r4, r2, r0
 800702a:	eb63 0501 	sbc.w	r5, r3, r1
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	00ab      	lsls	r3, r5, #2
 8007038:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800703c:	00a2      	lsls	r2, r4, #2
 800703e:	4614      	mov	r4, r2
 8007040:	461d      	mov	r5, r3
 8007042:	eb14 0800 	adds.w	r8, r4, r0
 8007046:	eb45 0901 	adc.w	r9, r5, r1
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800705a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800705e:	4690      	mov	r8, r2
 8007060:	4699      	mov	r9, r3
 8007062:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007066:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007078 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007086:	2205      	movs	r2, #5
 8007088:	492b      	ldr	r1, [pc, #172]	; (8007138 <SYSVIEW_AddTask+0xc0>)
 800708a:	68b8      	ldr	r0, [r7, #8]
 800708c:	f001 fcdc 	bl	8008a48 <memcmp>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d04b      	beq.n	800712e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007096:	4b29      	ldr	r3, [pc, #164]	; (800713c <SYSVIEW_AddTask+0xc4>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b07      	cmp	r3, #7
 800709c:	d903      	bls.n	80070a6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800709e:	4828      	ldr	r0, [pc, #160]	; (8007140 <SYSVIEW_AddTask+0xc8>)
 80070a0:	f001 fc50 	bl	8008944 <SEGGER_SYSVIEW_Warn>
    return;
 80070a4:	e044      	b.n	8007130 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80070a6:	4b25      	ldr	r3, [pc, #148]	; (800713c <SYSVIEW_AddTask+0xc4>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4926      	ldr	r1, [pc, #152]	; (8007144 <SYSVIEW_AddTask+0xcc>)
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	440b      	add	r3, r1
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80070ba:	4b20      	ldr	r3, [pc, #128]	; (800713c <SYSVIEW_AddTask+0xc4>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4921      	ldr	r1, [pc, #132]	; (8007144 <SYSVIEW_AddTask+0xcc>)
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	3304      	adds	r3, #4
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80070d0:	4b1a      	ldr	r3, [pc, #104]	; (800713c <SYSVIEW_AddTask+0xc4>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	491b      	ldr	r1, [pc, #108]	; (8007144 <SYSVIEW_AddTask+0xcc>)
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	3308      	adds	r3, #8
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80070e6:	4b15      	ldr	r3, [pc, #84]	; (800713c <SYSVIEW_AddTask+0xc4>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	4916      	ldr	r1, [pc, #88]	; (8007144 <SYSVIEW_AddTask+0xcc>)
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	330c      	adds	r3, #12
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80070fc:	4b0f      	ldr	r3, [pc, #60]	; (800713c <SYSVIEW_AddTask+0xc4>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4910      	ldr	r1, [pc, #64]	; (8007144 <SYSVIEW_AddTask+0xcc>)
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	3310      	adds	r3, #16
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <SYSVIEW_AddTask+0xc4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	4a08      	ldr	r2, [pc, #32]	; (800713c <SYSVIEW_AddTask+0xc4>)
 800711a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f80e 	bl	8007148 <SYSVIEW_SendTaskInfo>
 800712c:	e000      	b.n	8007130 <SYSVIEW_AddTask+0xb8>
    return;
 800712e:	bf00      	nop

}
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08008cb8 	.word	0x08008cb8
 800713c:	20005600 	.word	0x20005600
 8007140:	08008cc0 	.word	0x08008cc0
 8007144:	20005560 	.word	0x20005560

08007148 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	; 0x28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007156:	f107 0314 	add.w	r3, r7, #20
 800715a:	2214      	movs	r2, #20
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f001 fc90 	bl	8008a84 <memset>
  TaskInfo.TaskID     = TaskID;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007178:	f107 0314 	add.w	r3, r7, #20
 800717c:	4618      	mov	r0, r3
 800717e:	f000 ffeb 	bl	8008158 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007182:	bf00      	nop
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007192:	4b26      	ldr	r3, [pc, #152]	; (800722c <_DoInit+0xa0>)
 8007194:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007196:	22a8      	movs	r2, #168	; 0xa8
 8007198:	2100      	movs	r1, #0
 800719a:	6838      	ldr	r0, [r7, #0]
 800719c:	f001 fc72 	bl	8008a84 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2203      	movs	r2, #3
 80071a4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2203      	movs	r2, #3
 80071aa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	4a20      	ldr	r2, [pc, #128]	; (8007230 <_DoInit+0xa4>)
 80071b0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <_DoInit+0xa8>)
 80071b6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071be:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2200      	movs	r2, #0
 80071ca:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2200      	movs	r2, #0
 80071d0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	4a16      	ldr	r2, [pc, #88]	; (8007230 <_DoInit+0xa4>)
 80071d6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	4a17      	ldr	r2, [pc, #92]	; (8007238 <_DoInit+0xac>)
 80071dc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2210      	movs	r2, #16
 80071e2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2200      	movs	r2, #0
 80071ee:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80071f6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	e00c      	b.n	800721a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f1c3 030f 	rsb	r3, r3, #15
 8007206:	4a0d      	ldr	r2, [pc, #52]	; (800723c <_DoInit+0xb0>)
 8007208:	5cd1      	ldrb	r1, [r2, r3]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4413      	add	r3, r2
 8007210:	460a      	mov	r2, r1
 8007212:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3301      	adds	r3, #1
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b0f      	cmp	r3, #15
 800721e:	d9ef      	bls.n	8007200 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007220:	f3bf 8f5f 	dmb	sy
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20005604 	.word	0x20005604
 8007230:	08008d10 	.word	0x08008d10
 8007234:	200056ac 	.word	0x200056ac
 8007238:	20005aac 	.word	0x20005aac
 800723c:	08008db0 	.word	0x08008db0

08007240 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8007240:	b580      	push	{r7, lr}
 8007242:	b08c      	sub	sp, #48	; 0x30
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800724c:	4b3e      	ldr	r3, [pc, #248]	; (8007348 <SEGGER_RTT_ReadNoLock+0x108>)
 800724e:	623b      	str	r3, [r7, #32]
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <SEGGER_RTT_ReadNoLock+0x1e>
 800725a:	f7ff ff97 	bl	800718c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	4413      	add	r3, r2
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	3360      	adds	r3, #96	; 0x60
 800726a:	4a37      	ldr	r2, [pc, #220]	; (8007348 <SEGGER_RTT_ReadNoLock+0x108>)
 800726c:	4413      	add	r3, r2
 800726e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007280:	2300      	movs	r3, #0
 8007282:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	d92b      	bls.n	80072e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4293      	cmp	r3, r2
 800729c:	bf28      	it	cs
 800729e:	4613      	movcs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	4413      	add	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	6939      	ldr	r1, [r7, #16]
 80072b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072b2:	f001 fbd9 	bl	8008a68 <memcpy>
    NumBytesRead += NumBytesRem;
 80072b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4413      	add	r3, r2
 80072bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80072be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	4413      	add	r3, r2
 80072c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80072ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	4413      	add	r3, r2
 80072d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072dc:	429a      	cmp	r2, r3
 80072de:	d101      	bne.n	80072e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80072e0:	2300      	movs	r3, #0
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4293      	cmp	r3, r2
 80072f2:	bf28      	it	cs
 80072f4:	4613      	movcs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d019      	beq.n	8007332 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	4413      	add	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	6939      	ldr	r1, [r7, #16]
 800730c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800730e:	f001 fbab 	bl	8008a68 <memcpy>
    NumBytesRead += NumBytesRem;
 8007312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	4413      	add	r3, r2
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800731a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	4413      	add	r3, r2
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800732a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4413      	add	r3, r2
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800733c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007340:	4618      	mov	r0, r3
 8007342:	3730      	adds	r7, #48	; 0x30
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	20005604 	.word	0x20005604

0800734c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800735a:	4b3d      	ldr	r3, [pc, #244]	; (8007450 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <SEGGER_RTT_AllocUpBuffer+0x20>
 8007368:	f7ff ff10 	bl	800718c <_DoInit>
  SEGGER_RTT_LOCK();
 800736c:	f3ef 8311 	mrs	r3, BASEPRI
 8007370:	f04f 0120 	mov.w	r1, #32
 8007374:	f381 8811 	msr	BASEPRI, r1
 8007378:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800737a:	4b35      	ldr	r3, [pc, #212]	; (8007450 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800737c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8007382:	6939      	ldr	r1, [r7, #16]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	4613      	mov	r3, r2
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	4413      	add	r3, r2
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	440b      	add	r3, r1
 8007392:	3304      	adds	r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d008      	beq.n	80073ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	3301      	adds	r3, #1
 800739e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	69fa      	ldr	r2, [r7, #28]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	dbeb      	blt.n	8007382 <SEGGER_RTT_AllocUpBuffer+0x36>
 80073aa:	e000      	b.n	80073ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80073ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	da3f      	bge.n	8007438 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80073b8:	6939      	ldr	r1, [r7, #16]
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	4613      	mov	r3, r2
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	4413      	add	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	440b      	add	r3, r1
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80073cc:	6939      	ldr	r1, [r7, #16]
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	4613      	mov	r3, r2
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	4413      	add	r3, r2
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	440b      	add	r3, r1
 80073dc:	3304      	adds	r3, #4
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80073e2:	6939      	ldr	r1, [r7, #16]
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	4613      	mov	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	440b      	add	r3, r1
 80073f0:	3320      	adds	r3, #32
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80073f6:	6939      	ldr	r1, [r7, #16]
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	4613      	mov	r3, r2
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	4413      	add	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	440b      	add	r3, r1
 8007404:	3328      	adds	r3, #40	; 0x28
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800740a:	6939      	ldr	r1, [r7, #16]
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	440b      	add	r3, r1
 8007418:	3324      	adds	r3, #36	; 0x24
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800741e:	6939      	ldr	r1, [r7, #16]
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	4613      	mov	r3, r2
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	4413      	add	r3, r2
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	440b      	add	r3, r1
 800742c:	332c      	adds	r3, #44	; 0x2c
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007432:	f3bf 8f5f 	dmb	sy
 8007436:	e002      	b.n	800743e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800743c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007444:	69fb      	ldr	r3, [r7, #28]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20005604 	.word	0x20005604

08007454 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8007462:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007464:	623b      	str	r3, [r7, #32]
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007470:	f7ff fe8c 	bl	800718c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007474:	4b1c      	ldr	r3, [pc, #112]	; (80074e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007476:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d82c      	bhi.n	80074d8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800747e:	f3ef 8311 	mrs	r3, BASEPRI
 8007482:	f04f 0120 	mov.w	r1, #32
 8007486:	f381 8811 	msr	BASEPRI, r1
 800748a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4613      	mov	r3, r2
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	4413      	add	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	3360      	adds	r3, #96	; 0x60
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00e      	beq.n	80074c2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2200      	movs	r2, #0
 80074c0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80074c8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
 80074d6:	e002      	b.n	80074de <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3728      	adds	r7, #40	; 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20005604 	.word	0x20005604

080074ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00f      	beq.n	8007522 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8007502:	e002      	b.n	800750a <_EncodeStr+0x1e>
      Len++;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3301      	adds	r3, #1
 8007508:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	4413      	add	r3, r2
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f6      	bne.n	8007504 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	429a      	cmp	r2, r3
 800751c:	d901      	bls.n	8007522 <_EncodeStr+0x36>
      Len = Limit;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2bfe      	cmp	r3, #254	; 0xfe
 8007526:	d806      	bhi.n	8007536 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	60fa      	str	r2, [r7, #12]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	e011      	b.n	800755a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	60fa      	str	r2, [r7, #12]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	60fa      	str	r2, [r7, #12]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	0a19      	lsrs	r1, r3, #8
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	60fa      	str	r2, [r7, #12]
 8007556:	b2ca      	uxtb	r2, r1
 8007558:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800755e:	e00a      	b.n	8007576 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	1c53      	adds	r3, r2, #1
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	1c59      	adds	r1, r3, #1
 800756a:	60f9      	str	r1, [r7, #12]
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	701a      	strb	r2, [r3, #0]
    n++;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	3301      	adds	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	429a      	cmp	r2, r3
 800757c:	d3f0      	bcc.n	8007560 <_EncodeStr+0x74>
  }
  return pPayload;
 800757e:	68fb      	ldr	r3, [r7, #12]
}
 8007580:	4618      	mov	r0, r3
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3307      	adds	r3, #7
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80075aa:	4b35      	ldr	r3, [pc, #212]	; (8007680 <_HandleIncomingPacket+0xdc>)
 80075ac:	7e1b      	ldrb	r3, [r3, #24]
 80075ae:	4618      	mov	r0, r3
 80075b0:	1cfb      	adds	r3, r7, #3
 80075b2:	2201      	movs	r2, #1
 80075b4:	4619      	mov	r1, r3
 80075b6:	f7ff fe43 	bl	8007240 <SEGGER_RTT_ReadNoLock>
 80075ba:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d052      	beq.n	8007668 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	2b80      	cmp	r3, #128	; 0x80
 80075c6:	d031      	beq.n	800762c <_HandleIncomingPacket+0x88>
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	dc40      	bgt.n	800764e <_HandleIncomingPacket+0xaa>
 80075cc:	2b07      	cmp	r3, #7
 80075ce:	dc15      	bgt.n	80075fc <_HandleIncomingPacket+0x58>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dd3c      	ble.n	800764e <_HandleIncomingPacket+0xaa>
 80075d4:	3b01      	subs	r3, #1
 80075d6:	2b06      	cmp	r3, #6
 80075d8:	d839      	bhi.n	800764e <_HandleIncomingPacket+0xaa>
 80075da:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <_HandleIncomingPacket+0x3c>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	08007603 	.word	0x08007603
 80075e4:	08007609 	.word	0x08007609
 80075e8:	0800760f 	.word	0x0800760f
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761b 	.word	0x0800761b
 80075f4:	08007621 	.word	0x08007621
 80075f8:	08007627 	.word	0x08007627
 80075fc:	2b7f      	cmp	r3, #127	; 0x7f
 80075fe:	d035      	beq.n	800766c <_HandleIncomingPacket+0xc8>
 8007600:	e025      	b.n	800764e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007602:	f000 fc2f 	bl	8007e64 <SEGGER_SYSVIEW_Start>
      break;
 8007606:	e036      	b.n	8007676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007608:	f000 fce6 	bl	8007fd8 <SEGGER_SYSVIEW_Stop>
      break;
 800760c:	e033      	b.n	8007676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800760e:	f000 febf 	bl	8008390 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007612:	e030      	b.n	8007676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007614:	f000 fe84 	bl	8008320 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007618:	e02d      	b.n	8007676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800761a:	f000 fd03 	bl	8008024 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800761e:	e02a      	b.n	8007676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007620:	f001 f952 	bl	80088c8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007624:	e027      	b.n	8007676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007626:	f001 f931 	bl	800888c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800762a:	e024      	b.n	8007676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800762c:	4b14      	ldr	r3, [pc, #80]	; (8007680 <_HandleIncomingPacket+0xdc>)
 800762e:	7e1b      	ldrb	r3, [r3, #24]
 8007630:	4618      	mov	r0, r3
 8007632:	1cfb      	adds	r3, r7, #3
 8007634:	2201      	movs	r2, #1
 8007636:	4619      	mov	r1, r3
 8007638:	f7ff fe02 	bl	8007240 <SEGGER_RTT_ReadNoLock>
 800763c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d015      	beq.n	8007670 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	4618      	mov	r0, r3
 8007648:	f001 f8a0 	bl	800878c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800764c:	e010      	b.n	8007670 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	b25b      	sxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	da0e      	bge.n	8007674 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007656:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <_HandleIncomingPacket+0xdc>)
 8007658:	7e1b      	ldrb	r3, [r3, #24]
 800765a:	4618      	mov	r0, r3
 800765c:	1cfb      	adds	r3, r7, #3
 800765e:	2201      	movs	r2, #1
 8007660:	4619      	mov	r1, r3
 8007662:	f7ff fded 	bl	8007240 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007666:	e005      	b.n	8007674 <_HandleIncomingPacket+0xd0>
    }
  }
 8007668:	bf00      	nop
 800766a:	e004      	b.n	8007676 <_HandleIncomingPacket+0xd2>
      break;
 800766c:	bf00      	nop
 800766e:	e002      	b.n	8007676 <_HandleIncomingPacket+0xd2>
      break;
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <_HandleIncomingPacket+0xd2>
      break;
 8007674:	bf00      	nop
}
 8007676:	bf00      	nop
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20005ec4 	.word	0x20005ec4

08007684 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b08c      	sub	sp, #48	; 0x30
 8007688:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800768a:	2301      	movs	r3, #1
 800768c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800768e:	1d3b      	adds	r3, r7, #4
 8007690:	3301      	adds	r3, #1
 8007692:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007698:	4b31      	ldr	r3, [pc, #196]	; (8007760 <_TrySendOverflowPacket+0xdc>)
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	62bb      	str	r3, [r7, #40]	; 0x28
 800769e:	e00b      	b.n	80076b8 <_TrySendOverflowPacket+0x34>
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	1c59      	adds	r1, r3, #1
 80076a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80076aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	09db      	lsrs	r3, r3, #7
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2b7f      	cmp	r3, #127	; 0x7f
 80076bc:	d8f0      	bhi.n	80076a0 <_TrySendOverflowPacket+0x1c>
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80076ce:	4b25      	ldr	r3, [pc, #148]	; (8007764 <_TrySendOverflowPacket+0xe0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80076d4:	4b22      	ldr	r3, [pc, #136]	; (8007760 <_TrySendOverflowPacket+0xdc>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	623b      	str	r3, [r7, #32]
 80076e6:	e00b      	b.n	8007700 <_TrySendOverflowPacket+0x7c>
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	1c59      	adds	r1, r3, #1
 80076f0:	6279      	str	r1, [r7, #36]	; 0x24
 80076f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	09db      	lsrs	r3, r3, #7
 80076fe:	623b      	str	r3, [r7, #32]
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	2b7f      	cmp	r3, #127	; 0x7f
 8007704:	d8f0      	bhi.n	80076e8 <_TrySendOverflowPacket+0x64>
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	627a      	str	r2, [r7, #36]	; 0x24
 800770c:	6a3a      	ldr	r2, [r7, #32]
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007716:	4b12      	ldr	r3, [pc, #72]	; (8007760 <_TrySendOverflowPacket+0xdc>)
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	4618      	mov	r0, r3
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	461a      	mov	r2, r3
 8007724:	1d3b      	adds	r3, r7, #4
 8007726:	4619      	mov	r1, r3
 8007728:	f7f8 fd8a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800772c:	4603      	mov	r3, r0
 800772e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <_TrySendOverflowPacket+0xdc>)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800773c:	4b08      	ldr	r3, [pc, #32]	; (8007760 <_TrySendOverflowPacket+0xdc>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	3b01      	subs	r3, #1
 8007742:	b2da      	uxtb	r2, r3
 8007744:	4b06      	ldr	r3, [pc, #24]	; (8007760 <_TrySendOverflowPacket+0xdc>)
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	e004      	b.n	8007754 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <_TrySendOverflowPacket+0xdc>)
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	3301      	adds	r3, #1
 8007750:	4a03      	ldr	r2, [pc, #12]	; (8007760 <_TrySendOverflowPacket+0xdc>)
 8007752:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007754:	693b      	ldr	r3, [r7, #16]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3730      	adds	r7, #48	; 0x30
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20005ec4 	.word	0x20005ec4
 8007764:	e0001004 	.word	0xe0001004

08007768 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	; 0x28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007774:	4b98      	ldr	r3, [pc, #608]	; (80079d8 <_SendPacket+0x270>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d010      	beq.n	800779e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800777c:	4b96      	ldr	r3, [pc, #600]	; (80079d8 <_SendPacket+0x270>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 812d 	beq.w	80079e0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007786:	4b94      	ldr	r3, [pc, #592]	; (80079d8 <_SendPacket+0x270>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d109      	bne.n	80077a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800778e:	f7ff ff79 	bl	8007684 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007792:	4b91      	ldr	r3, [pc, #580]	; (80079d8 <_SendPacket+0x270>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b01      	cmp	r3, #1
 8007798:	f040 8124 	bne.w	80079e4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800779c:	e001      	b.n	80077a2 <_SendPacket+0x3a>
    goto Send;
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <_SendPacket+0x3c>
Send:
 80077a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b1f      	cmp	r3, #31
 80077a8:	d809      	bhi.n	80077be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80077aa:	4b8b      	ldr	r3, [pc, #556]	; (80079d8 <_SendPacket+0x270>)
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f040 8115 	bne.w	80079e8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b17      	cmp	r3, #23
 80077c2:	d807      	bhi.n	80077d4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	e0c4      	b.n	800795e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	2b7f      	cmp	r3, #127	; 0x7f
 80077e0:	d912      	bls.n	8007808 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	09da      	lsrs	r2, r3, #7
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	3a01      	subs	r2, #1
 80077fa:	60fa      	str	r2, [r7, #12]
 80077fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007800:	b2da      	uxtb	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e006      	b.n	8007816 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3b01      	subs	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	b2da      	uxtb	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b7e      	cmp	r3, #126	; 0x7e
 800781a:	d807      	bhi.n	800782c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3b01      	subs	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	b2da      	uxtb	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	e098      	b.n	800795e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007832:	d212      	bcs.n	800785a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	09da      	lsrs	r2, r3, #7
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3b01      	subs	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	3a01      	subs	r2, #1
 800784c:	60fa      	str	r2, [r7, #12]
 800784e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007852:	b2da      	uxtb	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	701a      	strb	r2, [r3, #0]
 8007858:	e081      	b.n	800795e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007860:	d21d      	bcs.n	800789e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	0b9a      	lsrs	r2, r3, #14
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3b01      	subs	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	09db      	lsrs	r3, r3, #7
 8007876:	b2db      	uxtb	r3, r3
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	3a01      	subs	r2, #1
 800787c:	60fa      	str	r2, [r7, #12]
 800787e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007882:	b2da      	uxtb	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	3a01      	subs	r2, #1
 8007890:	60fa      	str	r2, [r7, #12]
 8007892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007896:	b2da      	uxtb	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e05f      	b.n	800795e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078a4:	d228      	bcs.n	80078f8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	0d5a      	lsrs	r2, r3, #21
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0b9b      	lsrs	r3, r3, #14
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	3a01      	subs	r2, #1
 80078c0:	60fa      	str	r2, [r7, #12]
 80078c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	09db      	lsrs	r3, r3, #7
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	3a01      	subs	r2, #1
 80078d6:	60fa      	str	r2, [r7, #12]
 80078d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	3a01      	subs	r2, #1
 80078ea:	60fa      	str	r2, [r7, #12]
 80078ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e032      	b.n	800795e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	0f1a      	lsrs	r2, r3, #28
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3b01      	subs	r3, #1
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	0d5b      	lsrs	r3, r3, #21
 800790c:	b2db      	uxtb	r3, r3
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	3a01      	subs	r2, #1
 8007912:	60fa      	str	r2, [r7, #12]
 8007914:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007918:	b2da      	uxtb	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	0b9b      	lsrs	r3, r3, #14
 8007922:	b2db      	uxtb	r3, r3
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	3a01      	subs	r2, #1
 8007928:	60fa      	str	r2, [r7, #12]
 800792a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800792e:	b2da      	uxtb	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	09db      	lsrs	r3, r3, #7
 8007938:	b2db      	uxtb	r3, r3
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	3a01      	subs	r2, #1
 800793e:	60fa      	str	r2, [r7, #12]
 8007940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007944:	b2da      	uxtb	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	3a01      	subs	r2, #1
 8007952:	60fa      	str	r2, [r7, #12]
 8007954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007958:	b2da      	uxtb	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800795e:	4b1f      	ldr	r3, [pc, #124]	; (80079dc <_SendPacket+0x274>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007964:	4b1c      	ldr	r3, [pc, #112]	; (80079d8 <_SendPacket+0x270>)
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	623b      	str	r3, [r7, #32]
 8007976:	e00b      	b.n	8007990 <_SendPacket+0x228>
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	b2da      	uxtb	r2, r3
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	1c59      	adds	r1, r3, #1
 8007980:	6279      	str	r1, [r7, #36]	; 0x24
 8007982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	09db      	lsrs	r3, r3, #7
 800798e:	623b      	str	r3, [r7, #32]
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	2b7f      	cmp	r3, #127	; 0x7f
 8007994:	d8f0      	bhi.n	8007978 <_SendPacket+0x210>
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	627a      	str	r2, [r7, #36]	; 0x24
 800799c:	6a3a      	ldr	r2, [r7, #32]
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80079a6:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <_SendPacket+0x270>)
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	4618      	mov	r0, r3
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	68f9      	ldr	r1, [r7, #12]
 80079b6:	f7f8 fc43 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80079ba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80079c2:	4a05      	ldr	r2, [pc, #20]	; (80079d8 <_SendPacket+0x270>)
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	60d3      	str	r3, [r2, #12]
 80079c8:	e00f      	b.n	80079ea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80079ca:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <_SendPacket+0x270>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	4b01      	ldr	r3, [pc, #4]	; (80079d8 <_SendPacket+0x270>)
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e008      	b.n	80079ea <_SendPacket+0x282>
 80079d8:	20005ec4 	.word	0x20005ec4
 80079dc:	e0001004 	.word	0xe0001004
    goto SendDone;
 80079e0:	bf00      	nop
 80079e2:	e002      	b.n	80079ea <_SendPacket+0x282>
      goto SendDone;
 80079e4:	bf00      	nop
 80079e6:	e000      	b.n	80079ea <_SendPacket+0x282>
      goto SendDone;
 80079e8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <_SendPacket+0x2d4>)
 80079ec:	7e1b      	ldrb	r3, [r3, #24]
 80079ee:	4619      	mov	r1, r3
 80079f0:	4a13      	ldr	r2, [pc, #76]	; (8007a40 <_SendPacket+0x2d8>)
 80079f2:	460b      	mov	r3, r1
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	440b      	add	r3, r1
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	336c      	adds	r3, #108	; 0x6c
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <_SendPacket+0x2d4>)
 8007a02:	7e1b      	ldrb	r3, [r3, #24]
 8007a04:	4618      	mov	r0, r3
 8007a06:	490e      	ldr	r1, [pc, #56]	; (8007a40 <_SendPacket+0x2d8>)
 8007a08:	4603      	mov	r3, r0
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	4403      	add	r3, r0
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	440b      	add	r3, r1
 8007a12:	3370      	adds	r3, #112	; 0x70
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d00b      	beq.n	8007a32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007a1a:	4b08      	ldr	r3, [pc, #32]	; (8007a3c <_SendPacket+0x2d4>)
 8007a1c:	789b      	ldrb	r3, [r3, #2]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d107      	bne.n	8007a32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <_SendPacket+0x2d4>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007a28:	f7ff fdbc 	bl	80075a4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a2c:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <_SendPacket+0x2d4>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007a32:	bf00      	nop
 8007a34:	3728      	adds	r7, #40	; 0x28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20005ec4 	.word	0x20005ec4
 8007a40:	20005604 	.word	0x20005604

08007a44 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007a52:	2300      	movs	r3, #0
 8007a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a58:	4917      	ldr	r1, [pc, #92]	; (8007ab8 <SEGGER_SYSVIEW_Init+0x74>)
 8007a5a:	4818      	ldr	r0, [pc, #96]	; (8007abc <SEGGER_SYSVIEW_Init+0x78>)
 8007a5c:	f7ff fc76 	bl	800734c <SEGGER_RTT_AllocUpBuffer>
 8007a60:	4603      	mov	r3, r0
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007a66:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007a68:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007a6a:	785a      	ldrb	r2, [r3, #1]
 8007a6c:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007a6e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007a70:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007a72:	7e1b      	ldrb	r3, [r3, #24]
 8007a74:	4618      	mov	r0, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <SEGGER_SYSVIEW_Init+0x80>)
 8007a7e:	490f      	ldr	r1, [pc, #60]	; (8007abc <SEGGER_SYSVIEW_Init+0x78>)
 8007a80:	f7ff fce8 	bl	8007454 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007a84:	4b0e      	ldr	r3, [pc, #56]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <SEGGER_SYSVIEW_Init+0x84>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a0c      	ldr	r2, [pc, #48]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007a90:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007a92:	4a0b      	ldr	r2, [pc, #44]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007a9e:	4a08      	ldr	r2, [pc, #32]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007aa4:	4a06      	ldr	r2, [pc, #24]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007aaa:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20005abc 	.word	0x20005abc
 8007abc:	08008d1c 	.word	0x08008d1c
 8007ac0:	20005ec4 	.word	0x20005ec4
 8007ac4:	20005ebc 	.word	0x20005ebc
 8007ac8:	e0001004 	.word	0xe0001004

08007acc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007ad4:	4a04      	ldr	r2, [pc, #16]	; (8007ae8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6113      	str	r3, [r2, #16]
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	20005ec4 	.word	0x20005ec4

08007aec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007af4:	f3ef 8311 	mrs	r3, BASEPRI
 8007af8:	f04f 0120 	mov.w	r1, #32
 8007afc:	f381 8811 	msr	BASEPRI, r1
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	4808      	ldr	r0, [pc, #32]	; (8007b24 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007b04:	f7ff fd42 	bl	800758c <_PreparePacket>
 8007b08:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	68b8      	ldr	r0, [r7, #8]
 8007b10:	f7ff fe2a 	bl	8007768 <_SendPacket>
  RECORD_END();
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f383 8811 	msr	BASEPRI, r3
}
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20005ef4 	.word	0x20005ef4

08007b28 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b32:	f3ef 8311 	mrs	r3, BASEPRI
 8007b36:	f04f 0120 	mov.w	r1, #32
 8007b3a:	f381 8811 	msr	BASEPRI, r1
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	4816      	ldr	r0, [pc, #88]	; (8007b9c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007b42:	f7ff fd23 	bl	800758c <_PreparePacket>
 8007b46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	61fb      	str	r3, [r7, #28]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	e00b      	b.n	8007b6e <SEGGER_SYSVIEW_RecordU32+0x46>
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	1c59      	adds	r1, r3, #1
 8007b5e:	61f9      	str	r1, [r7, #28]
 8007b60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	09db      	lsrs	r3, r3, #7
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b7f      	cmp	r3, #127	; 0x7f
 8007b72:	d8f0      	bhi.n	8007b56 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	61fa      	str	r2, [r7, #28]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	b2d2      	uxtb	r2, r2
 8007b7e:	701a      	strb	r2, [r3, #0]
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	68f9      	ldr	r1, [r7, #12]
 8007b88:	6938      	ldr	r0, [r7, #16]
 8007b8a:	f7ff fded 	bl	8007768 <_SendPacket>
  RECORD_END();
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f383 8811 	msr	BASEPRI, r3
}
 8007b94:	bf00      	nop
 8007b96:	3720      	adds	r7, #32
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20005ef4 	.word	0x20005ef4

08007ba0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08c      	sub	sp, #48	; 0x30
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007bac:	f3ef 8311 	mrs	r3, BASEPRI
 8007bb0:	f04f 0120 	mov.w	r1, #32
 8007bb4:	f381 8811 	msr	BASEPRI, r1
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	4825      	ldr	r0, [pc, #148]	; (8007c50 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007bbc:	f7ff fce6 	bl	800758c <_PreparePacket>
 8007bc0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bce:	e00b      	b.n	8007be8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd6:	1c59      	adds	r1, r3, #1
 8007bd8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	09db      	lsrs	r3, r3, #7
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	2b7f      	cmp	r3, #127	; 0x7f
 8007bec:	d8f0      	bhi.n	8007bd0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	627b      	str	r3, [r7, #36]	; 0x24
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	623b      	str	r3, [r7, #32]
 8007c06:	e00b      	b.n	8007c20 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	1c59      	adds	r1, r3, #1
 8007c10:	6279      	str	r1, [r7, #36]	; 0x24
 8007c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	09db      	lsrs	r3, r3, #7
 8007c1e:	623b      	str	r3, [r7, #32]
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	2b7f      	cmp	r3, #127	; 0x7f
 8007c24:	d8f0      	bhi.n	8007c08 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	627a      	str	r2, [r7, #36]	; 0x24
 8007c2c:	6a3a      	ldr	r2, [r7, #32]
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	6979      	ldr	r1, [r7, #20]
 8007c3a:	69b8      	ldr	r0, [r7, #24]
 8007c3c:	f7ff fd94 	bl	8007768 <_SendPacket>
  RECORD_END();
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f383 8811 	msr	BASEPRI, r3
}
 8007c46:	bf00      	nop
 8007c48:	3730      	adds	r7, #48	; 0x30
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20005ef4 	.word	0x20005ef4

08007c54 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	; 0x38
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c62:	f3ef 8311 	mrs	r3, BASEPRI
 8007c66:	f04f 0120 	mov.w	r1, #32
 8007c6a:	f381 8811 	msr	BASEPRI, r1
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	4832      	ldr	r0, [pc, #200]	; (8007d3c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007c72:	f7ff fc8b 	bl	800758c <_PreparePacket>
 8007c76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	633b      	str	r3, [r7, #48]	; 0x30
 8007c84:	e00b      	b.n	8007c9e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8c:	1c59      	adds	r1, r3, #1
 8007c8e:	6379      	str	r1, [r7, #52]	; 0x34
 8007c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	09db      	lsrs	r3, r3, #7
 8007c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca2:	d8f0      	bhi.n	8007c86 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8007caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	701a      	strb	r2, [r3, #0]
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cbc:	e00b      	b.n	8007cd6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	1c59      	adds	r1, r3, #1
 8007cc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	09db      	lsrs	r3, r3, #7
 8007cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007cda:	d8f0      	bhi.n	8007cbe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce4:	b2d2      	uxtb	r2, r2
 8007ce6:	701a      	strb	r2, [r3, #0]
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	623b      	str	r3, [r7, #32]
 8007cf4:	e00b      	b.n	8007d0e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	1c59      	adds	r1, r3, #1
 8007cfe:	6279      	str	r1, [r7, #36]	; 0x24
 8007d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	09db      	lsrs	r3, r3, #7
 8007d0c:	623b      	str	r3, [r7, #32]
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	2b7f      	cmp	r3, #127	; 0x7f
 8007d12:	d8f0      	bhi.n	8007cf6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	627a      	str	r2, [r7, #36]	; 0x24
 8007d1a:	6a3a      	ldr	r2, [r7, #32]
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	6979      	ldr	r1, [r7, #20]
 8007d28:	69b8      	ldr	r0, [r7, #24]
 8007d2a:	f7ff fd1d 	bl	8007768 <_SendPacket>
  RECORD_END();
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f383 8811 	msr	BASEPRI, r3
}
 8007d34:	bf00      	nop
 8007d36:	3738      	adds	r7, #56	; 0x38
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20005ef4 	.word	0x20005ef4

08007d40 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b090      	sub	sp, #64	; 0x40
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d52:	f04f 0120 	mov.w	r1, #32
 8007d56:	f381 8811 	msr	BASEPRI, r1
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	4840      	ldr	r0, [pc, #256]	; (8007e60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007d5e:	f7ff fc15 	bl	800758c <_PreparePacket>
 8007d62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d70:	e00b      	b.n	8007d8a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d78:	1c59      	adds	r1, r3, #1
 8007d7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	09db      	lsrs	r3, r3, #7
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8007d8e:	d8f0      	bhi.n	8007d72 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	633b      	str	r3, [r7, #48]	; 0x30
 8007da8:	e00b      	b.n	8007dc2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db0:	1c59      	adds	r1, r3, #1
 8007db2:	6379      	str	r1, [r7, #52]	; 0x34
 8007db4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	09db      	lsrs	r3, r3, #7
 8007dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc6:	d8f0      	bhi.n	8007daa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	637a      	str	r2, [r7, #52]	; 0x34
 8007dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8007de0:	e00b      	b.n	8007dfa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	1c59      	adds	r1, r3, #1
 8007dea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	09db      	lsrs	r3, r3, #7
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8007dfe:	d8f0      	bhi.n	8007de2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e08:	b2d2      	uxtb	r2, r2
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
 8007e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	e00b      	b.n	8007e32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	1c59      	adds	r1, r3, #1
 8007e22:	6279      	str	r1, [r7, #36]	; 0x24
 8007e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e28:	b2d2      	uxtb	r2, r2
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	09db      	lsrs	r3, r3, #7
 8007e30:	623b      	str	r3, [r7, #32]
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	2b7f      	cmp	r3, #127	; 0x7f
 8007e36:	d8f0      	bhi.n	8007e1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	627a      	str	r2, [r7, #36]	; 0x24
 8007e3e:	6a3a      	ldr	r2, [r7, #32]
 8007e40:	b2d2      	uxtb	r2, r2
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	6979      	ldr	r1, [r7, #20]
 8007e4c:	69b8      	ldr	r0, [r7, #24]
 8007e4e:	f7ff fc8b 	bl	8007768 <_SendPacket>
  RECORD_END();
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	f383 8811 	msr	BASEPRI, r3
}
 8007e58:	bf00      	nop
 8007e5a:	3740      	adds	r7, #64	; 0x40
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20005ef4 	.word	0x20005ef4

08007e64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08c      	sub	sp, #48	; 0x30
 8007e68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007e6a:	4b58      	ldr	r3, [pc, #352]	; (8007fcc <SEGGER_SYSVIEW_Start+0x168>)
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007e70:	f3ef 8311 	mrs	r3, BASEPRI
 8007e74:	f04f 0120 	mov.w	r1, #32
 8007e78:	f381 8811 	msr	BASEPRI, r1
 8007e7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007e7e:	4b53      	ldr	r3, [pc, #332]	; (8007fcc <SEGGER_SYSVIEW_Start+0x168>)
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	220a      	movs	r2, #10
 8007e84:	4952      	ldr	r1, [pc, #328]	; (8007fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7f8 f9da 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007e92:	200a      	movs	r0, #10
 8007e94:	f7ff fe2a 	bl	8007aec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e98:	f3ef 8311 	mrs	r3, BASEPRI
 8007e9c:	f04f 0120 	mov.w	r1, #32
 8007ea0:	f381 8811 	msr	BASEPRI, r1
 8007ea4:	60bb      	str	r3, [r7, #8]
 8007ea6:	484b      	ldr	r0, [pc, #300]	; (8007fd4 <SEGGER_SYSVIEW_Start+0x170>)
 8007ea8:	f7ff fb70 	bl	800758c <_PreparePacket>
 8007eac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb6:	4b45      	ldr	r3, [pc, #276]	; (8007fcc <SEGGER_SYSVIEW_Start+0x168>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ebc:	e00b      	b.n	8007ed6 <SEGGER_SYSVIEW_Start+0x72>
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	1c59      	adds	r1, r3, #1
 8007ec6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	09db      	lsrs	r3, r3, #7
 8007ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8007eda:	d8f0      	bhi.n	8007ebe <SEGGER_SYSVIEW_Start+0x5a>
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef0:	4b36      	ldr	r3, [pc, #216]	; (8007fcc <SEGGER_SYSVIEW_Start+0x168>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	623b      	str	r3, [r7, #32]
 8007ef6:	e00b      	b.n	8007f10 <SEGGER_SYSVIEW_Start+0xac>
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	6279      	str	r1, [r7, #36]	; 0x24
 8007f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	09db      	lsrs	r3, r3, #7
 8007f0e:	623b      	str	r3, [r7, #32]
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	2b7f      	cmp	r3, #127	; 0x7f
 8007f14:	d8f0      	bhi.n	8007ef8 <SEGGER_SYSVIEW_Start+0x94>
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8007f1c:	6a3a      	ldr	r2, [r7, #32]
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	61fb      	str	r3, [r7, #28]
 8007f2a:	4b28      	ldr	r3, [pc, #160]	; (8007fcc <SEGGER_SYSVIEW_Start+0x168>)
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	61bb      	str	r3, [r7, #24]
 8007f30:	e00b      	b.n	8007f4a <SEGGER_SYSVIEW_Start+0xe6>
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	1c59      	adds	r1, r3, #1
 8007f3a:	61f9      	str	r1, [r7, #28]
 8007f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	09db      	lsrs	r3, r3, #7
 8007f48:	61bb      	str	r3, [r7, #24]
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f4e:	d8f0      	bhi.n	8007f32 <SEGGER_SYSVIEW_Start+0xce>
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	61fa      	str	r2, [r7, #28]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	e00b      	b.n	8007f82 <SEGGER_SYSVIEW_Start+0x11e>
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	1c59      	adds	r1, r3, #1
 8007f72:	6179      	str	r1, [r7, #20]
 8007f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	09db      	lsrs	r3, r3, #7
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b7f      	cmp	r3, #127	; 0x7f
 8007f86:	d8f0      	bhi.n	8007f6a <SEGGER_SYSVIEW_Start+0x106>
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	617a      	str	r2, [r7, #20]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	b2d2      	uxtb	r2, r2
 8007f92:	701a      	strb	r2, [r3, #0]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007f98:	2218      	movs	r2, #24
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fbe3 	bl	8007768 <_SendPacket>
      RECORD_END();
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007fa8:	4b08      	ldr	r3, [pc, #32]	; (8007fcc <SEGGER_SYSVIEW_Start+0x168>)
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <SEGGER_SYSVIEW_Start+0x168>)
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007fb6:	f000 f9eb 	bl	8008390 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007fba:	f000 f9b1 	bl	8008320 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007fbe:	f000 fc83 	bl	80088c8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007fc2:	bf00      	nop
 8007fc4:	3730      	adds	r7, #48	; 0x30
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20005ec4 	.word	0x20005ec4
 8007fd0:	08008dc4 	.word	0x08008dc4
 8007fd4:	20005ef4 	.word	0x20005ef4

08007fd8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007fde:	f3ef 8311 	mrs	r3, BASEPRI
 8007fe2:	f04f 0120 	mov.w	r1, #32
 8007fe6:	f381 8811 	msr	BASEPRI, r1
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	480b      	ldr	r0, [pc, #44]	; (800801c <SEGGER_SYSVIEW_Stop+0x44>)
 8007fee:	f7ff facd 	bl	800758c <_PreparePacket>
 8007ff2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <SEGGER_SYSVIEW_Stop+0x48>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007ffc:	220b      	movs	r2, #11
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6838      	ldr	r0, [r7, #0]
 8008002:	f7ff fbb1 	bl	8007768 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008006:	4b06      	ldr	r3, [pc, #24]	; (8008020 <SEGGER_SYSVIEW_Stop+0x48>)
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f383 8811 	msr	BASEPRI, r3
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20005ef4 	.word	0x20005ef4
 8008020:	20005ec4 	.word	0x20005ec4

08008024 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008024:	b580      	push	{r7, lr}
 8008026:	b08c      	sub	sp, #48	; 0x30
 8008028:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800802a:	f3ef 8311 	mrs	r3, BASEPRI
 800802e:	f04f 0120 	mov.w	r1, #32
 8008032:	f381 8811 	msr	BASEPRI, r1
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	4845      	ldr	r0, [pc, #276]	; (8008150 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800803a:	f7ff faa7 	bl	800758c <_PreparePacket>
 800803e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008048:	4b42      	ldr	r3, [pc, #264]	; (8008154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
 800804e:	e00b      	b.n	8008068 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	b2da      	uxtb	r2, r3
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	1c59      	adds	r1, r3, #1
 8008058:	62f9      	str	r1, [r7, #44]	; 0x2c
 800805a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	09db      	lsrs	r3, r3, #7
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	2b7f      	cmp	r3, #127	; 0x7f
 800806c:	d8f0      	bhi.n	8008050 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
 8008082:	4b34      	ldr	r3, [pc, #208]	; (8008154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	623b      	str	r3, [r7, #32]
 8008088:	e00b      	b.n	80080a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	b2da      	uxtb	r2, r3
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	1c59      	adds	r1, r3, #1
 8008092:	6279      	str	r1, [r7, #36]	; 0x24
 8008094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008098:	b2d2      	uxtb	r2, r2
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	09db      	lsrs	r3, r3, #7
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	2b7f      	cmp	r3, #127	; 0x7f
 80080a6:	d8f0      	bhi.n	800808a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	627a      	str	r2, [r7, #36]	; 0x24
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	4b25      	ldr	r3, [pc, #148]	; (8008154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	e00b      	b.n	80080dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	1c59      	adds	r1, r3, #1
 80080cc:	61f9      	str	r1, [r7, #28]
 80080ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	09db      	lsrs	r3, r3, #7
 80080da:	61bb      	str	r3, [r7, #24]
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	2b7f      	cmp	r3, #127	; 0x7f
 80080e0:	d8f0      	bhi.n	80080c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	61fa      	str	r2, [r7, #28]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	b2d2      	uxtb	r2, r2
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	2300      	movs	r3, #0
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	e00b      	b.n	8008114 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	1c59      	adds	r1, r3, #1
 8008104:	6179      	str	r1, [r7, #20]
 8008106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	09db      	lsrs	r3, r3, #7
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2b7f      	cmp	r3, #127	; 0x7f
 8008118:	d8f0      	bhi.n	80080fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	617a      	str	r2, [r7, #20]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800812a:	2218      	movs	r2, #24
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	68b8      	ldr	r0, [r7, #8]
 8008130:	f7ff fb1a 	bl	8007768 <_SendPacket>
  RECORD_END();
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008142:	4b04      	ldr	r3, [pc, #16]	; (8008154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	4798      	blx	r3
  }
}
 8008148:	bf00      	nop
 800814a:	3730      	adds	r7, #48	; 0x30
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20005ef4 	.word	0x20005ef4
 8008154:	20005ec4 	.word	0x20005ec4

08008158 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008158:	b580      	push	{r7, lr}
 800815a:	b092      	sub	sp, #72	; 0x48
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008160:	f3ef 8311 	mrs	r3, BASEPRI
 8008164:	f04f 0120 	mov.w	r1, #32
 8008168:	f381 8811 	msr	BASEPRI, r1
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	486a      	ldr	r0, [pc, #424]	; (8008318 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008170:	f7ff fa0c 	bl	800758c <_PreparePacket>
 8008174:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	647b      	str	r3, [r7, #68]	; 0x44
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b66      	ldr	r3, [pc, #408]	; (800831c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	643b      	str	r3, [r7, #64]	; 0x40
 800818a:	e00b      	b.n	80081a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800818c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818e:	b2da      	uxtb	r2, r3
 8008190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008192:	1c59      	adds	r1, r3, #1
 8008194:	6479      	str	r1, [r7, #68]	; 0x44
 8008196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a0:	09db      	lsrs	r3, r3, #7
 80081a2:	643b      	str	r3, [r7, #64]	; 0x40
 80081a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a6:	2b7f      	cmp	r3, #127	; 0x7f
 80081a8:	d8f0      	bhi.n	800818c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80081aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	647a      	str	r2, [r7, #68]	; 0x44
 80081b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80081c4:	e00b      	b.n	80081de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081cc:	1c59      	adds	r1, r3, #1
 80081ce:	63f9      	str	r1, [r7, #60]	; 0x3c
 80081d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	09db      	lsrs	r3, r3, #7
 80081dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	2b7f      	cmp	r3, #127	; 0x7f
 80081e2:	d8f0      	bhi.n	80081c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80081e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80081ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ec:	b2d2      	uxtb	r2, r2
 80081ee:	701a      	strb	r2, [r3, #0]
 80081f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	4619      	mov	r1, r3
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff f975 	bl	80074ec <_EncodeStr>
 8008202:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008204:	2209      	movs	r2, #9
 8008206:	68f9      	ldr	r1, [r7, #12]
 8008208:	6938      	ldr	r0, [r7, #16]
 800820a:	f7ff faad 	bl	8007768 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	4b40      	ldr	r3, [pc, #256]	; (800831c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	633b      	str	r3, [r7, #48]	; 0x30
 8008222:	e00b      	b.n	800823c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008226:	b2da      	uxtb	r2, r3
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	1c59      	adds	r1, r3, #1
 800822c:	6379      	str	r1, [r7, #52]	; 0x34
 800822e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	09db      	lsrs	r3, r3, #7
 800823a:	633b      	str	r3, [r7, #48]	; 0x30
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	2b7f      	cmp	r3, #127	; 0x7f
 8008240:	d8f0      	bhi.n	8008224 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	637a      	str	r2, [r7, #52]	; 0x34
 8008248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
 800825c:	e00b      	b.n	8008276 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	b2da      	uxtb	r2, r3
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	1c59      	adds	r1, r3, #1
 8008266:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	09db      	lsrs	r3, r3, #7
 8008274:	62bb      	str	r3, [r7, #40]	; 0x28
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	2b7f      	cmp	r3, #127	; 0x7f
 800827a:	d8f0      	bhi.n	800825e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	623b      	str	r3, [r7, #32]
 8008296:	e00b      	b.n	80082b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	b2da      	uxtb	r2, r3
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	1c59      	adds	r1, r3, #1
 80082a0:	6279      	str	r1, [r7, #36]	; 0x24
 80082a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082a6:	b2d2      	uxtb	r2, r2
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	09db      	lsrs	r3, r3, #7
 80082ae:	623b      	str	r3, [r7, #32]
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	2b7f      	cmp	r3, #127	; 0x7f
 80082b4:	d8f0      	bhi.n	8008298 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	627a      	str	r2, [r7, #36]	; 0x24
 80082bc:	6a3a      	ldr	r2, [r7, #32]
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	2300      	movs	r3, #0
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	e00b      	b.n	80082e8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	1c59      	adds	r1, r3, #1
 80082d8:	61f9      	str	r1, [r7, #28]
 80082da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	09db      	lsrs	r3, r3, #7
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	2b7f      	cmp	r3, #127	; 0x7f
 80082ec:	d8f0      	bhi.n	80082d0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	61fa      	str	r2, [r7, #28]
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80082fe:	2215      	movs	r2, #21
 8008300:	68f9      	ldr	r1, [r7, #12]
 8008302:	6938      	ldr	r0, [r7, #16]
 8008304:	f7ff fa30 	bl	8007768 <_SendPacket>
  RECORD_END();
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f383 8811 	msr	BASEPRI, r3
}
 800830e:	bf00      	nop
 8008310:	3748      	adds	r7, #72	; 0x48
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20005ef4 	.word	0x20005ef4
 800831c:	20005ec4 	.word	0x20005ec4

08008320 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008324:	4b07      	ldr	r3, [pc, #28]	; (8008344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d008      	beq.n	800833e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008336:	4b03      	ldr	r3, [pc, #12]	; (8008344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	4798      	blx	r3
  }
}
 800833e:	bf00      	nop
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20005ec4 	.word	0x20005ec4

08008348 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008350:	f3ef 8311 	mrs	r3, BASEPRI
 8008354:	f04f 0120 	mov.w	r1, #32
 8008358:	f381 8811 	msr	BASEPRI, r1
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	480b      	ldr	r0, [pc, #44]	; (800838c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008360:	f7ff f914 	bl	800758c <_PreparePacket>
 8008364:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008366:	2280      	movs	r2, #128	; 0x80
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	6938      	ldr	r0, [r7, #16]
 800836c:	f7ff f8be 	bl	80074ec <_EncodeStr>
 8008370:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008372:	220e      	movs	r2, #14
 8008374:	68f9      	ldr	r1, [r7, #12]
 8008376:	6938      	ldr	r0, [r7, #16]
 8008378:	f7ff f9f6 	bl	8007768 <_SendPacket>
  RECORD_END();
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f383 8811 	msr	BASEPRI, r3
}
 8008382:	bf00      	nop
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20005ef4 	.word	0x20005ef4

08008390 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008396:	4b15      	ldr	r3, [pc, #84]	; (80083ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d01a      	beq.n	80083d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d015      	beq.n	80083d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4798      	blx	r3
 80083b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80083b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80083b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ba:	f04f 0200 	mov.w	r2, #0
 80083be:	f04f 0300 	mov.w	r3, #0
 80083c2:	000a      	movs	r2, r1
 80083c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80083c6:	4613      	mov	r3, r2
 80083c8:	461a      	mov	r2, r3
 80083ca:	4621      	mov	r1, r4
 80083cc:	200d      	movs	r0, #13
 80083ce:	f7ff fbe7 	bl	8007ba0 <SEGGER_SYSVIEW_RecordU32x2>
 80083d2:	e006      	b.n	80083e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4619      	mov	r1, r3
 80083da:	200c      	movs	r0, #12
 80083dc:	f7ff fba4 	bl	8007b28 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd90      	pop	{r4, r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20005ec4 	.word	0x20005ec4
 80083f0:	e0001004 	.word	0xe0001004

080083f4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80083fa:	f3ef 8311 	mrs	r3, BASEPRI
 80083fe:	f04f 0120 	mov.w	r1, #32
 8008402:	f381 8811 	msr	BASEPRI, r1
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	4819      	ldr	r0, [pc, #100]	; (8008470 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800840a:	f7ff f8bf 	bl	800758c <_PreparePacket>
 800840e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008414:	4b17      	ldr	r3, [pc, #92]	; (8008474 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	e00b      	b.n	8008440 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	b2da      	uxtb	r2, r3
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	1c59      	adds	r1, r3, #1
 8008430:	6179      	str	r1, [r7, #20]
 8008432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008436:	b2d2      	uxtb	r2, r2
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	09db      	lsrs	r3, r3, #7
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b7f      	cmp	r3, #127	; 0x7f
 8008444:	d8f0      	bhi.n	8008428 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	617a      	str	r2, [r7, #20]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008456:	2202      	movs	r2, #2
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	68b8      	ldr	r0, [r7, #8]
 800845c:	f7ff f984 	bl	8007768 <_SendPacket>
  RECORD_END();
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f383 8811 	msr	BASEPRI, r3
}
 8008466:	bf00      	nop
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20005ef4 	.word	0x20005ef4
 8008474:	e000ed04 	.word	0xe000ed04

08008478 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800847e:	f3ef 8311 	mrs	r3, BASEPRI
 8008482:	f04f 0120 	mov.w	r1, #32
 8008486:	f381 8811 	msr	BASEPRI, r1
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	4807      	ldr	r0, [pc, #28]	; (80084ac <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800848e:	f7ff f87d 	bl	800758c <_PreparePacket>
 8008492:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008494:	2203      	movs	r2, #3
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6838      	ldr	r0, [r7, #0]
 800849a:	f7ff f965 	bl	8007768 <_SendPacket>
  RECORD_END();
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f383 8811 	msr	BASEPRI, r3
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20005ef4 	.word	0x20005ef4

080084b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084b6:	f3ef 8311 	mrs	r3, BASEPRI
 80084ba:	f04f 0120 	mov.w	r1, #32
 80084be:	f381 8811 	msr	BASEPRI, r1
 80084c2:	607b      	str	r3, [r7, #4]
 80084c4:	4807      	ldr	r0, [pc, #28]	; (80084e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80084c6:	f7ff f861 	bl	800758c <_PreparePacket>
 80084ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80084cc:	2212      	movs	r2, #18
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6838      	ldr	r0, [r7, #0]
 80084d2:	f7ff f949 	bl	8007768 <_SendPacket>
  RECORD_END();
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f383 8811 	msr	BASEPRI, r3
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20005ef4 	.word	0x20005ef4

080084e8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084ee:	f3ef 8311 	mrs	r3, BASEPRI
 80084f2:	f04f 0120 	mov.w	r1, #32
 80084f6:	f381 8811 	msr	BASEPRI, r1
 80084fa:	607b      	str	r3, [r7, #4]
 80084fc:	4807      	ldr	r0, [pc, #28]	; (800851c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80084fe:	f7ff f845 	bl	800758c <_PreparePacket>
 8008502:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008504:	2211      	movs	r2, #17
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6838      	ldr	r0, [r7, #0]
 800850a:	f7ff f92d 	bl	8007768 <_SendPacket>
  RECORD_END();
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f383 8811 	msr	BASEPRI, r3
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20005ef4 	.word	0x20005ef4

08008520 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008528:	f3ef 8311 	mrs	r3, BASEPRI
 800852c:	f04f 0120 	mov.w	r1, #32
 8008530:	f381 8811 	msr	BASEPRI, r1
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	4819      	ldr	r0, [pc, #100]	; (800859c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008538:	f7ff f828 	bl	800758c <_PreparePacket>
 800853c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008542:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	61fb      	str	r3, [r7, #28]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e00b      	b.n	800856e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	b2da      	uxtb	r2, r3
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	1c59      	adds	r1, r3, #1
 800855e:	61f9      	str	r1, [r7, #28]
 8008560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	09db      	lsrs	r3, r3, #7
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b7f      	cmp	r3, #127	; 0x7f
 8008572:	d8f0      	bhi.n	8008556 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	61fa      	str	r2, [r7, #28]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008584:	2208      	movs	r2, #8
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	6938      	ldr	r0, [r7, #16]
 800858a:	f7ff f8ed 	bl	8007768 <_SendPacket>
  RECORD_END();
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f383 8811 	msr	BASEPRI, r3
}
 8008594:	bf00      	nop
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	20005ef4 	.word	0x20005ef4
 80085a0:	20005ec4 	.word	0x20005ec4

080085a4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80085ac:	f3ef 8311 	mrs	r3, BASEPRI
 80085b0:	f04f 0120 	mov.w	r1, #32
 80085b4:	f381 8811 	msr	BASEPRI, r1
 80085b8:	617b      	str	r3, [r7, #20]
 80085ba:	4819      	ldr	r0, [pc, #100]	; (8008620 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80085bc:	f7fe ffe6 	bl	800758c <_PreparePacket>
 80085c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80085c6:	4b17      	ldr	r3, [pc, #92]	; (8008624 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	61bb      	str	r3, [r7, #24]
 80085d8:	e00b      	b.n	80085f2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	1c59      	adds	r1, r3, #1
 80085e2:	61f9      	str	r1, [r7, #28]
 80085e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	09db      	lsrs	r3, r3, #7
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2b7f      	cmp	r3, #127	; 0x7f
 80085f6:	d8f0      	bhi.n	80085da <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	61fa      	str	r2, [r7, #28]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	b2d2      	uxtb	r2, r2
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008608:	2204      	movs	r2, #4
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	6938      	ldr	r0, [r7, #16]
 800860e:	f7ff f8ab 	bl	8007768 <_SendPacket>
  RECORD_END();
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f383 8811 	msr	BASEPRI, r3
}
 8008618:	bf00      	nop
 800861a:	3720      	adds	r7, #32
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20005ef4 	.word	0x20005ef4
 8008624:	20005ec4 	.word	0x20005ec4

08008628 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008630:	f3ef 8311 	mrs	r3, BASEPRI
 8008634:	f04f 0120 	mov.w	r1, #32
 8008638:	f381 8811 	msr	BASEPRI, r1
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	4819      	ldr	r0, [pc, #100]	; (80086a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008640:	f7fe ffa4 	bl	800758c <_PreparePacket>
 8008644:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800864a:	4b17      	ldr	r3, [pc, #92]	; (80086a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	e00b      	b.n	8008676 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	1c59      	adds	r1, r3, #1
 8008666:	61f9      	str	r1, [r7, #28]
 8008668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	09db      	lsrs	r3, r3, #7
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b7f      	cmp	r3, #127	; 0x7f
 800867a:	d8f0      	bhi.n	800865e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	61fa      	str	r2, [r7, #28]
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	b2d2      	uxtb	r2, r2
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800868c:	2206      	movs	r2, #6
 800868e:	68f9      	ldr	r1, [r7, #12]
 8008690:	6938      	ldr	r0, [r7, #16]
 8008692:	f7ff f869 	bl	8007768 <_SendPacket>
  RECORD_END();
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f383 8811 	msr	BASEPRI, r3
}
 800869c:	bf00      	nop
 800869e:	3720      	adds	r7, #32
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20005ef4 	.word	0x20005ef4
 80086a8:	20005ec4 	.word	0x20005ec4

080086ac <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08a      	sub	sp, #40	; 0x28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80086b6:	f3ef 8311 	mrs	r3, BASEPRI
 80086ba:	f04f 0120 	mov.w	r1, #32
 80086be:	f381 8811 	msr	BASEPRI, r1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	4827      	ldr	r0, [pc, #156]	; (8008764 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80086c6:	f7fe ff61 	bl	800758c <_PreparePacket>
 80086ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80086d0:	4b25      	ldr	r3, [pc, #148]	; (8008768 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	623b      	str	r3, [r7, #32]
 80086e2:	e00b      	b.n	80086fc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	1c59      	adds	r1, r3, #1
 80086ec:	6279      	str	r1, [r7, #36]	; 0x24
 80086ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	09db      	lsrs	r3, r3, #7
 80086fa:	623b      	str	r3, [r7, #32]
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008700:	d8f0      	bhi.n	80086e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	627a      	str	r2, [r7, #36]	; 0x24
 8008708:	6a3a      	ldr	r2, [r7, #32]
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	61bb      	str	r3, [r7, #24]
 800871a:	e00b      	b.n	8008734 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	b2da      	uxtb	r2, r3
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	1c59      	adds	r1, r3, #1
 8008724:	61f9      	str	r1, [r7, #28]
 8008726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	09db      	lsrs	r3, r3, #7
 8008732:	61bb      	str	r3, [r7, #24]
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	2b7f      	cmp	r3, #127	; 0x7f
 8008738:	d8f0      	bhi.n	800871c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	61fa      	str	r2, [r7, #28]
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	701a      	strb	r2, [r3, #0]
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800874a:	2207      	movs	r2, #7
 800874c:	68f9      	ldr	r1, [r7, #12]
 800874e:	6938      	ldr	r0, [r7, #16]
 8008750:	f7ff f80a 	bl	8007768 <_SendPacket>
  RECORD_END();
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f383 8811 	msr	BASEPRI, r3
}
 800875a:	bf00      	nop
 800875c:	3728      	adds	r7, #40	; 0x28
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20005ef4 	.word	0x20005ef4
 8008768:	20005ec4 	.word	0x20005ec4

0800876c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008774:	4b04      	ldr	r3, [pc, #16]	; (8008788 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	1ad3      	subs	r3, r2, r3
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	20005ec4 	.word	0x20005ec4

0800878c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800878c:	b580      	push	{r7, lr}
 800878e:	b08c      	sub	sp, #48	; 0x30
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008796:	4b3b      	ldr	r3, [pc, #236]	; (8008884 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d06d      	beq.n	800887a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800879e:	4b39      	ldr	r3, [pc, #228]	; (8008884 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80087a4:	2300      	movs	r3, #0
 80087a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80087a8:	e008      	b.n	80087bc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	3301      	adds	r3, #1
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d3f2      	bcc.n	80087aa <SEGGER_SYSVIEW_SendModule+0x1e>
 80087c4:	e000      	b.n	80087c8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80087c6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d055      	beq.n	800887a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80087ce:	f3ef 8311 	mrs	r3, BASEPRI
 80087d2:	f04f 0120 	mov.w	r1, #32
 80087d6:	f381 8811 	msr	BASEPRI, r1
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	482a      	ldr	r0, [pc, #168]	; (8008888 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80087de:	f7fe fed5 	bl	800758c <_PreparePacket>
 80087e2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	623b      	str	r3, [r7, #32]
 80087f0:	e00b      	b.n	800880a <SEGGER_SYSVIEW_SendModule+0x7e>
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	1c59      	adds	r1, r3, #1
 80087fa:	6279      	str	r1, [r7, #36]	; 0x24
 80087fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	701a      	strb	r2, [r3, #0]
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	09db      	lsrs	r3, r3, #7
 8008808:	623b      	str	r3, [r7, #32]
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	2b7f      	cmp	r3, #127	; 0x7f
 800880e:	d8f0      	bhi.n	80087f2 <SEGGER_SYSVIEW_SendModule+0x66>
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	627a      	str	r2, [r7, #36]	; 0x24
 8008816:	6a3a      	ldr	r2, [r7, #32]
 8008818:	b2d2      	uxtb	r2, r2
 800881a:	701a      	strb	r2, [r3, #0]
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	61fb      	str	r3, [r7, #28]
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	61bb      	str	r3, [r7, #24]
 800882a:	e00b      	b.n	8008844 <SEGGER_SYSVIEW_SendModule+0xb8>
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	b2da      	uxtb	r2, r3
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	1c59      	adds	r1, r3, #1
 8008834:	61f9      	str	r1, [r7, #28]
 8008836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	09db      	lsrs	r3, r3, #7
 8008842:	61bb      	str	r3, [r7, #24]
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b7f      	cmp	r3, #127	; 0x7f
 8008848:	d8f0      	bhi.n	800882c <SEGGER_SYSVIEW_SendModule+0xa0>
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	61fa      	str	r2, [r7, #28]
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	b2d2      	uxtb	r2, r2
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2280      	movs	r2, #128	; 0x80
 8008860:	4619      	mov	r1, r3
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7fe fe42 	bl	80074ec <_EncodeStr>
 8008868:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800886a:	2216      	movs	r2, #22
 800886c:	68f9      	ldr	r1, [r7, #12]
 800886e:	6938      	ldr	r0, [r7, #16]
 8008870:	f7fe ff7a 	bl	8007768 <_SendPacket>
      RECORD_END();
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800887a:	bf00      	nop
 800887c:	3730      	adds	r7, #48	; 0x30
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20005eec 	.word	0x20005eec
 8008888:	20005ef4 	.word	0x20005ef4

0800888c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00f      	beq.n	80088ba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800889a:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f2      	bne.n	80088a0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20005eec 	.word	0x20005eec

080088c8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80088ce:	f3ef 8311 	mrs	r3, BASEPRI
 80088d2:	f04f 0120 	mov.w	r1, #32
 80088d6:	f381 8811 	msr	BASEPRI, r1
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	4817      	ldr	r0, [pc, #92]	; (800893c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80088de:	f7fe fe55 	bl	800758c <_PreparePacket>
 80088e2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	4b14      	ldr	r3, [pc, #80]	; (8008940 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	613b      	str	r3, [r7, #16]
 80088f2:	e00b      	b.n	800890c <SEGGER_SYSVIEW_SendNumModules+0x44>
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	1c59      	adds	r1, r3, #1
 80088fc:	6179      	str	r1, [r7, #20]
 80088fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	09db      	lsrs	r3, r3, #7
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b7f      	cmp	r3, #127	; 0x7f
 8008910:	d8f0      	bhi.n	80088f4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	617a      	str	r2, [r7, #20]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008922:	221b      	movs	r2, #27
 8008924:	6879      	ldr	r1, [r7, #4]
 8008926:	68b8      	ldr	r0, [r7, #8]
 8008928:	f7fe ff1e 	bl	8007768 <_SendPacket>
  RECORD_END();
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f383 8811 	msr	BASEPRI, r3
}
 8008932:	bf00      	nop
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20005ef4 	.word	0x20005ef4
 8008940:	20005ef0 	.word	0x20005ef0

08008944 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800894c:	f3ef 8311 	mrs	r3, BASEPRI
 8008950:	f04f 0120 	mov.w	r1, #32
 8008954:	f381 8811 	msr	BASEPRI, r1
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	4827      	ldr	r0, [pc, #156]	; (80089f8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800895c:	f7fe fe16 	bl	800758c <_PreparePacket>
 8008960:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008962:	2280      	movs	r2, #128	; 0x80
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	6938      	ldr	r0, [r7, #16]
 8008968:	f7fe fdc0 	bl	80074ec <_EncodeStr>
 800896c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
 8008972:	2301      	movs	r3, #1
 8008974:	623b      	str	r3, [r7, #32]
 8008976:	e00b      	b.n	8008990 <SEGGER_SYSVIEW_Warn+0x4c>
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	b2da      	uxtb	r2, r3
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	1c59      	adds	r1, r3, #1
 8008980:	6279      	str	r1, [r7, #36]	; 0x24
 8008982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	09db      	lsrs	r3, r3, #7
 800898e:	623b      	str	r3, [r7, #32]
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	2b7f      	cmp	r3, #127	; 0x7f
 8008994:	d8f0      	bhi.n	8008978 <SEGGER_SYSVIEW_Warn+0x34>
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	627a      	str	r2, [r7, #36]	; 0x24
 800899c:	6a3a      	ldr	r2, [r7, #32]
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	2300      	movs	r3, #0
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	e00b      	b.n	80089c8 <SEGGER_SYSVIEW_Warn+0x84>
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	1c59      	adds	r1, r3, #1
 80089b8:	61f9      	str	r1, [r7, #28]
 80089ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	701a      	strb	r2, [r3, #0]
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	09db      	lsrs	r3, r3, #7
 80089c6:	61bb      	str	r3, [r7, #24]
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b7f      	cmp	r3, #127	; 0x7f
 80089cc:	d8f0      	bhi.n	80089b0 <SEGGER_SYSVIEW_Warn+0x6c>
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	61fa      	str	r2, [r7, #28]
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80089de:	221a      	movs	r2, #26
 80089e0:	68f9      	ldr	r1, [r7, #12]
 80089e2:	6938      	ldr	r0, [r7, #16]
 80089e4:	f7fe fec0 	bl	8007768 <_SendPacket>
  RECORD_END();
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f383 8811 	msr	BASEPRI, r3
}
 80089ee:	bf00      	nop
 80089f0:	3728      	adds	r7, #40	; 0x28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20005ef4 	.word	0x20005ef4

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4d0d      	ldr	r5, [pc, #52]	; (8008a34 <__libc_init_array+0x38>)
 8008a00:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a02:	1b64      	subs	r4, r4, r5
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	2600      	movs	r6, #0
 8008a08:	42a6      	cmp	r6, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	4d0b      	ldr	r5, [pc, #44]	; (8008a3c <__libc_init_array+0x40>)
 8008a0e:	4c0c      	ldr	r4, [pc, #48]	; (8008a40 <__libc_init_array+0x44>)
 8008a10:	f000 f902 	bl	8008c18 <_init>
 8008a14:	1b64      	subs	r4, r4, r5
 8008a16:	10a4      	asrs	r4, r4, #2
 8008a18:	2600      	movs	r6, #0
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a24:	4798      	blx	r3
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2e:	4798      	blx	r3
 8008a30:	3601      	adds	r6, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	08008e38 	.word	0x08008e38
 8008a38:	08008e38 	.word	0x08008e38
 8008a3c:	08008e38 	.word	0x08008e38
 8008a40:	08008e3c 	.word	0x08008e3c

08008a44 <__retarget_lock_acquire_recursive>:
 8008a44:	4770      	bx	lr

08008a46 <__retarget_lock_release_recursive>:
 8008a46:	4770      	bx	lr

08008a48 <memcmp>:
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	3901      	subs	r1, #1
 8008a4c:	4402      	add	r2, r0
 8008a4e:	4290      	cmp	r0, r2
 8008a50:	d101      	bne.n	8008a56 <memcmp+0xe>
 8008a52:	2000      	movs	r0, #0
 8008a54:	e005      	b.n	8008a62 <memcmp+0x1a>
 8008a56:	7803      	ldrb	r3, [r0, #0]
 8008a58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	d001      	beq.n	8008a64 <memcmp+0x1c>
 8008a60:	1b18      	subs	r0, r3, r4
 8008a62:	bd10      	pop	{r4, pc}
 8008a64:	3001      	adds	r0, #1
 8008a66:	e7f2      	b.n	8008a4e <memcmp+0x6>

08008a68 <memcpy>:
 8008a68:	440a      	add	r2, r1
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a70:	d100      	bne.n	8008a74 <memcpy+0xc>
 8008a72:	4770      	bx	lr
 8008a74:	b510      	push	{r4, lr}
 8008a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7e:	4291      	cmp	r1, r2
 8008a80:	d1f9      	bne.n	8008a76 <memcpy+0xe>
 8008a82:	bd10      	pop	{r4, pc}

08008a84 <memset>:
 8008a84:	4402      	add	r2, r0
 8008a86:	4603      	mov	r3, r0
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <memset+0xa>
 8008a8c:	4770      	bx	lr
 8008a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a92:	e7f9      	b.n	8008a88 <memset+0x4>

08008a94 <cleanup_glue>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	460c      	mov	r4, r1
 8008a98:	6809      	ldr	r1, [r1, #0]
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	b109      	cbz	r1, 8008aa2 <cleanup_glue+0xe>
 8008a9e:	f7ff fff9 	bl	8008a94 <cleanup_glue>
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aaa:	f000 b869 	b.w	8008b80 <_free_r>
	...

08008ab0 <_reclaim_reent>:
 8008ab0:	4b2c      	ldr	r3, [pc, #176]	; (8008b64 <_reclaim_reent+0xb4>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4283      	cmp	r3, r0
 8008ab6:	b570      	push	{r4, r5, r6, lr}
 8008ab8:	4604      	mov	r4, r0
 8008aba:	d051      	beq.n	8008b60 <_reclaim_reent+0xb0>
 8008abc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008abe:	b143      	cbz	r3, 8008ad2 <_reclaim_reent+0x22>
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d14a      	bne.n	8008b5c <_reclaim_reent+0xac>
 8008ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac8:	6819      	ldr	r1, [r3, #0]
 8008aca:	b111      	cbz	r1, 8008ad2 <_reclaim_reent+0x22>
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 f857 	bl	8008b80 <_free_r>
 8008ad2:	6961      	ldr	r1, [r4, #20]
 8008ad4:	b111      	cbz	r1, 8008adc <_reclaim_reent+0x2c>
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 f852 	bl	8008b80 <_free_r>
 8008adc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ade:	b111      	cbz	r1, 8008ae6 <_reclaim_reent+0x36>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 f84d 	bl	8008b80 <_free_r>
 8008ae6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ae8:	b111      	cbz	r1, 8008af0 <_reclaim_reent+0x40>
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 f848 	bl	8008b80 <_free_r>
 8008af0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008af2:	b111      	cbz	r1, 8008afa <_reclaim_reent+0x4a>
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 f843 	bl	8008b80 <_free_r>
 8008afa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008afc:	b111      	cbz	r1, 8008b04 <_reclaim_reent+0x54>
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 f83e 	bl	8008b80 <_free_r>
 8008b04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b06:	b111      	cbz	r1, 8008b0e <_reclaim_reent+0x5e>
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 f839 	bl	8008b80 <_free_r>
 8008b0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b10:	b111      	cbz	r1, 8008b18 <_reclaim_reent+0x68>
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 f834 	bl	8008b80 <_free_r>
 8008b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b1a:	b111      	cbz	r1, 8008b22 <_reclaim_reent+0x72>
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 f82f 	bl	8008b80 <_free_r>
 8008b22:	69a3      	ldr	r3, [r4, #24]
 8008b24:	b1e3      	cbz	r3, 8008b60 <_reclaim_reent+0xb0>
 8008b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b28:	4620      	mov	r0, r4
 8008b2a:	4798      	blx	r3
 8008b2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b2e:	b1b9      	cbz	r1, 8008b60 <_reclaim_reent+0xb0>
 8008b30:	4620      	mov	r0, r4
 8008b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b36:	f7ff bfad 	b.w	8008a94 <cleanup_glue>
 8008b3a:	5949      	ldr	r1, [r1, r5]
 8008b3c:	b941      	cbnz	r1, 8008b50 <_reclaim_reent+0xa0>
 8008b3e:	3504      	adds	r5, #4
 8008b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b42:	2d80      	cmp	r5, #128	; 0x80
 8008b44:	68d9      	ldr	r1, [r3, #12]
 8008b46:	d1f8      	bne.n	8008b3a <_reclaim_reent+0x8a>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 f819 	bl	8008b80 <_free_r>
 8008b4e:	e7ba      	b.n	8008ac6 <_reclaim_reent+0x16>
 8008b50:	680e      	ldr	r6, [r1, #0]
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 f814 	bl	8008b80 <_free_r>
 8008b58:	4631      	mov	r1, r6
 8008b5a:	e7ef      	b.n	8008b3c <_reclaim_reent+0x8c>
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	e7ef      	b.n	8008b40 <_reclaim_reent+0x90>
 8008b60:	bd70      	pop	{r4, r5, r6, pc}
 8008b62:	bf00      	nop
 8008b64:	20000014 	.word	0x20000014

08008b68 <__malloc_lock>:
 8008b68:	4801      	ldr	r0, [pc, #4]	; (8008b70 <__malloc_lock+0x8>)
 8008b6a:	f7ff bf6b 	b.w	8008a44 <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	20005fd7 	.word	0x20005fd7

08008b74 <__malloc_unlock>:
 8008b74:	4801      	ldr	r0, [pc, #4]	; (8008b7c <__malloc_unlock+0x8>)
 8008b76:	f7ff bf66 	b.w	8008a46 <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	20005fd7 	.word	0x20005fd7

08008b80 <_free_r>:
 8008b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b82:	2900      	cmp	r1, #0
 8008b84:	d044      	beq.n	8008c10 <_free_r+0x90>
 8008b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b8a:	9001      	str	r0, [sp, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b92:	bfb8      	it	lt
 8008b94:	18e4      	addlt	r4, r4, r3
 8008b96:	f7ff ffe7 	bl	8008b68 <__malloc_lock>
 8008b9a:	4a1e      	ldr	r2, [pc, #120]	; (8008c14 <_free_r+0x94>)
 8008b9c:	9801      	ldr	r0, [sp, #4]
 8008b9e:	6813      	ldr	r3, [r2, #0]
 8008ba0:	b933      	cbnz	r3, 8008bb0 <_free_r+0x30>
 8008ba2:	6063      	str	r3, [r4, #4]
 8008ba4:	6014      	str	r4, [r2, #0]
 8008ba6:	b003      	add	sp, #12
 8008ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bac:	f7ff bfe2 	b.w	8008b74 <__malloc_unlock>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d908      	bls.n	8008bc6 <_free_r+0x46>
 8008bb4:	6825      	ldr	r5, [r4, #0]
 8008bb6:	1961      	adds	r1, r4, r5
 8008bb8:	428b      	cmp	r3, r1
 8008bba:	bf01      	itttt	eq
 8008bbc:	6819      	ldreq	r1, [r3, #0]
 8008bbe:	685b      	ldreq	r3, [r3, #4]
 8008bc0:	1949      	addeq	r1, r1, r5
 8008bc2:	6021      	streq	r1, [r4, #0]
 8008bc4:	e7ed      	b.n	8008ba2 <_free_r+0x22>
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	b10b      	cbz	r3, 8008bd0 <_free_r+0x50>
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	d9fa      	bls.n	8008bc6 <_free_r+0x46>
 8008bd0:	6811      	ldr	r1, [r2, #0]
 8008bd2:	1855      	adds	r5, r2, r1
 8008bd4:	42a5      	cmp	r5, r4
 8008bd6:	d10b      	bne.n	8008bf0 <_free_r+0x70>
 8008bd8:	6824      	ldr	r4, [r4, #0]
 8008bda:	4421      	add	r1, r4
 8008bdc:	1854      	adds	r4, r2, r1
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	6011      	str	r1, [r2, #0]
 8008be2:	d1e0      	bne.n	8008ba6 <_free_r+0x26>
 8008be4:	681c      	ldr	r4, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6053      	str	r3, [r2, #4]
 8008bea:	4421      	add	r1, r4
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	e7da      	b.n	8008ba6 <_free_r+0x26>
 8008bf0:	d902      	bls.n	8008bf8 <_free_r+0x78>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	e7d6      	b.n	8008ba6 <_free_r+0x26>
 8008bf8:	6825      	ldr	r5, [r4, #0]
 8008bfa:	1961      	adds	r1, r4, r5
 8008bfc:	428b      	cmp	r3, r1
 8008bfe:	bf04      	itt	eq
 8008c00:	6819      	ldreq	r1, [r3, #0]
 8008c02:	685b      	ldreq	r3, [r3, #4]
 8008c04:	6063      	str	r3, [r4, #4]
 8008c06:	bf04      	itt	eq
 8008c08:	1949      	addeq	r1, r1, r5
 8008c0a:	6021      	streq	r1, [r4, #0]
 8008c0c:	6054      	str	r4, [r2, #4]
 8008c0e:	e7ca      	b.n	8008ba6 <_free_r+0x26>
 8008c10:	b003      	add	sp, #12
 8008c12:	bd30      	pop	{r4, r5, pc}
 8008c14:	20005fd8 	.word	0x20005fd8

08008c18 <_init>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr

08008c24 <_fini>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	bf00      	nop
 8008c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2a:	bc08      	pop	{r3}
 8008c2c:	469e      	mov	lr, r3
 8008c2e:	4770      	bx	lr
