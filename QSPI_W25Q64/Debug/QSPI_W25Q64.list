
QSPI_W25Q64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004398  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  08004688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000098  24000014  0800469c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000ac  0800469c  000200ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000de3a  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002094  00000000  00000000  0002de7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a48  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000940  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000370fb  00000000  00000000  00031298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d6b6  00000000  00000000  00068393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015ae0d  00000000  00000000  00075a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d0856  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027dc  00000000  00000000  001d08a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004618 	.word	0x08004618

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08004618 	.word	0x08004618

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	; 0x30
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b3f      	ldr	r3, [pc, #252]	; (80003ec <MX_GPIO_Init+0x114>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a3d      	ldr	r2, [pc, #244]	; (80003ec <MX_GPIO_Init+0x114>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b3b      	ldr	r3, [pc, #236]	; (80003ec <MX_GPIO_Init+0x114>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	61bb      	str	r3, [r7, #24]
 800030a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b37      	ldr	r3, [pc, #220]	; (80003ec <MX_GPIO_Init+0x114>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a36      	ldr	r2, [pc, #216]	; (80003ec <MX_GPIO_Init+0x114>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <MX_GPIO_Init+0x114>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800032a:	4b30      	ldr	r3, [pc, #192]	; (80003ec <MX_GPIO_Init+0x114>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a2e      	ldr	r2, [pc, #184]	; (80003ec <MX_GPIO_Init+0x114>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <MX_GPIO_Init+0x114>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000344:	613b      	str	r3, [r7, #16]
 8000346:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b28      	ldr	r3, [pc, #160]	; (80003ec <MX_GPIO_Init+0x114>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a27      	ldr	r2, [pc, #156]	; (80003ec <MX_GPIO_Init+0x114>)
 8000350:	f043 0302 	orr.w	r3, r3, #2
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b24      	ldr	r3, [pc, #144]	; (80003ec <MX_GPIO_Init+0x114>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000366:	4b21      	ldr	r3, [pc, #132]	; (80003ec <MX_GPIO_Init+0x114>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <MX_GPIO_Init+0x114>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_GPIO_Init+0x114>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b19      	ldr	r3, [pc, #100]	; (80003ec <MX_GPIO_Init+0x114>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038a:	4a18      	ldr	r2, [pc, #96]	; (80003ec <MX_GPIO_Init+0x114>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_GPIO_Init+0x114>)
 8000396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2108      	movs	r1, #8
 80003a6:	4812      	ldr	r0, [pc, #72]	; (80003f0 <MX_GPIO_Init+0x118>)
 80003a8:	f001 fb40 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PE3_Pin;
 80003ac:	2308      	movs	r3, #8
 80003ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	2301      	movs	r3, #1
 80003b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003b4:	2302      	movs	r3, #2
 80003b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b8:	2300      	movs	r3, #0
 80003ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 80003bc:	f107 031c 	add.w	r3, r7, #28
 80003c0:	4619      	mov	r1, r3
 80003c2:	480b      	ldr	r0, [pc, #44]	; (80003f0 <MX_GPIO_Init+0x118>)
 80003c4:	f001 f982 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K1_Pin;
 80003c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ce:	2300      	movs	r3, #0
 80003d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d2:	2302      	movs	r3, #2
 80003d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(K1_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 031c 	add.w	r3, r7, #28
 80003da:	4619      	mov	r1, r3
 80003dc:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_GPIO_Init+0x11c>)
 80003de:	f001 f975 	bl	80016cc <HAL_GPIO_Init>

}
 80003e2:	bf00      	nop
 80003e4:	3730      	adds	r7, #48	; 0x30
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	58024400 	.word	0x58024400
 80003f0:	58021000 	.word	0x58021000
 80003f4:	58020800 	.word	0x58020800

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	4b45      	ldr	r3, [pc, #276]	; (8000514 <main+0x11c>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d11b      	bne.n	8000442 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800040a:	f3bf 8f4f 	dsb	sy
}
 800040e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000410:	f3bf 8f6f 	isb	sy
}
 8000414:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000416:	4b3f      	ldr	r3, [pc, #252]	; (8000514 <main+0x11c>)
 8000418:	2200      	movs	r2, #0
 800041a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800041e:	f3bf 8f4f 	dsb	sy
}
 8000422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000424:	f3bf 8f6f 	isb	sy
}
 8000428:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800042a:	4b3a      	ldr	r3, [pc, #232]	; (8000514 <main+0x11c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a39      	ldr	r2, [pc, #228]	; (8000514 <main+0x11c>)
 8000430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000434:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000436:	f3bf 8f4f 	dsb	sy
}
 800043a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800043c:	f3bf 8f6f 	isb	sy
}
 8000440:	e000      	b.n	8000444 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000442:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <main+0x11c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800044c:	2b00      	cmp	r3, #0
 800044e:	d138      	bne.n	80004c2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000450:	4b30      	ldr	r3, [pc, #192]	; (8000514 <main+0x11c>)
 8000452:	2200      	movs	r2, #0
 8000454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000458:	f3bf 8f4f 	dsb	sy
}
 800045c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <main+0x11c>)
 8000460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000464:	64fb      	str	r3, [r7, #76]	; 0x4c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000468:	0b5b      	lsrs	r3, r3, #13
 800046a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800046e:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000472:	08db      	lsrs	r3, r3, #3
 8000474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000478:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800047a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800047c:	015a      	lsls	r2, r3, #5
 800047e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000482:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000486:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000488:	4922      	ldr	r1, [pc, #136]	; (8000514 <main+0x11c>)
 800048a:	4313      	orrs	r3, r2
 800048c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000492:	1e5a      	subs	r2, r3, #1
 8000494:	647a      	str	r2, [r7, #68]	; 0x44
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1ef      	bne.n	800047a <main+0x82>
    } while(sets-- != 0U);
 800049a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800049c:	1e5a      	subs	r2, r3, #1
 800049e:	64ba      	str	r2, [r7, #72]	; 0x48
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1e5      	bne.n	8000470 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80004a4:	f3bf 8f4f 	dsb	sy
}
 80004a8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004aa:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <main+0x11c>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a19      	ldr	r2, [pc, #100]	; (8000514 <main+0x11c>)
 80004b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004b6:	f3bf 8f4f 	dsb	sy
}
 80004ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004bc:	f3bf 8f6f 	isb	sy
}
 80004c0:	e000      	b.n	80004c4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004c2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 ff5c 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f82c 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f7ff ff04 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004d0:	f000 f8ac 	bl	800062c <MX_QUADSPI_Init>
  MX_RTC_Init();   // Можно без этого!!!!!!!!!
 80004d4:	f000 f99e 	bl	8000814 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  w25qxx_Init();
 80004d8:	f000 fac0 	bl	8000a5c <w25qxx_Init>
  w25qxx_GetID();
 80004dc:	f000 fad2 	bl	8000a84 <w25qxx_GetID>
  W25qxx_EraseChip(); // approx 13 second to execute
 80004e0:	f000 fbdc 	bl	8000c9c <W25qxx_EraseChip>
  W25qxx_Write((uint8_t*)TEXT_Buffer, 0, SIZE);
 80004e4:	221b      	movs	r2, #27
 80004e6:	2100      	movs	r1, #0
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <main+0x120>)
 80004ea:	f000 fcf9 	bl	8000ee0 <W25qxx_Write>
  W25qxx_Write((uint8_t*)TEXT_Buffer2, SIZE, SIZE2);
 80004ee:	2224      	movs	r2, #36	; 0x24
 80004f0:	211b      	movs	r1, #27
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <main+0x124>)
 80004f4:	f000 fcf4 	bl	8000ee0 <W25qxx_Write>
  W25qxx_Read(datatemp, 0, SIZE+SIZE2);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	223f      	movs	r2, #63	; 0x3f
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fc5e 	bl	8000dc0 <W25qxx_Read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000504:	2108      	movs	r1, #8
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <main+0x128>)
 8000508:	f001 faa9 	bl	8001a5e <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 800050c:	20fa      	movs	r0, #250	; 0xfa
 800050e:	f000 ffc9 	bl	80014a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000512:	e7f7      	b.n	8000504 <main+0x10c>
 8000514:	e000ed00 	.word	0xe000ed00
 8000518:	08004630 	.word	0x08004630
 800051c:	0800464c 	.word	0x0800464c
 8000520:	58021000 	.word	0x58021000

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b09c      	sub	sp, #112	; 0x70
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800052e:	224c      	movs	r2, #76	; 0x4c
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 f868 	bl	8004608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2220      	movs	r2, #32
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 f862 	bl	8004608 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000544:	2002      	movs	r0, #2
 8000546:	f001 faa5 	bl	8001a94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b32      	ldr	r3, [pc, #200]	; (8000618 <SystemClock_Config+0xf4>)
 8000550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000552:	4a31      	ldr	r2, [pc, #196]	; (8000618 <SystemClock_Config+0xf4>)
 8000554:	f023 0301 	bic.w	r3, r3, #1
 8000558:	62d3      	str	r3, [r2, #44]	; 0x2c
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <SystemClock_Config+0xf4>)
 800055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b2d      	ldr	r3, [pc, #180]	; (800061c <SystemClock_Config+0xf8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	4a2b      	ldr	r2, [pc, #172]	; (800061c <SystemClock_Config+0xf8>)
 800056e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemClock_Config+0xf8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000580:	bf00      	nop
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <SystemClock_Config+0xf8>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800058a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800058e:	d1f8      	bne.n	8000582 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000590:	2309      	movs	r3, #9
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005a6:	2305      	movs	r3, #5
 80005a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005aa:	2360      	movs	r3, #96	; 0x60
 80005ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005ba:	2308      	movs	r3, #8
 80005bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005be:	2300      	movs	r3, #0
 80005c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fee0 	bl	8002390 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005d6:	f000 f823 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	233f      	movs	r3, #63	; 0x3f
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005e6:	2308      	movs	r3, #8
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 faf4 	bl	8002bec <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800060a:	f000 f809 	bl	8000620 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3770      	adds	r7, #112	; 0x70
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	58000400 	.word	0x58000400
 800061c:	58024800 	.word	0x58024800

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_QUADSPI_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_QUADSPI_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_QUADSPI_Init+0x50>)
 8000638:	2201      	movs	r2, #1
 800063a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_QUADSPI_Init+0x50>)
 800063e:	2204      	movs	r2, #4
 8000640:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_QUADSPI_Init+0x50>)
 8000644:	2210      	movs	r2, #16
 8000646:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_QUADSPI_Init+0x50>)
 800064a:	2216      	movs	r2, #22
 800064c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_QUADSPI_Init+0x50>)
 8000650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000654:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_QUADSPI_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_QUADSPI_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_QUADSPI_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_QUADSPI_Init+0x50>)
 800066a:	f001 fa4d 	bl	8001b08 <HAL_QSPI_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000674:	f7ff ffd4 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	24000030 	.word	0x24000030
 8000680:	52005000 	.word	0x52005000

08000684 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b0ba      	sub	sp, #232	; 0xe8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	22bc      	movs	r2, #188	; 0xbc
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 ffaf 	bl	8004608 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a54      	ldr	r2, [pc, #336]	; (8000800 <HAL_QSPI_MspInit+0x17c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	f040 80a0 	bne.w	80007f6 <HAL_QSPI_MspInit+0x172>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80006b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80006bc:	2300      	movs	r3, #0
 80006be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fdc1 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80006d0:	f7ff ffa6 	bl	8000620 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80006d4:	4b4b      	ldr	r3, [pc, #300]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 80006d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006da:	4a4a      	ldr	r2, [pc, #296]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80006e4:	4b47      	ldr	r3, [pc, #284]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 80006e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f8:	4a42      	ldr	r2, [pc, #264]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b3c      	ldr	r3, [pc, #240]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	4a3b      	ldr	r2, [pc, #236]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000720:	4b38      	ldr	r3, [pc, #224]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	4a33      	ldr	r2, [pc, #204]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <HAL_QSPI_MspInit+0x180>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800074c:	2304      	movs	r3, #4
 800074e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000764:	2309      	movs	r3, #9
 8000766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800076a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800076e:	4619      	mov	r1, r3
 8000770:	4825      	ldr	r0, [pc, #148]	; (8000808 <HAL_QSPI_MspInit+0x184>)
 8000772:	f000 ffab 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000776:	2304      	movs	r3, #4
 8000778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800078e:	2309      	movs	r3, #9
 8000790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000798:	4619      	mov	r1, r3
 800079a:	481c      	ldr	r0, [pc, #112]	; (800080c <HAL_QSPI_MspInit+0x188>)
 800079c:	f000 ff96 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80007a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007ba:	2309      	movs	r3, #9
 80007bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <HAL_QSPI_MspInit+0x18c>)
 80007c8:	f000 ff80 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80007e4:	230a      	movs	r3, #10
 80007e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <HAL_QSPI_MspInit+0x188>)
 80007f2:	f000 ff6b 	bl	80016cc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	37e8      	adds	r7, #232	; 0xe8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	52005000 	.word	0x52005000
 8000804:	58024400 	.word	0x58024400
 8000808:	58021000 	.word	0x58021000
 800080c:	58020400 	.word	0x58020400
 8000810:	58020c00 	.word	0x58020c00

08000814 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_RTC_Init+0x48>)
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <MX_RTC_Init+0x4c>)
 800081c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_RTC_Init+0x48>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_RTC_Init+0x48>)
 8000826:	227f      	movs	r2, #127	; 0x7f
 8000828:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_RTC_Init+0x48>)
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_RTC_Init+0x48>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_RTC_Init+0x48>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_RTC_Init+0x48>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_RTC_Init+0x48>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_RTC_Init+0x48>)
 800084a:	f003 fda9 	bl	80043a0 <HAL_RTC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000854:	f7ff fee4 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2400007c 	.word	0x2400007c
 8000860:	58004000 	.word	0x58004000

08000864 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0b2      	sub	sp, #200	; 0xc8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	22bc      	movs	r2, #188	; 0xbc
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f003 fec7 	bl	8004608 <memset>
  if(rtcHandle->Instance==RTC)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_RTC_MspInit+0x58>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d116      	bne.n	80008b2 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000884:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000888:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800088a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fcd8 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80008a2:	f7ff febd 	bl	8000620 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_RTC_MspInit+0x5c>)
 80008a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <HAL_RTC_MspInit+0x5c>)
 80008ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008b2:	bf00      	nop
 80008b4:	37c8      	adds	r7, #200	; 0xc8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	58004000 	.word	0x58004000
 80008c0:	58024400 	.word	0x58024400

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_MspInit+0x30>)
 80008cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008d0:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x30>)
 80008d2:	f043 0302 	orr.w	r3, r3, #2
 80008d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x30>)
 80008dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008e0:	f003 0302 	and.w	r3, r3, #2
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	58024400 	.word	0x58024400

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 fd8e 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000950:	4b37      	ldr	r3, [pc, #220]	; (8000a30 <SystemInit+0xe4>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000956:	4a36      	ldr	r2, [pc, #216]	; (8000a30 <SystemInit+0xe4>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000960:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <SystemInit+0xe8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 030f 	and.w	r3, r3, #15
 8000968:	2b06      	cmp	r3, #6
 800096a:	d807      	bhi.n	800097c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800096c:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <SystemInit+0xe8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f023 030f 	bic.w	r3, r3, #15
 8000974:	4a2f      	ldr	r2, [pc, #188]	; (8000a34 <SystemInit+0xe8>)
 8000976:	f043 0307 	orr.w	r3, r3, #7
 800097a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <SystemInit+0xec>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <SystemInit+0xec>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <SystemInit+0xec>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <SystemInit+0xec>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4929      	ldr	r1, [pc, #164]	; (8000a38 <SystemInit+0xec>)
 8000994:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <SystemInit+0xf0>)
 8000996:	4013      	ands	r3, r2
 8000998:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <SystemInit+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <SystemInit+0xe8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f023 030f 	bic.w	r3, r3, #15
 80009ae:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <SystemInit+0xe8>)
 80009b0:	f043 0307 	orr.w	r3, r3, #7
 80009b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <SystemInit+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <SystemInit+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <SystemInit+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <SystemInit+0xec>)
 80009ca:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <SystemInit+0xf4>)
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <SystemInit+0xec>)
 80009d0:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <SystemInit+0xf8>)
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <SystemInit+0xec>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <SystemInit+0xfc>)
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <SystemInit+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <SystemInit+0xec>)
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <SystemInit+0xfc>)
 80009e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <SystemInit+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <SystemInit+0xec>)
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <SystemInit+0xfc>)
 80009f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <SystemInit+0xec>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <SystemInit+0xec>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <SystemInit+0xec>)
 80009fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <SystemInit+0xec>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <SystemInit+0x100>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <SystemInit+0x104>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a16:	d202      	bcs.n	8000a1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <SystemInit+0x108>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <SystemInit+0x10c>)
 8000a20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	52002000 	.word	0x52002000
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a40:	02020200 	.word	0x02020200
 8000a44:	01ff0000 	.word	0x01ff0000
 8000a48:	01010280 	.word	0x01010280
 8000a4c:	5c001000 	.word	0x5c001000
 8000a50:	ffff0000 	.word	0xffff0000
 8000a54:	51008108 	.word	0x51008108
 8000a58:	52004000 	.word	0x52004000

08000a5c <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

void w25qxx_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
//	HAL_Delay(5);
//	MX_QUADSPI_Init();
	QSPI_ResetDevice(&hqspi);
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <w25qxx_Init+0x20>)
 8000a62:	f000 fb79 	bl	8001158 <QSPI_ResetDevice>
//	HAL_Delay(0); // 1ms wait device stable
	w25qxx_ID = w25qxx_GetID();
 8000a66:	f000 f80d 	bl	8000a84 <w25qxx_GetID>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <w25qxx_Init+0x24>)
 8000a70:	801a      	strh	r2, [r3, #0]
	w25qxx_ReadAllStatusReg();
 8000a72:	f000 f897 	bl	8000ba4 <w25qxx_ReadAllStatusReg>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000030 	.word	0x24000030
 8000a80:	240000a4 	.word	0x240000a4

08000a84 <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <w25qxx_GetID+0x94>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b05      	cmp	r3, #5
 8000a90:	d114      	bne.n	8000abc <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8000a92:	2306      	movs	r3, #6
 8000a94:	9304      	str	r3, [sp, #16]
 8000a96:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000a9a:	9303      	str	r3, [sp, #12]
 8000a9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2194      	movs	r1, #148	; 0x94
 8000ab4:	4819      	ldr	r0, [pc, #100]	; (8000b1c <w25qxx_GetID+0x98>)
 8000ab6:	f000 fba8 	bl	800120a <QSPI_Send_CMD>
 8000aba:	e013      	b.n	8000ae4 <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8000abc:	2306      	movs	r3, #6
 8000abe:	9304      	str	r3, [sp, #16]
 8000ac0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000ac4:	9303      	str	r3, [sp, #12]
 8000ac6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	2200      	movs	r2, #0
 8000adc:	2190      	movs	r1, #144	; 0x90
 8000ade:	480f      	ldr	r0, [pc, #60]	; (8000b1c <w25qxx_GetID+0x98>)
 8000ae0:	f000 fb93 	bl	800120a <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aea:	4619      	mov	r1, r3
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <w25qxx_GetID+0x98>)
 8000aee:	f001 f96f 	bl	8001dd0 <HAL_QSPI_Receive>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e008      	b.n	8000b0e <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 8000afc:	783b      	ldrb	r3, [r7, #0]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	787b      	ldrb	r3, [r7, #1]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	24000008 	.word	0x24000008
 8000b1c:	24000030 	.word	0x24000030

08000b20 <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af06      	add	r7, sp, #24
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <w25qxx_ReadSR+0x7c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b05      	cmp	r3, #5
 8000b34:	d112      	bne.n	8000b5c <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 8000b36:	79f9      	ldrb	r1, [r7, #7]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	9304      	str	r3, [sp, #16]
 8000b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b40:	9303      	str	r3, [sp, #12]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2300      	movs	r3, #0
 8000b52:	2200      	movs	r2, #0
 8000b54:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <w25qxx_ReadSR+0x80>)
 8000b56:	f000 fb58 	bl	800120a <QSPI_Send_CMD>
 8000b5a:	e011      	b.n	8000b80 <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 8000b5c:	79f9      	ldrb	r1, [r7, #7]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	9304      	str	r3, [sp, #16]
 8000b62:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9302      	str	r3, [sp, #8]
 8000b6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	2300      	movs	r3, #0
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2300      	movs	r3, #0
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <w25qxx_ReadSR+0x80>)
 8000b7c:	f000 fb45 	bl	800120a <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b80:	f107 030f 	add.w	r3, r7, #15
 8000b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <w25qxx_ReadSR+0x80>)
 8000b8c:	f001 f920 	bl	8001dd0 <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	24000008 	.word	0x24000008
 8000ba0:	24000030 	.word	0x24000030

08000ba4 <w25qxx_ReadAllStatusReg>:

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
}

uint8_t w25qxx_ReadAllStatusReg(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	
	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 8000ba8:	2005      	movs	r0, #5
 8000baa:	f7ff ffb9 	bl	8000b20 <w25qxx_ReadSR>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <w25qxx_ReadAllStatusReg+0x34>)
 8000bb4:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 8000bb6:	2035      	movs	r0, #53	; 0x35
 8000bb8:	f7ff ffb2 	bl	8000b20 <w25qxx_ReadSR>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <w25qxx_ReadAllStatusReg+0x34>)
 8000bc2:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 8000bc4:	2015      	movs	r0, #21
 8000bc6:	f7ff ffab 	bl	8000b20 <w25qxx_ReadSR>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <w25qxx_ReadAllStatusReg+0x34>)
 8000bd0:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	240000a0 	.word	0x240000a0

08000bdc <W25QXX_Wait_Busy>:

void W25QXX_Wait_Busy(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
 8000be0:	bf00      	nop
 8000be2:	2005      	movs	r0, #5
 8000be4:	f7ff ff9c 	bl	8000b20 <w25qxx_ReadSR>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d0f7      	beq.n	8000be2 <W25QXX_Wait_Busy+0x6>
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <W25qxx_WriteEnable>:
  }
  return w25qxx_OK;
}

uint8_t W25qxx_WriteEnable(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <W25qxx_WriteEnable+0x14>)
 8000bfe:	f000 fb39 	bl	8001274 <QSPI_WriteEnable>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b2db      	uxtb	r3, r3
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	24000030 	.word	0x24000030

08000c10 <W25qxx_EraseSector>:
  * @brief  Erase 4KB Sector of the OSPI memory.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseSector(uint32_t SectorAddress)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af06      	add	r7, sp, #24
 8000c16:	6078      	str	r0, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8000c18:	f7ff ffee 	bl	8000bf8 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 8000c1c:	f7ff ffde 	bl	8000bdc <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <W25qxx_EraseSector+0x84>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b05      	cmp	r3, #5
 8000c26:	d115      	bne.n	8000c54 <W25qxx_EraseSector+0x44>
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_NONE,0);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9304      	str	r3, [sp, #16]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	9303      	str	r3, [sp, #12]
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	2120      	movs	r1, #32
 8000c48:	4813      	ldr	r0, [pc, #76]	; (8000c98 <W25qxx_EraseSector+0x88>)
 8000c4a:	f000 fade 	bl	800120a <QSPI_Send_CMD>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e014      	b.n	8000c7e <W25qxx_EraseSector+0x6e>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_NONE,0);
 8000c54:	2300      	movs	r3, #0
 8000c56:	9304      	str	r3, [sp, #16]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9303      	str	r3, [sp, #12]
 8000c5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c60:	9302      	str	r3, [sp, #8]
 8000c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	2120      	movs	r1, #32
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <W25qxx_EraseSector+0x88>)
 8000c76:	f000 fac8 	bl	800120a <QSPI_Send_CMD>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73fb      	strb	r3, [r7, #15]
	

	if(result == w25qxx_OK)
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <W25qxx_EraseSector+0x78>
		W25QXX_Wait_Busy();
 8000c84:	f7ff ffaa 	bl	8000bdc <W25QXX_Wait_Busy>

	return result;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000008 	.word	0x24000008
 8000c98:	24000030 	.word	0x24000030

08000c9c <W25qxx_EraseChip>:
  * @brief  Whole chip erase.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseChip(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af06      	add	r7, sp, #24
	uint8_t result;
	
	W25qxx_WriteEnable();
 8000ca2:	f7ff ffa9 	bl	8000bf8 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 8000ca6:	f7ff ff99 	bl	8000bdc <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <W25qxx_EraseChip+0x78>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d113      	bne.n	8000cda <W25qxx_EraseChip+0x3e>
		result = QSPI_Send_CMD(&hqspi,W25X_ChipErase,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_DATA_NONE,0);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9304      	str	r3, [sp, #16]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9303      	str	r3, [sp, #12]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	2200      	movs	r2, #0
 8000ccc:	21c7      	movs	r1, #199	; 0xc7
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <W25qxx_EraseChip+0x7c>)
 8000cd0:	f000 fa9b 	bl	800120a <QSPI_Send_CMD>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	e012      	b.n	8000d00 <W25qxx_EraseChip+0x64>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_ChipErase,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_DATA_NONE,0);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9304      	str	r3, [sp, #16]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9303      	str	r3, [sp, #12]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	21c7      	movs	r1, #199	; 0xc7
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <W25qxx_EraseChip+0x7c>)
 8000cf8:	f000 fa87 	bl	800120a <QSPI_Send_CMD>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
	

	if(result == w25qxx_OK)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <W25qxx_EraseChip+0x6e>
		W25QXX_Wait_Busy();
 8000d06:	f7ff ff69 	bl	8000bdc <W25QXX_Wait_Busy>
	
	return result;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	24000008 	.word	0x24000008
 8000d18:	24000030 	.word	0x24000030

08000d1c <W25qxx_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ W25qxx page size
  * @retval QSPI memory status
  */
uint8_t W25qxx_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af06      	add	r7, sp, #24
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8000d28:	f7ff ff66 	bl	8000bf8 <W25qxx_WriteEnable>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <W25qxx_PageProgram+0x9c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b05      	cmp	r3, #5
 8000d32:	d116      	bne.n	8000d62 <W25qxx_PageProgram+0x46>
		result = QSPI_Send_CMD(&hqspi,W25X_QUAD_INPUT_PAGE_PROG_CMD,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_4_LINES,Size);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	9304      	str	r3, [sp, #16]
 8000d38:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d3c:	9303      	str	r3, [sp, #12]
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	2132      	movs	r1, #50	; 0x32
 8000d56:	4819      	ldr	r0, [pc, #100]	; (8000dbc <W25qxx_PageProgram+0xa0>)
 8000d58:	f000 fa57 	bl	800120a <QSPI_Send_CMD>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	75fb      	strb	r3, [r7, #23]
 8000d60:	e015      	b.n	8000d8e <W25qxx_PageProgram+0x72>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_PageProgram,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_4_LINES,Size);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	9304      	str	r3, [sp, #16]
 8000d66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d6a:	9303      	str	r3, [sp, #12]
 8000d6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d70:	9302      	str	r3, [sp, #8]
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	2102      	movs	r1, #2
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <W25qxx_PageProgram+0xa0>)
 8000d86:	f000 fa40 	bl	800120a <QSPI_Send_CMD>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	75fb      	strb	r3, [r7, #23]
	
	if(result == w25qxx_OK)
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d107      	bne.n	8000da4 <W25qxx_PageProgram+0x88>
		result = HAL_QSPI_Transmit(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d98:	68f9      	ldr	r1, [r7, #12]
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <W25qxx_PageProgram+0xa0>)
 8000d9c:	f000 ff86 	bl	8001cac <HAL_QSPI_Transmit>
 8000da0:	4603      	mov	r3, r0
 8000da2:	75fb      	strb	r3, [r7, #23]
	
	/* �ȴ�д����� */
	if(result == w25qxx_OK)
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <W25qxx_PageProgram+0x92>
		W25QXX_Wait_Busy();
 8000daa:	f7ff ff17 	bl	8000bdc <W25QXX_Wait_Busy>
	
  return result;
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000008 	.word	0x24000008
 8000dbc:	24000030 	.word	0x24000030

08000dc0 <W25qxx_Read>:


uint8_t W25qxx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	
	QSPI_CommandTypeDef      s_command;

	/* Configure the command for the read instruction */
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <W25qxx_Read+0xa4>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d107      	bne.n	8000de4 <W25qxx_Read+0x24>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8000dd4:	23eb      	movs	r3, #235	; 0xeb
 8000dd6:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000dd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD;
 8000dde:	2306      	movs	r3, #6
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000de2:	e006      	b.n	8000df2 <W25qxx_Read+0x32>
	}
	else 
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8000de4:	23eb      	movs	r3, #235	; 0xeb
 8000de6:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD-2;
 8000dee:	2304      	movs	r3, #4
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  }
	
	s_command.Address           = ReadAddr;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000df6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e00:	623b      	str	r3, [r7, #32]

	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000e02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateBytes    = 0xFF;
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.DataMode          = QSPI_DATA_4_LINES;	
 8000e10:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.NbData            = Size;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c
		
	s_command.DdrMode         = QSPI_DDR_MODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	643b      	str	r3, [r7, #64]	; 0x40

	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e22:	2300      	movs	r3, #0
 8000e24:	64bb      	str	r3, [r7, #72]	; 0x48
	
	result = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <W25qxx_Read+0xa8>)
 8000e32:	f000 fedd 	bl	8001bf0 <HAL_QSPI_Command>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	if(result == w25qxx_OK)
 8000e3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d108      	bne.n	8000e56 <W25qxx_Read+0x96>
		result = HAL_QSPI_Receive(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e48:	68f9      	ldr	r1, [r7, #12]
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <W25qxx_Read+0xa8>)
 8000e4c:	f000 ffc0 	bl	8001dd0 <HAL_QSPI_Receive>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	return result;
 8000e56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3750      	adds	r7, #80	; 0x50
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	24000008 	.word	0x24000008
 8000e68:	24000030 	.word	0x24000030

08000e6c <W25qxx_WriteNoCheck>:


void W25qxx_WriteNoCheck(uint8_t *pBuffer,uint32_t WriteAddr,uint32_t NumByteToWrite)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	uint16_t pageremain;	   
	pageremain = 256 - WriteAddr % 256;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e84:	82fb      	strh	r3, [r7, #22]
	if (NumByteToWrite <= pageremain)
 8000e86:	8afb      	ldrh	r3, [r7, #22]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d801      	bhi.n	8000e92 <W25qxx_WriteNoCheck+0x26>
	{
		pageremain = NumByteToWrite;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	82fb      	strh	r3, [r7, #22]
	}
	while(1)
	{
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 8000e92:	8afb      	ldrh	r3, [r7, #22]
 8000e94:	461a      	mov	r2, r3
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ff3f 	bl	8000d1c <W25qxx_PageProgram>
		if (NumByteToWrite == pageremain)
 8000e9e:	8afb      	ldrh	r3, [r7, #22]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d016      	beq.n	8000ed4 <W25qxx_WriteNoCheck+0x68>
		{
			break;
		}
	 	else //NumByteToWrite>pageremain
		{
			pBuffer += pageremain;
 8000ea6:	8afb      	ldrh	r3, [r7, #22]
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
			WriteAddr += pageremain;
 8000eae:	8afb      	ldrh	r3, [r7, #22]
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60bb      	str	r3, [r7, #8]

			NumByteToWrite -= pageremain;
 8000eb6:	8afb      	ldrh	r3, [r7, #22]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	607b      	str	r3, [r7, #4]
			if (NumByteToWrite > 256)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec4:	d903      	bls.n	8000ece <W25qxx_WriteNoCheck+0x62>
				pageremain = 256;
 8000ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eca:	82fb      	strh	r3, [r7, #22]
 8000ecc:	e7e1      	b.n	8000e92 <W25qxx_WriteNoCheck+0x26>
			else
				pageremain = NumByteToWrite;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	82fb      	strh	r3, [r7, #22]
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 8000ed2:	e7de      	b.n	8000e92 <W25qxx_WriteNoCheck+0x26>
			break;
 8000ed4:	bf00      	nop
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <W25qxx_Write>:


void W25qxx_Write(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	f843 0c14 	str.w	r0, [r3, #-20]
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	f843 1c18 	str.w	r1, [r3, #-24]
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	f823 2c1a 	strh.w	r2, [r3, #-26]
	uint16_t secoff;
	uint16_t secremain;
 	uint16_t i;
	uint8_t W25QXX_BUF[4096];

 	secpos = WriteAddr / 4096;
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000f08:	0b1b      	lsrs	r3, r3, #12
 8000f0a:	f241 021c 	movw	r2, #4124	; 0x101c
 8000f0e:	443a      	add	r2, r7
 8000f10:	6013      	str	r3, [r2, #0]
	secoff = WriteAddr % 4096;
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f20:	f241 021a 	movw	r2, #4122	; 0x101a
 8000f24:	443a      	add	r2, r7
 8000f26:	8013      	strh	r3, [r2, #0]
	secremain = 4096 - secoff;
 8000f28:	f241 031a 	movw	r3, #4122	; 0x101a
 8000f2c:	443b      	add	r3, r7
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000f34:	f241 0218 	movw	r2, #4120	; 0x1018
 8000f38:	443a      	add	r2, r7
 8000f3a:	8013      	strh	r3, [r2, #0]

 	if (NumByteToWrite <= secremain) secremain = NumByteToWrite;
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 8000f44:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f48:	443b      	add	r3, r7
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d807      	bhi.n	8000f60 <W25qxx_Write+0x80>
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8000f58:	f241 0218 	movw	r2, #4120	; 0x1018
 8000f5c:	443a      	add	r2, r7
 8000f5e:	8013      	strh	r3, [r2, #0]
	while(1)
	{
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096);
 8000f60:	f241 031c 	movw	r3, #4124	; 0x101c
 8000f64:	443b      	add	r3, r7
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0319      	lsls	r1, r3, #12
 8000f6a:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <W25qxx_Write+0x274>)
 8000f6c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000f70:	443b      	add	r3, r7
 8000f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff22 	bl	8000dc0 <W25qxx_Read>
		for (i = 0;i < secremain; i++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f241 0216 	movw	r2, #4118	; 0x1016
 8000f82:	443a      	add	r2, r7
 8000f84:	8013      	strh	r3, [r2, #0]
 8000f86:	e018      	b.n	8000fba <W25qxx_Write+0xda>
		{
			if (W25QXX_BUF[secoff+i] != 0XFF) break;
 8000f88:	f241 031a 	movw	r3, #4122	; 0x101a
 8000f8c:	443b      	add	r3, r7
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	f241 0316 	movw	r3, #4118	; 0x1016
 8000f94:	443b      	add	r3, r7
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f107 0220 	add.w	r2, r7, #32
 8000f9e:	4413      	add	r3, r2
 8000fa0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000fa4:	2bff      	cmp	r3, #255	; 0xff
 8000fa6:	d113      	bne.n	8000fd0 <W25qxx_Write+0xf0>
		for (i = 0;i < secremain; i++)
 8000fa8:	f241 0316 	movw	r3, #4118	; 0x1016
 8000fac:	443b      	add	r3, r7
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f241 0216 	movw	r2, #4118	; 0x1016
 8000fb6:	443a      	add	r2, r7
 8000fb8:	8013      	strh	r3, [r2, #0]
 8000fba:	f241 0316 	movw	r3, #4118	; 0x1016
 8000fbe:	443b      	add	r3, r7
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fc6:	443b      	add	r3, r7
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d3dc      	bcc.n	8000f88 <W25qxx_Write+0xa8>
 8000fce:	e000      	b.n	8000fd2 <W25qxx_Write+0xf2>
			if (W25QXX_BUF[secoff+i] != 0XFF) break;
 8000fd0:	bf00      	nop
		}
		if (i < secremain)
 8000fd2:	f241 0316 	movw	r3, #4118	; 0x1016
 8000fd6:	443b      	add	r3, r7
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fde:	443b      	add	r3, r7
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d245      	bcs.n	8001072 <W25qxx_Write+0x192>
		{
			W25qxx_EraseSector(secpos);
 8000fe6:	f241 031c 	movw	r3, #4124	; 0x101c
 8000fea:	443b      	add	r3, r7
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	f7ff fe0f 	bl	8000c10 <W25qxx_EraseSector>
			for (i = 0; i < secremain; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f241 0216 	movw	r2, #4118	; 0x1016
 8000ff8:	443a      	add	r2, r7
 8000ffa:	8013      	strh	r3, [r2, #0]
 8000ffc:	e020      	b.n	8001040 <W25qxx_Write+0x160>
			{
				W25QXX_BUF[i + secoff] = pBuffer[i];
 8000ffe:	f241 0316 	movw	r3, #4118	; 0x1016
 8001002:	443b      	add	r3, r7
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	f107 0220 	add.w	r2, r7, #32
 800100a:	f852 2c14 	ldr.w	r2, [r2, #-20]
 800100e:	441a      	add	r2, r3
 8001010:	f241 0316 	movw	r3, #4118	; 0x1016
 8001014:	443b      	add	r3, r7
 8001016:	8819      	ldrh	r1, [r3, #0]
 8001018:	f241 031a 	movw	r3, #4122	; 0x101a
 800101c:	443b      	add	r3, r7
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	440b      	add	r3, r1
 8001022:	7812      	ldrb	r2, [r2, #0]
 8001024:	f107 0120 	add.w	r1, r7, #32
 8001028:	440b      	add	r3, r1
 800102a:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < secremain; i++)
 800102e:	f241 0316 	movw	r3, #4118	; 0x1016
 8001032:	443b      	add	r3, r7
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	f241 0216 	movw	r2, #4118	; 0x1016
 800103c:	443a      	add	r2, r7
 800103e:	8013      	strh	r3, [r2, #0]
 8001040:	f241 0316 	movw	r3, #4118	; 0x1016
 8001044:	443b      	add	r3, r7
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	f241 0318 	movw	r3, #4120	; 0x1018
 800104c:	443b      	add	r3, r7
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3d4      	bcc.n	8000ffe <W25qxx_Write+0x11e>
			}
			W25qxx_WriteNoCheck(W25QXX_BUF, secpos * 4096, 4096);
 8001054:	f241 031c 	movw	r3, #4124	; 0x101c
 8001058:	443b      	add	r3, r7
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	0319      	lsls	r1, r3, #12
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <W25qxx_Write+0x274>)
 8001060:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001064:	443b      	add	r3, r7
 8001066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fefe 	bl	8000e6c <W25qxx_WriteNoCheck>
 8001070:	e010      	b.n	8001094 <W25qxx_Write+0x1b4>
		}
		else
		{
			W25qxx_WriteNoCheck(pBuffer, WriteAddr, secremain);
 8001072:	f241 0318 	movw	r3, #4120	; 0x1018
 8001076:	443b      	add	r3, r7
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f107 0220 	add.w	r2, r7, #32
 800107e:	4611      	mov	r1, r2
 8001080:	f107 0220 	add.w	r2, r7, #32
 8001084:	4610      	mov	r0, r2
 8001086:	461a      	mov	r2, r3
 8001088:	f851 1c18 	ldr.w	r1, [r1, #-24]
 800108c:	f850 0c14 	ldr.w	r0, [r0, #-20]
 8001090:	f7ff feec 	bl	8000e6c <W25qxx_WriteNoCheck>
		}
		if (NumByteToWrite == secremain)
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 800109c:	f241 0318 	movw	r3, #4120	; 0x1018
 80010a0:	443b      	add	r3, r7
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d04e      	beq.n	8001146 <W25qxx_Write+0x266>
		{
			break;
		}
		else
		{
			secpos++;
 80010a8:	f241 031c 	movw	r3, #4124	; 0x101c
 80010ac:	443b      	add	r3, r7
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	f241 021c 	movw	r2, #4124	; 0x101c
 80010b6:	443a      	add	r2, r7
 80010b8:	6013      	str	r3, [r2, #0]
			secoff = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f241 021a 	movw	r2, #4122	; 0x101a
 80010c0:	443a      	add	r2, r7
 80010c2:	8013      	strh	r3, [r2, #0]

			pBuffer += secremain;
 80010c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80010c8:	443b      	add	r3, r7
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	f107 0220 	add.w	r2, r7, #32
 80010d0:	4611      	mov	r1, r2
 80010d2:	f107 0220 	add.w	r2, r7, #32
 80010d6:	f852 2c14 	ldr.w	r2, [r2, #-20]
 80010da:	4413      	add	r3, r2
 80010dc:	f841 3c14 	str.w	r3, [r1, #-20]
			WriteAddr += secremain;
 80010e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80010e4:	443b      	add	r3, r7
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	f107 0220 	add.w	r2, r7, #32
 80010ec:	4611      	mov	r1, r2
 80010ee:	f107 0220 	add.w	r2, r7, #32
 80010f2:	f852 2c18 	ldr.w	r2, [r2, #-24]
 80010f6:	4413      	add	r3, r2
 80010f8:	f841 3c18 	str.w	r3, [r1, #-24]
			NumByteToWrite -= secremain;
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	4619      	mov	r1, r3
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 800110a:	f241 0318 	movw	r3, #4120	; 0x1018
 800110e:	443b      	add	r3, r7
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f821 3c1a 	strh.w	r3, [r1, #-26]
			if (NumByteToWrite > 4096)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8001120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001124:	d906      	bls.n	8001134 <W25qxx_Write+0x254>
				secremain = 4096;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	f241 0218 	movw	r2, #4120	; 0x1018
 800112e:	443a      	add	r2, r7
 8001130:	8013      	strh	r3, [r2, #0]
 8001132:	e715      	b.n	8000f60 <W25qxx_Write+0x80>
			else
				secremain = NumByteToWrite;
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 800113c:	f241 0218 	movw	r2, #4120	; 0x1018
 8001140:	443a      	add	r2, r7
 8001142:	8013      	strh	r3, [r2, #0]
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096);
 8001144:	e70c      	b.n	8000f60 <W25qxx_Write+0x80>
			break;
 8001146:	bf00      	nop
		}
	}
}
 8001148:	bf00      	nop
 800114a:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	ffffeff4 	.word	0xffffeff4

08001158 <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b090      	sub	sp, #64	; 0x40
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001164:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8001166:	2366      	movs	r3, #102	; 0x66
 8001168:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800117e:	2300      	movs	r3, #0
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fd2d 	bl	8001bf0 <HAL_QSPI_Command>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e030      	b.n	8001202 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 80011a0:	2399      	movs	r3, #153	; 0x99
 80011a2:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ac:	4619      	mov	r1, r3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fd1e 	bl	8001bf0 <HAL_QSPI_Command>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e021      	b.n	8001202 <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80011be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c2:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 80011c4:	2366      	movs	r3, #102	; 0x66
 80011c6:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d0:	4619      	mov	r1, r3
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 fd0c 	bl	8001bf0 <HAL_QSPI_Command>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command*/
  s_command.Instruction = W25X_ResetDevice;
 80011e2:	2399      	movs	r3, #153	; 0x99
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fcfd 	bl	8001bf0 <HAL_QSPI_Command>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <QSPI_ResetDevice+0xaa>
  }

  return w25qxx_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3740      	adds	r7, #64	; 0x40
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <QSPI_Send_CMD>:


static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b092      	sub	sp, #72	; 0x48
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 800121c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 8001228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 8001238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 800123c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 8001240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 8001244:	2300      	movs	r3, #0
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8001248:	2300      	movs	r3, #0
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800124c:	2300      	movs	r3, #0
 800124e:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	f241 3288 	movw	r2, #5000	; 0x1388
 8001258:	4619      	mov	r1, r3
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 fcc8 	bl	8001bf0 <HAL_QSPI_Command>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3748      	adds	r7, #72	; 0x48
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b096      	sub	sp, #88	; 0x58
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <QSPI_WriteEnable+0xb4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b04      	cmp	r3, #4
 8001282:	d103      	bne.n	800128c <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001284:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
 800128a:	e002      	b.n	8001292 <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800128c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 8001292:	2306      	movs	r3, #6
 8001294:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800129e:	2300      	movs	r3, #0
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012aa:	2300      	movs	r3, #0
 80012ac:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012ae:	2300      	movs	r3, #0
 80012b0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fc97 	bl	8001bf0 <HAL_QSPI_Command>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e028      	b.n	800131e <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 80012d0:	2302      	movs	r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80012dc:	2310      	movs	r3, #16
 80012de:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80012e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e4:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 80012e6:	2305      	movs	r3, #5
 80012e8:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <QSPI_WriteEnable+0xb4>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d103      	bne.n	80012fa <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 80012f2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
 80012f8:	e002      	b.n	8001300 <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 80012fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001300:	f107 0208 	add.w	r2, r7, #8
 8001304:	f107 0120 	add.w	r1, r7, #32
 8001308:	f241 3388 	movw	r3, #5000	; 0x1388
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fdfc 	bl	8001f0a <HAL_QSPI_AutoPolling>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3758      	adds	r7, #88	; 0x58
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	24000008 	.word	0x24000008

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001330:	f7ff fb0c 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135a:	f003 f931 	bl	80045c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff f84b 	bl	80003f8 <main>
  bx  lr
 8001362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001368:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800136c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001370:	08004688 	.word	0x08004688
  ldr r2, =_sbss
 8001374:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001378:	240000ac 	.word	0x240000ac

0800137c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC3_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001386:	2003      	movs	r0, #3
 8001388:	f000 f96e 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800138c:	f001 fde4 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8001390:	4602      	mov	r2, r0
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_Init+0x68>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	4913      	ldr	r1, [pc, #76]	; (80013ec <HAL_Init+0x6c>)
 800139e:	5ccb      	ldrb	r3, [r1, r3]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_Init+0x68>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_Init+0x6c>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_Init+0x70>)
 80013c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_Init+0x74>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ca:	200f      	movs	r0, #15
 80013cc:	f000 f814 	bl	80013f8 <HAL_InitTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e002      	b.n	80013e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013da:	f7ff fa73 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	58024400 	.word	0x58024400
 80013ec:	08004670 	.word	0x08004670
 80013f0:	24000004 	.word	0x24000004
 80013f4:	24000000 	.word	0x24000000

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_InitTick+0x60>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e021      	b.n	8001450 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_InitTick+0x64>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_InitTick+0x60>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f945 	bl	80016b2 <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001440:	f000 f91d 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x68>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	24000010 	.word	0x24000010
 800145c:	24000000 	.word	0x24000000
 8001460:	2400000c 	.word	0x2400000c

08001464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x20>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x24>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_IncTick+0x24>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	24000010 	.word	0x24000010
 8001488:	240000a8 	.word	0x240000a8

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	240000a8 	.word	0x240000a8

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff ffee 	bl	800148c <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014bc:	d005      	beq.n	80014ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_Delay+0x44>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ca:	bf00      	nop
 80014cc:	f7ff ffde 	bl	800148c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f7      	bhi.n	80014cc <HAL_Delay+0x28>
  {
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	24000010 	.word	0x24000010

080014ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetREVID+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0c1b      	lsrs	r3, r3, #16
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	5c001000 	.word	0x5c001000

08001504 <__NVIC_SetPriorityGrouping>:
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <__NVIC_SetPriorityGrouping+0x40>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	4313      	orrs	r3, r2
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <__NVIC_SetPriorityGrouping+0x40>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	05fa0000 	.word	0x05fa0000

0800154c <__NVIC_GetPriorityGrouping>:
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_SetPriority>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001648:	f7ff ff8e 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff47 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff5e 	bl	800154c <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff90 	bl	80015bc <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5f 	bl	8001568 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffb2 	bl	8001624 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016da:	4b89      	ldr	r3, [pc, #548]	; (8001900 <HAL_GPIO_Init+0x234>)
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016de:	e194      	b.n	8001a0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8186 	beq.w	8001a04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_GPIO_Init+0x44>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b03      	cmp	r3, #3
 800177c:	d017      	beq.n	80017ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	69b9      	ldr	r1, [r7, #24]
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0203 	and.w	r2, r3, #3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80e0 	beq.w	8001a04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_GPIO_Init+0x238>)
 8001846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800184a:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <HAL_GPIO_Init+0x238>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_GPIO_Init+0x238>)
 8001856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a29      	ldr	r2, [pc, #164]	; (8001908 <HAL_GPIO_Init+0x23c>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a20      	ldr	r2, [pc, #128]	; (800190c <HAL_GPIO_Init+0x240>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d052      	beq.n	8001934 <HAL_GPIO_Init+0x268>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <HAL_GPIO_Init+0x244>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d031      	beq.n	80018fa <HAL_GPIO_Init+0x22e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_GPIO_Init+0x248>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d02b      	beq.n	80018f6 <HAL_GPIO_Init+0x22a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_GPIO_Init+0x24c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d025      	beq.n	80018f2 <HAL_GPIO_Init+0x226>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1c      	ldr	r2, [pc, #112]	; (800191c <HAL_GPIO_Init+0x250>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01f      	beq.n	80018ee <HAL_GPIO_Init+0x222>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_GPIO_Init+0x254>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d019      	beq.n	80018ea <HAL_GPIO_Init+0x21e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_GPIO_Init+0x258>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0x21a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_GPIO_Init+0x25c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_Init+0x216>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_GPIO_Init+0x260>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x212>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_GPIO_Init+0x264>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_GPIO_Init+0x20e>
 80018d6:	2309      	movs	r3, #9
 80018d8:	e02d      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018da:	230a      	movs	r3, #10
 80018dc:	e02b      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018de:	2308      	movs	r3, #8
 80018e0:	e029      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018e2:	2307      	movs	r3, #7
 80018e4:	e027      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e025      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e023      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e021      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e01f      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e01d      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e01b      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018fe:	bf00      	nop
 8001900:	58000080 	.word	0x58000080
 8001904:	58024400 	.word	0x58024400
 8001908:	58000400 	.word	0x58000400
 800190c:	58020000 	.word	0x58020000
 8001910:	58020400 	.word	0x58020400
 8001914:	58020800 	.word	0x58020800
 8001918:	58020c00 	.word	0x58020c00
 800191c:	58021000 	.word	0x58021000
 8001920:	58021400 	.word	0x58021400
 8001924:	58021800 	.word	0x58021800
 8001928:	58021c00 	.word	0x58021c00
 800192c:	58022000 	.word	0x58022000
 8001930:	58022400 	.word	0x58022400
 8001934:	2300      	movs	r3, #0
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001946:	4938      	ldr	r1, [pc, #224]	; (8001a28 <HAL_GPIO_Init+0x35c>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800197a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	3301      	adds	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f47f ae63 	bne.w	80016e0 <HAL_GPIO_Init+0x14>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3724      	adds	r7, #36	; 0x24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	58000400 	.word	0x58000400

08001a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3c:	787b      	ldrb	r3, [r7, #1]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a48:	e003      	b.n	8001a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	619a      	str	r2, [r3, #24]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a70:	887a      	ldrh	r2, [r7, #2]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	041a      	lsls	r2, r3, #16
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	400b      	ands	r3, r1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	619a      	str	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_PWREx_ConfigSupply+0x70>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d00a      	beq.n	8001abe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_PWREx_ConfigSupply+0x70>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e01f      	b.n	8001afa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e01d      	b.n	8001afa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_PWREx_ConfigSupply+0x70>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	490f      	ldr	r1, [pc, #60]	; (8001b04 <HAL_PWREx_ConfigSupply+0x70>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ace:	f7ff fcdd 	bl	800148c <HAL_GetTick>
 8001ad2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ad4:	e009      	b.n	8001aea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ad6:	f7ff fcd9 	bl	800148c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ae4:	d901      	bls.n	8001aea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e007      	b.n	8001afa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_PWREx_ConfigSupply+0x70>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af6:	d1ee      	bne.n	8001ad6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	58024800 	.word	0x58024800

08001b08 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff fcbc 	bl	800148c <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e05f      	b.n	8001be0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7fe fda9 	bl	8000684 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001b32:	f241 3188 	movw	r1, #5000	; 0x1388
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fa5e 	bl	8001ff8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	021a      	lsls	r2, r3, #8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2120      	movs	r1, #32
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fa56 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d135      	bne.n	8001bde <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_QSPI_Init+0xe0>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6852      	ldr	r2, [r2, #4]
 8001b80:	0611      	lsls	r1, r2, #24
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68d2      	ldr	r2, [r2, #12]
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	69d2      	ldr	r2, [r2, #28]
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6a12      	ldr	r2, [r2, #32]
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_QSPI_Init+0xe4>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6912      	ldr	r2, [r2, #16]
 8001baa:	0411      	lsls	r1, r2, #16
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6952      	ldr	r2, [r2, #20]
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6992      	ldr	r2, [r2, #24]
 8001bb6:	4311      	orrs	r1, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001bde:	7afb      	ldrb	r3, [r7, #11]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	00ffff2f 	.word	0x00ffff2f
 8001bec:	ffe0f8fe 	.word	0xffe0f8fe

08001bf0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff fc46 	bl	800148c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_QSPI_Command+0x22>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e048      	b.n	8001ca4 <HAL_QSPI_Command+0xb4>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d137      	bne.n	8001c96 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2120      	movs	r1, #32
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f9e8 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d125      	bne.n	8001c9a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 fa15 	bl	8002082 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d115      	bne.n	8001c8c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2201      	movs	r2, #1
 8001c68:	2102      	movs	r1, #2
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f9d2 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10f      	bne.n	8001c9a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c8a:	e006      	b.n	8001c9a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c94:	e001      	b.n	8001c9a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff fbe6 	bl	800148c <HAL_GetTick>
 8001cc0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3320      	adds	r3, #32
 8001cc8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_QSPI_Transmit+0x2e>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e076      	b.n	8001dc8 <HAL_QSPI_Transmit+0x11c>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d165      	bne.n	8001dba <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d056      	beq.n	8001da8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2212      	movs	r2, #18
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001d2e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001d30:	e01b      	b.n	8001d6a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f969 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d113      	bne.n	8001d74 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	781a      	ldrb	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1df      	bne.n	8001d32 <HAL_QSPI_Transmit+0x86>
 8001d72:	e000      	b.n	8001d76 <HAL_QSPI_Transmit+0xca>
          break;
 8001d74:	bf00      	nop
      }

      if (status == HAL_OK)
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d110      	bne.n	8001d9e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2201      	movs	r2, #1
 8001d84:	2102      	movs	r1, #2
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f944 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001da6:	e00a      	b.n	8001dbe <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	f043 0208 	orr.w	r2, r3, #8
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	77fb      	strb	r3, [r7, #31]
 8001db8:	e001      	b.n	8001dbe <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff fb54 	bl	800148c <HAL_GetTick>
 8001de4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	3320      	adds	r3, #32
 8001df4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_QSPI_Receive+0x36>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e07d      	b.n	8001f02 <HAL_QSPI_Receive+0x132>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d16c      	bne.n	8001ef4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d05d      	beq.n	8001ee2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2222      	movs	r2, #34	; 0x22
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e5e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001e68:	e01c      	b.n	8001ea4 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2201      	movs	r2, #1
 8001e72:	2106      	movs	r1, #6
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f8cd 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001e7e:	7ffb      	ldrb	r3, [r7, #31]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d114      	bne.n	8001eae <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1de      	bne.n	8001e6a <HAL_QSPI_Receive+0x9a>
 8001eac:	e000      	b.n	8001eb0 <HAL_QSPI_Receive+0xe0>
          break;
 8001eae:	bf00      	nop
      }

      if (status == HAL_OK)
 8001eb0:	7ffb      	ldrb	r3, [r7, #31]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d110      	bne.n	8001ed8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f8a7 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ee0:	e00a      	b.n	8001ef8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f043 0208 	orr.w	r2, r3, #8
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	77fb      	strb	r3, [r7, #31]
 8001ef2:	e001      	b.n	8001ef8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001f00:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af02      	add	r7, sp, #8
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fab8 	bl	800148c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_QSPI_AutoPolling+0x24>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e060      	b.n	8001ff0 <HAL_QSPI_AutoPolling+0xe6>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d14f      	bne.n	8001fe2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2242      	movs	r2, #66	; 0x42
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2200      	movs	r2, #0
 8001f58:	2120      	movs	r1, #32
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f85a 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d13d      	bne.n	8001fe6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6852      	ldr	r2, [r2, #4]
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6892      	ldr	r2, [r2, #8]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001fa0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001faa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f866 	bl	8002082 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f827 	bl	8002014 <QSPI_WaitFlagStateUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fe0:	e001      	b.n	8001fe6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002024:	e01a      	b.n	800205c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800202c:	d016      	beq.n	800205c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7ff fa2d 	bl	800148c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2204      	movs	r2, #4
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e00e      	b.n	800207a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	429a      	cmp	r2, r3
 8002076:	d1d6      	bne.n	8002026 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <QSPI_Config+0x28>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800209c:	d005      	beq.n	80020aa <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3a01      	subs	r2, #1
 80020a8:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80b9 	beq.w	8002226 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d05f      	beq.n	800217c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	6892      	ldr	r2, [r2, #8]
 80020c4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d031      	beq.n	8002132 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	431a      	orrs	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	431a      	orrs	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	049b      	lsls	r3, r3, #18
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	431a      	orrs	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	431a      	orrs	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	ea42 0103 	orr.w	r1, r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	430a      	orrs	r2, r1
 800211a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002122:	f000 812e 	beq.w	8002382 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	6852      	ldr	r2, [r2, #4]
 800212e:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002130:	e127      	b.n	8002382 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	431a      	orrs	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	431a      	orrs	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	431a      	orrs	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	049b      	lsls	r3, r3, #18
 800214e:	431a      	orrs	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	431a      	orrs	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	431a      	orrs	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	431a      	orrs	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	ea42 0103 	orr.w	r1, r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	430a      	orrs	r2, r1
 8002178:	615a      	str	r2, [r3, #20]
}
 800217a:	e102      	b.n	8002382 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d02e      	beq.n	80021e2 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	431a      	orrs	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002192:	431a      	orrs	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	431a      	orrs	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	049b      	lsls	r3, r3, #18
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	ea42 0103 	orr.w	r1, r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80021d2:	f000 80d6 	beq.w	8002382 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	6852      	ldr	r2, [r2, #4]
 80021de:	619a      	str	r2, [r3, #24]
}
 80021e0:	e0cf      	b.n	8002382 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	431a      	orrs	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	049b      	lsls	r3, r3, #18
 80021fe:	431a      	orrs	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	431a      	orrs	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	431a      	orrs	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	431a      	orrs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	ea42 0103 	orr.w	r1, r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	430a      	orrs	r2, r1
 8002222:	615a      	str	r2, [r3, #20]
}
 8002224:	e0ad      	b.n	8002382 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d058      	beq.n	80022e0 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	6892      	ldr	r2, [r2, #8]
 8002236:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02d      	beq.n	800229c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	431a      	orrs	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	431a      	orrs	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	431a      	orrs	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	049b      	lsls	r3, r3, #18
 800225c:	431a      	orrs	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	431a      	orrs	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	431a      	orrs	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	431a      	orrs	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	ea42 0103 	orr.w	r1, r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	430a      	orrs	r2, r1
 8002286:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800228e:	d078      	beq.n	8002382 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	6852      	ldr	r2, [r2, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	e072      	b.n	8002382 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022aa:	431a      	orrs	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	431a      	orrs	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	049b      	lsls	r3, r3, #18
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	431a      	orrs	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	ea42 0103 	orr.w	r1, r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	430a      	orrs	r2, r1
 80022dc:	615a      	str	r2, [r3, #20]
}
 80022de:	e050      	b.n	8002382 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02a      	beq.n	800233e <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	049b      	lsls	r3, r3, #18
 8002304:	431a      	orrs	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	431a      	orrs	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	431a      	orrs	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	431a      	orrs	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	ea42 0103 	orr.w	r1, r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	430a      	orrs	r2, r1
 8002328:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002330:	d027      	beq.n	8002382 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	6852      	ldr	r2, [r2, #4]
 800233a:	619a      	str	r2, [r3, #24]
}
 800233c:	e021      	b.n	8002382 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01d      	beq.n	8002382 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	431a      	orrs	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	431a      	orrs	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	431a      	orrs	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	049b      	lsls	r3, r3, #18
 8002362:	431a      	orrs	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	431a      	orrs	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	431a      	orrs	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	ea42 0103 	orr.w	r1, r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	430a      	orrs	r2, r1
 8002380:	615a      	str	r2, [r3, #20]
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	f000 bc1d 	b.w	8002bde <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8087 	beq.w	80024c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b2:	4b99      	ldr	r3, [pc, #612]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023bc:	4b96      	ldr	r3, [pc, #600]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d007      	beq.n	80023d8 <HAL_RCC_OscConfig+0x48>
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	2b18      	cmp	r3, #24
 80023cc:	d110      	bne.n	80023f0 <HAL_RCC_OscConfig+0x60>
 80023ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	4b8f      	ldr	r3, [pc, #572]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d06c      	beq.n	80024be <HAL_RCC_OscConfig+0x12e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d168      	bne.n	80024be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e3f6      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d106      	bne.n	8002408 <HAL_RCC_OscConfig+0x78>
 80023fa:	4b87      	ldr	r3, [pc, #540]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a86      	ldr	r2, [pc, #536]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e02e      	b.n	8002466 <HAL_RCC_OscConfig+0xd6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x9a>
 8002410:	4b81      	ldr	r3, [pc, #516]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a80      	ldr	r2, [pc, #512]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e01d      	b.n	8002466 <HAL_RCC_OscConfig+0xd6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0xbe>
 8002434:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a77      	ldr	r2, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800243a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b75      	ldr	r3, [pc, #468]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a74      	ldr	r2, [pc, #464]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0xd6>
 800244e:	4b72      	ldr	r3, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a71      	ldr	r2, [pc, #452]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d013      	beq.n	8002496 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7ff f80d 	bl	800148c <HAL_GetTick>
 8002472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002476:	f7ff f809 	bl	800148c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b64      	cmp	r3, #100	; 0x64
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e3aa      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002488:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0xe6>
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fff9 	bl	800148c <HAL_GetTick>
 800249a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800249e:	f7fe fff5 	bl	800148c <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e396      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x10e>
 80024bc:	e000      	b.n	80024c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80cb 	beq.w	8002664 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b52      	ldr	r3, [pc, #328]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d8:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_RCC_OscConfig+0x164>
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2b18      	cmp	r3, #24
 80024e8:	d156      	bne.n	8002598 <HAL_RCC_OscConfig+0x208>
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d151      	bne.n	8002598 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f4:	4b48      	ldr	r3, [pc, #288]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_OscConfig+0x17c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e368      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800250c:	4b42      	ldr	r3, [pc, #264]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 0219 	bic.w	r2, r3, #25
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	493f      	ldr	r1, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800251e:	f7fe ffb5 	bl	800148c <HAL_GetTick>
 8002522:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002526:	f7fe ffb1 	bl	800148c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e352      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002538:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	f7fe ffd2 	bl	80014ec <HAL_GetREVID>
 8002548:	4603      	mov	r3, r0
 800254a:	f241 0203 	movw	r2, #4099	; 0x1003
 800254e:	4293      	cmp	r3, r2
 8002550:	d817      	bhi.n	8002582 <HAL_RCC_OscConfig+0x1f2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x1dc>
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002562:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002568:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256a:	e07b      	b.n	8002664 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	031b      	lsls	r3, r3, #12
 800257a:	4927      	ldr	r1, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002580:	e070      	b.n	8002664 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	4921      	ldr	r1, [pc, #132]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002596:	e065      	b.n	8002664 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d048      	beq.n	8002632 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 0219 	bic.w	r2, r3, #25
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	491a      	ldr	r1, [pc, #104]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe ff6b 	bl	800148c <HAL_GetTick>
 80025b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ba:	f7fe ff67 	bl	800148c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e308      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	f7fe ff88 	bl	80014ec <HAL_GetREVID>
 80025dc:	4603      	mov	r3, r0
 80025de:	f241 0203 	movw	r2, #4099	; 0x1003
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d81a      	bhi.n	800261c <HAL_RCC_OscConfig+0x28c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x270>
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	6053      	str	r3, [r2, #4]
 80025fe:	e031      	b.n	8002664 <HAL_RCC_OscConfig+0x2d4>
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	031b      	lsls	r3, r3, #12
 800260e:	4902      	ldr	r1, [pc, #8]	; (8002618 <HAL_RCC_OscConfig+0x288>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e026      	b.n	8002664 <HAL_RCC_OscConfig+0x2d4>
 8002616:	bf00      	nop
 8002618:	58024400 	.word	0x58024400
 800261c:	4b9a      	ldr	r3, [pc, #616]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	4997      	ldr	r1, [pc, #604]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
 8002630:	e018      	b.n	8002664 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b95      	ldr	r3, [pc, #596]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a94      	ldr	r2, [pc, #592]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe ff25 	bl	800148c <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002646:	f7fe ff21 	bl	800148c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e2c2      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002658:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f0      	bne.n	8002646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a9 	beq.w	80027c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800267a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800267c:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d007      	beq.n	8002698 <HAL_RCC_OscConfig+0x308>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b18      	cmp	r3, #24
 800268c:	d13a      	bne.n	8002704 <HAL_RCC_OscConfig+0x374>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d135      	bne.n	8002704 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002698:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x320>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	2b80      	cmp	r3, #128	; 0x80
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e296      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026b0:	f7fe ff1c 	bl	80014ec <HAL_GetREVID>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d817      	bhi.n	80026ee <HAL_RCC_OscConfig+0x35e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d108      	bne.n	80026d8 <HAL_RCC_OscConfig+0x348>
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026ce:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026d6:	e075      	b.n	80027c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026d8:	4b6b      	ldr	r3, [pc, #428]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	069b      	lsls	r3, r3, #26
 80026e6:	4968      	ldr	r1, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ec:	e06a      	b.n	80027c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ee:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	4962      	ldr	r1, [pc, #392]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002702:	e05f      	b.n	80027c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d042      	beq.n	8002792 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800270c:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5d      	ldr	r2, [pc, #372]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe feb8 	bl	800148c <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002720:	f7fe feb4 	bl	800148c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e255      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002732:	4b55      	ldr	r3, [pc, #340]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800273e:	f7fe fed5 	bl	80014ec <HAL_GetREVID>
 8002742:	4603      	mov	r3, r0
 8002744:	f241 0203 	movw	r2, #4099	; 0x1003
 8002748:	4293      	cmp	r3, r2
 800274a:	d817      	bhi.n	800277c <HAL_RCC_OscConfig+0x3ec>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	2b20      	cmp	r3, #32
 8002752:	d108      	bne.n	8002766 <HAL_RCC_OscConfig+0x3d6>
 8002754:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800275c:	4a4a      	ldr	r2, [pc, #296]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800275e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002762:	6053      	str	r3, [r2, #4]
 8002764:	e02e      	b.n	80027c4 <HAL_RCC_OscConfig+0x434>
 8002766:	4b48      	ldr	r3, [pc, #288]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	069b      	lsls	r3, r3, #26
 8002774:	4944      	ldr	r1, [pc, #272]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	e023      	b.n	80027c4 <HAL_RCC_OscConfig+0x434>
 800277c:	4b42      	ldr	r3, [pc, #264]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	493f      	ldr	r1, [pc, #252]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
 8002790:	e018      	b.n	80027c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a3c      	ldr	r2, [pc, #240]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800279c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fe75 	bl	800148c <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027a6:	f7fe fe71 	bl	800148c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e212      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027b8:	4b33      	ldr	r3, [pc, #204]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d036      	beq.n	800283e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d019      	beq.n	800280c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fe52 	bl	800148c <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fe4e 	bl	800148c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1ef      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x45c>
 800280a:	e018      	b.n	800283e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fe38 	bl	800148c <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002820:	f7fe fe34 	bl	800148c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1d5      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d039      	beq.n	80028be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01c      	beq.n	800288c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a0c      	ldr	r2, [pc, #48]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800285e:	f7fe fe15 	bl	800148c <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002866:	f7fe fe11 	bl	800148c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1b2      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x4d6>
 8002884:	e01b      	b.n	80028be <HAL_RCC_OscConfig+0x52e>
 8002886:	bf00      	nop
 8002888:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800288c:	4b9b      	ldr	r3, [pc, #620]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a9a      	ldr	r2, [pc, #616]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002896:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002898:	f7fe fdf8 	bl	800148c <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028a0:	f7fe fdf4 	bl	800148c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e195      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028b2:	4b92      	ldr	r3, [pc, #584]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8081 	beq.w	80029ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028cc:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCC_OscConfig+0x770>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a8b      	ldr	r2, [pc, #556]	; (8002b00 <HAL_RCC_OscConfig+0x770>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fdd8 	bl	800148c <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe fdd4 	bl	800148c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e175      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f2:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <HAL_RCC_OscConfig+0x770>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x584>
 8002906:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
 8002912:	e02d      	b.n	8002970 <HAL_RCC_OscConfig+0x5e0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x5a6>
 800291c:	4b77      	ldr	r3, [pc, #476]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a76      	ldr	r2, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	4b74      	ldr	r3, [pc, #464]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a73      	ldr	r2, [pc, #460]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800292e:	f023 0304 	bic.w	r3, r3, #4
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	e01c      	b.n	8002970 <HAL_RCC_OscConfig+0x5e0>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x5c8>
 800293e:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
 800294a:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a6b      	ldr	r2, [pc, #428]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0x5e0>
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a67      	ldr	r2, [pc, #412]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
 8002964:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a64      	ldr	r2, [pc, #400]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 800296a:	f023 0304 	bic.w	r3, r3, #4
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d015      	beq.n	80029a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe fd88 	bl	800148c <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7fe fd84 	bl	800148c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	; 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e123      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002996:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0ee      	beq.n	8002980 <HAL_RCC_OscConfig+0x5f0>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fd72 	bl	800148c <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe fd6e 	bl	800148c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e10d      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c2:	4b4e      	ldr	r3, [pc, #312]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ee      	bne.n	80029ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8102 	beq.w	8002bdc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029d8:	4b48      	ldr	r3, [pc, #288]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029e0:	2b18      	cmp	r3, #24
 80029e2:	f000 80bd 	beq.w	8002b60 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	f040 809e 	bne.w	8002b2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b42      	ldr	r3, [pc, #264]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a41      	ldr	r2, [pc, #260]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 80029f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fd46 	bl	800148c <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe fd42 	bl	800148c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0e3      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a26:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_RCC_OscConfig+0x774>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	430a      	orrs	r2, r1
 8002a36:	4931      	ldr	r1, [pc, #196]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	628b      	str	r3, [r1, #40]	; 0x28
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	3b01      	subs	r3, #1
 8002a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	3b01      	subs	r3, #1
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	3b01      	subs	r3, #1
 8002a66:	061b      	lsls	r3, r3, #24
 8002a68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a6c:	4923      	ldr	r1, [pc, #140]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	4a21      	ldr	r2, [pc, #132]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x778>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a8a:	00d2      	lsls	r2, r2, #3
 8002a8c:	491b      	ldr	r1, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a92:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f023 020c 	bic.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4917      	ldr	r1, [pc, #92]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002aa4:	4b15      	ldr	r3, [pc, #84]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f023 0202 	bic.w	r2, r3, #2
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	4912      	ldr	r1, [pc, #72]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_RCC_OscConfig+0x76c>)
 8002aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fccb 	bl	800148c <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002af8:	e011      	b.n	8002b1e <HAL_RCC_OscConfig+0x78e>
 8002afa:	bf00      	nop
 8002afc:	58024400 	.word	0x58024400
 8002b00:	58024800 	.word	0x58024800
 8002b04:	fffffc0c 	.word	0xfffffc0c
 8002b08:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fcbe 	bl	800148c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e05f      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b1e:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <HAL_RCC_OscConfig+0x858>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x77c>
 8002b2a:	e057      	b.n	8002bdc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_RCC_OscConfig+0x858>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <HAL_RCC_OscConfig+0x858>)
 8002b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fca8 	bl	800148c <HAL_GetTick>
 8002b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fca4 	bl	800148c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e045      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b52:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_RCC_OscConfig+0x858>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x7b0>
 8002b5e:	e03d      	b.n	8002bdc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCC_OscConfig+0x858>)
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCC_OscConfig+0x858>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d031      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f003 0203 	and.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d12a      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d122      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d11a      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	0a5b      	lsrs	r3, r3, #9
 8002ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d111      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	0c1b      	lsrs	r3, r3, #16
 8002bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d108      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0e1b      	lsrs	r3, r3, #24
 8002bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3730      	adds	r7, #48	; 0x30
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	58024400 	.word	0x58024400

08002bec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e19c      	b.n	8002f3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b8a      	ldr	r3, [pc, #552]	; (8002e2c <HAL_RCC_ClockConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d910      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b87      	ldr	r3, [pc, #540]	; (8002e2c <HAL_RCC_ClockConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 020f 	bic.w	r2, r3, #15
 8002c16:	4985      	ldr	r1, [pc, #532]	; (8002e2c <HAL_RCC_ClockConfig+0x240>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b83      	ldr	r3, [pc, #524]	; (8002e2c <HAL_RCC_ClockConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e184      	b.n	8002f3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	4b7b      	ldr	r3, [pc, #492]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d908      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c4c:	4b78      	ldr	r3, [pc, #480]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	4975      	ldr	r1, [pc, #468]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	4b70      	ldr	r3, [pc, #448]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d908      	bls.n	8002c8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c7a:	4b6d      	ldr	r3, [pc, #436]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	496a      	ldr	r1, [pc, #424]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d908      	bls.n	8002cba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ca8:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	495e      	ldr	r1, [pc, #376]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d908      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	4953      	ldr	r1, [pc, #332]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d908      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d04:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f023 020f 	bic.w	r2, r3, #15
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4947      	ldr	r1, [pc, #284]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d055      	beq.n	8002dce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4940      	ldr	r1, [pc, #256]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d3c:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d121      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0f6      	b.n	8002f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d54:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d115      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0ea      	b.n	8002f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d6c:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0de      	b.n	8002f3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d7c:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0d6      	b.n	8002f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f023 0207 	bic.w	r2, r3, #7
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4925      	ldr	r1, [pc, #148]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fb75 	bl	800148c <HAL_GetTick>
 8002da2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da6:	f7fe fb71 	bl	800148c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0be      	b.n	8002f3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d1eb      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d208      	bcs.n	8002dfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f023 020f 	bic.w	r2, r3, #15
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	490e      	ldr	r1, [pc, #56]	; (8002e30 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d214      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_RCC_ClockConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 020f 	bic.w	r2, r3, #15
 8002e12:	4906      	ldr	r1, [pc, #24]	; (8002e2c <HAL_RCC_ClockConfig+0x240>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <HAL_RCC_ClockConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e086      	b.n	8002f3a <HAL_RCC_ClockConfig+0x34e>
 8002e2c:	52002000 	.word	0x52002000
 8002e30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d208      	bcs.n	8002e62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e50:	4b3c      	ldr	r3, [pc, #240]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	4939      	ldr	r1, [pc, #228]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d208      	bcs.n	8002e90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e7e:	4b31      	ldr	r3, [pc, #196]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	492e      	ldr	r1, [pc, #184]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d208      	bcs.n	8002ebe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	4922      	ldr	r1, [pc, #136]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d010      	beq.n	8002eec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d208      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4917      	ldr	r1, [pc, #92]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002eec:	f000 f834 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	4912      	ldr	r1, [pc, #72]	; (8002f48 <HAL_RCC_ClockConfig+0x35c>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_RCC_ClockConfig+0x35c>)
 8002f14:	5cd3      	ldrb	r3, [r2, r3]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x360>)
 8002f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x364>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_RCC_ClockConfig+0x368>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fa62 	bl	80013f8 <HAL_InitTick>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	58024400 	.word	0x58024400
 8002f48:	08004670 	.word	0x08004670
 8002f4c:	24000004 	.word	0x24000004
 8002f50:	24000000 	.word	0x24000000
 8002f54:	2400000c 	.word	0x2400000c

08002f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5e:	4bb3      	ldr	r3, [pc, #716]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f66:	2b18      	cmp	r3, #24
 8002f68:	f200 8155 	bhi.w	8003216 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f6c:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	08003217 	.word	0x08003217
 8002f7c:	08003217 	.word	0x08003217
 8002f80:	08003217 	.word	0x08003217
 8002f84:	08003217 	.word	0x08003217
 8002f88:	08003217 	.word	0x08003217
 8002f8c:	08003217 	.word	0x08003217
 8002f90:	08003217 	.word	0x08003217
 8002f94:	08002fff 	.word	0x08002fff
 8002f98:	08003217 	.word	0x08003217
 8002f9c:	08003217 	.word	0x08003217
 8002fa0:	08003217 	.word	0x08003217
 8002fa4:	08003217 	.word	0x08003217
 8002fa8:	08003217 	.word	0x08003217
 8002fac:	08003217 	.word	0x08003217
 8002fb0:	08003217 	.word	0x08003217
 8002fb4:	08003005 	.word	0x08003005
 8002fb8:	08003217 	.word	0x08003217
 8002fbc:	08003217 	.word	0x08003217
 8002fc0:	08003217 	.word	0x08003217
 8002fc4:	08003217 	.word	0x08003217
 8002fc8:	08003217 	.word	0x08003217
 8002fcc:	08003217 	.word	0x08003217
 8002fd0:	08003217 	.word	0x08003217
 8002fd4:	0800300b 	.word	0x0800300b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd8:	4b94      	ldr	r3, [pc, #592]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002fe4:	4b91      	ldr	r3, [pc, #580]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	4a90      	ldr	r2, [pc, #576]	; (8003230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ff6:	e111      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ff8:	4b8d      	ldr	r3, [pc, #564]	; (8003230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ffa:	61bb      	str	r3, [r7, #24]
    break;
 8002ffc:	e10e      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002ffe:	4b8d      	ldr	r3, [pc, #564]	; (8003234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003000:	61bb      	str	r3, [r7, #24]
    break;
 8003002:	e10b      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003004:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003006:	61bb      	str	r3, [r7, #24]
    break;
 8003008:	e108      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800300a:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003014:	4b85      	ldr	r3, [pc, #532]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800301e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003020:	4b82      	ldr	r3, [pc, #520]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800302a:	4b80      	ldr	r3, [pc, #512]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	08db      	lsrs	r3, r3, #3
 8003030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003042:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80e1 	beq.w	8003210 <HAL_RCC_GetSysClockFreq+0x2b8>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b02      	cmp	r3, #2
 8003052:	f000 8083 	beq.w	800315c <HAL_RCC_GetSysClockFreq+0x204>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b02      	cmp	r3, #2
 800305a:	f200 80a1 	bhi.w	80031a0 <HAL_RCC_GetSysClockFreq+0x248>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x114>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d056      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x1c0>
 800306a:	e099      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800306c:	4b6f      	ldr	r3, [pc, #444]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02d      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003078:	4b6c      	ldr	r3, [pc, #432]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	08db      	lsrs	r3, r3, #3
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	4a6b      	ldr	r2, [pc, #428]	; (8003230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
 8003088:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a2:	4b62      	ldr	r3, [pc, #392]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800323c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80030d2:	e087      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003240 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e6:	4b51      	ldr	r3, [pc, #324]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800323c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800310a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003116:	e065      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003122:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003244 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800312a:	4b40      	ldr	r3, [pc, #256]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313a:	ed97 6a02 	vldr	s12, [r7, #8]
 800313e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800323c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800314a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800314e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800315a:	e043      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003166:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003248 <HAL_RCC_GetSysClockFreq+0x2f0>
 800316a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003182:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800323c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800319e:	e021      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003244 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800323c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	0a5b      	lsrs	r3, r3, #9
 80031ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ee:	3301      	adds	r3, #1
 80031f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003208:	ee17 3a90 	vmov	r3, s15
 800320c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800320e:	e005      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
    break;
 8003214:	e002      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003218:	61bb      	str	r3, [r7, #24]
    break;
 800321a:	bf00      	nop
  }

  return sysclockfreq;
 800321c:	69bb      	ldr	r3, [r7, #24]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	58024400 	.word	0x58024400
 8003230:	03d09000 	.word	0x03d09000
 8003234:	003d0900 	.word	0x003d0900
 8003238:	017d7840 	.word	0x017d7840
 800323c:	46000000 	.word	0x46000000
 8003240:	4c742400 	.word	0x4c742400
 8003244:	4a742400 	.word	0x4a742400
 8003248:	4bbebc20 	.word	0x4bbebc20

0800324c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003254:	2300      	movs	r3, #0
 8003256:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003258:	2300      	movs	r3, #0
 800325a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03f      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003270:	d02a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003272:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003276:	d824      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003278:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800327c:	d018      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800327e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003282:	d81e      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800328c:	d007      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800328e:	e018      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003290:	4ba3      	ldr	r3, [pc, #652]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4aa2      	ldr	r2, [pc, #648]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 ff17 	bl	80040d8 <RCCEx_PLL2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3324      	adds	r3, #36	; 0x24
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 ffc0 	bl	800423c <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032d0:	4b93      	ldr	r3, [pc, #588]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032dc:	4990      	ldr	r1, [pc, #576]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	650b      	str	r3, [r1, #80]	; 0x50
 80032e2:	e001      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d03d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d826      	bhi.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003319 	.word	0x08003319
 8003308:	08003327 	.word	0x08003327
 800330c:	08003339 	.word	0x08003339
 8003310:	08003351 	.word	0x08003351
 8003314:	08003351 	.word	0x08003351
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003318:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	4a80      	ldr	r2, [pc, #512]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800331e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003322:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003324:	e015      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3304      	adds	r3, #4
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fed3 	bl	80040d8 <RCCEx_PLL2_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003336:	e00c      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3324      	adds	r3, #36	; 0x24
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f000 ff7c 	bl	800423c <RCCEx_PLL3_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003348:	e003      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
      break;
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003358:	4b71      	ldr	r3, [pc, #452]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800335a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335c:	f023 0207 	bic.w	r2, r3, #7
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	496e      	ldr	r1, [pc, #440]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	650b      	str	r3, [r1, #80]	; 0x50
 800336a:	e001      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003378:	2b00      	cmp	r3, #0
 800337a:	d042      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003384:	d02b      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338a:	d825      	bhi.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800338c:	2bc0      	cmp	r3, #192	; 0xc0
 800338e:	d028      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003390:	2bc0      	cmp	r3, #192	; 0xc0
 8003392:	d821      	bhi.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d016      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003398:	2b80      	cmp	r3, #128	; 0x80
 800339a:	d81d      	bhi.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d007      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80033a4:	e018      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a6:	4b5e      	ldr	r3, [pc, #376]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	4a5d      	ldr	r2, [pc, #372]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80033b2:	e017      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fe8c 	bl	80040d8 <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80033c4:	e00e      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3324      	adds	r3, #36	; 0x24
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 ff35 	bl	800423c <RCCEx_PLL3_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80033d6:	e005      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	75fb      	strb	r3, [r7, #23]
      break;
 80033dc:	e002      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80033e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80033ea:	4b4d      	ldr	r3, [pc, #308]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	494a      	ldr	r1, [pc, #296]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	650b      	str	r3, [r1, #80]	; 0x50
 80033fc:	e001      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	2b00      	cmp	r3, #0
 800340c:	d049      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003414:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003418:	d030      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800341a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800341e:	d82a      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003420:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003424:	d02c      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003426:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800342a:	d824      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800342c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003430:	d018      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003436:	d81e      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800343c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003440:	d007      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003442:	e018      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003444:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	4a35      	ldr	r2, [pc, #212]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800344a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003450:	e017      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fe3d 	bl	80040d8 <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003462:	e00e      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3324      	adds	r3, #36	; 0x24
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fee6 	bl	800423c <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003474:	e005      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
      break;
 800347a:	e002      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800347c:	bf00      	nop
 800347e:	e000      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003496:	4922      	ldr	r1, [pc, #136]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	658b      	str	r3, [r1, #88]	; 0x58
 800349c:	e001      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04b      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b8:	d030      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80034ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034be:	d82a      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80034c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034c4:	d02e      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80034c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034ca:	d824      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80034cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d0:	d018      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80034d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d6:	d81e      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e0:	d007      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80034e2:	e018      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f0:	e019      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fded 	bl	80040d8 <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003502:	e010      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3324      	adds	r3, #36	; 0x24
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fe96 	bl	800423c <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003514:	e007      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
      break;
 800351a:	e004      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800351c:	bf00      	nop
 800351e:	e002      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003520:	58024400 	.word	0x58024400
      break;
 8003524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800352c:	4b99      	ldr	r3, [pc, #612]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800353a:	4996      	ldr	r1, [pc, #600]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800353c:	4313      	orrs	r3, r2
 800353e:	658b      	str	r3, [r1, #88]	; 0x58
 8003540:	e001      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d032      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003556:	2b30      	cmp	r3, #48	; 0x30
 8003558:	d01c      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800355a:	2b30      	cmp	r3, #48	; 0x30
 800355c:	d817      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800355e:	2b20      	cmp	r3, #32
 8003560:	d00c      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003562:	2b20      	cmp	r3, #32
 8003564:	d813      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800356a:	2b10      	cmp	r3, #16
 800356c:	d10f      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	4a88      	ldr	r2, [pc, #544]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800357a:	e00e      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2102      	movs	r1, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fda8 	bl	80040d8 <RCCEx_PLL2_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800358c:	e005      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
      break;
 8003592:	e002      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80035a0:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	4979      	ldr	r1, [pc, #484]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035b2:	e001      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d047      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035cc:	d030      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d2:	d82a      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80035d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035d8:	d02c      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80035da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035de:	d824      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e4:	d018      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ea:	d81e      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f4:	d007      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80035f6:	e018      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f8:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003604:	e017      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fd63 	bl	80040d8 <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003616:	e00e      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3324      	adds	r3, #36	; 0x24
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fe0c 	bl	800423c <RCCEx_PLL3_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003628:	e005      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
      break;
 800362e:	e002      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800363c:	4b55      	ldr	r3, [pc, #340]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	4952      	ldr	r1, [pc, #328]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800364a:	4313      	orrs	r3, r2
 800364c:	650b      	str	r3, [r1, #80]	; 0x50
 800364e:	e001      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d049      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003668:	d02e      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800366a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800366e:	d828      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003670:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003674:	d02a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003676:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800367a:	d822      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800367c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003680:	d026      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003686:	d81c      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800368c:	d010      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800368e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003692:	d816      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01d      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369c:	d111      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fd17 	bl	80040d8 <RCCEx_PLL2_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80036ae:	e012      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3324      	adds	r3, #36	; 0x24
 80036b4:	2101      	movs	r1, #1
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fdc0 	bl	800423c <RCCEx_PLL3_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80036c0:	e009      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
      break;
 80036c6:	e006      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80036c8:	bf00      	nop
 80036ca:	e004      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80036cc:	bf00      	nop
 80036ce:	e002      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80036d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	492a      	ldr	r1, [pc, #168]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	650b      	str	r3, [r1, #80]	; 0x50
 80036ee:	e001      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d04d      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800370a:	d02e      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800370c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003710:	d828      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d02a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d822      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800371e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003722:	d026      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003724:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003728:	d81c      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800372a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800372e:	d010      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003734:	d816      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01d      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800373a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800373e:	d111      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fcc6 	bl	80040d8 <RCCEx_PLL2_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003750:	e012      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3324      	adds	r3, #36	; 0x24
 8003756:	2101      	movs	r1, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fd6f 	bl	800423c <RCCEx_PLL3_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003762:	e009      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
      break;
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800376a:	bf00      	nop
 800376c:	e004      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800378c:	4901      	ldr	r1, [pc, #4]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800378e:	4313      	orrs	r3, r2
 8003790:	658b      	str	r3, [r1, #88]	; 0x58
 8003792:	e003      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d02f      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b0:	d00e      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80037b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b6:	d814      	bhi.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80037bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c0:	d10f      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c2:	4baf      	ldr	r3, [pc, #700]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	4aae      	ldr	r2, [pc, #696]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80037ce:	e00c      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fc7e 	bl	80040d8 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80037e0:	e003      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
      break;
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80037e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037f0:	4ba3      	ldr	r3, [pc, #652]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fc:	49a0      	ldr	r1, [pc, #640]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	650b      	str	r3, [r1, #80]	; 0x50
 8003802:	e001      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d032      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	2b03      	cmp	r3, #3
 800381a:	d81b      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	0800385b 	.word	0x0800385b
 8003828:	08003835 	.word	0x08003835
 800382c:	08003843 	.word	0x08003843
 8003830:	0800385b 	.word	0x0800385b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4b92      	ldr	r3, [pc, #584]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4a91      	ldr	r2, [pc, #580]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003840:	e00c      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	2102      	movs	r1, #2
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fc45 	bl	80040d8 <RCCEx_PLL2_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003852:	e003      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
      break;
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800385a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003862:	4b87      	ldr	r3, [pc, #540]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	f023 0203 	bic.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4984      	ldr	r1, [pc, #528]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003870:	4313      	orrs	r3, r2
 8003872:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003874:	e001      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8086 	beq.w	8003994 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7d      	ldr	r2, [pc, #500]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800388e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003894:	f7fd fdfa 	bl	800148c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800389a:	e009      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7fd fdf6 	bl	800148c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	; 0x64
 80038a8:	d902      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	75fb      	strb	r3, [r7, #23]
        break;
 80038ae:	e005      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038b0:	4b74      	ldr	r3, [pc, #464]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ef      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d166      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038c2:	4b6f      	ldr	r3, [pc, #444]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038cc:	4053      	eors	r3, r2
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d013      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e0:	4b67      	ldr	r3, [pc, #412]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a66      	ldr	r2, [pc, #408]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ec:	4b64      	ldr	r3, [pc, #400]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a63      	ldr	r2, [pc, #396]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038f8:	4a61      	ldr	r2, [pc, #388]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003908:	d115      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fd fdbf 	bl	800148c <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003910:	e00b      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fd fdbb 	bl	800148c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d902      	bls.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	75fb      	strb	r3, [r7, #23]
            break;
 8003928:	e005      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800392a:	4b55      	ldr	r3, [pc, #340]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ed      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d126      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800394a:	d10d      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800394c:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800395a:	0919      	lsrs	r1, r3, #4
 800395c:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800395e:	400b      	ands	r3, r1
 8003960:	4947      	ldr	r1, [pc, #284]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003962:	4313      	orrs	r3, r2
 8003964:	610b      	str	r3, [r1, #16]
 8003966:	e005      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003968:	4b45      	ldr	r3, [pc, #276]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	4a44      	ldr	r2, [pc, #272]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800396e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003972:	6113      	str	r3, [r2, #16]
 8003974:	4b42      	ldr	r3, [pc, #264]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800397e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003982:	493f      	ldr	r1, [pc, #252]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003984:	4313      	orrs	r3, r2
 8003986:	670b      	str	r3, [r1, #112]	; 0x70
 8003988:	e004      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	75bb      	strb	r3, [r7, #22]
 800398e:	e001      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8085 	beq.w	8003aac <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a6:	2b28      	cmp	r3, #40	; 0x28
 80039a8:	d866      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	08003a8d 	.word	0x08003a8d
 80039b4:	08003a79 	.word	0x08003a79
 80039b8:	08003a79 	.word	0x08003a79
 80039bc:	08003a79 	.word	0x08003a79
 80039c0:	08003a79 	.word	0x08003a79
 80039c4:	08003a79 	.word	0x08003a79
 80039c8:	08003a79 	.word	0x08003a79
 80039cc:	08003a79 	.word	0x08003a79
 80039d0:	08003a55 	.word	0x08003a55
 80039d4:	08003a79 	.word	0x08003a79
 80039d8:	08003a79 	.word	0x08003a79
 80039dc:	08003a79 	.word	0x08003a79
 80039e0:	08003a79 	.word	0x08003a79
 80039e4:	08003a79 	.word	0x08003a79
 80039e8:	08003a79 	.word	0x08003a79
 80039ec:	08003a79 	.word	0x08003a79
 80039f0:	08003a67 	.word	0x08003a67
 80039f4:	08003a79 	.word	0x08003a79
 80039f8:	08003a79 	.word	0x08003a79
 80039fc:	08003a79 	.word	0x08003a79
 8003a00:	08003a79 	.word	0x08003a79
 8003a04:	08003a79 	.word	0x08003a79
 8003a08:	08003a79 	.word	0x08003a79
 8003a0c:	08003a79 	.word	0x08003a79
 8003a10:	08003a8d 	.word	0x08003a8d
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003a79 	.word	0x08003a79
 8003a1c:	08003a79 	.word	0x08003a79
 8003a20:	08003a79 	.word	0x08003a79
 8003a24:	08003a79 	.word	0x08003a79
 8003a28:	08003a79 	.word	0x08003a79
 8003a2c:	08003a79 	.word	0x08003a79
 8003a30:	08003a8d 	.word	0x08003a8d
 8003a34:	08003a79 	.word	0x08003a79
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a79 	.word	0x08003a79
 8003a40:	08003a79 	.word	0x08003a79
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003a79 	.word	0x08003a79
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003a8d 	.word	0x08003a8d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb3c 	bl	80040d8 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a64:	e013      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3324      	adds	r3, #36	; 0x24
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fbe5 	bl	800423c <RCCEx_PLL3_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003a76:	e00a      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7c:	e007      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a7e:	bf00      	nop
 8003a80:	58024400 	.word	0x58024400
 8003a84:	58024800 	.word	0x58024800
 8003a88:	00ffffcf 	.word	0x00ffffcf
      break;
 8003a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a94:	4b96      	ldr	r3, [pc, #600]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa0:	4993      	ldr	r1, [pc, #588]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	654b      	str	r3, [r1, #84]	; 0x54
 8003aa6:	e001      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d038      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	d821      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003ac0:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac6:	bf00      	nop
 8003ac8:	08003b0b 	.word	0x08003b0b
 8003acc:	08003ae1 	.word	0x08003ae1
 8003ad0:	08003af3 	.word	0x08003af3
 8003ad4:	08003b0b 	.word	0x08003b0b
 8003ad8:	08003b0b 	.word	0x08003b0b
 8003adc:	08003b0b 	.word	0x08003b0b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 faf6 	bl	80040d8 <RCCEx_PLL2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003af0:	e00c      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3324      	adds	r3, #36	; 0x24
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fb9f 	bl	800423c <RCCEx_PLL3_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b02:	e003      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
      break;
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b12:	4b77      	ldr	r3, [pc, #476]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f023 0207 	bic.w	r2, r3, #7
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1e:	4974      	ldr	r1, [pc, #464]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	654b      	str	r3, [r1, #84]	; 0x54
 8003b24:	e001      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d03a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d821      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b8b 	.word	0x08003b8b
 8003b4c:	08003b61 	.word	0x08003b61
 8003b50:	08003b73 	.word	0x08003b73
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b8b 	.word	0x08003b8b
 8003b5c:	08003b8b 	.word	0x08003b8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fab6 	bl	80040d8 <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b70:	e00c      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3324      	adds	r3, #36	; 0x24
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fb5f 	bl	800423c <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003b82:	e003      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
      break;
 8003b88:	e000      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b92:	4b57      	ldr	r3, [pc, #348]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	4953      	ldr	r1, [pc, #332]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ba6:	e001      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d04b      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc2:	d02e      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc8:	d828      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d02a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d822      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003bd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bda:	d026      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003bdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003be0:	d81c      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be6:	d010      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bec:	d816      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01d      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf6:	d111      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fa6a 	bl	80040d8 <RCCEx_PLL2_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c08:	e012      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3324      	adds	r3, #36	; 0x24
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fb13 	bl	800423c <RCCEx_PLL3_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c1a:	e009      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c22:	bf00      	nop
 8003c24:	e004      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c26:	bf00      	nop
 8003c28:	e002      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c36:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c44:	492a      	ldr	r1, [pc, #168]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	654b      	str	r3, [r1, #84]	; 0x54
 8003c4a:	e001      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d04d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c66:	d02e      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003c68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c6c:	d828      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c72:	d02a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d822      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c7e:	d026      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003c80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c84:	d81c      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8a:	d010      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c90:	d816      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01d      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d111      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fa18 	bl	80040d8 <RCCEx_PLL2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003cac:	e012      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3324      	adds	r3, #36	; 0x24
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fac1 	bl	800423c <RCCEx_PLL3_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003cbe:	e009      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e004      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce8:	4901      	ldr	r1, [pc, #4]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	658b      	str	r3, [r1, #88]	; 0x58
 8003cee:	e003      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003cf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d04b      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d0e:	d02e      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003d10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d14:	d828      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1a:	d02a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d20:	d822      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d26:	d026      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003d28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d2c:	d81c      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d32:	d010      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d38:	d816      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01d      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d42:	d111      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f9c4 	bl	80040d8 <RCCEx_PLL2_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d54:	e012      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3324      	adds	r3, #36	; 0x24
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fa6d 	bl	800423c <RCCEx_PLL3_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003d66:	e009      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d6c:	e006      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e004      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d72:	bf00      	nop
 8003d74:	e002      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d82:	4b9d      	ldr	r3, [pc, #628]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d90:	4999      	ldr	r1, [pc, #612]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	658b      	str	r3, [r1, #88]	; 0x58
 8003d96:	e001      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db2:	d10a      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3324      	adds	r3, #36	; 0x24
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fa3e 	bl	800423c <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003dca:	4b8b      	ldr	r3, [pc, #556]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd8:	4987      	ldr	r1, [pc, #540]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df4:	d10a      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fa1d 	bl	800423c <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e0c:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1a:	4977      	ldr	r1, [pc, #476]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d034      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e36:	d01d      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e3c:	d817      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e46:	d009      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003e48:	e011      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f941 	bl	80040d8 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e5a:	e00c      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3324      	adds	r3, #36	; 0x24
 8003e60:	2102      	movs	r1, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f9ea 	bl	800423c <RCCEx_PLL3_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003e6c:	e003      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
      break;
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7c:	4b5e      	ldr	r3, [pc, #376]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e8a:	495b      	ldr	r1, [pc, #364]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	658b      	str	r3, [r1, #88]	; 0x58
 8003e90:	e001      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d033      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eac:	d01c      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003eae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eb2:	d816      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ebe:	d007      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003ec0:	e00f      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec2:	4b4d      	ldr	r3, [pc, #308]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ece:	e00c      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3324      	adds	r3, #36	; 0x24
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f9b0 	bl	800423c <RCCEx_PLL3_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ee0:	e003      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee6:	e000      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ef0:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efe:	493e      	ldr	r1, [pc, #248]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	654b      	str	r3, [r1, #84]	; 0x54
 8003f04:	e001      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d029      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f22:	d007      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003f24:	e00f      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f26:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4a33      	ldr	r2, [pc, #204]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f32:	e00b      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8cc 	bl	80040d8 <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f44:	e002      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f52:	4b29      	ldr	r3, [pc, #164]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	4926      	ldr	r1, [pc, #152]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f64:	e001      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3324      	adds	r3, #36	; 0x24
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f95d 	bl	800423c <RCCEx_PLL3_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d033      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa0:	d017      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa6:	d811      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fac:	d013      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb2:	d80b      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d010      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003fca:	e007      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	e004      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fee:	4902      	ldr	r1, [pc, #8]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003ff6:	bf00      	nop
 8003ff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800400c:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	492e      	ldr	r1, [pc, #184]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800401a:	4313      	orrs	r3, r2
 800401c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004038:	4926      	ldr	r1, [pc, #152]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800403a:	4313      	orrs	r3, r2
 800403c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800404c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004056:	491f      	ldr	r1, [pc, #124]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004058:	4313      	orrs	r3, r2
 800405a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800406e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004072:	6113      	str	r3, [r2, #16]
 8004074:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800407e:	4915      	ldr	r1, [pc, #84]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	da08      	bge.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	490e      	ldr	r1, [pc, #56]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800409a:	4313      	orrs	r3, r2
 800409c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	4906      	ldr	r1, [pc, #24]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80040be:	7dbb      	ldrb	r3, [r7, #22]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	58024400 	.word	0x58024400

080040d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040e6:	4b53      	ldr	r3, [pc, #332]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d101      	bne.n	80040f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e099      	b.n	800422a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80040f6:	4b4f      	ldr	r3, [pc, #316]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4e      	ldr	r2, [pc, #312]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80040fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004102:	f7fd f9c3 	bl	800148c <HAL_GetTick>
 8004106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004108:	e008      	b.n	800411c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800410a:	f7fd f9bf 	bl	800148c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e086      	b.n	800422a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800411c:	4b45      	ldr	r3, [pc, #276]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004128:	4b42      	ldr	r3, [pc, #264]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	493f      	ldr	r1, [pc, #252]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	628b      	str	r3, [r1, #40]	; 0x28
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	3b01      	subs	r3, #1
 8004142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	3b01      	subs	r3, #1
 800414c:	025b      	lsls	r3, r3, #9
 800414e:	b29b      	uxth	r3, r3
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	3b01      	subs	r3, #1
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	3b01      	subs	r3, #1
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800416c:	4931      	ldr	r1, [pc, #196]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	492d      	ldr	r1, [pc, #180]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004184:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	f023 0220 	bic.w	r2, r3, #32
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	4928      	ldr	r1, [pc, #160]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	4a26      	ldr	r2, [pc, #152]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 800419c:	f023 0310 	bic.w	r3, r3, #16
 80041a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041a2:	4b24      	ldr	r3, [pc, #144]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <RCCEx_PLL2_Config+0x160>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	69d2      	ldr	r2, [r2, #28]
 80041ae:	00d2      	lsls	r2, r2, #3
 80041b0:	4920      	ldr	r1, [pc, #128]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041b6:	4b1f      	ldr	r3, [pc, #124]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041bc:	f043 0310 	orr.w	r3, r3, #16
 80041c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041d4:	e00f      	b.n	80041f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d106      	bne.n	80041ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80041dc:	4b15      	ldr	r3, [pc, #84]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041e8:	e005      	b.n	80041f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	4a11      	ldr	r2, [pc, #68]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80041f6:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 80041fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004202:	f7fd f943 	bl	800148c <HAL_GetTick>
 8004206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004208:	e008      	b.n	800421c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800420a:	f7fd f93f 	bl	800148c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e006      	b.n	800422a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <RCCEx_PLL2_Config+0x15c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	58024400 	.word	0x58024400
 8004238:	ffff0007 	.word	0xffff0007

0800423c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800424a:	4b53      	ldr	r3, [pc, #332]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b03      	cmp	r3, #3
 8004254:	d101      	bne.n	800425a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e099      	b.n	800438e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800425a:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a4e      	ldr	r2, [pc, #312]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004266:	f7fd f911 	bl	800148c <HAL_GetTick>
 800426a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800426c:	e008      	b.n	8004280 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800426e:	f7fd f90d 	bl	800148c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e086      	b.n	800438e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004280:	4b45      	ldr	r3, [pc, #276]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800428c:	4b42      	ldr	r3, [pc, #264]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	051b      	lsls	r3, r3, #20
 800429a:	493f      	ldr	r1, [pc, #252]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 800429c:	4313      	orrs	r3, r2
 800429e:	628b      	str	r3, [r1, #40]	; 0x28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	025b      	lsls	r3, r3, #9
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042d0:	4931      	ldr	r1, [pc, #196]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	492d      	ldr	r1, [pc, #180]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	4928      	ldr	r1, [pc, #160]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80042fa:	4b27      	ldr	r3, [pc, #156]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	4a26      	ldr	r2, [pc, #152]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004304:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <RCCEx_PLL3_Config+0x160>)
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	69d2      	ldr	r2, [r2, #28]
 8004312:	00d2      	lsls	r2, r2, #3
 8004314:	4920      	ldr	r1, [pc, #128]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800431a:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004336:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004338:	e00f      	b.n	800435a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d106      	bne.n	800434e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004340:	4b15      	ldr	r3, [pc, #84]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800434a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800434c:	e005      	b.n	800435a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	4a11      	ldr	r2, [pc, #68]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004358:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a0e      	ldr	r2, [pc, #56]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004366:	f7fd f891 	bl	800148c <HAL_GetTick>
 800436a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800436c:	e008      	b.n	8004380 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800436e:	f7fd f88d 	bl	800148c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e006      	b.n	800438e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <RCCEx_PLL3_Config+0x15c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
 800439c:	ffff0007 	.word	0xffff0007

080043a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d067      	beq.n	8004482 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc fa4c 	bl	8000864 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	22ca      	movs	r2, #202	; 0xca
 80043da:	625a      	str	r2, [r3, #36]	; 0x24
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2253      	movs	r2, #83	; 0x53
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f879 	bl	80044dc <RTC_EnterInitMode>
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d13b      	bne.n	800446c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6899      	ldr	r1, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <HAL_RTC_Init+0xec>)
 8004400:	400b      	ands	r3, r1
 8004402:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6899      	ldr	r1, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0419      	lsls	r1, r3, #16
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f885 	bl	8004544 <RTC_ExitInitMode>
 800443a:	4603      	mov	r3, r0
 800443c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d113      	bne.n	800446c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0203 	bic.w	r2, r2, #3
 8004452:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	22ff      	movs	r2, #255	; 0xff
 8004472:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	ff8fffbf 	.word	0xff8fffbf

08004490 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044a6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80044a8:	f7fc fff0 	bl	800148c <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044ae:	e009      	b.n	80044c4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044b0:	f7fc ffec 	bl	800148c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044be:	d901      	bls.n	80044c4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e007      	b.n	80044d4 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0ee      	beq.n	80044b0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d120      	bne.n	8004538 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004500:	f7fc ffc4 	bl	800148c <HAL_GetTick>
 8004504:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004506:	e00d      	b.n	8004524 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004508:	f7fc ffc0 	bl	800148c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004516:	d905      	bls.n	8004524 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2203      	movs	r2, #3
 8004520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <RTC_EnterInitMode+0x5c>
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d1e7      	bne.n	8004508 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <RTC_ExitInitMode+0x78>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a19      	ldr	r2, [pc, #100]	; (80045bc <RTC_ExitInitMode+0x78>)
 8004556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <RTC_ExitInitMode+0x78>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10c      	bne.n	8004582 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ff91 	bl	8004490 <HAL_RTC_WaitForSynchro>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01e      	beq.n	80045b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2203      	movs	r2, #3
 8004578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e017      	b.n	80045b2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <RTC_ExitInitMode+0x78>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <RTC_ExitInitMode+0x78>)
 8004588:	f023 0320 	bic.w	r3, r3, #32
 800458c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ff7e 	bl	8004490 <HAL_RTC_WaitForSynchro>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2203      	movs	r2, #3
 800459e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <RTC_ExitInitMode+0x78>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	4a04      	ldr	r2, [pc, #16]	; (80045bc <RTC_ExitInitMode+0x78>)
 80045ac:	f043 0320 	orr.w	r3, r3, #32
 80045b0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	58004000 	.word	0x58004000

080045c0 <__libc_init_array>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	4d0d      	ldr	r5, [pc, #52]	; (80045f8 <__libc_init_array+0x38>)
 80045c4:	4c0d      	ldr	r4, [pc, #52]	; (80045fc <__libc_init_array+0x3c>)
 80045c6:	1b64      	subs	r4, r4, r5
 80045c8:	10a4      	asrs	r4, r4, #2
 80045ca:	2600      	movs	r6, #0
 80045cc:	42a6      	cmp	r6, r4
 80045ce:	d109      	bne.n	80045e4 <__libc_init_array+0x24>
 80045d0:	4d0b      	ldr	r5, [pc, #44]	; (8004600 <__libc_init_array+0x40>)
 80045d2:	4c0c      	ldr	r4, [pc, #48]	; (8004604 <__libc_init_array+0x44>)
 80045d4:	f000 f820 	bl	8004618 <_init>
 80045d8:	1b64      	subs	r4, r4, r5
 80045da:	10a4      	asrs	r4, r4, #2
 80045dc:	2600      	movs	r6, #0
 80045de:	42a6      	cmp	r6, r4
 80045e0:	d105      	bne.n	80045ee <__libc_init_array+0x2e>
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e8:	4798      	blx	r3
 80045ea:	3601      	adds	r6, #1
 80045ec:	e7ee      	b.n	80045cc <__libc_init_array+0xc>
 80045ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f2:	4798      	blx	r3
 80045f4:	3601      	adds	r6, #1
 80045f6:	e7f2      	b.n	80045de <__libc_init_array+0x1e>
 80045f8:	08004680 	.word	0x08004680
 80045fc:	08004680 	.word	0x08004680
 8004600:	08004680 	.word	0x08004680
 8004604:	08004684 	.word	0x08004684

08004608 <memset>:
 8004608:	4402      	add	r2, r0
 800460a:	4603      	mov	r3, r0
 800460c:	4293      	cmp	r3, r2
 800460e:	d100      	bne.n	8004612 <memset+0xa>
 8004610:	4770      	bx	lr
 8004612:	f803 1b01 	strb.w	r1, [r3], #1
 8004616:	e7f9      	b.n	800460c <memset+0x4>

08004618 <_init>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr

08004624 <_fini>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr
