
Uart_check_IDLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800318c  0800318c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800318c  0800318c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800318c  0800318c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000070  08003204  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003204  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000811d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001982  00000000  00000000  000281b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00029b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002a288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b93  00000000  00000000  0002a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b6c  00000000  00000000  000424d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ac6  00000000  00000000  0004a03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdb05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  000cdb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003058 	.word	0x08003058

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003058 	.word	0x08003058

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 faf8 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f88a 	bl	8000270 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f85e 	bl	800021c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Aplication is runing! \n\r");
 8000160:	4808      	ldr	r0, [pc, #32]	; (8000184 <main+0x38>)
 8000162:	f002 f819 	bl	8002198 <iprintf>

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE); // Флаг IDLE
 8000166:	4b08      	ldr	r3, [pc, #32]	; (8000188 <main+0x3c>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	68da      	ldr	r2, [r3, #12]
 800016c:	4b06      	ldr	r3, [pc, #24]	; (8000188 <main+0x3c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	f042 0210 	orr.w	r2, r2, #16
 8000174:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart2, rx_buffer, rx_buffer_size); // Запуск према данных
 8000176:	220f      	movs	r2, #15
 8000178:	4904      	ldr	r1, [pc, #16]	; (800018c <main+0x40>)
 800017a:	4803      	ldr	r0, [pc, #12]	; (8000188 <main+0x3c>)
 800017c:	f001 fb31 	bl	80017e2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000180:	e7fe      	b.n	8000180 <main+0x34>
 8000182:	bf00      	nop
 8000184:	08003070 	.word	0x08003070
 8000188:	200000a8 	.word	0x200000a8
 800018c:	2000008c 	.word	0x2000008c

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	; 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f001 fff2 	bl	8002188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c4:	2302      	movs	r3, #2
 80001c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d4:	f107 0318 	add.w	r3, r7, #24
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 fe57 	bl	8000e8c <HAL_RCC_OscConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e4:	f000 f900 	bl	80003e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e8:	230f      	movs	r3, #15
 80001ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2102      	movs	r1, #2
 8000202:	4618      	mov	r0, r3
 8000204:	f001 f8c2 	bl	800138c <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800020e:	f000 f8eb 	bl	80003e8 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	; 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 8000222:	4a12      	ldr	r2, [pc, #72]	; (800026c <MX_USART2_UART_Init+0x50>)
 8000224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 8000228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800022c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 8000242:	220c      	movs	r2, #12
 8000244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <MX_USART2_UART_Init+0x4c>)
 8000254:	f001 fa34 	bl	80016c0 <HAL_UART_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800025e:	f000 f8c3 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	200000a8 	.word	0x200000a8
 800026c:	40004400 	.word	0x40004400

08000270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <MX_GPIO_Init+0x58>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a13      	ldr	r2, [pc, #76]	; (80002c8 <MX_GPIO_Init+0x58>)
 800027c:	f043 0320 	orr.w	r3, r3, #32
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <MX_GPIO_Init+0x58>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0320 	and.w	r3, r3, #32
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MX_GPIO_Init+0x58>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <MX_GPIO_Init+0x58>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <MX_GPIO_Init+0x58>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0304 	and.w	r3, r3, #4
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <MX_GPIO_Init+0x58>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <MX_GPIO_Init+0x58>)
 80002ac:	f043 0308 	orr.w	r3, r3, #8
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <MX_GPIO_Init+0x58>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0308 	and.w	r3, r3, #8
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]

}
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <HAL_UART_IDLE_Callback>:

/* USER CODE BEGIN 4 */
/*------------------------Callback для флага IDLE---------------------------------------*/
void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart) { // Эта функция отслеживает окончание передачи!
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { //проверка, из нужного ли uart пришли данные
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a21      	ldr	r2, [pc, #132]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d13a      	bne.n	8000352 <HAL_UART_IDLE_Callback+0x86>
		printf("IDLE = OK\n\r");
 80002dc:	4820      	ldr	r0, [pc, #128]	; (8000360 <HAL_UART_IDLE_Callback+0x94>)
 80002de:	f001 ff5b 	bl	8002198 <iprintf>
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE); // Что бы писало один раз "IDLE = OK"
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	4b1c      	ldr	r3, [pc, #112]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f022 0210 	bic.w	r2, r2, #16
 80002f0:	60da      	str	r2, [r3, #12]
		rx_buffer_len = rx_buffer_size - huart->RxXferCount;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	f1c3 030f 	rsb	r3, r3, #15
 80002fc:	b29a      	uxth	r2, r3
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <HAL_UART_IDLE_Callback+0x98>)
 8000300:	801a      	strh	r2, [r3, #0]

		/*----------Действия с входящими данными, что получили то и отправляем!-----------*/
		if (huart2.gState != HAL_UART_STATE_BUSY_TX) {
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 8000304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2b21      	cmp	r3, #33	; 0x21
 800030c:	d006      	beq.n	800031c <HAL_UART_IDLE_Callback+0x50>
			HAL_UART_Transmit_IT(&huart2, rx_buffer, rx_buffer_len);
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <HAL_UART_IDLE_Callback+0x98>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	461a      	mov	r2, r3
 8000314:	4914      	ldr	r1, [pc, #80]	; (8000368 <HAL_UART_IDLE_Callback+0x9c>)
 8000316:	4811      	ldr	r0, [pc, #68]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 8000318:	f001 fa1f 	bl	800175a <HAL_UART_Transmit_IT>
		}
		/*----------основные действия с входящими данными-----------*/
		HAL_UART_AbortReceive_IT(&huart2);      // Без этих 2-х строк,
 800031c:	480f      	ldr	r0, [pc, #60]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 800031e:	f001 fa91 	bl	8001844 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2); // работать будет только один раз!
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]

		__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	68da      	ldr	r2, [r3, #12]
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f042 0210 	orr.w	r2, r2, #16
 8000346:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart2, rx_buffer, rx_buffer_size);
 8000348:	220f      	movs	r2, #15
 800034a:	4907      	ldr	r1, [pc, #28]	; (8000368 <HAL_UART_IDLE_Callback+0x9c>)
 800034c:	4803      	ldr	r0, [pc, #12]	; (800035c <HAL_UART_IDLE_Callback+0x90>)
 800034e:	f001 fa48 	bl	80017e2 <HAL_UART_Receive_IT>
	}
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200000a8 	.word	0x200000a8
 8000360:	0800308c 	.word	0x0800308c
 8000364:	200000ec 	.word	0x200000ec
 8000368:	2000008c 	.word	0x2000008c

0800036c <HAL_UART_RxCpltCallback>:

/*------------------------UART RxCpltCallback---------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { //проверка, из нужного ли uart пришли данные
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d128      	bne.n	80003ce <HAL_UART_RxCpltCallback+0x62>
		printf("RxCpltCallback = OK\n\r");
 800037c:	4817      	ldr	r0, [pc, #92]	; (80003dc <HAL_UART_RxCpltCallback+0x70>)
 800037e:	f001 ff0b 	bl	8002198 <iprintf>
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	68da      	ldr	r2, [r3, #12]
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f022 0210 	bic.w	r2, r2, #16
 8000390:	60da      	str	r2, [r3, #12]

		printf("rx_buffer is overflow! \n\r"); // Если объем данных превышает размер буфера для входных данных будет сообщение!
 8000392:	4813      	ldr	r0, [pc, #76]	; (80003e0 <HAL_UART_RxCpltCallback+0x74>)
 8000394:	f001 ff00 	bl	8002198 <iprintf>

		HAL_UART_AbortReceive_IT(&huart2); // Нужно, что бы не суммировало сообщения! Без этих 3-х строк,
 8000398:	480f      	ldr	r0, [pc, #60]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 800039a:	f001 fa53 	bl	8001844 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2); // работать будет только один раз!
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE); // Сбрасываем флаг IDLE
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	68da      	ldr	r2, [r3, #12]
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f042 0210 	orr.w	r2, r2, #16
 80003c2:	60da      	str	r2, [r3, #12]

		HAL_UART_Receive_IT(&huart2, rx_buffer, rx_buffer_size);// Снова в режим приёма.
 80003c4:	220f      	movs	r2, #15
 80003c6:	4907      	ldr	r1, [pc, #28]	; (80003e4 <HAL_UART_RxCpltCallback+0x78>)
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <HAL_UART_RxCpltCallback+0x6c>)
 80003ca:	f001 fa0a 	bl	80017e2 <HAL_UART_Receive_IT>
	}
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000a8 	.word	0x200000a8
 80003dc:	08003098 	.word	0x08003098
 80003e0:	080030b0 	.word	0x080030b0
 80003e4:	2000008c 	.word	0x2000008c

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <HAL_UART_MspInit+0x98>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d137      	bne.n	80004e8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <HAL_UART_MspInit+0x9c>)
 800047a:	69db      	ldr	r3, [r3, #28]
 800047c:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <HAL_UART_MspInit+0x9c>)
 800047e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000482:	61d3      	str	r3, [r2, #28]
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <HAL_UART_MspInit+0x9c>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <HAL_UART_MspInit+0x9c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a17      	ldr	r2, [pc, #92]	; (80004f4 <HAL_UART_MspInit+0x9c>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <HAL_UART_MspInit+0x9c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004a8:	2304      	movs	r3, #4
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ac:	2302      	movs	r3, #2
 80004ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b0:	2303      	movs	r3, #3
 80004b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	480f      	ldr	r0, [pc, #60]	; (80004f8 <HAL_UART_MspInit+0xa0>)
 80004bc:	f000 fb62 	bl	8000b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004c0:	2308      	movs	r3, #8
 80004c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	4809      	ldr	r0, [pc, #36]	; (80004f8 <HAL_UART_MspInit+0xa0>)
 80004d4:	f000 fb56 	bl	8000b84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2100      	movs	r1, #0
 80004dc:	2026      	movs	r0, #38	; 0x26
 80004de:	f000 fa6a 	bl	80009b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004e2:	2026      	movs	r0, #38	; 0x26
 80004e4:	f000 fa83 	bl	80009ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40004400 	.word	0x40004400
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler+0x4>

08000502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <MemManage_Handler+0x4>

0800050e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <UsageFault_Handler+0x4>

0800051a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000542:	f000 f945 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <USART2_IRQHandler+0x10>)
 8000552:	f001 f9e1 	bl	8001918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000a8 	.word	0x200000a8

08000560 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <ITM_SendChar+0x44>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <ITM_SendChar+0x44>)
 8000570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000574:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <ITM_SendChar+0x48>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <ITM_SendChar+0x48>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000582:	bf00      	nop
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f8      	beq.n	8000584 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000592:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	e000edfc 	.word	0xe000edfc
 80005a8:	e0000e00 	.word	0xe0000e00

080005ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00a      	b.n	80005d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005be:	f3af 8000 	nop.w
 80005c2:	4601      	mov	r1, r0
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	b2ca      	uxtb	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	3301      	adds	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf0      	blt.n	80005be <_read+0x12>
	}

return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	60f8      	str	r0, [r7, #12]
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e009      	b.n	800060c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++); // И пропишем наш код для printf
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffad 	bl	8000560 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf1      	blt.n	80005f8 <_write+0x12>
		//LCD_SEND // Если подключен LCD
		//UART_SET // Если подключен UART
	}
	return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_close>:

int _close(int file)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	return -1;
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000644:	605a      	str	r2, [r3, #4]
	return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <_isatty>:

int _isatty(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	return 1;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000666:	b480      	push	{r7}
 8000668:	b085      	sub	sp, #20
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
	...

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f001 fd40 	bl	8002134 <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20005000 	.word	0x20005000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	2000009c 	.word	0x2000009c
 80006e8:	20000108 	.word	0x20000108

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071e:	f7ff ffe5 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f001 fd0d 	bl	8002140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fd11 	bl	800014c <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000734:	08003194 	.word	0x08003194
  ldr r2, =_sbss
 8000738:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800073c:	20000104 	.word	0x20000104

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_Init+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_Init+0x28>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f923 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	200f      	movs	r0, #15
 800075c:	f000 f808 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff fe48 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x54>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f93b 	bl	8000a0a <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d80a      	bhi.n	80007ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007ac:	f000 f903 	bl	80009b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_InitTick+0x5c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000008 	.word	0x20000008
 80007f0:	200000f0 	.word	0x200000f0

080007f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	200000f0 	.word	0x200000f0

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db0b      	blt.n	8000896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 021f 	and.w	r2, r3, #31
 8000884:	4906      	ldr	r1, [pc, #24]	; (80008a0 <__NVIC_EnableIRQ+0x34>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	2001      	movs	r0, #1
 800088e:	fa00 f202 	lsl.w	r2, r0, r2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db0a      	blt.n	80008ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <__NVIC_SetPriority+0x4c>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008cc:	e00a      	b.n	80008e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4908      	ldr	r1, [pc, #32]	; (80008f4 <__NVIC_SetPriority+0x50>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	3b04      	subs	r3, #4
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	761a      	strb	r2, [r3, #24]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f1c3 0307 	rsb	r3, r3, #7
 8000912:	2b04      	cmp	r3, #4
 8000914:	bf28      	it	cs
 8000916:	2304      	movcs	r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3304      	adds	r3, #4
 800091e:	2b06      	cmp	r3, #6
 8000920:	d902      	bls.n	8000928 <NVIC_EncodePriority+0x30>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3b03      	subs	r3, #3
 8000926:	e000      	b.n	800092a <NVIC_EncodePriority+0x32>
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43da      	mvns	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	401a      	ands	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43d9      	mvns	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	4313      	orrs	r3, r2
         );
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	; 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000980:	f7ff ff90 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff2d 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff42 	bl	8000850 <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff90 	bl	80008f8 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5f 	bl	80008a4 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff35 	bl	800086c <__NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffa2 	bl	800095c <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b085      	sub	sp, #20
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d008      	beq.n	8000a4a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e020      	b.n	8000a8c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 020e 	bic.w	r2, r2, #14
 8000a58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 0201 	bic.w	r2, r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f202 	lsl.w	r2, r1, r2
 8000a78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d005      	beq.n	8000aba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e051      	b.n	8000b5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 020e 	bic.w	r2, r2, #14
 8000ac8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0201 	bic.w	r2, r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <HAL_DMA_Abort_IT+0xd0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d029      	beq.n	8000b38 <HAL_DMA_Abort_IT+0xa0>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <HAL_DMA_Abort_IT+0xd4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d022      	beq.n	8000b34 <HAL_DMA_Abort_IT+0x9c>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <HAL_DMA_Abort_IT+0xd8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d01a      	beq.n	8000b2e <HAL_DMA_Abort_IT+0x96>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <HAL_DMA_Abort_IT+0xdc>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d012      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x90>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <HAL_DMA_Abort_IT+0xe0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d00a      	beq.n	8000b22 <HAL_DMA_Abort_IT+0x8a>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <HAL_DMA_Abort_IT+0xe4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d102      	bne.n	8000b1c <HAL_DMA_Abort_IT+0x84>
 8000b16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b1a:	e00e      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b20:	e00b      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b26:	e008      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	e005      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b32:	e002      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b34:	2310      	movs	r3, #16
 8000b36:	e000      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <HAL_DMA_Abort_IT+0xe8>)
 8000b3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	4798      	blx	r3
    } 
  }
  return status;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40020008 	.word	0x40020008
 8000b6c:	4002001c 	.word	0x4002001c
 8000b70:	40020030 	.word	0x40020030
 8000b74:	40020044 	.word	0x40020044
 8000b78:	40020058 	.word	0x40020058
 8000b7c:	4002006c 	.word	0x4002006c
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b08b      	sub	sp, #44	; 0x2c
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e169      	b.n	8000e6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	f040 8158 	bne.w	8000e66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	4a9a      	ldr	r2, [pc, #616]	; (8000e24 <HAL_GPIO_Init+0x2a0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d05e      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bc0:	4a98      	ldr	r2, [pc, #608]	; (8000e24 <HAL_GPIO_Init+0x2a0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d875      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bc6:	4a98      	ldr	r2, [pc, #608]	; (8000e28 <HAL_GPIO_Init+0x2a4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d058      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bcc:	4a96      	ldr	r2, [pc, #600]	; (8000e28 <HAL_GPIO_Init+0x2a4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d86f      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bd2:	4a96      	ldr	r2, [pc, #600]	; (8000e2c <HAL_GPIO_Init+0x2a8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d052      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bd8:	4a94      	ldr	r2, [pc, #592]	; (8000e2c <HAL_GPIO_Init+0x2a8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d869      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bde:	4a94      	ldr	r2, [pc, #592]	; (8000e30 <HAL_GPIO_Init+0x2ac>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d04c      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000be4:	4a92      	ldr	r2, [pc, #584]	; (8000e30 <HAL_GPIO_Init+0x2ac>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d863      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bea:	4a92      	ldr	r2, [pc, #584]	; (8000e34 <HAL_GPIO_Init+0x2b0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d046      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bf0:	4a90      	ldr	r2, [pc, #576]	; (8000e34 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d85d      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bf6:	2b12      	cmp	r3, #18
 8000bf8:	d82a      	bhi.n	8000c50 <HAL_GPIO_Init+0xcc>
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d859      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <HAL_GPIO_Init+0x80>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c7f 	.word	0x08000c7f
 8000c08:	08000c59 	.word	0x08000c59
 8000c0c:	08000c6b 	.word	0x08000c6b
 8000c10:	08000cad 	.word	0x08000cad
 8000c14:	08000cb3 	.word	0x08000cb3
 8000c18:	08000cb3 	.word	0x08000cb3
 8000c1c:	08000cb3 	.word	0x08000cb3
 8000c20:	08000cb3 	.word	0x08000cb3
 8000c24:	08000cb3 	.word	0x08000cb3
 8000c28:	08000cb3 	.word	0x08000cb3
 8000c2c:	08000cb3 	.word	0x08000cb3
 8000c30:	08000cb3 	.word	0x08000cb3
 8000c34:	08000cb3 	.word	0x08000cb3
 8000c38:	08000cb3 	.word	0x08000cb3
 8000c3c:	08000cb3 	.word	0x08000cb3
 8000c40:	08000cb3 	.word	0x08000cb3
 8000c44:	08000cb3 	.word	0x08000cb3
 8000c48:	08000c61 	.word	0x08000c61
 8000c4c:	08000c75 	.word	0x08000c75
 8000c50:	4a79      	ldr	r2, [pc, #484]	; (8000e38 <HAL_GPIO_Init+0x2b4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c56:	e02c      	b.n	8000cb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e029      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	3304      	adds	r3, #4
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e024      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	3308      	adds	r3, #8
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e01f      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	330c      	adds	r3, #12
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e01a      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c86:	2304      	movs	r3, #4
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e013      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d105      	bne.n	8000ca0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c94:	2308      	movs	r3, #8
 8000c96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	611a      	str	r2, [r3, #16]
          break;
 8000c9e:	e009      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	615a      	str	r2, [r3, #20]
          break;
 8000caa:	e003      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e000      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          break;
 8000cb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d801      	bhi.n	8000cbe <HAL_GPIO_Init+0x13a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	e001      	b.n	8000cc2 <HAL_GPIO_Init+0x13e>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2bff      	cmp	r3, #255	; 0xff
 8000cc8:	d802      	bhi.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	e002      	b.n	8000cd6 <HAL_GPIO_Init+0x152>
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3b08      	subs	r3, #8
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	210f      	movs	r1, #15
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	6a39      	ldr	r1, [r7, #32]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 80b1 	beq.w	8000e66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d04:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d1c:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <HAL_GPIO_Init+0x2bc>)
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a40      	ldr	r2, [pc, #256]	; (8000e44 <HAL_GPIO_Init+0x2c0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d013      	beq.n	8000d70 <HAL_GPIO_Init+0x1ec>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a3f      	ldr	r2, [pc, #252]	; (8000e48 <HAL_GPIO_Init+0x2c4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00d      	beq.n	8000d6c <HAL_GPIO_Init+0x1e8>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a3e      	ldr	r2, [pc, #248]	; (8000e4c <HAL_GPIO_Init+0x2c8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_Init+0x1e4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_GPIO_Init+0x1e0>
 8000d60:	2303      	movs	r3, #3
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d64:	2304      	movs	r3, #4
 8000d66:	e004      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d70:	2300      	movs	r3, #0
 8000d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4093      	lsls	r3, r2
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d82:	492f      	ldr	r1, [pc, #188]	; (8000e40 <HAL_GPIO_Init+0x2bc>)
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	492c      	ldr	r1, [pc, #176]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4928      	ldr	r1, [pc, #160]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4922      	ldr	r1, [pc, #136]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	604b      	str	r3, [r1, #4]
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	491e      	ldr	r1, [pc, #120]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	4918      	ldr	r1, [pc, #96]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	608b      	str	r3, [r1, #8]
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4914      	ldr	r1, [pc, #80]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d021      	beq.n	8000e58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	490e      	ldr	r1, [pc, #56]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	60cb      	str	r3, [r1, #12]
 8000e20:	e021      	b.n	8000e66 <HAL_GPIO_Init+0x2e2>
 8000e22:	bf00      	nop
 8000e24:	10320000 	.word	0x10320000
 8000e28:	10310000 	.word	0x10310000
 8000e2c:	10220000 	.word	0x10220000
 8000e30:	10210000 	.word	0x10210000
 8000e34:	10120000 	.word	0x10120000
 8000e38:	10110000 	.word	0x10110000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	40011000 	.word	0x40011000
 8000e50:	40011400 	.word	0x40011400
 8000e54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_GPIO_Init+0x304>)
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4909      	ldr	r1, [pc, #36]	; (8000e88 <HAL_GPIO_Init+0x304>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	3301      	adds	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	fa22 f303 	lsr.w	r3, r2, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f47f ae8e 	bne.w	8000b98 <HAL_GPIO_Init+0x14>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	372c      	adds	r7, #44	; 0x2c
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e26c      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 8087 	beq.w	8000fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eac:	4b92      	ldr	r3, [pc, #584]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d00c      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb8:	4b8f      	ldr	r3, [pc, #572]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d112      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
 8000ec4:	4b8c      	ldr	r3, [pc, #560]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d10b      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed2:	4b89      	ldr	r3, [pc, #548]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d06c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d168      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e246      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef2:	d106      	bne.n	8000f02 <HAL_RCC_OscConfig+0x76>
 8000ef4:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a7f      	ldr	r2, [pc, #508]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e02e      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x98>
 8000f0a:	4b7b      	ldr	r3, [pc, #492]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a77      	ldr	r2, [pc, #476]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e01d      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0xbc>
 8000f2e:	4b72      	ldr	r3, [pc, #456]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a71      	ldr	r2, [pc, #452]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6e      	ldr	r2, [pc, #440]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f48:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a67      	ldr	r2, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc44 	bl	80007f4 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fc40 	bl	80007f4 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e1fa      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0xe4>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fc30 	bl	80007f4 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fc2c 	bl	80007f4 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1e6      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x10c>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d063      	beq.n	800108e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
 8000fde:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d001      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e1ba      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4939      	ldr	r1, [pc, #228]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e03a      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fbe5 	bl	80007f4 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fbe1 	bl	80007f4 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e19b      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4927      	ldr	r1, [pc, #156]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fbc4 	bl	80007f4 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fbc0 	bl	80007f4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e17a      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d03a      	beq.n	8001110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d019      	beq.n	80010d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fba4 	bl	80007f4 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fba0 	bl	80007f4 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e15a      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 fad8 	bl	8001684 <RCC_Delay>
 80010d4:	e01c      	b.n	8001110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fb8a 	bl	80007f4 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e2:	e00f      	b.n	8001104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fb86 	bl	80007f4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d908      	bls.n	8001104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e140      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	42420000 	.word	0x42420000
 8001100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	4b9e      	ldr	r3, [pc, #632]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e9      	bne.n	80010e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a6 	beq.w	800126a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b97      	ldr	r3, [pc, #604]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10d      	bne.n	800114a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b94      	ldr	r3, [pc, #592]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a93      	ldr	r2, [pc, #588]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b91      	ldr	r3, [pc, #580]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b8e      	ldr	r3, [pc, #568]	; (8001384 <HAL_RCC_OscConfig+0x4f8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b8b      	ldr	r3, [pc, #556]	; (8001384 <HAL_RCC_OscConfig+0x4f8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a8a      	ldr	r2, [pc, #552]	; (8001384 <HAL_RCC_OscConfig+0x4f8>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb47 	bl	80007f4 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fb43 	bl	80007f4 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e0fd      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b81      	ldr	r3, [pc, #516]	; (8001384 <HAL_RCC_OscConfig+0x4f8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x312>
 8001190:	4b7b      	ldr	r3, [pc, #492]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a7a      	ldr	r2, [pc, #488]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	e02d      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x334>
 80011a6:	4b76      	ldr	r3, [pc, #472]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a75      	ldr	r2, [pc, #468]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	4b73      	ldr	r3, [pc, #460]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a72      	ldr	r2, [pc, #456]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	e01c      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x356>
 80011c8:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a6c      	ldr	r2, [pc, #432]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a69      	ldr	r2, [pc, #420]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	e00b      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a66      	ldr	r2, [pc, #408]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b64      	ldr	r3, [pc, #400]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a63      	ldr	r2, [pc, #396]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d015      	beq.n	800122e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff faf7 	bl	80007f4 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff faf3 	bl	80007f4 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f241 3288 	movw	r2, #5000	; 0x1388
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0ab      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	4b57      	ldr	r3, [pc, #348]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ee      	beq.n	800120a <HAL_RCC_OscConfig+0x37e>
 800122c:	e014      	b.n	8001258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fae1 	bl	80007f4 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff fadd 	bl	80007f4 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f241 3288 	movw	r2, #5000	; 0x1388
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e095      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ee      	bne.n	8001236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d105      	bne.n	800126a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a47      	ldr	r2, [pc, #284]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8081 	beq.w	8001376 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d061      	beq.n	8001344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d146      	bne.n	8001316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <HAL_RCC_OscConfig+0x4fc>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fab1 	bl	80007f4 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff faad 	bl	80007f4 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e067      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	4b35      	ldr	r3, [pc, #212]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f0      	bne.n	8001296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	492d      	ldr	r1, [pc, #180]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a19      	ldr	r1, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	430b      	orrs	r3, r1
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <HAL_RCC_OscConfig+0x4fc>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fa81 	bl	80007f4 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fa7d 	bl	80007f4 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e037      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46a>
 8001314:	e02f      	b.n	8001376 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_RCC_OscConfig+0x4fc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fa6a 	bl	80007f4 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fa66 	bl	80007f4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e020      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x498>
 8001342:	e018      	b.n	8001376 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e013      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	429a      	cmp	r2, r3
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	429a      	cmp	r2, r3
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	40007000 	.word	0x40007000
 8001388:	42420060 	.word	0x42420060

0800138c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0d0      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d910      	bls.n	80013d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0207 	bic.w	r2, r3, #7
 80013b6:	4965      	ldr	r1, [pc, #404]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b63      	ldr	r3, [pc, #396]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0b8      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e8:	4b59      	ldr	r3, [pc, #356]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a58      	ldr	r2, [pc, #352]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800140a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	494d      	ldr	r1, [pc, #308]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d040      	beq.n	80014ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d115      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e07f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e073      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e06b      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f023 0203 	bic.w	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4936      	ldr	r1, [pc, #216]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800147c:	f7ff f9ba 	bl	80007f4 <HAL_GetTick>
 8001480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	e00a      	b.n	800149a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001484:	f7ff f9b6 	bl	80007f4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e053      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 020c 	and.w	r2, r3, #12
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d1eb      	bne.n	8001484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d210      	bcs.n	80014dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0207 	bic.w	r2, r3, #7
 80014c2:	4922      	ldr	r1, [pc, #136]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e032      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4916      	ldr	r1, [pc, #88]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	490e      	ldr	r1, [pc, #56]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151a:	f000 f821 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	490a      	ldr	r1, [pc, #40]	; (8001554 <HAL_RCC_ClockConfig+0x1c8>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1cc>)
 8001534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1d0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f918 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000
 8001550:	40021000 	.word	0x40021000
 8001554:	080030dc 	.word	0x080030dc
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b490      	push	{r4, r7}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001568:	1d3c      	adds	r4, r7, #4
 800156a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001570:	f240 2301 	movw	r3, #513	; 0x201
 8001574:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	d002      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x40>
 800159a:	2b08      	cmp	r3, #8
 800159c:	d003      	beq.n	80015a6 <HAL_RCC_GetSysClockFreq+0x46>
 800159e:	e02d      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a2:	623b      	str	r3, [r7, #32]
      break;
 80015a4:	e02d      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015b2:	4413      	add	r3, r2
 80015b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	0c5b      	lsrs	r3, r3, #17
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015d2:	4413      	add	r3, r2
 80015d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015de:	fb02 f203 	mul.w	r2, r2, r3
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	e004      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_RCC_GetSysClockFreq+0xbc>)
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	623b      	str	r3, [r7, #32]
      break;
 80015fa:	e002      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fe:	623b      	str	r3, [r7, #32]
      break;
 8001600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001602:	6a3b      	ldr	r3, [r7, #32]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bc90      	pop	{r4, r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	080030cc 	.word	0x080030cc
 8001614:	40021000 	.word	0x40021000
 8001618:	007a1200 	.word	0x007a1200
 800161c:	003d0900 	.word	0x003d0900

08001620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_RCC_GetHCLKFreq+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000000 	.word	0x20000000

08001634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001638:	f7ff fff2 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	080030ec 	.word	0x080030ec

0800165c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001660:	f7ff ffde 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	0adb      	lsrs	r3, r3, #11
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	4903      	ldr	r1, [pc, #12]	; (8001680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001678:	4618      	mov	r0, r3
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	080030ec 	.word	0x080030ec

08001684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <RCC_Delay+0x34>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <RCC_Delay+0x38>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0a5b      	lsrs	r3, r3, #9
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016a0:	bf00      	nop
  }
  while (Delay --);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	60fa      	str	r2, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f9      	bne.n	80016a0 <RCC_Delay+0x1c>
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000000 	.word	0x20000000
 80016bc:	10624dd3 	.word	0x10624dd3

080016c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e03f      	b.n	8001752 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe feb6 	bl	8000458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2224      	movs	r2, #36	; 0x24
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fc87 	bl	8002018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2220      	movs	r2, #32
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	4613      	mov	r3, r2
 8001766:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b20      	cmp	r3, #32
 8001772:	d130      	bne.n	80017d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_UART_Transmit_IT+0x26>
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e029      	b.n	80017d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_UART_Transmit_IT+0x38>
 800178e:	2302      	movs	r3, #2
 8001790:	e022      	b.n	80017d8 <HAL_UART_Transmit_IT+0x7e>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	88fa      	ldrh	r2, [r7, #6]
 80017aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2221      	movs	r2, #33	; 0x21
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80017d6:	2302      	movs	r3, #2
  }
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	4613      	mov	r3, r2
 80017ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d11d      	bne.n	8001838 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <HAL_UART_Receive_IT+0x26>
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e016      	b.n	800183a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_UART_Receive_IT+0x38>
 8001816:	2302      	movs	r3, #2
 8001818:	e00f      	b.n	800183a <HAL_UART_Receive_IT+0x58>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	461a      	mov	r2, r3
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 fa50 	bl	8001cd4 <UART_Start_Receive_IT>
 8001834:	4603      	mov	r3, r0
 8001836:	e000      	b.n	800183a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800185a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	2b01      	cmp	r3, #1
 8001872:	d107      	bne.n	8001884 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0210 	bic.w	r2, r2, #16
 8001882:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d02d      	beq.n	80018ee <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d013      	beq.n	80018d2 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_UART_AbortReceive_IT+0xd0>)
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f8ee 	bl	8000a98 <HAL_DMA_Abort_IT>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d022      	beq.n	8001908 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018cc:	4610      	mov	r0, r2
 80018ce:	4798      	blx	r3
 80018d0:	e01a      	b.n	8001908 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f9e0 	bl	8001cac <HAL_UART_AbortReceiveCpltCallback>
 80018ec:	e00c      	b.n	8001908 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f9d2 	bl	8001cac <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	08001dc7 	.word	0x08001dc7

08001918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10d      	bne.n	800196a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f003 0320 	and.w	r3, r3, #32
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_UART_IRQHandler+0x52>
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 faae 	bl	8001ec4 <UART_Receive_IT>
      return;
 8001968:	e189      	b.n	8001c7e <HAL_UART_IRQHandler+0x366>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80b1 	beq.w	8001ad4 <HAL_UART_IRQHandler+0x1bc>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_UART_IRQHandler+0x70>
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a6 	beq.w	8001ad4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <HAL_UART_IRQHandler+0x90>
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <HAL_UART_IRQHandler+0xb0>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00a      	beq.n	80019e8 <HAL_UART_IRQHandler+0xd0>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f043 0204 	orr.w	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00f      	beq.n	8001a12 <HAL_UART_IRQHandler+0xfa>
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d104      	bne.n	8001a06 <HAL_UART_IRQHandler+0xee>
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f043 0208 	orr.w	r2, r3, #8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 812c 	beq.w	8001c74 <HAL_UART_IRQHandler+0x35c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_UART_IRQHandler+0x11e>
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fa47 	bl	8001ec4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf14      	ite	ne
 8001a44:	2301      	movne	r3, #1
 8001a46:	2300      	moveq	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <HAL_UART_IRQHandler+0x146>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d031      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f971 	bl	8001d46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d023      	beq.n	8001aba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d013      	beq.n	8001ab2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	4a7d      	ldr	r2, [pc, #500]	; (8001c84 <HAL_UART_IRQHandler+0x36c>)
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fffe 	bl	8000a98 <HAL_DMA_Abort_IT>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d016      	beq.n	8001ad0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aac:	4610      	mov	r0, r2
 8001aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ab0:	e00e      	b.n	8001ad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8f1 	bl	8001c9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ab8:	e00a      	b.n	8001ad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8ed 	bl	8001c9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac0:	e006      	b.n	8001ad0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8e9 	bl	8001c9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001ace:	e0d1      	b.n	8001c74 <HAL_UART_IRQHandler+0x35c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ad0:	bf00      	nop
    return;
 8001ad2:	e0cf      	b.n	8001c74 <HAL_UART_IRQHandler+0x35c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	f040 80a1 	bne.w	8001c20 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 809b 	beq.w	8001c20 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8095 	beq.w	8001c20 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d04e      	beq.n	8001bb8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001b24:	8a3b      	ldrh	r3, [r7, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80a6 	beq.w	8001c78 <HAL_UART_IRQHandler+0x360>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b30:	8a3a      	ldrh	r2, [r7, #16]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	f080 80a0 	bcs.w	8001c78 <HAL_UART_IRQHandler+0x360>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	8a3a      	ldrh	r2, [r7, #16]
 8001b3c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d02b      	beq.n	8001ba0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b56:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b76:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0210 	bic.w	r2, r2, #16
 8001b94:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe ff41 	bl	8000a22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f884 	bl	8001cbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001bb6:	e05f      	b.n	8001c78 <HAL_UART_IRQHandler+0x360>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d055      	beq.n	8001c7c <HAL_UART_IRQHandler+0x364>
          &&(nb_rx_data > 0U) )
 8001bd0:	8a7b      	ldrh	r3, [r7, #18]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d052      	beq.n	8001c7c <HAL_UART_IRQHandler+0x364>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001be4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0210 	bic.w	r2, r2, #16
 8001c12:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c14:	8a7b      	ldrh	r3, [r7, #18]
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f850 	bl	8001cbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c1e:	e02d      	b.n	8001c7c <HAL_UART_IRQHandler+0x364>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_UART_IRQHandler+0x324>
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8de 	bl	8001df6 <UART_Transmit_IT>
    return;
 8001c3a:	e020      	b.n	8001c7e <HAL_UART_IRQHandler+0x366>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_UART_IRQHandler+0x340>
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_UART_IRQHandler+0x340>
  {
    UART_EndTransmit_IT(huart);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f91f 	bl	8001e94 <UART_EndTransmit_IT>
    return;
 8001c56:	e012      	b.n	8001c7e <HAL_UART_IRQHandler+0x366>
  }
  /* UART IDLE interrupt end --------------------------------------------*/
    if (((isrflags & USART_SR_IDLE) != RESET) && ((cr1its & USART_CR1_IDLEIE) != RESET))
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00d      	beq.n	8001c7e <HAL_UART_IRQHandler+0x366>
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_UART_IRQHandler+0x366>
    {
    	HAL_UART_IDLE_Callback(huart);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7fe fb2d 	bl	80002cc <HAL_UART_IDLE_Callback>
      return;
 8001c72:	e004      	b.n	8001c7e <HAL_UART_IRQHandler+0x366>
    return;
 8001c74:	bf00      	nop
 8001c76:	e002      	b.n	8001c7e <HAL_UART_IRQHandler+0x366>
      return;
 8001c78:	bf00      	nop
 8001c7a:	e000      	b.n	8001c7e <HAL_UART_IRQHandler+0x366>
      return;
 8001c7c:	bf00      	nop
    }
}
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	08001d9f 	.word	0x08001d9f

08001c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	88fa      	ldrh	r2, [r7, #6]
 8001cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2222      	movs	r2, #34	; 0x22
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d18:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0210 	bic.w	r2, r2, #16
 8001d84:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff ff6e 	bl	8001c9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff ff5f 	bl	8001cac <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b21      	cmp	r3, #33	; 0x21
 8001e08:	d13e      	bne.n	8001e88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e12:	d114      	bne.n	8001e3e <UART_Transmit_IT+0x48>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d110      	bne.n	8001e3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	1c9a      	adds	r2, r3, #2
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	621a      	str	r2, [r3, #32]
 8001e3c:	e008      	b.n	8001e50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6211      	str	r1, [r2, #32]
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10f      	bne.n	8001e84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
  }
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fee7 	bl	8001c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b22      	cmp	r3, #34	; 0x22
 8001ed6:	f040 8099 	bne.w	800200c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee2:	d117      	bne.n	8001f14 <UART_Receive_IT+0x50>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d113      	bne.n	8001f14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	1c9a      	adds	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
 8001f12:	e026      	b.n	8001f62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f26:	d007      	beq.n	8001f38 <UART_Receive_IT+0x74>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <UART_Receive_IT+0x82>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e008      	b.n	8001f58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d148      	bne.n	8002008 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0220 	bic.w	r2, r2, #32
 8001f84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d123      	bne.n	8001ffe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0210 	bic.w	r2, r2, #16
 8001fca:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d10a      	bne.n	8001ff0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fe61 	bl	8001cbe <HAL_UARTEx_RxEventCallback>
 8001ffc:	e002      	b.n	8002004 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe f9b4 	bl	800036c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e002      	b.n	800200e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002052:	f023 030c 	bic.w	r3, r3, #12
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	430b      	orrs	r3, r1
 800205e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2c      	ldr	r2, [pc, #176]	; (800212c <UART_SetConfig+0x114>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d103      	bne.n	8002088 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002080:	f7ff faec 	bl	800165c <HAL_RCC_GetPCLK2Freq>
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	e002      	b.n	800208e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002088:	f7ff fad4 	bl	8001634 <HAL_RCC_GetPCLK1Freq>
 800208c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	009a      	lsls	r2, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	4a22      	ldr	r2, [pc, #136]	; (8002130 <UART_SetConfig+0x118>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	0119      	lsls	r1, r3, #4
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009a      	lsls	r2, r3, #2
 80020b8:	441a      	add	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <UART_SetConfig+0x118>)
 80020c6:	fba3 0302 	umull	r0, r3, r3, r2
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2064      	movs	r0, #100	; 0x64
 80020ce:	fb00 f303 	mul.w	r3, r0, r3
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	3332      	adds	r3, #50	; 0x32
 80020d8:	4a15      	ldr	r2, [pc, #84]	; (8002130 <UART_SetConfig+0x118>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	4419      	add	r1, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	009a      	lsls	r2, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <UART_SetConfig+0x118>)
 80020fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2064      	movs	r0, #100	; 0x64
 8002106:	fb00 f303 	mul.w	r3, r0, r3
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	3332      	adds	r3, #50	; 0x32
 8002110:	4a07      	ldr	r2, [pc, #28]	; (8002130 <UART_SetConfig+0x118>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	f003 020f 	and.w	r2, r3, #15
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	440a      	add	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40013800 	.word	0x40013800
 8002130:	51eb851f 	.word	0x51eb851f

08002134 <__errno>:
 8002134:	4b01      	ldr	r3, [pc, #4]	; (800213c <__errno+0x8>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	2000000c 	.word	0x2000000c

08002140 <__libc_init_array>:
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	2600      	movs	r6, #0
 8002144:	4d0c      	ldr	r5, [pc, #48]	; (8002178 <__libc_init_array+0x38>)
 8002146:	4c0d      	ldr	r4, [pc, #52]	; (800217c <__libc_init_array+0x3c>)
 8002148:	1b64      	subs	r4, r4, r5
 800214a:	10a4      	asrs	r4, r4, #2
 800214c:	42a6      	cmp	r6, r4
 800214e:	d109      	bne.n	8002164 <__libc_init_array+0x24>
 8002150:	f000 ff82 	bl	8003058 <_init>
 8002154:	2600      	movs	r6, #0
 8002156:	4d0a      	ldr	r5, [pc, #40]	; (8002180 <__libc_init_array+0x40>)
 8002158:	4c0a      	ldr	r4, [pc, #40]	; (8002184 <__libc_init_array+0x44>)
 800215a:	1b64      	subs	r4, r4, r5
 800215c:	10a4      	asrs	r4, r4, #2
 800215e:	42a6      	cmp	r6, r4
 8002160:	d105      	bne.n	800216e <__libc_init_array+0x2e>
 8002162:	bd70      	pop	{r4, r5, r6, pc}
 8002164:	f855 3b04 	ldr.w	r3, [r5], #4
 8002168:	4798      	blx	r3
 800216a:	3601      	adds	r6, #1
 800216c:	e7ee      	b.n	800214c <__libc_init_array+0xc>
 800216e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002172:	4798      	blx	r3
 8002174:	3601      	adds	r6, #1
 8002176:	e7f2      	b.n	800215e <__libc_init_array+0x1e>
 8002178:	0800318c 	.word	0x0800318c
 800217c:	0800318c 	.word	0x0800318c
 8002180:	0800318c 	.word	0x0800318c
 8002184:	08003190 	.word	0x08003190

08002188 <memset>:
 8002188:	4603      	mov	r3, r0
 800218a:	4402      	add	r2, r0
 800218c:	4293      	cmp	r3, r2
 800218e:	d100      	bne.n	8002192 <memset+0xa>
 8002190:	4770      	bx	lr
 8002192:	f803 1b01 	strb.w	r1, [r3], #1
 8002196:	e7f9      	b.n	800218c <memset+0x4>

08002198 <iprintf>:
 8002198:	b40f      	push	{r0, r1, r2, r3}
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <iprintf+0x2c>)
 800219c:	b513      	push	{r0, r1, r4, lr}
 800219e:	681c      	ldr	r4, [r3, #0]
 80021a0:	b124      	cbz	r4, 80021ac <iprintf+0x14>
 80021a2:	69a3      	ldr	r3, [r4, #24]
 80021a4:	b913      	cbnz	r3, 80021ac <iprintf+0x14>
 80021a6:	4620      	mov	r0, r4
 80021a8:	f000 f866 	bl	8002278 <__sinit>
 80021ac:	ab05      	add	r3, sp, #20
 80021ae:	4620      	mov	r0, r4
 80021b0:	9a04      	ldr	r2, [sp, #16]
 80021b2:	68a1      	ldr	r1, [r4, #8]
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	f000 f981 	bl	80024bc <_vfiprintf_r>
 80021ba:	b002      	add	sp, #8
 80021bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021c0:	b004      	add	sp, #16
 80021c2:	4770      	bx	lr
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <std>:
 80021c8:	2300      	movs	r3, #0
 80021ca:	b510      	push	{r4, lr}
 80021cc:	4604      	mov	r4, r0
 80021ce:	e9c0 3300 	strd	r3, r3, [r0]
 80021d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021d6:	6083      	str	r3, [r0, #8]
 80021d8:	8181      	strh	r1, [r0, #12]
 80021da:	6643      	str	r3, [r0, #100]	; 0x64
 80021dc:	81c2      	strh	r2, [r0, #14]
 80021de:	6183      	str	r3, [r0, #24]
 80021e0:	4619      	mov	r1, r3
 80021e2:	2208      	movs	r2, #8
 80021e4:	305c      	adds	r0, #92	; 0x5c
 80021e6:	f7ff ffcf 	bl	8002188 <memset>
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <std+0x38>)
 80021ec:	6224      	str	r4, [r4, #32]
 80021ee:	6263      	str	r3, [r4, #36]	; 0x24
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <std+0x3c>)
 80021f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <std+0x40>)
 80021f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <std+0x44>)
 80021fa:	6323      	str	r3, [r4, #48]	; 0x30
 80021fc:	bd10      	pop	{r4, pc}
 80021fe:	bf00      	nop
 8002200:	08002a69 	.word	0x08002a69
 8002204:	08002a8b 	.word	0x08002a8b
 8002208:	08002ac3 	.word	0x08002ac3
 800220c:	08002ae7 	.word	0x08002ae7

08002210 <_cleanup_r>:
 8002210:	4901      	ldr	r1, [pc, #4]	; (8002218 <_cleanup_r+0x8>)
 8002212:	f000 b8af 	b.w	8002374 <_fwalk_reent>
 8002216:	bf00      	nop
 8002218:	08002dc1 	.word	0x08002dc1

0800221c <__sfmoreglue>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	2568      	movs	r5, #104	; 0x68
 8002220:	1e4a      	subs	r2, r1, #1
 8002222:	4355      	muls	r5, r2
 8002224:	460e      	mov	r6, r1
 8002226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800222a:	f000 f8c5 	bl	80023b8 <_malloc_r>
 800222e:	4604      	mov	r4, r0
 8002230:	b140      	cbz	r0, 8002244 <__sfmoreglue+0x28>
 8002232:	2100      	movs	r1, #0
 8002234:	e9c0 1600 	strd	r1, r6, [r0]
 8002238:	300c      	adds	r0, #12
 800223a:	60a0      	str	r0, [r4, #8]
 800223c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002240:	f7ff ffa2 	bl	8002188 <memset>
 8002244:	4620      	mov	r0, r4
 8002246:	bd70      	pop	{r4, r5, r6, pc}

08002248 <__sfp_lock_acquire>:
 8002248:	4801      	ldr	r0, [pc, #4]	; (8002250 <__sfp_lock_acquire+0x8>)
 800224a:	f000 b8b3 	b.w	80023b4 <__retarget_lock_acquire_recursive>
 800224e:	bf00      	nop
 8002250:	200000fc 	.word	0x200000fc

08002254 <__sfp_lock_release>:
 8002254:	4801      	ldr	r0, [pc, #4]	; (800225c <__sfp_lock_release+0x8>)
 8002256:	f000 b8ae 	b.w	80023b6 <__retarget_lock_release_recursive>
 800225a:	bf00      	nop
 800225c:	200000fc 	.word	0x200000fc

08002260 <__sinit_lock_acquire>:
 8002260:	4801      	ldr	r0, [pc, #4]	; (8002268 <__sinit_lock_acquire+0x8>)
 8002262:	f000 b8a7 	b.w	80023b4 <__retarget_lock_acquire_recursive>
 8002266:	bf00      	nop
 8002268:	200000f7 	.word	0x200000f7

0800226c <__sinit_lock_release>:
 800226c:	4801      	ldr	r0, [pc, #4]	; (8002274 <__sinit_lock_release+0x8>)
 800226e:	f000 b8a2 	b.w	80023b6 <__retarget_lock_release_recursive>
 8002272:	bf00      	nop
 8002274:	200000f7 	.word	0x200000f7

08002278 <__sinit>:
 8002278:	b510      	push	{r4, lr}
 800227a:	4604      	mov	r4, r0
 800227c:	f7ff fff0 	bl	8002260 <__sinit_lock_acquire>
 8002280:	69a3      	ldr	r3, [r4, #24]
 8002282:	b11b      	cbz	r3, 800228c <__sinit+0x14>
 8002284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002288:	f7ff bff0 	b.w	800226c <__sinit_lock_release>
 800228c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002290:	6523      	str	r3, [r4, #80]	; 0x50
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <__sinit+0x68>)
 8002294:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <__sinit+0x6c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	62a2      	str	r2, [r4, #40]	; 0x28
 800229a:	42a3      	cmp	r3, r4
 800229c:	bf08      	it	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	4620      	mov	r0, r4
 80022a2:	bf08      	it	eq
 80022a4:	61a3      	streq	r3, [r4, #24]
 80022a6:	f000 f81f 	bl	80022e8 <__sfp>
 80022aa:	6060      	str	r0, [r4, #4]
 80022ac:	4620      	mov	r0, r4
 80022ae:	f000 f81b 	bl	80022e8 <__sfp>
 80022b2:	60a0      	str	r0, [r4, #8]
 80022b4:	4620      	mov	r0, r4
 80022b6:	f000 f817 	bl	80022e8 <__sfp>
 80022ba:	2200      	movs	r2, #0
 80022bc:	2104      	movs	r1, #4
 80022be:	60e0      	str	r0, [r4, #12]
 80022c0:	6860      	ldr	r0, [r4, #4]
 80022c2:	f7ff ff81 	bl	80021c8 <std>
 80022c6:	2201      	movs	r2, #1
 80022c8:	2109      	movs	r1, #9
 80022ca:	68a0      	ldr	r0, [r4, #8]
 80022cc:	f7ff ff7c 	bl	80021c8 <std>
 80022d0:	2202      	movs	r2, #2
 80022d2:	2112      	movs	r1, #18
 80022d4:	68e0      	ldr	r0, [r4, #12]
 80022d6:	f7ff ff77 	bl	80021c8 <std>
 80022da:	2301      	movs	r3, #1
 80022dc:	61a3      	str	r3, [r4, #24]
 80022de:	e7d1      	b.n	8002284 <__sinit+0xc>
 80022e0:	080030f4 	.word	0x080030f4
 80022e4:	08002211 	.word	0x08002211

080022e8 <__sfp>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	4607      	mov	r7, r0
 80022ec:	f7ff ffac 	bl	8002248 <__sfp_lock_acquire>
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <__sfp+0x84>)
 80022f2:	681e      	ldr	r6, [r3, #0]
 80022f4:	69b3      	ldr	r3, [r6, #24]
 80022f6:	b913      	cbnz	r3, 80022fe <__sfp+0x16>
 80022f8:	4630      	mov	r0, r6
 80022fa:	f7ff ffbd 	bl	8002278 <__sinit>
 80022fe:	3648      	adds	r6, #72	; 0x48
 8002300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002304:	3b01      	subs	r3, #1
 8002306:	d503      	bpl.n	8002310 <__sfp+0x28>
 8002308:	6833      	ldr	r3, [r6, #0]
 800230a:	b30b      	cbz	r3, 8002350 <__sfp+0x68>
 800230c:	6836      	ldr	r6, [r6, #0]
 800230e:	e7f7      	b.n	8002300 <__sfp+0x18>
 8002310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002314:	b9d5      	cbnz	r5, 800234c <__sfp+0x64>
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <__sfp+0x88>)
 8002318:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800231c:	60e3      	str	r3, [r4, #12]
 800231e:	6665      	str	r5, [r4, #100]	; 0x64
 8002320:	f000 f847 	bl	80023b2 <__retarget_lock_init_recursive>
 8002324:	f7ff ff96 	bl	8002254 <__sfp_lock_release>
 8002328:	2208      	movs	r2, #8
 800232a:	4629      	mov	r1, r5
 800232c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002334:	6025      	str	r5, [r4, #0]
 8002336:	61a5      	str	r5, [r4, #24]
 8002338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800233c:	f7ff ff24 	bl	8002188 <memset>
 8002340:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002344:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002348:	4620      	mov	r0, r4
 800234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800234c:	3468      	adds	r4, #104	; 0x68
 800234e:	e7d9      	b.n	8002304 <__sfp+0x1c>
 8002350:	2104      	movs	r1, #4
 8002352:	4638      	mov	r0, r7
 8002354:	f7ff ff62 	bl	800221c <__sfmoreglue>
 8002358:	4604      	mov	r4, r0
 800235a:	6030      	str	r0, [r6, #0]
 800235c:	2800      	cmp	r0, #0
 800235e:	d1d5      	bne.n	800230c <__sfp+0x24>
 8002360:	f7ff ff78 	bl	8002254 <__sfp_lock_release>
 8002364:	230c      	movs	r3, #12
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	e7ee      	b.n	8002348 <__sfp+0x60>
 800236a:	bf00      	nop
 800236c:	080030f4 	.word	0x080030f4
 8002370:	ffff0001 	.word	0xffff0001

08002374 <_fwalk_reent>:
 8002374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002378:	4606      	mov	r6, r0
 800237a:	4688      	mov	r8, r1
 800237c:	2700      	movs	r7, #0
 800237e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002382:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002386:	f1b9 0901 	subs.w	r9, r9, #1
 800238a:	d505      	bpl.n	8002398 <_fwalk_reent+0x24>
 800238c:	6824      	ldr	r4, [r4, #0]
 800238e:	2c00      	cmp	r4, #0
 8002390:	d1f7      	bne.n	8002382 <_fwalk_reent+0xe>
 8002392:	4638      	mov	r0, r7
 8002394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002398:	89ab      	ldrh	r3, [r5, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d907      	bls.n	80023ae <_fwalk_reent+0x3a>
 800239e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023a2:	3301      	adds	r3, #1
 80023a4:	d003      	beq.n	80023ae <_fwalk_reent+0x3a>
 80023a6:	4629      	mov	r1, r5
 80023a8:	4630      	mov	r0, r6
 80023aa:	47c0      	blx	r8
 80023ac:	4307      	orrs	r7, r0
 80023ae:	3568      	adds	r5, #104	; 0x68
 80023b0:	e7e9      	b.n	8002386 <_fwalk_reent+0x12>

080023b2 <__retarget_lock_init_recursive>:
 80023b2:	4770      	bx	lr

080023b4 <__retarget_lock_acquire_recursive>:
 80023b4:	4770      	bx	lr

080023b6 <__retarget_lock_release_recursive>:
 80023b6:	4770      	bx	lr

080023b8 <_malloc_r>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	1ccd      	adds	r5, r1, #3
 80023bc:	f025 0503 	bic.w	r5, r5, #3
 80023c0:	3508      	adds	r5, #8
 80023c2:	2d0c      	cmp	r5, #12
 80023c4:	bf38      	it	cc
 80023c6:	250c      	movcc	r5, #12
 80023c8:	2d00      	cmp	r5, #0
 80023ca:	4606      	mov	r6, r0
 80023cc:	db01      	blt.n	80023d2 <_malloc_r+0x1a>
 80023ce:	42a9      	cmp	r1, r5
 80023d0:	d903      	bls.n	80023da <_malloc_r+0x22>
 80023d2:	230c      	movs	r3, #12
 80023d4:	6033      	str	r3, [r6, #0]
 80023d6:	2000      	movs	r0, #0
 80023d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023da:	f000 fdb1 	bl	8002f40 <__malloc_lock>
 80023de:	4921      	ldr	r1, [pc, #132]	; (8002464 <_malloc_r+0xac>)
 80023e0:	680a      	ldr	r2, [r1, #0]
 80023e2:	4614      	mov	r4, r2
 80023e4:	b99c      	cbnz	r4, 800240e <_malloc_r+0x56>
 80023e6:	4f20      	ldr	r7, [pc, #128]	; (8002468 <_malloc_r+0xb0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b923      	cbnz	r3, 80023f6 <_malloc_r+0x3e>
 80023ec:	4621      	mov	r1, r4
 80023ee:	4630      	mov	r0, r6
 80023f0:	f000 fb2a 	bl	8002a48 <_sbrk_r>
 80023f4:	6038      	str	r0, [r7, #0]
 80023f6:	4629      	mov	r1, r5
 80023f8:	4630      	mov	r0, r6
 80023fa:	f000 fb25 	bl	8002a48 <_sbrk_r>
 80023fe:	1c43      	adds	r3, r0, #1
 8002400:	d123      	bne.n	800244a <_malloc_r+0x92>
 8002402:	230c      	movs	r3, #12
 8002404:	4630      	mov	r0, r6
 8002406:	6033      	str	r3, [r6, #0]
 8002408:	f000 fda0 	bl	8002f4c <__malloc_unlock>
 800240c:	e7e3      	b.n	80023d6 <_malloc_r+0x1e>
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	1b5b      	subs	r3, r3, r5
 8002412:	d417      	bmi.n	8002444 <_malloc_r+0x8c>
 8002414:	2b0b      	cmp	r3, #11
 8002416:	d903      	bls.n	8002420 <_malloc_r+0x68>
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	441c      	add	r4, r3
 800241c:	6025      	str	r5, [r4, #0]
 800241e:	e004      	b.n	800242a <_malloc_r+0x72>
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	42a2      	cmp	r2, r4
 8002424:	bf0c      	ite	eq
 8002426:	600b      	streq	r3, [r1, #0]
 8002428:	6053      	strne	r3, [r2, #4]
 800242a:	4630      	mov	r0, r6
 800242c:	f000 fd8e 	bl	8002f4c <__malloc_unlock>
 8002430:	f104 000b 	add.w	r0, r4, #11
 8002434:	1d23      	adds	r3, r4, #4
 8002436:	f020 0007 	bic.w	r0, r0, #7
 800243a:	1ac2      	subs	r2, r0, r3
 800243c:	d0cc      	beq.n	80023d8 <_malloc_r+0x20>
 800243e:	1a1b      	subs	r3, r3, r0
 8002440:	50a3      	str	r3, [r4, r2]
 8002442:	e7c9      	b.n	80023d8 <_malloc_r+0x20>
 8002444:	4622      	mov	r2, r4
 8002446:	6864      	ldr	r4, [r4, #4]
 8002448:	e7cc      	b.n	80023e4 <_malloc_r+0x2c>
 800244a:	1cc4      	adds	r4, r0, #3
 800244c:	f024 0403 	bic.w	r4, r4, #3
 8002450:	42a0      	cmp	r0, r4
 8002452:	d0e3      	beq.n	800241c <_malloc_r+0x64>
 8002454:	1a21      	subs	r1, r4, r0
 8002456:	4630      	mov	r0, r6
 8002458:	f000 faf6 	bl	8002a48 <_sbrk_r>
 800245c:	3001      	adds	r0, #1
 800245e:	d1dd      	bne.n	800241c <_malloc_r+0x64>
 8002460:	e7cf      	b.n	8002402 <_malloc_r+0x4a>
 8002462:	bf00      	nop
 8002464:	200000a0 	.word	0x200000a0
 8002468:	200000a4 	.word	0x200000a4

0800246c <__sfputc_r>:
 800246c:	6893      	ldr	r3, [r2, #8]
 800246e:	b410      	push	{r4}
 8002470:	3b01      	subs	r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	6093      	str	r3, [r2, #8]
 8002476:	da07      	bge.n	8002488 <__sfputc_r+0x1c>
 8002478:	6994      	ldr	r4, [r2, #24]
 800247a:	42a3      	cmp	r3, r4
 800247c:	db01      	blt.n	8002482 <__sfputc_r+0x16>
 800247e:	290a      	cmp	r1, #10
 8002480:	d102      	bne.n	8002488 <__sfputc_r+0x1c>
 8002482:	bc10      	pop	{r4}
 8002484:	f000 bb34 	b.w	8002af0 <__swbuf_r>
 8002488:	6813      	ldr	r3, [r2, #0]
 800248a:	1c58      	adds	r0, r3, #1
 800248c:	6010      	str	r0, [r2, #0]
 800248e:	7019      	strb	r1, [r3, #0]
 8002490:	4608      	mov	r0, r1
 8002492:	bc10      	pop	{r4}
 8002494:	4770      	bx	lr

08002496 <__sfputs_r>:
 8002496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002498:	4606      	mov	r6, r0
 800249a:	460f      	mov	r7, r1
 800249c:	4614      	mov	r4, r2
 800249e:	18d5      	adds	r5, r2, r3
 80024a0:	42ac      	cmp	r4, r5
 80024a2:	d101      	bne.n	80024a8 <__sfputs_r+0x12>
 80024a4:	2000      	movs	r0, #0
 80024a6:	e007      	b.n	80024b8 <__sfputs_r+0x22>
 80024a8:	463a      	mov	r2, r7
 80024aa:	4630      	mov	r0, r6
 80024ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024b0:	f7ff ffdc 	bl	800246c <__sfputc_r>
 80024b4:	1c43      	adds	r3, r0, #1
 80024b6:	d1f3      	bne.n	80024a0 <__sfputs_r+0xa>
 80024b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024bc <_vfiprintf_r>:
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c0:	460d      	mov	r5, r1
 80024c2:	4614      	mov	r4, r2
 80024c4:	4698      	mov	r8, r3
 80024c6:	4606      	mov	r6, r0
 80024c8:	b09d      	sub	sp, #116	; 0x74
 80024ca:	b118      	cbz	r0, 80024d4 <_vfiprintf_r+0x18>
 80024cc:	6983      	ldr	r3, [r0, #24]
 80024ce:	b90b      	cbnz	r3, 80024d4 <_vfiprintf_r+0x18>
 80024d0:	f7ff fed2 	bl	8002278 <__sinit>
 80024d4:	4b89      	ldr	r3, [pc, #548]	; (80026fc <_vfiprintf_r+0x240>)
 80024d6:	429d      	cmp	r5, r3
 80024d8:	d11b      	bne.n	8002512 <_vfiprintf_r+0x56>
 80024da:	6875      	ldr	r5, [r6, #4]
 80024dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024de:	07d9      	lsls	r1, r3, #31
 80024e0:	d405      	bmi.n	80024ee <_vfiprintf_r+0x32>
 80024e2:	89ab      	ldrh	r3, [r5, #12]
 80024e4:	059a      	lsls	r2, r3, #22
 80024e6:	d402      	bmi.n	80024ee <_vfiprintf_r+0x32>
 80024e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024ea:	f7ff ff63 	bl	80023b4 <__retarget_lock_acquire_recursive>
 80024ee:	89ab      	ldrh	r3, [r5, #12]
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	d501      	bpl.n	80024f8 <_vfiprintf_r+0x3c>
 80024f4:	692b      	ldr	r3, [r5, #16]
 80024f6:	b9eb      	cbnz	r3, 8002534 <_vfiprintf_r+0x78>
 80024f8:	4629      	mov	r1, r5
 80024fa:	4630      	mov	r0, r6
 80024fc:	f000 fb5c 	bl	8002bb8 <__swsetup_r>
 8002500:	b1c0      	cbz	r0, 8002534 <_vfiprintf_r+0x78>
 8002502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002504:	07dc      	lsls	r4, r3, #31
 8002506:	d50e      	bpl.n	8002526 <_vfiprintf_r+0x6a>
 8002508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800250c:	b01d      	add	sp, #116	; 0x74
 800250e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <_vfiprintf_r+0x244>)
 8002514:	429d      	cmp	r5, r3
 8002516:	d101      	bne.n	800251c <_vfiprintf_r+0x60>
 8002518:	68b5      	ldr	r5, [r6, #8]
 800251a:	e7df      	b.n	80024dc <_vfiprintf_r+0x20>
 800251c:	4b79      	ldr	r3, [pc, #484]	; (8002704 <_vfiprintf_r+0x248>)
 800251e:	429d      	cmp	r5, r3
 8002520:	bf08      	it	eq
 8002522:	68f5      	ldreq	r5, [r6, #12]
 8002524:	e7da      	b.n	80024dc <_vfiprintf_r+0x20>
 8002526:	89ab      	ldrh	r3, [r5, #12]
 8002528:	0598      	lsls	r0, r3, #22
 800252a:	d4ed      	bmi.n	8002508 <_vfiprintf_r+0x4c>
 800252c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800252e:	f7ff ff42 	bl	80023b6 <__retarget_lock_release_recursive>
 8002532:	e7e9      	b.n	8002508 <_vfiprintf_r+0x4c>
 8002534:	2300      	movs	r3, #0
 8002536:	9309      	str	r3, [sp, #36]	; 0x24
 8002538:	2320      	movs	r3, #32
 800253a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800253e:	2330      	movs	r3, #48	; 0x30
 8002540:	f04f 0901 	mov.w	r9, #1
 8002544:	f8cd 800c 	str.w	r8, [sp, #12]
 8002548:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002708 <_vfiprintf_r+0x24c>
 800254c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002550:	4623      	mov	r3, r4
 8002552:	469a      	mov	sl, r3
 8002554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002558:	b10a      	cbz	r2, 800255e <_vfiprintf_r+0xa2>
 800255a:	2a25      	cmp	r2, #37	; 0x25
 800255c:	d1f9      	bne.n	8002552 <_vfiprintf_r+0x96>
 800255e:	ebba 0b04 	subs.w	fp, sl, r4
 8002562:	d00b      	beq.n	800257c <_vfiprintf_r+0xc0>
 8002564:	465b      	mov	r3, fp
 8002566:	4622      	mov	r2, r4
 8002568:	4629      	mov	r1, r5
 800256a:	4630      	mov	r0, r6
 800256c:	f7ff ff93 	bl	8002496 <__sfputs_r>
 8002570:	3001      	adds	r0, #1
 8002572:	f000 80aa 	beq.w	80026ca <_vfiprintf_r+0x20e>
 8002576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002578:	445a      	add	r2, fp
 800257a:	9209      	str	r2, [sp, #36]	; 0x24
 800257c:	f89a 3000 	ldrb.w	r3, [sl]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a2 	beq.w	80026ca <_vfiprintf_r+0x20e>
 8002586:	2300      	movs	r3, #0
 8002588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800258c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002590:	f10a 0a01 	add.w	sl, sl, #1
 8002594:	9304      	str	r3, [sp, #16]
 8002596:	9307      	str	r3, [sp, #28]
 8002598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800259c:	931a      	str	r3, [sp, #104]	; 0x68
 800259e:	4654      	mov	r4, sl
 80025a0:	2205      	movs	r2, #5
 80025a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a6:	4858      	ldr	r0, [pc, #352]	; (8002708 <_vfiprintf_r+0x24c>)
 80025a8:	f000 fcbc 	bl	8002f24 <memchr>
 80025ac:	9a04      	ldr	r2, [sp, #16]
 80025ae:	b9d8      	cbnz	r0, 80025e8 <_vfiprintf_r+0x12c>
 80025b0:	06d1      	lsls	r1, r2, #27
 80025b2:	bf44      	itt	mi
 80025b4:	2320      	movmi	r3, #32
 80025b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025ba:	0713      	lsls	r3, r2, #28
 80025bc:	bf44      	itt	mi
 80025be:	232b      	movmi	r3, #43	; 0x2b
 80025c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025c4:	f89a 3000 	ldrb.w	r3, [sl]
 80025c8:	2b2a      	cmp	r3, #42	; 0x2a
 80025ca:	d015      	beq.n	80025f8 <_vfiprintf_r+0x13c>
 80025cc:	4654      	mov	r4, sl
 80025ce:	2000      	movs	r0, #0
 80025d0:	f04f 0c0a 	mov.w	ip, #10
 80025d4:	9a07      	ldr	r2, [sp, #28]
 80025d6:	4621      	mov	r1, r4
 80025d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025dc:	3b30      	subs	r3, #48	; 0x30
 80025de:	2b09      	cmp	r3, #9
 80025e0:	d94e      	bls.n	8002680 <_vfiprintf_r+0x1c4>
 80025e2:	b1b0      	cbz	r0, 8002612 <_vfiprintf_r+0x156>
 80025e4:	9207      	str	r2, [sp, #28]
 80025e6:	e014      	b.n	8002612 <_vfiprintf_r+0x156>
 80025e8:	eba0 0308 	sub.w	r3, r0, r8
 80025ec:	fa09 f303 	lsl.w	r3, r9, r3
 80025f0:	4313      	orrs	r3, r2
 80025f2:	46a2      	mov	sl, r4
 80025f4:	9304      	str	r3, [sp, #16]
 80025f6:	e7d2      	b.n	800259e <_vfiprintf_r+0xe2>
 80025f8:	9b03      	ldr	r3, [sp, #12]
 80025fa:	1d19      	adds	r1, r3, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	9103      	str	r1, [sp, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	bfbb      	ittet	lt
 8002604:	425b      	neglt	r3, r3
 8002606:	f042 0202 	orrlt.w	r2, r2, #2
 800260a:	9307      	strge	r3, [sp, #28]
 800260c:	9307      	strlt	r3, [sp, #28]
 800260e:	bfb8      	it	lt
 8002610:	9204      	strlt	r2, [sp, #16]
 8002612:	7823      	ldrb	r3, [r4, #0]
 8002614:	2b2e      	cmp	r3, #46	; 0x2e
 8002616:	d10c      	bne.n	8002632 <_vfiprintf_r+0x176>
 8002618:	7863      	ldrb	r3, [r4, #1]
 800261a:	2b2a      	cmp	r3, #42	; 0x2a
 800261c:	d135      	bne.n	800268a <_vfiprintf_r+0x1ce>
 800261e:	9b03      	ldr	r3, [sp, #12]
 8002620:	3402      	adds	r4, #2
 8002622:	1d1a      	adds	r2, r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	9203      	str	r2, [sp, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	bfb8      	it	lt
 800262c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002630:	9305      	str	r3, [sp, #20]
 8002632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002718 <_vfiprintf_r+0x25c>
 8002636:	2203      	movs	r2, #3
 8002638:	4650      	mov	r0, sl
 800263a:	7821      	ldrb	r1, [r4, #0]
 800263c:	f000 fc72 	bl	8002f24 <memchr>
 8002640:	b140      	cbz	r0, 8002654 <_vfiprintf_r+0x198>
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	eba0 000a 	sub.w	r0, r0, sl
 8002648:	fa03 f000 	lsl.w	r0, r3, r0
 800264c:	9b04      	ldr	r3, [sp, #16]
 800264e:	3401      	adds	r4, #1
 8002650:	4303      	orrs	r3, r0
 8002652:	9304      	str	r3, [sp, #16]
 8002654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002658:	2206      	movs	r2, #6
 800265a:	482c      	ldr	r0, [pc, #176]	; (800270c <_vfiprintf_r+0x250>)
 800265c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002660:	f000 fc60 	bl	8002f24 <memchr>
 8002664:	2800      	cmp	r0, #0
 8002666:	d03f      	beq.n	80026e8 <_vfiprintf_r+0x22c>
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <_vfiprintf_r+0x254>)
 800266a:	bb1b      	cbnz	r3, 80026b4 <_vfiprintf_r+0x1f8>
 800266c:	9b03      	ldr	r3, [sp, #12]
 800266e:	3307      	adds	r3, #7
 8002670:	f023 0307 	bic.w	r3, r3, #7
 8002674:	3308      	adds	r3, #8
 8002676:	9303      	str	r3, [sp, #12]
 8002678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800267a:	443b      	add	r3, r7
 800267c:	9309      	str	r3, [sp, #36]	; 0x24
 800267e:	e767      	b.n	8002550 <_vfiprintf_r+0x94>
 8002680:	460c      	mov	r4, r1
 8002682:	2001      	movs	r0, #1
 8002684:	fb0c 3202 	mla	r2, ip, r2, r3
 8002688:	e7a5      	b.n	80025d6 <_vfiprintf_r+0x11a>
 800268a:	2300      	movs	r3, #0
 800268c:	f04f 0c0a 	mov.w	ip, #10
 8002690:	4619      	mov	r1, r3
 8002692:	3401      	adds	r4, #1
 8002694:	9305      	str	r3, [sp, #20]
 8002696:	4620      	mov	r0, r4
 8002698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800269c:	3a30      	subs	r2, #48	; 0x30
 800269e:	2a09      	cmp	r2, #9
 80026a0:	d903      	bls.n	80026aa <_vfiprintf_r+0x1ee>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0c5      	beq.n	8002632 <_vfiprintf_r+0x176>
 80026a6:	9105      	str	r1, [sp, #20]
 80026a8:	e7c3      	b.n	8002632 <_vfiprintf_r+0x176>
 80026aa:	4604      	mov	r4, r0
 80026ac:	2301      	movs	r3, #1
 80026ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80026b2:	e7f0      	b.n	8002696 <_vfiprintf_r+0x1da>
 80026b4:	ab03      	add	r3, sp, #12
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	462a      	mov	r2, r5
 80026ba:	4630      	mov	r0, r6
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <_vfiprintf_r+0x258>)
 80026be:	a904      	add	r1, sp, #16
 80026c0:	f3af 8000 	nop.w
 80026c4:	4607      	mov	r7, r0
 80026c6:	1c78      	adds	r0, r7, #1
 80026c8:	d1d6      	bne.n	8002678 <_vfiprintf_r+0x1bc>
 80026ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026cc:	07d9      	lsls	r1, r3, #31
 80026ce:	d405      	bmi.n	80026dc <_vfiprintf_r+0x220>
 80026d0:	89ab      	ldrh	r3, [r5, #12]
 80026d2:	059a      	lsls	r2, r3, #22
 80026d4:	d402      	bmi.n	80026dc <_vfiprintf_r+0x220>
 80026d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026d8:	f7ff fe6d 	bl	80023b6 <__retarget_lock_release_recursive>
 80026dc:	89ab      	ldrh	r3, [r5, #12]
 80026de:	065b      	lsls	r3, r3, #25
 80026e0:	f53f af12 	bmi.w	8002508 <_vfiprintf_r+0x4c>
 80026e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e6:	e711      	b.n	800250c <_vfiprintf_r+0x50>
 80026e8:	ab03      	add	r3, sp, #12
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	462a      	mov	r2, r5
 80026ee:	4630      	mov	r0, r6
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <_vfiprintf_r+0x258>)
 80026f2:	a904      	add	r1, sp, #16
 80026f4:	f000 f882 	bl	80027fc <_printf_i>
 80026f8:	e7e4      	b.n	80026c4 <_vfiprintf_r+0x208>
 80026fa:	bf00      	nop
 80026fc:	08003118 	.word	0x08003118
 8002700:	08003138 	.word	0x08003138
 8002704:	080030f8 	.word	0x080030f8
 8002708:	08003158 	.word	0x08003158
 800270c:	08003162 	.word	0x08003162
 8002710:	00000000 	.word	0x00000000
 8002714:	08002497 	.word	0x08002497
 8002718:	0800315e 	.word	0x0800315e

0800271c <_printf_common>:
 800271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002720:	4616      	mov	r6, r2
 8002722:	4699      	mov	r9, r3
 8002724:	688a      	ldr	r2, [r1, #8]
 8002726:	690b      	ldr	r3, [r1, #16]
 8002728:	4607      	mov	r7, r0
 800272a:	4293      	cmp	r3, r2
 800272c:	bfb8      	it	lt
 800272e:	4613      	movlt	r3, r2
 8002730:	6033      	str	r3, [r6, #0]
 8002732:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002736:	460c      	mov	r4, r1
 8002738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800273c:	b10a      	cbz	r2, 8002742 <_printf_common+0x26>
 800273e:	3301      	adds	r3, #1
 8002740:	6033      	str	r3, [r6, #0]
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	0699      	lsls	r1, r3, #26
 8002746:	bf42      	ittt	mi
 8002748:	6833      	ldrmi	r3, [r6, #0]
 800274a:	3302      	addmi	r3, #2
 800274c:	6033      	strmi	r3, [r6, #0]
 800274e:	6825      	ldr	r5, [r4, #0]
 8002750:	f015 0506 	ands.w	r5, r5, #6
 8002754:	d106      	bne.n	8002764 <_printf_common+0x48>
 8002756:	f104 0a19 	add.w	sl, r4, #25
 800275a:	68e3      	ldr	r3, [r4, #12]
 800275c:	6832      	ldr	r2, [r6, #0]
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	42ab      	cmp	r3, r5
 8002762:	dc28      	bgt.n	80027b6 <_printf_common+0x9a>
 8002764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002768:	1e13      	subs	r3, r2, #0
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	bf18      	it	ne
 800276e:	2301      	movne	r3, #1
 8002770:	0692      	lsls	r2, r2, #26
 8002772:	d42d      	bmi.n	80027d0 <_printf_common+0xb4>
 8002774:	4649      	mov	r1, r9
 8002776:	4638      	mov	r0, r7
 8002778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800277c:	47c0      	blx	r8
 800277e:	3001      	adds	r0, #1
 8002780:	d020      	beq.n	80027c4 <_printf_common+0xa8>
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	68e5      	ldr	r5, [r4, #12]
 8002786:	f003 0306 	and.w	r3, r3, #6
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf18      	it	ne
 800278e:	2500      	movne	r5, #0
 8002790:	6832      	ldr	r2, [r6, #0]
 8002792:	f04f 0600 	mov.w	r6, #0
 8002796:	68a3      	ldr	r3, [r4, #8]
 8002798:	bf08      	it	eq
 800279a:	1aad      	subeq	r5, r5, r2
 800279c:	6922      	ldr	r2, [r4, #16]
 800279e:	bf08      	it	eq
 80027a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bfc4      	itt	gt
 80027a8:	1a9b      	subgt	r3, r3, r2
 80027aa:	18ed      	addgt	r5, r5, r3
 80027ac:	341a      	adds	r4, #26
 80027ae:	42b5      	cmp	r5, r6
 80027b0:	d11a      	bne.n	80027e8 <_printf_common+0xcc>
 80027b2:	2000      	movs	r0, #0
 80027b4:	e008      	b.n	80027c8 <_printf_common+0xac>
 80027b6:	2301      	movs	r3, #1
 80027b8:	4652      	mov	r2, sl
 80027ba:	4649      	mov	r1, r9
 80027bc:	4638      	mov	r0, r7
 80027be:	47c0      	blx	r8
 80027c0:	3001      	adds	r0, #1
 80027c2:	d103      	bne.n	80027cc <_printf_common+0xb0>
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027cc:	3501      	adds	r5, #1
 80027ce:	e7c4      	b.n	800275a <_printf_common+0x3e>
 80027d0:	2030      	movs	r0, #48	; 0x30
 80027d2:	18e1      	adds	r1, r4, r3
 80027d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027de:	4422      	add	r2, r4
 80027e0:	3302      	adds	r3, #2
 80027e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027e6:	e7c5      	b.n	8002774 <_printf_common+0x58>
 80027e8:	2301      	movs	r3, #1
 80027ea:	4622      	mov	r2, r4
 80027ec:	4649      	mov	r1, r9
 80027ee:	4638      	mov	r0, r7
 80027f0:	47c0      	blx	r8
 80027f2:	3001      	adds	r0, #1
 80027f4:	d0e6      	beq.n	80027c4 <_printf_common+0xa8>
 80027f6:	3601      	adds	r6, #1
 80027f8:	e7d9      	b.n	80027ae <_printf_common+0x92>
	...

080027fc <_printf_i>:
 80027fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002800:	460c      	mov	r4, r1
 8002802:	7e27      	ldrb	r7, [r4, #24]
 8002804:	4691      	mov	r9, r2
 8002806:	2f78      	cmp	r7, #120	; 0x78
 8002808:	4680      	mov	r8, r0
 800280a:	469a      	mov	sl, r3
 800280c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800280e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002812:	d807      	bhi.n	8002824 <_printf_i+0x28>
 8002814:	2f62      	cmp	r7, #98	; 0x62
 8002816:	d80a      	bhi.n	800282e <_printf_i+0x32>
 8002818:	2f00      	cmp	r7, #0
 800281a:	f000 80d9 	beq.w	80029d0 <_printf_i+0x1d4>
 800281e:	2f58      	cmp	r7, #88	; 0x58
 8002820:	f000 80a4 	beq.w	800296c <_printf_i+0x170>
 8002824:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800282c:	e03a      	b.n	80028a4 <_printf_i+0xa8>
 800282e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002832:	2b15      	cmp	r3, #21
 8002834:	d8f6      	bhi.n	8002824 <_printf_i+0x28>
 8002836:	a001      	add	r0, pc, #4	; (adr r0, 800283c <_printf_i+0x40>)
 8002838:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800283c:	08002895 	.word	0x08002895
 8002840:	080028a9 	.word	0x080028a9
 8002844:	08002825 	.word	0x08002825
 8002848:	08002825 	.word	0x08002825
 800284c:	08002825 	.word	0x08002825
 8002850:	08002825 	.word	0x08002825
 8002854:	080028a9 	.word	0x080028a9
 8002858:	08002825 	.word	0x08002825
 800285c:	08002825 	.word	0x08002825
 8002860:	08002825 	.word	0x08002825
 8002864:	08002825 	.word	0x08002825
 8002868:	080029b7 	.word	0x080029b7
 800286c:	080028d9 	.word	0x080028d9
 8002870:	08002999 	.word	0x08002999
 8002874:	08002825 	.word	0x08002825
 8002878:	08002825 	.word	0x08002825
 800287c:	080029d9 	.word	0x080029d9
 8002880:	08002825 	.word	0x08002825
 8002884:	080028d9 	.word	0x080028d9
 8002888:	08002825 	.word	0x08002825
 800288c:	08002825 	.word	0x08002825
 8002890:	080029a1 	.word	0x080029a1
 8002894:	680b      	ldr	r3, [r1, #0]
 8002896:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800289a:	1d1a      	adds	r2, r3, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	600a      	str	r2, [r1, #0]
 80028a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0a4      	b.n	80029f2 <_printf_i+0x1f6>
 80028a8:	6825      	ldr	r5, [r4, #0]
 80028aa:	6808      	ldr	r0, [r1, #0]
 80028ac:	062e      	lsls	r6, r5, #24
 80028ae:	f100 0304 	add.w	r3, r0, #4
 80028b2:	d50a      	bpl.n	80028ca <_printf_i+0xce>
 80028b4:	6805      	ldr	r5, [r0, #0]
 80028b6:	600b      	str	r3, [r1, #0]
 80028b8:	2d00      	cmp	r5, #0
 80028ba:	da03      	bge.n	80028c4 <_printf_i+0xc8>
 80028bc:	232d      	movs	r3, #45	; 0x2d
 80028be:	426d      	negs	r5, r5
 80028c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028c4:	230a      	movs	r3, #10
 80028c6:	485e      	ldr	r0, [pc, #376]	; (8002a40 <_printf_i+0x244>)
 80028c8:	e019      	b.n	80028fe <_printf_i+0x102>
 80028ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80028ce:	6805      	ldr	r5, [r0, #0]
 80028d0:	600b      	str	r3, [r1, #0]
 80028d2:	bf18      	it	ne
 80028d4:	b22d      	sxthne	r5, r5
 80028d6:	e7ef      	b.n	80028b8 <_printf_i+0xbc>
 80028d8:	680b      	ldr	r3, [r1, #0]
 80028da:	6825      	ldr	r5, [r4, #0]
 80028dc:	1d18      	adds	r0, r3, #4
 80028de:	6008      	str	r0, [r1, #0]
 80028e0:	0628      	lsls	r0, r5, #24
 80028e2:	d501      	bpl.n	80028e8 <_printf_i+0xec>
 80028e4:	681d      	ldr	r5, [r3, #0]
 80028e6:	e002      	b.n	80028ee <_printf_i+0xf2>
 80028e8:	0669      	lsls	r1, r5, #25
 80028ea:	d5fb      	bpl.n	80028e4 <_printf_i+0xe8>
 80028ec:	881d      	ldrh	r5, [r3, #0]
 80028ee:	2f6f      	cmp	r7, #111	; 0x6f
 80028f0:	bf0c      	ite	eq
 80028f2:	2308      	moveq	r3, #8
 80028f4:	230a      	movne	r3, #10
 80028f6:	4852      	ldr	r0, [pc, #328]	; (8002a40 <_printf_i+0x244>)
 80028f8:	2100      	movs	r1, #0
 80028fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028fe:	6866      	ldr	r6, [r4, #4]
 8002900:	2e00      	cmp	r6, #0
 8002902:	bfa8      	it	ge
 8002904:	6821      	ldrge	r1, [r4, #0]
 8002906:	60a6      	str	r6, [r4, #8]
 8002908:	bfa4      	itt	ge
 800290a:	f021 0104 	bicge.w	r1, r1, #4
 800290e:	6021      	strge	r1, [r4, #0]
 8002910:	b90d      	cbnz	r5, 8002916 <_printf_i+0x11a>
 8002912:	2e00      	cmp	r6, #0
 8002914:	d04d      	beq.n	80029b2 <_printf_i+0x1b6>
 8002916:	4616      	mov	r6, r2
 8002918:	fbb5 f1f3 	udiv	r1, r5, r3
 800291c:	fb03 5711 	mls	r7, r3, r1, r5
 8002920:	5dc7      	ldrb	r7, [r0, r7]
 8002922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002926:	462f      	mov	r7, r5
 8002928:	42bb      	cmp	r3, r7
 800292a:	460d      	mov	r5, r1
 800292c:	d9f4      	bls.n	8002918 <_printf_i+0x11c>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d10b      	bne.n	800294a <_printf_i+0x14e>
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	07df      	lsls	r7, r3, #31
 8002936:	d508      	bpl.n	800294a <_printf_i+0x14e>
 8002938:	6923      	ldr	r3, [r4, #16]
 800293a:	6861      	ldr	r1, [r4, #4]
 800293c:	4299      	cmp	r1, r3
 800293e:	bfde      	ittt	le
 8002940:	2330      	movle	r3, #48	; 0x30
 8002942:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002946:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800294a:	1b92      	subs	r2, r2, r6
 800294c:	6122      	str	r2, [r4, #16]
 800294e:	464b      	mov	r3, r9
 8002950:	4621      	mov	r1, r4
 8002952:	4640      	mov	r0, r8
 8002954:	f8cd a000 	str.w	sl, [sp]
 8002958:	aa03      	add	r2, sp, #12
 800295a:	f7ff fedf 	bl	800271c <_printf_common>
 800295e:	3001      	adds	r0, #1
 8002960:	d14c      	bne.n	80029fc <_printf_i+0x200>
 8002962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002966:	b004      	add	sp, #16
 8002968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800296c:	4834      	ldr	r0, [pc, #208]	; (8002a40 <_printf_i+0x244>)
 800296e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002972:	680e      	ldr	r6, [r1, #0]
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	f856 5b04 	ldr.w	r5, [r6], #4
 800297a:	061f      	lsls	r7, r3, #24
 800297c:	600e      	str	r6, [r1, #0]
 800297e:	d514      	bpl.n	80029aa <_printf_i+0x1ae>
 8002980:	07d9      	lsls	r1, r3, #31
 8002982:	bf44      	itt	mi
 8002984:	f043 0320 	orrmi.w	r3, r3, #32
 8002988:	6023      	strmi	r3, [r4, #0]
 800298a:	b91d      	cbnz	r5, 8002994 <_printf_i+0x198>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	f023 0320 	bic.w	r3, r3, #32
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	2310      	movs	r3, #16
 8002996:	e7af      	b.n	80028f8 <_printf_i+0xfc>
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	f043 0320 	orr.w	r3, r3, #32
 800299e:	6023      	str	r3, [r4, #0]
 80029a0:	2378      	movs	r3, #120	; 0x78
 80029a2:	4828      	ldr	r0, [pc, #160]	; (8002a44 <_printf_i+0x248>)
 80029a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029a8:	e7e3      	b.n	8002972 <_printf_i+0x176>
 80029aa:	065e      	lsls	r6, r3, #25
 80029ac:	bf48      	it	mi
 80029ae:	b2ad      	uxthmi	r5, r5
 80029b0:	e7e6      	b.n	8002980 <_printf_i+0x184>
 80029b2:	4616      	mov	r6, r2
 80029b4:	e7bb      	b.n	800292e <_printf_i+0x132>
 80029b6:	680b      	ldr	r3, [r1, #0]
 80029b8:	6826      	ldr	r6, [r4, #0]
 80029ba:	1d1d      	adds	r5, r3, #4
 80029bc:	6960      	ldr	r0, [r4, #20]
 80029be:	600d      	str	r5, [r1, #0]
 80029c0:	0635      	lsls	r5, r6, #24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	d501      	bpl.n	80029ca <_printf_i+0x1ce>
 80029c6:	6018      	str	r0, [r3, #0]
 80029c8:	e002      	b.n	80029d0 <_printf_i+0x1d4>
 80029ca:	0671      	lsls	r1, r6, #25
 80029cc:	d5fb      	bpl.n	80029c6 <_printf_i+0x1ca>
 80029ce:	8018      	strh	r0, [r3, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	4616      	mov	r6, r2
 80029d4:	6123      	str	r3, [r4, #16]
 80029d6:	e7ba      	b.n	800294e <_printf_i+0x152>
 80029d8:	680b      	ldr	r3, [r1, #0]
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	600a      	str	r2, [r1, #0]
 80029de:	681e      	ldr	r6, [r3, #0]
 80029e0:	2100      	movs	r1, #0
 80029e2:	4630      	mov	r0, r6
 80029e4:	6862      	ldr	r2, [r4, #4]
 80029e6:	f000 fa9d 	bl	8002f24 <memchr>
 80029ea:	b108      	cbz	r0, 80029f0 <_printf_i+0x1f4>
 80029ec:	1b80      	subs	r0, r0, r6
 80029ee:	6060      	str	r0, [r4, #4]
 80029f0:	6863      	ldr	r3, [r4, #4]
 80029f2:	6123      	str	r3, [r4, #16]
 80029f4:	2300      	movs	r3, #0
 80029f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029fa:	e7a8      	b.n	800294e <_printf_i+0x152>
 80029fc:	4632      	mov	r2, r6
 80029fe:	4649      	mov	r1, r9
 8002a00:	4640      	mov	r0, r8
 8002a02:	6923      	ldr	r3, [r4, #16]
 8002a04:	47d0      	blx	sl
 8002a06:	3001      	adds	r0, #1
 8002a08:	d0ab      	beq.n	8002962 <_printf_i+0x166>
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	079b      	lsls	r3, r3, #30
 8002a0e:	d413      	bmi.n	8002a38 <_printf_i+0x23c>
 8002a10:	68e0      	ldr	r0, [r4, #12]
 8002a12:	9b03      	ldr	r3, [sp, #12]
 8002a14:	4298      	cmp	r0, r3
 8002a16:	bfb8      	it	lt
 8002a18:	4618      	movlt	r0, r3
 8002a1a:	e7a4      	b.n	8002966 <_printf_i+0x16a>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	4632      	mov	r2, r6
 8002a20:	4649      	mov	r1, r9
 8002a22:	4640      	mov	r0, r8
 8002a24:	47d0      	blx	sl
 8002a26:	3001      	adds	r0, #1
 8002a28:	d09b      	beq.n	8002962 <_printf_i+0x166>
 8002a2a:	3501      	adds	r5, #1
 8002a2c:	68e3      	ldr	r3, [r4, #12]
 8002a2e:	9903      	ldr	r1, [sp, #12]
 8002a30:	1a5b      	subs	r3, r3, r1
 8002a32:	42ab      	cmp	r3, r5
 8002a34:	dcf2      	bgt.n	8002a1c <_printf_i+0x220>
 8002a36:	e7eb      	b.n	8002a10 <_printf_i+0x214>
 8002a38:	2500      	movs	r5, #0
 8002a3a:	f104 0619 	add.w	r6, r4, #25
 8002a3e:	e7f5      	b.n	8002a2c <_printf_i+0x230>
 8002a40:	08003169 	.word	0x08003169
 8002a44:	0800317a 	.word	0x0800317a

08002a48 <_sbrk_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	4d05      	ldr	r5, [pc, #20]	; (8002a64 <_sbrk_r+0x1c>)
 8002a4e:	4604      	mov	r4, r0
 8002a50:	4608      	mov	r0, r1
 8002a52:	602b      	str	r3, [r5, #0]
 8002a54:	f7fd fe14 	bl	8000680 <_sbrk>
 8002a58:	1c43      	adds	r3, r0, #1
 8002a5a:	d102      	bne.n	8002a62 <_sbrk_r+0x1a>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	b103      	cbz	r3, 8002a62 <_sbrk_r+0x1a>
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	bd38      	pop	{r3, r4, r5, pc}
 8002a64:	20000100 	.word	0x20000100

08002a68 <__sread>:
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a70:	f000 fabe 	bl	8002ff0 <_read_r>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	bfab      	itete	ge
 8002a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8002a7c:	181b      	addge	r3, r3, r0
 8002a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a82:	bfac      	ite	ge
 8002a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a86:	81a3      	strhlt	r3, [r4, #12]
 8002a88:	bd10      	pop	{r4, pc}

08002a8a <__swrite>:
 8002a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a8e:	461f      	mov	r7, r3
 8002a90:	898b      	ldrh	r3, [r1, #12]
 8002a92:	4605      	mov	r5, r0
 8002a94:	05db      	lsls	r3, r3, #23
 8002a96:	460c      	mov	r4, r1
 8002a98:	4616      	mov	r6, r2
 8002a9a:	d505      	bpl.n	8002aa8 <__swrite+0x1e>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aa4:	f000 f9c8 	bl	8002e38 <_lseek_r>
 8002aa8:	89a3      	ldrh	r3, [r4, #12]
 8002aaa:	4632      	mov	r2, r6
 8002aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ab0:	81a3      	strh	r3, [r4, #12]
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002abe:	f000 b869 	b.w	8002b94 <_write_r>

08002ac2 <__sseek>:
 8002ac2:	b510      	push	{r4, lr}
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aca:	f000 f9b5 	bl	8002e38 <_lseek_r>
 8002ace:	1c43      	adds	r3, r0, #1
 8002ad0:	89a3      	ldrh	r3, [r4, #12]
 8002ad2:	bf15      	itete	ne
 8002ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ade:	81a3      	strheq	r3, [r4, #12]
 8002ae0:	bf18      	it	ne
 8002ae2:	81a3      	strhne	r3, [r4, #12]
 8002ae4:	bd10      	pop	{r4, pc}

08002ae6 <__sclose>:
 8002ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aea:	f000 b8d3 	b.w	8002c94 <_close_r>
	...

08002af0 <__swbuf_r>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	460e      	mov	r6, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	4605      	mov	r5, r0
 8002af8:	b118      	cbz	r0, 8002b02 <__swbuf_r+0x12>
 8002afa:	6983      	ldr	r3, [r0, #24]
 8002afc:	b90b      	cbnz	r3, 8002b02 <__swbuf_r+0x12>
 8002afe:	f7ff fbbb 	bl	8002278 <__sinit>
 8002b02:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <__swbuf_r+0x98>)
 8002b04:	429c      	cmp	r4, r3
 8002b06:	d12b      	bne.n	8002b60 <__swbuf_r+0x70>
 8002b08:	686c      	ldr	r4, [r5, #4]
 8002b0a:	69a3      	ldr	r3, [r4, #24]
 8002b0c:	60a3      	str	r3, [r4, #8]
 8002b0e:	89a3      	ldrh	r3, [r4, #12]
 8002b10:	071a      	lsls	r2, r3, #28
 8002b12:	d52f      	bpl.n	8002b74 <__swbuf_r+0x84>
 8002b14:	6923      	ldr	r3, [r4, #16]
 8002b16:	b36b      	cbz	r3, 8002b74 <__swbuf_r+0x84>
 8002b18:	6923      	ldr	r3, [r4, #16]
 8002b1a:	6820      	ldr	r0, [r4, #0]
 8002b1c:	b2f6      	uxtb	r6, r6
 8002b1e:	1ac0      	subs	r0, r0, r3
 8002b20:	6963      	ldr	r3, [r4, #20]
 8002b22:	4637      	mov	r7, r6
 8002b24:	4283      	cmp	r3, r0
 8002b26:	dc04      	bgt.n	8002b32 <__swbuf_r+0x42>
 8002b28:	4621      	mov	r1, r4
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	f000 f948 	bl	8002dc0 <_fflush_r>
 8002b30:	bb30      	cbnz	r0, 8002b80 <__swbuf_r+0x90>
 8002b32:	68a3      	ldr	r3, [r4, #8]
 8002b34:	3001      	adds	r0, #1
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60a3      	str	r3, [r4, #8]
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	6022      	str	r2, [r4, #0]
 8002b40:	701e      	strb	r6, [r3, #0]
 8002b42:	6963      	ldr	r3, [r4, #20]
 8002b44:	4283      	cmp	r3, r0
 8002b46:	d004      	beq.n	8002b52 <__swbuf_r+0x62>
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	07db      	lsls	r3, r3, #31
 8002b4c:	d506      	bpl.n	8002b5c <__swbuf_r+0x6c>
 8002b4e:	2e0a      	cmp	r6, #10
 8002b50:	d104      	bne.n	8002b5c <__swbuf_r+0x6c>
 8002b52:	4621      	mov	r1, r4
 8002b54:	4628      	mov	r0, r5
 8002b56:	f000 f933 	bl	8002dc0 <_fflush_r>
 8002b5a:	b988      	cbnz	r0, 8002b80 <__swbuf_r+0x90>
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <__swbuf_r+0x9c>)
 8002b62:	429c      	cmp	r4, r3
 8002b64:	d101      	bne.n	8002b6a <__swbuf_r+0x7a>
 8002b66:	68ac      	ldr	r4, [r5, #8]
 8002b68:	e7cf      	b.n	8002b0a <__swbuf_r+0x1a>
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <__swbuf_r+0xa0>)
 8002b6c:	429c      	cmp	r4, r3
 8002b6e:	bf08      	it	eq
 8002b70:	68ec      	ldreq	r4, [r5, #12]
 8002b72:	e7ca      	b.n	8002b0a <__swbuf_r+0x1a>
 8002b74:	4621      	mov	r1, r4
 8002b76:	4628      	mov	r0, r5
 8002b78:	f000 f81e 	bl	8002bb8 <__swsetup_r>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d0cb      	beq.n	8002b18 <__swbuf_r+0x28>
 8002b80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002b84:	e7ea      	b.n	8002b5c <__swbuf_r+0x6c>
 8002b86:	bf00      	nop
 8002b88:	08003118 	.word	0x08003118
 8002b8c:	08003138 	.word	0x08003138
 8002b90:	080030f8 	.word	0x080030f8

08002b94 <_write_r>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4d05      	ldr	r5, [pc, #20]	; (8002bb4 <_write_r+0x20>)
 8002ba0:	602a      	str	r2, [r5, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f7fd fd1f 	bl	80005e6 <_write>
 8002ba8:	1c43      	adds	r3, r0, #1
 8002baa:	d102      	bne.n	8002bb2 <_write_r+0x1e>
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	b103      	cbz	r3, 8002bb2 <_write_r+0x1e>
 8002bb0:	6023      	str	r3, [r4, #0]
 8002bb2:	bd38      	pop	{r3, r4, r5, pc}
 8002bb4:	20000100 	.word	0x20000100

08002bb8 <__swsetup_r>:
 8002bb8:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <__swsetup_r+0xcc>)
 8002bba:	b570      	push	{r4, r5, r6, lr}
 8002bbc:	681d      	ldr	r5, [r3, #0]
 8002bbe:	4606      	mov	r6, r0
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	b125      	cbz	r5, 8002bce <__swsetup_r+0x16>
 8002bc4:	69ab      	ldr	r3, [r5, #24]
 8002bc6:	b913      	cbnz	r3, 8002bce <__swsetup_r+0x16>
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f7ff fb55 	bl	8002278 <__sinit>
 8002bce:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <__swsetup_r+0xd0>)
 8002bd0:	429c      	cmp	r4, r3
 8002bd2:	d10f      	bne.n	8002bf4 <__swsetup_r+0x3c>
 8002bd4:	686c      	ldr	r4, [r5, #4]
 8002bd6:	89a3      	ldrh	r3, [r4, #12]
 8002bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bdc:	0719      	lsls	r1, r3, #28
 8002bde:	d42c      	bmi.n	8002c3a <__swsetup_r+0x82>
 8002be0:	06dd      	lsls	r5, r3, #27
 8002be2:	d411      	bmi.n	8002c08 <__swsetup_r+0x50>
 8002be4:	2309      	movs	r3, #9
 8002be6:	6033      	str	r3, [r6, #0]
 8002be8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf0:	81a3      	strh	r3, [r4, #12]
 8002bf2:	e03e      	b.n	8002c72 <__swsetup_r+0xba>
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <__swsetup_r+0xd4>)
 8002bf6:	429c      	cmp	r4, r3
 8002bf8:	d101      	bne.n	8002bfe <__swsetup_r+0x46>
 8002bfa:	68ac      	ldr	r4, [r5, #8]
 8002bfc:	e7eb      	b.n	8002bd6 <__swsetup_r+0x1e>
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <__swsetup_r+0xd8>)
 8002c00:	429c      	cmp	r4, r3
 8002c02:	bf08      	it	eq
 8002c04:	68ec      	ldreq	r4, [r5, #12]
 8002c06:	e7e6      	b.n	8002bd6 <__swsetup_r+0x1e>
 8002c08:	0758      	lsls	r0, r3, #29
 8002c0a:	d512      	bpl.n	8002c32 <__swsetup_r+0x7a>
 8002c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c0e:	b141      	cbz	r1, 8002c22 <__swsetup_r+0x6a>
 8002c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c14:	4299      	cmp	r1, r3
 8002c16:	d002      	beq.n	8002c1e <__swsetup_r+0x66>
 8002c18:	4630      	mov	r0, r6
 8002c1a:	f000 f99d 	bl	8002f58 <_free_r>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	6363      	str	r3, [r4, #52]	; 0x34
 8002c22:	89a3      	ldrh	r3, [r4, #12]
 8002c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c28:	81a3      	strh	r3, [r4, #12]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	6063      	str	r3, [r4, #4]
 8002c2e:	6923      	ldr	r3, [r4, #16]
 8002c30:	6023      	str	r3, [r4, #0]
 8002c32:	89a3      	ldrh	r3, [r4, #12]
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	81a3      	strh	r3, [r4, #12]
 8002c3a:	6923      	ldr	r3, [r4, #16]
 8002c3c:	b94b      	cbnz	r3, 8002c52 <__swsetup_r+0x9a>
 8002c3e:	89a3      	ldrh	r3, [r4, #12]
 8002c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c48:	d003      	beq.n	8002c52 <__swsetup_r+0x9a>
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	f000 f929 	bl	8002ea4 <__smakebuf_r>
 8002c52:	89a0      	ldrh	r0, [r4, #12]
 8002c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c58:	f010 0301 	ands.w	r3, r0, #1
 8002c5c:	d00a      	beq.n	8002c74 <__swsetup_r+0xbc>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60a3      	str	r3, [r4, #8]
 8002c62:	6963      	ldr	r3, [r4, #20]
 8002c64:	425b      	negs	r3, r3
 8002c66:	61a3      	str	r3, [r4, #24]
 8002c68:	6923      	ldr	r3, [r4, #16]
 8002c6a:	b943      	cbnz	r3, 8002c7e <__swsetup_r+0xc6>
 8002c6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c70:	d1ba      	bne.n	8002be8 <__swsetup_r+0x30>
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	0781      	lsls	r1, r0, #30
 8002c76:	bf58      	it	pl
 8002c78:	6963      	ldrpl	r3, [r4, #20]
 8002c7a:	60a3      	str	r3, [r4, #8]
 8002c7c:	e7f4      	b.n	8002c68 <__swsetup_r+0xb0>
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e7f7      	b.n	8002c72 <__swsetup_r+0xba>
 8002c82:	bf00      	nop
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	08003118 	.word	0x08003118
 8002c8c:	08003138 	.word	0x08003138
 8002c90:	080030f8 	.word	0x080030f8

08002c94 <_close_r>:
 8002c94:	b538      	push	{r3, r4, r5, lr}
 8002c96:	2300      	movs	r3, #0
 8002c98:	4d05      	ldr	r5, [pc, #20]	; (8002cb0 <_close_r+0x1c>)
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	602b      	str	r3, [r5, #0]
 8002ca0:	f7fd fcbd 	bl	800061e <_close>
 8002ca4:	1c43      	adds	r3, r0, #1
 8002ca6:	d102      	bne.n	8002cae <_close_r+0x1a>
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	b103      	cbz	r3, 8002cae <_close_r+0x1a>
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	20000100 	.word	0x20000100

08002cb4 <__sflush_r>:
 8002cb4:	898a      	ldrh	r2, [r1, #12]
 8002cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cba:	4605      	mov	r5, r0
 8002cbc:	0710      	lsls	r0, r2, #28
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	d458      	bmi.n	8002d74 <__sflush_r+0xc0>
 8002cc2:	684b      	ldr	r3, [r1, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	dc05      	bgt.n	8002cd4 <__sflush_r+0x20>
 8002cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	dc02      	bgt.n	8002cd4 <__sflush_r+0x20>
 8002cce:	2000      	movs	r0, #0
 8002cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cd6:	2e00      	cmp	r6, #0
 8002cd8:	d0f9      	beq.n	8002cce <__sflush_r+0x1a>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ce0:	682f      	ldr	r7, [r5, #0]
 8002ce2:	602b      	str	r3, [r5, #0]
 8002ce4:	d032      	beq.n	8002d4c <__sflush_r+0x98>
 8002ce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ce8:	89a3      	ldrh	r3, [r4, #12]
 8002cea:	075a      	lsls	r2, r3, #29
 8002cec:	d505      	bpl.n	8002cfa <__sflush_r+0x46>
 8002cee:	6863      	ldr	r3, [r4, #4]
 8002cf0:	1ac0      	subs	r0, r0, r3
 8002cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cf4:	b10b      	cbz	r3, 8002cfa <__sflush_r+0x46>
 8002cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cf8:	1ac0      	subs	r0, r0, r3
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d00:	4628      	mov	r0, r5
 8002d02:	6a21      	ldr	r1, [r4, #32]
 8002d04:	47b0      	blx	r6
 8002d06:	1c43      	adds	r3, r0, #1
 8002d08:	89a3      	ldrh	r3, [r4, #12]
 8002d0a:	d106      	bne.n	8002d1a <__sflush_r+0x66>
 8002d0c:	6829      	ldr	r1, [r5, #0]
 8002d0e:	291d      	cmp	r1, #29
 8002d10:	d82c      	bhi.n	8002d6c <__sflush_r+0xb8>
 8002d12:	4a2a      	ldr	r2, [pc, #168]	; (8002dbc <__sflush_r+0x108>)
 8002d14:	40ca      	lsrs	r2, r1
 8002d16:	07d6      	lsls	r6, r2, #31
 8002d18:	d528      	bpl.n	8002d6c <__sflush_r+0xb8>
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	6062      	str	r2, [r4, #4]
 8002d1e:	6922      	ldr	r2, [r4, #16]
 8002d20:	04d9      	lsls	r1, r3, #19
 8002d22:	6022      	str	r2, [r4, #0]
 8002d24:	d504      	bpl.n	8002d30 <__sflush_r+0x7c>
 8002d26:	1c42      	adds	r2, r0, #1
 8002d28:	d101      	bne.n	8002d2e <__sflush_r+0x7a>
 8002d2a:	682b      	ldr	r3, [r5, #0]
 8002d2c:	b903      	cbnz	r3, 8002d30 <__sflush_r+0x7c>
 8002d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8002d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d32:	602f      	str	r7, [r5, #0]
 8002d34:	2900      	cmp	r1, #0
 8002d36:	d0ca      	beq.n	8002cce <__sflush_r+0x1a>
 8002d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d3c:	4299      	cmp	r1, r3
 8002d3e:	d002      	beq.n	8002d46 <__sflush_r+0x92>
 8002d40:	4628      	mov	r0, r5
 8002d42:	f000 f909 	bl	8002f58 <_free_r>
 8002d46:	2000      	movs	r0, #0
 8002d48:	6360      	str	r0, [r4, #52]	; 0x34
 8002d4a:	e7c1      	b.n	8002cd0 <__sflush_r+0x1c>
 8002d4c:	6a21      	ldr	r1, [r4, #32]
 8002d4e:	2301      	movs	r3, #1
 8002d50:	4628      	mov	r0, r5
 8002d52:	47b0      	blx	r6
 8002d54:	1c41      	adds	r1, r0, #1
 8002d56:	d1c7      	bne.n	8002ce8 <__sflush_r+0x34>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0c4      	beq.n	8002ce8 <__sflush_r+0x34>
 8002d5e:	2b1d      	cmp	r3, #29
 8002d60:	d001      	beq.n	8002d66 <__sflush_r+0xb2>
 8002d62:	2b16      	cmp	r3, #22
 8002d64:	d101      	bne.n	8002d6a <__sflush_r+0xb6>
 8002d66:	602f      	str	r7, [r5, #0]
 8002d68:	e7b1      	b.n	8002cce <__sflush_r+0x1a>
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d70:	81a3      	strh	r3, [r4, #12]
 8002d72:	e7ad      	b.n	8002cd0 <__sflush_r+0x1c>
 8002d74:	690f      	ldr	r7, [r1, #16]
 8002d76:	2f00      	cmp	r7, #0
 8002d78:	d0a9      	beq.n	8002cce <__sflush_r+0x1a>
 8002d7a:	0793      	lsls	r3, r2, #30
 8002d7c:	bf18      	it	ne
 8002d7e:	2300      	movne	r3, #0
 8002d80:	680e      	ldr	r6, [r1, #0]
 8002d82:	bf08      	it	eq
 8002d84:	694b      	ldreq	r3, [r1, #20]
 8002d86:	eba6 0807 	sub.w	r8, r6, r7
 8002d8a:	600f      	str	r7, [r1, #0]
 8002d8c:	608b      	str	r3, [r1, #8]
 8002d8e:	f1b8 0f00 	cmp.w	r8, #0
 8002d92:	dd9c      	ble.n	8002cce <__sflush_r+0x1a>
 8002d94:	4643      	mov	r3, r8
 8002d96:	463a      	mov	r2, r7
 8002d98:	4628      	mov	r0, r5
 8002d9a:	6a21      	ldr	r1, [r4, #32]
 8002d9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d9e:	47b0      	blx	r6
 8002da0:	2800      	cmp	r0, #0
 8002da2:	dc06      	bgt.n	8002db2 <__sflush_r+0xfe>
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dae:	81a3      	strh	r3, [r4, #12]
 8002db0:	e78e      	b.n	8002cd0 <__sflush_r+0x1c>
 8002db2:	4407      	add	r7, r0
 8002db4:	eba8 0800 	sub.w	r8, r8, r0
 8002db8:	e7e9      	b.n	8002d8e <__sflush_r+0xda>
 8002dba:	bf00      	nop
 8002dbc:	20400001 	.word	0x20400001

08002dc0 <_fflush_r>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	690b      	ldr	r3, [r1, #16]
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	b913      	cbnz	r3, 8002dd0 <_fflush_r+0x10>
 8002dca:	2500      	movs	r5, #0
 8002dcc:	4628      	mov	r0, r5
 8002dce:	bd38      	pop	{r3, r4, r5, pc}
 8002dd0:	b118      	cbz	r0, 8002dda <_fflush_r+0x1a>
 8002dd2:	6983      	ldr	r3, [r0, #24]
 8002dd4:	b90b      	cbnz	r3, 8002dda <_fflush_r+0x1a>
 8002dd6:	f7ff fa4f 	bl	8002278 <__sinit>
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <_fflush_r+0x6c>)
 8002ddc:	429c      	cmp	r4, r3
 8002dde:	d11b      	bne.n	8002e18 <_fflush_r+0x58>
 8002de0:	686c      	ldr	r4, [r5, #4]
 8002de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ef      	beq.n	8002dca <_fflush_r+0xa>
 8002dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002dec:	07d0      	lsls	r0, r2, #31
 8002dee:	d404      	bmi.n	8002dfa <_fflush_r+0x3a>
 8002df0:	0599      	lsls	r1, r3, #22
 8002df2:	d402      	bmi.n	8002dfa <_fflush_r+0x3a>
 8002df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002df6:	f7ff fadd 	bl	80023b4 <__retarget_lock_acquire_recursive>
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	f7ff ff59 	bl	8002cb4 <__sflush_r>
 8002e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e04:	4605      	mov	r5, r0
 8002e06:	07da      	lsls	r2, r3, #31
 8002e08:	d4e0      	bmi.n	8002dcc <_fflush_r+0xc>
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	059b      	lsls	r3, r3, #22
 8002e0e:	d4dd      	bmi.n	8002dcc <_fflush_r+0xc>
 8002e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e12:	f7ff fad0 	bl	80023b6 <__retarget_lock_release_recursive>
 8002e16:	e7d9      	b.n	8002dcc <_fflush_r+0xc>
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <_fflush_r+0x70>)
 8002e1a:	429c      	cmp	r4, r3
 8002e1c:	d101      	bne.n	8002e22 <_fflush_r+0x62>
 8002e1e:	68ac      	ldr	r4, [r5, #8]
 8002e20:	e7df      	b.n	8002de2 <_fflush_r+0x22>
 8002e22:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <_fflush_r+0x74>)
 8002e24:	429c      	cmp	r4, r3
 8002e26:	bf08      	it	eq
 8002e28:	68ec      	ldreq	r4, [r5, #12]
 8002e2a:	e7da      	b.n	8002de2 <_fflush_r+0x22>
 8002e2c:	08003118 	.word	0x08003118
 8002e30:	08003138 	.word	0x08003138
 8002e34:	080030f8 	.word	0x080030f8

08002e38 <_lseek_r>:
 8002e38:	b538      	push	{r3, r4, r5, lr}
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	2200      	movs	r2, #0
 8002e42:	4d05      	ldr	r5, [pc, #20]	; (8002e58 <_lseek_r+0x20>)
 8002e44:	602a      	str	r2, [r5, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f7fd fc0d 	bl	8000666 <_lseek>
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	d102      	bne.n	8002e56 <_lseek_r+0x1e>
 8002e50:	682b      	ldr	r3, [r5, #0]
 8002e52:	b103      	cbz	r3, 8002e56 <_lseek_r+0x1e>
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	bd38      	pop	{r3, r4, r5, pc}
 8002e58:	20000100 	.word	0x20000100

08002e5c <__swhatbuf_r>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	460e      	mov	r6, r1
 8002e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e64:	4614      	mov	r4, r2
 8002e66:	2900      	cmp	r1, #0
 8002e68:	461d      	mov	r5, r3
 8002e6a:	b096      	sub	sp, #88	; 0x58
 8002e6c:	da07      	bge.n	8002e7e <__swhatbuf_r+0x22>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	602b      	str	r3, [r5, #0]
 8002e72:	89b3      	ldrh	r3, [r6, #12]
 8002e74:	061a      	lsls	r2, r3, #24
 8002e76:	d410      	bmi.n	8002e9a <__swhatbuf_r+0x3e>
 8002e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e7c:	e00e      	b.n	8002e9c <__swhatbuf_r+0x40>
 8002e7e:	466a      	mov	r2, sp
 8002e80:	f000 f8c8 	bl	8003014 <_fstat_r>
 8002e84:	2800      	cmp	r0, #0
 8002e86:	dbf2      	blt.n	8002e6e <__swhatbuf_r+0x12>
 8002e88:	9a01      	ldr	r2, [sp, #4]
 8002e8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e92:	425a      	negs	r2, r3
 8002e94:	415a      	adcs	r2, r3
 8002e96:	602a      	str	r2, [r5, #0]
 8002e98:	e7ee      	b.n	8002e78 <__swhatbuf_r+0x1c>
 8002e9a:	2340      	movs	r3, #64	; 0x40
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	b016      	add	sp, #88	; 0x58
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}

08002ea4 <__smakebuf_r>:
 8002ea4:	898b      	ldrh	r3, [r1, #12]
 8002ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ea8:	079d      	lsls	r5, r3, #30
 8002eaa:	4606      	mov	r6, r0
 8002eac:	460c      	mov	r4, r1
 8002eae:	d507      	bpl.n	8002ec0 <__smakebuf_r+0x1c>
 8002eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002eb4:	6023      	str	r3, [r4, #0]
 8002eb6:	6123      	str	r3, [r4, #16]
 8002eb8:	2301      	movs	r3, #1
 8002eba:	6163      	str	r3, [r4, #20]
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	466a      	mov	r2, sp
 8002ec2:	ab01      	add	r3, sp, #4
 8002ec4:	f7ff ffca 	bl	8002e5c <__swhatbuf_r>
 8002ec8:	9900      	ldr	r1, [sp, #0]
 8002eca:	4605      	mov	r5, r0
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f7ff fa73 	bl	80023b8 <_malloc_r>
 8002ed2:	b948      	cbnz	r0, 8002ee8 <__smakebuf_r+0x44>
 8002ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ed8:	059a      	lsls	r2, r3, #22
 8002eda:	d4ef      	bmi.n	8002ebc <__smakebuf_r+0x18>
 8002edc:	f023 0303 	bic.w	r3, r3, #3
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	81a3      	strh	r3, [r4, #12]
 8002ee6:	e7e3      	b.n	8002eb0 <__smakebuf_r+0xc>
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <__smakebuf_r+0x7c>)
 8002eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	6020      	str	r0, [r4, #0]
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	9b00      	ldr	r3, [sp, #0]
 8002ef8:	6120      	str	r0, [r4, #16]
 8002efa:	6163      	str	r3, [r4, #20]
 8002efc:	9b01      	ldr	r3, [sp, #4]
 8002efe:	b15b      	cbz	r3, 8002f18 <__smakebuf_r+0x74>
 8002f00:	4630      	mov	r0, r6
 8002f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f06:	f000 f897 	bl	8003038 <_isatty_r>
 8002f0a:	b128      	cbz	r0, 8002f18 <__smakebuf_r+0x74>
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	81a3      	strh	r3, [r4, #12]
 8002f18:	89a0      	ldrh	r0, [r4, #12]
 8002f1a:	4305      	orrs	r5, r0
 8002f1c:	81a5      	strh	r5, [r4, #12]
 8002f1e:	e7cd      	b.n	8002ebc <__smakebuf_r+0x18>
 8002f20:	08002211 	.word	0x08002211

08002f24 <memchr>:
 8002f24:	4603      	mov	r3, r0
 8002f26:	b510      	push	{r4, lr}
 8002f28:	b2c9      	uxtb	r1, r1
 8002f2a:	4402      	add	r2, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	d101      	bne.n	8002f36 <memchr+0x12>
 8002f32:	2000      	movs	r0, #0
 8002f34:	e003      	b.n	8002f3e <memchr+0x1a>
 8002f36:	7804      	ldrb	r4, [r0, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	428c      	cmp	r4, r1
 8002f3c:	d1f6      	bne.n	8002f2c <memchr+0x8>
 8002f3e:	bd10      	pop	{r4, pc}

08002f40 <__malloc_lock>:
 8002f40:	4801      	ldr	r0, [pc, #4]	; (8002f48 <__malloc_lock+0x8>)
 8002f42:	f7ff ba37 	b.w	80023b4 <__retarget_lock_acquire_recursive>
 8002f46:	bf00      	nop
 8002f48:	200000f8 	.word	0x200000f8

08002f4c <__malloc_unlock>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	; (8002f54 <__malloc_unlock+0x8>)
 8002f4e:	f7ff ba32 	b.w	80023b6 <__retarget_lock_release_recursive>
 8002f52:	bf00      	nop
 8002f54:	200000f8 	.word	0x200000f8

08002f58 <_free_r>:
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	2900      	cmp	r1, #0
 8002f5e:	d043      	beq.n	8002fe8 <_free_r+0x90>
 8002f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f64:	1f0c      	subs	r4, r1, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bfb8      	it	lt
 8002f6a:	18e4      	addlt	r4, r4, r3
 8002f6c:	f7ff ffe8 	bl	8002f40 <__malloc_lock>
 8002f70:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <_free_r+0x94>)
 8002f72:	6813      	ldr	r3, [r2, #0]
 8002f74:	4610      	mov	r0, r2
 8002f76:	b933      	cbnz	r3, 8002f86 <_free_r+0x2e>
 8002f78:	6063      	str	r3, [r4, #4]
 8002f7a:	6014      	str	r4, [r2, #0]
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f82:	f7ff bfe3 	b.w	8002f4c <__malloc_unlock>
 8002f86:	42a3      	cmp	r3, r4
 8002f88:	d90a      	bls.n	8002fa0 <_free_r+0x48>
 8002f8a:	6821      	ldr	r1, [r4, #0]
 8002f8c:	1862      	adds	r2, r4, r1
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	bf01      	itttt	eq
 8002f92:	681a      	ldreq	r2, [r3, #0]
 8002f94:	685b      	ldreq	r3, [r3, #4]
 8002f96:	1852      	addeq	r2, r2, r1
 8002f98:	6022      	streq	r2, [r4, #0]
 8002f9a:	6063      	str	r3, [r4, #4]
 8002f9c:	6004      	str	r4, [r0, #0]
 8002f9e:	e7ed      	b.n	8002f7c <_free_r+0x24>
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	b10b      	cbz	r3, 8002faa <_free_r+0x52>
 8002fa6:	42a3      	cmp	r3, r4
 8002fa8:	d9fa      	bls.n	8002fa0 <_free_r+0x48>
 8002faa:	6811      	ldr	r1, [r2, #0]
 8002fac:	1850      	adds	r0, r2, r1
 8002fae:	42a0      	cmp	r0, r4
 8002fb0:	d10b      	bne.n	8002fca <_free_r+0x72>
 8002fb2:	6820      	ldr	r0, [r4, #0]
 8002fb4:	4401      	add	r1, r0
 8002fb6:	1850      	adds	r0, r2, r1
 8002fb8:	4283      	cmp	r3, r0
 8002fba:	6011      	str	r1, [r2, #0]
 8002fbc:	d1de      	bne.n	8002f7c <_free_r+0x24>
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4401      	add	r1, r0
 8002fc4:	6011      	str	r1, [r2, #0]
 8002fc6:	6053      	str	r3, [r2, #4]
 8002fc8:	e7d8      	b.n	8002f7c <_free_r+0x24>
 8002fca:	d902      	bls.n	8002fd2 <_free_r+0x7a>
 8002fcc:	230c      	movs	r3, #12
 8002fce:	602b      	str	r3, [r5, #0]
 8002fd0:	e7d4      	b.n	8002f7c <_free_r+0x24>
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	1821      	adds	r1, r4, r0
 8002fd6:	428b      	cmp	r3, r1
 8002fd8:	bf01      	itttt	eq
 8002fda:	6819      	ldreq	r1, [r3, #0]
 8002fdc:	685b      	ldreq	r3, [r3, #4]
 8002fde:	1809      	addeq	r1, r1, r0
 8002fe0:	6021      	streq	r1, [r4, #0]
 8002fe2:	6063      	str	r3, [r4, #4]
 8002fe4:	6054      	str	r4, [r2, #4]
 8002fe6:	e7c9      	b.n	8002f7c <_free_r+0x24>
 8002fe8:	bd38      	pop	{r3, r4, r5, pc}
 8002fea:	bf00      	nop
 8002fec:	200000a0 	.word	0x200000a0

08002ff0 <_read_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4d05      	ldr	r5, [pc, #20]	; (8003010 <_read_r+0x20>)
 8002ffc:	602a      	str	r2, [r5, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f7fd fad4 	bl	80005ac <_read>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	d102      	bne.n	800300e <_read_r+0x1e>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	b103      	cbz	r3, 800300e <_read_r+0x1e>
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	20000100 	.word	0x20000100

08003014 <_fstat_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	2300      	movs	r3, #0
 8003018:	4d06      	ldr	r5, [pc, #24]	; (8003034 <_fstat_r+0x20>)
 800301a:	4604      	mov	r4, r0
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	602b      	str	r3, [r5, #0]
 8003022:	f7fd fb07 	bl	8000634 <_fstat>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	d102      	bne.n	8003030 <_fstat_r+0x1c>
 800302a:	682b      	ldr	r3, [r5, #0]
 800302c:	b103      	cbz	r3, 8003030 <_fstat_r+0x1c>
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	bd38      	pop	{r3, r4, r5, pc}
 8003032:	bf00      	nop
 8003034:	20000100 	.word	0x20000100

08003038 <_isatty_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	2300      	movs	r3, #0
 800303c:	4d05      	ldr	r5, [pc, #20]	; (8003054 <_isatty_r+0x1c>)
 800303e:	4604      	mov	r4, r0
 8003040:	4608      	mov	r0, r1
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	f7fd fb05 	bl	8000652 <_isatty>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_isatty_r+0x1a>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	b103      	cbz	r3, 8003052 <_isatty_r+0x1a>
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	20000100 	.word	0x20000100

08003058 <_init>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr

08003064 <_fini>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr
