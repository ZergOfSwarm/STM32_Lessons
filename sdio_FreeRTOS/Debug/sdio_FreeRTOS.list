
sdio_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800e9c4  0800e9c4  0001e9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800effc  0800effc  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800effc  0800effc  0001effc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f004  0800f004  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f004  0800f004  0001f004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f008  0800f008  0001f008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800f00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00007dac  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007e58  20007e58  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a362  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005216  00000000  00000000  0004a43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  0004f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ac8  00000000  00000000  000512f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007501  00000000  00000000  00052dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000220b6  00000000  00000000  0005a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de1c2  00000000  00000000  0007c377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015a539  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000080dc  00000000  00000000  0015a58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e9ac 	.word	0x0800e9ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	0800e9ac 	.word	0x0800e9ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d013      	beq.n	8000bc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ba0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ba4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00b      	beq.n	8000bc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bac:	e000      	b.n	8000bb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f9      	beq.n	8000bae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_write>:
void StartDefaultTask(void *argument);
void Start_Blink_Task(void *argument);
void Start_SDIO_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <_write+0x48>)
 8000bea:	f004 f8dc 	bl	8004da6 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e009      	b.n	8000c08 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffc1 	bl	8000b84 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf1      	blt.n	8000bf4 <_write+0x20>
	}
	return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20005c30 	.word	0x20005c30

08000c20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c24:	f000 ff54 	bl	8001ad0 <HAL_Init>

	/* USER CODE BEGIN Init */
	T = HAL_GetTick();
 8000c28:	f000 ff88 	bl	8001b3c <HAL_GetTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <main+0x70>)
 8000c30:	6013      	str	r3, [r2, #0]
	flag = 1;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <main+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c38:	f000 f842 	bl	8000cc0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c3c:	f000 f91c 	bl	8000e78 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c40:	f000 f8f2 	bl	8000e28 <MX_DMA_Init>
	MX_SDIO_SD_Init();
 8000c44:	f000 f8a6 	bl	8000d94 <MX_SDIO_SD_Init>
	MX_USART6_UART_Init();
 8000c48:	f000 f8c4 	bl	8000dd4 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 8000c4c:	f005 f8e8 	bl	8005e20 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	printf("Hello world! \r\n");
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <main+0x78>)
 8000c52:	f00d f84d 	bl	800dcf0 <puts>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000c56:	f009 f9d9 	bl	800a00c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <main+0x7c>)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <main+0x80>)
 8000c60:	f009 fa55 	bl	800a10e <osThreadNew>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <main+0x84>)
 8000c68:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of my_Blink_Task */
	my_Blink_TaskHandle = osThreadNew(Start_Blink_Task, NULL,
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <main+0x88>)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480f      	ldr	r0, [pc, #60]	; (8000cac <main+0x8c>)
 8000c70:	f009 fa4d 	bl	800a10e <osThreadNew>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <main+0x90>)
 8000c78:	6013      	str	r3, [r2, #0]
			&my_Blink_Task_attributes);

	/* creation of my_SDIO_Task */
	my_SDIO_TaskHandle = osThreadNew(Start_SDIO_Task, NULL,
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <main+0x94>)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <main+0x98>)
 8000c80:	f009 fa45 	bl	800a10e <osThreadNew>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <main+0x9c>)
 8000c88:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000c8a:	f009 fa05 	bl	800a098 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c8e:	e7fe      	b.n	8000c8e <main+0x6e>
 8000c90:	20005b48 	.word	0x20005b48
 8000c94:	20005b44 	.word	0x20005b44
 8000c98:	0800ea08 	.word	0x0800ea08
 8000c9c:	0800ee24 	.word	0x0800ee24
 8000ca0:	08000ee5 	.word	0x08000ee5
 8000ca4:	20005b3c 	.word	0x20005b3c
 8000ca8:	0800ee48 	.word	0x0800ee48
 8000cac:	08000ef5 	.word	0x08000ef5
 8000cb0:	20005c74 	.word	0x20005c74
 8000cb4:	0800ee6c 	.word	0x0800ee6c
 8000cb8:	08000fb9 	.word	0x08000fb9
 8000cbc:	20005b40 	.word	0x20005b40

08000cc0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	; 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00c ff25 	bl	800db1e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <SystemClock_Config+0xcc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <SystemClock_Config+0xd0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000d34:	23a8      	movs	r3, #168	; 0xa8
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 fd5f 	bl	8002808 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x94>
		Error_Handler();
 8000d50:	f000 f97a 	bl	8001048 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d64:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2105      	movs	r1, #5
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 ffc0 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xc2>
		Error_Handler();
 8000d7e:	f000 f963 	bl	8001048 <Error_Handler>
	}
}
 8000d82:	bf00      	nop
 8000d84:	3750      	adds	r7, #80	; 0x50
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000

08000d94 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_SDIO_SD_Init+0x38>)
 8000d9a:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <MX_SDIO_SD_Init+0x3c>)
 8000d9c:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_SDIO_SD_Init+0x38>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_SDIO_SD_Init+0x38>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_SDIO_SD_Init+0x38>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_SDIO_SD_Init+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <MX_SDIO_SD_Init+0x38>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 8;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <MX_SDIO_SD_Init+0x38>)
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20005bac 	.word	0x20005bac
 8000dd0:	40012c00 	.word	0x40012c00

08000dd4 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <MX_USART6_UART_Init+0x50>)
 8000ddc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART6_UART_Init+0x4c>)
 8000e0c:	f003 ff7e 	bl	8004d0c <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8000e16:	f000 f917 	bl	8001048 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20005c30 	.word	0x20005c30
 8000e24:	40011400 	.word	0x40011400

08000e28 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_DMA_Init+0x4c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_DMA_Init+0x4c>)
 8000e38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <MX_DMA_Init+0x4c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2105      	movs	r1, #5
 8000e4e:	203b      	movs	r0, #59	; 0x3b
 8000e50:	f000 ff5c 	bl	8001d0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e54:	203b      	movs	r0, #59	; 0x3b
 8000e56:	f000 ff75 	bl	8001d44 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2105      	movs	r1, #5
 8000e5e:	2045      	movs	r0, #69	; 0x45
 8000e60:	f000 ff54 	bl	8001d0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e64:	2045      	movs	r0, #69	; 0x45
 8000e66:	f000 ff6d 	bl	8001d44 <HAL_NVIC_EnableIRQ>

}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_GPIO_Init+0x68>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f009 f9a0 	bl	800a232 <osDelay>
 8000ef2:	e7fb      	b.n	8000eec <StartDefaultTask+0x8>

08000ef4 <Start_Blink_Task>:
 * @brief Function implementing the my_Blink_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Blink_Task */
void Start_Blink_Task(void *argument) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Blink_Task */
	__HAL_RCC_GPIOA_CLK_ENABLE(); // тактирование порта
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <Start_Blink_Task+0xb4>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <Start_Blink_Task+0xb4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <Start_Blink_Task+0xb4>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 }; // Для инициализации порта нам необходимо объявить структуру
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
	/* конфигурация вывода PA0 на выход с подтягивающим резистором */
	GPIO_InitStruct.Pin = GPIO_PIN_0; // номер вывода
 8000f28:	2301      	movs	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // режим выход
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // резистор к шине питания
 8000f30:	2301      	movs	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481c      	ldr	r0, [pc, #112]	; (8000fac <Start_Blink_Task+0xb8>)
 8000f3c:	f001 faae 	bl	800249c <HAL_GPIO_Init>
	/* Infinite loop */
	for (;;) {
		if (flag == 1) {
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <Start_Blink_Task+0xbc>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00f      	beq.n	8000f68 <Start_Blink_Task+0x74>
			if (HAL_GetTick() - T >= 250) {
 8000f48:	f000 fdf8 	bl	8001b3c <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <Start_Blink_Task+0xc0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2bf9      	cmp	r3, #249	; 0xf9
 8000f56:	d907      	bls.n	8000f68 <Start_Blink_Task+0x74>
				flag = 0;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <Start_Blink_Task+0xbc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 8000f5e:	f000 fded 	bl	8001b3c <HAL_GetTick>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <Start_Blink_Task+0xc0>)
 8000f66:	6013      	str	r3, [r2, #0]
			}
		}
		if (flag == 0) {
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <Start_Blink_Task+0xbc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	f083 0301 	eor.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00f      	beq.n	8000f96 <Start_Blink_Task+0xa2>
			if (HAL_GetTick() - T >= 250) {
 8000f76:	f000 fde1 	bl	8001b3c <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <Start_Blink_Task+0xc0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2bf9      	cmp	r3, #249	; 0xf9
 8000f84:	d907      	bls.n	8000f96 <Start_Blink_Task+0xa2>
				flag = 1;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <Start_Blink_Task+0xbc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 8000f8c:	f000 fdd6 	bl	8001b3c <HAL_GetTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <Start_Blink_Task+0xc0>)
 8000f94:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, flag);
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <Start_Blink_Task+0xbc>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <Start_Blink_Task+0xb8>)
 8000fa0:	f001 fc18 	bl	80027d4 <HAL_GPIO_WritePin>
		if (flag == 1) {
 8000fa4:	e7cc      	b.n	8000f40 <Start_Blink_Task+0x4c>
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	20005b44 	.word	0x20005b44
 8000fb4:	20005b48 	.word	0x20005b48

08000fb8 <Start_SDIO_Task>:
 * @brief Function implementing the my_SDIO_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_SDIO_Task */
void Start_SDIO_Task(void *argument) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_SDIO_Task */
	printf("Start_SDIO_Task \r\n");
 8000fc0:	4815      	ldr	r0, [pc, #84]	; (8001018 <Start_SDIO_Task+0x60>)
 8000fc2:	f00c fe95 	bl	800dcf0 <puts>
	zerg_mount();
 8000fc6:	f000 fb05 	bl	80015d4 <zerg_mount>
	zerg_format();
 8000fca:	f000 fb1f 	bl	800160c <zerg_format>
	zerg_creat_folder(folder_name);
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <Start_SDIO_Task+0x64>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fc48 	bl	8001868 <zerg_creat_folder>
	zerg_open();
 8000fd8:	f000 fb3e 	bl	8001658 <zerg_open>
	zerg_write();
 8000fdc:	f000 fb5c 	bl	8001698 <zerg_write>
	zerg_read();
 8000fe0:	f000 fb92 	bl	8001708 <zerg_read>

	for (int i = 0; i <= 10; i++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e004      	b.n	8000ff4 <Start_SDIO_Task+0x3c>
		zerg_add_data();
 8000fea:	f000 fbcd 	bl	8001788 <zerg_add_data>
	for (int i = 0; i <= 10; i++) {
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b0a      	cmp	r3, #10
 8000ff8:	ddf7      	ble.n	8000fea <Start_SDIO_Task+0x32>
	}

	zerg_read();
 8000ffa:	f000 fb85 	bl	8001708 <zerg_read>
	zerg_get_free_space(); // Узнаем свободное место до удаления
 8000ffe:	f000 fc57 	bl	80018b0 <zerg_get_free_space>
	//zerg_scan_files(path);    // НЕ ВИДИТ ФАЙЛЫ!!!, РАЗБЕРИСЬ!!!
	//zerg_delete(folder_name); // Удаляем папку "folder_name" или файл "name"
	zerg_get_free_space(); // Узнаем свободное место после удаления
 8001002:	f000 fc55 	bl	80018b0 <zerg_get_free_space>
	zerg_get_file_info(name);
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <Start_SDIO_Task+0x68>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fca8 	bl	8001960 <zerg_get_file_info>
	//zerg_ummount(path);    // НЕ РАБОТАЕТ, РАЗБЕРИСЬ!!!
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f009 f90e 	bl	800a232 <osDelay>
 8001016:	e7fb      	b.n	8001010 <Start_SDIO_Task+0x58>
 8001018:	0800ea18 	.word	0x0800ea18
 800101c:	20000018 	.word	0x20000018
 8001020:	20000014 	.word	0x20000014

08001024 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001036:	f000 fd6d 	bl	8001b14 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40002000 	.word	0x40002000

08001048 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_MspInit+0x54>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_MspInit+0x54>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x54>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_MspInit+0x54>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_MspInit+0x54>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_MspInit+0x54>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	210f      	movs	r1, #15
 8001096:	f06f 0001 	mvn.w	r0, #1
 800109a:	f000 fe37 	bl	8001d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a70      	ldr	r2, [pc, #448]	; (800128c <HAL_SD_MspInit+0x1e0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	f040 80da 	bne.w	8001284 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	4a6d      	ldr	r2, [pc, #436]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 80010da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010de:	6453      	str	r3, [r2, #68]	; 0x44
 80010e0:	4b6b      	ldr	r3, [pc, #428]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4b67      	ldr	r3, [pc, #412]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a66      	ldr	r2, [pc, #408]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b64      	ldr	r3, [pc, #400]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b60      	ldr	r3, [pc, #384]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a5f      	ldr	r2, [pc, #380]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b5d      	ldr	r3, [pc, #372]	; (8001290 <HAL_SD_MspInit+0x1e4>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001124:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112e:	2301      	movs	r3, #1
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001136:	230c      	movs	r3, #12
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4854      	ldr	r0, [pc, #336]	; (8001294 <HAL_SD_MspInit+0x1e8>)
 8001142:	f001 f9ab 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001158:	230c      	movs	r3, #12
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	484c      	ldr	r0, [pc, #304]	; (8001294 <HAL_SD_MspInit+0x1e8>)
 8001164:	f001 f99a 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001168:	2304      	movs	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001178:	230c      	movs	r3, #12
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4845      	ldr	r0, [pc, #276]	; (8001298 <HAL_SD_MspInit+0x1ec>)
 8001184:	f001 f98a 	bl	800249c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001188:	4b44      	ldr	r3, [pc, #272]	; (800129c <HAL_SD_MspInit+0x1f0>)
 800118a:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <HAL_SD_MspInit+0x1f4>)
 800118c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <HAL_SD_MspInit+0x1f0>)
 8001190:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001194:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_SD_MspInit+0x1f0>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b3f      	ldr	r3, [pc, #252]	; (800129c <HAL_SD_MspInit+0x1f0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011b2:	4b3a      	ldr	r3, [pc, #232]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011bc:	2220      	movs	r2, #32
 80011be:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011c8:	2204      	movs	r2, #4
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011ce:	2203      	movs	r2, #3
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011d2:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80011e2:	482e      	ldr	r0, [pc, #184]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011e4:	f000 fdbc 	bl	8001d60 <HAL_DMA_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80011ee:	f7ff ff2b 	bl	8001048 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a29      	ldr	r2, [pc, #164]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
 80011f8:	4a28      	ldr	r2, [pc, #160]	; (800129c <HAL_SD_MspInit+0x1f0>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <HAL_SD_MspInit+0x1fc>)
 8001202:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800120a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001226:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 800122a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001232:	2220      	movs	r2, #32
 8001234:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 800123e:	2204      	movs	r2, #4
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001244:	2203      	movs	r2, #3
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 800124a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001252:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 800125a:	f000 fd81 	bl	8001d60 <HAL_DMA_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001264:	f7ff fef0 	bl	8001048 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c
 800126e:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_SD_MspInit+0x1f8>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2105      	movs	r1, #5
 8001278:	2031      	movs	r0, #49	; 0x31
 800127a:	f000 fd47 	bl	8001d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800127e:	2031      	movs	r0, #49	; 0x31
 8001280:	f000 fd60 	bl	8001d44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40012c00 	.word	0x40012c00
 8001290:	40023800 	.word	0x40023800
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	20005adc 	.word	0x20005adc
 80012a0:	40026458 	.word	0x40026458
 80012a4:	20005b4c 	.word	0x20005b4c
 80012a8:	400264a0 	.word	0x400264a0

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_UART_MspInit+0x84>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12b      	bne.n	8001326 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_UART_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001306:	23c0      	movs	r3, #192	; 0xc0
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001316:	2308      	movs	r3, #8
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_UART_MspInit+0x8c>)
 8001322:	f001 f8bb 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40011400 	.word	0x40011400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800

0800133c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	202d      	movs	r0, #45	; 0x2d
 8001352:	f000 fcdb 	bl	8001d0c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001356:	202d      	movs	r0, #45	; 0x2d
 8001358:	f000 fcf4 	bl	8001d44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_InitTick+0xa4>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_InitTick+0xa4>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6413      	str	r3, [r2, #64]	; 0x40
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_InitTick+0xa4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001378:	f107 0210 	add.w	r2, r7, #16
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f001 feb4 	bl	80030f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001388:	f001 fe8a 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 800138c:	4603      	mov	r3, r0
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <HAL_InitTick+0xa8>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9b      	lsrs	r3, r3, #18
 800139c:	3b01      	subs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_InitTick+0xac>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_InitTick+0xb0>)
 80013a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_InitTick+0xac>)
 80013a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ac:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_InitTick+0xac>)
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_InitTick+0xac>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_InitTick+0xac>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <HAL_InitTick+0xac>)
 80013c2:	f003 f9f6 	bl	80047b2 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d104      	bne.n	80013d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <HAL_InitTick+0xac>)
 80013ce:	f003 fa49 	bl	8004864 <HAL_TIM_Base_Start_IT>
 80013d2:	4603      	mov	r3, r0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3730      	adds	r7, #48	; 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	431bde83 	.word	0x431bde83
 80013e8:	20005c78 	.word	0x20005c78
 80013ec:	40002000 	.word	0x40002000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001422:	f003 fa8f 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20005c78 	.word	0x20005c78

08001430 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <SDIO_IRQHandler+0x10>)
 8001436:	f002 f903 	bl	8003640 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20005bac 	.word	0x20005bac

08001444 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA2_Stream3_IRQHandler+0x10>)
 800144a:	f000 fdb1 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20005adc 	.word	0x20005adc

08001458 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA2_Stream6_IRQHandler+0x10>)
 800145e:	f000 fda7 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20005b4c 	.word	0x20005b4c

0800146c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00a      	b.n	8001494 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800147e:	f3af 8000 	nop.w
 8001482:	4601      	mov	r1, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	b2ca      	uxtb	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf0      	blt.n	800147e <_read+0x12>
	}

return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ce:	605a      	str	r2, [r3, #4]
	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_isatty>:

int _isatty(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	return 1;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f00c f9bc 	bl	800d8bc <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20020000 	.word	0x20020000
 8001570:	00000400 	.word	0x00000400
 8001574:	200000c8 	.word	0x200000c8
 8001578:	20007e58 	.word	0x20007e58

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <clear_buffer>:
uint32_t total, free_space;

/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	e007      	b.n	80015bc <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 80015ac:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <clear_buffer+0x30>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3301      	adds	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b63      	cmp	r3, #99	; 0x63
 80015c0:	ddf4      	ble.n	80015ac <clear_buffer+0xc>
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	200000cc 	.word	0x200000cc

080015d4 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80015d8:	2200      	movs	r2, #0
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <zerg_mount+0x28>)
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <zerg_mount+0x2c>)
 80015de:	f006 fd21 	bl	8008024 <f_mount>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <zerg_mount+0x1c>
	{
		printf("Error Mounting SD Card\r\n");
 80015e8:	4806      	ldr	r0, [pc, #24]	; (8001604 <zerg_mount+0x30>)
 80015ea:	f00c fb81 	bl	800dcf0 <puts>
	}
	else
	{
		printf("SD card mounted successfully!\r\n");
	}
}
 80015ee:	e002      	b.n	80015f6 <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <zerg_mount+0x34>)
 80015f2:	f00c fb7d 	bl	800dcf0 <puts>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20005d9c 	.word	0x20005d9c
 8001600:	20006dd0 	.word	0x20006dd0
 8001604:	0800ea2c 	.word	0x0800ea2c
 8001608:	0800ea44 	.word	0x0800ea44

0800160c <zerg_format>:
/*--------------------------------------------------------------------------------------------------------------*/
// Форматируем SD-карту / Format SD card
void zerg_format(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
	// fr = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, buffer, sizeof(buffer));
	// fr = f_mkfs("0:", FM_ANY, 0, buffer, sizeof(buffer));
	FRESULT fr;
	fr = f_mkfs(&path, FM_ANY, 0, buffer, sizeof(buffer));
 8001612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <zerg_format+0x3c>)
 800161a:	2200      	movs	r2, #0
 800161c:	2107      	movs	r1, #7
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <zerg_format+0x40>)
 8001620:	f007 ffbe 	bl	80095a0 <f_mkfs>
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
	if (fr != FR_OK)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <zerg_format+0x2e>
	{
		printf("Error to format SD-card!\r\n");
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <zerg_format+0x44>)
 8001630:	f00c fb5e 	bl	800dcf0 <puts>
		Error_Handler();
 8001634:	f7ff fd08 	bl	8001048 <Error_Handler>
	}
	else
	{
		printf("SD-card formated successfully!\r\n");
	}
}
 8001638:	e002      	b.n	8001640 <zerg_format+0x34>
		printf("SD-card formated successfully!\r\n");
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <zerg_format+0x48>)
 800163c:	f00c fb58 	bl	800dcf0 <puts>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000cc 	.word	0x200000cc
 800164c:	20000000 	.word	0x20000000
 8001650:	0800ea64 	.word	0x0800ea64
 8001654:	0800ea80 	.word	0x0800ea80

08001658 <zerg_open>:
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем файл для записи если не существует то, создаем его! / Open file for writing (Create)
void zerg_open(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	if (f_open(&SDFile, (char*)name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <zerg_open+0x30>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	220a      	movs	r2, #10
 8001662:	4619      	mov	r1, r3
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <zerg_open+0x34>)
 8001666:	f006 fd41 	bl	80080ec <f_open>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <zerg_open+0x20>
	{
		printf("Error openning file\r\n");
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <zerg_open+0x38>)
 8001672:	f00c fb3d 	bl	800dcf0 <puts>
	}
	else
	{
		printf("File %s Openned Successfully!\r\n",name);
	}
}
 8001676:	e005      	b.n	8001684 <zerg_open+0x2c>
		printf("File %s Openned Successfully!\r\n",name);
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <zerg_open+0x30>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <zerg_open+0x3c>)
 8001680:	f00c fab0 	bl	800dbe4 <iprintf>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000014 	.word	0x20000014
 800168c:	20005da0 	.word	0x20005da0
 8001690:	0800eaa0 	.word	0x0800eaa0
 8001694:	0800eab8 	.word	0x0800eab8

08001698 <zerg_write>:
/*--------------------------------------------------------------------------------------------------------------*/
// Запись данных в файл / Write data to the text file
void zerg_write(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	res = f_write(&SDFile, wtext, strlen((char *)wtext),
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <zerg_write+0x58>)
 800169e:	f7fe fd97 	bl	80001d0 <strlen>
 80016a2:	4602      	mov	r2, r0
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <zerg_write+0x5c>)
 80016a6:	4912      	ldr	r1, [pc, #72]	; (80016f0 <zerg_write+0x58>)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <zerg_write+0x60>)
 80016aa:	f007 f880 	bl	80087ae <f_write>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <zerg_write+0x64>)
 80016b4:	701a      	strb	r2, [r3, #0]
				  (void *)&byteswritten);
	if ((byteswritten == 0) || (res != FR_OK))
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <zerg_write+0x5c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <zerg_write+0x2e>
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <zerg_write+0x64>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <zerg_write+0x40>
	{
		printf("Failed to write file!\r\n");
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <zerg_write+0x68>)
 80016c8:	f00c fb12 	bl	800dcf0 <puts>
		f_close(&SDFile);
 80016cc:	480a      	ldr	r0, [pc, #40]	; (80016f8 <zerg_write+0x60>)
 80016ce:	f007 faba 	bl	8008c46 <f_close>
		clear_buffer();
 80016d2:	f7ff ff65 	bl	80015a0 <clear_buffer>
 80016d6:	e008      	b.n	80016ea <zerg_write+0x52>
	}
	else
	{
		printf("File written successfully\r\n");
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <zerg_write+0x6c>)
 80016da:	f00c fb09 	bl	800dcf0 <puts>
		f_close(&SDFile);
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <zerg_write+0x60>)
 80016e0:	f007 fab1 	bl	8008c46 <f_close>
		clear_buffer();
 80016e4:	f7ff ff5c 	bl	80015a0 <clear_buffer>
	}
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000020 	.word	0x20000020
 80016f4:	20005cc4 	.word	0x20005cc4
 80016f8:	20005da0 	.word	0x20005da0
 80016fc:	20005d90 	.word	0x20005d90
 8001700:	0800ead8 	.word	0x0800ead8
 8001704:	0800eaf0 	.word	0x0800eaf0

08001708 <zerg_read>:
/*--------------------------------------------------------------------------------------------------------------*/
// Считываем данные из файла / Reading data from file
void zerg_read(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	f_open(&SDFile, (char*)name, FA_READ);
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <zerg_read+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	4619      	mov	r1, r3
 8001714:	4816      	ldr	r0, [pc, #88]	; (8001770 <zerg_read+0x68>)
 8001716:	f006 fce9 	bl	80080ec <f_open>
	memset(rtext, 0, sizeof(rtext));
 800171a:	2264      	movs	r2, #100	; 0x64
 800171c:	2100      	movs	r1, #0
 800171e:	4815      	ldr	r0, [pc, #84]	; (8001774 <zerg_read+0x6c>)
 8001720:	f00c f9fd 	bl	800db1e <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT *)&bytesread);
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <zerg_read+0x70>)
 8001726:	2264      	movs	r2, #100	; 0x64
 8001728:	4912      	ldr	r1, [pc, #72]	; (8001774 <zerg_read+0x6c>)
 800172a:	4811      	ldr	r0, [pc, #68]	; (8001770 <zerg_read+0x68>)
 800172c:	f006 feb1 	bl	8008492 <f_read>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <zerg_read+0x74>)
 8001736:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK))
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <zerg_read+0x70>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <zerg_read+0x40>
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <zerg_read+0x74>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <zerg_read+0x48>
	{
		printf("Failed to read file!\r\n");
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <zerg_read+0x78>)
 800174a:	f00c fad1 	bl	800dcf0 <puts>
 800174e:	e006      	b.n	800175e <zerg_read+0x56>
	}
	else
	{
		//printf("File *%s* readed successfully! \n", name);
		printf("File *%s* has content it is; %s\r\n",name, (char *)rtext);
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <zerg_read+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <zerg_read+0x6c>)
 8001756:	4619      	mov	r1, r3
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <zerg_read+0x7c>)
 800175a:	f00c fa43 	bl	800dbe4 <iprintf>
	}
	f_close(&SDFile);
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <zerg_read+0x68>)
 8001760:	f007 fa71 	bl	8008c46 <f_close>
	clear_buffer();
 8001764:	f7ff ff1c 	bl	80015a0 <clear_buffer>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000014 	.word	0x20000014
 8001770:	20005da0 	.word	0x20005da0
 8001774:	20005cf0 	.word	0x20005cf0
 8001778:	20005ccc 	.word	0x20005ccc
 800177c:	20005d90 	.word	0x20005d90
 8001780:	0800eb0c 	.word	0x0800eb0c
 8001784:	0800eb24 	.word	0x0800eb24

08001788 <zerg_add_data>:
//		return i;
//	}
/*--------------------------------------------------------------------------------------------------------------*/
// Дописываем данные в существующий файл / Adding data to an existing file
void zerg_add_data(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	printf("Now we will try to add same information! \n");
 800178e:	482d      	ldr	r0, [pc, #180]	; (8001844 <zerg_add_data+0xbc>)
 8001790:	f00c faae 	bl	800dcf0 <puts>
	res = f_open(&SDFile, (char*)name, FA_OPEN_APPEND | FA_WRITE);
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <zerg_add_data+0xc0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2232      	movs	r2, #50	; 0x32
 800179a:	4619      	mov	r1, r3
 800179c:	482b      	ldr	r0, [pc, #172]	; (800184c <zerg_add_data+0xc4>)
 800179e:	f006 fca5 	bl	80080ec <f_open>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <zerg_add_data+0xc8>)
 80017a8:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
 80017aa:	4b29      	ldr	r3, [pc, #164]	; (8001850 <zerg_add_data+0xc8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <zerg_add_data+0x3c>
	{
		printf("Error no %d in opening file *%s*\n", res, name);
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <zerg_add_data+0xc8>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <zerg_add_data+0xc0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4825      	ldr	r0, [pc, #148]	; (8001854 <zerg_add_data+0xcc>)
 80017c0:	f00c fa10 	bl	800dbe4 <iprintf>
	}
	else
	{
		//printf("File *%s* is opened. Now we will add same information! \n", name);
	}
	int len = f_size(&SDFile);
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <zerg_add_data+0xc4>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	607b      	str	r3, [r7, #4]
	if (len != 0)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <zerg_add_data+0x4e>
		len += 2;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3302      	adds	r3, #2
 80017d4:	607b      	str	r3, [r7, #4]
	f_lseek(&SDFile, len);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4619      	mov	r1, r3
 80017da:	481c      	ldr	r0, [pc, #112]	; (800184c <zerg_add_data+0xc4>)
 80017dc:	f007 fa62 	bl	8008ca4 <f_lseek>
	res = f_write(&SDFile, addtext, sizeof(addtext), (void *)&byteswritten);
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <zerg_add_data+0xd0>)
 80017e2:	2210      	movs	r2, #16
 80017e4:	491d      	ldr	r1, [pc, #116]	; (800185c <zerg_add_data+0xd4>)
 80017e6:	4819      	ldr	r0, [pc, #100]	; (800184c <zerg_add_data+0xc4>)
 80017e8:	f006 ffe1 	bl	80087ae <f_write>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <zerg_add_data+0xc8>)
 80017f2:	701a      	strb	r2, [r3, #0]
	if ((byteswritten > 0) && (res == FR_OK))
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <zerg_add_data+0xd0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <zerg_add_data+0x80>
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <zerg_add_data+0xc8>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <zerg_add_data+0x80>

		clear_buffer();
 8001804:	f7ff fecc 	bl	80015a0 <clear_buffer>
	{
		printf("Information was added successfully in %s\n", name);
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <zerg_add_data+0xc0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <zerg_add_data+0xd8>)
 8001810:	f00c f9e8 	bl	800dbe4 <iprintf>
	}
	/* Close file */
	res = f_close(&SDFile);
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <zerg_add_data+0xc4>)
 8001816:	f007 fa16 	bl	8008c46 <f_close>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <zerg_add_data+0xc8>)
 8001820:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <zerg_add_data+0xc8>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <zerg_add_data+0xb4>
	{
		printf("Error no %d in closing file *%s*\n", res, name);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <zerg_add_data+0xc8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4619      	mov	r1, r3
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <zerg_add_data+0xc0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <zerg_add_data+0xdc>)
 8001838:	f00c f9d4 	bl	800dbe4 <iprintf>
	}
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800eb48 	.word	0x0800eb48
 8001848:	20000014 	.word	0x20000014
 800184c:	20005da0 	.word	0x20005da0
 8001850:	20005d90 	.word	0x20005d90
 8001854:	0800eb74 	.word	0x0800eb74
 8001858:	20005cc4 	.word	0x20005cc4
 800185c:	2000002c 	.word	0x2000002c
 8001860:	0800eb98 	.word	0x0800eb98
 8001864:	0800ebc4 	.word	0x0800ebc4

08001868 <zerg_creat_folder>:
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем папку / Creating a folder
void zerg_creat_folder(char *folder_name)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	res = f_mkdir((char*)folder_name);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f007 fd81 	bl	8009378 <f_mkdir>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <zerg_creat_folder+0x3c>)
 800187c:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK)
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <zerg_creat_folder+0x3c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d104      	bne.n	8001890 <zerg_creat_folder+0x28>
	{
		printf("Folder %s has been created successfully \n", folder_name);
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <zerg_creat_folder+0x40>)
 800188a:	f00c f9ab 	bl	800dbe4 <iprintf>
	else
	{
		printf("Eerror no %d in creating directory, perhaps it exists!\n", res);
		// send_uart(buffer);
	}
}
 800188e:	e005      	b.n	800189c <zerg_creat_folder+0x34>
		printf("Eerror no %d in creating directory, perhaps it exists!\n", res);
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <zerg_creat_folder+0x3c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <zerg_creat_folder+0x44>)
 8001898:	f00c f9a4 	bl	800dbe4 <iprintf>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20005d90 	.word	0x20005d90
 80018a8:	0800ebe8 	.word	0x0800ebe8
 80018ac:	0800ec14 	.word	0x0800ec14

080018b0 <zerg_get_free_space>:
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Узнать количество свободного места на SD карте / Check free space
void zerg_get_free_space(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 80018b4:	4a22      	ldr	r2, [pc, #136]	; (8001940 <zerg_get_free_space+0x90>)
 80018b6:	4923      	ldr	r1, [pc, #140]	; (8001944 <zerg_get_free_space+0x94>)
 80018b8:	4823      	ldr	r0, [pc, #140]	; (8001948 <zerg_get_free_space+0x98>)
 80018ba:	f007 fca1 	bl	8009200 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <zerg_get_free_space+0x90>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	3b02      	subs	r3, #2
 80018c6:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <zerg_get_free_space+0x90>)
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	8952      	ldrh	r2, [r2, #10]
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe ff41 	bl	8000758 <__aeabi_ui2d>
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <zerg_get_free_space+0x9c>)
 80018dc:	f7fe fcd0 	bl	8000280 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7fe ffb0 	bl	800084c <__aeabi_d2uiz>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a18      	ldr	r2, [pc, #96]	; (8001950 <zerg_get_free_space+0xa0>)
 80018f0:	6013      	str	r3, [r2, #0]
	printf("SD CARD Total Size: \t%lu\n", total);
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <zerg_get_free_space+0xa0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4619      	mov	r1, r3
 80018f8:	4816      	ldr	r0, [pc, #88]	; (8001954 <zerg_get_free_space+0xa4>)
 80018fa:	f00c f973 	bl	800dbe4 <iprintf>
	// send_uart(buffer);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <zerg_get_free_space+0x90>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	895b      	ldrh	r3, [r3, #10]
 8001904:	461a      	mov	r2, r3
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <zerg_get_free_space+0x94>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fb03 f302 	mul.w	r3, r3, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe ff22 	bl	8000758 <__aeabi_ui2d>
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <zerg_get_free_space+0x9c>)
 800191a:	f7fe fcb1 	bl	8000280 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7fe ff91 	bl	800084c <__aeabi_d2uiz>
 800192a:	4603      	mov	r3, r0
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <zerg_get_free_space+0xa8>)
 800192e:	6013      	str	r3, [r2, #0]
	printf("SD CARD Free Space: \t%lu\n", free_space);
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <zerg_get_free_space+0xa8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	4809      	ldr	r0, [pc, #36]	; (800195c <zerg_get_free_space+0xac>)
 8001938:	f00c f954 	bl	800dbe4 <iprintf>
	// send_uart(buffer);
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20005d88 	.word	0x20005d88
 8001944:	20005cc0 	.word	0x20005cc0
 8001948:	0800ecec 	.word	0x0800ecec
 800194c:	3fe00000 	.word	0x3fe00000
 8001950:	20005d8c 	.word	0x20005d8c
 8001954:	0800ecf0 	.word	0x0800ecf0
 8001958:	20005cd4 	.word	0x20005cd4
 800195c:	0800ed0c 	.word	0x0800ed0c

08001960 <zerg_get_file_info>:
/*--------------------------------------------------------------------------------------------------------------*/
// Получить сведения о файле / Get file Information
void zerg_get_file_info(char *name)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b085      	sub	sp, #20
 8001964:	af02      	add	r7, sp, #8
 8001966:	6078      	str	r0, [r7, #4]
	res = f_stat(name, &fileinfo);
 8001968:	493d      	ldr	r1, [pc, #244]	; (8001a60 <zerg_get_file_info+0x100>)
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f007 fc08 	bl	8009180 <f_stat>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <zerg_get_file_info+0x104>)
 8001976:	701a      	strb	r2, [r3, #0]
	switch (res)
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <zerg_get_file_info+0x104>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <zerg_get_file_info+0x26>
 8001980:	2b04      	cmp	r3, #4
 8001982:	d05d      	beq.n	8001a40 <zerg_get_file_info+0xe0>
 8001984:	e061      	b.n	8001a4a <zerg_get_file_info+0xea>
	{
	case FR_OK:

		printf("Below are the details of the *%s* \nSize: %lu\n", name, fileinfo.fsize);
 8001986:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <zerg_get_file_info+0x100>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4836      	ldr	r0, [pc, #216]	; (8001a68 <zerg_get_file_info+0x108>)
 8001990:	f00c f928 	bl	800dbe4 <iprintf>
		// send_uart(buffer);
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 8001994:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <zerg_get_file_info+0x100>)
 8001996:	889b      	ldrh	r3, [r3, #4]
 8001998:	0a5b      	lsrs	r3, r3, #9
 800199a:	b29b      	uxth	r3, r3
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 800199c:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 80019a0:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <zerg_get_file_info+0x100>)
 80019a2:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	f003 020f 	and.w	r2, r3, #15
			   (fileinfo.fdate >> 9) + 1980, fileinfo.fdate >> 5 & 15, fileinfo.fdate & 31,
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <zerg_get_file_info+0x100>)
 80019ae:	889b      	ldrh	r3, [r3, #4]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80019b0:	f003 001f 	and.w	r0, r3, #31
			   fileinfo.ftime >> 11, fileinfo.ftime >> 5 & 63);
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <zerg_get_file_info+0x100>)
 80019b6:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80019b8:	0adb      	lsrs	r3, r3, #11
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	461c      	mov	r4, r3
			   fileinfo.ftime >> 11, fileinfo.ftime >> 5 & 63);
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <zerg_get_file_info+0x100>)
 80019c0:	88db      	ldrh	r3, [r3, #6]
		printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9400      	str	r4, [sp, #0]
 80019ce:	4603      	mov	r3, r0
 80019d0:	4826      	ldr	r0, [pc, #152]	; (8001a6c <zerg_get_file_info+0x10c>)
 80019d2:	f00c f907 	bl	800dbe4 <iprintf>
		// end_uart(buffer);
		printf("Attributes: %c%c%c%c%c\n",
			   (fileinfo.fattrib & AM_DIR) ? 'D' : '-',
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <zerg_get_file_info+0x100>)
 80019d8:	7a1b      	ldrb	r3, [r3, #8]
 80019da:	f003 0310 	and.w	r3, r3, #16
		printf("Attributes: %c%c%c%c%c\n",
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <zerg_get_file_info+0x86>
 80019e2:	2144      	movs	r1, #68	; 0x44
 80019e4:	e000      	b.n	80019e8 <zerg_get_file_info+0x88>
 80019e6:	212d      	movs	r1, #45	; 0x2d
			   (fileinfo.fattrib & AM_RDO) ? 'R' : '-',
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <zerg_get_file_info+0x100>)
 80019ea:	7a1b      	ldrb	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
		printf("Attributes: %c%c%c%c%c\n",
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <zerg_get_file_info+0x98>
 80019f4:	2052      	movs	r0, #82	; 0x52
 80019f6:	e000      	b.n	80019fa <zerg_get_file_info+0x9a>
 80019f8:	202d      	movs	r0, #45	; 0x2d
			   (fileinfo.fattrib & AM_HID) ? 'H' : '-',
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <zerg_get_file_info+0x100>)
 80019fc:	7a1b      	ldrb	r3, [r3, #8]
 80019fe:	f003 0302 	and.w	r3, r3, #2
		printf("Attributes: %c%c%c%c%c\n",
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <zerg_get_file_info+0xaa>
 8001a06:	2448      	movs	r4, #72	; 0x48
 8001a08:	e000      	b.n	8001a0c <zerg_get_file_info+0xac>
 8001a0a:	242d      	movs	r4, #45	; 0x2d
			   (fileinfo.fattrib & AM_SYS) ? 'S' : '-',
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <zerg_get_file_info+0x100>)
 8001a0e:	7a1b      	ldrb	r3, [r3, #8]
 8001a10:	f003 0304 	and.w	r3, r3, #4
		printf("Attributes: %c%c%c%c%c\n",
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <zerg_get_file_info+0xbc>
 8001a18:	2353      	movs	r3, #83	; 0x53
 8001a1a:	e000      	b.n	8001a1e <zerg_get_file_info+0xbe>
 8001a1c:	232d      	movs	r3, #45	; 0x2d
			   (fileinfo.fattrib & AM_ARC) ? 'A' : '-');
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <zerg_get_file_info+0x100>)
 8001a20:	7a12      	ldrb	r2, [r2, #8]
 8001a22:	f002 0220 	and.w	r2, r2, #32
		printf("Attributes: %c%c%c%c%c\n",
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	d001      	beq.n	8001a2e <zerg_get_file_info+0xce>
 8001a2a:	2241      	movs	r2, #65	; 0x41
 8001a2c:	e000      	b.n	8001a30 <zerg_get_file_info+0xd0>
 8001a2e:	222d      	movs	r2, #45	; 0x2d
 8001a30:	9201      	str	r2, [sp, #4]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	4623      	mov	r3, r4
 8001a36:	4602      	mov	r2, r0
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <zerg_get_file_info+0x110>)
 8001a3a:	f00c f8d3 	bl	800dbe4 <iprintf>
		// send_uart(buffer);
		break;
 8001a3e:	e00b      	b.n	8001a58 <zerg_get_file_info+0xf8>

	case FR_NO_FILE:
		printf("*%s* does not exist.\n", name);
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	480c      	ldr	r0, [pc, #48]	; (8001a74 <zerg_get_file_info+0x114>)
 8001a44:	f00c f8ce 	bl	800dbe4 <iprintf>
		// send_uart(buffer);
		break;
 8001a48:	e006      	b.n	8001a58 <zerg_get_file_info+0xf8>

	default:
		printf("An error occurred. (%d)\n", res);
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <zerg_get_file_info+0x104>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <zerg_get_file_info+0x118>)
 8001a52:	f00c f8c7 	bl	800dbe4 <iprintf>
		// send_uart(buffer);
	}
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	20005cd8 	.word	0x20005cd8
 8001a64:	20005d90 	.word	0x20005d90
 8001a68:	0800ed28 	.word	0x0800ed28
 8001a6c:	0800ed58 	.word	0x0800ed58
 8001a70:	0800ed7c 	.word	0x0800ed7c
 8001a74:	0800ed94 	.word	0x0800ed94
 8001a78:	0800edac 	.word	0x0800edac

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a82:	490e      	ldr	r1, [pc, #56]	; (8001abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a98:	4c0b      	ldr	r4, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aa6:	f7ff fd69 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f00c f803 	bl	800dab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7ff f8b7 	bl	8000c20 <main>
  bx  lr    
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001ac0:	0800f00c 	.word	0x0800f00c
  ldr r2, =_sbss
 8001ac4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001ac8:	20007e58 	.word	0x20007e58

08001acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_Init+0x40>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_Init+0x40>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x40>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f8fc 	bl	8001cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f7ff fc1c 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff faa6 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000040 	.word	0x20000040
 8001b38:	20005d94 	.word	0x20005d94

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20005d94 	.word	0x20005d94

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b6c:	d005      	beq.n	8001b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_Delay+0x44>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7a:	bf00      	nop
 8001b7c:	f7ff ffde 	bl	8001b3c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8f7      	bhi.n	8001b7c <HAL_Delay+0x28>
  {
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000040 	.word	0x20000040

08001b9c <__NVIC_SetPriorityGrouping>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ff4c 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1e:	f7ff ff61 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f7ff ffb1 	bl	8001c90 <NVIC_EncodePriority>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff80 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff54 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff fee6 	bl	8001b3c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e099      	b.n	8001eb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9c:	e00f      	b.n	8001dbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d9e:	f7ff fecd 	bl	8001b3c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d908      	bls.n	8001dbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e078      	b.n	8001eb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e8      	bne.n	8001d9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_DMA_Init+0x158>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d107      	bne.n	8001e28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4313      	orrs	r3, r2
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f023 0307 	bic.w	r3, r3, #7
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d117      	bne.n	8001e82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fa9d 	bl	80023a4 <DMA_CheckFifoParam>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e016      	b.n	8001eb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fa54 	bl	8002338 <DMA_CalcBaseAndBitshift>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	223f      	movs	r2, #63	; 0x3f
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	f010803f 	.word	0xf010803f

08001ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_DMA_Start_IT+0x26>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e040      	b.n	8001f64 <HAL_DMA_Start_IT+0xa8>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d12f      	bne.n	8001f56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f9e6 	bl	80022dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	223f      	movs	r2, #63	; 0x3f
 8001f16:	409a      	lsls	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0216 	orr.w	r2, r2, #22
 8001f2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0208 	orr.w	r2, r2, #8
 8001f42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e005      	b.n	8001f62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00c      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fbc:	4b92      	ldr	r3, [pc, #584]	; (8002208 <HAL_DMA_IRQHandler+0x258>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a92      	ldr	r2, [pc, #584]	; (800220c <HAL_DMA_IRQHandler+0x25c>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	2208      	movs	r2, #8
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01a      	beq.n	800201c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2208      	movs	r2, #8
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2201      	movs	r2, #1
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2201      	movs	r2, #1
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0202 	orr.w	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2204      	movs	r2, #4
 8002058:	409a      	lsls	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d012      	beq.n	8002088 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00b      	beq.n	8002088 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2204      	movs	r2, #4
 8002076:	409a      	lsls	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f043 0204 	orr.w	r2, r3, #4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	2210      	movs	r2, #16
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d043      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d03c      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2210      	movs	r2, #16
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d018      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d024      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
 80020de:	e01f      	b.n	8002120 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e016      	b.n	8002120 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2220      	movs	r2, #32
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 808e 	beq.w	800224e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8086 	beq.w	800224e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2220      	movs	r2, #32
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b05      	cmp	r3, #5
 8002158:	d136      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0216 	bic.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_DMA_IRQHandler+0x1da>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	223f      	movs	r2, #63	; 0x3f
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d07d      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
        }
        return;
 80021c6:	e078      	b.n	80022ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01c      	beq.n	8002210 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d108      	bne.n	80021f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d030      	beq.n	800224e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e02b      	b.n	800224e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d027      	beq.n	800224e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
 8002206:	e022      	b.n	800224e <HAL_DMA_IRQHandler+0x29e>
 8002208:	2000001c 	.word	0x2000001c
 800220c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0210 	bic.w	r2, r2, #16
 800222c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	2b00      	cmp	r3, #0
 8002254:	d032      	beq.n	80022bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d022      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2205      	movs	r2, #5
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0201 	bic.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	429a      	cmp	r2, r3
 8002284:	d307      	bcc.n	8002296 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f2      	bne.n	800227a <HAL_DMA_IRQHandler+0x2ca>
 8002294:	e000      	b.n	8002298 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002296:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
 80022b8:	e000      	b.n	80022bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80022ba:	bf00      	nop
    }
  }
}
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop

080022c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b40      	cmp	r3, #64	; 0x40
 8002308:	d108      	bne.n	800231c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800231a:	e007      	b.n	800232c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3b10      	subs	r3, #16
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <DMA_CalcBaseAndBitshift+0x64>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d909      	bls.n	800237a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	1d1a      	adds	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	659a      	str	r2, [r3, #88]	; 0x58
 8002378:	e007      	b.n	800238a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	aaaaaaab 	.word	0xaaaaaaab
 80023a0:	0800eea8 	.word	0x0800eea8

080023a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11f      	bne.n	80023fe <DMA_CheckFifoParam+0x5a>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d856      	bhi.n	8002472 <DMA_CheckFifoParam+0xce>
 80023c4:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <DMA_CheckFifoParam+0x28>)
 80023c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ca:	bf00      	nop
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023ef 	.word	0x080023ef
 80023d4:	080023dd 	.word	0x080023dd
 80023d8:	08002473 	.word	0x08002473
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d046      	beq.n	8002476 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ec:	e043      	b.n	8002476 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f6:	d140      	bne.n	800247a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fc:	e03d      	b.n	800247a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002406:	d121      	bne.n	800244c <DMA_CheckFifoParam+0xa8>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d837      	bhi.n	800247e <DMA_CheckFifoParam+0xda>
 800240e:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <DMA_CheckFifoParam+0x70>)
 8002410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002414:	08002425 	.word	0x08002425
 8002418:	0800242b 	.word	0x0800242b
 800241c:	08002425 	.word	0x08002425
 8002420:	0800243d 	.word	0x0800243d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      break;
 8002428:	e030      	b.n	800248c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d025      	beq.n	8002482 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243a:	e022      	b.n	8002482 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002444:	d11f      	bne.n	8002486 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244a:	e01c      	b.n	8002486 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d903      	bls.n	800245a <DMA_CheckFifoParam+0xb6>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d003      	beq.n	8002460 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002458:	e018      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      break;
 800245e:	e015      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00e      	beq.n	800248a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e00b      	b.n	800248a <DMA_CheckFifoParam+0xe6>
      break;
 8002472:	bf00      	nop
 8002474:	e00a      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e008      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e006      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e004      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e002      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;   
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <DMA_CheckFifoParam+0xe8>
      break;
 800248a:	bf00      	nop
    }
  } 
  
  return status; 
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e16b      	b.n	8002790 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 815a 	bne.w	800278a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80b4 	beq.w	800278a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b60      	ldr	r3, [pc, #384]	; (80027a8 <HAL_GPIO_Init+0x30c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a5f      	ldr	r2, [pc, #380]	; (80027a8 <HAL_GPIO_Init+0x30c>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <HAL_GPIO_Init+0x30c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a5b      	ldr	r2, [pc, #364]	; (80027ac <HAL_GPIO_Init+0x310>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_GPIO_Init+0x314>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02b      	beq.n	80026c2 <HAL_GPIO_Init+0x226>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <HAL_GPIO_Init+0x318>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d025      	beq.n	80026be <HAL_GPIO_Init+0x222>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a50      	ldr	r2, [pc, #320]	; (80027b8 <HAL_GPIO_Init+0x31c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_GPIO_Init+0x21e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4f      	ldr	r2, [pc, #316]	; (80027bc <HAL_GPIO_Init+0x320>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x21a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4e      	ldr	r2, [pc, #312]	; (80027c0 <HAL_GPIO_Init+0x324>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x216>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4d      	ldr	r2, [pc, #308]	; (80027c4 <HAL_GPIO_Init+0x328>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x212>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <HAL_GPIO_Init+0x32c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x20e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4b      	ldr	r2, [pc, #300]	; (80027cc <HAL_GPIO_Init+0x330>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x20a>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00e      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026a6:	2308      	movs	r3, #8
 80026a8:	e00c      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026aa:	2306      	movs	r3, #6
 80026ac:	e00a      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026ae:	2305      	movs	r3, #5
 80026b0:	e008      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026b2:	2304      	movs	r3, #4
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e004      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026c2:	2300      	movs	r3, #0
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f002 0203 	and.w	r2, r2, #3
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	4093      	lsls	r3, r2
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d4:	4935      	ldr	r1, [pc, #212]	; (80027ac <HAL_GPIO_Init+0x310>)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_GPIO_Init+0x334>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002706:	4a32      	ldr	r2, [pc, #200]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_GPIO_Init+0x334>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_GPIO_Init+0x334>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	f67f ae90 	bls.w	80024b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40021400 	.word	0x40021400
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40021c00 	.word	0x40021c00
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e264      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d075      	beq.n	8002912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002826:	4ba3      	ldr	r3, [pc, #652]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d00c      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002832:	4ba0      	ldr	r3, [pc, #640]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283a:	2b08      	cmp	r3, #8
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b9d      	ldr	r3, [pc, #628]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b99      	ldr	r3, [pc, #612]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05b      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d157      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e23f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b91      	ldr	r3, [pc, #580]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a8a      	ldr	r2, [pc, #552]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a87      	ldr	r2, [pc, #540]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 80028a0:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a83      	ldr	r2, [pc, #524]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a80      	ldr	r2, [pc, #512]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff f93c 	bl	8001b3c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff f938 	bl	8001b3c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e204      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xc0>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff f928 	bl	8001b3c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff f924 	bl	8001b3c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1f0      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xe8>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b62      	ldr	r3, [pc, #392]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002932:	2b08      	cmp	r3, #8
 8002934:	d11c      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b5f      	ldr	r3, [pc, #380]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e1c4      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4952      	ldr	r1, [pc, #328]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	e03a      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <HAL_RCC_OscConfig+0x2b0>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7ff f8dd 	bl	8001b3c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002986:	f7ff f8d9 	bl	8001b3c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e1a5      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4940      	ldr	r1, [pc, #256]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCC_OscConfig+0x2b0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7ff f8bc 	bl	8001b3c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c8:	f7ff f8b8 	bl	8001b3c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e184      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d030      	beq.n	8002a54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b30      	ldr	r3, [pc, #192]	; (8002abc <HAL_RCC_OscConfig+0x2b4>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff f89c 	bl	8001b3c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7ff f898 	bl	8001b3c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e164      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x200>
 8002a26:	e015      	b.n	8002a54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x2b4>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f885 	bl	8001b3c <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a36:	f7ff f881 	bl	8001b3c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e14d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a0 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_OscConfig+0x2b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d121      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_RCC_OscConfig+0x2b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <HAL_RCC_OscConfig+0x2b8>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7ff f847 	bl	8001b3c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCC_OscConfig+0x2ce>
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
 8002ac0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7ff f83a 	bl	8001b3c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e106      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_RCC_OscConfig+0x4e4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
 8002aea:	4b81      	ldr	r3, [pc, #516]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a80      	ldr	r2, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	e01c      	b.n	8002b32 <HAL_RCC_OscConfig+0x32a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x312>
 8002b00:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0c:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a77      	ldr	r2, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0x32a>
 8002b1a:	4b75      	ldr	r3, [pc, #468]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a74      	ldr	r2, [pc, #464]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a71      	ldr	r2, [pc, #452]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d015      	beq.n	8002b66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe ffff 	bl	8001b3c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fffb 	bl	8001b3c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0c5      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ee      	beq.n	8002b42 <HAL_RCC_OscConfig+0x33a>
 8002b64:	e014      	b.n	8002b90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe ffe9 	bl	8001b3c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe ffe5 	bl	8001b3c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0af      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a55      	ldr	r2, [pc, #340]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 809b 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bac:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d05c      	beq.n	8002c72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d141      	bne.n	8002c44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe ffb9 	bl	8001b3c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe ffb5 	bl	8001b3c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e081      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be0:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	019b      	lsls	r3, r3, #6
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	4937      	ldr	r1, [pc, #220]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe ff8e 	bl	8001b3c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe ff8a 	bl	8001b3c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e056      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x41c>
 8002c42:	e04e      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe ff77 	bl	8001b3c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe ff73 	bl	8001b3c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e03f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x44a>
 8002c70:	e037      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e032      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d028      	beq.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d121      	bne.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d11a      	bne.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cae:	4013      	ands	r3, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d111      	bne.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	42470060 	.word	0x42470060

08002cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d90c      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d044      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d119      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e067      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4934      	ldr	r1, [pc, #208]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de8:	f7fe fea8 	bl	8001b3c <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe fea4 	bl	8001b3c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e04f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d20c      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f821 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe fa4c 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	0800ee90 	.word	0x0800ee90
 8002ebc:	2000001c 	.word	0x2000001c
 8002ec0:	2000003c 	.word	0x2000003c

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d00d      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	f200 80bd 	bhi.w	8003068 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef6:	e0b7      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b61      	ldr	r3, [pc, #388]	; (8003080 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002efa:	60bb      	str	r3, [r7, #8]
       break;
 8002efc:	e0b7      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efe:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f00:	60bb      	str	r3, [r7, #8]
      break;
 8002f02:	e0b4      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f04:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d04d      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b58      	ldr	r3, [pc, #352]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	461a      	mov	r2, r3
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	ea02 0800 	and.w	r8, r2, r0
 8002f32:	ea03 0901 	and.w	r9, r3, r1
 8002f36:	4640      	mov	r0, r8
 8002f38:	4649      	mov	r1, r9
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	014b      	lsls	r3, r1, #5
 8002f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f48:	0142      	lsls	r2, r0, #5
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	ebb0 0008 	subs.w	r0, r0, r8
 8002f52:	eb61 0109 	sbc.w	r1, r1, r9
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	018b      	lsls	r3, r1, #6
 8002f60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f64:	0182      	lsls	r2, r0, #6
 8002f66:	1a12      	subs	r2, r2, r0
 8002f68:	eb63 0301 	sbc.w	r3, r3, r1
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	00d9      	lsls	r1, r3, #3
 8002f76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f7a:	00d0      	lsls	r0, r2, #3
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	eb12 0208 	adds.w	r2, r2, r8
 8002f84:	eb43 0309 	adc.w	r3, r3, r9
 8002f88:	f04f 0000 	mov.w	r0, #0
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	0259      	lsls	r1, r3, #9
 8002f92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f96:	0250      	lsls	r0, r2, #9
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	f7fd fc70 	bl	800088c <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e04a      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	099b      	lsrs	r3, r3, #6
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	ea02 0400 	and.w	r4, r2, r0
 8002fce:	ea03 0501 	and.w	r5, r3, r1
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	014b      	lsls	r3, r1, #5
 8002fe0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fe4:	0142      	lsls	r2, r0, #5
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	1b00      	subs	r0, r0, r4
 8002fec:	eb61 0105 	sbc.w	r1, r1, r5
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	018b      	lsls	r3, r1, #6
 8002ffa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ffe:	0182      	lsls	r2, r0, #6
 8003000:	1a12      	subs	r2, r2, r0
 8003002:	eb63 0301 	sbc.w	r3, r3, r1
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	00d9      	lsls	r1, r3, #3
 8003010:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003014:	00d0      	lsls	r0, r2, #3
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	1912      	adds	r2, r2, r4
 800301c:	eb45 0303 	adc.w	r3, r5, r3
 8003020:	f04f 0000 	mov.w	r0, #0
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	0299      	lsls	r1, r3, #10
 800302a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800302e:	0290      	lsls	r0, r2, #10
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f7fd fc24 	bl	800088c <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	60bb      	str	r3, [r7, #8]
      break;
 8003066:	e002      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800306a:	60bb      	str	r3, [r7, #8]
      break;
 800306c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306e:	68bb      	ldr	r3, [r7, #8]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	00f42400 	.word	0x00f42400
 8003084:	007a1200 	.word	0x007a1200

08003088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_GetHCLKFreq+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	2000001c 	.word	0x2000001c

080030a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a4:	f7ff fff0 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	0a9b      	lsrs	r3, r3, #10
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	0800eea0 	.word	0x0800eea0

080030c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030cc:	f7ff ffdc 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	0b5b      	lsrs	r3, r3, #13
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	4903      	ldr	r1, [pc, #12]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40023800 	.word	0x40023800
 80030ec:	0800eea0 	.word	0x0800eea0

080030f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	220f      	movs	r2, #15
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	08db      	lsrs	r3, r3, #3
 800312a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <HAL_RCC_GetClockConfig+0x60>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0207 	and.w	r2, r3, #7
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	601a      	str	r2, [r3, #0]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40023c00 	.word	0x40023c00

08003154 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e022      	b.n	80031ac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd ff97 	bl	80010ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f814 	bl	80031b4 <HAL_SD_InitCard>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00a      	b.n	80031ac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b08e      	sub	sp, #56	; 0x38
 80031b8:	af04      	add	r7, sp, #16
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80031d0:	2376      	movs	r3, #118	; 0x76
 80031d2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681d      	ldr	r5, [r3, #0]
 80031d8:	466c      	mov	r4, sp
 80031da:	f107 0314 	add.w	r3, r7, #20
 80031de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031e6:	f107 0308 	add.w	r3, r7, #8
 80031ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ec:	4628      	mov	r0, r5
 80031ee:	f002 f8a3 	bl	8005338 <SDIO_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80031f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e04c      	b.n	800329e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_SD_InitCard+0xf4>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 f8db 	bl	80053ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_SD_InitCard+0xf4>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f001 f804 	bl	8004228 <SD_PowerON>
 8003220:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e02e      	b.n	800329e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 ff25 	bl	8004090 <SD_InitCard>
 8003246:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e01b      	b.n	800329e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800326e:	4618      	mov	r0, r3
 8003270:	f002 f93e 	bl	80054f0 <SDMMC_CmdBlockLength>
 8003274:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00f      	beq.n	800329c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_SD_InitCard+0xf8>)
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3728      	adds	r7, #40	; 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bdb0      	pop	{r4, r5, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	422580a0 	.word	0x422580a0
 80032ac:	004005ff 	.word	0x004005ff

080032b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0c0      	b.n	800345a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 80b9 	bne.w	8003458 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	441a      	add	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d907      	bls.n	800330a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0a7      	b.n	800345a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2203      	movs	r2, #3
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a4c      	ldr	r2, [pc, #304]	; (8003464 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a4b      	ldr	r2, [pc, #300]	; (8003468 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800333c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2200      	movs	r2, #0
 8003344:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3380      	adds	r3, #128	; 0x80
 8003374:	4619      	mov	r1, r3
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	025b      	lsls	r3, r3, #9
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	f7fe fd9d 	bl	8001ebc <HAL_DMA_Start_IT>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d017      	beq.n	80033b8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003396:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a33      	ldr	r2, [pc, #204]	; (800346c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e050      	b.n	800345a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d002      	beq.n	80033cc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	025b      	lsls	r3, r3, #9
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	025b      	lsls	r3, r3, #9
 80033d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033d8:	2390      	movs	r3, #144	; 0x90
 80033da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80033dc:	2302      	movs	r3, #2
 80033de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f107 0210 	add.w	r2, r7, #16
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f002 f850 	bl	8005498 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d90a      	bls.n	8003414 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2282      	movs	r2, #130	; 0x82
 8003402:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800340a:	4618      	mov	r0, r3
 800340c:	f002 f8b4 	bl	8005578 <SDMMC_CmdReadMultiBlock>
 8003410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003412:	e009      	b.n	8003428 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2281      	movs	r2, #129	; 0x81
 8003418:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003420:	4618      	mov	r0, r3
 8003422:	f002 f887 	bl	8005534 <SDMMC_CmdReadSingleBlock>
 8003426:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d012      	beq.n	8003454 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a0e      	ldr	r2, [pc, #56]	; (800346c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e002      	b.n	800345a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3730      	adds	r7, #48	; 0x30
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	08003e9f 	.word	0x08003e9f
 8003468:	08003f11 	.word	0x08003f11
 800346c:	004005ff 	.word	0x004005ff
 8003470:	4225858c 	.word	0x4225858c

08003474 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0c5      	b.n	8003628 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f040 80be 	bne.w	8003626 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80034b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	441a      	add	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d907      	bls.n	80034ce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0ac      	b.n	8003628 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2203      	movs	r2, #3
 80034d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	4a4e      	ldr	r2, [pc, #312]	; (8003630 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80034f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	4a4d      	ldr	r2, [pc, #308]	; (8003634 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003500:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	2200      	movs	r2, #0
 8003508:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	2b01      	cmp	r3, #1
 8003510:	d002      	beq.n	8003518 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	025b      	lsls	r3, r3, #9
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d90a      	bls.n	8003534 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	22a0      	movs	r2, #160	; 0xa0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800352a:	4618      	mov	r0, r3
 800352c:	f002 f868 	bl	8005600 <SDMMC_CmdWriteMultiBlock>
 8003530:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003532:	e009      	b.n	8003548 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2290      	movs	r2, #144	; 0x90
 8003538:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003540:	4618      	mov	r0, r3
 8003542:	f002 f83b 	bl	80055bc <SDMMC_CmdWriteSingleBlock>
 8003546:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d012      	beq.n	8003574 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a39      	ldr	r2, [pc, #228]	; (8003638 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e059      	b.n	8003628 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3380      	adds	r3, #128	; 0x80
 80035aa:	461a      	mov	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	025b      	lsls	r3, r3, #9
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	f7fe fc83 	bl	8001ebc <HAL_DMA_Start_IT>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80035ca:	f023 0302 	bic.w	r3, r3, #2
 80035ce:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e018      	b.n	8003628 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	025b      	lsls	r3, r3, #9
 8003600:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003602:	2390      	movs	r3, #144	; 0x90
 8003604:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800360e:	2301      	movs	r3, #1
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f107 0210 	add.w	r2, r7, #16
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f001 ff3b 	bl	8005498 <SDIO_ConfigData>

      return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e000      	b.n	8003628 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3730      	adds	r7, #48	; 0x30
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	08003e75 	.word	0x08003e75
 8003634:	08003f11 	.word	0x08003f11
 8003638:	004005ff 	.word	0x004005ff
 800363c:	4225858c 	.word	0x4225858c

08003640 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_SD_IRQHandler+0x2e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fffd 	bl	8004666 <SD_Read_IT>
 800366c:	e165      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 808f 	beq.w	800379c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003686:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003696:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800369a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d039      	beq.n	800372a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <HAL_SD_IRQHandler+0x8a>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d011      	beq.n	80036ee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 ffb8 	bl	8005644 <SDMMC_CmdStopTransfer>
 80036d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f92f 	bl	800394c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <HAL_SD_IRQHandler+0xda>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f002 fc26 	bl	8005f6c <HAL_SD_RxCpltCallback>
 8003720:	e10b      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f002 fc18 	bl	8005f58 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003728:	e107      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8102 	beq.w	800393a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d011      	beq.n	8003764 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f001 ff7d 	bl	8005644 <SDMMC_CmdStopTransfer>
 800374a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8f4 	bl	800394c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 80e5 	bne.w	800393a <HAL_SD_IRQHandler+0x2fa>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 80df 	bne.w	800393a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0208 	bic.w	r2, r2, #8
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f002 fbdf 	bl	8005f58 <HAL_SD_TxCpltCallback>
}
 800379a:	e0ce      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_SD_IRQHandler+0x17c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 ffa7 	bl	8004708 <SD_Write_IT>
 80037ba:	e0be      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c2:	f240 233a 	movw	r3, #570	; 0x23a
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80b6 	beq.w	800393a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	f043 0202 	orr.w	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	f043 0208 	orr.w	r2, r3, #8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	f043 0208 	orr.w	r2, r3, #8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f240 723a 	movw	r2, #1850	; 0x73a
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003868:	f023 0302 	bic.w	r3, r3, #2
 800386c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f001 fee6 	bl	8005644 <SDMMC_CmdStopTransfer>
 8003878:	4602      	mov	r2, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f855 	bl	800394c <HAL_SD_ErrorCallback>
}
 80038a2:	e04a      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d045      	beq.n	800393a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <HAL_SD_IRQHandler+0x282>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <HAL_SD_IRQHandler+0x304>)
 80038c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fb4c 	bl	8001f6c <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d02f      	beq.n	800393a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fb68 	bl	8003fb4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80038e4:	e029      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <HAL_SD_IRQHandler+0x2ba>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d011      	beq.n	800391e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_SD_IRQHandler+0x308>)
 8003900:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fb30 	bl	8001f6c <HAL_DMA_Abort_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d013      	beq.n	800393a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fb83 	bl	8004022 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800391c:	e00d      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f002 fb06 	bl	8005f44 <HAL_SD_AbortCallback>
}
 8003938:	e7ff      	b.n	800393a <HAL_SD_IRQHandler+0x2fa>
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	08003fb5 	.word	0x08003fb5
 8003948:	08004023 	.word	0x08004023

0800394c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396e:	0f9b      	lsrs	r3, r3, #30
 8003970:	b2da      	uxtb	r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397a:	0e9b      	lsrs	r3, r3, #26
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	b2da      	uxtb	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398c:	0e1b      	lsrs	r3, r3, #24
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	b2da      	uxtb	r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800399e:	0c1b      	lsrs	r3, r3, #16
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c0:	0d1b      	lsrs	r3, r3, #20
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039de:	0bdb      	lsrs	r3, r3, #15
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f0:	0b9b      	lsrs	r3, r3, #14
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a02:	0b5b      	lsrs	r3, r3, #13
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a14:	0b1b      	lsrs	r3, r3, #12
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2200      	movs	r2, #0
 8003a26:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d163      	bne.n	8003af8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a34:	009a      	lsls	r2, r3, #2
 8003a36:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003a40:	0f92      	lsrs	r2, r2, #30
 8003a42:	431a      	orrs	r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4c:	0edb      	lsrs	r3, r3, #27
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5e:	0e1b      	lsrs	r3, r3, #24
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a70:	0d5b      	lsrs	r3, r3, #21
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a82:	0c9b      	lsrs	r3, r3, #18
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a94:	0bdb      	lsrs	r3, r3, #15
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	7e1b      	ldrb	r3, [r3, #24]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	2201      	movs	r2, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ac2:	fb02 f203 	mul.w	r2, r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	7a1b      	ldrb	r3, [r3, #8]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ae4:	0a52      	lsrs	r2, r2, #9
 8003ae6:	fb02 f203 	mul.w	r2, r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af4:	661a      	str	r2, [r3, #96]	; 0x60
 8003af6:	e031      	b.n	8003b5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d11d      	bne.n	8003b3c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	431a      	orrs	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	029a      	lsls	r2, r3, #10
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b30:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60
 8003b3a:	e00f      	b.n	8003b5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_SD_GetCardCSD+0x344>)
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e09d      	b.n	8003c98 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b60:	0b9b      	lsrs	r3, r3, #14
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b72:	09db      	lsrs	r3, r3, #7
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	0fdb      	lsrs	r3, r3, #31
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	0f5b      	lsrs	r3, r3, #29
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	0e9b      	lsrs	r3, r3, #26
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	0d9b      	lsrs	r3, r3, #22
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	0d5b      	lsrs	r3, r3, #21
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	0bdb      	lsrs	r3, r3, #15
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	0b9b      	lsrs	r3, r3, #14
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	0b5b      	lsrs	r3, r3, #13
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	0b1b      	lsrs	r3, r3, #12
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	0a9b      	lsrs	r3, r3, #10
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	004005ff 	.word	0x004005ff

08003ca8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b08e      	sub	sp, #56	; 0x38
 8003d04:	af04      	add	r7, sp, #16
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2203      	movs	r2, #3
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d02e      	beq.n	8003d7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d26:	d106      	bne.n	8003d36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
 8003d34:	e029      	b.n	8003d8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3c:	d10a      	bne.n	8003d54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fb28 	bl	8004394 <SD_WideBus_Enable>
 8003d44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
 8003d52:	e01a      	b.n	8003d8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fb65 	bl	800442a <SD_WideBus_Disable>
 8003d60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d6e:	e00c      	b.n	8003d8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d7c:	e005      	b.n	8003d8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003da8:	e01f      	b.n	8003dea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681d      	ldr	r5, [r3, #0]
 8003dd0:	466c      	mov	r4, sp
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de4:	4628      	mov	r0, r5
 8003de6:	f001 faa7 	bl	8005338 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 fb7c 	bl	80054f0 <SDMMC_CmdBlockLength>
 8003df8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3728      	adds	r7, #40	; 0x28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	004005ff 	.word	0x004005ff

08003e34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003e40:	f107 030c 	add.w	r3, r7, #12
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa7c 	bl	8004344 <SD_SendStatus>
 8003e4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	0a5b      	lsrs	r3, r3, #9
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003e6a:	693b      	ldr	r3, [r7, #16]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	2b82      	cmp	r3, #130	; 0x82
 8003eb2:	d111      	bne.n	8003ed8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 fbc3 	bl	8005644 <SDMMC_CmdStopTransfer>
 8003ebe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fd3a 	bl	800394c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0208 	bic.w	r2, r2, #8
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ef0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f002 f833 	bl	8005f6c <HAL_SD_RxCpltCallback>
#endif
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fe f9d0 	bl	80022c4 <HAL_DMA_GetError>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d03e      	beq.n	8003fa8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d002      	beq.n	8003f46 <SD_DMAError+0x36>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d12d      	bne.n	8003fa2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <SD_DMAError+0xa0>)
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003f5c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	f7ff ff62 	bl	8003e34 <HAL_SD_GetCardState>
 8003f70:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b06      	cmp	r3, #6
 8003f76:	d002      	beq.n	8003f7e <SD_DMAError+0x6e>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b05      	cmp	r3, #5
 8003f7c:	d10a      	bne.n	8003f94 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 fb5e 	bl	8005644 <SDMMC_CmdStopTransfer>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	f7ff fcd2 	bl	800394c <HAL_SD_ErrorCallback>
#endif
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	004005ff 	.word	0x004005ff

08003fb4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff ff31 	bl	8003e34 <HAL_SD_GetCardState>
 8003fd2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d002      	beq.n	8003fee <SD_DMATxAbort+0x3a>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d10a      	bne.n	8004004 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 fb26 	bl	8005644 <SDMMC_CmdStopTransfer>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	431a      	orrs	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f001 ff99 	bl	8005f44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004012:	e002      	b.n	800401a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff fc99 	bl	800394c <HAL_SD_ErrorCallback>
}
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f240 523a 	movw	r2, #1338	; 0x53a
 8004038:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff fefa 	bl	8003e34 <HAL_SD_GetCardState>
 8004040:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b06      	cmp	r3, #6
 8004054:	d002      	beq.n	800405c <SD_DMARxAbort+0x3a>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b05      	cmp	r3, #5
 800405a:	d10a      	bne.n	8004072 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f001 faef 	bl	8005644 <SDMMC_CmdStopTransfer>
 8004066:	4602      	mov	r2, r0
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f001 ff62 	bl	8005f44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004080:	e002      	b.n	8004088 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fc62 	bl	800394c <HAL_SD_ErrorCallback>
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004090:	b5b0      	push	{r4, r5, r7, lr}
 8004092:	b094      	sub	sp, #80	; 0x50
 8004094:	af04      	add	r7, sp, #16
 8004096:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004098:	2301      	movs	r3, #1
 800409a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f001 f9a1 	bl	80053e8 <SDIO_GetPowerState>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80040ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80040b0:	e0b6      	b.n	8004220 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d02f      	beq.n	800411a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fbca 	bl	8005858 <SDMMC_CmdSendCID>
 80040c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80040cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ce:	e0a7      	b.n	8004220 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 f9cb 	bl	8005472 <SDIO_GetResponse>
 80040dc:	4602      	mov	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2104      	movs	r1, #4
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 f9c2 	bl	8005472 <SDIO_GetResponse>
 80040ee:	4602      	mov	r2, r0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2108      	movs	r1, #8
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 f9b9 	bl	8005472 <SDIO_GetResponse>
 8004100:	4602      	mov	r2, r0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	210c      	movs	r1, #12
 800410c:	4618      	mov	r0, r3
 800410e:	f001 f9b0 	bl	8005472 <SDIO_GetResponse>
 8004112:	4602      	mov	r2, r0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	2b03      	cmp	r3, #3
 8004120:	d00d      	beq.n	800413e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f107 020e 	add.w	r2, r7, #14
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f001 fbd0 	bl	80058d2 <SDMMC_CmdSetRelAdd>
 8004132:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <SD_InitCard+0xae>
    {
      return errorstate;
 800413a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413c:	e070      	b.n	8004220 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	2b03      	cmp	r3, #3
 8004144:	d036      	beq.n	80041b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004146:	89fb      	ldrh	r3, [r7, #14]
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f001 fb9a 	bl	8005894 <SDMMC_CmdSendCSD>
 8004160:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416a:	e059      	b.n	8004220 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f001 f97d 	bl	8005472 <SDIO_GetResponse>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2104      	movs	r1, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f001 f974 	bl	8005472 <SDIO_GetResponse>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2108      	movs	r1, #8
 8004196:	4618      	mov	r0, r3
 8004198:	f001 f96b 	bl	8005472 <SDIO_GetResponse>
 800419c:	4602      	mov	r2, r0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	210c      	movs	r1, #12
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f962 	bl	8005472 <SDIO_GetResponse>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2104      	movs	r1, #4
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 f959 	bl	8005472 <SDIO_GetResponse>
 80041c0:	4603      	mov	r3, r0
 80041c2:	0d1a      	lsrs	r2, r3, #20
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80041c8:	f107 0310 	add.w	r3, r7, #16
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fbc6 	bl	8003960 <HAL_SD_GetCardCSD>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80041de:	e01f      	b.n	8004220 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	461a      	mov	r2, r3
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	4608      	mov	r0, r1
 80041f2:	f001 fa49 	bl	8005688 <SDMMC_CmdSelDesel>
 80041f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80041f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <SD_InitCard+0x172>
  {
    return errorstate;
 80041fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004200:	e00e      	b.n	8004220 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681d      	ldr	r5, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	466c      	mov	r4, sp
 800420a:	f103 0210 	add.w	r2, r3, #16
 800420e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004214:	3304      	adds	r3, #4
 8004216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004218:	4628      	mov	r0, r5
 800421a:	f001 f88d 	bl	8005338 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3740      	adds	r7, #64	; 0x40
 8004224:	46bd      	mov	sp, r7
 8004226:	bdb0      	pop	{r4, r5, r7, pc}

08004228 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fa44 	bl	80056ce <SDMMC_CmdGoIdleState>
 8004246:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <SD_PowerON+0x2a>
  {
    return errorstate;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	e072      	b.n	8004338 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f001 fa57 	bl	800570a <SDMMC_CmdOperCond>
 800425c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00d      	beq.n	8004280 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fa2d 	bl	80056ce <SDMMC_CmdGoIdleState>
 8004274:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <SD_PowerON+0x5e>
    {
      return errorstate;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	e05b      	b.n	8004338 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428a:	2b01      	cmp	r3, #1
 800428c:	d137      	bne.n	80042fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f001 fa57 	bl	8005748 <SDMMC_CmdAppCommand>
 800429a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02d      	beq.n	80042fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042a6:	e047      	b.n	8004338 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 fa4a 	bl	8005748 <SDMMC_CmdAppCommand>
 80042b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	e03b      	b.n	8004338 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	491e      	ldr	r1, [pc, #120]	; (8004340 <SD_PowerON+0x118>)
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 fa60 	bl	800578c <SDMMC_CmdAppOperCommand>
 80042cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042d8:	e02e      	b.n	8004338 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 f8c6 	bl	8005472 <SDIO_GetResponse>
 80042e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	0fdb      	lsrs	r3, r3, #31
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <SD_PowerON+0xcc>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <SD_PowerON+0xce>
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]

    count++;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	3301      	adds	r3, #1
 80042fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004304:	4293      	cmp	r3, r2
 8004306:	d802      	bhi.n	800430e <SD_PowerON+0xe6>
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0cc      	beq.n	80042a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004314:	4293      	cmp	r3, r2
 8004316:	d902      	bls.n	800431e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800431c:	e00c      	b.n	8004338 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
 800432e:	e002      	b.n	8004336 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	c1100000 	.word	0xc1100000

08004344 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004354:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004358:	e018      	b.n	800438c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f001 fad4 	bl	8005914 <SDMMC_CmdSendStatus>
 800436c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	e009      	b.n	800438c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f001 f877 	bl	8005472 <SDIO_GetResponse>
 8004384:	4602      	mov	r2, r0
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f861 	bl	8005472 <SDIO_GetResponse>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ba:	d102      	bne.n	80043c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80043bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043c0:	e02f      	b.n	8004422 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80043c2:	f107 030c 	add.w	r3, r7, #12
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f879 	bl	80044c0 <SD_FindSCR>
 80043ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	e023      	b.n	8004422 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01c      	beq.n	800441e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f001 f9a9 	bl	8005748 <SDMMC_CmdAppCommand>
 80043f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	e00f      	b.n	8004422 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2102      	movs	r1, #2
 8004408:	4618      	mov	r0, r3
 800440a:	f001 f9e2 	bl	80057d2 <SDMMC_CmdBusWidth>
 800440e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	e003      	b.n	8004422 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800441a:	2300      	movs	r3, #0
 800441c:	e001      	b.n	8004422 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800441e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f816 	bl	8005472 <SDIO_GetResponse>
 8004446:	4603      	mov	r3, r0
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004450:	d102      	bne.n	8004458 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004452:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004456:	e02f      	b.n	80044b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f82e 	bl	80044c0 <SD_FindSCR>
 8004464:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	e023      	b.n	80044b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01c      	beq.n	80044b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f001 f95e 	bl	8005748 <SDMMC_CmdAppCommand>
 800448c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	e00f      	b.n	80044b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2100      	movs	r1, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 f997 	bl	80057d2 <SDMMC_CmdBusWidth>
 80044a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	e003      	b.n	80044b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e001      	b.n	80044b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b08f      	sub	sp, #60	; 0x3c
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044ca:	f7fd fb37 	bl	8001b3c <HAL_GetTick>
 80044ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2108      	movs	r1, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 f802 	bl	80054f0 <SDMMC_CmdBlockLength>
 80044ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	e0b2      	b.n	800465e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f001 f91f 	bl	8005748 <SDMMC_CmdAppCommand>
 800450a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	e0a3      	b.n	800465e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800451a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800451c:	2308      	movs	r3, #8
 800451e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004520:	2330      	movs	r3, #48	; 0x30
 8004522:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004524:	2302      	movs	r3, #2
 8004526:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004528:	2300      	movs	r3, #0
 800452a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800452c:	2301      	movs	r3, #1
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f107 0210 	add.w	r2, r7, #16
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 ffac 	bl	8005498 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f001 f966 	bl	8005816 <SDMMC_CmdSendSCR>
 800454a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02a      	beq.n	80045a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	e083      	b.n	800465e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00f      	beq.n	8004584 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	f107 0208 	add.w	r2, r7, #8
 8004570:	18d4      	adds	r4, r2, r3
 8004572:	4608      	mov	r0, r1
 8004574:	f000 ff0b 	bl	800538e <SDIO_ReadFIFO>
 8004578:	4603      	mov	r3, r0
 800457a:	6023      	str	r3, [r4, #0]
      index++;
 800457c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457e:	3301      	adds	r3, #1
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
 8004582:	e006      	b.n	8004592 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d012      	beq.n	80045b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004592:	f7fd fad3 	bl	8001b3c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a0:	d102      	bne.n	80045a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80045a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045a6:	e05a      	b.n	800465e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ae:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0cf      	beq.n	8004556 <SD_FindSCR+0x96>
 80045b6:	e000      	b.n	80045ba <SD_FindSCR+0xfa>
      break;
 80045b8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2208      	movs	r2, #8
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80045d0:	2308      	movs	r3, #8
 80045d2:	e044      	b.n	800465e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2202      	movs	r2, #2
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80045ea:	2302      	movs	r3, #2
 80045ec:	e037      	b.n	800465e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2220      	movs	r2, #32
 8004602:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004604:	2320      	movs	r3, #32
 8004606:	e02a      	b.n	800465e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004610:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	061a      	lsls	r2, r3, #24
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800461e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004628:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	0e1b      	lsrs	r3, r3, #24
 800462e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	601a      	str	r2, [r3, #0]
    scr++;
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	3304      	adds	r3, #4
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	061a      	lsls	r2, r3, #24
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004646:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004650:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	0e1b      	lsrs	r3, r3, #24
 8004656:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	373c      	adds	r7, #60	; 0x3c
 8004662:	46bd      	mov	sp, r7
 8004664:	bd90      	pop	{r4, r7, pc}

08004666 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d03f      	beq.n	8004700 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e033      	b.n	80046ee <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fe7f 	bl	800538e <SDIO_ReadFIFO>
 8004690:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	701a      	strb	r2, [r3, #0]
      tmp++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3301      	adds	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3301      	adds	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b07      	cmp	r3, #7
 80046f2:	d9c8      	bls.n	8004686 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004700:	bf00      	nop
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d043      	beq.n	80047aa <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e037      	b.n	8004798 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3301      	adds	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3b01      	subs	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	021a      	lsls	r2, r3, #8
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
 8004744:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3301      	adds	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	3b01      	subs	r3, #1
 8004750:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	041a      	lsls	r2, r3, #16
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4313      	orrs	r3, r2
 800475c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3301      	adds	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	3b01      	subs	r3, #1
 8004768:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	061a      	lsls	r2, r3, #24
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4313      	orrs	r3, r2
 8004774:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	3b01      	subs	r3, #1
 8004780:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f107 0208 	add.w	r2, r7, #8
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fe0b 	bl	80053a8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	3301      	adds	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b07      	cmp	r3, #7
 800479c:	d9c4      	bls.n	8004728 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80047aa:	bf00      	nop
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e041      	b.n	8004848 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f839 	bl	8004850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f000 f9d7 	bl	8004ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d001      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e04e      	b.n	800491a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_TIM_Base_Start_IT+0xc4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d022      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d01d      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_TIM_Base_Start_IT+0xc8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <HAL_TIM_Base_Start_IT+0xcc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_TIM_Base_Start_IT+0xd0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <HAL_TIM_Base_Start_IT+0xd4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_TIM_Base_Start_IT+0xd8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x80>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_TIM_Base_Start_IT+0xdc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d010      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e007      	b.n	8004918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800
 8004934:	40000c00 	.word	0x40000c00
 8004938:	40010400 	.word	0x40010400
 800493c:	40014000 	.word	0x40014000
 8004940:	40001800 	.word	0x40001800

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0202 	mvn.w	r2, #2
 8004970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8ee 	bl	8004b68 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8e0 	bl	8004b54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f8f1 	bl	8004b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0204 	mvn.w	r2, #4
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f8c4 	bl	8004b68 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8b6 	bl	8004b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f8c7 	bl	8004b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0208 	mvn.w	r2, #8
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f89a 	bl	8004b68 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f88c 	bl	8004b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f89d 	bl	8004b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0210 	mvn.w	r2, #16
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2208      	movs	r2, #8
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f870 	bl	8004b68 <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f862 	bl	8004b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f873 	bl	8004b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0201 	mvn.w	r2, #1
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc faae 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d10e      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae0:	2b80      	cmp	r3, #128	; 0x80
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f902 	bl	8004cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d10e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f838 	bl	8004b90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d10e      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d107      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0220 	mvn.w	r2, #32
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f8cc 	bl	8004ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a40      	ldr	r2, [pc, #256]	; (8004cb8 <TIM_Base_SetConfig+0x114>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc2:	d00f      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a3d      	ldr	r2, [pc, #244]	; (8004cbc <TIM_Base_SetConfig+0x118>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00b      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3c      	ldr	r2, [pc, #240]	; (8004cc0 <TIM_Base_SetConfig+0x11c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3b      	ldr	r2, [pc, #236]	; (8004cc4 <TIM_Base_SetConfig+0x120>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a3a      	ldr	r2, [pc, #232]	; (8004cc8 <TIM_Base_SetConfig+0x124>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d108      	bne.n	8004bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2f      	ldr	r2, [pc, #188]	; (8004cb8 <TIM_Base_SetConfig+0x114>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02b      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c04:	d027      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a2c      	ldr	r2, [pc, #176]	; (8004cbc <TIM_Base_SetConfig+0x118>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d023      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a2b      	ldr	r2, [pc, #172]	; (8004cc0 <TIM_Base_SetConfig+0x11c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01f      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2a      	ldr	r2, [pc, #168]	; (8004cc4 <TIM_Base_SetConfig+0x120>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01b      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a29      	ldr	r2, [pc, #164]	; (8004cc8 <TIM_Base_SetConfig+0x124>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d017      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a28      	ldr	r2, [pc, #160]	; (8004ccc <TIM_Base_SetConfig+0x128>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a27      	ldr	r2, [pc, #156]	; (8004cd0 <TIM_Base_SetConfig+0x12c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00f      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a26      	ldr	r2, [pc, #152]	; (8004cd4 <TIM_Base_SetConfig+0x130>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00b      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <TIM_Base_SetConfig+0x134>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a24      	ldr	r2, [pc, #144]	; (8004cdc <TIM_Base_SetConfig+0x138>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a23      	ldr	r2, [pc, #140]	; (8004ce0 <TIM_Base_SetConfig+0x13c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d108      	bne.n	8004c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <TIM_Base_SetConfig+0x114>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0xf8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a0c      	ldr	r2, [pc, #48]	; (8004cc8 <TIM_Base_SetConfig+0x124>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d103      	bne.n	8004ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40010400 	.word	0x40010400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800
 8004cd8:	40001800 	.word	0x40001800
 8004cdc:	40001c00 	.word	0x40001c00
 8004ce0:	40002000 	.word	0x40002000

08004ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e03f      	b.n	8004d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fc faba 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2224      	movs	r2, #36	; 0x24
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f929 	bl	8004fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b08a      	sub	sp, #40	; 0x28
 8004daa:	af02      	add	r7, sp, #8
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d17c      	bne.n	8004ec0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_UART_Transmit+0x2c>
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e075      	b.n	8004ec2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_UART_Transmit+0x3e>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e06e      	b.n	8004ec2 <HAL_UART_Transmit+0x11c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2221      	movs	r2, #33	; 0x21
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dfa:	f7fc fe9f 	bl	8001b3c <HAL_GetTick>
 8004dfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	88fa      	ldrh	r2, [r7, #6]
 8004e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e14:	d108      	bne.n	8004e28 <HAL_UART_Transmit+0x82>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d104      	bne.n	8004e28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e003      	b.n	8004e30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e38:	e02a      	b.n	8004e90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2200      	movs	r2, #0
 8004e42:	2180      	movs	r1, #128	; 0x80
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f840 	bl	8004eca <UART_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e036      	b.n	8004ec2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e007      	b.n	8004e82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1cf      	bne.n	8004e3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2140      	movs	r1, #64	; 0x40
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f810 	bl	8004eca <UART_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e006      	b.n	8004ec2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b090      	sub	sp, #64	; 0x40
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eda:	e050      	b.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee2:	d04c      	beq.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x30>
 8004eea:	f7fc fe27 	bl	8001b3c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d241      	bcs.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f1a:	637a      	str	r2, [r7, #52]	; 0x34
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e5      	bne.n	8004efa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3314      	adds	r3, #20
 8004f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3314      	adds	r3, #20
 8004f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f4e:	623a      	str	r2, [r7, #32]
 8004f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	69f9      	ldr	r1, [r7, #28]
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e00f      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4013      	ands	r3, r2
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d09f      	beq.n	8004edc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3740      	adds	r7, #64	; 0x40
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	b09f      	sub	sp, #124	; 0x7c
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	68d9      	ldr	r1, [r3, #12]
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	ea40 0301 	orr.w	r3, r0, r1
 8004fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fec:	f021 010c 	bic.w	r1, r1, #12
 8004ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005006:	6999      	ldr	r1, [r3, #24]
 8005008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	ea40 0301 	orr.w	r3, r0, r1
 8005010:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4bc5      	ldr	r3, [pc, #788]	; (800532c <UART_SetConfig+0x384>)
 8005018:	429a      	cmp	r2, r3
 800501a:	d004      	beq.n	8005026 <UART_SetConfig+0x7e>
 800501c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4bc3      	ldr	r3, [pc, #780]	; (8005330 <UART_SetConfig+0x388>)
 8005022:	429a      	cmp	r2, r3
 8005024:	d103      	bne.n	800502e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005026:	f7fe f84f 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 800502a:	6778      	str	r0, [r7, #116]	; 0x74
 800502c:	e002      	b.n	8005034 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800502e:	f7fe f837 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 8005032:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800503c:	f040 80b6 	bne.w	80051ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005042:	461c      	mov	r4, r3
 8005044:	f04f 0500 	mov.w	r5, #0
 8005048:	4622      	mov	r2, r4
 800504a:	462b      	mov	r3, r5
 800504c:	1891      	adds	r1, r2, r2
 800504e:	6439      	str	r1, [r7, #64]	; 0x40
 8005050:	415b      	adcs	r3, r3
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
 8005054:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005058:	1912      	adds	r2, r2, r4
 800505a:	eb45 0303 	adc.w	r3, r5, r3
 800505e:	f04f 0000 	mov.w	r0, #0
 8005062:	f04f 0100 	mov.w	r1, #0
 8005066:	00d9      	lsls	r1, r3, #3
 8005068:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800506c:	00d0      	lsls	r0, r2, #3
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	1911      	adds	r1, r2, r4
 8005074:	6639      	str	r1, [r7, #96]	; 0x60
 8005076:	416b      	adcs	r3, r5
 8005078:	667b      	str	r3, [r7, #100]	; 0x64
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	461a      	mov	r2, r3
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	1891      	adds	r1, r2, r2
 8005086:	63b9      	str	r1, [r7, #56]	; 0x38
 8005088:	415b      	adcs	r3, r3
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800508c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005090:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005094:	f7fb fbfa 	bl	800088c <__aeabi_uldivmod>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4ba5      	ldr	r3, [pc, #660]	; (8005334 <UART_SetConfig+0x38c>)
 800509e:	fba3 2302 	umull	r2, r3, r3, r2
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	011e      	lsls	r6, r3, #4
 80050a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a8:	461c      	mov	r4, r3
 80050aa:	f04f 0500 	mov.w	r5, #0
 80050ae:	4622      	mov	r2, r4
 80050b0:	462b      	mov	r3, r5
 80050b2:	1891      	adds	r1, r2, r2
 80050b4:	6339      	str	r1, [r7, #48]	; 0x30
 80050b6:	415b      	adcs	r3, r3
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050be:	1912      	adds	r2, r2, r4
 80050c0:	eb45 0303 	adc.w	r3, r5, r3
 80050c4:	f04f 0000 	mov.w	r0, #0
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	00d9      	lsls	r1, r3, #3
 80050ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050d2:	00d0      	lsls	r0, r2, #3
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	1911      	adds	r1, r2, r4
 80050da:	65b9      	str	r1, [r7, #88]	; 0x58
 80050dc:	416b      	adcs	r3, r5
 80050de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	461a      	mov	r2, r3
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	1891      	adds	r1, r2, r2
 80050ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80050ee:	415b      	adcs	r3, r3
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050fa:	f7fb fbc7 	bl	800088c <__aeabi_uldivmod>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4b8c      	ldr	r3, [pc, #560]	; (8005334 <UART_SetConfig+0x38c>)
 8005104:	fba3 1302 	umull	r1, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	2164      	movs	r1, #100	; 0x64
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	3332      	adds	r3, #50	; 0x32
 8005116:	4a87      	ldr	r2, [pc, #540]	; (8005334 <UART_SetConfig+0x38c>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005124:	441e      	add	r6, r3
 8005126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005128:	4618      	mov	r0, r3
 800512a:	f04f 0100 	mov.w	r1, #0
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	1894      	adds	r4, r2, r2
 8005134:	623c      	str	r4, [r7, #32]
 8005136:	415b      	adcs	r3, r3
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
 800513a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800513e:	1812      	adds	r2, r2, r0
 8005140:	eb41 0303 	adc.w	r3, r1, r3
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	f04f 0500 	mov.w	r5, #0
 800514c:	00dd      	lsls	r5, r3, #3
 800514e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005152:	00d4      	lsls	r4, r2, #3
 8005154:	4622      	mov	r2, r4
 8005156:	462b      	mov	r3, r5
 8005158:	1814      	adds	r4, r2, r0
 800515a:	653c      	str	r4, [r7, #80]	; 0x50
 800515c:	414b      	adcs	r3, r1
 800515e:	657b      	str	r3, [r7, #84]	; 0x54
 8005160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	1891      	adds	r1, r2, r2
 800516c:	61b9      	str	r1, [r7, #24]
 800516e:	415b      	adcs	r3, r3
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005176:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800517a:	f7fb fb87 	bl	800088c <__aeabi_uldivmod>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4b6c      	ldr	r3, [pc, #432]	; (8005334 <UART_SetConfig+0x38c>)
 8005184:	fba3 1302 	umull	r1, r3, r3, r2
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	2164      	movs	r1, #100	; 0x64
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	3332      	adds	r3, #50	; 0x32
 8005196:	4a67      	ldr	r2, [pc, #412]	; (8005334 <UART_SetConfig+0x38c>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	f003 0207 	and.w	r2, r3, #7
 80051a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4432      	add	r2, r6
 80051a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051aa:	e0b9      	b.n	8005320 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ae:	461c      	mov	r4, r3
 80051b0:	f04f 0500 	mov.w	r5, #0
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	1891      	adds	r1, r2, r2
 80051ba:	6139      	str	r1, [r7, #16]
 80051bc:	415b      	adcs	r3, r3
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051c4:	1912      	adds	r2, r2, r4
 80051c6:	eb45 0303 	adc.w	r3, r5, r3
 80051ca:	f04f 0000 	mov.w	r0, #0
 80051ce:	f04f 0100 	mov.w	r1, #0
 80051d2:	00d9      	lsls	r1, r3, #3
 80051d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d8:	00d0      	lsls	r0, r2, #3
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	eb12 0804 	adds.w	r8, r2, r4
 80051e2:	eb43 0905 	adc.w	r9, r3, r5
 80051e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	008b      	lsls	r3, r1, #2
 80051fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051fe:	0082      	lsls	r2, r0, #2
 8005200:	4640      	mov	r0, r8
 8005202:	4649      	mov	r1, r9
 8005204:	f7fb fb42 	bl	800088c <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4b49      	ldr	r3, [pc, #292]	; (8005334 <UART_SetConfig+0x38c>)
 800520e:	fba3 2302 	umull	r2, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	011e      	lsls	r6, r3, #4
 8005216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005218:	4618      	mov	r0, r3
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	1894      	adds	r4, r2, r2
 8005224:	60bc      	str	r4, [r7, #8]
 8005226:	415b      	adcs	r3, r3
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800522e:	1812      	adds	r2, r2, r0
 8005230:	eb41 0303 	adc.w	r3, r1, r3
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	f04f 0500 	mov.w	r5, #0
 800523c:	00dd      	lsls	r5, r3, #3
 800523e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005242:	00d4      	lsls	r4, r2, #3
 8005244:	4622      	mov	r2, r4
 8005246:	462b      	mov	r3, r5
 8005248:	1814      	adds	r4, r2, r0
 800524a:	64bc      	str	r4, [r7, #72]	; 0x48
 800524c:	414b      	adcs	r3, r1
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4618      	mov	r0, r3
 8005256:	f04f 0100 	mov.w	r1, #0
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	008b      	lsls	r3, r1, #2
 8005264:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005268:	0082      	lsls	r2, r0, #2
 800526a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800526e:	f7fb fb0d 	bl	800088c <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b2f      	ldr	r3, [pc, #188]	; (8005334 <UART_SetConfig+0x38c>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a2a      	ldr	r2, [pc, #168]	; (8005334 <UART_SetConfig+0x38c>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005296:	441e      	add	r6, r3
 8005298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529a:	4618      	mov	r0, r3
 800529c:	f04f 0100 	mov.w	r1, #0
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	1894      	adds	r4, r2, r2
 80052a6:	603c      	str	r4, [r7, #0]
 80052a8:	415b      	adcs	r3, r3
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b0:	1812      	adds	r2, r2, r0
 80052b2:	eb41 0303 	adc.w	r3, r1, r3
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	f04f 0500 	mov.w	r5, #0
 80052be:	00dd      	lsls	r5, r3, #3
 80052c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052c4:	00d4      	lsls	r4, r2, #3
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	eb12 0a00 	adds.w	sl, r2, r0
 80052ce:	eb43 0b01 	adc.w	fp, r3, r1
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	008b      	lsls	r3, r1, #2
 80052e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052ea:	0082      	lsls	r2, r0, #2
 80052ec:	4650      	mov	r0, sl
 80052ee:	4659      	mov	r1, fp
 80052f0:	f7fb facc 	bl	800088c <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <UART_SetConfig+0x38c>)
 80052fa:	fba3 1302 	umull	r1, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	2164      	movs	r1, #100	; 0x64
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	3332      	adds	r3, #50	; 0x32
 800530c:	4a09      	ldr	r2, [pc, #36]	; (8005334 <UART_SetConfig+0x38c>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4432      	add	r2, r6
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	377c      	adds	r7, #124	; 0x7c
 8005324:	46bd      	mov	sp, r7
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	bf00      	nop
 800532c:	40011000 	.word	0x40011000
 8005330:	40011400 	.word	0x40011400
 8005334:	51eb851f 	.word	0x51eb851f

08005338 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005338:	b084      	sub	sp, #16
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	f107 001c 	add.w	r0, r7, #28
 8005346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800534e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005350:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005352:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005356:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800535a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800535e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005362:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005372:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	b004      	add	sp, #16
 800538c:	4770      	bx	lr

0800538e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2203      	movs	r2, #3
 80053d6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80053d8:	2002      	movs	r0, #2
 80053da:	f7fc fbbb 	bl	8001b54 <HAL_Delay>
  
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0303 	and.w	r3, r3, #3
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005422:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005428:	431a      	orrs	r2, r3
                       Command->CPSM);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800542e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800543e:	f023 030f 	bic.w	r3, r3, #15
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	b2db      	uxtb	r3, r3
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3314      	adds	r3, #20
 8005480:	461a      	mov	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	4413      	add	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
}  
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80054c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80054ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0

}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80054fe:	2310      	movs	r3, #16
 8005500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800550a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800550e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff ff74 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800551c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005520:	2110      	movs	r1, #16
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa44 	bl	80059b0 <SDMMC_GetCmdResp1>
 8005528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800552a:	69fb      	ldr	r3, [r7, #28]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005542:	2311      	movs	r3, #17
 8005544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800554e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005552:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff ff52 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005560:	f241 3288 	movw	r2, #5000	; 0x1388
 8005564:	2111      	movs	r1, #17
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa22 	bl	80059b0 <SDMMC_GetCmdResp1>
 800556c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800556e:	69fb      	ldr	r3, [r7, #28]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005586:	2312      	movs	r3, #18
 8005588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800558a:	2340      	movs	r3, #64	; 0x40
 800558c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005596:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005598:	f107 0308 	add.w	r3, r7, #8
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ff30 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80055a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a8:	2112      	movs	r1, #18
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa00 	bl	80059b0 <SDMMC_GetCmdResp1>
 80055b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055b2:	69fb      	ldr	r3, [r7, #28]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80055ca:	2318      	movs	r3, #24
 80055cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055ce:	2340      	movs	r3, #64	; 0x40
 80055d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055dc:	f107 0308 	add.w	r3, r7, #8
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff ff0e 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80055e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ec:	2118      	movs	r1, #24
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9de 	bl	80059b0 <SDMMC_GetCmdResp1>
 80055f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055f6:	69fb      	ldr	r3, [r7, #28]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800560e:	2319      	movs	r3, #25
 8005610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800561a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005620:	f107 0308 	add.w	r3, r7, #8
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff feec 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800562c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005630:	2119      	movs	r1, #25
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9bc 	bl	80059b0 <SDMMC_GetCmdResp1>
 8005638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800563a:	69fb      	ldr	r3, [r7, #28]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005650:	230c      	movs	r3, #12
 8005652:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005654:	2340      	movs	r3, #64	; 0x40
 8005656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800565c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005660:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fecb 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800566e:	4a05      	ldr	r2, [pc, #20]	; (8005684 <SDMMC_CmdStopTransfer+0x40>)
 8005670:	210c      	movs	r1, #12
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f99c 	bl	80059b0 <SDMMC_GetCmdResp1>
 8005678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800567a:	69fb      	ldr	r3, [r7, #28]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	05f5e100 	.word	0x05f5e100

08005688 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005698:	2307      	movs	r3, #7
 800569a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056aa:	f107 0310 	add.w	r3, r7, #16
 80056ae:	4619      	mov	r1, r3
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff fea7 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80056b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ba:	2107      	movs	r1, #7
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f977 	bl	80059b0 <SDMMC_GetCmdResp1>
 80056c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3728      	adds	r7, #40	; 0x28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b088      	sub	sp, #32
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056ec:	f107 0308 	add.w	r3, r7, #8
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff fe86 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f92d 	bl	8005958 <SDMMC_GetCmdError>
 80056fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005700:	69fb      	ldr	r3, [r7, #28]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b088      	sub	sp, #32
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005712:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005718:	2308      	movs	r3, #8
 800571a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005728:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800572a:	f107 0308 	add.w	r3, r7, #8
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fe67 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fb24 	bl	8005d84 <SDMMC_GetCmdResp7>
 800573c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800573e:	69fb      	ldr	r3, [r7, #28]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005756:	2337      	movs	r3, #55	; 0x37
 8005758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800575a:	2340      	movs	r3, #64	; 0x40
 800575c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005766:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005768:	f107 0308 	add.w	r3, r7, #8
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fe48 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005774:	f241 3288 	movw	r2, #5000	; 0x1388
 8005778:	2137      	movs	r1, #55	; 0x37
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f918 	bl	80059b0 <SDMMC_GetCmdResp1>
 8005780:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005782:	69fb      	ldr	r3, [r7, #28]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800579c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80057a2:	2329      	movs	r3, #41	; 0x29
 80057a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057a6:	2340      	movs	r3, #64	; 0x40
 80057a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057b4:	f107 0308 	add.w	r3, r7, #8
 80057b8:	4619      	mov	r1, r3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fe22 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fa2b 	bl	8005c1c <SDMMC_GetCmdResp3>
 80057c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057c8:	69fb      	ldr	r3, [r7, #28]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b088      	sub	sp, #32
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80057e0:	2306      	movs	r3, #6
 80057e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057e4:	2340      	movs	r3, #64	; 0x40
 80057e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f2:	f107 0308 	add.w	r3, r7, #8
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff fe03 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	2106      	movs	r1, #6
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8d3 	bl	80059b0 <SDMMC_GetCmdResp1>
 800580a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800580c:	69fb      	ldr	r3, [r7, #28]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b088      	sub	sp, #32
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005822:	2333      	movs	r3, #51	; 0x33
 8005824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005826:	2340      	movs	r3, #64	; 0x40
 8005828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800582e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff fde2 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	2133      	movs	r1, #51	; 0x33
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f8b2 	bl	80059b0 <SDMMC_GetCmdResp1>
 800584c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800584e:	69fb      	ldr	r3, [r7, #28]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3720      	adds	r7, #32
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005864:	2302      	movs	r3, #2
 8005866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005868:	23c0      	movs	r3, #192	; 0xc0
 800586a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005874:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fdc1 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f982 	bl	8005b8c <SDMMC_GetCmdResp2>
 8005888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800588a:	69fb      	ldr	r3, [r7, #28]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80058a2:	2309      	movs	r3, #9
 80058a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80058a6:	23c0      	movs	r3, #192	; 0xc0
 80058a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fda2 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f963 	bl	8005b8c <SDMMC_GetCmdResp2>
 80058c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058c8:	69fb      	ldr	r3, [r7, #28]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b088      	sub	sp, #32
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80058e0:	2303      	movs	r3, #3
 80058e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058e4:	2340      	movs	r3, #64	; 0x40
 80058e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058f2:	f107 0308 	add.w	r3, r7, #8
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fd83 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	2103      	movs	r1, #3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9c8 	bl	8005c98 <SDMMC_GetCmdResp6>
 8005908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800590a:	69fb      	ldr	r3, [r7, #28]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005922:	230d      	movs	r3, #13
 8005924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005926:	2340      	movs	r3, #64	; 0x40
 8005928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800592e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005932:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005934:	f107 0308 	add.w	r3, r7, #8
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff fd62 	bl	8005404 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005940:	f241 3288 	movw	r2, #5000	; 0x1388
 8005944:	210d      	movs	r1, #13
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f832 	bl	80059b0 <SDMMC_GetCmdResp1>
 800594c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800594e:	69fb      	ldr	r3, [r7, #28]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005960:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <SDMMC_GetCmdError+0x50>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a11      	ldr	r2, [pc, #68]	; (80059ac <SDMMC_GetCmdError+0x54>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0a5b      	lsrs	r3, r3, #9
 800596c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1e5a      	subs	r2, r3, #1
 800597a:	60fa      	str	r2, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005984:	e009      	b.n	800599a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f1      	beq.n	8005976 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	22c5      	movs	r2, #197	; 0xc5
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	2000001c 	.word	0x2000001c
 80059ac:	10624dd3 	.word	0x10624dd3

080059b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	460b      	mov	r3, r1
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80059be:	4b70      	ldr	r3, [pc, #448]	; (8005b80 <SDMMC_GetCmdResp1+0x1d0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a70      	ldr	r2, [pc, #448]	; (8005b84 <SDMMC_GetCmdResp1+0x1d4>)
 80059c4:	fba2 2303 	umull	r2, r3, r2, r3
 80059c8:	0a5a      	lsrs	r2, r3, #9
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	fb02 f303 	mul.w	r3, r2, r3
 80059d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	1e5a      	subs	r2, r3, #1
 80059d6:	61fa      	str	r2, [r7, #28]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059e0:	e0c9      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0ef      	beq.n	80059d2 <SDMMC_GetCmdResp1+0x22>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1ea      	bne.n	80059d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a0e:	2304      	movs	r3, #4
 8005a10:	e0b1      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d004      	beq.n	8005a28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0a6      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22c5      	movs	r2, #197	; 0xc5
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff fd12 	bl	8005458 <SDIO_GetCommandResponse>
 8005a34:	4603      	mov	r3, r0
 8005a36:	461a      	mov	r2, r3
 8005a38:	7afb      	ldrb	r3, [r7, #11]
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d001      	beq.n	8005a42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e099      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a42:	2100      	movs	r1, #0
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fd14 	bl	8005472 <SDIO_GetResponse>
 8005a4a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4b4e      	ldr	r3, [pc, #312]	; (8005b88 <SDMMC_GetCmdResp1+0x1d8>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e08d      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	da02      	bge.n	8005a66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a64:	e087      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a70:	2340      	movs	r3, #64	; 0x40
 8005a72:	e080      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	e079      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a90:	e071      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa0:	e069      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ab0:	e061      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005abc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ac0:	e059      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad0:	e051      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ae0:	e049      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005af0:	e041      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b00:	e039      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b10:	e031      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005b1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b20:	e029      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005b2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b30:	e021      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005b3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b40:	e019      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b50:	e011      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b60:	e009      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b70:	e001      	b.n	8005b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	2000001c 	.word	0x2000001c
 8005b84:	10624dd3 	.word	0x10624dd3
 8005b88:	fdffe008 	.word	0xfdffe008

08005b8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b94:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <SDMMC_GetCmdResp2+0x88>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <SDMMC_GetCmdResp2+0x8c>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	0a5b      	lsrs	r3, r3, #9
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1e5a      	subs	r2, r3, #1
 8005bae:	60fa      	str	r2, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bb8:	e026      	b.n	8005c08 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ef      	beq.n	8005baa <SDMMC_GetCmdResp2+0x1e>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1ea      	bne.n	8005baa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2204      	movs	r2, #4
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005be6:	2304      	movs	r3, #4
 8005be8:	e00e      	b.n	8005c08 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e003      	b.n	8005c08 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	22c5      	movs	r2, #197	; 0xc5
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	2000001c 	.word	0x2000001c
 8005c18:	10624dd3 	.word	0x10624dd3

08005c1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c24:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <SDMMC_GetCmdResp3+0x74>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <SDMMC_GetCmdResp3+0x78>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0a5b      	lsrs	r3, r3, #9
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	fb02 f303 	mul.w	r3, r2, r3
 8005c38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	60fa      	str	r2, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c48:	e01b      	b.n	8005c82 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0ef      	beq.n	8005c3a <SDMMC_GetCmdResp3+0x1e>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1ea      	bne.n	8005c3a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2204      	movs	r2, #4
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c76:	2304      	movs	r3, #4
 8005c78:	e003      	b.n	8005c82 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	22c5      	movs	r2, #197	; 0xc5
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	2000001c 	.word	0x2000001c
 8005c94:	10624dd3 	.word	0x10624dd3

08005c98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ca6:	4b35      	ldr	r3, [pc, #212]	; (8005d7c <SDMMC_GetCmdResp6+0xe4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a35      	ldr	r2, [pc, #212]	; (8005d80 <SDMMC_GetCmdResp6+0xe8>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	0a5b      	lsrs	r3, r3, #9
 8005cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	1e5a      	subs	r2, r3, #1
 8005cc0:	61fa      	str	r2, [r7, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cca:	e052      	b.n	8005d72 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ef      	beq.n	8005cbc <SDMMC_GetCmdResp6+0x24>
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1ea      	bne.n	8005cbc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	e03a      	b.n	8005d72 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e02f      	b.n	8005d72 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7ff fba0 	bl	8005458 <SDIO_GetCommandResponse>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d001      	beq.n	8005d26 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e025      	b.n	8005d72 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	22c5      	movs	r2, #197	; 0xc5
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff fb9f 	bl	8005472 <SDIO_GetResponse>
 8005d34:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	0c1b      	lsrs	r3, r3, #16
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e011      	b.n	8005d72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d5c:	e009      	b.n	8005d72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d6c:	e001      	b.n	8005d72 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	2000001c 	.word	0x2000001c
 8005d80:	10624dd3 	.word	0x10624dd3

08005d84 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d8c:	4b22      	ldr	r3, [pc, #136]	; (8005e18 <SDMMC_GetCmdResp7+0x94>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <SDMMC_GetCmdResp7+0x98>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	0a5b      	lsrs	r3, r3, #9
 8005d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9c:	fb02 f303 	mul.w	r3, r2, r3
 8005da0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1e5a      	subs	r2, r3, #1
 8005da6:	60fa      	str	r2, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005db0:	e02c      	b.n	8005e0c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0ef      	beq.n	8005da2 <SDMMC_GetCmdResp7+0x1e>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ea      	bne.n	8005da2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dde:	2304      	movs	r3, #4
 8005de0:	e014      	b.n	8005e0c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e009      	b.n	8005e0c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2240      	movs	r2, #64	; 0x40
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e0a:	2300      	movs	r3, #0
  
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	2000001c 	.word	0x2000001c
 8005e1c:	10624dd3 	.word	0x10624dd3

08005e20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e24:	4904      	ldr	r1, [pc, #16]	; (8005e38 <MX_FATFS_Init+0x18>)
 8005e26:	4805      	ldr	r0, [pc, #20]	; (8005e3c <MX_FATFS_Init+0x1c>)
 8005e28:	f004 f856 	bl	8009ed8 <FATFS_LinkDriver>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <MX_FATFS_Init+0x20>)
 8005e32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e34:	bf00      	nop
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20005d9c 	.word	0x20005d9c
 8005e3c:	0800eeb0 	.word	0x0800eeb0
 8005e40:	20005d98 	.word	0x20005d98

08005e44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005e5e:	f000 f896 	bl	8005f8e <BSP_SD_IsDetected>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d001      	beq.n	8005e6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e012      	b.n	8005e92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005e6c:	480b      	ldr	r0, [pc, #44]	; (8005e9c <BSP_SD_Init+0x48>)
 8005e6e:	f7fd f971 	bl	8003154 <HAL_SD_Init>
 8005e72:	4603      	mov	r3, r0
 8005e74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005e7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e80:	4806      	ldr	r0, [pc, #24]	; (8005e9c <BSP_SD_Init+0x48>)
 8005e82:	f7fd ff3d 	bl	8003d00 <HAL_SD_ConfigWideBusOperation>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005e90:	79fb      	ldrb	r3, [r7, #7]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20005bac 	.word	0x20005bac

08005ea0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	68f9      	ldr	r1, [r7, #12]
 8005eb6:	4806      	ldr	r0, [pc, #24]	; (8005ed0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005eb8:	f7fd f9fa 	bl	80032b0 <HAL_SD_ReadBlocks_DMA>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20005bac 	.word	0x20005bac

08005ed4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	68f9      	ldr	r1, [r7, #12]
 8005eea:	4806      	ldr	r0, [pc, #24]	; (8005f04 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005eec:	f7fd fac2 	bl	8003474 <HAL_SD_WriteBlocks_DMA>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20005bac 	.word	0x20005bac

08005f08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f0c:	4805      	ldr	r0, [pc, #20]	; (8005f24 <BSP_SD_GetCardState+0x1c>)
 8005f0e:	f7fd ff91 	bl	8003e34 <HAL_SD_GetCardState>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20005bac 	.word	0x20005bac

08005f28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	4803      	ldr	r0, [pc, #12]	; (8005f40 <BSP_SD_GetCardInfo+0x18>)
 8005f34:	f7fd feb8 	bl	8003ca8 <HAL_SD_GetCardInfo>
}
 8005f38:	bf00      	nop
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20005bac 	.word	0x20005bac

08005f44 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005f4c:	f000 f818 	bl	8005f80 <BSP_SD_AbortCallback>
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005f60:	f000 f998 	bl	8006294 <BSP_SD_WriteCpltCallback>
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005f74:	f000 f9a0 	bl	80062b8 <BSP_SD_ReadCpltCallback>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0

}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005f94:	2301      	movs	r3, #1
 8005f96:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	b2db      	uxtb	r3, r3
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005fb0:	f004 f898 	bl	800a0e4 <osKernelGetTickCount>
 8005fb4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005fb6:	e006      	b.n	8005fc6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005fb8:	f7ff ffa6 	bl	8005f08 <BSP_SD_GetCardState>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e009      	b.n	8005fda <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005fc6:	f004 f88d 	bl	800a0e4 <osKernelGetTickCount>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d8f0      	bhi.n	8005fb8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <SD_CheckStatus+0x38>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ff4:	f7ff ff88 	bl	8005f08 <BSP_SD_GetCardState>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <SD_CheckStatus+0x38>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b04      	ldr	r3, [pc, #16]	; (800601c <SD_CheckStatus+0x38>)
 800600c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800600e:	4b03      	ldr	r3, [pc, #12]	; (800601c <SD_CheckStatus+0x38>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b2db      	uxtb	r3, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000041 	.word	0x20000041

08006020 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800602a:	4b1c      	ldr	r3, [pc, #112]	; (800609c <SD_initialize+0x7c>)
 800602c:	2201      	movs	r2, #1
 800602e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8006030:	f004 f810 	bl	800a054 <osKernelGetState>
 8006034:	4603      	mov	r3, r0
 8006036:	2b02      	cmp	r3, #2
 8006038:	d129      	bne.n	800608e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800603a:	f7ff ff0b 	bl	8005e54 <BSP_SD_Init>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d107      	bne.n	8006054 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff ffcc 	bl	8005fe4 <SD_CheckStatus>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	4b12      	ldr	r3, [pc, #72]	; (800609c <SD_initialize+0x7c>)
 8006052:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006054:	4b11      	ldr	r3, [pc, #68]	; (800609c <SD_initialize+0x7c>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b01      	cmp	r3, #1
 800605c:	d017      	beq.n	800608e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <SD_initialize+0x80>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d107      	bne.n	8006076 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8006066:	2200      	movs	r2, #0
 8006068:	2102      	movs	r1, #2
 800606a:	200a      	movs	r0, #10
 800606c:	f004 fa40 	bl	800a4f0 <osMessageQueueNew>
 8006070:	4603      	mov	r3, r0
 8006072:	4a0b      	ldr	r2, [pc, #44]	; (80060a0 <SD_initialize+0x80>)
 8006074:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <SD_initialize+0x80>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d107      	bne.n	800608e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <SD_initialize+0x7c>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	b2da      	uxtb	r2, r3
 800608a:	4b04      	ldr	r3, [pc, #16]	; (800609c <SD_initialize+0x7c>)
 800608c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <SD_initialize+0x7c>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b2db      	uxtb	r3, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000041 	.word	0x20000041
 80060a0:	200010cc 	.word	0x200010cc

080060a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff ff97 	bl	8005fe4 <SD_CheckStatus>
 80060b6:	4603      	mov	r3, r0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80060d4:	f247 5030 	movw	r0, #30000	; 0x7530
 80060d8:	f7ff ff66 	bl	8005fa8 <SD_CheckStatusWithTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da01      	bge.n	80060e6 <SD_read+0x26>
  {
    return res;
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
 80060e4:	e02f      	b.n	8006146 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	68b8      	ldr	r0, [r7, #8]
 80060ec:	f7ff fed8 	bl	8005ea0 <BSP_SD_ReadBlocks_DMA>
 80060f0:	4603      	mov	r3, r0
 80060f2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80060f4:	7fbb      	ldrb	r3, [r7, #30]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d124      	bne.n	8006144 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80060fa:	4b15      	ldr	r3, [pc, #84]	; (8006150 <SD_read+0x90>)
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	f107 0112 	add.w	r1, r7, #18
 8006102:	f247 5330 	movw	r3, #30000	; 0x7530
 8006106:	2200      	movs	r2, #0
 8006108:	f004 fac6 	bl	800a698 <osMessageQueueGet>
 800610c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d117      	bne.n	8006144 <SD_read+0x84>
 8006114:	8a7b      	ldrh	r3, [r7, #18]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d114      	bne.n	8006144 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800611a:	f003 ffe3 	bl	800a0e4 <osKernelGetTickCount>
 800611e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006120:	e007      	b.n	8006132 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006122:	f7ff fef1 	bl	8005f08 <BSP_SD_GetCardState>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <SD_read+0x72>
              {
                res = RES_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006130:	e008      	b.n	8006144 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006132:	f003 ffd7 	bl	800a0e4 <osKernelGetTickCount>
 8006136:	4602      	mov	r2, r0
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	f247 522f 	movw	r2, #29999	; 0x752f
 8006140:	4293      	cmp	r3, r2
 8006142:	d9ee      	bls.n	8006122 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006144:	7ffb      	ldrb	r3, [r7, #31]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	200010cc 	.word	0x200010cc

08006154 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4603      	mov	r3, r0
 8006162:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006168:	f247 5030 	movw	r0, #30000	; 0x7530
 800616c:	f7ff ff1c 	bl	8005fa8 <SD_CheckStatusWithTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	da01      	bge.n	800617a <SD_write+0x26>
  {
    return res;
 8006176:	7ffb      	ldrb	r3, [r7, #31]
 8006178:	e02d      	b.n	80061d6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	68b8      	ldr	r0, [r7, #8]
 8006180:	f7ff fea8 	bl	8005ed4 <BSP_SD_WriteBlocks_DMA>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d124      	bne.n	80061d4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800618a:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <SD_write+0x8c>)
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	f107 0112 	add.w	r1, r7, #18
 8006192:	f247 5330 	movw	r3, #30000	; 0x7530
 8006196:	2200      	movs	r2, #0
 8006198:	f004 fa7e 	bl	800a698 <osMessageQueueGet>
 800619c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d117      	bne.n	80061d4 <SD_write+0x80>
 80061a4:	8a7b      	ldrh	r3, [r7, #18]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d114      	bne.n	80061d4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80061aa:	f003 ff9b 	bl	800a0e4 <osKernelGetTickCount>
 80061ae:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80061b0:	e007      	b.n	80061c2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061b2:	f7ff fea9 	bl	8005f08 <BSP_SD_GetCardState>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d102      	bne.n	80061c2 <SD_write+0x6e>
          {
            res = RES_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	77fb      	strb	r3, [r7, #31]
            break;
 80061c0:	e008      	b.n	80061d4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80061c2:	f003 ff8f 	bl	800a0e4 <osKernelGetTickCount>
 80061c6:	4602      	mov	r2, r0
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d9ee      	bls.n	80061b2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80061d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200010cc 	.word	0x200010cc

080061e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08c      	sub	sp, #48	; 0x30
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	603a      	str	r2, [r7, #0]
 80061ee:	71fb      	strb	r3, [r7, #7]
 80061f0:	460b      	mov	r3, r1
 80061f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80061fa:	4b25      	ldr	r3, [pc, #148]	; (8006290 <SD_ioctl+0xac>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <SD_ioctl+0x28>
 8006208:	2303      	movs	r3, #3
 800620a:	e03c      	b.n	8006286 <SD_ioctl+0xa2>

  switch (cmd)
 800620c:	79bb      	ldrb	r3, [r7, #6]
 800620e:	2b03      	cmp	r3, #3
 8006210:	d834      	bhi.n	800627c <SD_ioctl+0x98>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <SD_ioctl+0x34>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006229 	.word	0x08006229
 800621c:	08006231 	.word	0x08006231
 8006220:	08006249 	.word	0x08006249
 8006224:	08006263 	.word	0x08006263
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800622e:	e028      	b.n	8006282 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006230:	f107 030c 	add.w	r3, r7, #12
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fe77 	bl	8005f28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800623a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006246:	e01c      	b.n	8006282 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006248:	f107 030c 	add.w	r3, r7, #12
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fe6b 	bl	8005f28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	b29a      	uxth	r2, r3
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006260:	e00f      	b.n	8006282 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006262:	f107 030c 	add.w	r3, r7, #12
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fe5e 	bl	8005f28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	0a5a      	lsrs	r2, r3, #9
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800627a:	e002      	b.n	8006282 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800627c:	2304      	movs	r3, #4
 800627e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006286:	4618      	mov	r0, r3
 8006288:	3730      	adds	r7, #48	; 0x30
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000041 	.word	0x20000041

08006294 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800629a:	2302      	movs	r3, #2
 800629c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800629e:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <BSP_SD_WriteCpltCallback+0x20>)
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	1db9      	adds	r1, r7, #6
 80062a4:	2300      	movs	r3, #0
 80062a6:	2200      	movs	r2, #0
 80062a8:	f004 f996 	bl	800a5d8 <osMessageQueuePut>
#endif
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	200010cc 	.word	0x200010cc

080062b8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80062be:	2301      	movs	r3, #1
 80062c0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80062c2:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <BSP_SD_ReadCpltCallback+0x20>)
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	1db9      	adds	r1, r7, #6
 80062c8:	2300      	movs	r3, #0
 80062ca:	2200      	movs	r2, #0
 80062cc:	f004 f984 	bl	800a5d8 <osMessageQueuePut>
#endif
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	200010cc 	.word	0x200010cc

080062dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	4a08      	ldr	r2, [pc, #32]	; (800630c <disk_status+0x30>)
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	79fa      	ldrb	r2, [r7, #7]
 80062f4:	4905      	ldr	r1, [pc, #20]	; (800630c <disk_status+0x30>)
 80062f6:	440a      	add	r2, r1
 80062f8:	7a12      	ldrb	r2, [r2, #8]
 80062fa:	4610      	mov	r0, r2
 80062fc:	4798      	blx	r3
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200010f8 	.word	0x200010f8

08006310 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	4a0d      	ldr	r2, [pc, #52]	; (8006358 <disk_initialize+0x48>)
 8006322:	5cd3      	ldrb	r3, [r2, r3]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d111      	bne.n	800634c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	4a0b      	ldr	r2, [pc, #44]	; (8006358 <disk_initialize+0x48>)
 800632c:	2101      	movs	r1, #1
 800632e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	4a09      	ldr	r2, [pc, #36]	; (8006358 <disk_initialize+0x48>)
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	79fa      	ldrb	r2, [r7, #7]
 800633e:	4906      	ldr	r1, [pc, #24]	; (8006358 <disk_initialize+0x48>)
 8006340:	440a      	add	r2, r1
 8006342:	7a12      	ldrb	r2, [r2, #8]
 8006344:	4610      	mov	r0, r2
 8006346:	4798      	blx	r3
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200010f8 	.word	0x200010f8

0800635c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800635c:	b590      	push	{r4, r7, lr}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	4a0a      	ldr	r2, [pc, #40]	; (8006398 <disk_read+0x3c>)
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	689c      	ldr	r4, [r3, #8]
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	4a07      	ldr	r2, [pc, #28]	; (8006398 <disk_read+0x3c>)
 800637c:	4413      	add	r3, r2
 800637e:	7a18      	ldrb	r0, [r3, #8]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	47a0      	blx	r4
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]
  return res;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
}
 800638e:	4618      	mov	r0, r3
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd90      	pop	{r4, r7, pc}
 8006396:	bf00      	nop
 8006398:	200010f8 	.word	0x200010f8

0800639c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800639c:	b590      	push	{r4, r7, lr}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	4a0a      	ldr	r2, [pc, #40]	; (80063d8 <disk_write+0x3c>)
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68dc      	ldr	r4, [r3, #12]
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <disk_write+0x3c>)
 80063bc:	4413      	add	r3, r2
 80063be:	7a18      	ldrb	r0, [r3, #8]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	47a0      	blx	r4
 80063c8:	4603      	mov	r3, r0
 80063ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}
 80063d6:	bf00      	nop
 80063d8:	200010f8 	.word	0x200010f8

080063dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	603a      	str	r2, [r7, #0]
 80063e6:	71fb      	strb	r3, [r7, #7]
 80063e8:	460b      	mov	r3, r1
 80063ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	4a09      	ldr	r2, [pc, #36]	; (8006414 <disk_ioctl+0x38>)
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	79fa      	ldrb	r2, [r7, #7]
 80063fa:	4906      	ldr	r1, [pc, #24]	; (8006414 <disk_ioctl+0x38>)
 80063fc:	440a      	add	r2, r1
 80063fe:	7a10      	ldrb	r0, [r2, #8]
 8006400:	79b9      	ldrb	r1, [r7, #6]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	4798      	blx	r3
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
  return res;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	200010f8 	.word	0x200010f8

08006418 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3301      	adds	r3, #1
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006428:	89fb      	ldrh	r3, [r7, #14]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	b21a      	sxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	b21b      	sxth	r3, r3
 8006434:	4313      	orrs	r3, r2
 8006436:	b21b      	sxth	r3, r3
 8006438:	81fb      	strh	r3, [r7, #14]
	return rv;
 800643a:	89fb      	ldrh	r3, [r7, #14]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3303      	adds	r3, #3
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	3202      	adds	r2, #2
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	3201      	adds	r2, #1
 800646e:	7812      	ldrb	r2, [r2, #0]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006480:	68fb      	ldr	r3, [r7, #12]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	887a      	ldrh	r2, [r7, #2]
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	887b      	ldrh	r3, [r7, #2]
 80064a8:	0a1b      	lsrs	r3, r3, #8
 80064aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	887a      	ldrh	r2, [r7, #2]
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	701a      	strb	r2, [r3, #0]
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	0a1b      	lsrs	r3, r3, #8
 80064de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	0a1b      	lsrs	r3, r3, #8
 8006502:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00d      	beq.n	8006552 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	1c53      	adds	r3, r2, #1
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	6179      	str	r1, [r7, #20]
 8006542:	7812      	ldrb	r2, [r2, #0]
 8006544:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3b01      	subs	r3, #1
 800654a:	607b      	str	r3, [r7, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f1      	bne.n	8006536 <mem_cpy+0x1a>
	}
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800655e:	b480      	push	{r7}
 8006560:	b087      	sub	sp, #28
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	617a      	str	r2, [r7, #20]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3b01      	subs	r3, #1
 800657e:	607b      	str	r3, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f3      	bne.n	800656e <mem_set+0x10>
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006594:	b480      	push	{r7}
 8006596:	b089      	sub	sp, #36	; 0x24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	61fa      	str	r2, [r7, #28]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	4619      	mov	r1, r3
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	61ba      	str	r2, [r7, #24]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	1acb      	subs	r3, r1, r3
 80065c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	607b      	str	r3, [r7, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <mem_cmp+0x40>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0eb      	beq.n	80065ac <mem_cmp+0x18>

	return r;
 80065d4:	697b      	ldr	r3, [r7, #20]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3724      	adds	r7, #36	; 0x24
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065ec:	e002      	b.n	80065f4 <chk_chr+0x12>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3301      	adds	r3, #1
 80065f2:	607b      	str	r3, [r7, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <chk_chr+0x26>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	4293      	cmp	r3, r2
 8006606:	d1f2      	bne.n	80065ee <chk_chr+0xc>
	return *str;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	781b      	ldrb	r3, [r3, #0]
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <lock_fs+0x22>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	4618      	mov	r0, r3
 800662c:	f003 fc8a 	bl	8009f44 <ff_req_grant>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <lock_fs+0x22>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <lock_fs+0x24>
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00d      	beq.n	8006672 <unlock_fs+0x2e>
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	d00a      	beq.n	8006672 <unlock_fs+0x2e>
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b0b      	cmp	r3, #11
 8006660:	d007      	beq.n	8006672 <unlock_fs+0x2e>
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	2b0f      	cmp	r3, #15
 8006666:	d004      	beq.n	8006672 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	4618      	mov	r0, r3
 800666e:	f003 fc7e 	bl	8009f6e <ff_rel_grant>
	}
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	e029      	b.n	80066e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006690:	4a27      	ldr	r2, [pc, #156]	; (8006730 <chk_lock+0xb4>)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	4413      	add	r3, r2
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01d      	beq.n	80066da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800669e:	4a24      	ldr	r2, [pc, #144]	; (8006730 <chk_lock+0xb4>)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	4413      	add	r3, r2
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d116      	bne.n	80066de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80066b0:	4a1f      	ldr	r2, [pc, #124]	; (8006730 <chk_lock+0xb4>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	4413      	add	r3, r2
 80066b8:	3304      	adds	r3, #4
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d10c      	bne.n	80066de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80066c4:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <chk_lock+0xb4>)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	4413      	add	r3, r2
 80066cc:	3308      	adds	r3, #8
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d102      	bne.n	80066de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80066d8:	e007      	b.n	80066ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80066da:	2301      	movs	r3, #1
 80066dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d9d2      	bls.n	8006690 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d109      	bne.n	8006704 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <chk_lock+0x80>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d101      	bne.n	8006700 <chk_lock+0x84>
 80066fc:	2300      	movs	r3, #0
 80066fe:	e010      	b.n	8006722 <chk_lock+0xa6>
 8006700:	2312      	movs	r3, #18
 8006702:	e00e      	b.n	8006722 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d108      	bne.n	800671c <chk_lock+0xa0>
 800670a:	4a09      	ldr	r2, [pc, #36]	; (8006730 <chk_lock+0xb4>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	4413      	add	r3, r2
 8006712:	330c      	adds	r3, #12
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671a:	d101      	bne.n	8006720 <chk_lock+0xa4>
 800671c:	2310      	movs	r3, #16
 800671e:	e000      	b.n	8006722 <chk_lock+0xa6>
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	200010d8 	.word	0x200010d8

08006734 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	e002      	b.n	8006746 <enq_lock+0x12>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3301      	adds	r3, #1
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d806      	bhi.n	800675a <enq_lock+0x26>
 800674c:	4a09      	ldr	r2, [pc, #36]	; (8006774 <enq_lock+0x40>)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	4413      	add	r3, r2
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f2      	bne.n	8006740 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b02      	cmp	r3, #2
 800675e:	bf14      	ite	ne
 8006760:	2301      	movne	r3, #1
 8006762:	2300      	moveq	r3, #0
 8006764:	b2db      	uxtb	r3, r3
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	200010d8 	.word	0x200010d8

08006778 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e01f      	b.n	80067c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006788:	4a41      	ldr	r2, [pc, #260]	; (8006890 <inc_lock+0x118>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	4413      	add	r3, r2
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d113      	bne.n	80067c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800679a:	4a3d      	ldr	r2, [pc, #244]	; (8006890 <inc_lock+0x118>)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	4413      	add	r3, r2
 80067a2:	3304      	adds	r3, #4
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d109      	bne.n	80067c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80067ae:	4a38      	ldr	r2, [pc, #224]	; (8006890 <inc_lock+0x118>)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	4413      	add	r3, r2
 80067b6:	3308      	adds	r3, #8
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80067be:	429a      	cmp	r2, r3
 80067c0:	d006      	beq.n	80067d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d9dc      	bls.n	8006788 <inc_lock+0x10>
 80067ce:	e000      	b.n	80067d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80067d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d132      	bne.n	800683e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e002      	b.n	80067e4 <inc_lock+0x6c>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d806      	bhi.n	80067f8 <inc_lock+0x80>
 80067ea:	4a29      	ldr	r2, [pc, #164]	; (8006890 <inc_lock+0x118>)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	4413      	add	r3, r2
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f2      	bne.n	80067de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d101      	bne.n	8006802 <inc_lock+0x8a>
 80067fe:	2300      	movs	r3, #0
 8006800:	e040      	b.n	8006884 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4922      	ldr	r1, [pc, #136]	; (8006890 <inc_lock+0x118>)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	440b      	add	r3, r1
 800680e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	491e      	ldr	r1, [pc, #120]	; (8006890 <inc_lock+0x118>)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	440b      	add	r3, r1
 800681c:	3304      	adds	r3, #4
 800681e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695a      	ldr	r2, [r3, #20]
 8006824:	491a      	ldr	r1, [pc, #104]	; (8006890 <inc_lock+0x118>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	440b      	add	r3, r1
 800682c:	3308      	adds	r3, #8
 800682e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006830:	4a17      	ldr	r2, [pc, #92]	; (8006890 <inc_lock+0x118>)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	4413      	add	r3, r2
 8006838:	330c      	adds	r3, #12
 800683a:	2200      	movs	r2, #0
 800683c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <inc_lock+0xe0>
 8006844:	4a12      	ldr	r2, [pc, #72]	; (8006890 <inc_lock+0x118>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	4413      	add	r3, r2
 800684c:	330c      	adds	r3, #12
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <inc_lock+0xe0>
 8006854:	2300      	movs	r3, #0
 8006856:	e015      	b.n	8006884 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <inc_lock+0xf8>
 800685e:	4a0c      	ldr	r2, [pc, #48]	; (8006890 <inc_lock+0x118>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4413      	add	r3, r2
 8006866:	330c      	adds	r3, #12
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	e001      	b.n	8006874 <inc_lock+0xfc>
 8006870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006874:	4906      	ldr	r1, [pc, #24]	; (8006890 <inc_lock+0x118>)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	440b      	add	r3, r1
 800687c:	330c      	adds	r3, #12
 800687e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	200010d8 	.word	0x200010d8

08006894 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3b01      	subs	r3, #1
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d825      	bhi.n	80068f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80068a8:	4a17      	ldr	r2, [pc, #92]	; (8006908 <dec_lock+0x74>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	4413      	add	r3, r2
 80068b0:	330c      	adds	r3, #12
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80068b6:	89fb      	ldrh	r3, [r7, #14]
 80068b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068bc:	d101      	bne.n	80068c2 <dec_lock+0x2e>
 80068be:	2300      	movs	r3, #0
 80068c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80068c2:	89fb      	ldrh	r3, [r7, #14]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <dec_lock+0x3a>
 80068c8:	89fb      	ldrh	r3, [r7, #14]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80068ce:	4a0e      	ldr	r2, [pc, #56]	; (8006908 <dec_lock+0x74>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	4413      	add	r3, r2
 80068d6:	330c      	adds	r3, #12
 80068d8:	89fa      	ldrh	r2, [r7, #14]
 80068da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80068dc:	89fb      	ldrh	r3, [r7, #14]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d105      	bne.n	80068ee <dec_lock+0x5a>
 80068e2:	4a09      	ldr	r2, [pc, #36]	; (8006908 <dec_lock+0x74>)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	4413      	add	r3, r2
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	737b      	strb	r3, [r7, #13]
 80068f2:	e001      	b.n	80068f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80068f4:	2302      	movs	r3, #2
 80068f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80068f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	200010d8 	.word	0x200010d8

0800690c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e010      	b.n	800693c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800691a:	4a0d      	ldr	r2, [pc, #52]	; (8006950 <clear_lock+0x44>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	4413      	add	r3, r2
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	429a      	cmp	r2, r3
 8006928:	d105      	bne.n	8006936 <clear_lock+0x2a>
 800692a:	4a09      	ldr	r2, [pc, #36]	; (8006950 <clear_lock+0x44>)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	4413      	add	r3, r2
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d9eb      	bls.n	800691a <clear_lock+0xe>
	}
}
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	200010d8 	.word	0x200010d8

08006954 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	78db      	ldrb	r3, [r3, #3]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d034      	beq.n	80069d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	7858      	ldrb	r0, [r3, #1]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006978:	2301      	movs	r3, #1
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	f7ff fd0e 	bl	800639c <disk_write>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006986:	2301      	movs	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
 800698a:	e022      	b.n	80069d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	1ad2      	subs	r2, r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d217      	bcs.n	80069d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	789b      	ldrb	r3, [r3, #2]
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	e010      	b.n	80069cc <sync_window+0x78>
					wsect += fs->fsize;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4413      	add	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	7858      	ldrb	r0, [r3, #1]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069be:	2301      	movs	r3, #1
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	f7ff fceb 	bl	800639c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d8eb      	bhi.n	80069aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d01b      	beq.n	8006a2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ffad 	bl	8006954 <sync_window>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d113      	bne.n	8006a2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7858      	ldrb	r0, [r3, #1]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a0e:	2301      	movs	r3, #1
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	f7ff fca3 	bl	800635c <disk_read>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff ff87 	bl	8006954 <sync_window>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d159      	bne.n	8006b04 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d149      	bne.n	8006aec <sync_fs+0xb4>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	791b      	ldrb	r3, [r3, #4]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d145      	bne.n	8006aec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	899b      	ldrh	r3, [r3, #12]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	f7ff fd76 	bl	800655e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3338      	adds	r3, #56	; 0x38
 8006a76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a7a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fd05 	bl	800648e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3338      	adds	r3, #56	; 0x38
 8006a88:	4921      	ldr	r1, [pc, #132]	; (8006b10 <sync_fs+0xd8>)
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff fd1a 	bl	80064c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3338      	adds	r3, #56	; 0x38
 8006a94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a98:	491e      	ldr	r1, [pc, #120]	; (8006b14 <sync_fs+0xdc>)
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fd12 	bl	80064c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3338      	adds	r3, #56	; 0x38
 8006aa4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7ff fd08 	bl	80064c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3338      	adds	r3, #56	; 0x38
 8006ab8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f7ff fcfe 	bl	80064c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7858      	ldrb	r0, [r3, #1]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f7ff fc5b 	bl	800639c <disk_write>
			fs->fsi_flag = 0;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2200      	movs	r2, #0
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fc71 	bl	80063dc <disk_ioctl>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <sync_fs+0xcc>
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	41615252 	.word	0x41615252
 8006b14:	61417272 	.word	0x61417272

08006b18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	3b02      	subs	r3, #2
 8006b26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	3b02      	subs	r3, #2
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d301      	bcc.n	8006b38 <clust2sect+0x20>
 8006b34:	2300      	movs	r3, #0
 8006b36:	e008      	b.n	8006b4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	895b      	ldrh	r3, [r3, #10]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	fb03 f202 	mul.w	r2, r3, r2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	4413      	add	r3, r2
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b086      	sub	sp, #24
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d904      	bls.n	8006b76 <get_fat+0x20>
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d302      	bcc.n	8006b7c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006b76:	2301      	movs	r3, #1
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e0bb      	b.n	8006cf4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	f000 8083 	beq.w	8006c92 <get_fat+0x13c>
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	f300 80a7 	bgt.w	8006ce0 <get_fat+0x18a>
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d002      	beq.n	8006b9c <get_fat+0x46>
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d056      	beq.n	8006c48 <get_fat+0xf2>
 8006b9a:	e0a1      	b.n	8006ce0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	899b      	ldrh	r3, [r3, #12]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bba:	4413      	add	r3, r2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6938      	ldr	r0, [r7, #16]
 8006bc0:	f7ff ff0c 	bl	80069dc <move_window>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 808d 	bne.w	8006ce6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	60fa      	str	r2, [r7, #12]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	8992      	ldrh	r2, [r2, #12]
 8006bd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bda:	fb02 f201 	mul.w	r2, r2, r1
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4413      	add	r3, r2
 8006be4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006be8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	899b      	ldrh	r3, [r3, #12]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6938      	ldr	r0, [r7, #16]
 8006c00:	f7ff feec 	bl	80069dc <move_window>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d16f      	bne.n	8006cea <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	899b      	ldrh	r3, [r3, #12]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c16:	fb02 f201 	mul.w	r2, r2, r1
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	461a      	mov	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <get_fat+0xe8>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	091b      	lsrs	r3, r3, #4
 8006c3c:	e002      	b.n	8006c44 <get_fat+0xee>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c44:	617b      	str	r3, [r7, #20]
			break;
 8006c46:	e055      	b.n	8006cf4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	899b      	ldrh	r3, [r3, #12]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	4619      	mov	r1, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6938      	ldr	r0, [r7, #16]
 8006c62:	f7ff febb 	bl	80069dc <move_window>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d140      	bne.n	8006cee <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	8992      	ldrh	r2, [r2, #12]
 8006c7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c7e:	fb02 f200 	mul.w	r2, r2, r0
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	440b      	add	r3, r1
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fbc6 	bl	8006418 <ld_word>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	617b      	str	r3, [r7, #20]
			break;
 8006c90:	e030      	b.n	8006cf4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	899b      	ldrh	r3, [r3, #12]
 8006c9a:	089b      	lsrs	r3, r3, #2
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f7ff fe96 	bl	80069dc <move_window>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d11d      	bne.n	8006cf2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	8992      	ldrh	r2, [r2, #12]
 8006cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cc8:	fb02 f200 	mul.w	r2, r2, r0
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	440b      	add	r3, r1
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fbb9 	bl	8006448 <ld_dword>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cdc:	617b      	str	r3, [r7, #20]
			break;
 8006cde:	e009      	b.n	8006cf4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e006      	b.n	8006cf4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ce6:	bf00      	nop
 8006ce8:	e004      	b.n	8006cf4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cea:	bf00      	nop
 8006cec:	e002      	b.n	8006cf4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006cee:	bf00      	nop
 8006cf0:	e000      	b.n	8006cf4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006cf2:	bf00      	nop
		}
	}

	return val;
 8006cf4:	697b      	ldr	r3, [r7, #20]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006cfe:	b590      	push	{r4, r7, lr}
 8006d00:	b089      	sub	sp, #36	; 0x24
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	f240 8102 	bls.w	8006f1a <put_fat+0x21c>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	f080 80fc 	bcs.w	8006f1a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	f000 80b6 	beq.w	8006e98 <put_fat+0x19a>
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	f300 80fd 	bgt.w	8006f2c <put_fat+0x22e>
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d003      	beq.n	8006d3e <put_fat+0x40>
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	f000 8083 	beq.w	8006e42 <put_fat+0x144>
 8006d3c:	e0f6      	b.n	8006f2c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4413      	add	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	899b      	ldrh	r3, [r3, #12]
 8006d54:	4619      	mov	r1, r3
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff fe3b 	bl	80069dc <move_window>
 8006d66:	4603      	mov	r3, r0
 8006d68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d6a:	7ffb      	ldrb	r3, [r7, #31]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f040 80d6 	bne.w	8006f1e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	61ba      	str	r2, [r7, #24]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	8992      	ldrh	r2, [r2, #12]
 8006d82:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d86:	fb02 f200 	mul.w	r2, r2, r0
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <put_fat+0xb8>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	b25a      	sxtb	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b25b      	sxtb	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	e001      	b.n	8006dba <put_fat+0xbc>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	899b      	ldrh	r3, [r3, #12]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dd4:	4413      	add	r3, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f7ff fdff 	bl	80069dc <move_window>
 8006dde:	4603      	mov	r3, r0
 8006de0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006de2:	7ffb      	ldrb	r3, [r7, #31]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 809c 	bne.w	8006f22 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	899b      	ldrh	r3, [r3, #12]
 8006df4:	461a      	mov	r2, r3
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dfc:	fb02 f200 	mul.w	r2, r2, r0
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	440b      	add	r3, r1
 8006e04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <put_fat+0x11a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	e00e      	b.n	8006e36 <put_fat+0x138>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	f023 030f 	bic.w	r3, r3, #15
 8006e22:	b25a      	sxtb	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	0a1b      	lsrs	r3, r3, #8
 8006e28:	b25b      	sxtb	r3, r3
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	b25b      	sxtb	r3, r3
 8006e30:	4313      	orrs	r3, r2
 8006e32:	b25b      	sxtb	r3, r3
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	70da      	strb	r2, [r3, #3]
			break;
 8006e40:	e074      	b.n	8006f2c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	899b      	ldrh	r3, [r3, #12]
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4619      	mov	r1, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e56:	4413      	add	r3, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff fdbe 	bl	80069dc <move_window>
 8006e60:	4603      	mov	r3, r0
 8006e62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e64:	7ffb      	ldrb	r3, [r7, #31]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d15d      	bne.n	8006f26 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	8992      	ldrh	r2, [r2, #12]
 8006e78:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e7c:	fb02 f200 	mul.w	r2, r2, r0
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	440b      	add	r3, r1
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	b292      	uxth	r2, r2
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff faff 	bl	800648e <st_word>
			fs->wflag = 1;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	70da      	strb	r2, [r3, #3]
			break;
 8006e96:	e049      	b.n	8006f2c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	899b      	ldrh	r3, [r3, #12]
 8006ea0:	089b      	lsrs	r3, r3, #2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eac:	4413      	add	r3, r2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fd93 	bl	80069dc <move_window>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006eba:	7ffb      	ldrb	r3, [r7, #31]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d134      	bne.n	8006f2a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	8992      	ldrh	r2, [r2, #12]
 8006ed4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ed8:	fb02 f200 	mul.w	r2, r2, r0
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	440b      	add	r3, r1
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fab1 	bl	8006448 <ld_dword>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006eec:	4323      	orrs	r3, r4
 8006eee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	8992      	ldrh	r2, [r2, #12]
 8006efe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f02:	fb02 f200 	mul.w	r2, r2, r0
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	440b      	add	r3, r1
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fad9 	bl	80064c4 <st_dword>
			fs->wflag = 1;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	70da      	strb	r2, [r3, #3]
			break;
 8006f18:	e008      	b.n	8006f2c <put_fat+0x22e>
		}
	}
 8006f1a:	bf00      	nop
 8006f1c:	e006      	b.n	8006f2c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006f1e:	bf00      	nop
 8006f20:	e004      	b.n	8006f2c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006f2a:	bf00      	nop
	return res;
 8006f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3724      	adds	r7, #36	; 0x24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd90      	pop	{r4, r7, pc}

08006f36 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b088      	sub	sp, #32
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d904      	bls.n	8006f5c <remove_chain+0x26>
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d301      	bcc.n	8006f60 <remove_chain+0x2a>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e04b      	b.n	8006ff8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00c      	beq.n	8006f80 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	69b8      	ldr	r0, [r7, #24]
 8006f6e:	f7ff fec6 	bl	8006cfe <put_fat>
 8006f72:	4603      	mov	r3, r0
 8006f74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006f76:	7ffb      	ldrb	r3, [r7, #31]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <remove_chain+0x4a>
 8006f7c:	7ffb      	ldrb	r3, [r7, #31]
 8006f7e:	e03b      	b.n	8006ff8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7ff fde7 	bl	8006b56 <get_fat>
 8006f88:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d031      	beq.n	8006ff4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <remove_chain+0x64>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e02e      	b.n	8006ff8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fa0:	d101      	bne.n	8006fa6 <remove_chain+0x70>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e028      	b.n	8006ff8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	69b8      	ldr	r0, [r7, #24]
 8006fac:	f7ff fea7 	bl	8006cfe <put_fat>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006fb4:	7ffb      	ldrb	r3, [r7, #31]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <remove_chain+0x88>
 8006fba:	7ffb      	ldrb	r3, [r7, #31]
 8006fbc:	e01c      	b.n	8006ff8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	3b02      	subs	r3, #2
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d20b      	bcs.n	8006fe4 <remove_chain+0xae>
			fs->free_clst++;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	791b      	ldrb	r3, [r3, #4]
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d3c6      	bcc.n	8006f80 <remove_chain+0x4a>
 8006ff2:	e000      	b.n	8006ff6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006ff4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3720      	adds	r7, #32
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10d      	bne.n	8007032 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <create_chain+0x2c>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	429a      	cmp	r2, r3
 800702a:	d31b      	bcc.n	8007064 <create_chain+0x64>
 800702c:	2301      	movs	r3, #1
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	e018      	b.n	8007064 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fd8e 	bl	8006b56 <get_fat>
 800703a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d801      	bhi.n	8007046 <create_chain+0x46>
 8007042:	2301      	movs	r3, #1
 8007044:	e070      	b.n	8007128 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704c:	d101      	bne.n	8007052 <create_chain+0x52>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	e06a      	b.n	8007128 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	429a      	cmp	r2, r3
 800705a:	d201      	bcs.n	8007060 <create_chain+0x60>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	e063      	b.n	8007128 <create_chain+0x128>
		scl = clst;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	3301      	adds	r3, #1
 800706c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	429a      	cmp	r2, r3
 8007076:	d307      	bcc.n	8007088 <create_chain+0x88>
				ncl = 2;
 8007078:	2302      	movs	r3, #2
 800707a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	d901      	bls.n	8007088 <create_chain+0x88>
 8007084:	2300      	movs	r3, #0
 8007086:	e04f      	b.n	8007128 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007088:	69f9      	ldr	r1, [r7, #28]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff fd63 	bl	8006b56 <get_fat>
 8007090:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00e      	beq.n	80070b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d003      	beq.n	80070a6 <create_chain+0xa6>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070a4:	d101      	bne.n	80070aa <create_chain+0xaa>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	e03e      	b.n	8007128 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d1da      	bne.n	8007068 <create_chain+0x68>
 80070b2:	2300      	movs	r3, #0
 80070b4:	e038      	b.n	8007128 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80070b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070bc:	69f9      	ldr	r1, [r7, #28]
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f7ff fe1d 	bl	8006cfe <put_fat>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <create_chain+0xe2>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d006      	beq.n	80070e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6938      	ldr	r0, [r7, #16]
 80070da:	f7ff fe10 	bl	8006cfe <put_fat>
 80070de:	4603      	mov	r3, r0
 80070e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d116      	bne.n	8007116 <create_chain+0x116>
		fs->last_clst = ncl;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	3b02      	subs	r3, #2
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d804      	bhi.n	8007106 <create_chain+0x106>
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	1e5a      	subs	r2, r3, #1
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	791b      	ldrb	r3, [r3, #4]
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	b2da      	uxtb	r2, r3
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	711a      	strb	r2, [r3, #4]
 8007114:	e007      	b.n	8007126 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d102      	bne.n	8007122 <create_chain+0x122>
 800711c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007120:	e000      	b.n	8007124 <create_chain+0x124>
 8007122:	2301      	movs	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007126:	69fb      	ldr	r3, [r7, #28]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	3304      	adds	r3, #4
 8007146:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	899b      	ldrh	r3, [r3, #12]
 800714c:	461a      	mov	r2, r3
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	fbb3 f3f2 	udiv	r3, r3, r2
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	8952      	ldrh	r2, [r2, #10]
 8007158:	fbb3 f3f2 	udiv	r3, r3, r2
 800715c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1d1a      	adds	r2, r3, #4
 8007162:	613a      	str	r2, [r7, #16]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <clmt_clust+0x42>
 800716e:	2300      	movs	r3, #0
 8007170:	e010      	b.n	8007194 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	429a      	cmp	r2, r3
 8007178:	d307      	bcc.n	800718a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3304      	adds	r3, #4
 8007186:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007188:	e7e9      	b.n	800715e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800718a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4413      	add	r3, r2
}
 8007194:	4618      	mov	r0, r3
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071b6:	d204      	bcs.n	80071c2 <dir_sdi+0x22>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80071c2:	2302      	movs	r3, #2
 80071c4:	e071      	b.n	80072aa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <dir_sdi+0x46>
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d902      	bls.n	80071e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10c      	bne.n	8007206 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	8912      	ldrh	r2, [r2, #8]
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d301      	bcc.n	80071fc <dir_sdi+0x5c>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e056      	b.n	80072aa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	61da      	str	r2, [r3, #28]
 8007204:	e02d      	b.n	8007262 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	895b      	ldrh	r3, [r3, #10]
 800720a:	461a      	mov	r2, r3
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	899b      	ldrh	r3, [r3, #12]
 8007210:	fb03 f302 	mul.w	r3, r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007216:	e019      	b.n	800724c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6979      	ldr	r1, [r7, #20]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fc9a 	bl	8006b56 <get_fat>
 8007222:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800722a:	d101      	bne.n	8007230 <dir_sdi+0x90>
 800722c:	2301      	movs	r3, #1
 800722e:	e03c      	b.n	80072aa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d904      	bls.n	8007240 <dir_sdi+0xa0>
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	429a      	cmp	r2, r3
 800723e:	d301      	bcc.n	8007244 <dir_sdi+0xa4>
 8007240:	2302      	movs	r3, #2
 8007242:	e032      	b.n	80072aa <dir_sdi+0x10a>
			ofs -= csz;
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	429a      	cmp	r2, r3
 8007252:	d2e1      	bcs.n	8007218 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007254:	6979      	ldr	r1, [r7, #20]
 8007256:	6938      	ldr	r0, [r7, #16]
 8007258:	f7ff fc5e 	bl	8006b18 <clust2sect>
 800725c:	4602      	mov	r2, r0
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <dir_sdi+0xd4>
 8007270:	2302      	movs	r3, #2
 8007272:	e01a      	b.n	80072aa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	69da      	ldr	r2, [r3, #28]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	899b      	ldrh	r3, [r3, #12]
 800727c:	4619      	mov	r1, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	fbb3 f3f1 	udiv	r3, r3, r1
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	899b      	ldrh	r3, [r3, #12]
 8007294:	461a      	mov	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	fbb3 f0f2 	udiv	r0, r3, r2
 800729c:	fb02 f200 	mul.w	r2, r2, r0
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	18ca      	adds	r2, r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	3320      	adds	r3, #32
 80072c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <dir_next+0x28>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072d8:	d301      	bcc.n	80072de <dir_next+0x2c>
 80072da:	2304      	movs	r3, #4
 80072dc:	e0bb      	b.n	8007456 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	899b      	ldrh	r3, [r3, #12]
 80072e2:	461a      	mov	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80072ea:	fb02 f201 	mul.w	r2, r2, r1
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 809d 	bne.w	8007430 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	8912      	ldrh	r2, [r2, #8]
 8007310:	4293      	cmp	r3, r2
 8007312:	f0c0 808d 	bcc.w	8007430 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	61da      	str	r2, [r3, #28]
 800731c:	2304      	movs	r3, #4
 800731e:	e09a      	b.n	8007456 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	899b      	ldrh	r3, [r3, #12]
 8007324:	461a      	mov	r2, r3
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	fbb3 f3f2 	udiv	r3, r3, r2
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	8952      	ldrh	r2, [r2, #10]
 8007330:	3a01      	subs	r2, #1
 8007332:	4013      	ands	r3, r2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d17b      	bne.n	8007430 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	4619      	mov	r1, r3
 8007340:	4610      	mov	r0, r2
 8007342:	f7ff fc08 	bl	8006b56 <get_fat>
 8007346:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d801      	bhi.n	8007352 <dir_next+0xa0>
 800734e:	2302      	movs	r3, #2
 8007350:	e081      	b.n	8007456 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007358:	d101      	bne.n	800735e <dir_next+0xac>
 800735a:	2301      	movs	r3, #1
 800735c:	e07b      	b.n	8007456 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	429a      	cmp	r2, r3
 8007366:	d359      	bcc.n	800741c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d104      	bne.n	8007378 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	61da      	str	r2, [r3, #28]
 8007374:	2304      	movs	r3, #4
 8007376:	e06e      	b.n	8007456 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7ff fe3d 	bl	8007000 <create_chain>
 8007386:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <dir_next+0xe0>
 800738e:	2307      	movs	r3, #7
 8007390:	e061      	b.n	8007456 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <dir_next+0xea>
 8007398:	2302      	movs	r3, #2
 800739a:	e05c      	b.n	8007456 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073a2:	d101      	bne.n	80073a8 <dir_next+0xf6>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e056      	b.n	8007456 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff fad3 	bl	8006954 <sync_window>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <dir_next+0x106>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e04e      	b.n	8007456 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	899b      	ldrh	r3, [r3, #12]
 80073c2:	461a      	mov	r2, r3
 80073c4:	2100      	movs	r1, #0
 80073c6:	f7ff f8ca 	bl	800655e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff fba1 	bl	8006b18 <clust2sect>
 80073d6:	4602      	mov	r2, r0
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	635a      	str	r2, [r3, #52]	; 0x34
 80073dc:	e012      	b.n	8007404 <dir_next+0x152>
						fs->wflag = 1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff fab5 	bl	8006954 <sync_window>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <dir_next+0x142>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e030      	b.n	8007456 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	3301      	adds	r3, #1
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	635a      	str	r2, [r3, #52]	; 0x34
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	895b      	ldrh	r3, [r3, #10]
 8007408:	461a      	mov	r2, r3
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4293      	cmp	r3, r2
 800740e:	d3e6      	bcc.n	80073de <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007422:	6979      	ldr	r1, [r7, #20]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fb77 	bl	8006b18 <clust2sect>
 800742a:	4602      	mov	r2, r0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	899b      	ldrh	r3, [r3, #12]
 8007440:	461a      	mov	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	fbb3 f0f2 	udiv	r0, r3, r2
 8007448:	fb02 f200 	mul.w	r2, r2, r0
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	18ca      	adds	r2, r1, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b086      	sub	sp, #24
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff fe95 	bl	80071a0 <dir_sdi>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d12b      	bne.n	80074d8 <dir_alloc+0x7a>
		n = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	4619      	mov	r1, r3
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff faa6 	bl	80069dc <move_window>
 8007490:	4603      	mov	r3, r0
 8007492:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d11d      	bne.n	80074d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2be5      	cmp	r3, #229	; 0xe5
 80074a2:	d004      	beq.n	80074ae <dir_alloc+0x50>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d107      	bne.n	80074be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	3301      	adds	r3, #1
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d102      	bne.n	80074c2 <dir_alloc+0x64>
 80074bc:	e00c      	b.n	80074d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80074be:	2300      	movs	r3, #0
 80074c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80074c2:	2101      	movs	r1, #1
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff fef4 	bl	80072b2 <dir_next>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0d7      	beq.n	8007484 <dir_alloc+0x26>
 80074d4:	e000      	b.n	80074d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80074d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d101      	bne.n	80074e2 <dir_alloc+0x84>
 80074de:	2307      	movs	r3, #7
 80074e0:	75fb      	strb	r3, [r7, #23]
	return res;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	331a      	adds	r3, #26
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe ff8c 	bl	8006418 <ld_word>
 8007500:	4603      	mov	r3, r0
 8007502:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d109      	bne.n	8007520 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe ff81 	bl	8006418 <ld_word>
 8007516:	4603      	mov	r3, r0
 8007518:	041b      	lsls	r3, r3, #16
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007520:	68fb      	ldr	r3, [r7, #12]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	331a      	adds	r3, #26
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	b292      	uxth	r2, r2
 800753e:	4611      	mov	r1, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe ffa4 	bl	800648e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b03      	cmp	r3, #3
 800754c:	d109      	bne.n	8007562 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f103 0214 	add.w	r2, r3, #20
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	b29b      	uxth	r3, r3
 800755a:	4619      	mov	r1, r3
 800755c:	4610      	mov	r0, r2
 800755e:	f7fe ff96 	bl	800648e <st_word>
	}
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b086      	sub	sp, #24
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007578:	2100      	movs	r1, #0
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fe10 	bl	80071a0 <dir_sdi>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <dir_find+0x24>
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	e03e      	b.n	800760c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4619      	mov	r1, r3
 8007594:	6938      	ldr	r0, [r7, #16]
 8007596:	f7ff fa21 	bl	80069dc <move_window>
 800759a:	4603      	mov	r3, r0
 800759c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d12f      	bne.n	8007604 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <dir_find+0x4e>
 80075b2:	2304      	movs	r3, #4
 80075b4:	75fb      	strb	r3, [r7, #23]
 80075b6:	e028      	b.n	800760a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	330b      	adds	r3, #11
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	330b      	adds	r3, #11
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <dir_find+0x86>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a18      	ldr	r0, [r3, #32]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3324      	adds	r3, #36	; 0x24
 80075e2:	220b      	movs	r2, #11
 80075e4:	4619      	mov	r1, r3
 80075e6:	f7fe ffd5 	bl	8006594 <mem_cmp>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80075f0:	2100      	movs	r1, #0
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fe5d 	bl	80072b2 <dir_next>
 80075f8:	4603      	mov	r3, r0
 80075fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0c5      	beq.n	800758e <dir_find+0x24>
 8007602:	e002      	b.n	800760a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007608:	bf00      	nop

	return res;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007622:	2101      	movs	r1, #1
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff ff1a 	bl	800745e <dir_alloc>
 800762a:	4603      	mov	r3, r0
 800762c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d11c      	bne.n	800766e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	4619      	mov	r1, r3
 800763a:	68b8      	ldr	r0, [r7, #8]
 800763c:	f7ff f9ce 	bl	80069dc <move_window>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d111      	bne.n	800766e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	2220      	movs	r2, #32
 8007650:	2100      	movs	r1, #0
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe ff83 	bl	800655e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a18      	ldr	r0, [r3, #32]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3324      	adds	r3, #36	; 0x24
 8007660:	220b      	movs	r2, #11
 8007662:	4619      	mov	r1, r3
 8007664:	f7fe ff5a 	bl	800651c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2201      	movs	r2, #1
 800766c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2200      	movs	r2, #0
 8007686:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d04e      	beq.n	800772e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007698:	e021      	b.n	80076de <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1a      	ldr	r2, [r3, #32]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	1c59      	adds	r1, r3, #1
 80076a2:	6179      	str	r1, [r7, #20]
 80076a4:	4413      	add	r3, r2
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	d100      	bne.n	80076b2 <get_fileinfo+0x3a>
 80076b0:	e015      	b.n	80076de <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2b05      	cmp	r3, #5
 80076b6:	d101      	bne.n	80076bc <get_fileinfo+0x44>
 80076b8:	23e5      	movs	r3, #229	; 0xe5
 80076ba:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b09      	cmp	r3, #9
 80076c0:	d106      	bne.n	80076d0 <get_fileinfo+0x58>
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	613a      	str	r2, [r7, #16]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	4413      	add	r3, r2
 80076cc:	222e      	movs	r2, #46	; 0x2e
 80076ce:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	613a      	str	r2, [r7, #16]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	4413      	add	r3, r2
 80076da:	7bfa      	ldrb	r2, [r7, #15]
 80076dc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b0a      	cmp	r3, #10
 80076e2:	d9da      	bls.n	800769a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4413      	add	r3, r2
 80076ea:	3309      	adds	r3, #9
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	7ada      	ldrb	r2, [r3, #11]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	331c      	adds	r3, #28
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fea1 	bl	8006448 <ld_dword>
 8007706:	4602      	mov	r2, r0
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	3316      	adds	r3, #22
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fe98 	bl	8006448 <ld_dword>
 8007718:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	b29a      	uxth	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	80da      	strh	r2, [r3, #6]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	b29a      	uxth	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	809a      	strh	r2, [r3, #4]
 800772c:	e000      	b.n	8007730 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800772e:	bf00      	nop
}
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3324      	adds	r3, #36	; 0x24
 800774c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800774e:	220b      	movs	r2, #11
 8007750:	2120      	movs	r1, #32
 8007752:	68b8      	ldr	r0, [r7, #8]
 8007754:	f7fe ff03 	bl	800655e <mem_set>
	si = i = 0; ni = 8;
 8007758:	2300      	movs	r3, #0
 800775a:	613b      	str	r3, [r7, #16]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	2308      	movs	r3, #8
 8007762:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	61fa      	str	r2, [r7, #28]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007772:	7efb      	ldrb	r3, [r7, #27]
 8007774:	2b20      	cmp	r3, #32
 8007776:	d94e      	bls.n	8007816 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007778:	7efb      	ldrb	r3, [r7, #27]
 800777a:	2b2f      	cmp	r3, #47	; 0x2f
 800777c:	d006      	beq.n	800778c <create_name+0x54>
 800777e:	7efb      	ldrb	r3, [r7, #27]
 8007780:	2b5c      	cmp	r3, #92	; 0x5c
 8007782:	d110      	bne.n	80077a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007784:	e002      	b.n	800778c <create_name+0x54>
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	3301      	adds	r3, #1
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b2f      	cmp	r3, #47	; 0x2f
 8007796:	d0f6      	beq.n	8007786 <create_name+0x4e>
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	4413      	add	r3, r2
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b5c      	cmp	r3, #92	; 0x5c
 80077a2:	d0f0      	beq.n	8007786 <create_name+0x4e>
			break;
 80077a4:	e038      	b.n	8007818 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80077a6:	7efb      	ldrb	r3, [r7, #27]
 80077a8:	2b2e      	cmp	r3, #46	; 0x2e
 80077aa:	d003      	beq.n	80077b4 <create_name+0x7c>
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d30c      	bcc.n	80077ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2b0b      	cmp	r3, #11
 80077b8:	d002      	beq.n	80077c0 <create_name+0x88>
 80077ba:	7efb      	ldrb	r3, [r7, #27]
 80077bc:	2b2e      	cmp	r3, #46	; 0x2e
 80077be:	d001      	beq.n	80077c4 <create_name+0x8c>
 80077c0:	2306      	movs	r3, #6
 80077c2:	e044      	b.n	800784e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80077c4:	2308      	movs	r3, #8
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	230b      	movs	r3, #11
 80077ca:	617b      	str	r3, [r7, #20]
			continue;
 80077cc:	e022      	b.n	8007814 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80077ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da04      	bge.n	80077e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80077d6:	7efb      	ldrb	r3, [r7, #27]
 80077d8:	3b80      	subs	r3, #128	; 0x80
 80077da:	4a1f      	ldr	r2, [pc, #124]	; (8007858 <create_name+0x120>)
 80077dc:	5cd3      	ldrb	r3, [r2, r3]
 80077de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80077e0:	7efb      	ldrb	r3, [r7, #27]
 80077e2:	4619      	mov	r1, r3
 80077e4:	481d      	ldr	r0, [pc, #116]	; (800785c <create_name+0x124>)
 80077e6:	f7fe fefc 	bl	80065e2 <chk_chr>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <create_name+0xbc>
 80077f0:	2306      	movs	r3, #6
 80077f2:	e02c      	b.n	800784e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80077f4:	7efb      	ldrb	r3, [r7, #27]
 80077f6:	2b60      	cmp	r3, #96	; 0x60
 80077f8:	d905      	bls.n	8007806 <create_name+0xce>
 80077fa:	7efb      	ldrb	r3, [r7, #27]
 80077fc:	2b7a      	cmp	r3, #122	; 0x7a
 80077fe:	d802      	bhi.n	8007806 <create_name+0xce>
 8007800:	7efb      	ldrb	r3, [r7, #27]
 8007802:	3b20      	subs	r3, #32
 8007804:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	613a      	str	r2, [r7, #16]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	4413      	add	r3, r2
 8007810:	7efa      	ldrb	r2, [r7, #27]
 8007812:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007814:	e7a6      	b.n	8007764 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007816:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	441a      	add	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <create_name+0xf4>
 8007828:	2306      	movs	r3, #6
 800782a:	e010      	b.n	800784e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2be5      	cmp	r3, #229	; 0xe5
 8007832:	d102      	bne.n	800783a <create_name+0x102>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2205      	movs	r2, #5
 8007838:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800783a:	7efb      	ldrb	r3, [r7, #27]
 800783c:	2b20      	cmp	r3, #32
 800783e:	d801      	bhi.n	8007844 <create_name+0x10c>
 8007840:	2204      	movs	r2, #4
 8007842:	e000      	b.n	8007846 <create_name+0x10e>
 8007844:	2200      	movs	r2, #0
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	330b      	adds	r3, #11
 800784a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800784c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	0800eec4 	.word	0x0800eec4
 800785c:	0800edc8 	.word	0x0800edc8

08007860 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007874:	e002      	b.n	800787c <follow_path+0x1c>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	3301      	adds	r3, #1
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b2f      	cmp	r3, #47	; 0x2f
 8007882:	d0f8      	beq.n	8007876 <follow_path+0x16>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b5c      	cmp	r3, #92	; 0x5c
 800788a:	d0f4      	beq.n	8007876 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b1f      	cmp	r3, #31
 8007898:	d80a      	bhi.n	80078b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2280      	movs	r2, #128	; 0x80
 800789e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80078a2:	2100      	movs	r1, #0
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fc7b 	bl	80071a0 <dir_sdi>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
 80078ae:	e048      	b.n	8007942 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80078b0:	463b      	mov	r3, r7
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff ff3f 	bl	8007738 <create_name>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d139      	bne.n	8007938 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fe50 	bl	800756a <dir_find>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d12c      	bne.n	800793c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d127      	bne.n	800793c <follow_path+0xdc>
 80078ec:	2305      	movs	r3, #5
 80078ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80078f0:	e024      	b.n	800793c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d121      	bne.n	8007940 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	799b      	ldrb	r3, [r3, #6]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007908:	2305      	movs	r3, #5
 800790a:	75fb      	strb	r3, [r7, #23]
 800790c:	e019      	b.n	8007942 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	8992      	ldrh	r2, [r2, #12]
 800791c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007920:	fb02 f200 	mul.w	r2, r2, r0
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	440b      	add	r3, r1
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7ff fdde 	bl	80074ec <ld_clust>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007936:	e7bb      	b.n	80078b0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007938:	bf00      	nop
 800793a:	e002      	b.n	8007942 <follow_path+0xe2>
				break;
 800793c:	bf00      	nop
 800793e:	e000      	b.n	8007942 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007940:	bf00      	nop
			}
		}
	}

	return res;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007958:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d031      	beq.n	80079c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e002      	b.n	8007970 <get_ldnumber+0x24>
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	3301      	adds	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b20      	cmp	r3, #32
 8007976:	d903      	bls.n	8007980 <get_ldnumber+0x34>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b3a      	cmp	r3, #58	; 0x3a
 800797e:	d1f4      	bne.n	800796a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b3a      	cmp	r3, #58	; 0x3a
 8007986:	d11c      	bne.n	80079c2 <get_ldnumber+0x76>
			tp = *path;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	60fa      	str	r2, [r7, #12]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	3b30      	subs	r3, #48	; 0x30
 8007998:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b09      	cmp	r3, #9
 800799e:	d80e      	bhi.n	80079be <get_ldnumber+0x72>
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d10a      	bne.n	80079be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d107      	bne.n	80079be <get_ldnumber+0x72>
					vol = (int)i;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	3301      	adds	r3, #1
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	e002      	b.n	80079c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80079c2:	2300      	movs	r3, #0
 80079c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80079c6:	693b      	ldr	r3, [r7, #16]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	70da      	strb	r2, [r3, #3]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ea:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fe fff4 	bl	80069dc <move_window>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <check_fs+0x2a>
 80079fa:	2304      	movs	r3, #4
 80079fc:	e038      	b.n	8007a70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3338      	adds	r3, #56	; 0x38
 8007a02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fd06 	bl	8006418 <ld_word>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d001      	beq.n	8007a1c <check_fs+0x48>
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e029      	b.n	8007a70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a22:	2be9      	cmp	r3, #233	; 0xe9
 8007a24:	d009      	beq.n	8007a3a <check_fs+0x66>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a2c:	2beb      	cmp	r3, #235	; 0xeb
 8007a2e:	d11e      	bne.n	8007a6e <check_fs+0x9a>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a36:	2b90      	cmp	r3, #144	; 0x90
 8007a38:	d119      	bne.n	8007a6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3338      	adds	r3, #56	; 0x38
 8007a3e:	3336      	adds	r3, #54	; 0x36
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fd01 	bl	8006448 <ld_dword>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a4c:	4a0a      	ldr	r2, [pc, #40]	; (8007a78 <check_fs+0xa4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d101      	bne.n	8007a56 <check_fs+0x82>
 8007a52:	2300      	movs	r3, #0
 8007a54:	e00c      	b.n	8007a70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3338      	adds	r3, #56	; 0x38
 8007a5a:	3352      	adds	r3, #82	; 0x52
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fcf3 	bl	8006448 <ld_dword>
 8007a62:	4603      	mov	r3, r0
 8007a64:	4a05      	ldr	r2, [pc, #20]	; (8007a7c <check_fs+0xa8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d101      	bne.n	8007a6e <check_fs+0x9a>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e000      	b.n	8007a70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007a6e:	2302      	movs	r3, #2
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	00544146 	.word	0x00544146
 8007a7c:	33544146 	.word	0x33544146

08007a80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b096      	sub	sp, #88	; 0x58
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff ff59 	bl	800794c <get_ldnumber>
 8007a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da01      	bge.n	8007aa6 <find_volume+0x26>
 8007aa2:	230b      	movs	r3, #11
 8007aa4:	e26c      	b.n	8007f80 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007aa6:	4aa4      	ldr	r2, [pc, #656]	; (8007d38 <find_volume+0x2b8>)
 8007aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <find_volume+0x3a>
 8007ab6:	230c      	movs	r3, #12
 8007ab8:	e262      	b.n	8007f80 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8007aba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007abc:	f7fe fdac 	bl	8006618 <lock_fs>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <find_volume+0x4a>
 8007ac6:	230f      	movs	r3, #15
 8007ac8:	e25a      	b.n	8007f80 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ace:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	f023 0301 	bic.w	r3, r3, #1
 8007ad6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d01a      	beq.n	8007b16 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	785b      	ldrb	r3, [r3, #1]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fbf9 	bl	80062dc <disk_status>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007af0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10c      	bne.n	8007b16 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d007      	beq.n	8007b12 <find_volume+0x92>
 8007b02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007b0e:	230a      	movs	r3, #10
 8007b10:	e236      	b.n	8007f80 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8007b12:	2300      	movs	r3, #0
 8007b14:	e234      	b.n	8007f80 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fbf1 	bl	8006310 <disk_initialize>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b40:	2303      	movs	r3, #3
 8007b42:	e21d      	b.n	8007f80 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <find_volume+0xda>
 8007b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007b56:	230a      	movs	r3, #10
 8007b58:	e212      	b.n	8007f80 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	7858      	ldrb	r0, [r3, #1]
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	330c      	adds	r3, #12
 8007b62:	461a      	mov	r2, r3
 8007b64:	2102      	movs	r1, #2
 8007b66:	f7fe fc39 	bl	80063dc <disk_ioctl>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <find_volume+0xf4>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e205      	b.n	8007f80 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	899b      	ldrh	r3, [r3, #12]
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d80d      	bhi.n	8007b9a <find_volume+0x11a>
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	899b      	ldrh	r3, [r3, #12]
 8007b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b86:	d308      	bcc.n	8007b9a <find_volume+0x11a>
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	899b      	ldrh	r3, [r3, #12]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	899b      	ldrh	r3, [r3, #12]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <find_volume+0x11e>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e1f0      	b.n	8007f80 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007ba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ba6:	f7ff ff15 	bl	80079d4 <check_fs>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d14b      	bne.n	8007c50 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bb8:	2300      	movs	r3, #0
 8007bba:	643b      	str	r3, [r7, #64]	; 0x40
 8007bbc:	e01f      	b.n	8007bfe <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007bcc:	4413      	add	r3, r2
 8007bce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d006      	beq.n	8007be8 <find_volume+0x168>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	3308      	adds	r3, #8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe fc32 	bl	8006448 <ld_dword>
 8007be4:	4602      	mov	r2, r0
 8007be6:	e000      	b.n	8007bea <find_volume+0x16a>
 8007be8:	2200      	movs	r2, #0
 8007bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007bf2:	440b      	add	r3, r1
 8007bf4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8007bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d9dc      	bls.n	8007bbe <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007c04:	2300      	movs	r3, #0
 8007c06:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <find_volume+0x194>
 8007c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c10:	3b01      	subs	r3, #1
 8007c12:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007c22:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <find_volume+0x1b6>
 8007c2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c2e:	f7ff fed1 	bl	80079d4 <check_fs>
 8007c32:	4603      	mov	r3, r0
 8007c34:	e000      	b.n	8007c38 <find_volume+0x1b8>
 8007c36:	2303      	movs	r3, #3
 8007c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d905      	bls.n	8007c50 <find_volume+0x1d0>
 8007c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c46:	3301      	adds	r3, #1
 8007c48:	643b      	str	r3, [r7, #64]	; 0x40
 8007c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d9e1      	bls.n	8007c14 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d101      	bne.n	8007c5c <find_volume+0x1dc>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e191      	b.n	8007f80 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d901      	bls.n	8007c68 <find_volume+0x1e8>
 8007c64:	230d      	movs	r3, #13
 8007c66:	e18b      	b.n	8007f80 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	3338      	adds	r3, #56	; 0x38
 8007c6c:	330b      	adds	r3, #11
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fbd2 	bl	8006418 <ld_word>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7a:	899b      	ldrh	r3, [r3, #12]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d001      	beq.n	8007c84 <find_volume+0x204>
 8007c80:	230d      	movs	r3, #13
 8007c82:	e17d      	b.n	8007f80 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	3338      	adds	r3, #56	; 0x38
 8007c88:	3316      	adds	r3, #22
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fbc4 	bl	8006418 <ld_word>
 8007c90:	4603      	mov	r3, r0
 8007c92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <find_volume+0x228>
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	3338      	adds	r3, #56	; 0x38
 8007c9e:	3324      	adds	r3, #36	; 0x24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fe fbd1 	bl	8006448 <ld_dword>
 8007ca6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	789b      	ldrb	r3, [r3, #2]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d005      	beq.n	8007ccc <find_volume+0x24c>
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	789b      	ldrb	r3, [r3, #2]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d001      	beq.n	8007ccc <find_volume+0x24c>
 8007cc8:	230d      	movs	r3, #13
 8007cca:	e159      	b.n	8007f80 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	789b      	ldrb	r3, [r3, #2]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	895b      	ldrh	r3, [r3, #10]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <find_volume+0x280>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	895b      	ldrh	r3, [r3, #10]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	895b      	ldrh	r3, [r3, #10]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <find_volume+0x284>
 8007d00:	230d      	movs	r3, #13
 8007d02:	e13d      	b.n	8007f80 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d06:	3338      	adds	r3, #56	; 0x38
 8007d08:	3311      	adds	r3, #17
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fb84 	bl	8006418 <ld_word>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	891b      	ldrh	r3, [r3, #8]
 8007d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d1e:	8992      	ldrh	r2, [r2, #12]
 8007d20:	0952      	lsrs	r2, r2, #5
 8007d22:	b292      	uxth	r2, r2
 8007d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d28:	fb02 f201 	mul.w	r2, r2, r1
 8007d2c:	1a9b      	subs	r3, r3, r2
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <find_volume+0x2bc>
 8007d34:	230d      	movs	r3, #13
 8007d36:	e123      	b.n	8007f80 <find_volume+0x500>
 8007d38:	200010d0 	.word	0x200010d0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	3338      	adds	r3, #56	; 0x38
 8007d40:	3313      	adds	r3, #19
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fb68 	bl	8006418 <ld_word>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <find_volume+0x2e0>
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	3338      	adds	r3, #56	; 0x38
 8007d56:	3320      	adds	r3, #32
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fb75 	bl	8006448 <ld_dword>
 8007d5e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	3338      	adds	r3, #56	; 0x38
 8007d64:	330e      	adds	r3, #14
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fb56 	bl	8006418 <ld_word>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <find_volume+0x2fa>
 8007d76:	230d      	movs	r3, #13
 8007d78:	e102      	b.n	8007f80 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7e:	4413      	add	r3, r2
 8007d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d82:	8911      	ldrh	r1, [r2, #8]
 8007d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d86:	8992      	ldrh	r2, [r2, #12]
 8007d88:	0952      	lsrs	r2, r2, #5
 8007d8a:	b292      	uxth	r2, r2
 8007d8c:	fbb1 f2f2 	udiv	r2, r1, r2
 8007d90:	b292      	uxth	r2, r2
 8007d92:	4413      	add	r3, r2
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d201      	bcs.n	8007da2 <find_volume+0x322>
 8007d9e:	230d      	movs	r3, #13
 8007da0:	e0ee      	b.n	8007f80 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007daa:	8952      	ldrh	r2, [r2, #10]
 8007dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <find_volume+0x33c>
 8007db8:	230d      	movs	r3, #13
 8007dba:	e0e1      	b.n	8007f80 <find_volume+0x500>
		fmt = FS_FAT32;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d802      	bhi.n	8007dd2 <find_volume+0x352>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d802      	bhi.n	8007de2 <find_volume+0x362>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	1c9a      	adds	r2, r3, #2
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007df0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df4:	441a      	add	r2, r3
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007dfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	441a      	add	r2, r3
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d11e      	bne.n	8007e4a <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	3338      	adds	r3, #56	; 0x38
 8007e10:	332a      	adds	r3, #42	; 0x2a
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fb00 	bl	8006418 <ld_word>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <find_volume+0x3a2>
 8007e1e:	230d      	movs	r3, #13
 8007e20:	e0ae      	b.n	8007f80 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	891b      	ldrh	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <find_volume+0x3ae>
 8007e2a:	230d      	movs	r3, #13
 8007e2c:	e0a8      	b.n	8007f80 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	3338      	adds	r3, #56	; 0x38
 8007e32:	332c      	adds	r3, #44	; 0x2c
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fb07 	bl	8006448 <ld_dword>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	647b      	str	r3, [r7, #68]	; 0x44
 8007e48:	e01f      	b.n	8007e8a <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	891b      	ldrh	r3, [r3, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <find_volume+0x3d6>
 8007e52:	230d      	movs	r3, #13
 8007e54:	e094      	b.n	8007f80 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5c:	441a      	add	r2, r3
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d103      	bne.n	8007e72 <find_volume+0x3f2>
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	e00a      	b.n	8007e88 <find_volume+0x408>
 8007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e74:	69da      	ldr	r2, [r3, #28]
 8007e76:	4613      	mov	r3, r2
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	085a      	lsrs	r2, r3, #1
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e88:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	6a1a      	ldr	r2, [r3, #32]
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	899b      	ldrh	r3, [r3, #12]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e96:	440b      	add	r3, r1
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e9c:	8989      	ldrh	r1, [r1, #12]
 8007e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d201      	bcs.n	8007eaa <find_volume+0x42a>
 8007ea6:	230d      	movs	r3, #13
 8007ea8:	e06a      	b.n	8007f80 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eb0:	619a      	str	r2, [r3, #24]
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	2280      	movs	r2, #128	; 0x80
 8007ebe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d149      	bne.n	8007f5c <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	3338      	adds	r3, #56	; 0x38
 8007ecc:	3330      	adds	r3, #48	; 0x30
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe faa2 	bl	8006418 <ld_word>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d140      	bne.n	8007f5c <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007edc:	3301      	adds	r3, #1
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ee2:	f7fe fd7b 	bl	80069dc <move_window>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d137      	bne.n	8007f5c <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	2200      	movs	r2, #0
 8007ef0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	3338      	adds	r3, #56	; 0x38
 8007ef6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fa8c 	bl	8006418 <ld_word>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d127      	bne.n	8007f5c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	3338      	adds	r3, #56	; 0x38
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe fa99 	bl	8006448 <ld_dword>
 8007f16:	4603      	mov	r3, r0
 8007f18:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <find_volume+0x508>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d11e      	bne.n	8007f5c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	3338      	adds	r3, #56	; 0x38
 8007f22:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fa8e 	bl	8006448 <ld_dword>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	4a17      	ldr	r2, [pc, #92]	; (8007f8c <find_volume+0x50c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d113      	bne.n	8007f5c <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	3338      	adds	r3, #56	; 0x38
 8007f38:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fa83 	bl	8006448 <ld_dword>
 8007f42:	4602      	mov	r2, r0
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	3338      	adds	r3, #56	; 0x38
 8007f4c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe fa79 	bl	8006448 <ld_dword>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007f62:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007f64:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <find_volume+0x510>)
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <find_volume+0x510>)
 8007f6e:	801a      	strh	r2, [r3, #0]
 8007f70:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <find_volume+0x510>)
 8007f72:	881a      	ldrh	r2, [r3, #0]
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f7a:	f7fe fcc7 	bl	800690c <clear_lock>
#endif
	return FR_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3758      	adds	r7, #88	; 0x58
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	41615252 	.word	0x41615252
 8007f8c:	61417272 	.word	0x61417272
 8007f90:	200010d4 	.word	0x200010d4

08007f94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f9e:	2309      	movs	r3, #9
 8007fa0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d02e      	beq.n	8008006 <validate+0x72>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d02a      	beq.n	8008006 <validate+0x72>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d025      	beq.n	8008006 <validate+0x72>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	889a      	ldrh	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	88db      	ldrh	r3, [r3, #6]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d11e      	bne.n	8008006 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fb23 	bl	8006618 <lock_fs>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d014      	beq.n	8008002 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	785b      	ldrb	r3, [r3, #1]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe f97c 	bl	80062dc <disk_status>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <validate+0x60>
				res = FR_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
 8007ff2:	e008      	b.n	8008006 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fb22 	bl	8006644 <unlock_fs>
 8008000:	e001      	b.n	8008006 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008002:	230f      	movs	r3, #15
 8008004:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d102      	bne.n	8008012 <validate+0x7e>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	e000      	b.n	8008014 <validate+0x80>
 8008012:	2300      	movs	r3, #0
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	6013      	str	r3, [r2, #0]
	return res;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008036:	f107 0310 	add.w	r3, r7, #16
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fc86 	bl	800794c <get_ldnumber>
 8008040:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	da01      	bge.n	800804c <f_mount+0x28>
 8008048:	230b      	movs	r3, #11
 800804a:	e048      	b.n	80080de <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800804c:	4a26      	ldr	r2, [pc, #152]	; (80080e8 <f_mount+0xc4>)
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008054:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00f      	beq.n	800807c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800805c:	69b8      	ldr	r0, [r7, #24]
 800805e:	f7fe fc55 	bl	800690c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	4618      	mov	r0, r3
 8008068:	f001 ff60 	bl	8009f2c <ff_del_syncobj>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <f_mount+0x52>
 8008072:	2302      	movs	r3, #2
 8008074:	e033      	b.n	80080de <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	b2da      	uxtb	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3310      	adds	r3, #16
 8008090:	4619      	mov	r1, r3
 8008092:	4610      	mov	r0, r2
 8008094:	f001 ff2f 	bl	8009ef6 <ff_cre_syncobj>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <f_mount+0x7e>
 800809e:	2302      	movs	r3, #2
 80080a0:	e01d      	b.n	80080de <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4910      	ldr	r1, [pc, #64]	; (80080e8 <f_mount+0xc4>)
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <f_mount+0x94>
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d001      	beq.n	80080bc <f_mount+0x98>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e010      	b.n	80080de <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80080bc:	f107 010c 	add.w	r1, r7, #12
 80080c0:	f107 0308 	add.w	r3, r7, #8
 80080c4:	2200      	movs	r2, #0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff fcda 	bl	8007a80 <find_volume>
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	7dfa      	ldrb	r2, [r7, #23]
 80080d4:	4611      	mov	r1, r2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe fab4 	bl	8006644 <unlock_fs>
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3720      	adds	r7, #32
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200010d0 	.word	0x200010d0

080080ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b098      	sub	sp, #96	; 0x60
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <f_open+0x18>
 8008100:	2309      	movs	r3, #9
 8008102:	e1c2      	b.n	800848a <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800810a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800810c:	79fa      	ldrb	r2, [r7, #7]
 800810e:	f107 0110 	add.w	r1, r7, #16
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff fcb2 	bl	8007a80 <find_volume>
 800811c:	4603      	mov	r3, r0
 800811e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008126:	2b00      	cmp	r3, #0
 8008128:	f040 819f 	bne.w	800846a <f_open+0x37e>
		dj.obj.fs = fs;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	f107 0314 	add.w	r3, r7, #20
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fb91 	bl	8007860 <follow_path>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008148:	2b00      	cmp	r3, #0
 800814a:	d11a      	bne.n	8008182 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800814c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008150:	b25b      	sxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	da03      	bge.n	800815e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008156:	2306      	movs	r3, #6
 8008158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800815c:	e011      	b.n	8008182 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	bf14      	ite	ne
 8008168:	2301      	movne	r3, #1
 800816a:	2300      	moveq	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	f107 0314 	add.w	r3, r7, #20
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fa80 	bl	800667c <chk_lock>
 800817c:	4603      	mov	r3, r0
 800817e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	f003 031c 	and.w	r3, r3, #28
 8008188:	2b00      	cmp	r3, #0
 800818a:	d07f      	beq.n	800828c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800818c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008190:	2b00      	cmp	r3, #0
 8008192:	d017      	beq.n	80081c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008194:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008198:	2b04      	cmp	r3, #4
 800819a:	d10e      	bne.n	80081ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800819c:	f7fe faca 	bl	8006734 <enq_lock>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d006      	beq.n	80081b4 <f_open+0xc8>
 80081a6:	f107 0314 	add.w	r3, r7, #20
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff fa32 	bl	8007614 <dir_register>
 80081b0:	4603      	mov	r3, r0
 80081b2:	e000      	b.n	80081b6 <f_open+0xca>
 80081b4:	2312      	movs	r3, #18
 80081b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	f043 0308 	orr.w	r3, r3, #8
 80081c0:	71fb      	strb	r3, [r7, #7]
 80081c2:	e010      	b.n	80081e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80081c4:	7ebb      	ldrb	r3, [r7, #26]
 80081c6:	f003 0311 	and.w	r3, r3, #17
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <f_open+0xea>
					res = FR_DENIED;
 80081ce:	2307      	movs	r3, #7
 80081d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80081d4:	e007      	b.n	80081e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80081d6:	79fb      	ldrb	r3, [r7, #7]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <f_open+0xfa>
 80081e0:	2308      	movs	r3, #8
 80081e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80081e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d168      	bne.n	80082c0 <f_open+0x1d4>
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d063      	beq.n	80082c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80081f8:	f7fd fe24 	bl	8005e44 <get_fattime>
 80081fc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008200:	330e      	adds	r3, #14
 8008202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe f95d 	bl	80064c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	3316      	adds	r3, #22
 800820e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe f957 	bl	80064c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	330b      	adds	r3, #11
 800821a:	2220      	movs	r2, #32
 800821c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff f961 	bl	80074ec <ld_clust>
 800822a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008230:	2200      	movs	r2, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff f979 	bl	800752a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823a:	331c      	adds	r3, #28
 800823c:	2100      	movs	r1, #0
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe f940 	bl	80064c4 <st_dword>
					fs->wflag = 1;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	2201      	movs	r2, #1
 8008248:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800824a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824c:	2b00      	cmp	r3, #0
 800824e:	d037      	beq.n	80082c0 <f_open+0x1d4>
						dw = fs->winsect;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008254:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008256:	f107 0314 	add.w	r3, r7, #20
 800825a:	2200      	movs	r2, #0
 800825c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fe69 	bl	8006f36 <remove_chain>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800826a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800826e:	2b00      	cmp	r3, #0
 8008270:	d126      	bne.n	80082c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fbb0 	bl	80069dc <move_window>
 800827c:	4603      	mov	r3, r0
 800827e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008286:	3a01      	subs	r2, #1
 8008288:	615a      	str	r2, [r3, #20]
 800828a:	e019      	b.n	80082c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800828c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008290:	2b00      	cmp	r3, #0
 8008292:	d115      	bne.n	80082c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008294:	7ebb      	ldrb	r3, [r7, #26]
 8008296:	f003 0310 	and.w	r3, r3, #16
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800829e:	2304      	movs	r3, #4
 80082a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082a4:	e00c      	b.n	80082c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d007      	beq.n	80082c0 <f_open+0x1d4>
 80082b0:	7ebb      	ldrb	r3, [r7, #26]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <f_open+0x1d4>
						res = FR_DENIED;
 80082ba:	2307      	movs	r3, #7
 80082bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80082c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d128      	bne.n	800831a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80082e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bf14      	ite	ne
 80082f2:	2301      	movne	r3, #1
 80082f4:	2300      	moveq	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	f107 0314 	add.w	r3, r7, #20
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe fa39 	bl	8006778 <inc_lock>
 8008306:	4602      	mov	r2, r0
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <f_open+0x22e>
 8008314:	2302      	movs	r3, #2
 8008316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800831a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800831e:	2b00      	cmp	r3, #0
 8008320:	f040 80a3 	bne.w	800846a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008328:	4611      	mov	r1, r2
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff f8de 	bl	80074ec <ld_clust>
 8008330:	4602      	mov	r2, r0
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	331c      	adds	r3, #28
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe f884 	bl	8006448 <ld_dword>
 8008340:	4602      	mov	r2, r0
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	88da      	ldrh	r2, [r3, #6]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	79fa      	ldrb	r2, [r7, #7]
 800835e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3330      	adds	r3, #48	; 0x30
 8008376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800837a:	2100      	movs	r1, #0
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe f8ee 	bl	800655e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	f003 0320 	and.w	r3, r3, #32
 8008388:	2b00      	cmp	r3, #0
 800838a:	d06e      	beq.n	800846a <f_open+0x37e>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d06a      	beq.n	800846a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	895b      	ldrh	r3, [r3, #10]
 80083a0:	461a      	mov	r2, r3
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	899b      	ldrh	r3, [r3, #12]
 80083a6:	fb03 f302 	mul.w	r3, r3, r2
 80083aa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	657b      	str	r3, [r7, #84]	; 0x54
 80083b8:	e016      	b.n	80083e8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fbc9 	bl	8006b56 <get_fat>
 80083c4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80083c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d802      	bhi.n	80083d2 <f_open+0x2e6>
 80083cc:	2302      	movs	r3, #2
 80083ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80083d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083d8:	d102      	bne.n	80083e0 <f_open+0x2f4>
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80083e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	657b      	str	r3, [r7, #84]	; 0x54
 80083e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d103      	bne.n	80083f8 <f_open+0x30c>
 80083f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d8e0      	bhi.n	80083ba <f_open+0x2ce>
				}
				fp->clust = clst;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80083fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008402:	2b00      	cmp	r3, #0
 8008404:	d131      	bne.n	800846a <f_open+0x37e>
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	899b      	ldrh	r3, [r3, #12]
 800840a:	461a      	mov	r2, r3
 800840c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800840e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008412:	fb02 f201 	mul.w	r2, r2, r1
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	2b00      	cmp	r3, #0
 800841a:	d026      	beq.n	800846a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fb79 	bl	8006b18 <clust2sect>
 8008426:	6478      	str	r0, [r7, #68]	; 0x44
 8008428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800842a:	2b00      	cmp	r3, #0
 800842c:	d103      	bne.n	8008436 <f_open+0x34a>
						res = FR_INT_ERR;
 800842e:	2302      	movs	r3, #2
 8008430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008434:	e019      	b.n	800846a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	899b      	ldrh	r3, [r3, #12]
 800843a:	461a      	mov	r2, r3
 800843c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800843e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008444:	441a      	add	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	7858      	ldrb	r0, [r3, #1]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	2301      	movs	r3, #1
 800845a:	f7fd ff7f 	bl	800635c <disk_read>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <f_open+0x37e>
 8008464:	2301      	movs	r3, #1
 8008466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800846a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <f_open+0x38c>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800847e:	4611      	mov	r1, r2
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe f8df 	bl	8006644 <unlock_fs>
 8008486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800848a:	4618      	mov	r0, r3
 800848c:	3760      	adds	r7, #96	; 0x60
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b08e      	sub	sp, #56	; 0x38
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	607a      	str	r2, [r7, #4]
 800849e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f107 0214 	add.w	r2, r7, #20
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7ff fd6e 	bl	8007f94 <validate>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80084be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d107      	bne.n	80084d6 <f_read+0x44>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	7d5b      	ldrb	r3, [r3, #21]
 80084ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80084ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <f_read+0x58>
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe f8b0 	bl	8006644 <unlock_fs>
 80084e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084e8:	e15d      	b.n	80087a6 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	7d1b      	ldrb	r3, [r3, #20]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d106      	bne.n	8008504 <f_read+0x72>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2107      	movs	r1, #7
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe f8a2 	bl	8006644 <unlock_fs>
 8008500:	2307      	movs	r3, #7
 8008502:	e150      	b.n	80087a6 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	429a      	cmp	r2, r3
 8008516:	f240 813c 	bls.w	8008792 <f_read+0x300>
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800851e:	e138      	b.n	8008792 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	8992      	ldrh	r2, [r2, #12]
 8008528:	fbb3 f1f2 	udiv	r1, r3, r2
 800852c:	fb02 f201 	mul.w	r2, r2, r1
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	2b00      	cmp	r3, #0
 8008534:	f040 80f3 	bne.w	800871e <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	8992      	ldrh	r2, [r2, #12]
 8008540:	fbb3 f3f2 	udiv	r3, r3, r2
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	8952      	ldrh	r2, [r2, #10]
 8008548:	3a01      	subs	r2, #1
 800854a:	4013      	ands	r3, r2
 800854c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d139      	bne.n	80085c8 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d103      	bne.n	8008564 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	633b      	str	r3, [r7, #48]	; 0x30
 8008562:	e013      	b.n	800858c <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d007      	beq.n	800857c <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	4619      	mov	r1, r3
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7fe fddc 	bl	8007130 <clmt_clust>
 8008578:	6338      	str	r0, [r7, #48]	; 0x30
 800857a:	e007      	b.n	800858c <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	4619      	mov	r1, r3
 8008584:	4610      	mov	r0, r2
 8008586:	f7fe fae6 	bl	8006b56 <get_fat>
 800858a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	2b01      	cmp	r3, #1
 8008590:	d809      	bhi.n	80085a6 <f_read+0x114>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2202      	movs	r2, #2
 8008596:	755a      	strb	r2, [r3, #21]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2102      	movs	r1, #2
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe f851 	bl	8006644 <unlock_fs>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e0ff      	b.n	80087a6 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085ac:	d109      	bne.n	80085c2 <f_read+0x130>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	755a      	strb	r2, [r3, #21]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2101      	movs	r1, #1
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe f843 	bl	8006644 <unlock_fs>
 80085be:	2301      	movs	r3, #1
 80085c0:	e0f1      	b.n	80087a6 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fe faa1 	bl	8006b18 <clust2sect>
 80085d6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d109      	bne.n	80085f2 <f_read+0x160>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2202      	movs	r2, #2
 80085e2:	755a      	strb	r2, [r3, #21]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2102      	movs	r1, #2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe f82b 	bl	8006644 <unlock_fs>
 80085ee:	2302      	movs	r3, #2
 80085f0:	e0d9      	b.n	80087a6 <f_read+0x314>
			sect += csect;
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	899b      	ldrh	r3, [r3, #12]
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	fbb3 f3f2 	udiv	r3, r3, r2
 8008606:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	2b00      	cmp	r3, #0
 800860c:	d046      	beq.n	800869c <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	4413      	add	r3, r2
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	8952      	ldrh	r2, [r2, #10]
 8008618:	4293      	cmp	r3, r2
 800861a:	d905      	bls.n	8008628 <f_read+0x196>
					cc = fs->csize - csect;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	895b      	ldrh	r3, [r3, #10]
 8008620:	461a      	mov	r2, r3
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	7858      	ldrb	r0, [r3, #1]
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008632:	f7fd fe93 	bl	800635c <disk_read>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d009      	beq.n	8008650 <f_read+0x1be>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	755a      	strb	r2, [r3, #21]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2101      	movs	r1, #1
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fffc 	bl	8006644 <unlock_fs>
 800864c:	2301      	movs	r3, #1
 800864e:	e0aa      	b.n	80087a6 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	7d1b      	ldrb	r3, [r3, #20]
 8008654:	b25b      	sxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	da18      	bge.n	800868c <f_read+0x1fa>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a1a      	ldr	r2, [r3, #32]
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008664:	429a      	cmp	r2, r3
 8008666:	d911      	bls.n	800868c <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a1a      	ldr	r2, [r3, #32]
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	8992      	ldrh	r2, [r2, #12]
 8008674:	fb02 f303 	mul.w	r3, r2, r3
 8008678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867a:	18d0      	adds	r0, r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	899b      	ldrh	r3, [r3, #12]
 8008686:	461a      	mov	r2, r3
 8008688:	f7fd ff48 	bl	800651c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	899b      	ldrh	r3, [r3, #12]
 8008690:	461a      	mov	r2, r3
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	fb02 f303 	mul.w	r3, r2, r3
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800869a:	e066      	b.n	800876a <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d038      	beq.n	8008718 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	7d1b      	ldrb	r3, [r3, #20]
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da1d      	bge.n	80086ec <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	7858      	ldrb	r0, [r3, #1]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a1a      	ldr	r2, [r3, #32]
 80086be:	2301      	movs	r3, #1
 80086c0:	f7fd fe6c 	bl	800639c <disk_write>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <f_read+0x24c>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	755a      	strb	r2, [r3, #21]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2101      	movs	r1, #1
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fd ffb5 	bl	8006644 <unlock_fs>
 80086da:	2301      	movs	r3, #1
 80086dc:	e063      	b.n	80087a6 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	7d1b      	ldrb	r3, [r3, #20]
 80086e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	7858      	ldrb	r0, [r3, #1]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086f6:	2301      	movs	r3, #1
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	f7fd fe2f 	bl	800635c <disk_read>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d009      	beq.n	8008718 <f_read+0x286>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	755a      	strb	r2, [r3, #21]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2101      	movs	r1, #1
 800870e:	4618      	mov	r0, r3
 8008710:	f7fd ff98 	bl	8006644 <unlock_fs>
 8008714:	2301      	movs	r3, #1
 8008716:	e046      	b.n	80087a6 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	899b      	ldrh	r3, [r3, #12]
 8008722:	4618      	mov	r0, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	8992      	ldrh	r2, [r2, #12]
 800872c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008730:	fb02 f201 	mul.w	r2, r2, r1
 8008734:	1a9b      	subs	r3, r3, r2
 8008736:	1ac3      	subs	r3, r0, r3
 8008738:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800873a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	429a      	cmp	r2, r3
 8008740:	d901      	bls.n	8008746 <f_read+0x2b4>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	8992      	ldrh	r2, [r2, #12]
 8008754:	fbb3 f0f2 	udiv	r0, r3, r2
 8008758:	fb02 f200 	mul.w	r2, r2, r0
 800875c:	1a9b      	subs	r3, r3, r2
 800875e:	440b      	add	r3, r1
 8008760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008762:	4619      	mov	r1, r3
 8008764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008766:	f7fd fed9 	bl	800651c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800876a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800876c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876e:	4413      	add	r3, r2
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	699a      	ldr	r2, [r3, #24]
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	441a      	add	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	619a      	str	r2, [r3, #24]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	441a      	add	r2, r3
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f47f aec3 	bne.w	8008520 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2100      	movs	r1, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd ff50 	bl	8006644 <unlock_fs>
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3738      	adds	r7, #56	; 0x38
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b08c      	sub	sp, #48	; 0x30
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	607a      	str	r2, [r7, #4]
 80087ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f107 0210 	add.w	r2, r7, #16
 80087cc:	4611      	mov	r1, r2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff fbe0 	bl	8007f94 <validate>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d107      	bne.n	80087f2 <f_write+0x44>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	7d5b      	ldrb	r3, [r3, #21]
 80087e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80087ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d009      	beq.n	8008806 <f_write+0x58>
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fd ff22 	bl	8006644 <unlock_fs>
 8008800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008804:	e192      	b.n	8008b2c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	7d1b      	ldrb	r3, [r3, #20]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <f_write+0x72>
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2107      	movs	r1, #7
 8008816:	4618      	mov	r0, r3
 8008818:	f7fd ff14 	bl	8006644 <unlock_fs>
 800881c:	2307      	movs	r3, #7
 800881e:	e185      	b.n	8008b2c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699a      	ldr	r2, [r3, #24]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	441a      	add	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	429a      	cmp	r2, r3
 800882e:	f080 816a 	bcs.w	8008b06 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	43db      	mvns	r3, r3
 8008838:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800883a:	e164      	b.n	8008b06 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	8992      	ldrh	r2, [r2, #12]
 8008844:	fbb3 f1f2 	udiv	r1, r3, r2
 8008848:	fb02 f201 	mul.w	r2, r2, r1
 800884c:	1a9b      	subs	r3, r3, r2
 800884e:	2b00      	cmp	r3, #0
 8008850:	f040 810f 	bne.w	8008a72 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	8992      	ldrh	r2, [r2, #12]
 800885c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	8952      	ldrh	r2, [r2, #10]
 8008864:	3a01      	subs	r2, #1
 8008866:	4013      	ands	r3, r2
 8008868:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d14d      	bne.n	800890c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10c      	bne.n	8008892 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11a      	bne.n	80088ba <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe fbb9 	bl	8007000 <create_chain>
 800888e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008890:	e013      	b.n	80088ba <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	4619      	mov	r1, r3
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7fe fc45 	bl	8007130 <clmt_clust>
 80088a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80088a8:	e007      	b.n	80088ba <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7fe fba4 	bl	8007000 <create_chain>
 80088b8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 8127 	beq.w	8008b10 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d109      	bne.n	80088dc <f_write+0x12e>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2202      	movs	r2, #2
 80088cc:	755a      	strb	r2, [r3, #21]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2102      	movs	r1, #2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fd feb6 	bl	8006644 <unlock_fs>
 80088d8:	2302      	movs	r3, #2
 80088da:	e127      	b.n	8008b2c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088e2:	d109      	bne.n	80088f8 <f_write+0x14a>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	755a      	strb	r2, [r3, #21]
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2101      	movs	r1, #1
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fd fea8 	bl	8006644 <unlock_fs>
 80088f4:	2301      	movs	r3, #1
 80088f6:	e119      	b.n	8008b2c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <f_write+0x15e>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	7d1b      	ldrb	r3, [r3, #20]
 8008910:	b25b      	sxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	da1d      	bge.n	8008952 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	7858      	ldrb	r0, [r3, #1]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6a1a      	ldr	r2, [r3, #32]
 8008924:	2301      	movs	r3, #1
 8008926:	f7fd fd39 	bl	800639c <disk_write>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <f_write+0x196>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2201      	movs	r2, #1
 8008934:	755a      	strb	r2, [r3, #21]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	2101      	movs	r1, #1
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd fe82 	bl	8006644 <unlock_fs>
 8008940:	2301      	movs	r3, #1
 8008942:	e0f3      	b.n	8008b2c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	7d1b      	ldrb	r3, [r3, #20]
 8008948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894c:	b2da      	uxtb	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	4619      	mov	r1, r3
 800895a:	4610      	mov	r0, r2
 800895c:	f7fe f8dc 	bl	8006b18 <clust2sect>
 8008960:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d109      	bne.n	800897c <f_write+0x1ce>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2202      	movs	r2, #2
 800896c:	755a      	strb	r2, [r3, #21]
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2102      	movs	r1, #2
 8008972:	4618      	mov	r0, r3
 8008974:	f7fd fe66 	bl	8006644 <unlock_fs>
 8008978:	2302      	movs	r3, #2
 800897a:	e0d7      	b.n	8008b2c <f_write+0x37e>
			sect += csect;
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	4413      	add	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	899b      	ldrh	r3, [r3, #12]
 8008988:	461a      	mov	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008990:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d048      	beq.n	8008a2a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	4413      	add	r3, r2
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	8952      	ldrh	r2, [r2, #10]
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d905      	bls.n	80089b2 <f_write+0x204>
					cc = fs->csize - csect;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	895b      	ldrh	r3, [r3, #10]
 80089aa:	461a      	mov	r2, r3
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	7858      	ldrb	r0, [r3, #1]
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	69f9      	ldr	r1, [r7, #28]
 80089bc:	f7fd fcee 	bl	800639c <disk_write>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <f_write+0x22c>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	755a      	strb	r2, [r3, #21]
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2101      	movs	r1, #1
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fd fe37 	bl	8006644 <unlock_fs>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e0a8      	b.n	8008b2c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6a1a      	ldr	r2, [r3, #32]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	6a3a      	ldr	r2, [r7, #32]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d918      	bls.n	8008a1a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6a1a      	ldr	r2, [r3, #32]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	8992      	ldrh	r2, [r2, #12]
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	69fa      	ldr	r2, [r7, #28]
 8008a00:	18d1      	adds	r1, r2, r3
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	899b      	ldrh	r3, [r3, #12]
 8008a06:	461a      	mov	r2, r3
 8008a08:	f7fd fd88 	bl	800651c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	7d1b      	ldrb	r3, [r3, #20]
 8008a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	899b      	ldrh	r3, [r3, #12]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	fb02 f303 	mul.w	r3, r2, r3
 8008a26:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008a28:	e050      	b.n	8008acc <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d01b      	beq.n	8008a6c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d215      	bcs.n	8008a6c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	7858      	ldrb	r0, [r3, #1]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	f7fd fc85 	bl	800635c <disk_read>
 8008a52:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d009      	beq.n	8008a6c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	755a      	strb	r2, [r3, #21]
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2101      	movs	r1, #1
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fd fdee 	bl	8006644 <unlock_fs>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e05f      	b.n	8008b2c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	899b      	ldrh	r3, [r3, #12]
 8008a76:	4618      	mov	r0, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	8992      	ldrh	r2, [r2, #12]
 8008a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a84:	fb02 f201 	mul.w	r2, r2, r1
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	1ac3      	subs	r3, r0, r3
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d901      	bls.n	8008a9a <f_write+0x2ec>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	8992      	ldrh	r2, [r2, #12]
 8008aa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008aac:	fb02 f200 	mul.w	r2, r2, r0
 8008ab0:	1a9b      	subs	r3, r3, r2
 8008ab2:	440b      	add	r3, r1
 8008ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab6:	69f9      	ldr	r1, [r7, #28]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fd fd2f 	bl	800651c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	7d1b      	ldrb	r3, [r3, #20]
 8008ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	4413      	add	r3, r2
 8008ad2:	61fb      	str	r3, [r7, #28]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	699a      	ldr	r2, [r3, #24]
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	441a      	add	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	619a      	str	r2, [r3, #24]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	bf38      	it	cc
 8008aec:	461a      	movcc	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	60da      	str	r2, [r3, #12]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	441a      	add	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f47f ae97 	bne.w	800883c <f_write+0x8e>
 8008b0e:	e000      	b.n	8008b12 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b10:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	7d1b      	ldrb	r3, [r3, #20]
 8008b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fd fd8d 	bl	8006644 <unlock_fs>
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3730      	adds	r7, #48	; 0x30
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f107 0208 	add.w	r2, r7, #8
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fa25 	bl	8007f94 <validate>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d16d      	bne.n	8008c30 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	7d1b      	ldrb	r3, [r3, #20]
 8008b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d067      	beq.n	8008c30 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7d1b      	ldrb	r3, [r3, #20]
 8008b64:	b25b      	sxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	da1a      	bge.n	8008ba0 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	7858      	ldrb	r0, [r3, #1]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1a      	ldr	r2, [r3, #32]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f7fd fc0f 	bl	800639c <disk_write>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d006      	beq.n	8008b92 <f_sync+0x5e>
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2101      	movs	r1, #1
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fd fd5b 	bl	8006644 <unlock_fs>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e055      	b.n	8008c3e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7d1b      	ldrb	r3, [r3, #20]
 8008b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ba0:	f7fd f950 	bl	8005e44 <get_fattime>
 8008ba4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f7fd ff14 	bl	80069dc <move_window>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d138      	bne.n	8008c30 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	330b      	adds	r3, #11
 8008bc8:	781a      	ldrb	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	330b      	adds	r3, #11
 8008bce:	f042 0220 	orr.w	r2, r2, #32
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	461a      	mov	r2, r3
 8008be0:	68f9      	ldr	r1, [r7, #12]
 8008be2:	f7fe fca2 	bl	800752a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f103 021c 	add.w	r2, r3, #28
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fd fc66 	bl	80064c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3316      	adds	r3, #22
 8008bfc:	6939      	ldr	r1, [r7, #16]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fd fc60 	bl	80064c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3312      	adds	r3, #18
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fd fc3f 	bl	800648e <st_word>
					fs->wflag = 1;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2201      	movs	r2, #1
 8008c14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fd ff0d 	bl	8006a38 <sync_fs>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	7d1b      	ldrb	r3, [r3, #20]
 8008c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	7dfa      	ldrb	r2, [r7, #23]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fd fd04 	bl	8006644 <unlock_fs>
 8008c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff ff70 	bl	8008b34 <f_sync>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d11d      	bne.n	8008c9a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f107 0208 	add.w	r2, r7, #8
 8008c64:	4611      	mov	r1, r2
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff f994 	bl	8007f94 <validate>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d111      	bne.n	8008c9a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fd fe0a 	bl	8006894 <dec_lock>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fd fcd5 	bl	8006644 <unlock_fs>
#endif
		}
	}
	return res;
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b090      	sub	sp, #64	; 0x40
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f107 0208 	add.w	r2, r7, #8
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff f96c 	bl	8007f94 <validate>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <f_lseek+0x2e>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	7d5b      	ldrb	r3, [r3, #21]
 8008cce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <f_lseek+0x4a>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fd fcae 	bl	8006644 <unlock_fs>
 8008ce8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cec:	e244      	b.n	8009178 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 80f2 	beq.w	8008edc <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cfe:	d164      	bne.n	8008dca <f_lseek+0x126>
			tbl = fp->cltbl;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	627a      	str	r2, [r7, #36]	; 0x24
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	617b      	str	r3, [r7, #20]
 8008d10:	2302      	movs	r3, #2
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d044      	beq.n	8008daa <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	613b      	str	r3, [r7, #16]
 8008d24:	2300      	movs	r3, #0
 8008d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	3302      	adds	r3, #2
 8008d2c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	3301      	adds	r3, #1
 8008d36:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fd ff0a 	bl	8006b56 <get_fat>
 8008d42:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d809      	bhi.n	8008d5e <f_lseek+0xba>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	755a      	strb	r2, [r3, #21]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	2102      	movs	r1, #2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fd fc75 	bl	8006644 <unlock_fs>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e20c      	b.n	8009178 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d64:	d109      	bne.n	8008d7a <f_lseek+0xd6>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	755a      	strb	r2, [r3, #21]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2101      	movs	r1, #1
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fd fc67 	bl	8006644 <unlock_fs>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e1fe      	b.n	8009178 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d0d4      	beq.n	8008d2e <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d809      	bhi.n	8008da0 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	1d1a      	adds	r2, r3, #4
 8008d90:	627a      	str	r2, [r7, #36]	; 0x24
 8008d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	1d1a      	adds	r2, r3, #4
 8008d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d3ba      	bcc.n	8008d20 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d803      	bhi.n	8008dc2 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	e1d1      	b.n	8009166 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008dc2:	2311      	movs	r3, #17
 8008dc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008dc8:	e1cd      	b.n	8009166 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d902      	bls.n	8008dda <f_lseek+0x136>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 81bf 	beq.w	8009166 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7fe f99e 	bl	8007130 <clmt_clust>
 8008df4:	4602      	mov	r2, r0
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f7fd fe88 	bl	8006b18 <clust2sect>
 8008e08:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d109      	bne.n	8008e24 <f_lseek+0x180>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	755a      	strb	r2, [r3, #21]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2102      	movs	r1, #2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fd fc12 	bl	8006644 <unlock_fs>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e1a9      	b.n	8009178 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	8992      	ldrh	r2, [r2, #12]
 8008e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	8952      	ldrh	r2, [r2, #10]
 8008e34:	3a01      	subs	r2, #1
 8008e36:	4013      	ands	r3, r2
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	8992      	ldrh	r2, [r2, #12]
 8008e46:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e4a:	fb02 f201 	mul.w	r2, r2, r1
 8008e4e:	1a9b      	subs	r3, r3, r2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8188 	beq.w	8009166 <f_lseek+0x4c2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	f000 8182 	beq.w	8009166 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7d1b      	ldrb	r3, [r3, #20]
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da1d      	bge.n	8008ea8 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	7858      	ldrb	r0, [r3, #1]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1a      	ldr	r2, [r3, #32]
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f7fd fa8e 	bl	800639c <disk_write>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <f_lseek+0x1f6>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	755a      	strb	r2, [r3, #21]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2101      	movs	r1, #1
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fd fbd7 	bl	8006644 <unlock_fs>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e16e      	b.n	8009178 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7d1b      	ldrb	r3, [r3, #20]
 8008e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	7858      	ldrb	r0, [r3, #1]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	f7fd fa51 	bl	800635c <disk_read>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d009      	beq.n	8008ed4 <f_lseek+0x230>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	755a      	strb	r2, [r3, #21]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2101      	movs	r1, #1
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fd fbba 	bl	8006644 <unlock_fs>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e151      	b.n	8009178 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	621a      	str	r2, [r3, #32]
 8008eda:	e144      	b.n	8009166 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d908      	bls.n	8008ef8 <f_lseek+0x254>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7d1b      	ldrb	r3, [r3, #20]
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	637b      	str	r3, [r7, #52]	; 0x34
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f06:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 80ce 	beq.w	80090ac <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	895b      	ldrh	r3, [r3, #10]
 8008f14:	461a      	mov	r2, r3
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	899b      	ldrh	r3, [r3, #12]
 8008f1a:	fb03 f302 	mul.w	r3, r3, r2
 8008f1e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01b      	beq.n	8008f5e <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	1e5a      	subs	r2, r3, #1
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	1e59      	subs	r1, r3, #1
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d30f      	bcc.n	8008f5e <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	1e5a      	subs	r2, r3, #1
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	425b      	negs	r3, r3
 8008f46:	401a      	ands	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f5c:	e02c      	b.n	8008fb8 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d123      	bne.n	8008fb2 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe f846 	bl	8007000 <create_chain>
 8008f74:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d109      	bne.n	8008f90 <f_lseek+0x2ec>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	755a      	strb	r2, [r3, #21]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2102      	movs	r1, #2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fd fb5c 	bl	8006644 <unlock_fs>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e0f3      	b.n	8009178 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f96:	d109      	bne.n	8008fac <f_lseek+0x308>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	755a      	strb	r2, [r3, #21]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fd fb4e 	bl	8006644 <unlock_fs>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e0e5      	b.n	8009178 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fb0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fb6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d076      	beq.n	80090ac <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 8008fbe:	e044      	b.n	800904a <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699a      	ldr	r2, [r3, #24]
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	441a      	add	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	7d1b      	ldrb	r3, [r3, #20]
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fe f80b 	bl	8007000 <create_chain>
 8008fea:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d108      	bne.n	8009004 <f_lseek+0x360>
							ofs = 0; break;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	e02c      	b.n	8009052 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fd fdaa 	bl	8006b56 <get_fat>
 8009002:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800900a:	d109      	bne.n	8009020 <f_lseek+0x37c>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	755a      	strb	r2, [r3, #21]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2101      	movs	r1, #1
 8009016:	4618      	mov	r0, r3
 8009018:	f7fd fb14 	bl	8006644 <unlock_fs>
 800901c:	2301      	movs	r3, #1
 800901e:	e0ab      	b.n	8009178 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	2b01      	cmp	r3, #1
 8009024:	d904      	bls.n	8009030 <f_lseek+0x38c>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800902c:	429a      	cmp	r2, r3
 800902e:	d309      	bcc.n	8009044 <f_lseek+0x3a0>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	755a      	strb	r2, [r3, #21]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2102      	movs	r1, #2
 800903a:	4618      	mov	r0, r3
 800903c:	f7fd fb02 	bl	8006644 <unlock_fs>
 8009040:	2302      	movs	r3, #2
 8009042:	e099      	b.n	8009178 <f_lseek+0x4d4>
					fp->clust = clst;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009048:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	429a      	cmp	r2, r3
 8009050:	d8b6      	bhi.n	8008fc0 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	441a      	add	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	899b      	ldrh	r3, [r3, #12]
 8009062:	461a      	mov	r2, r3
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	fbb3 f1f2 	udiv	r1, r3, r2
 800906a:	fb02 f201 	mul.w	r2, r2, r1
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01b      	beq.n	80090ac <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009078:	4618      	mov	r0, r3
 800907a:	f7fd fd4d 	bl	8006b18 <clust2sect>
 800907e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009082:	2b00      	cmp	r3, #0
 8009084:	d109      	bne.n	800909a <f_lseek+0x3f6>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2202      	movs	r2, #2
 800908a:	755a      	strb	r2, [r3, #21]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2102      	movs	r1, #2
 8009090:	4618      	mov	r0, r3
 8009092:	f7fd fad7 	bl	8006644 <unlock_fs>
 8009096:	2302      	movs	r3, #2
 8009098:	e06e      	b.n	8009178 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	899b      	ldrh	r3, [r3, #12]
 800909e:	461a      	mov	r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090a8:	4413      	add	r3, r2
 80090aa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	699a      	ldr	r2, [r3, #24]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d90a      	bls.n	80090ce <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699a      	ldr	r2, [r3, #24]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7d1b      	ldrb	r3, [r3, #20]
 80090c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	8992      	ldrh	r2, [r2, #12]
 80090d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80090da:	fb02 f201 	mul.w	r2, r2, r1
 80090de:	1a9b      	subs	r3, r3, r2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d040      	beq.n	8009166 <f_lseek+0x4c2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d03b      	beq.n	8009166 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7d1b      	ldrb	r3, [r3, #20]
 80090f2:	b25b      	sxtb	r3, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da1d      	bge.n	8009134 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	7858      	ldrb	r0, [r3, #1]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1a      	ldr	r2, [r3, #32]
 8009106:	2301      	movs	r3, #1
 8009108:	f7fd f948 	bl	800639c <disk_write>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <f_lseek+0x482>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	755a      	strb	r2, [r3, #21]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2101      	movs	r1, #1
 800911c:	4618      	mov	r0, r3
 800911e:	f7fd fa91 	bl	8006644 <unlock_fs>
 8009122:	2301      	movs	r3, #1
 8009124:	e028      	b.n	8009178 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7d1b      	ldrb	r3, [r3, #20]
 800912a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800912e:	b2da      	uxtb	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	7858      	ldrb	r0, [r3, #1]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800913e:	2301      	movs	r3, #1
 8009140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009142:	f7fd f90b 	bl	800635c <disk_read>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d009      	beq.n	8009160 <f_lseek+0x4bc>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	755a      	strb	r2, [r3, #21]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2101      	movs	r1, #1
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd fa74 	bl	8006644 <unlock_fs>
 800915c:	2301      	movs	r3, #1
 800915e:	e00b      	b.n	8009178 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009164:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800916c:	4611      	mov	r1, r2
 800916e:	4618      	mov	r0, r3
 8009170:	f7fd fa68 	bl	8006644 <unlock_fs>
 8009174:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009178:	4618      	mov	r0, r3
 800917a:	3740      	adds	r7, #64	; 0x40
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b090      	sub	sp, #64	; 0x40
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800918a:	f107 010c 	add.w	r1, r7, #12
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	2200      	movs	r2, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe fc74 	bl	8007a80 <find_volume>
 8009198:	4603      	mov	r3, r0
 800919a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800919e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d11f      	bne.n	80091e6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	f107 030c 	add.w	r3, r7, #12
 80091ac:	4611      	mov	r1, r2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe fb56 	bl	8007860 <follow_path>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80091ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d111      	bne.n	80091e6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80091c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80091c6:	b25b      	sxtb	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da03      	bge.n	80091d4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80091cc:	2306      	movs	r3, #6
 80091ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80091d2:	e008      	b.n	80091e6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d005      	beq.n	80091e6 <f_stat+0x66>
 80091da:	f107 030c 	add.w	r3, r7, #12
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fa49 	bl	8007678 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fd fa28 	bl	8006644 <unlock_fs>
 80091f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3740      	adds	r7, #64	; 0x40
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b092      	sub	sp, #72	; 0x48
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800920c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009210:	f107 030c 	add.w	r3, r7, #12
 8009214:	2200      	movs	r2, #0
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe fc32 	bl	8007a80 <find_volume>
 800921c:	4603      	mov	r3, r0
 800921e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009222:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 8099 	bne.w	800935e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800922c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	699a      	ldr	r2, [r3, #24]
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	3b02      	subs	r3, #2
 800923c:	429a      	cmp	r2, r3
 800923e:	d804      	bhi.n	800924a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	699a      	ldr	r2, [r3, #24]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	e089      	b.n	800935e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d128      	bne.n	80092a8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009256:	2302      	movs	r3, #2
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800925e:	f107 0314 	add.w	r3, r7, #20
 8009262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009264:	4618      	mov	r0, r3
 8009266:	f7fd fc76 	bl	8006b56 <get_fat>
 800926a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009272:	d103      	bne.n	800927c <f_getfree+0x7c>
 8009274:	2301      	movs	r3, #1
 8009276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800927a:	e063      	b.n	8009344 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	2b01      	cmp	r3, #1
 8009280:	d103      	bne.n	800928a <f_getfree+0x8a>
 8009282:	2302      	movs	r3, #2
 8009284:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009288:	e05c      	b.n	8009344 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d102      	bne.n	8009296 <f_getfree+0x96>
 8009290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009292:	3301      	adds	r3, #1
 8009294:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009298:	3301      	adds	r3, #1
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d3db      	bcc.n	800925e <f_getfree+0x5e>
 80092a6:	e04d      	b.n	8009344 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34
 80092b8:	2300      	movs	r3, #0
 80092ba:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80092bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d113      	bne.n	80092ea <f_getfree+0xea>
							res = move_window(fs, sect++);
 80092c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80092ca:	4619      	mov	r1, r3
 80092cc:	f7fd fb86 	bl	80069dc <move_window>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80092d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d131      	bne.n	8009342 <f_getfree+0x142>
							p = fs->win;
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	3338      	adds	r3, #56	; 0x38
 80092e2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	899b      	ldrh	r3, [r3, #12]
 80092e8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d10f      	bne.n	8009312 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80092f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092f4:	f7fd f890 	bl	8006418 <ld_word>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <f_getfree+0x104>
 80092fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009300:	3301      	adds	r3, #1
 8009302:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	3302      	adds	r3, #2
 8009308:	633b      	str	r3, [r7, #48]	; 0x30
 800930a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930c:	3b02      	subs	r3, #2
 800930e:	637b      	str	r3, [r7, #52]	; 0x34
 8009310:	e010      	b.n	8009334 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009314:	f7fd f898 	bl	8006448 <ld_dword>
 8009318:	4603      	mov	r3, r0
 800931a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <f_getfree+0x128>
 8009322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009324:	3301      	adds	r3, #1
 8009326:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	3304      	adds	r3, #4
 800932c:	633b      	str	r3, [r7, #48]	; 0x30
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009330:	3b04      	subs	r3, #4
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009336:	3b01      	subs	r3, #1
 8009338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800933a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1bd      	bne.n	80092bc <f_getfree+0xbc>
 8009340:	e000      	b.n	8009344 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009342:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009348:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800934e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	791a      	ldrb	r2, [r3, #4]
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	f042 0201 	orr.w	r2, r2, #1
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009360:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7fd f96c 	bl	8006644 <unlock_fs>
 800936c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009370:	4618      	mov	r0, r3
 8009372:	3748      	adds	r7, #72	; 0x48
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b096      	sub	sp, #88	; 0x58
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009380:	f107 0108 	add.w	r1, r7, #8
 8009384:	1d3b      	adds	r3, r7, #4
 8009386:	2202      	movs	r2, #2
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fb79 	bl	8007a80 <find_volume>
 800938e:	4603      	mov	r3, r0
 8009390:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8009398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 80f2 	bne.w	8009586 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	f107 030c 	add.w	r3, r7, #12
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fa58 	bl	8007860 <follow_path>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80093b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d102      	bne.n	80093c4 <f_mkdir+0x4c>
 80093be:	2308      	movs	r3, #8
 80093c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80093c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093c8:	2b04      	cmp	r3, #4
 80093ca:	f040 80dc 	bne.w	8009586 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80093ce:	f107 030c 	add.w	r3, r7, #12
 80093d2:	2100      	movs	r1, #0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fd fe13 	bl	8007000 <create_chain>
 80093da:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	895b      	ldrh	r3, [r3, #10]
 80093e0:	461a      	mov	r2, r3
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	899b      	ldrh	r3, [r3, #12]
 80093e6:	fb03 f302 	mul.w	r3, r3, r2
 80093ea:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80093f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d102      	bne.n	80093fe <f_mkdir+0x86>
 80093f8:	2307      	movs	r3, #7
 80093fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80093fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009400:	2b01      	cmp	r3, #1
 8009402:	d102      	bne.n	800940a <f_mkdir+0x92>
 8009404:	2302      	movs	r3, #2
 8009406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800940a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800940c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009410:	d102      	bne.n	8009418 <f_mkdir+0xa0>
 8009412:	2301      	movs	r3, #1
 8009414:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8009418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800941c:	2b00      	cmp	r3, #0
 800941e:	d106      	bne.n	800942e <f_mkdir+0xb6>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4618      	mov	r0, r3
 8009424:	f7fd fa96 	bl	8006954 <sync_window>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800942e:	f7fc fd09 	bl	8005e44 <get_fattime>
 8009432:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8009434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009438:	2b00      	cmp	r3, #0
 800943a:	d16c      	bne.n	8009516 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009440:	4618      	mov	r0, r3
 8009442:	f7fd fb69 	bl	8006b18 <clust2sect>
 8009446:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	3338      	adds	r3, #56	; 0x38
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	899b      	ldrh	r3, [r3, #12]
 8009452:	461a      	mov	r2, r3
 8009454:	2100      	movs	r1, #0
 8009456:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009458:	f7fd f881 	bl	800655e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800945c:	220b      	movs	r2, #11
 800945e:	2120      	movs	r1, #32
 8009460:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009462:	f7fd f87c 	bl	800655e <mem_set>
					dir[DIR_Name] = '.';
 8009466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009468:	222e      	movs	r2, #46	; 0x2e
 800946a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946e:	330b      	adds	r3, #11
 8009470:	2210      	movs	r2, #16
 8009472:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009476:	3316      	adds	r3, #22
 8009478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800947a:	4618      	mov	r0, r3
 800947c:	f7fd f822 	bl	80064c4 <st_dword>
					st_clust(fs, dir, dcl);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe f84f 	bl	800752a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948e:	3320      	adds	r3, #32
 8009490:	2220      	movs	r2, #32
 8009492:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009494:	4618      	mov	r0, r3
 8009496:	f7fd f841 	bl	800651c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800949a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949c:	3321      	adds	r3, #33	; 0x21
 800949e:	222e      	movs	r2, #46	; 0x2e
 80094a0:	701a      	strb	r2, [r3, #0]
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d106      	bne.n	80094bc <f_mkdir+0x144>
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d101      	bne.n	80094bc <f_mkdir+0x144>
 80094b8:	2300      	movs	r3, #0
 80094ba:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80094bc:	68b8      	ldr	r0, [r7, #8]
 80094be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c0:	3320      	adds	r3, #32
 80094c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094c4:	4619      	mov	r1, r3
 80094c6:	f7fe f830 	bl	800752a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	895b      	ldrh	r3, [r3, #10]
 80094ce:	653b      	str	r3, [r7, #80]	; 0x50
 80094d0:	e01c      	b.n	800950c <f_mkdir+0x194>
					fs->winsect = dsc++;
 80094d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2201      	movs	r2, #1
 80094e0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fd fa35 	bl	8006954 <sync_window>
 80094ea:	4603      	mov	r3, r0
 80094ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80094f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10d      	bne.n	8009514 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	899b      	ldrh	r3, [r3, #12]
 80094fc:	461a      	mov	r2, r3
 80094fe:	2100      	movs	r1, #0
 8009500:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009502:	f7fd f82c 	bl	800655e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009508:	3b01      	subs	r3, #1
 800950a:	653b      	str	r3, [r7, #80]	; 0x50
 800950c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1df      	bne.n	80094d2 <f_mkdir+0x15a>
 8009512:	e000      	b.n	8009516 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8009514:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800951a:	2b00      	cmp	r3, #0
 800951c:	d107      	bne.n	800952e <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800951e:	f107 030c 	add.w	r3, r7, #12
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe f876 	bl	8007614 <dir_register>
 8009528:	4603      	mov	r3, r0
 800952a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800952e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009532:	2b00      	cmp	r3, #0
 8009534:	d120      	bne.n	8009578 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800953a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953c:	3316      	adds	r3, #22
 800953e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009540:	4618      	mov	r0, r3
 8009542:	f7fc ffbf 	bl	80064c4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800954a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800954c:	4618      	mov	r0, r3
 800954e:	f7fd ffec 	bl	800752a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009554:	330b      	adds	r3, #11
 8009556:	2210      	movs	r2, #16
 8009558:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2201      	movs	r2, #1
 800955e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8009560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10e      	bne.n	8009586 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd fa64 	bl	8006a38 <sync_fs>
 8009570:	4603      	mov	r3, r0
 8009572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009576:	e006      	b.n	8009586 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009578:	f107 030c 	add.w	r3, r7, #12
 800957c:	2200      	movs	r2, #0
 800957e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009580:	4618      	mov	r0, r3
 8009582:	f7fd fcd8 	bl	8006f36 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800958c:	4611      	mov	r1, r2
 800958e:	4618      	mov	r0, r3
 8009590:	f7fd f858 	bl	8006644 <unlock_fs>
 8009594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8009598:	4618      	mov	r0, r3
 800959a:	3758      	adds	r7, #88	; 0x58
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80095a0:	b590      	push	{r4, r7, lr}
 80095a2:	b09d      	sub	sp, #116	; 0x74
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	460b      	mov	r3, r1
 80095ae:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80095b0:	2301      	movs	r3, #1
 80095b2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80095b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095b8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80095ba:	f107 030c 	add.w	r3, r7, #12
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe f9c4 	bl	800794c <get_ldnumber>
 80095c4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80095c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da02      	bge.n	80095d2 <f_mkfs+0x32>
 80095cc:	230b      	movs	r3, #11
 80095ce:	f000 bc31 	b.w	8009e34 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80095d2:	4aa5      	ldr	r2, [pc, #660]	; (8009868 <f_mkfs+0x2c8>)
 80095d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <f_mkfs+0x4a>
 80095de:	4aa2      	ldr	r2, [pc, #648]	; (8009868 <f_mkfs+0x2c8>)
 80095e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095e6:	2200      	movs	r2, #0
 80095e8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80095ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80095f0:	2300      	movs	r3, #0
 80095f2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80095f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fc fe88 	bl	8006310 <disk_initialize>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8009606:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <f_mkfs+0x78>
 8009612:	2303      	movs	r3, #3
 8009614:	f000 bc0e 	b.w	8009e34 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8009618:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <f_mkfs+0x8a>
 8009624:	230a      	movs	r3, #10
 8009626:	f000 bc05 	b.w	8009e34 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800962a:	f107 0214 	add.w	r2, r7, #20
 800962e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009632:	2103      	movs	r1, #3
 8009634:	4618      	mov	r0, r3
 8009636:	f7fc fed1 	bl	80063dc <disk_ioctl>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10c      	bne.n	800965a <f_mkfs+0xba>
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d009      	beq.n	800965a <f_mkfs+0xba>
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800964c:	d805      	bhi.n	800965a <f_mkfs+0xba>
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	1e5a      	subs	r2, r3, #1
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	4013      	ands	r3, r2
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <f_mkfs+0xbe>
 800965a:	2301      	movs	r3, #1
 800965c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800965e:	f107 021a 	add.w	r2, r7, #26
 8009662:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009666:	2102      	movs	r1, #2
 8009668:	4618      	mov	r0, r3
 800966a:	f7fc feb7 	bl	80063dc <disk_ioctl>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <f_mkfs+0xd8>
 8009674:	2301      	movs	r3, #1
 8009676:	e3dd      	b.n	8009e34 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8009678:	8b7b      	ldrh	r3, [r7, #26]
 800967a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967e:	d80a      	bhi.n	8009696 <f_mkfs+0xf6>
 8009680:	8b7b      	ldrh	r3, [r7, #26]
 8009682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009686:	d306      	bcc.n	8009696 <f_mkfs+0xf6>
 8009688:	8b7b      	ldrh	r3, [r7, #26]
 800968a:	461a      	mov	r2, r3
 800968c:	8b7b      	ldrh	r3, [r7, #26]
 800968e:	3b01      	subs	r3, #1
 8009690:	4013      	ands	r3, r2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <f_mkfs+0xfa>
 8009696:	2301      	movs	r3, #1
 8009698:	e3cc      	b.n	8009e34 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <f_mkfs+0x10a>
 80096a0:	8b7b      	ldrh	r3, [r7, #26]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d309      	bcc.n	80096be <f_mkfs+0x11e>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096b0:	d805      	bhi.n	80096be <f_mkfs+0x11e>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	1e5a      	subs	r2, r3, #1
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4013      	ands	r3, r2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <f_mkfs+0x122>
 80096be:	2313      	movs	r3, #19
 80096c0:	e3b8      	b.n	8009e34 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 80096c2:	8b7b      	ldrh	r3, [r7, #26]
 80096c4:	461a      	mov	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80096cc:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80096d2:	8b7b      	ldrh	r3, [r7, #26]
 80096d4:	461a      	mov	r2, r3
 80096d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096da:	fbb3 f3f2 	udiv	r3, r3, r2
 80096de:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80096e0:	8b7b      	ldrh	r3, [r7, #26]
 80096e2:	461a      	mov	r2, r3
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <f_mkfs+0x156>
 80096f2:	230e      	movs	r3, #14
 80096f4:	e39e      	b.n	8009e34 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80096f6:	f107 0210 	add.w	r2, r7, #16
 80096fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80096fe:	2101      	movs	r1, #1
 8009700:	4618      	mov	r0, r3
 8009702:	f7fc fe6b 	bl	80063dc <disk_ioctl>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <f_mkfs+0x170>
 800970c:	2301      	movs	r3, #1
 800970e:	e391      	b.n	8009e34 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	f003 0308 	and.w	r3, r3, #8
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <f_mkfs+0x17e>
 800971a:	2300      	movs	r3, #0
 800971c:	e000      	b.n	8009720 <f_mkfs+0x180>
 800971e:	233f      	movs	r3, #63	; 0x3f
 8009720:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009726:	429a      	cmp	r2, r3
 8009728:	d901      	bls.n	800972e <f_mkfs+0x18e>
 800972a:	230e      	movs	r3, #14
 800972c:	e382      	b.n	8009e34 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b7f      	cmp	r3, #127	; 0x7f
 800973a:	d801      	bhi.n	8009740 <f_mkfs+0x1a0>
 800973c:	230e      	movs	r3, #14
 800973e:	e379      	b.n	8009e34 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b80      	cmp	r3, #128	; 0x80
 8009744:	d901      	bls.n	800974a <f_mkfs+0x1aa>
 8009746:	2313      	movs	r3, #19
 8009748:	e374      	b.n	8009e34 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800974a:	7afb      	ldrb	r3, [r7, #11]
 800974c:	f003 0302 	and.w	r3, r3, #2
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00d      	beq.n	8009770 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	2b02      	cmp	r3, #2
 800975c:	d004      	beq.n	8009768 <f_mkfs+0x1c8>
 800975e:	7afb      	ldrb	r3, [r7, #11]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d103      	bne.n	8009770 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 8009768:	2303      	movs	r3, #3
 800976a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800976e:	e009      	b.n	8009784 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8009770:	7afb      	ldrb	r3, [r7, #11]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <f_mkfs+0x1de>
 800977a:	2313      	movs	r3, #19
 800977c:	e35a      	b.n	8009e34 <f_mkfs+0x894>
		fmt = FS_FAT16;
 800977e:	2302      	movs	r3, #2
 8009780:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8009788:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800978c:	2b03      	cmp	r3, #3
 800978e:	d13c      	bne.n	800980a <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 8009790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009792:	2b00      	cmp	r3, #0
 8009794:	d11b      	bne.n	80097ce <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	0c5b      	lsrs	r3, r3, #17
 800979a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800979c:	2300      	movs	r3, #0
 800979e:	64bb      	str	r3, [r7, #72]	; 0x48
 80097a0:	2301      	movs	r3, #1
 80097a2:	653b      	str	r3, [r7, #80]	; 0x50
 80097a4:	e005      	b.n	80097b2 <f_mkfs+0x212>
 80097a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097a8:	3301      	adds	r3, #1
 80097aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80097ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	653b      	str	r3, [r7, #80]	; 0x50
 80097b2:	4a2e      	ldr	r2, [pc, #184]	; (800986c <f_mkfs+0x2cc>)
 80097b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d007      	beq.n	80097ce <f_mkfs+0x22e>
 80097be:	4a2b      	ldr	r2, [pc, #172]	; (800986c <f_mkfs+0x2cc>)
 80097c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c6:	461a      	mov	r2, r3
 80097c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d2eb      	bcs.n	80097a6 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	3302      	adds	r3, #2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	8b7a      	ldrh	r2, [r7, #26]
 80097e0:	4413      	add	r3, r2
 80097e2:	3b01      	subs	r3, #1
 80097e4:	8b7a      	ldrh	r2, [r7, #26]
 80097e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ea:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80097ec:	2320      	movs	r3, #32
 80097ee:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80097f0:	2300      	movs	r3, #0
 80097f2:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d903      	bls.n	8009806 <f_mkfs+0x266>
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	4a1b      	ldr	r2, [pc, #108]	; (8009870 <f_mkfs+0x2d0>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d954      	bls.n	80098b0 <f_mkfs+0x310>
 8009806:	230e      	movs	r3, #14
 8009808:	e314      	b.n	8009e34 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800980a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800980c:	2b00      	cmp	r3, #0
 800980e:	d11b      	bne.n	8009848 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	0b1b      	lsrs	r3, r3, #12
 8009814:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009816:	2300      	movs	r3, #0
 8009818:	64bb      	str	r3, [r7, #72]	; 0x48
 800981a:	2301      	movs	r3, #1
 800981c:	653b      	str	r3, [r7, #80]	; 0x50
 800981e:	e005      	b.n	800982c <f_mkfs+0x28c>
 8009820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009822:	3301      	adds	r3, #1
 8009824:	64bb      	str	r3, [r7, #72]	; 0x48
 8009826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	653b      	str	r3, [r7, #80]	; 0x50
 800982c:	4a11      	ldr	r2, [pc, #68]	; (8009874 <f_mkfs+0x2d4>)
 800982e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d007      	beq.n	8009848 <f_mkfs+0x2a8>
 8009838:	4a0e      	ldr	r2, [pc, #56]	; (8009874 <f_mkfs+0x2d4>)
 800983a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009840:	461a      	mov	r2, r3
 8009842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009844:	4293      	cmp	r3, r2
 8009846:	d2eb      	bcs.n	8009820 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009858:	4293      	cmp	r3, r2
 800985a:	d90d      	bls.n	8009878 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	3302      	adds	r3, #2
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009864:	e013      	b.n	800988e <f_mkfs+0x2ee>
 8009866:	bf00      	nop
 8009868:	200010d0 	.word	0x200010d0
 800986c:	0800ef44 	.word	0x0800ef44
 8009870:	0ffffff5 	.word	0x0ffffff5
 8009874:	0800ef54 	.word	0x0800ef54
				} else {
					fmt = FS_FAT12;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800987e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009880:	4613      	mov	r3, r2
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	4413      	add	r3, r2
 8009886:	3301      	adds	r3, #1
 8009888:	085b      	lsrs	r3, r3, #1
 800988a:	3303      	adds	r3, #3
 800988c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800988e:	8b7b      	ldrh	r3, [r7, #26]
 8009890:	461a      	mov	r2, r3
 8009892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009894:	4413      	add	r3, r2
 8009896:	3b01      	subs	r3, #1
 8009898:	8b7a      	ldrh	r2, [r7, #26]
 800989a:	fbb3 f3f2 	udiv	r3, r3, r2
 800989e:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80098a0:	2301      	movs	r3, #1
 80098a2:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80098a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a6:	015b      	lsls	r3, r3, #5
 80098a8:	8b7a      	ldrh	r2, [r7, #26]
 80098aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80098ae:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80098b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b4:	4413      	add	r3, r2
 80098b6:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80098b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098bc:	fb02 f203 	mul.w	r2, r2, r3
 80098c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098c2:	4413      	add	r3, r2
 80098c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098c6:	4413      	add	r3, r2
 80098c8:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	4413      	add	r3, r2
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	425b      	negs	r3, r3
 80098d6:	401a      	ands	r2, r3
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80098de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d108      	bne.n	80098f8 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 80098e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098ea:	4413      	add	r3, r2
 80098ec:	657b      	str	r3, [r7, #84]	; 0x54
 80098ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098f2:	4413      	add	r3, r2
 80098f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80098f6:	e006      	b.n	8009906 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80098f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009900:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009902:	4413      	add	r3, r2
 8009904:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8009906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009908:	011a      	lsls	r2, r3, #4
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	441a      	add	r2, r3
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	1ad2      	subs	r2, r2, r3
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	429a      	cmp	r2, r3
 8009916:	d901      	bls.n	800991c <f_mkfs+0x37c>
 8009918:	230e      	movs	r3, #14
 800991a:	e28b      	b.n	8009e34 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009920:	1ad2      	subs	r2, r2, r3
 8009922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009924:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009926:	fb01 f303 	mul.w	r3, r1, r3
 800992a:	1ad2      	subs	r2, r2, r3
 800992c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800992e:	1ad2      	subs	r2, r2, r3
 8009930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009932:	fbb2 f3f3 	udiv	r3, r2, r3
 8009936:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8009938:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800993c:	2b03      	cmp	r3, #3
 800993e:	d10f      	bne.n	8009960 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009946:	4293      	cmp	r3, r2
 8009948:	d80a      	bhi.n	8009960 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d105      	bne.n	800995c <f_mkfs+0x3bc>
 8009950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009952:	085b      	lsrs	r3, r3, #1
 8009954:	607b      	str	r3, [r7, #4]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d144      	bne.n	80099e6 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 800995c:	230e      	movs	r3, #14
 800995e:	e269      	b.n	8009e34 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 8009960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009964:	2b02      	cmp	r3, #2
 8009966:	d133      	bne.n	80099d0 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800996e:	4293      	cmp	r3, r2
 8009970:	d91e      	bls.n	80099b0 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d107      	bne.n	8009988 <f_mkfs+0x3e8>
 8009978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	2b40      	cmp	r3, #64	; 0x40
 800997e:	d803      	bhi.n	8009988 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8009980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	607b      	str	r3, [r7, #4]
 8009986:	e033      	b.n	80099f0 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	f003 0302 	and.w	r3, r3, #2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8009992:	2303      	movs	r3, #3
 8009994:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009998:	e02a      	b.n	80099f0 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <f_mkfs+0x40c>
 80099a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	607b      	str	r3, [r7, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b80      	cmp	r3, #128	; 0x80
 80099aa:	d91e      	bls.n	80099ea <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 80099ac:	230e      	movs	r3, #14
 80099ae:	e241      	b.n	8009e34 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d80a      	bhi.n	80099d0 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d105      	bne.n	80099cc <f_mkfs+0x42c>
 80099c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	607b      	str	r3, [r7, #4]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b80      	cmp	r3, #128	; 0x80
 80099ca:	d910      	bls.n	80099ee <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 80099cc:	230e      	movs	r3, #14
 80099ce:	e231      	b.n	8009e34 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80099d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d10c      	bne.n	80099f2 <f_mkfs+0x452>
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	f640 72f5 	movw	r2, #4085	; 0xff5
 80099de:	4293      	cmp	r3, r2
 80099e0:	d907      	bls.n	80099f2 <f_mkfs+0x452>
 80099e2:	230e      	movs	r3, #14
 80099e4:	e226      	b.n	8009e34 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80099e6:	bf00      	nop
 80099e8:	e6cc      	b.n	8009784 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80099ea:	bf00      	nop
 80099ec:	e6ca      	b.n	8009784 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80099ee:	bf00      	nop
			pau = au;
 80099f0:	e6c8      	b.n	8009784 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 80099f2:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80099f4:	8b7b      	ldrh	r3, [r7, #26]
 80099f6:	461a      	mov	r2, r3
 80099f8:	2100      	movs	r1, #0
 80099fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80099fc:	f7fc fdaf 	bl	800655e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8009a00:	220b      	movs	r2, #11
 8009a02:	49bd      	ldr	r1, [pc, #756]	; (8009cf8 <f_mkfs+0x758>)
 8009a04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a06:	f7fc fd89 	bl	800651c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0c:	330b      	adds	r3, #11
 8009a0e:	8b7a      	ldrh	r2, [r7, #26]
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fc fd3b 	bl	800648e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8009a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1a:	330d      	adds	r3, #13
 8009a1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a24:	330e      	adds	r3, #14
 8009a26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a28:	b292      	uxth	r2, r2
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fc fd2e 	bl	800648e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	3310      	adds	r3, #16
 8009a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a38:	b2d2      	uxtb	r2, r2
 8009a3a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8009a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3e:	f103 0211 	add.w	r2, r3, #17
 8009a42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d002      	beq.n	8009a50 <f_mkfs+0x4b0>
 8009a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	e000      	b.n	8009a52 <f_mkfs+0x4b2>
 8009a50:	2300      	movs	r3, #0
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7fc fd1a 	bl	800648e <st_word>
		if (sz_vol < 0x10000) {
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a60:	d208      	bcs.n	8009a74 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a64:	3313      	adds	r3, #19
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	b292      	uxth	r2, r2
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fc fd0e 	bl	800648e <st_word>
 8009a72:	e006      	b.n	8009a82 <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8009a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a76:	3320      	adds	r3, #32
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fc fd21 	bl	80064c4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8009a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a84:	3315      	adds	r3, #21
 8009a86:	22f8      	movs	r2, #248	; 0xf8
 8009a88:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8c:	3318      	adds	r3, #24
 8009a8e:	213f      	movs	r1, #63	; 0x3f
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fc fcfc 	bl	800648e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8009a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a98:	331a      	adds	r3, #26
 8009a9a:	21ff      	movs	r1, #255	; 0xff
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fc fcf6 	bl	800648e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa4:	331c      	adds	r3, #28
 8009aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fc fd0b 	bl	80064c4 <st_dword>
		if (fmt == FS_FAT32) {
 8009aae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d131      	bne.n	8009b1a <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8009ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab8:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8009abc:	f7fc f9c2 	bl	8005e44 <get_fattime>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f7fc fcfd 	bl	80064c4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8009aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009acc:	3324      	adds	r3, #36	; 0x24
 8009ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fc fcf7 	bl	80064c4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	332c      	adds	r3, #44	; 0x2c
 8009ada:	2102      	movs	r1, #2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fc fcf1 	bl	80064c4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae4:	3330      	adds	r3, #48	; 0x30
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fc fcd0 	bl	800648e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8009aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af0:	3332      	adds	r3, #50	; 0x32
 8009af2:	2106      	movs	r1, #6
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fc fcca 	bl	800648e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8009afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afc:	3340      	adds	r3, #64	; 0x40
 8009afe:	2280      	movs	r2, #128	; 0x80
 8009b00:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8009b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b04:	3342      	adds	r3, #66	; 0x42
 8009b06:	2229      	movs	r2, #41	; 0x29
 8009b08:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0c:	3347      	adds	r3, #71	; 0x47
 8009b0e:	2213      	movs	r2, #19
 8009b10:	497a      	ldr	r1, [pc, #488]	; (8009cfc <f_mkfs+0x75c>)
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fc fd02 	bl	800651c <mem_cpy>
 8009b18:	e020      	b.n	8009b5c <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1c:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8009b20:	f7fc f990 	bl	8005e44 <get_fattime>
 8009b24:	4603      	mov	r3, r0
 8009b26:	4619      	mov	r1, r3
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7fc fccb 	bl	80064c4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b30:	3316      	adds	r3, #22
 8009b32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b34:	b292      	uxth	r2, r2
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fc fca8 	bl	800648e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	3324      	adds	r3, #36	; 0x24
 8009b42:	2280      	movs	r2, #128	; 0x80
 8009b44:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8009b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b48:	3326      	adds	r3, #38	; 0x26
 8009b4a:	2229      	movs	r2, #41	; 0x29
 8009b4c:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8009b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b50:	332b      	adds	r3, #43	; 0x2b
 8009b52:	2213      	movs	r2, #19
 8009b54:	496a      	ldr	r1, [pc, #424]	; (8009d00 <f_mkfs+0x760>)
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fc fce0 	bl	800651c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b62:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fc fc91 	bl	800648e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8009b6c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009b70:	2301      	movs	r3, #1
 8009b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b76:	f7fc fc11 	bl	800639c <disk_write>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <f_mkfs+0x5e4>
 8009b80:	2301      	movs	r3, #1
 8009b82:	e157      	b.n	8009e34 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8009b84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d140      	bne.n	8009c0e <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8009b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8e:	1d9a      	adds	r2, r3, #6
 8009b90:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009b94:	2301      	movs	r3, #1
 8009b96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b98:	f7fc fc00 	bl	800639c <disk_write>
			mem_set(buf, 0, ss);
 8009b9c:	8b7b      	ldrh	r3, [r7, #26]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009ba4:	f7fc fcdb 	bl	800655e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8009ba8:	4956      	ldr	r1, [pc, #344]	; (8009d04 <f_mkfs+0x764>)
 8009baa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bac:	f7fc fc8a 	bl	80064c4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009bb6:	4954      	ldr	r1, [pc, #336]	; (8009d08 <f_mkfs+0x768>)
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fc fc83 	bl	80064c4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8009bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f7fc fc7a 	bl	80064c4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8009bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009bd6:	2102      	movs	r1, #2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fc fc73 	bl	80064c4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8009bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009be4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fc fc50 	bl	800648e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	1dda      	adds	r2, r3, #7
 8009bf2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bfa:	f7fc fbcf 	bl	800639c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009c06:	2301      	movs	r3, #1
 8009c08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c0a:	f7fc fbc7 	bl	800639c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8009c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c10:	2100      	movs	r1, #0
 8009c12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c14:	f7fc fca3 	bl	800655e <mem_set>
		sect = b_fat;		/* FAT start sector */
 8009c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c1a:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c20:	e04b      	b.n	8009cba <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 8009c22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d113      	bne.n	8009c52 <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8009c2a:	f06f 0107 	mvn.w	r1, #7
 8009c2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c30:	f7fc fc48 	bl	80064c4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8009c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c36:	3304      	adds	r3, #4
 8009c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fc fc41 	bl	80064c4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8009c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c44:	3308      	adds	r3, #8
 8009c46:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fc fc3a 	bl	80064c4 <st_dword>
 8009c50:	e00b      	b.n	8009c6a <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8009c52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <f_mkfs+0x6be>
 8009c5a:	4b2c      	ldr	r3, [pc, #176]	; (8009d0c <f_mkfs+0x76c>)
 8009c5c:	e001      	b.n	8009c62 <f_mkfs+0x6c2>
 8009c5e:	f06f 0307 	mvn.w	r3, #7
 8009c62:	4619      	mov	r1, r3
 8009c64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c66:	f7fc fc2d 	bl	80064c4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8009c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c6c:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8009c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	4293      	cmp	r3, r2
 8009c74:	bf28      	it	cs
 8009c76:	4613      	movcs	r3, r2
 8009c78:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8009c7a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c84:	f7fc fb8a 	bl	800639c <disk_write>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <f_mkfs+0x6f2>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e0d0      	b.n	8009e34 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 8009c92:	8b7b      	ldrh	r3, [r7, #26]
 8009c94:	461a      	mov	r2, r3
 8009c96:	2100      	movs	r1, #0
 8009c98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c9a:	f7fc fc60 	bl	800655e <mem_set>
				sect += n; nsect -= n;
 8009c9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ca2:	4413      	add	r3, r2
 8009ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8009ca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8009cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1dc      	bne.n	8009c6e <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d3af      	bcc.n	8009c22 <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8009cc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d101      	bne.n	8009cce <f_mkfs+0x72e>
 8009cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ccc:	e000      	b.n	8009cd0 <f_mkfs+0x730>
 8009cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd0:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8009cd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	bf28      	it	cs
 8009cda:	4613      	movcs	r3, r2
 8009cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8009cde:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ce6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ce8:	f7fc fb58 	bl	800639c <disk_write>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00e      	beq.n	8009d10 <f_mkfs+0x770>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e09e      	b.n	8009e34 <f_mkfs+0x894>
 8009cf6:	bf00      	nop
 8009cf8:	0800edd8 	.word	0x0800edd8
 8009cfc:	0800ede4 	.word	0x0800ede4
 8009d00:	0800edf8 	.word	0x0800edf8
 8009d04:	41615252 	.word	0x41615252
 8009d08:	61417272 	.word	0x61417272
 8009d0c:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8009d10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d14:	4413      	add	r3, r2
 8009d16:	667b      	str	r3, [r7, #100]	; 0x64
 8009d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8009d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1d5      	bne.n	8009cd2 <f_mkfs+0x732>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8009d26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d103      	bne.n	8009d36 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 8009d2e:	230c      	movs	r3, #12
 8009d30:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009d34:	e010      	b.n	8009d58 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d3c:	d303      	bcc.n	8009d46 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8009d3e:	2306      	movs	r3, #6
 8009d40:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009d44:	e008      	b.n	8009d58 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8009d46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d101      	bne.n	8009d52 <f_mkfs+0x7b2>
 8009d4e:	2304      	movs	r3, #4
 8009d50:	e000      	b.n	8009d54 <f_mkfs+0x7b4>
 8009d52:	2301      	movs	r3, #1
 8009d54:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	f003 0308 	and.w	r3, r3, #8
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d15b      	bne.n	8009e1a <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 8009d62:	8b7b      	ldrh	r3, [r7, #26]
 8009d64:	461a      	mov	r2, r3
 8009d66:	2100      	movs	r1, #0
 8009d68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009d6a:	f7fc fbf8 	bl	800655e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8009d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d74:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fc fb88 	bl	800648e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8009d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009d84:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	2201      	movs	r2, #1
 8009d92:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	3302      	adds	r3, #2
 8009d98:	2201      	movs	r2, #1
 8009d9a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	3303      	adds	r3, #3
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	3304      	adds	r3, #4
 8009da8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009dac:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	441a      	add	r2, r3
 8009db4:	4b21      	ldr	r3, [pc, #132]	; (8009e3c <f_mkfs+0x89c>)
 8009db6:	fba3 1302 	umull	r1, r3, r3, r2
 8009dba:	1ad2      	subs	r2, r2, r3
 8009dbc:	0852      	lsrs	r2, r2, #1
 8009dbe:	4413      	add	r3, r2
 8009dc0:	0b5b      	lsrs	r3, r3, #13
 8009dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	3305      	adds	r3, #5
 8009dc8:	22fe      	movs	r2, #254	; 0xfe
 8009dca:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8009dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dce:	089b      	lsrs	r3, r3, #2
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	3306      	adds	r3, #6
 8009dd6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	3307      	adds	r3, #7
 8009de2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	3308      	adds	r3, #8
 8009dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fc fb68 	bl	80064c4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	330c      	adds	r3, #12
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fc fb61 	bl	80064c4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009e02:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009e06:	2301      	movs	r3, #1
 8009e08:	2200      	movs	r2, #0
 8009e0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e0c:	f7fc fac6 	bl	800639c <disk_write>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <f_mkfs+0x87a>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e00c      	b.n	8009e34 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8009e1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fc fada 	bl	80063dc <disk_ioctl>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <f_mkfs+0x892>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <f_mkfs+0x894>

	return FR_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3774      	adds	r7, #116	; 0x74
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd90      	pop	{r4, r7, pc}
 8009e3c:	0515565b 	.word	0x0515565b

08009e40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e56:	4b1f      	ldr	r3, [pc, #124]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e58:	7a5b      	ldrb	r3, [r3, #9]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d131      	bne.n	8009ec4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e60:	4b1c      	ldr	r3, [pc, #112]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e62:	7a5b      	ldrb	r3, [r3, #9]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	461a      	mov	r2, r3
 8009e68:	4b1a      	ldr	r3, [pc, #104]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e6e:	4b19      	ldr	r3, [pc, #100]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e70:	7a5b      	ldrb	r3, [r3, #9]
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	4a17      	ldr	r2, [pc, #92]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e7e:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e80:	7a5b      	ldrb	r3, [r3, #9]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	461a      	mov	r2, r3
 8009e86:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e88:	4413      	add	r3, r2
 8009e8a:	79fa      	ldrb	r2, [r7, #7]
 8009e8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e8e:	4b11      	ldr	r3, [pc, #68]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e90:	7a5b      	ldrb	r3, [r3, #9]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	b2d1      	uxtb	r1, r2
 8009e98:	4a0e      	ldr	r2, [pc, #56]	; (8009ed4 <FATFS_LinkDriverEx+0x94>)
 8009e9a:	7251      	strb	r1, [r2, #9]
 8009e9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e9e:	7dbb      	ldrb	r3, [r7, #22]
 8009ea0:	3330      	adds	r3, #48	; 0x30
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	223a      	movs	r2, #58	; 0x3a
 8009eae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	3302      	adds	r3, #2
 8009eb4:	222f      	movs	r2, #47	; 0x2f
 8009eb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3303      	adds	r3, #3
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	371c      	adds	r7, #28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	200010f8 	.word	0x200010f8

08009ed8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff ffaa 	bl	8009e40 <FATFS_LinkDriverEx>
 8009eec:	4603      	mov	r3, r0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	4603      	mov	r3, r0
 8009efe:	6039      	str	r1, [r7, #0]
 8009f00:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009f02:	2200      	movs	r2, #0
 8009f04:	2101      	movs	r1, #1
 8009f06:	2001      	movs	r0, #1
 8009f08:	f000 f9ae 	bl	800a268 <osSemaphoreNew>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	bf14      	ite	ne
 8009f1a:	2301      	movne	r3, #1
 8009f1c:	2300      	moveq	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	60fb      	str	r3, [r7, #12]

    return ret;
 8009f22:	68fb      	ldr	r3, [r7, #12]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fab7 	bl	800a4a8 <osSemaphoreDelete>
#endif
    return 1;
 8009f3a:	2301      	movs	r3, #1
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009f50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa11 	bl	800a37c <osSemaphoreAcquire>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8009f60:	2301      	movs	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009f64:	68fb      	ldr	r3, [r7, #12]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b082      	sub	sp, #8
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa52 	bl	800a420 <osSemaphoreRelease>
#endif
}
 8009f7c:	bf00      	nop
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <__NVIC_SetPriority>:
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	db0a      	blt.n	8009fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	490c      	ldr	r1, [pc, #48]	; (8009fd0 <__NVIC_SetPriority+0x4c>)
 8009f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa2:	0112      	lsls	r2, r2, #4
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	440b      	add	r3, r1
 8009fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009fac:	e00a      	b.n	8009fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	4908      	ldr	r1, [pc, #32]	; (8009fd4 <__NVIC_SetPriority+0x50>)
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	f003 030f 	and.w	r3, r3, #15
 8009fba:	3b04      	subs	r3, #4
 8009fbc:	0112      	lsls	r2, r2, #4
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	761a      	strb	r2, [r3, #24]
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	e000e100 	.word	0xe000e100
 8009fd4:	e000ed00 	.word	0xe000ed00

08009fd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009fdc:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <SysTick_Handler+0x1c>)
 8009fde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009fe0:	f002 fb08 	bl	800c5f4 <xTaskGetSchedulerState>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d001      	beq.n	8009fee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009fea:	f003 f9ed 	bl	800d3c8 <xPortSysTickHandler>
  }
}
 8009fee:	bf00      	nop
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	e000e010 	.word	0xe000e010

08009ff8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	f06f 0004 	mvn.w	r0, #4
 800a002:	f7ff ffbf 	bl	8009f84 <__NVIC_SetPriority>
#endif
}
 800a006:	bf00      	nop
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a012:	f3ef 8305 	mrs	r3, IPSR
 800a016:	603b      	str	r3, [r7, #0]
  return(result);
 800a018:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a01e:	f06f 0305 	mvn.w	r3, #5
 800a022:	607b      	str	r3, [r7, #4]
 800a024:	e00c      	b.n	800a040 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a026:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <osKernelInitialize+0x44>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d105      	bne.n	800a03a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a02e:	4b08      	ldr	r3, [pc, #32]	; (800a050 <osKernelInitialize+0x44>)
 800a030:	2201      	movs	r2, #1
 800a032:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a034:	2300      	movs	r3, #0
 800a036:	607b      	str	r3, [r7, #4]
 800a038:	e002      	b.n	800a040 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a03e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a040:	687b      	ldr	r3, [r7, #4]
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	20001104 	.word	0x20001104

0800a054 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800a05a:	f002 facb 	bl	800c5f4 <xTaskGetSchedulerState>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <osKernelGetState+0x1a>
 800a064:	2b02      	cmp	r3, #2
 800a066:	d105      	bne.n	800a074 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800a068:	2302      	movs	r3, #2
 800a06a:	607b      	str	r3, [r7, #4]
      break;
 800a06c:	e00c      	b.n	800a088 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800a06e:	2303      	movs	r3, #3
 800a070:	607b      	str	r3, [r7, #4]
      break;
 800a072:	e009      	b.n	800a088 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800a074:	4b07      	ldr	r3, [pc, #28]	; (800a094 <osKernelGetState+0x40>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d102      	bne.n	800a082 <osKernelGetState+0x2e>
        state = osKernelReady;
 800a07c:	2301      	movs	r3, #1
 800a07e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800a080:	e001      	b.n	800a086 <osKernelGetState+0x32>
        state = osKernelInactive;
 800a082:	2300      	movs	r3, #0
 800a084:	607b      	str	r3, [r7, #4]
      break;
 800a086:	bf00      	nop
  }

  return (state);
 800a088:	687b      	ldr	r3, [r7, #4]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20001104 	.word	0x20001104

0800a098 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a09e:	f3ef 8305 	mrs	r3, IPSR
 800a0a2:	603b      	str	r3, [r7, #0]
  return(result);
 800a0a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0aa:	f06f 0305 	mvn.w	r3, #5
 800a0ae:	607b      	str	r3, [r7, #4]
 800a0b0:	e010      	b.n	800a0d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0b2:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <osKernelStart+0x48>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d109      	bne.n	800a0ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0ba:	f7ff ff9d 	bl	8009ff8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0be:	4b08      	ldr	r3, [pc, #32]	; (800a0e0 <osKernelStart+0x48>)
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0c4:	f001 fe28 	bl	800bd18 <vTaskStartScheduler>
      stat = osOK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	607b      	str	r3, [r7, #4]
 800a0cc:	e002      	b.n	800a0d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0d4:	687b      	ldr	r3, [r7, #4]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20001104 	.word	0x20001104

0800a0e4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0ea:	f3ef 8305 	mrs	r3, IPSR
 800a0ee:	603b      	str	r3, [r7, #0]
  return(result);
 800a0f0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a0f6:	f001 ff3b 	bl	800bf70 <xTaskGetTickCountFromISR>
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	e002      	b.n	800a104 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a0fe:	f001 ff27 	bl	800bf50 <xTaskGetTickCount>
 800a102:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a104:	687b      	ldr	r3, [r7, #4]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a10e:	b580      	push	{r7, lr}
 800a110:	b08e      	sub	sp, #56	; 0x38
 800a112:	af04      	add	r7, sp, #16
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a11e:	f3ef 8305 	mrs	r3, IPSR
 800a122:	617b      	str	r3, [r7, #20]
  return(result);
 800a124:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a126:	2b00      	cmp	r3, #0
 800a128:	d17e      	bne.n	800a228 <osThreadNew+0x11a>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d07b      	beq.n	800a228 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a134:	2318      	movs	r3, #24
 800a136:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a140:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d045      	beq.n	800a1d4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <osThreadNew+0x48>
        name = attr->name;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d008      	beq.n	800a17c <osThreadNew+0x6e>
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	2b38      	cmp	r3, #56	; 0x38
 800a16e:	d805      	bhi.n	800a17c <osThreadNew+0x6e>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <osThreadNew+0x72>
        return (NULL);
 800a17c:	2300      	movs	r3, #0
 800a17e:	e054      	b.n	800a22a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	089b      	lsrs	r3, r3, #2
 800a18e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00e      	beq.n	800a1b6 <osThreadNew+0xa8>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	2bbb      	cmp	r3, #187	; 0xbb
 800a19e:	d90a      	bls.n	800a1b6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d006      	beq.n	800a1b6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d002      	beq.n	800a1b6 <osThreadNew+0xa8>
        mem = 1;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	61bb      	str	r3, [r7, #24]
 800a1b4:	e010      	b.n	800a1d8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10c      	bne.n	800a1d8 <osThreadNew+0xca>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d108      	bne.n	800a1d8 <osThreadNew+0xca>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d104      	bne.n	800a1d8 <osThreadNew+0xca>
          mem = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	61bb      	str	r3, [r7, #24]
 800a1d2:	e001      	b.n	800a1d8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d110      	bne.n	800a200 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1e6:	9202      	str	r2, [sp, #8]
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	6a3a      	ldr	r2, [r7, #32]
 800a1f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f001 fba3 	bl	800b940 <xTaskCreateStatic>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	613b      	str	r3, [r7, #16]
 800a1fe:	e013      	b.n	800a228 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d110      	bne.n	800a228 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	b29a      	uxth	r2, r3
 800a20a:	f107 0310 	add.w	r3, r7, #16
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f001 fbee 	bl	800b9fa <xTaskCreate>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b01      	cmp	r3, #1
 800a222:	d001      	beq.n	800a228 <osThreadNew+0x11a>
            hTask = NULL;
 800a224:	2300      	movs	r3, #0
 800a226:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a228:	693b      	ldr	r3, [r7, #16]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3728      	adds	r7, #40	; 0x28
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a23a:	f3ef 8305 	mrs	r3, IPSR
 800a23e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a240:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <osDelay+0x1c>
    stat = osErrorISR;
 800a246:	f06f 0305 	mvn.w	r3, #5
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	e007      	b.n	800a25e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <osDelay+0x2c>
      vTaskDelay(ticks);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 fd29 	bl	800bcb0 <vTaskDelay>
    }
  }

  return (stat);
 800a25e:	68fb      	ldr	r3, [r7, #12]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08a      	sub	sp, #40	; 0x28
 800a26c:	af02      	add	r7, sp, #8
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a278:	f3ef 8305 	mrs	r3, IPSR
 800a27c:	613b      	str	r3, [r7, #16]
  return(result);
 800a27e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a280:	2b00      	cmp	r3, #0
 800a282:	d175      	bne.n	800a370 <osSemaphoreNew+0x108>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d072      	beq.n	800a370 <osSemaphoreNew+0x108>
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d86e      	bhi.n	800a370 <osSemaphoreNew+0x108>
    mem = -1;
 800a292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a296:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d015      	beq.n	800a2ca <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d006      	beq.n	800a2b4 <osSemaphoreNew+0x4c>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	2b4f      	cmp	r3, #79	; 0x4f
 800a2ac:	d902      	bls.n	800a2b4 <osSemaphoreNew+0x4c>
        mem = 1;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	61bb      	str	r3, [r7, #24]
 800a2b2:	e00c      	b.n	800a2ce <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d108      	bne.n	800a2ce <osSemaphoreNew+0x66>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <osSemaphoreNew+0x66>
          mem = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61bb      	str	r3, [r7, #24]
 800a2c8:	e001      	b.n	800a2ce <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d4:	d04c      	beq.n	800a370 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d128      	bne.n	800a32e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d10a      	bne.n	800a2f8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	2203      	movs	r2, #3
 800a2e8:	9200      	str	r2, [sp, #0]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	f000 fb80 	bl	800a9f4 <xQueueGenericCreateStatic>
 800a2f4:	61f8      	str	r0, [r7, #28]
 800a2f6:	e005      	b.n	800a304 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a2f8:	2203      	movs	r2, #3
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	f000 fbf1 	bl	800aae4 <xQueueGenericCreate>
 800a302:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d022      	beq.n	800a350 <osSemaphoreNew+0xe8>
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d01f      	beq.n	800a350 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a310:	2300      	movs	r3, #0
 800a312:	2200      	movs	r2, #0
 800a314:	2100      	movs	r1, #0
 800a316:	69f8      	ldr	r0, [r7, #28]
 800a318:	f000 fcac 	bl	800ac74 <xQueueGenericSend>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d016      	beq.n	800a350 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a322:	69f8      	ldr	r0, [r7, #28]
 800a324:	f001 f938 	bl	800b598 <vQueueDelete>
            hSemaphore = NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	61fb      	str	r3, [r7, #28]
 800a32c:	e010      	b.n	800a350 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d108      	bne.n	800a346 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	461a      	mov	r2, r3
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 fc2e 	bl	800ab9e <xQueueCreateCountingSemaphoreStatic>
 800a342:	61f8      	str	r0, [r7, #28]
 800a344:	e004      	b.n	800a350 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 fc5f 	bl	800ac0c <xQueueCreateCountingSemaphore>
 800a34e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00c      	beq.n	800a370 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	e001      	b.n	800a368 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a364:	2300      	movs	r3, #0
 800a366:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a368:	6979      	ldr	r1, [r7, #20]
 800a36a:	69f8      	ldr	r0, [r7, #28]
 800a36c:	f001 fa60 	bl	800b830 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a370:	69fb      	ldr	r3, [r7, #28]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3720      	adds	r7, #32
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d103      	bne.n	800a39c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a394:	f06f 0303 	mvn.w	r3, #3
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	e039      	b.n	800a410 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a39c:	f3ef 8305 	mrs	r3, IPSR
 800a3a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d022      	beq.n	800a3ee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d003      	beq.n	800a3b6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a3ae:	f06f 0303 	mvn.w	r3, #3
 800a3b2:	617b      	str	r3, [r7, #20]
 800a3b4:	e02c      	b.n	800a410 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a3ba:	f107 0308 	add.w	r3, r7, #8
 800a3be:	461a      	mov	r2, r3
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	6938      	ldr	r0, [r7, #16]
 800a3c4:	f001 f868 	bl	800b498 <xQueueReceiveFromISR>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d003      	beq.n	800a3d6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a3ce:	f06f 0302 	mvn.w	r3, #2
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	e01c      	b.n	800a410 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d019      	beq.n	800a410 <osSemaphoreAcquire+0x94>
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <osSemaphoreAcquire+0xa0>)
 800a3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	e010      	b.n	800a410 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6938      	ldr	r0, [r7, #16]
 800a3f2:	f000 ff45 	bl	800b280 <xQueueSemaphoreTake>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d009      	beq.n	800a410 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a402:	f06f 0301 	mvn.w	r3, #1
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	e002      	b.n	800a410 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a40a:	f06f 0302 	mvn.w	r3, #2
 800a40e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a410:	697b      	ldr	r3, [r7, #20]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d103      	bne.n	800a43e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a436:	f06f 0303 	mvn.w	r3, #3
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	e02c      	b.n	800a498 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a43e:	f3ef 8305 	mrs	r3, IPSR
 800a442:	60fb      	str	r3, [r7, #12]
  return(result);
 800a444:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a446:	2b00      	cmp	r3, #0
 800a448:	d01a      	beq.n	800a480 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a44a:	2300      	movs	r3, #0
 800a44c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a44e:	f107 0308 	add.w	r3, r7, #8
 800a452:	4619      	mov	r1, r3
 800a454:	6938      	ldr	r0, [r7, #16]
 800a456:	f000 fda6 	bl	800afa6 <xQueueGiveFromISR>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d003      	beq.n	800a468 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a460:	f06f 0302 	mvn.w	r3, #2
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	e017      	b.n	800a498 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d014      	beq.n	800a498 <osSemaphoreRelease+0x78>
 800a46e:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <osSemaphoreRelease+0x84>)
 800a470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	e00b      	b.n	800a498 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a480:	2300      	movs	r3, #0
 800a482:	2200      	movs	r2, #0
 800a484:	2100      	movs	r1, #0
 800a486:	6938      	ldr	r0, [r7, #16]
 800a488:	f000 fbf4 	bl	800ac74 <xQueueGenericSend>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d002      	beq.n	800a498 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a492:	f06f 0302 	mvn.w	r3, #2
 800a496:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a498:	697b      	ldr	r3, [r7, #20]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	e000ed04 	.word	0xe000ed04

0800a4a8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4b4:	f3ef 8305 	mrs	r3, IPSR
 800a4b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d003      	beq.n	800a4c8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a4c0:	f06f 0305 	mvn.w	r3, #5
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	e00e      	b.n	800a4e6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a4ce:	f06f 0303 	mvn.w	r3, #3
 800a4d2:	617b      	str	r3, [r7, #20]
 800a4d4:	e007      	b.n	800a4e6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a4d6:	6938      	ldr	r0, [r7, #16]
 800a4d8:	f001 f9d4 	bl	800b884 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a4e0:	6938      	ldr	r0, [r7, #16]
 800a4e2:	f001 f859 	bl	800b598 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a4e6:	697b      	ldr	r3, [r7, #20]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08a      	sub	sp, #40	; 0x28
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a500:	f3ef 8305 	mrs	r3, IPSR
 800a504:	613b      	str	r3, [r7, #16]
  return(result);
 800a506:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d15f      	bne.n	800a5cc <osMessageQueueNew+0xdc>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d05c      	beq.n	800a5cc <osMessageQueueNew+0xdc>
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d059      	beq.n	800a5cc <osMessageQueueNew+0xdc>
    mem = -1;
 800a518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a51c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d029      	beq.n	800a578 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d012      	beq.n	800a552 <osMessageQueueNew+0x62>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	2b4f      	cmp	r3, #79	; 0x4f
 800a532:	d90e      	bls.n	800a552 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	695a      	ldr	r2, [r3, #20]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	68b9      	ldr	r1, [r7, #8]
 800a544:	fb01 f303 	mul.w	r3, r1, r3
 800a548:	429a      	cmp	r2, r3
 800a54a:	d302      	bcc.n	800a552 <osMessageQueueNew+0x62>
        mem = 1;
 800a54c:	2301      	movs	r3, #1
 800a54e:	61bb      	str	r3, [r7, #24]
 800a550:	e014      	b.n	800a57c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d110      	bne.n	800a57c <osMessageQueueNew+0x8c>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10c      	bne.n	800a57c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a566:	2b00      	cmp	r3, #0
 800a568:	d108      	bne.n	800a57c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <osMessageQueueNew+0x8c>
          mem = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	61bb      	str	r3, [r7, #24]
 800a576:	e001      	b.n	800a57c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d10b      	bne.n	800a59a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691a      	ldr	r2, [r3, #16]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	2100      	movs	r1, #0
 800a58c:	9100      	str	r1, [sp, #0]
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 fa2f 	bl	800a9f4 <xQueueGenericCreateStatic>
 800a596:	61f8      	str	r0, [r7, #28]
 800a598:	e008      	b.n	800a5ac <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d105      	bne.n	800a5ac <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	68b9      	ldr	r1, [r7, #8]
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f000 fa9d 	bl	800aae4 <xQueueGenericCreate>
 800a5aa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00c      	beq.n	800a5cc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	617b      	str	r3, [r7, #20]
 800a5be:	e001      	b.n	800a5c4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a5c4:	6979      	ldr	r1, [r7, #20]
 800a5c6:	69f8      	ldr	r0, [r7, #28]
 800a5c8:	f001 f932 	bl	800b830 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a5cc:	69fb      	ldr	r3, [r7, #28]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3720      	adds	r7, #32
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5f0:	f3ef 8305 	mrs	r3, IPSR
 800a5f4:	617b      	str	r3, [r7, #20]
  return(result);
 800a5f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d028      	beq.n	800a64e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d005      	beq.n	800a60e <osMessageQueuePut+0x36>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <osMessageQueuePut+0x36>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a60e:	f06f 0303 	mvn.w	r3, #3
 800a612:	61fb      	str	r3, [r7, #28]
 800a614:	e038      	b.n	800a688 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a616:	2300      	movs	r3, #0
 800a618:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a61a:	f107 0210 	add.w	r2, r7, #16
 800a61e:	2300      	movs	r3, #0
 800a620:	68b9      	ldr	r1, [r7, #8]
 800a622:	69b8      	ldr	r0, [r7, #24]
 800a624:	f000 fc24 	bl	800ae70 <xQueueGenericSendFromISR>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d003      	beq.n	800a636 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a62e:	f06f 0302 	mvn.w	r3, #2
 800a632:	61fb      	str	r3, [r7, #28]
 800a634:	e028      	b.n	800a688 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d025      	beq.n	800a688 <osMessageQueuePut+0xb0>
 800a63c:	4b15      	ldr	r3, [pc, #84]	; (800a694 <osMessageQueuePut+0xbc>)
 800a63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	e01c      	b.n	800a688 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <osMessageQueuePut+0x82>
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d103      	bne.n	800a662 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a65a:	f06f 0303 	mvn.w	r3, #3
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	e012      	b.n	800a688 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a662:	2300      	movs	r3, #0
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	68b9      	ldr	r1, [r7, #8]
 800a668:	69b8      	ldr	r0, [r7, #24]
 800a66a:	f000 fb03 	bl	800ac74 <xQueueGenericSend>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b01      	cmp	r3, #1
 800a672:	d009      	beq.n	800a688 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a67a:	f06f 0301 	mvn.w	r3, #1
 800a67e:	61fb      	str	r3, [r7, #28]
 800a680:	e002      	b.n	800a688 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a682:	f06f 0302 	mvn.w	r3, #2
 800a686:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a688:	69fb      	ldr	r3, [r7, #28]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	e000ed04 	.word	0xe000ed04

0800a698 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6ae:	f3ef 8305 	mrs	r3, IPSR
 800a6b2:	617b      	str	r3, [r7, #20]
  return(result);
 800a6b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d028      	beq.n	800a70c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d005      	beq.n	800a6cc <osMessageQueueGet+0x34>
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d002      	beq.n	800a6cc <osMessageQueueGet+0x34>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d003      	beq.n	800a6d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a6cc:	f06f 0303 	mvn.w	r3, #3
 800a6d0:	61fb      	str	r3, [r7, #28]
 800a6d2:	e037      	b.n	800a744 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a6d8:	f107 0310 	add.w	r3, r7, #16
 800a6dc:	461a      	mov	r2, r3
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	69b8      	ldr	r0, [r7, #24]
 800a6e2:	f000 fed9 	bl	800b498 <xQueueReceiveFromISR>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d003      	beq.n	800a6f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a6ec:	f06f 0302 	mvn.w	r3, #2
 800a6f0:	61fb      	str	r3, [r7, #28]
 800a6f2:	e027      	b.n	800a744 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d024      	beq.n	800a744 <osMessageQueueGet+0xac>
 800a6fa:	4b15      	ldr	r3, [pc, #84]	; (800a750 <osMessageQueueGet+0xb8>)
 800a6fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a700:	601a      	str	r2, [r3, #0]
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	e01b      	b.n	800a744 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <osMessageQueueGet+0x80>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d103      	bne.n	800a720 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a718:	f06f 0303 	mvn.w	r3, #3
 800a71c:	61fb      	str	r3, [r7, #28]
 800a71e:	e011      	b.n	800a744 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	68b9      	ldr	r1, [r7, #8]
 800a724:	69b8      	ldr	r0, [r7, #24]
 800a726:	f000 fccb 	bl	800b0c0 <xQueueReceive>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d009      	beq.n	800a744 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a736:	f06f 0301 	mvn.w	r3, #1
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	e002      	b.n	800a744 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a73e:	f06f 0302 	mvn.w	r3, #2
 800a742:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a744:	69fb      	ldr	r3, [r7, #28]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3720      	adds	r7, #32
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	e000ed04 	.word	0xe000ed04

0800a754 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4a07      	ldr	r2, [pc, #28]	; (800a780 <vApplicationGetIdleTaskMemory+0x2c>)
 800a764:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	4a06      	ldr	r2, [pc, #24]	; (800a784 <vApplicationGetIdleTaskMemory+0x30>)
 800a76a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2280      	movs	r2, #128	; 0x80
 800a770:	601a      	str	r2, [r3, #0]
}
 800a772:	bf00      	nop
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	20001108 	.word	0x20001108
 800a784:	200011c4 	.word	0x200011c4

0800a788 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4a07      	ldr	r2, [pc, #28]	; (800a7b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a798:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	4a06      	ldr	r2, [pc, #24]	; (800a7b8 <vApplicationGetTimerTaskMemory+0x30>)
 800a79e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7a6:	601a      	str	r2, [r3, #0]
}
 800a7a8:	bf00      	nop
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	200013c4 	.word	0x200013c4
 800a7b8:	20001480 	.word	0x20001480

0800a7bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f103 0208 	add.w	r2, r3, #8
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f103 0208 	add.w	r2, r3, #8
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f103 0208 	add.w	r2, r3, #8
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a816:	b480      	push	{r7}
 800a818:	b085      	sub	sp, #20
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	601a      	str	r2, [r3, #0]
}
 800a852:	bf00      	nop
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a85e:	b480      	push	{r7}
 800a860:	b085      	sub	sp, #20
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a874:	d103      	bne.n	800a87e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	e00c      	b.n	800a898 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3308      	adds	r3, #8
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	e002      	b.n	800a88c <vListInsert+0x2e>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	429a      	cmp	r2, r3
 800a896:	d2f6      	bcs.n	800a886 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	601a      	str	r2, [r3, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	6892      	ldr	r2, [r2, #8]
 800a8e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	6852      	ldr	r2, [r2, #4]
 800a8f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d103      	bne.n	800a904 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	689a      	ldr	r2, [r3, #8]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	1e5a      	subs	r2, r3, #1
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a94e:	f002 fca9 	bl	800d2a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95a:	68f9      	ldr	r1, [r7, #12]
 800a95c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a95e:	fb01 f303 	mul.w	r3, r1, r3
 800a962:	441a      	add	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97e:	3b01      	subs	r3, #1
 800a980:	68f9      	ldr	r1, [r7, #12]
 800a982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a984:	fb01 f303 	mul.w	r3, r1, r3
 800a988:	441a      	add	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	22ff      	movs	r2, #255	; 0xff
 800a992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	22ff      	movs	r2, #255	; 0xff
 800a99a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d114      	bne.n	800a9ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01a      	beq.n	800a9e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3310      	adds	r3, #16
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f001 fc5d 	bl	800c270 <xTaskRemoveFromEventList>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d012      	beq.n	800a9e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9bc:	4b0c      	ldr	r3, [pc, #48]	; (800a9f0 <xQueueGenericReset+0xcc>)
 800a9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	e009      	b.n	800a9e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3310      	adds	r3, #16
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff fef2 	bl	800a7bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3324      	adds	r3, #36	; 0x24
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff feed 	bl	800a7bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a9e2:	f002 fc8f 	bl	800d304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a9e6:	2301      	movs	r3, #1
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	e000ed04 	.word	0xe000ed04

0800a9f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b08e      	sub	sp, #56	; 0x38
 800a9f8:	af02      	add	r7, sp, #8
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10a      	bne.n	800aa3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa36:	bf00      	nop
 800aa38:	e7fe      	b.n	800aa38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <xQueueGenericCreateStatic+0x52>
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <xQueueGenericCreateStatic+0x56>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e000      	b.n	800aa4c <xQueueGenericCreateStatic+0x58>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10a      	bne.n	800aa66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	623b      	str	r3, [r7, #32]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d102      	bne.n	800aa72 <xQueueGenericCreateStatic+0x7e>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <xQueueGenericCreateStatic+0x82>
 800aa72:	2301      	movs	r3, #1
 800aa74:	e000      	b.n	800aa78 <xQueueGenericCreateStatic+0x84>
 800aa76:	2300      	movs	r3, #0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	61fb      	str	r3, [r7, #28]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa92:	2350      	movs	r3, #80	; 0x50
 800aa94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b50      	cmp	r3, #80	; 0x50
 800aa9a:	d00a      	beq.n	800aab2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	61bb      	str	r3, [r7, #24]
}
 800aaae:	bf00      	nop
 800aab0:	e7fe      	b.n	800aab0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aab2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00d      	beq.n	800aada <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aac6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	4613      	mov	r3, r2
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	68b9      	ldr	r1, [r7, #8]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 f83f 	bl	800ab58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aadc:	4618      	mov	r0, r3
 800aade:	3730      	adds	r7, #48	; 0x30
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08a      	sub	sp, #40	; 0x28
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10a      	bne.n	800ab0e <xQueueGenericCreate+0x2a>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	613b      	str	r3, [r7, #16]
}
 800ab0a:	bf00      	nop
 800ab0c:	e7fe      	b.n	800ab0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	3350      	adds	r3, #80	; 0x50
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f002 fce3 	bl	800d4e8 <pvPortMalloc>
 800ab22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d011      	beq.n	800ab4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	3350      	adds	r3, #80	; 0x50
 800ab32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab3c:	79fa      	ldrb	r2, [r7, #7]
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	4613      	mov	r3, r2
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f000 f805 	bl	800ab58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3720      	adds	r7, #32
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
 800ab64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	e002      	b.n	800ab7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab86:	2101      	movs	r1, #1
 800ab88:	69b8      	ldr	r0, [r7, #24]
 800ab8a:	f7ff fecb 	bl	800a924 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	78fa      	ldrb	r2, [r7, #3]
 800ab92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b08a      	sub	sp, #40	; 0x28
 800aba2:	af02      	add	r7, sp, #8
 800aba4:	60f8      	str	r0, [r7, #12]
 800aba6:	60b9      	str	r1, [r7, #8]
 800aba8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10a      	bne.n	800abc6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	61bb      	str	r3, [r7, #24]
}
 800abc2:	bf00      	nop
 800abc4:	e7fe      	b.n	800abc4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d90a      	bls.n	800abe4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	617b      	str	r3, [r7, #20]
}
 800abe0:	bf00      	nop
 800abe2:	e7fe      	b.n	800abe2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800abe4:	2302      	movs	r3, #2
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	2100      	movs	r1, #0
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff ff00 	bl	800a9f4 <xQueueGenericCreateStatic>
 800abf4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ac02:	69fb      	ldr	r3, [r7, #28]
	}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3720      	adds	r7, #32
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	613b      	str	r3, [r7, #16]
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d90a      	bls.n	800ac50 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	60fb      	str	r3, [r7, #12]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ac50:	2202      	movs	r2, #2
 800ac52:	2100      	movs	r1, #0
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7ff ff45 	bl	800aae4 <xQueueGenericCreate>
 800ac5a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ac68:	697b      	ldr	r3, [r7, #20]
	}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b08e      	sub	sp, #56	; 0x38
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
 800ac80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac82:	2300      	movs	r3, #0
 800ac84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <xQueueGenericSend+0x32>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d103      	bne.n	800acb4 <xQueueGenericSend+0x40>
 800acac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <xQueueGenericSend+0x44>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e000      	b.n	800acba <xQueueGenericSend+0x46>
 800acb8:	2300      	movs	r3, #0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <xQueueGenericSend+0x60>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d103      	bne.n	800ace2 <xQueueGenericSend+0x6e>
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d101      	bne.n	800ace6 <xQueueGenericSend+0x72>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e000      	b.n	800ace8 <xQueueGenericSend+0x74>
 800ace6:	2300      	movs	r3, #0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <xQueueGenericSend+0x8e>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	623b      	str	r3, [r7, #32]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad02:	f001 fc77 	bl	800c5f4 <xTaskGetSchedulerState>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <xQueueGenericSend+0x9e>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <xQueueGenericSend+0xa2>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <xQueueGenericSend+0xa4>
 800ad16:	2300      	movs	r3, #0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10a      	bne.n	800ad32 <xQueueGenericSend+0xbe>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	61fb      	str	r3, [r7, #28]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad32:	f002 fab7 	bl	800d2a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d302      	bcc.n	800ad48 <xQueueGenericSend+0xd4>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d129      	bne.n	800ad9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	68b9      	ldr	r1, [r7, #8]
 800ad4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad4e:	f000 fc5e 	bl	800b60e <prvCopyDataToQueue>
 800ad52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d010      	beq.n	800ad7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5e:	3324      	adds	r3, #36	; 0x24
 800ad60:	4618      	mov	r0, r3
 800ad62:	f001 fa85 	bl	800c270 <xTaskRemoveFromEventList>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d013      	beq.n	800ad94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad6c:	4b3f      	ldr	r3, [pc, #252]	; (800ae6c <xQueueGenericSend+0x1f8>)
 800ad6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	e00a      	b.n	800ad94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d007      	beq.n	800ad94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad84:	4b39      	ldr	r3, [pc, #228]	; (800ae6c <xQueueGenericSend+0x1f8>)
 800ad86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad8a:	601a      	str	r2, [r3, #0]
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad94:	f002 fab6 	bl	800d304 <vPortExitCritical>
				return pdPASS;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e063      	b.n	800ae64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d103      	bne.n	800adaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ada2:	f002 faaf 	bl	800d304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ada6:	2300      	movs	r3, #0
 800ada8:	e05c      	b.n	800ae64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adb0:	f107 0314 	add.w	r3, r7, #20
 800adb4:	4618      	mov	r0, r3
 800adb6:	f001 fabf 	bl	800c338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adba:	2301      	movs	r3, #1
 800adbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adbe:	f002 faa1 	bl	800d304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adc2:	f001 f819 	bl	800bdf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adc6:	f002 fa6d 	bl	800d2a4 <vPortEnterCritical>
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800add0:	b25b      	sxtb	r3, r3
 800add2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800add6:	d103      	bne.n	800ade0 <xQueueGenericSend+0x16c>
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ade6:	b25b      	sxtb	r3, r3
 800ade8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adec:	d103      	bne.n	800adf6 <xQueueGenericSend+0x182>
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adf6:	f002 fa85 	bl	800d304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adfa:	1d3a      	adds	r2, r7, #4
 800adfc:	f107 0314 	add.w	r3, r7, #20
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f001 faae 	bl	800c364 <xTaskCheckForTimeOut>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d124      	bne.n	800ae58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae10:	f000 fcf5 	bl	800b7fe <prvIsQueueFull>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d018      	beq.n	800ae4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	3310      	adds	r3, #16
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	4611      	mov	r1, r2
 800ae22:	4618      	mov	r0, r3
 800ae24:	f001 f9d4 	bl	800c1d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae2a:	f000 fc80 	bl	800b72e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae2e:	f000 fff1 	bl	800be14 <xTaskResumeAll>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f47f af7c 	bne.w	800ad32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ae3a:	4b0c      	ldr	r3, [pc, #48]	; (800ae6c <xQueueGenericSend+0x1f8>)
 800ae3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	e772      	b.n	800ad32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae4e:	f000 fc6e 	bl	800b72e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae52:	f000 ffdf 	bl	800be14 <xTaskResumeAll>
 800ae56:	e76c      	b.n	800ad32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae5a:	f000 fc68 	bl	800b72e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae5e:	f000 ffd9 	bl	800be14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3738      	adds	r7, #56	; 0x38
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	e000ed04 	.word	0xe000ed04

0800ae70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b090      	sub	sp, #64	; 0x40
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae9a:	bf00      	nop
 800ae9c:	e7fe      	b.n	800ae9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d103      	bne.n	800aeac <xQueueGenericSendFromISR+0x3c>
 800aea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <xQueueGenericSendFromISR+0x40>
 800aeac:	2301      	movs	r3, #1
 800aeae:	e000      	b.n	800aeb2 <xQueueGenericSendFromISR+0x42>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10a      	bne.n	800aecc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aec8:	bf00      	nop
 800aeca:	e7fe      	b.n	800aeca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d103      	bne.n	800aeda <xQueueGenericSendFromISR+0x6a>
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d101      	bne.n	800aede <xQueueGenericSendFromISR+0x6e>
 800aeda:	2301      	movs	r3, #1
 800aedc:	e000      	b.n	800aee0 <xQueueGenericSendFromISR+0x70>
 800aede:	2300      	movs	r3, #0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10a      	bne.n	800aefa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	623b      	str	r3, [r7, #32]
}
 800aef6:	bf00      	nop
 800aef8:	e7fe      	b.n	800aef8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aefa:	f002 fab5 	bl	800d468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aefe:	f3ef 8211 	mrs	r2, BASEPRI
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	61fa      	str	r2, [r7, #28]
 800af14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af22:	429a      	cmp	r2, r3
 800af24:	d302      	bcc.n	800af2c <xQueueGenericSendFromISR+0xbc>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d12f      	bne.n	800af8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	68b9      	ldr	r1, [r7, #8]
 800af40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af42:	f000 fb64 	bl	800b60e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800af4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af4e:	d112      	bne.n	800af76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b00      	cmp	r3, #0
 800af56:	d016      	beq.n	800af86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	3324      	adds	r3, #36	; 0x24
 800af5c:	4618      	mov	r0, r3
 800af5e:	f001 f987 	bl	800c270 <xTaskRemoveFromEventList>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00e      	beq.n	800af86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00b      	beq.n	800af86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	e007      	b.n	800af86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af7a:	3301      	adds	r3, #1
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	b25a      	sxtb	r2, r3
 800af80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af86:	2301      	movs	r3, #1
 800af88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800af8a:	e001      	b.n	800af90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af8c:	2300      	movs	r3, #0
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3740      	adds	r7, #64	; 0x40
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b08e      	sub	sp, #56	; 0x38
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10a      	bne.n	800afd0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	623b      	str	r3, [r7, #32]
}
 800afcc:	bf00      	nop
 800afce:	e7fe      	b.n	800afce <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00a      	beq.n	800afee <xQueueGiveFromISR+0x48>
	__asm volatile
 800afd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afdc:	f383 8811 	msr	BASEPRI, r3
 800afe0:	f3bf 8f6f 	isb	sy
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	61fb      	str	r3, [r7, #28]
}
 800afea:	bf00      	nop
 800afec:	e7fe      	b.n	800afec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d103      	bne.n	800affe <xQueueGiveFromISR+0x58>
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <xQueueGiveFromISR+0x5c>
 800affe:	2301      	movs	r3, #1
 800b000:	e000      	b.n	800b004 <xQueueGiveFromISR+0x5e>
 800b002:	2300      	movs	r3, #0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <xQueueGiveFromISR+0x78>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	61bb      	str	r3, [r7, #24]
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b01e:	f002 fa23 	bl	800d468 <vPortValidateInterruptPriority>
	__asm volatile
 800b022:	f3ef 8211 	mrs	r2, BASEPRI
 800b026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	617a      	str	r2, [r7, #20]
 800b038:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b03a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b03c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b042:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d22b      	bcs.n	800b0a6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b060:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b068:	d112      	bne.n	800b090 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d016      	beq.n	800b0a0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	3324      	adds	r3, #36	; 0x24
 800b076:	4618      	mov	r0, r3
 800b078:	f001 f8fa 	bl	800c270 <xTaskRemoveFromEventList>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00e      	beq.n	800b0a0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00b      	beq.n	800b0a0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	e007      	b.n	800b0a0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b094:	3301      	adds	r3, #1
 800b096:	b2db      	uxtb	r3, r3
 800b098:	b25a      	sxtb	r2, r3
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b0a4:	e001      	b.n	800b0aa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f383 8811 	msr	BASEPRI, r3
}
 800b0b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3738      	adds	r7, #56	; 0x38
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08c      	sub	sp, #48	; 0x30
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <xQueueReceive+0x30>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	623b      	str	r3, [r7, #32]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d103      	bne.n	800b0fe <xQueueReceive+0x3e>
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <xQueueReceive+0x42>
 800b0fe:	2301      	movs	r3, #1
 800b100:	e000      	b.n	800b104 <xQueueReceive+0x44>
 800b102:	2300      	movs	r3, #0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <xQueueReceive+0x5e>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	61fb      	str	r3, [r7, #28]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b11e:	f001 fa69 	bl	800c5f4 <xTaskGetSchedulerState>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d102      	bne.n	800b12e <xQueueReceive+0x6e>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <xQueueReceive+0x72>
 800b12e:	2301      	movs	r3, #1
 800b130:	e000      	b.n	800b134 <xQueueReceive+0x74>
 800b132:	2300      	movs	r3, #0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10a      	bne.n	800b14e <xQueueReceive+0x8e>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	61bb      	str	r3, [r7, #24]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b14e:	f002 f8a9 	bl	800d2a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b156:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d01f      	beq.n	800b19e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b15e:	68b9      	ldr	r1, [r7, #8]
 800b160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b162:	f000 fabe 	bl	800b6e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	1e5a      	subs	r2, r3, #1
 800b16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00f      	beq.n	800b196 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	3310      	adds	r3, #16
 800b17a:	4618      	mov	r0, r3
 800b17c:	f001 f878 	bl	800c270 <xTaskRemoveFromEventList>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d007      	beq.n	800b196 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b186:	4b3d      	ldr	r3, [pc, #244]	; (800b27c <xQueueReceive+0x1bc>)
 800b188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b196:	f002 f8b5 	bl	800d304 <vPortExitCritical>
				return pdPASS;
 800b19a:	2301      	movs	r3, #1
 800b19c:	e069      	b.n	800b272 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d103      	bne.n	800b1ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1a4:	f002 f8ae 	bl	800d304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e062      	b.n	800b272 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d106      	bne.n	800b1c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1b2:	f107 0310 	add.w	r3, r7, #16
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f001 f8be 	bl	800c338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1c0:	f002 f8a0 	bl	800d304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1c4:	f000 fe18 	bl	800bdf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1c8:	f002 f86c 	bl	800d2a4 <vPortEnterCritical>
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1d2:	b25b      	sxtb	r3, r3
 800b1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1d8:	d103      	bne.n	800b1e2 <xQueueReceive+0x122>
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1e8:	b25b      	sxtb	r3, r3
 800b1ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1ee:	d103      	bne.n	800b1f8 <xQueueReceive+0x138>
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1f8:	f002 f884 	bl	800d304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1fc:	1d3a      	adds	r2, r7, #4
 800b1fe:	f107 0310 	add.w	r3, r7, #16
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f001 f8ad 	bl	800c364 <xTaskCheckForTimeOut>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d123      	bne.n	800b258 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b212:	f000 fade 	bl	800b7d2 <prvIsQueueEmpty>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d017      	beq.n	800b24c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	3324      	adds	r3, #36	; 0x24
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	4611      	mov	r1, r2
 800b224:	4618      	mov	r0, r3
 800b226:	f000 ffd3 	bl	800c1d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22c:	f000 fa7f 	bl	800b72e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b230:	f000 fdf0 	bl	800be14 <xTaskResumeAll>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d189      	bne.n	800b14e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b23a:	4b10      	ldr	r3, [pc, #64]	; (800b27c <xQueueReceive+0x1bc>)
 800b23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	e780      	b.n	800b14e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b24e:	f000 fa6e 	bl	800b72e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b252:	f000 fddf 	bl	800be14 <xTaskResumeAll>
 800b256:	e77a      	b.n	800b14e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b25a:	f000 fa68 	bl	800b72e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b25e:	f000 fdd9 	bl	800be14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b264:	f000 fab5 	bl	800b7d2 <prvIsQueueEmpty>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f43f af6f 	beq.w	800b14e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b270:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b272:	4618      	mov	r0, r3
 800b274:	3730      	adds	r7, #48	; 0x30
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	e000ed04 	.word	0xe000ed04

0800b280 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b08e      	sub	sp, #56	; 0x38
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b28a:	2300      	movs	r3, #0
 800b28c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b292:	2300      	movs	r3, #0
 800b294:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	623b      	str	r3, [r7, #32]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	61fb      	str	r3, [r7, #28]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2d0:	f001 f990 	bl	800c5f4 <xTaskGetSchedulerState>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d102      	bne.n	800b2e0 <xQueueSemaphoreTake+0x60>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d101      	bne.n	800b2e4 <xQueueSemaphoreTake+0x64>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e000      	b.n	800b2e6 <xQueueSemaphoreTake+0x66>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10a      	bne.n	800b300 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	61bb      	str	r3, [r7, #24]
}
 800b2fc:	bf00      	nop
 800b2fe:	e7fe      	b.n	800b2fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b300:	f001 ffd0 	bl	800d2a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b308:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d024      	beq.n	800b35a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	1e5a      	subs	r2, r3, #1
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d104      	bne.n	800b32a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b320:	f001 fade 	bl	800c8e0 <pvTaskIncrementMutexHeldCount>
 800b324:	4602      	mov	r2, r0
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00f      	beq.n	800b352 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b334:	3310      	adds	r3, #16
 800b336:	4618      	mov	r0, r3
 800b338:	f000 ff9a 	bl	800c270 <xTaskRemoveFromEventList>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d007      	beq.n	800b352 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b342:	4b54      	ldr	r3, [pc, #336]	; (800b494 <xQueueSemaphoreTake+0x214>)
 800b344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b352:	f001 ffd7 	bl	800d304 <vPortExitCritical>
				return pdPASS;
 800b356:	2301      	movs	r3, #1
 800b358:	e097      	b.n	800b48a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d111      	bne.n	800b384 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00a      	beq.n	800b37c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	617b      	str	r3, [r7, #20]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b37c:	f001 ffc2 	bl	800d304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b380:	2300      	movs	r3, #0
 800b382:	e082      	b.n	800b48a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b38a:	f107 030c 	add.w	r3, r7, #12
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 ffd2 	bl	800c338 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b394:	2301      	movs	r3, #1
 800b396:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b398:	f001 ffb4 	bl	800d304 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b39c:	f000 fd2c 	bl	800bdf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3a0:	f001 ff80 	bl	800d2a4 <vPortEnterCritical>
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3aa:	b25b      	sxtb	r3, r3
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3b0:	d103      	bne.n	800b3ba <xQueueSemaphoreTake+0x13a>
 800b3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3c0:	b25b      	sxtb	r3, r3
 800b3c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3c6:	d103      	bne.n	800b3d0 <xQueueSemaphoreTake+0x150>
 800b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3d0:	f001 ff98 	bl	800d304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3d4:	463a      	mov	r2, r7
 800b3d6:	f107 030c 	add.w	r3, r7, #12
 800b3da:	4611      	mov	r1, r2
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 ffc1 	bl	800c364 <xTaskCheckForTimeOut>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d132      	bne.n	800b44e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3ea:	f000 f9f2 	bl	800b7d2 <prvIsQueueEmpty>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d026      	beq.n	800b442 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d109      	bne.n	800b410 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b3fc:	f001 ff52 	bl	800d2a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	4618      	mov	r0, r3
 800b406:	f001 f913 	bl	800c630 <xTaskPriorityInherit>
 800b40a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b40c:	f001 ff7a 	bl	800d304 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	3324      	adds	r3, #36	; 0x24
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	4611      	mov	r1, r2
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 fed9 	bl	800c1d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b41e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b420:	f000 f985 	bl	800b72e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b424:	f000 fcf6 	bl	800be14 <xTaskResumeAll>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f47f af68 	bne.w	800b300 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b430:	4b18      	ldr	r3, [pc, #96]	; (800b494 <xQueueSemaphoreTake+0x214>)
 800b432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	e75e      	b.n	800b300 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b444:	f000 f973 	bl	800b72e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b448:	f000 fce4 	bl	800be14 <xTaskResumeAll>
 800b44c:	e758      	b.n	800b300 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b44e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b450:	f000 f96d 	bl	800b72e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b454:	f000 fcde 	bl	800be14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b45a:	f000 f9ba 	bl	800b7d2 <prvIsQueueEmpty>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	f43f af4d 	beq.w	800b300 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00d      	beq.n	800b488 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b46c:	f001 ff1a 	bl	800d2a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b472:	f000 f8b4 	bl	800b5de <prvGetDisinheritPriorityAfterTimeout>
 800b476:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b47e:	4618      	mov	r0, r3
 800b480:	f001 f9ac 	bl	800c7dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b484:	f001 ff3e 	bl	800d304 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3738      	adds	r7, #56	; 0x38
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	e000ed04 	.word	0xe000ed04

0800b498 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08e      	sub	sp, #56	; 0x38
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	623b      	str	r3, [r7, #32]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d103      	bne.n	800b4d2 <xQueueReceiveFromISR+0x3a>
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <xQueueReceiveFromISR+0x3e>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e000      	b.n	800b4d8 <xQueueReceiveFromISR+0x40>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	61fb      	str	r3, [r7, #28]
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4f2:	f001 ffb9 	bl	800d468 <vPortValidateInterruptPriority>
	__asm volatile
 800b4f6:	f3ef 8211 	mrs	r2, BASEPRI
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	61ba      	str	r2, [r7, #24]
 800b50c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b50e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b510:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d02f      	beq.n	800b57e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b528:	68b9      	ldr	r1, [r7, #8]
 800b52a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b52c:	f000 f8d9 	bl	800b6e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b532:	1e5a      	subs	r2, r3, #1
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b53c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b540:	d112      	bne.n	800b568 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d016      	beq.n	800b578 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	3310      	adds	r3, #16
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fe8e 	bl	800c270 <xTaskRemoveFromEventList>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00e      	beq.n	800b578 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	e007      	b.n	800b578 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b56c:	3301      	adds	r3, #1
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	b25a      	sxtb	r2, r3
 800b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b578:	2301      	movs	r3, #1
 800b57a:	637b      	str	r3, [r7, #52]	; 0x34
 800b57c:	e001      	b.n	800b582 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b57e:	2300      	movs	r3, #0
 800b580:	637b      	str	r3, [r7, #52]	; 0x34
 800b582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b584:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f383 8811 	msr	BASEPRI, r3
}
 800b58c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b590:	4618      	mov	r0, r3
 800b592:	3738      	adds	r7, #56	; 0x38
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10a      	bne.n	800b5c0 <vQueueDelete+0x28>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	60bb      	str	r3, [r7, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f000 f95f 	bl	800b884 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f002 f855 	bl	800d680 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b5d6:	bf00      	nop
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b5de:	b480      	push	{r7}
 800b5e0:	b085      	sub	sp, #20
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d006      	beq.n	800b5fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e001      	b.n	800b600 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b600:	68fb      	ldr	r3, [r7, #12]
	}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b086      	sub	sp, #24
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b622:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10d      	bne.n	800b648 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d14d      	bne.n	800b6d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	4618      	mov	r0, r3
 800b63a:	f001 f861 	bl	800c700 <xTaskPriorityDisinherit>
 800b63e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	609a      	str	r2, [r3, #8]
 800b646:	e043      	b.n	800b6d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d119      	bne.n	800b682 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6858      	ldr	r0, [r3, #4]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b656:	461a      	mov	r2, r3
 800b658:	68b9      	ldr	r1, [r7, #8]
 800b65a:	f002 fa52 	bl	800db02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b666:	441a      	add	r2, r3
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	685a      	ldr	r2, [r3, #4]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	429a      	cmp	r2, r3
 800b676:	d32b      	bcc.n	800b6d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	605a      	str	r2, [r3, #4]
 800b680:	e026      	b.n	800b6d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68d8      	ldr	r0, [r3, #12]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68a:	461a      	mov	r2, r3
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	f002 fa38 	bl	800db02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	68da      	ldr	r2, [r3, #12]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69a:	425b      	negs	r3, r3
 800b69c:	441a      	add	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	68da      	ldr	r2, [r3, #12]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d207      	bcs.n	800b6be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	689a      	ldr	r2, [r3, #8]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b6:	425b      	negs	r3, r3
 800b6b8:	441a      	add	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d105      	bne.n	800b6d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b6d8:	697b      	ldr	r3, [r7, #20]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d018      	beq.n	800b726 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fc:	441a      	add	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68da      	ldr	r2, [r3, #12]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d303      	bcc.n	800b716 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68d9      	ldr	r1, [r3, #12]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	461a      	mov	r2, r3
 800b720:	6838      	ldr	r0, [r7, #0]
 800b722:	f002 f9ee 	bl	800db02 <memcpy>
	}
}
 800b726:	bf00      	nop
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b084      	sub	sp, #16
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b736:	f001 fdb5 	bl	800d2a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b740:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b742:	e011      	b.n	800b768 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d012      	beq.n	800b772 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3324      	adds	r3, #36	; 0x24
 800b750:	4618      	mov	r0, r3
 800b752:	f000 fd8d 	bl	800c270 <xTaskRemoveFromEventList>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b75c:	f000 fe64 	bl	800c428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b760:	7bfb      	ldrb	r3, [r7, #15]
 800b762:	3b01      	subs	r3, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dce9      	bgt.n	800b744 <prvUnlockQueue+0x16>
 800b770:	e000      	b.n	800b774 <prvUnlockQueue+0x46>
					break;
 800b772:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	22ff      	movs	r2, #255	; 0xff
 800b778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b77c:	f001 fdc2 	bl	800d304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b780:	f001 fd90 	bl	800d2a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b78a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b78c:	e011      	b.n	800b7b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d012      	beq.n	800b7bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3310      	adds	r3, #16
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 fd68 	bl	800c270 <xTaskRemoveFromEventList>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b7a6:	f000 fe3f 	bl	800c428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	dce9      	bgt.n	800b78e <prvUnlockQueue+0x60>
 800b7ba:	e000      	b.n	800b7be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	22ff      	movs	r2, #255	; 0xff
 800b7c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b7c6:	f001 fd9d 	bl	800d304 <vPortExitCritical>
}
 800b7ca:	bf00      	nop
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b084      	sub	sp, #16
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7da:	f001 fd63 	bl	800d2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	e001      	b.n	800b7f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7f0:	f001 fd88 	bl	800d304 <vPortExitCritical>

	return xReturn;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b806:	f001 fd4d 	bl	800d2a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b812:	429a      	cmp	r2, r3
 800b814:	d102      	bne.n	800b81c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b816:	2301      	movs	r3, #1
 800b818:	60fb      	str	r3, [r7, #12]
 800b81a:	e001      	b.n	800b820 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b81c:	2300      	movs	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b820:	f001 fd70 	bl	800d304 <vPortExitCritical>

	return xReturn;
 800b824:	68fb      	ldr	r3, [r7, #12]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
	...

0800b830 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	e014      	b.n	800b86a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b840:	4a0f      	ldr	r2, [pc, #60]	; (800b880 <vQueueAddToRegistry+0x50>)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10b      	bne.n	800b864 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b84c:	490c      	ldr	r1, [pc, #48]	; (800b880 <vQueueAddToRegistry+0x50>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b856:	4a0a      	ldr	r2, [pc, #40]	; (800b880 <vQueueAddToRegistry+0x50>)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	4413      	add	r3, r2
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b862:	e006      	b.n	800b872 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	3301      	adds	r3, #1
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b07      	cmp	r3, #7
 800b86e:	d9e7      	bls.n	800b840 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20007e08 	.word	0x20007e08

0800b884 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b88c:	2300      	movs	r3, #0
 800b88e:	60fb      	str	r3, [r7, #12]
 800b890:	e016      	b.n	800b8c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b892:	4a10      	ldr	r2, [pc, #64]	; (800b8d4 <vQueueUnregisterQueue+0x50>)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	4413      	add	r3, r2
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d10b      	bne.n	800b8ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b8a2:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <vQueueUnregisterQueue+0x50>)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b8ac:	4a09      	ldr	r2, [pc, #36]	; (800b8d4 <vQueueUnregisterQueue+0x50>)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	4413      	add	r3, r2
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	605a      	str	r2, [r3, #4]
				break;
 800b8b8:	e006      	b.n	800b8c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2b07      	cmp	r3, #7
 800b8c4:	d9e5      	bls.n	800b892 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b8c6:	bf00      	nop
 800b8c8:	bf00      	nop
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	20007e08 	.word	0x20007e08

0800b8d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b8e8:	f001 fcdc 	bl	800d2a4 <vPortEnterCritical>
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8f2:	b25b      	sxtb	r3, r3
 800b8f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8f8:	d103      	bne.n	800b902 <vQueueWaitForMessageRestricted+0x2a>
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b908:	b25b      	sxtb	r3, r3
 800b90a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b90e:	d103      	bne.n	800b918 <vQueueWaitForMessageRestricted+0x40>
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b918:	f001 fcf4 	bl	800d304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b920:	2b00      	cmp	r3, #0
 800b922:	d106      	bne.n	800b932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	3324      	adds	r3, #36	; 0x24
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	68b9      	ldr	r1, [r7, #8]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fc73 	bl	800c218 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b932:	6978      	ldr	r0, [r7, #20]
 800b934:	f7ff fefb 	bl	800b72e <prvUnlockQueue>
	}
 800b938:	bf00      	nop
 800b93a:	3718      	adds	r7, #24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08e      	sub	sp, #56	; 0x38
 800b944:	af04      	add	r7, sp, #16
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10a      	bne.n	800b96a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	623b      	str	r3, [r7, #32]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <xTaskCreateStatic+0x46>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	61fb      	str	r3, [r7, #28]
}
 800b982:	bf00      	nop
 800b984:	e7fe      	b.n	800b984 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b986:	23bc      	movs	r3, #188	; 0xbc
 800b988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	2bbc      	cmp	r3, #188	; 0xbc
 800b98e:	d00a      	beq.n	800b9a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	61bb      	str	r3, [r7, #24]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b9a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d01e      	beq.n	800b9ec <xTaskCreateStatic+0xac>
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d01b      	beq.n	800b9ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9303      	str	r3, [sp, #12]
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	9302      	str	r3, [sp, #8]
 800b9ce:	f107 0314 	add.w	r3, r7, #20
 800b9d2:	9301      	str	r3, [sp, #4]
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	68b9      	ldr	r1, [r7, #8]
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 f850 	bl	800ba84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9e6:	f000 f8f3 	bl	800bbd0 <prvAddNewTaskToReadyList>
 800b9ea:	e001      	b.n	800b9f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9f0:	697b      	ldr	r3, [r7, #20]
	}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3728      	adds	r7, #40	; 0x28
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b08c      	sub	sp, #48	; 0x30
 800b9fe:	af04      	add	r7, sp, #16
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	603b      	str	r3, [r7, #0]
 800ba06:	4613      	mov	r3, r2
 800ba08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ba0a:	88fb      	ldrh	r3, [r7, #6]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f001 fd6a 	bl	800d4e8 <pvPortMalloc>
 800ba14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00e      	beq.n	800ba3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba1c:	20bc      	movs	r0, #188	; 0xbc
 800ba1e:	f001 fd63 	bl	800d4e8 <pvPortMalloc>
 800ba22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ba30:	e005      	b.n	800ba3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba32:	6978      	ldr	r0, [r7, #20]
 800ba34:	f001 fe24 	bl	800d680 <vPortFree>
 800ba38:	e001      	b.n	800ba3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d017      	beq.n	800ba74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba4c:	88fa      	ldrh	r2, [r7, #6]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	9303      	str	r3, [sp, #12]
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	9302      	str	r3, [sp, #8]
 800ba56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba58:	9301      	str	r3, [sp, #4]
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	68b9      	ldr	r1, [r7, #8]
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f000 f80e 	bl	800ba84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba68:	69f8      	ldr	r0, [r7, #28]
 800ba6a:	f000 f8b1 	bl	800bbd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	61bb      	str	r3, [r7, #24]
 800ba72:	e002      	b.n	800ba7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
	}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3720      	adds	r7, #32
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	21a5      	movs	r1, #165	; 0xa5
 800ba9e:	f002 f83e 	bl	800db1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800baac:	3b01      	subs	r3, #1
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	f023 0307 	bic.w	r3, r3, #7
 800baba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	f003 0307 	and.w	r3, r3, #7
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00a      	beq.n	800badc <prvInitialiseNewTask+0x58>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	617b      	str	r3, [r7, #20]
}
 800bad8:	bf00      	nop
 800bada:	e7fe      	b.n	800bada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d01f      	beq.n	800bb22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bae2:	2300      	movs	r3, #0
 800bae4:	61fb      	str	r3, [r7, #28]
 800bae6:	e012      	b.n	800bb0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	4413      	add	r3, r2
 800baee:	7819      	ldrb	r1, [r3, #0]
 800baf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	4413      	add	r3, r2
 800baf6:	3334      	adds	r3, #52	; 0x34
 800baf8:	460a      	mov	r2, r1
 800bafa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	4413      	add	r3, r2
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d006      	beq.n	800bb16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	61fb      	str	r3, [r7, #28]
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	2b0f      	cmp	r3, #15
 800bb12:	d9e9      	bls.n	800bae8 <prvInitialiseNewTask+0x64>
 800bb14:	e000      	b.n	800bb18 <prvInitialiseNewTask+0x94>
			{
				break;
 800bb16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb20:	e003      	b.n	800bb2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	2b37      	cmp	r3, #55	; 0x37
 800bb2e:	d901      	bls.n	800bb34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb30:	2337      	movs	r3, #55	; 0x37
 800bb32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	2200      	movs	r2, #0
 800bb44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fe fe56 	bl	800a7fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	3318      	adds	r3, #24
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fe fe51 	bl	800a7fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb72:	2200      	movs	r2, #0
 800bb74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	3354      	adds	r3, #84	; 0x54
 800bb84:	2260      	movs	r2, #96	; 0x60
 800bb86:	2100      	movs	r1, #0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f001 ffc8 	bl	800db1e <memset>
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb90:	4a0c      	ldr	r2, [pc, #48]	; (800bbc4 <prvInitialiseNewTask+0x140>)
 800bb92:	659a      	str	r2, [r3, #88]	; 0x58
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	4a0c      	ldr	r2, [pc, #48]	; (800bbc8 <prvInitialiseNewTask+0x144>)
 800bb98:	65da      	str	r2, [r3, #92]	; 0x5c
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9c:	4a0b      	ldr	r2, [pc, #44]	; (800bbcc <prvInitialiseNewTask+0x148>)
 800bb9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	68f9      	ldr	r1, [r7, #12]
 800bba4:	69b8      	ldr	r0, [r7, #24]
 800bba6:	f001 fa51 	bl	800d04c <pxPortInitialiseStack>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbbc:	bf00      	nop
 800bbbe:	3720      	adds	r7, #32
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	0800ef84 	.word	0x0800ef84
 800bbc8:	0800efa4 	.word	0x0800efa4
 800bbcc:	0800ef64 	.word	0x0800ef64

0800bbd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bbd8:	f001 fb64 	bl	800d2a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bbdc:	4b2d      	ldr	r3, [pc, #180]	; (800bc94 <prvAddNewTaskToReadyList+0xc4>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	4a2c      	ldr	r2, [pc, #176]	; (800bc94 <prvAddNewTaskToReadyList+0xc4>)
 800bbe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bbe6:	4b2c      	ldr	r3, [pc, #176]	; (800bc98 <prvAddNewTaskToReadyList+0xc8>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d109      	bne.n	800bc02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bbee:	4a2a      	ldr	r2, [pc, #168]	; (800bc98 <prvAddNewTaskToReadyList+0xc8>)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bbf4:	4b27      	ldr	r3, [pc, #156]	; (800bc94 <prvAddNewTaskToReadyList+0xc4>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d110      	bne.n	800bc1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bbfc:	f000 fc38 	bl	800c470 <prvInitialiseTaskLists>
 800bc00:	e00d      	b.n	800bc1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc02:	4b26      	ldr	r3, [pc, #152]	; (800bc9c <prvAddNewTaskToReadyList+0xcc>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d109      	bne.n	800bc1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc0a:	4b23      	ldr	r3, [pc, #140]	; (800bc98 <prvAddNewTaskToReadyList+0xc8>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d802      	bhi.n	800bc1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc18:	4a1f      	ldr	r2, [pc, #124]	; (800bc98 <prvAddNewTaskToReadyList+0xc8>)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc1e:	4b20      	ldr	r3, [pc, #128]	; (800bca0 <prvAddNewTaskToReadyList+0xd0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	4a1e      	ldr	r2, [pc, #120]	; (800bca0 <prvAddNewTaskToReadyList+0xd0>)
 800bc26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc28:	4b1d      	ldr	r3, [pc, #116]	; (800bca0 <prvAddNewTaskToReadyList+0xd0>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc34:	4b1b      	ldr	r3, [pc, #108]	; (800bca4 <prvAddNewTaskToReadyList+0xd4>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d903      	bls.n	800bc44 <prvAddNewTaskToReadyList+0x74>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc40:	4a18      	ldr	r2, [pc, #96]	; (800bca4 <prvAddNewTaskToReadyList+0xd4>)
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc48:	4613      	mov	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4413      	add	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4a15      	ldr	r2, [pc, #84]	; (800bca8 <prvAddNewTaskToReadyList+0xd8>)
 800bc52:	441a      	add	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3304      	adds	r3, #4
 800bc58:	4619      	mov	r1, r3
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	f7fe fddb 	bl	800a816 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc60:	f001 fb50 	bl	800d304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc64:	4b0d      	ldr	r3, [pc, #52]	; (800bc9c <prvAddNewTaskToReadyList+0xcc>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00e      	beq.n	800bc8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc6c:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <prvAddNewTaskToReadyList+0xc8>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d207      	bcs.n	800bc8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc7a:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <prvAddNewTaskToReadyList+0xdc>)
 800bc7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc8a:	bf00      	nop
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20001d54 	.word	0x20001d54
 800bc98:	20001880 	.word	0x20001880
 800bc9c:	20001d60 	.word	0x20001d60
 800bca0:	20001d70 	.word	0x20001d70
 800bca4:	20001d5c 	.word	0x20001d5c
 800bca8:	20001884 	.word	0x20001884
 800bcac:	e000ed04 	.word	0xe000ed04

0800bcb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d017      	beq.n	800bcf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bcc2:	4b13      	ldr	r3, [pc, #76]	; (800bd10 <vTaskDelay+0x60>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00a      	beq.n	800bce0 <vTaskDelay+0x30>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	60bb      	str	r3, [r7, #8]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bce0:	f000 f88a 	bl	800bdf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bce4:	2100      	movs	r1, #0
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fe0e 	bl	800c908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bcec:	f000 f892 	bl	800be14 <xTaskResumeAll>
 800bcf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d107      	bne.n	800bd08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bcf8:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <vTaskDelay+0x64>)
 800bcfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcfe:	601a      	str	r2, [r3, #0]
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20001d7c 	.word	0x20001d7c
 800bd14:	e000ed04 	.word	0xe000ed04

0800bd18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	; 0x28
 800bd1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd22:	2300      	movs	r3, #0
 800bd24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd26:	463a      	mov	r2, r7
 800bd28:	1d39      	adds	r1, r7, #4
 800bd2a:	f107 0308 	add.w	r3, r7, #8
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fd10 	bl	800a754 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	9202      	str	r2, [sp, #8]
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	2300      	movs	r3, #0
 800bd44:	460a      	mov	r2, r1
 800bd46:	4924      	ldr	r1, [pc, #144]	; (800bdd8 <vTaskStartScheduler+0xc0>)
 800bd48:	4824      	ldr	r0, [pc, #144]	; (800bddc <vTaskStartScheduler+0xc4>)
 800bd4a:	f7ff fdf9 	bl	800b940 <xTaskCreateStatic>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	4a23      	ldr	r2, [pc, #140]	; (800bde0 <vTaskStartScheduler+0xc8>)
 800bd52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd54:	4b22      	ldr	r3, [pc, #136]	; (800bde0 <vTaskStartScheduler+0xc8>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	e001      	b.n	800bd66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d102      	bne.n	800bd72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bd6c:	f000 fe20 	bl	800c9b0 <xTimerCreateTimerTask>
 800bd70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d11b      	bne.n	800bdb0 <vTaskStartScheduler+0x98>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	613b      	str	r3, [r7, #16]
}
 800bd8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd8c:	4b15      	ldr	r3, [pc, #84]	; (800bde4 <vTaskStartScheduler+0xcc>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3354      	adds	r3, #84	; 0x54
 800bd92:	4a15      	ldr	r2, [pc, #84]	; (800bde8 <vTaskStartScheduler+0xd0>)
 800bd94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd96:	4b15      	ldr	r3, [pc, #84]	; (800bdec <vTaskStartScheduler+0xd4>)
 800bd98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd9e:	4b14      	ldr	r3, [pc, #80]	; (800bdf0 <vTaskStartScheduler+0xd8>)
 800bda0:	2201      	movs	r2, #1
 800bda2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bda4:	4b13      	ldr	r3, [pc, #76]	; (800bdf4 <vTaskStartScheduler+0xdc>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bdaa:	f001 f9d9 	bl	800d160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bdae:	e00e      	b.n	800bdce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdb6:	d10a      	bne.n	800bdce <vTaskStartScheduler+0xb6>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	60fb      	str	r3, [r7, #12]
}
 800bdca:	bf00      	nop
 800bdcc:	e7fe      	b.n	800bdcc <vTaskStartScheduler+0xb4>
}
 800bdce:	bf00      	nop
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	0800ee0c 	.word	0x0800ee0c
 800bddc:	0800c441 	.word	0x0800c441
 800bde0:	20001d78 	.word	0x20001d78
 800bde4:	20001880 	.word	0x20001880
 800bde8:	20000048 	.word	0x20000048
 800bdec:	20001d74 	.word	0x20001d74
 800bdf0:	20001d60 	.word	0x20001d60
 800bdf4:	20001d58 	.word	0x20001d58

0800bdf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bdfc:	4b04      	ldr	r3, [pc, #16]	; (800be10 <vTaskSuspendAll+0x18>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3301      	adds	r3, #1
 800be02:	4a03      	ldr	r2, [pc, #12]	; (800be10 <vTaskSuspendAll+0x18>)
 800be04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800be06:	bf00      	nop
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	20001d7c 	.word	0x20001d7c

0800be14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be1a:	2300      	movs	r3, #0
 800be1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be1e:	2300      	movs	r3, #0
 800be20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be22:	4b42      	ldr	r3, [pc, #264]	; (800bf2c <xTaskResumeAll+0x118>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10a      	bne.n	800be40 <xTaskResumeAll+0x2c>
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	603b      	str	r3, [r7, #0]
}
 800be3c:	bf00      	nop
 800be3e:	e7fe      	b.n	800be3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be40:	f001 fa30 	bl	800d2a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be44:	4b39      	ldr	r3, [pc, #228]	; (800bf2c <xTaskResumeAll+0x118>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	3b01      	subs	r3, #1
 800be4a:	4a38      	ldr	r2, [pc, #224]	; (800bf2c <xTaskResumeAll+0x118>)
 800be4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be4e:	4b37      	ldr	r3, [pc, #220]	; (800bf2c <xTaskResumeAll+0x118>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d162      	bne.n	800bf1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be56:	4b36      	ldr	r3, [pc, #216]	; (800bf30 <xTaskResumeAll+0x11c>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d05e      	beq.n	800bf1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be5e:	e02f      	b.n	800bec0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be60:	4b34      	ldr	r3, [pc, #208]	; (800bf34 <xTaskResumeAll+0x120>)
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	3318      	adds	r3, #24
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fe fd2f 	bl	800a8d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3304      	adds	r3, #4
 800be76:	4618      	mov	r0, r3
 800be78:	f7fe fd2a 	bl	800a8d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be80:	4b2d      	ldr	r3, [pc, #180]	; (800bf38 <xTaskResumeAll+0x124>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	429a      	cmp	r2, r3
 800be86:	d903      	bls.n	800be90 <xTaskResumeAll+0x7c>
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8c:	4a2a      	ldr	r2, [pc, #168]	; (800bf38 <xTaskResumeAll+0x124>)
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4a27      	ldr	r2, [pc, #156]	; (800bf3c <xTaskResumeAll+0x128>)
 800be9e:	441a      	add	r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3304      	adds	r3, #4
 800bea4:	4619      	mov	r1, r3
 800bea6:	4610      	mov	r0, r2
 800bea8:	f7fe fcb5 	bl	800a816 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb0:	4b23      	ldr	r3, [pc, #140]	; (800bf40 <xTaskResumeAll+0x12c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d302      	bcc.n	800bec0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800beba:	4b22      	ldr	r3, [pc, #136]	; (800bf44 <xTaskResumeAll+0x130>)
 800bebc:	2201      	movs	r2, #1
 800bebe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bec0:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <xTaskResumeAll+0x120>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1cb      	bne.n	800be60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d001      	beq.n	800bed2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bece:	f000 fb71 	bl	800c5b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bed2:	4b1d      	ldr	r3, [pc, #116]	; (800bf48 <xTaskResumeAll+0x134>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d010      	beq.n	800bf00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bede:	f000 f859 	bl	800bf94 <xTaskIncrementTick>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d002      	beq.n	800beee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bee8:	4b16      	ldr	r3, [pc, #88]	; (800bf44 <xTaskResumeAll+0x130>)
 800beea:	2201      	movs	r2, #1
 800beec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1f1      	bne.n	800bede <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800befa:	4b13      	ldr	r3, [pc, #76]	; (800bf48 <xTaskResumeAll+0x134>)
 800befc:	2200      	movs	r2, #0
 800befe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf00:	4b10      	ldr	r3, [pc, #64]	; (800bf44 <xTaskResumeAll+0x130>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d009      	beq.n	800bf1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf0c:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <xTaskResumeAll+0x138>)
 800bf0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf1c:	f001 f9f2 	bl	800d304 <vPortExitCritical>

	return xAlreadyYielded;
 800bf20:	68bb      	ldr	r3, [r7, #8]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20001d7c 	.word	0x20001d7c
 800bf30:	20001d54 	.word	0x20001d54
 800bf34:	20001d14 	.word	0x20001d14
 800bf38:	20001d5c 	.word	0x20001d5c
 800bf3c:	20001884 	.word	0x20001884
 800bf40:	20001880 	.word	0x20001880
 800bf44:	20001d68 	.word	0x20001d68
 800bf48:	20001d64 	.word	0x20001d64
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf56:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <xTaskGetTickCount+0x1c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf5c:	687b      	ldr	r3, [r7, #4]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	20001d58 	.word	0x20001d58

0800bf70 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf76:	f001 fa77 	bl	800d468 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bf7e:	4b04      	ldr	r3, [pc, #16]	; (800bf90 <xTaskGetTickCountFromISR+0x20>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf84:	683b      	ldr	r3, [r7, #0]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	20001d58 	.word	0x20001d58

0800bf94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf9e:	4b4f      	ldr	r3, [pc, #316]	; (800c0dc <xTaskIncrementTick+0x148>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f040 808f 	bne.w	800c0c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bfa8:	4b4d      	ldr	r3, [pc, #308]	; (800c0e0 <xTaskIncrementTick+0x14c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3301      	adds	r3, #1
 800bfae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bfb0:	4a4b      	ldr	r2, [pc, #300]	; (800c0e0 <xTaskIncrementTick+0x14c>)
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d120      	bne.n	800bffe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bfbc:	4b49      	ldr	r3, [pc, #292]	; (800c0e4 <xTaskIncrementTick+0x150>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00a      	beq.n	800bfdc <xTaskIncrementTick+0x48>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	603b      	str	r3, [r7, #0]
}
 800bfd8:	bf00      	nop
 800bfda:	e7fe      	b.n	800bfda <xTaskIncrementTick+0x46>
 800bfdc:	4b41      	ldr	r3, [pc, #260]	; (800c0e4 <xTaskIncrementTick+0x150>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	60fb      	str	r3, [r7, #12]
 800bfe2:	4b41      	ldr	r3, [pc, #260]	; (800c0e8 <xTaskIncrementTick+0x154>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a3f      	ldr	r2, [pc, #252]	; (800c0e4 <xTaskIncrementTick+0x150>)
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	4a3f      	ldr	r2, [pc, #252]	; (800c0e8 <xTaskIncrementTick+0x154>)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	4b3e      	ldr	r3, [pc, #248]	; (800c0ec <xTaskIncrementTick+0x158>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3301      	adds	r3, #1
 800bff6:	4a3d      	ldr	r2, [pc, #244]	; (800c0ec <xTaskIncrementTick+0x158>)
 800bff8:	6013      	str	r3, [r2, #0]
 800bffa:	f000 fadb 	bl	800c5b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bffe:	4b3c      	ldr	r3, [pc, #240]	; (800c0f0 <xTaskIncrementTick+0x15c>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	429a      	cmp	r2, r3
 800c006:	d349      	bcc.n	800c09c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c008:	4b36      	ldr	r3, [pc, #216]	; (800c0e4 <xTaskIncrementTick+0x150>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d104      	bne.n	800c01c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c012:	4b37      	ldr	r3, [pc, #220]	; (800c0f0 <xTaskIncrementTick+0x15c>)
 800c014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c018:	601a      	str	r2, [r3, #0]
					break;
 800c01a:	e03f      	b.n	800c09c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01c:	4b31      	ldr	r3, [pc, #196]	; (800c0e4 <xTaskIncrementTick+0x150>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d203      	bcs.n	800c03c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c034:	4a2e      	ldr	r2, [pc, #184]	; (800c0f0 <xTaskIncrementTick+0x15c>)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c03a:	e02f      	b.n	800c09c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	3304      	adds	r3, #4
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fc45 	bl	800a8d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d004      	beq.n	800c058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	3318      	adds	r3, #24
 800c052:	4618      	mov	r0, r3
 800c054:	f7fe fc3c 	bl	800a8d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05c:	4b25      	ldr	r3, [pc, #148]	; (800c0f4 <xTaskIncrementTick+0x160>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	429a      	cmp	r2, r3
 800c062:	d903      	bls.n	800c06c <xTaskIncrementTick+0xd8>
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c068:	4a22      	ldr	r2, [pc, #136]	; (800c0f4 <xTaskIncrementTick+0x160>)
 800c06a:	6013      	str	r3, [r2, #0]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c070:	4613      	mov	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	4413      	add	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4a1f      	ldr	r2, [pc, #124]	; (800c0f8 <xTaskIncrementTick+0x164>)
 800c07a:	441a      	add	r2, r3
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	3304      	adds	r3, #4
 800c080:	4619      	mov	r1, r3
 800c082:	4610      	mov	r0, r2
 800c084:	f7fe fbc7 	bl	800a816 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08c:	4b1b      	ldr	r3, [pc, #108]	; (800c0fc <xTaskIncrementTick+0x168>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c092:	429a      	cmp	r2, r3
 800c094:	d3b8      	bcc.n	800c008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c096:	2301      	movs	r3, #1
 800c098:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c09a:	e7b5      	b.n	800c008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c09c:	4b17      	ldr	r3, [pc, #92]	; (800c0fc <xTaskIncrementTick+0x168>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a2:	4915      	ldr	r1, [pc, #84]	; (800c0f8 <xTaskIncrementTick+0x164>)
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d901      	bls.n	800c0b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c0b8:	4b11      	ldr	r3, [pc, #68]	; (800c100 <xTaskIncrementTick+0x16c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d007      	beq.n	800c0d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	617b      	str	r3, [r7, #20]
 800c0c4:	e004      	b.n	800c0d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c0c6:	4b0f      	ldr	r3, [pc, #60]	; (800c104 <xTaskIncrementTick+0x170>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	4a0d      	ldr	r2, [pc, #52]	; (800c104 <xTaskIncrementTick+0x170>)
 800c0ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c0d0:	697b      	ldr	r3, [r7, #20]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20001d7c 	.word	0x20001d7c
 800c0e0:	20001d58 	.word	0x20001d58
 800c0e4:	20001d0c 	.word	0x20001d0c
 800c0e8:	20001d10 	.word	0x20001d10
 800c0ec:	20001d6c 	.word	0x20001d6c
 800c0f0:	20001d74 	.word	0x20001d74
 800c0f4:	20001d5c 	.word	0x20001d5c
 800c0f8:	20001884 	.word	0x20001884
 800c0fc:	20001880 	.word	0x20001880
 800c100:	20001d68 	.word	0x20001d68
 800c104:	20001d64 	.word	0x20001d64

0800c108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c10e:	4b2a      	ldr	r3, [pc, #168]	; (800c1b8 <vTaskSwitchContext+0xb0>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c116:	4b29      	ldr	r3, [pc, #164]	; (800c1bc <vTaskSwitchContext+0xb4>)
 800c118:	2201      	movs	r2, #1
 800c11a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c11c:	e046      	b.n	800c1ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c11e:	4b27      	ldr	r3, [pc, #156]	; (800c1bc <vTaskSwitchContext+0xb4>)
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c124:	4b26      	ldr	r3, [pc, #152]	; (800c1c0 <vTaskSwitchContext+0xb8>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e010      	b.n	800c14e <vTaskSwitchContext+0x46>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10a      	bne.n	800c148 <vTaskSwitchContext+0x40>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	607b      	str	r3, [r7, #4]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <vTaskSwitchContext+0x3e>
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3b01      	subs	r3, #1
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	491d      	ldr	r1, [pc, #116]	; (800c1c4 <vTaskSwitchContext+0xbc>)
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	4613      	mov	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	440b      	add	r3, r1
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0e4      	beq.n	800c12c <vTaskSwitchContext+0x24>
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	4613      	mov	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4a15      	ldr	r2, [pc, #84]	; (800c1c4 <vTaskSwitchContext+0xbc>)
 800c16e:	4413      	add	r3, r2
 800c170:	60bb      	str	r3, [r7, #8]
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	685a      	ldr	r2, [r3, #4]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	605a      	str	r2, [r3, #4]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	3308      	adds	r3, #8
 800c184:	429a      	cmp	r2, r3
 800c186:	d104      	bne.n	800c192 <vTaskSwitchContext+0x8a>
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	605a      	str	r2, [r3, #4]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	4a0b      	ldr	r2, [pc, #44]	; (800c1c8 <vTaskSwitchContext+0xc0>)
 800c19a:	6013      	str	r3, [r2, #0]
 800c19c:	4a08      	ldr	r2, [pc, #32]	; (800c1c0 <vTaskSwitchContext+0xb8>)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1a2:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <vTaskSwitchContext+0xc0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3354      	adds	r3, #84	; 0x54
 800c1a8:	4a08      	ldr	r2, [pc, #32]	; (800c1cc <vTaskSwitchContext+0xc4>)
 800c1aa:	6013      	str	r3, [r2, #0]
}
 800c1ac:	bf00      	nop
 800c1ae:	3714      	adds	r7, #20
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr
 800c1b8:	20001d7c 	.word	0x20001d7c
 800c1bc:	20001d68 	.word	0x20001d68
 800c1c0:	20001d5c 	.word	0x20001d5c
 800c1c4:	20001884 	.word	0x20001884
 800c1c8:	20001880 	.word	0x20001880
 800c1cc:	20000048 	.word	0x20000048

0800c1d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10a      	bne.n	800c1f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	60fb      	str	r3, [r7, #12]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1f6:	4b07      	ldr	r3, [pc, #28]	; (800c214 <vTaskPlaceOnEventList+0x44>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3318      	adds	r3, #24
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7fe fb2d 	bl	800a85e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c204:	2101      	movs	r1, #1
 800c206:	6838      	ldr	r0, [r7, #0]
 800c208:	f000 fb7e 	bl	800c908 <prvAddCurrentTaskToDelayedList>
}
 800c20c:	bf00      	nop
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	20001880 	.word	0x20001880

0800c218 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10a      	bne.n	800c240 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	617b      	str	r3, [r7, #20]
}
 800c23c:	bf00      	nop
 800c23e:	e7fe      	b.n	800c23e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <vTaskPlaceOnEventListRestricted+0x54>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3318      	adds	r3, #24
 800c246:	4619      	mov	r1, r3
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f7fe fae4 	bl	800a816 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c258:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c25a:	6879      	ldr	r1, [r7, #4]
 800c25c:	68b8      	ldr	r0, [r7, #8]
 800c25e:	f000 fb53 	bl	800c908 <prvAddCurrentTaskToDelayedList>
	}
 800c262:	bf00      	nop
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	20001880 	.word	0x20001880

0800c270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10a      	bne.n	800c29c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	60fb      	str	r3, [r7, #12]
}
 800c298:	bf00      	nop
 800c29a:	e7fe      	b.n	800c29a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	3318      	adds	r3, #24
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fe fb15 	bl	800a8d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2a6:	4b1e      	ldr	r3, [pc, #120]	; (800c320 <xTaskRemoveFromEventList+0xb0>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d11d      	bne.n	800c2ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe fb0c 	bl	800a8d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2bc:	4b19      	ldr	r3, [pc, #100]	; (800c324 <xTaskRemoveFromEventList+0xb4>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d903      	bls.n	800c2cc <xTaskRemoveFromEventList+0x5c>
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	4a16      	ldr	r2, [pc, #88]	; (800c324 <xTaskRemoveFromEventList+0xb4>)
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4a13      	ldr	r2, [pc, #76]	; (800c328 <xTaskRemoveFromEventList+0xb8>)
 800c2da:	441a      	add	r2, r3
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	f7fe fa97 	bl	800a816 <vListInsertEnd>
 800c2e8:	e005      	b.n	800c2f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	3318      	adds	r3, #24
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	480e      	ldr	r0, [pc, #56]	; (800c32c <xTaskRemoveFromEventList+0xbc>)
 800c2f2:	f7fe fa90 	bl	800a816 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	; (800c330 <xTaskRemoveFromEventList+0xc0>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	429a      	cmp	r2, r3
 800c302:	d905      	bls.n	800c310 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c304:	2301      	movs	r3, #1
 800c306:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c308:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <xTaskRemoveFromEventList+0xc4>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	e001      	b.n	800c314 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c310:	2300      	movs	r3, #0
 800c312:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c314:	697b      	ldr	r3, [r7, #20]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3718      	adds	r7, #24
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	20001d7c 	.word	0x20001d7c
 800c324:	20001d5c 	.word	0x20001d5c
 800c328:	20001884 	.word	0x20001884
 800c32c:	20001d14 	.word	0x20001d14
 800c330:	20001880 	.word	0x20001880
 800c334:	20001d68 	.word	0x20001d68

0800c338 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <vTaskInternalSetTimeOutState+0x24>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c348:	4b05      	ldr	r3, [pc, #20]	; (800c360 <vTaskInternalSetTimeOutState+0x28>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	605a      	str	r2, [r3, #4]
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	20001d6c 	.word	0x20001d6c
 800c360:	20001d58 	.word	0x20001d58

0800c364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b088      	sub	sp, #32
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10a      	bne.n	800c38a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	613b      	str	r3, [r7, #16]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10a      	bne.n	800c3a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	60fb      	str	r3, [r7, #12]
}
 800c3a2:	bf00      	nop
 800c3a4:	e7fe      	b.n	800c3a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c3a6:	f000 ff7d 	bl	800d2a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c3aa:	4b1d      	ldr	r3, [pc, #116]	; (800c420 <xTaskCheckForTimeOut+0xbc>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	69ba      	ldr	r2, [r7, #24]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3c2:	d102      	bne.n	800c3ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	61fb      	str	r3, [r7, #28]
 800c3c8:	e023      	b.n	800c412 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	4b15      	ldr	r3, [pc, #84]	; (800c424 <xTaskCheckForTimeOut+0xc0>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d007      	beq.n	800c3e6 <xTaskCheckForTimeOut+0x82>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	69ba      	ldr	r2, [r7, #24]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d302      	bcc.n	800c3e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	61fb      	str	r3, [r7, #28]
 800c3e4:	e015      	b.n	800c412 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d20b      	bcs.n	800c408 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	1ad2      	subs	r2, r2, r3
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff ff9b 	bl	800c338 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c402:	2300      	movs	r3, #0
 800c404:	61fb      	str	r3, [r7, #28]
 800c406:	e004      	b.n	800c412 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2200      	movs	r2, #0
 800c40c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c40e:	2301      	movs	r3, #1
 800c410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c412:	f000 ff77 	bl	800d304 <vPortExitCritical>

	return xReturn;
 800c416:	69fb      	ldr	r3, [r7, #28]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3720      	adds	r7, #32
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20001d58 	.word	0x20001d58
 800c424:	20001d6c 	.word	0x20001d6c

0800c428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c428:	b480      	push	{r7}
 800c42a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c42c:	4b03      	ldr	r3, [pc, #12]	; (800c43c <vTaskMissedYield+0x14>)
 800c42e:	2201      	movs	r2, #1
 800c430:	601a      	str	r2, [r3, #0]
}
 800c432:	bf00      	nop
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	20001d68 	.word	0x20001d68

0800c440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c448:	f000 f852 	bl	800c4f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c44c:	4b06      	ldr	r3, [pc, #24]	; (800c468 <prvIdleTask+0x28>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d9f9      	bls.n	800c448 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c454:	4b05      	ldr	r3, [pc, #20]	; (800c46c <prvIdleTask+0x2c>)
 800c456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c464:	e7f0      	b.n	800c448 <prvIdleTask+0x8>
 800c466:	bf00      	nop
 800c468:	20001884 	.word	0x20001884
 800c46c:	e000ed04 	.word	0xe000ed04

0800c470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c476:	2300      	movs	r3, #0
 800c478:	607b      	str	r3, [r7, #4]
 800c47a:	e00c      	b.n	800c496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	4613      	mov	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4a12      	ldr	r2, [pc, #72]	; (800c4d0 <prvInitialiseTaskLists+0x60>)
 800c488:	4413      	add	r3, r2
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe f996 	bl	800a7bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3301      	adds	r3, #1
 800c494:	607b      	str	r3, [r7, #4]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b37      	cmp	r3, #55	; 0x37
 800c49a:	d9ef      	bls.n	800c47c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c49c:	480d      	ldr	r0, [pc, #52]	; (800c4d4 <prvInitialiseTaskLists+0x64>)
 800c49e:	f7fe f98d 	bl	800a7bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c4a2:	480d      	ldr	r0, [pc, #52]	; (800c4d8 <prvInitialiseTaskLists+0x68>)
 800c4a4:	f7fe f98a 	bl	800a7bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4a8:	480c      	ldr	r0, [pc, #48]	; (800c4dc <prvInitialiseTaskLists+0x6c>)
 800c4aa:	f7fe f987 	bl	800a7bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4ae:	480c      	ldr	r0, [pc, #48]	; (800c4e0 <prvInitialiseTaskLists+0x70>)
 800c4b0:	f7fe f984 	bl	800a7bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c4b4:	480b      	ldr	r0, [pc, #44]	; (800c4e4 <prvInitialiseTaskLists+0x74>)
 800c4b6:	f7fe f981 	bl	800a7bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4ba:	4b0b      	ldr	r3, [pc, #44]	; (800c4e8 <prvInitialiseTaskLists+0x78>)
 800c4bc:	4a05      	ldr	r2, [pc, #20]	; (800c4d4 <prvInitialiseTaskLists+0x64>)
 800c4be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	; (800c4ec <prvInitialiseTaskLists+0x7c>)
 800c4c2:	4a05      	ldr	r2, [pc, #20]	; (800c4d8 <prvInitialiseTaskLists+0x68>)
 800c4c4:	601a      	str	r2, [r3, #0]
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20001884 	.word	0x20001884
 800c4d4:	20001ce4 	.word	0x20001ce4
 800c4d8:	20001cf8 	.word	0x20001cf8
 800c4dc:	20001d14 	.word	0x20001d14
 800c4e0:	20001d28 	.word	0x20001d28
 800c4e4:	20001d40 	.word	0x20001d40
 800c4e8:	20001d0c 	.word	0x20001d0c
 800c4ec:	20001d10 	.word	0x20001d10

0800c4f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4f6:	e019      	b.n	800c52c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c4f8:	f000 fed4 	bl	800d2a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4fc:	4b10      	ldr	r3, [pc, #64]	; (800c540 <prvCheckTasksWaitingTermination+0x50>)
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3304      	adds	r3, #4
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fe f9e1 	bl	800a8d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c50e:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <prvCheckTasksWaitingTermination+0x54>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3b01      	subs	r3, #1
 800c514:	4a0b      	ldr	r2, [pc, #44]	; (800c544 <prvCheckTasksWaitingTermination+0x54>)
 800c516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c518:	4b0b      	ldr	r3, [pc, #44]	; (800c548 <prvCheckTasksWaitingTermination+0x58>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3b01      	subs	r3, #1
 800c51e:	4a0a      	ldr	r2, [pc, #40]	; (800c548 <prvCheckTasksWaitingTermination+0x58>)
 800c520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c522:	f000 feef 	bl	800d304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f810 	bl	800c54c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c52c:	4b06      	ldr	r3, [pc, #24]	; (800c548 <prvCheckTasksWaitingTermination+0x58>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1e1      	bne.n	800c4f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c534:	bf00      	nop
 800c536:	bf00      	nop
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	20001d28 	.word	0x20001d28
 800c544:	20001d54 	.word	0x20001d54
 800c548:	20001d3c 	.word	0x20001d3c

0800c54c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3354      	adds	r3, #84	; 0x54
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 fbdf 	bl	800dd1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c564:	2b00      	cmp	r3, #0
 800c566:	d108      	bne.n	800c57a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56c:	4618      	mov	r0, r3
 800c56e:	f001 f887 	bl	800d680 <vPortFree>
				vPortFree( pxTCB );
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f001 f884 	bl	800d680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c578:	e018      	b.n	800c5ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c580:	2b01      	cmp	r3, #1
 800c582:	d103      	bne.n	800c58c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 f87b 	bl	800d680 <vPortFree>
	}
 800c58a:	e00f      	b.n	800c5ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c592:	2b02      	cmp	r3, #2
 800c594:	d00a      	beq.n	800c5ac <prvDeleteTCB+0x60>
	__asm volatile
 800c596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	60fb      	str	r3, [r7, #12]
}
 800c5a8:	bf00      	nop
 800c5aa:	e7fe      	b.n	800c5aa <prvDeleteTCB+0x5e>
	}
 800c5ac:	bf00      	nop
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5ba:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <prvResetNextTaskUnblockTime+0x38>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5c4:	4b0a      	ldr	r3, [pc, #40]	; (800c5f0 <prvResetNextTaskUnblockTime+0x3c>)
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c5cc:	e008      	b.n	800c5e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5ce:	4b07      	ldr	r3, [pc, #28]	; (800c5ec <prvResetNextTaskUnblockTime+0x38>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	4a04      	ldr	r2, [pc, #16]	; (800c5f0 <prvResetNextTaskUnblockTime+0x3c>)
 800c5de:	6013      	str	r3, [r2, #0]
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	20001d0c 	.word	0x20001d0c
 800c5f0:	20001d74 	.word	0x20001d74

0800c5f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c5fa:	4b0b      	ldr	r3, [pc, #44]	; (800c628 <xTaskGetSchedulerState+0x34>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d102      	bne.n	800c608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c602:	2301      	movs	r3, #1
 800c604:	607b      	str	r3, [r7, #4]
 800c606:	e008      	b.n	800c61a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c608:	4b08      	ldr	r3, [pc, #32]	; (800c62c <xTaskGetSchedulerState+0x38>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d102      	bne.n	800c616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c610:	2302      	movs	r3, #2
 800c612:	607b      	str	r3, [r7, #4]
 800c614:	e001      	b.n	800c61a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c616:	2300      	movs	r3, #0
 800c618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c61a:	687b      	ldr	r3, [r7, #4]
	}
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr
 800c628:	20001d60 	.word	0x20001d60
 800c62c:	20001d7c 	.word	0x20001d7c

0800c630 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c63c:	2300      	movs	r3, #0
 800c63e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d051      	beq.n	800c6ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64a:	4b2a      	ldr	r3, [pc, #168]	; (800c6f4 <xTaskPriorityInherit+0xc4>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c650:	429a      	cmp	r2, r3
 800c652:	d241      	bcs.n	800c6d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	699b      	ldr	r3, [r3, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	db06      	blt.n	800c66a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c65c:	4b25      	ldr	r3, [pc, #148]	; (800c6f4 <xTaskPriorityInherit+0xc4>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c662:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	6959      	ldr	r1, [r3, #20]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c672:	4613      	mov	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4413      	add	r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4a1f      	ldr	r2, [pc, #124]	; (800c6f8 <xTaskPriorityInherit+0xc8>)
 800c67c:	4413      	add	r3, r2
 800c67e:	4299      	cmp	r1, r3
 800c680:	d122      	bne.n	800c6c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	3304      	adds	r3, #4
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe f922 	bl	800a8d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c68c:	4b19      	ldr	r3, [pc, #100]	; (800c6f4 <xTaskPriorityInherit+0xc4>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c69a:	4b18      	ldr	r3, [pc, #96]	; (800c6fc <xTaskPriorityInherit+0xcc>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d903      	bls.n	800c6aa <xTaskPriorityInherit+0x7a>
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a6:	4a15      	ldr	r2, [pc, #84]	; (800c6fc <xTaskPriorityInherit+0xcc>)
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4413      	add	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4a10      	ldr	r2, [pc, #64]	; (800c6f8 <xTaskPriorityInherit+0xc8>)
 800c6b8:	441a      	add	r2, r3
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	f7fe f8a8 	bl	800a816 <vListInsertEnd>
 800c6c6:	e004      	b.n	800c6d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c6c8:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <xTaskPriorityInherit+0xc4>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	e008      	b.n	800c6ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6dc:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <xTaskPriorityInherit+0xc4>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d201      	bcs.n	800c6ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
	}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	20001880 	.word	0x20001880
 800c6f8:	20001884 	.word	0x20001884
 800c6fc:	20001d5c 	.word	0x20001d5c

0800c700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c70c:	2300      	movs	r3, #0
 800c70e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d056      	beq.n	800c7c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c716:	4b2e      	ldr	r3, [pc, #184]	; (800c7d0 <xTaskPriorityDisinherit+0xd0>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d00a      	beq.n	800c736 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	60fb      	str	r3, [r7, #12]
}
 800c732:	bf00      	nop
 800c734:	e7fe      	b.n	800c734 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10a      	bne.n	800c754 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	60bb      	str	r3, [r7, #8]
}
 800c750:	bf00      	nop
 800c752:	e7fe      	b.n	800c752 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c758:	1e5a      	subs	r2, r3, #1
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c766:	429a      	cmp	r2, r3
 800c768:	d02c      	beq.n	800c7c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d128      	bne.n	800c7c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	3304      	adds	r3, #4
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe f8aa 	bl	800a8d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c788:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c794:	4b0f      	ldr	r3, [pc, #60]	; (800c7d4 <xTaskPriorityDisinherit+0xd4>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d903      	bls.n	800c7a4 <xTaskPriorityDisinherit+0xa4>
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a0:	4a0c      	ldr	r2, [pc, #48]	; (800c7d4 <xTaskPriorityDisinherit+0xd4>)
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4a09      	ldr	r2, [pc, #36]	; (800c7d8 <xTaskPriorityDisinherit+0xd8>)
 800c7b2:	441a      	add	r2, r3
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	f7fe f82b 	bl	800a816 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7c4:	697b      	ldr	r3, [r7, #20]
	}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3718      	adds	r7, #24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20001880 	.word	0x20001880
 800c7d4:	20001d5c 	.word	0x20001d5c
 800c7d8:	20001884 	.word	0x20001884

0800c7dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b088      	sub	sp, #32
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d06a      	beq.n	800c8ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10a      	bne.n	800c812 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	60fb      	str	r3, [r7, #12]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d902      	bls.n	800c822 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	61fb      	str	r3, [r7, #28]
 800c820:	e002      	b.n	800c828 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c826:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	69fa      	ldr	r2, [r7, #28]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d04b      	beq.n	800c8ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d146      	bne.n	800c8ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c83c:	4b25      	ldr	r3, [pc, #148]	; (800c8d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	69ba      	ldr	r2, [r7, #24]
 800c842:	429a      	cmp	r2, r3
 800c844:	d10a      	bne.n	800c85c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	60bb      	str	r3, [r7, #8]
}
 800c858:	bf00      	nop
 800c85a:	e7fe      	b.n	800c85a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	69fa      	ldr	r2, [r7, #28]
 800c866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	db04      	blt.n	800c87a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c87a:	69bb      	ldr	r3, [r7, #24]
 800c87c:	6959      	ldr	r1, [r3, #20]
 800c87e:	693a      	ldr	r2, [r7, #16]
 800c880:	4613      	mov	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4413      	add	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4a13      	ldr	r2, [pc, #76]	; (800c8d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c88a:	4413      	add	r3, r2
 800c88c:	4299      	cmp	r1, r3
 800c88e:	d11c      	bne.n	800c8ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	3304      	adds	r3, #4
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe f81b 	bl	800a8d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89e:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d903      	bls.n	800c8ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8aa:	4a0c      	ldr	r2, [pc, #48]	; (800c8dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c8ac:	6013      	str	r3, [r2, #0]
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4413      	add	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4a07      	ldr	r2, [pc, #28]	; (800c8d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c8bc:	441a      	add	r2, r3
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	f7fd ffa6 	bl	800a816 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8ca:	bf00      	nop
 800c8cc:	3720      	adds	r7, #32
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	20001880 	.word	0x20001880
 800c8d8:	20001884 	.word	0x20001884
 800c8dc:	20001d5c 	.word	0x20001d5c

0800c8e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c8e0:	b480      	push	{r7}
 800c8e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c8e4:	4b07      	ldr	r3, [pc, #28]	; (800c904 <pvTaskIncrementMutexHeldCount+0x24>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <pvTaskIncrementMutexHeldCount+0x24>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8f2:	3201      	adds	r2, #1
 800c8f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c8f6:	4b03      	ldr	r3, [pc, #12]	; (800c904 <pvTaskIncrementMutexHeldCount+0x24>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
	}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr
 800c904:	20001880 	.word	0x20001880

0800c908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c912:	4b21      	ldr	r3, [pc, #132]	; (800c998 <prvAddCurrentTaskToDelayedList+0x90>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c918:	4b20      	ldr	r3, [pc, #128]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	3304      	adds	r3, #4
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fd ffd6 	bl	800a8d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c92a:	d10a      	bne.n	800c942 <prvAddCurrentTaskToDelayedList+0x3a>
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d007      	beq.n	800c942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c932:	4b1a      	ldr	r3, [pc, #104]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3304      	adds	r3, #4
 800c938:	4619      	mov	r1, r3
 800c93a:	4819      	ldr	r0, [pc, #100]	; (800c9a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c93c:	f7fd ff6b 	bl	800a816 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c940:	e026      	b.n	800c990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4413      	add	r3, r2
 800c948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c94a:	4b14      	ldr	r3, [pc, #80]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	429a      	cmp	r2, r3
 800c958:	d209      	bcs.n	800c96e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c95a:	4b12      	ldr	r3, [pc, #72]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	4b0f      	ldr	r3, [pc, #60]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3304      	adds	r3, #4
 800c964:	4619      	mov	r1, r3
 800c966:	4610      	mov	r0, r2
 800c968:	f7fd ff79 	bl	800a85e <vListInsert>
}
 800c96c:	e010      	b.n	800c990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c96e:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <prvAddCurrentTaskToDelayedList+0x94>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3304      	adds	r3, #4
 800c978:	4619      	mov	r1, r3
 800c97a:	4610      	mov	r0, r2
 800c97c:	f7fd ff6f 	bl	800a85e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c980:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	429a      	cmp	r2, r3
 800c988:	d202      	bcs.n	800c990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c98a:	4a08      	ldr	r2, [pc, #32]	; (800c9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	6013      	str	r3, [r2, #0]
}
 800c990:	bf00      	nop
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20001d58 	.word	0x20001d58
 800c99c:	20001880 	.word	0x20001880
 800c9a0:	20001d40 	.word	0x20001d40
 800c9a4:	20001d10 	.word	0x20001d10
 800c9a8:	20001d0c 	.word	0x20001d0c
 800c9ac:	20001d74 	.word	0x20001d74

0800c9b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08a      	sub	sp, #40	; 0x28
 800c9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9ba:	f000 fb07 	bl	800cfcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9be:	4b1c      	ldr	r3, [pc, #112]	; (800ca30 <xTimerCreateTimerTask+0x80>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d021      	beq.n	800ca0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9ce:	1d3a      	adds	r2, r7, #4
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	f107 030c 	add.w	r3, r7, #12
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fd fed5 	bl	800a788 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	9202      	str	r2, [sp, #8]
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	2302      	movs	r3, #2
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	460a      	mov	r2, r1
 800c9f0:	4910      	ldr	r1, [pc, #64]	; (800ca34 <xTimerCreateTimerTask+0x84>)
 800c9f2:	4811      	ldr	r0, [pc, #68]	; (800ca38 <xTimerCreateTimerTask+0x88>)
 800c9f4:	f7fe ffa4 	bl	800b940 <xTaskCreateStatic>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	4a10      	ldr	r2, [pc, #64]	; (800ca3c <xTimerCreateTimerTask+0x8c>)
 800c9fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ca3c <xTimerCreateTimerTask+0x8c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca06:	2301      	movs	r3, #1
 800ca08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10a      	bne.n	800ca26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	613b      	str	r3, [r7, #16]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca26:	697b      	ldr	r3, [r7, #20]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	20001db0 	.word	0x20001db0
 800ca34:	0800ee14 	.word	0x0800ee14
 800ca38:	0800cb75 	.word	0x0800cb75
 800ca3c:	20001db4 	.word	0x20001db4

0800ca40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08a      	sub	sp, #40	; 0x28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10a      	bne.n	800ca6e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ca58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5c:	f383 8811 	msr	BASEPRI, r3
 800ca60:	f3bf 8f6f 	isb	sy
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	623b      	str	r3, [r7, #32]
}
 800ca6a:	bf00      	nop
 800ca6c:	e7fe      	b.n	800ca6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca6e:	4b1a      	ldr	r3, [pc, #104]	; (800cad8 <xTimerGenericCommand+0x98>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d02a      	beq.n	800cacc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b05      	cmp	r3, #5
 800ca86:	dc18      	bgt.n	800caba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca88:	f7ff fdb4 	bl	800c5f4 <xTaskGetSchedulerState>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d109      	bne.n	800caa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca92:	4b11      	ldr	r3, [pc, #68]	; (800cad8 <xTimerGenericCommand+0x98>)
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	f107 0110 	add.w	r1, r7, #16
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca9e:	f7fe f8e9 	bl	800ac74 <xQueueGenericSend>
 800caa2:	6278      	str	r0, [r7, #36]	; 0x24
 800caa4:	e012      	b.n	800cacc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800caa6:	4b0c      	ldr	r3, [pc, #48]	; (800cad8 <xTimerGenericCommand+0x98>)
 800caa8:	6818      	ldr	r0, [r3, #0]
 800caaa:	f107 0110 	add.w	r1, r7, #16
 800caae:	2300      	movs	r3, #0
 800cab0:	2200      	movs	r2, #0
 800cab2:	f7fe f8df 	bl	800ac74 <xQueueGenericSend>
 800cab6:	6278      	str	r0, [r7, #36]	; 0x24
 800cab8:	e008      	b.n	800cacc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800caba:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <xTimerGenericCommand+0x98>)
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	f107 0110 	add.w	r1, r7, #16
 800cac2:	2300      	movs	r3, #0
 800cac4:	683a      	ldr	r2, [r7, #0]
 800cac6:	f7fe f9d3 	bl	800ae70 <xQueueGenericSendFromISR>
 800caca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3728      	adds	r7, #40	; 0x28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20001db0 	.word	0x20001db0

0800cadc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af02      	add	r7, sp, #8
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cae6:	4b22      	ldr	r3, [pc, #136]	; (800cb70 <prvProcessExpiredTimer+0x94>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	3304      	adds	r3, #4
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fd feeb 	bl	800a8d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb00:	f003 0304 	and.w	r3, r3, #4
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d022      	beq.n	800cb4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	699a      	ldr	r2, [r3, #24]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	18d1      	adds	r1, r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	6978      	ldr	r0, [r7, #20]
 800cb16:	f000 f8d1 	bl	800ccbc <prvInsertTimerInActiveList>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d01f      	beq.n	800cb60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb20:	2300      	movs	r3, #0
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	2300      	movs	r3, #0
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	2100      	movs	r1, #0
 800cb2a:	6978      	ldr	r0, [r7, #20]
 800cb2c:	f7ff ff88 	bl	800ca40 <xTimerGenericCommand>
 800cb30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d113      	bne.n	800cb60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	60fb      	str	r3, [r7, #12]
}
 800cb4a:	bf00      	nop
 800cb4c:	e7fe      	b.n	800cb4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb54:	f023 0301 	bic.w	r3, r3, #1
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	6978      	ldr	r0, [r7, #20]
 800cb66:	4798      	blx	r3
}
 800cb68:	bf00      	nop
 800cb6a:	3718      	adds	r7, #24
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	20001da8 	.word	0x20001da8

0800cb74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb7c:	f107 0308 	add.w	r3, r7, #8
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 f857 	bl	800cc34 <prvGetNextExpireTime>
 800cb86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 f803 	bl	800cb98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb92:	f000 f8d5 	bl	800cd40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb96:	e7f1      	b.n	800cb7c <prvTimerTask+0x8>

0800cb98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cba2:	f7ff f929 	bl	800bdf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cba6:	f107 0308 	add.w	r3, r7, #8
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 f866 	bl	800cc7c <prvSampleTimeNow>
 800cbb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d130      	bne.n	800cc1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10a      	bne.n	800cbd4 <prvProcessTimerOrBlockTask+0x3c>
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d806      	bhi.n	800cbd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbc6:	f7ff f925 	bl	800be14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbca:	68f9      	ldr	r1, [r7, #12]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff ff85 	bl	800cadc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbd2:	e024      	b.n	800cc1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d008      	beq.n	800cbec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbda:	4b13      	ldr	r3, [pc, #76]	; (800cc28 <prvProcessTimerOrBlockTask+0x90>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <prvProcessTimerOrBlockTask+0x50>
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e000      	b.n	800cbea <prvProcessTimerOrBlockTask+0x52>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbec:	4b0f      	ldr	r3, [pc, #60]	; (800cc2c <prvProcessTimerOrBlockTask+0x94>)
 800cbee:	6818      	ldr	r0, [r3, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	f7fe fe6d 	bl	800b8d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbfe:	f7ff f909 	bl	800be14 <xTaskResumeAll>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10a      	bne.n	800cc1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc08:	4b09      	ldr	r3, [pc, #36]	; (800cc30 <prvProcessTimerOrBlockTask+0x98>)
 800cc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	f3bf 8f6f 	isb	sy
}
 800cc18:	e001      	b.n	800cc1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc1a:	f7ff f8fb 	bl	800be14 <xTaskResumeAll>
}
 800cc1e:	bf00      	nop
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20001dac 	.word	0x20001dac
 800cc2c:	20001db0 	.word	0x20001db0
 800cc30:	e000ed04 	.word	0xe000ed04

0800cc34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc3c:	4b0e      	ldr	r3, [pc, #56]	; (800cc78 <prvGetNextExpireTime+0x44>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <prvGetNextExpireTime+0x16>
 800cc46:	2201      	movs	r2, #1
 800cc48:	e000      	b.n	800cc4c <prvGetNextExpireTime+0x18>
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d105      	bne.n	800cc64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc58:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <prvGetNextExpireTime+0x44>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	60fb      	str	r3, [r7, #12]
 800cc62:	e001      	b.n	800cc68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc64:	2300      	movs	r3, #0
 800cc66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc68:	68fb      	ldr	r3, [r7, #12]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	20001da8 	.word	0x20001da8

0800cc7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc84:	f7ff f964 	bl	800bf50 <xTaskGetTickCount>
 800cc88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc8a:	4b0b      	ldr	r3, [pc, #44]	; (800ccb8 <prvSampleTimeNow+0x3c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d205      	bcs.n	800cca0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc94:	f000 f936 	bl	800cf04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	e002      	b.n	800cca6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cca6:	4a04      	ldr	r2, [pc, #16]	; (800ccb8 <prvSampleTimeNow+0x3c>)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ccac:	68fb      	ldr	r3, [r7, #12]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20001db8 	.word	0x20001db8

0800ccbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b086      	sub	sp, #24
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d812      	bhi.n	800cd08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	1ad2      	subs	r2, r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d302      	bcc.n	800ccf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	e01b      	b.n	800cd2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ccf6:	4b10      	ldr	r3, [pc, #64]	; (800cd38 <prvInsertTimerInActiveList+0x7c>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	4619      	mov	r1, r3
 800cd00:	4610      	mov	r0, r2
 800cd02:	f7fd fdac 	bl	800a85e <vListInsert>
 800cd06:	e012      	b.n	800cd2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d206      	bcs.n	800cd1e <prvInsertTimerInActiveList+0x62>
 800cd10:	68ba      	ldr	r2, [r7, #8]
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d302      	bcc.n	800cd1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	617b      	str	r3, [r7, #20]
 800cd1c:	e007      	b.n	800cd2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd1e:	4b07      	ldr	r3, [pc, #28]	; (800cd3c <prvInsertTimerInActiveList+0x80>)
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	3304      	adds	r3, #4
 800cd26:	4619      	mov	r1, r3
 800cd28:	4610      	mov	r0, r2
 800cd2a:	f7fd fd98 	bl	800a85e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd2e:	697b      	ldr	r3, [r7, #20]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20001dac 	.word	0x20001dac
 800cd3c:	20001da8 	.word	0x20001da8

0800cd40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08e      	sub	sp, #56	; 0x38
 800cd44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd46:	e0ca      	b.n	800cede <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	da18      	bge.n	800cd80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd4e:	1d3b      	adds	r3, r7, #4
 800cd50:	3304      	adds	r3, #4
 800cd52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10a      	bne.n	800cd70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	61fb      	str	r3, [r7, #28]
}
 800cd6c:	bf00      	nop
 800cd6e:	e7fe      	b.n	800cd6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd76:	6850      	ldr	r0, [r2, #4]
 800cd78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd7a:	6892      	ldr	r2, [r2, #8]
 800cd7c:	4611      	mov	r1, r2
 800cd7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f2c0 80aa 	blt.w	800cedc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	695b      	ldr	r3, [r3, #20]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d004      	beq.n	800cd9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	3304      	adds	r3, #4
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fd fd99 	bl	800a8d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd9e:	463b      	mov	r3, r7
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff ff6b 	bl	800cc7c <prvSampleTimeNow>
 800cda6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b09      	cmp	r3, #9
 800cdac:	f200 8097 	bhi.w	800cede <prvProcessReceivedCommands+0x19e>
 800cdb0:	a201      	add	r2, pc, #4	; (adr r2, 800cdb8 <prvProcessReceivedCommands+0x78>)
 800cdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb6:	bf00      	nop
 800cdb8:	0800cde1 	.word	0x0800cde1
 800cdbc:	0800cde1 	.word	0x0800cde1
 800cdc0:	0800cde1 	.word	0x0800cde1
 800cdc4:	0800ce55 	.word	0x0800ce55
 800cdc8:	0800ce69 	.word	0x0800ce69
 800cdcc:	0800ceb3 	.word	0x0800ceb3
 800cdd0:	0800cde1 	.word	0x0800cde1
 800cdd4:	0800cde1 	.word	0x0800cde1
 800cdd8:	0800ce55 	.word	0x0800ce55
 800cddc:	0800ce69 	.word	0x0800ce69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cde6:	f043 0301 	orr.w	r3, r3, #1
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	699b      	ldr	r3, [r3, #24]
 800cdf8:	18d1      	adds	r1, r2, r3
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce00:	f7ff ff5c 	bl	800ccbc <prvInsertTimerInActiveList>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d069      	beq.n	800cede <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce18:	f003 0304 	and.w	r3, r3, #4
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d05e      	beq.n	800cede <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	441a      	add	r2, r3
 800ce28:	2300      	movs	r3, #0
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	2100      	movs	r1, #0
 800ce30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce32:	f7ff fe05 	bl	800ca40 <xTimerGenericCommand>
 800ce36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d14f      	bne.n	800cede <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	61bb      	str	r3, [r7, #24]
}
 800ce50:	bf00      	nop
 800ce52:	e7fe      	b.n	800ce52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce5a:	f023 0301 	bic.w	r3, r3, #1
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce66:	e03a      	b.n	800cede <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce6e:	f043 0301 	orr.w	r3, r3, #1
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10a      	bne.n	800ce9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	617b      	str	r3, [r7, #20]
}
 800ce9a:	bf00      	nop
 800ce9c:	e7fe      	b.n	800ce9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	699a      	ldr	r2, [r3, #24]
 800cea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea4:	18d1      	adds	r1, r2, r3
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceac:	f7ff ff06 	bl	800ccbc <prvInsertTimerInActiveList>
					break;
 800ceb0:	e015      	b.n	800cede <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ceb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceb8:	f003 0302 	and.w	r3, r3, #2
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d103      	bne.n	800cec8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cec2:	f000 fbdd 	bl	800d680 <vPortFree>
 800cec6:	e00a      	b.n	800cede <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cece:	f023 0301 	bic.w	r3, r3, #1
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ceda:	e000      	b.n	800cede <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cedc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cede:	4b08      	ldr	r3, [pc, #32]	; (800cf00 <prvProcessReceivedCommands+0x1c0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	1d39      	adds	r1, r7, #4
 800cee4:	2200      	movs	r2, #0
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fe f8ea 	bl	800b0c0 <xQueueReceive>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f47f af2a 	bne.w	800cd48 <prvProcessReceivedCommands+0x8>
	}
}
 800cef4:	bf00      	nop
 800cef6:	bf00      	nop
 800cef8:	3730      	adds	r7, #48	; 0x30
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	20001db0 	.word	0x20001db0

0800cf04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf0a:	e048      	b.n	800cf9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf0c:	4b2d      	ldr	r3, [pc, #180]	; (800cfc4 <prvSwitchTimerLists+0xc0>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf16:	4b2b      	ldr	r3, [pc, #172]	; (800cfc4 <prvSwitchTimerLists+0xc0>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3304      	adds	r3, #4
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fd fcd3 	bl	800a8d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6a1b      	ldr	r3, [r3, #32]
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf38:	f003 0304 	and.w	r3, r3, #4
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d02e      	beq.n	800cf9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	693a      	ldr	r2, [r7, #16]
 800cf46:	4413      	add	r3, r2
 800cf48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d90e      	bls.n	800cf70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf5e:	4b19      	ldr	r3, [pc, #100]	; (800cfc4 <prvSwitchTimerLists+0xc0>)
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	3304      	adds	r3, #4
 800cf66:	4619      	mov	r1, r3
 800cf68:	4610      	mov	r0, r2
 800cf6a:	f7fd fc78 	bl	800a85e <vListInsert>
 800cf6e:	e016      	b.n	800cf9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf70:	2300      	movs	r3, #0
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	2300      	movs	r3, #0
 800cf76:	693a      	ldr	r2, [r7, #16]
 800cf78:	2100      	movs	r1, #0
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f7ff fd60 	bl	800ca40 <xTimerGenericCommand>
 800cf80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10a      	bne.n	800cf9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	603b      	str	r3, [r7, #0]
}
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf9e:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <prvSwitchTimerLists+0xc0>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1b1      	bne.n	800cf0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cfa8:	4b06      	ldr	r3, [pc, #24]	; (800cfc4 <prvSwitchTimerLists+0xc0>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfae:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <prvSwitchTimerLists+0xc4>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a04      	ldr	r2, [pc, #16]	; (800cfc4 <prvSwitchTimerLists+0xc0>)
 800cfb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfb6:	4a04      	ldr	r2, [pc, #16]	; (800cfc8 <prvSwitchTimerLists+0xc4>)
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	6013      	str	r3, [r2, #0]
}
 800cfbc:	bf00      	nop
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	20001da8 	.word	0x20001da8
 800cfc8:	20001dac 	.word	0x20001dac

0800cfcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfd2:	f000 f967 	bl	800d2a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfd6:	4b15      	ldr	r3, [pc, #84]	; (800d02c <prvCheckForValidListAndQueue+0x60>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d120      	bne.n	800d020 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfde:	4814      	ldr	r0, [pc, #80]	; (800d030 <prvCheckForValidListAndQueue+0x64>)
 800cfe0:	f7fd fbec 	bl	800a7bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cfe4:	4813      	ldr	r0, [pc, #76]	; (800d034 <prvCheckForValidListAndQueue+0x68>)
 800cfe6:	f7fd fbe9 	bl	800a7bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfea:	4b13      	ldr	r3, [pc, #76]	; (800d038 <prvCheckForValidListAndQueue+0x6c>)
 800cfec:	4a10      	ldr	r2, [pc, #64]	; (800d030 <prvCheckForValidListAndQueue+0x64>)
 800cfee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cff0:	4b12      	ldr	r3, [pc, #72]	; (800d03c <prvCheckForValidListAndQueue+0x70>)
 800cff2:	4a10      	ldr	r2, [pc, #64]	; (800d034 <prvCheckForValidListAndQueue+0x68>)
 800cff4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cff6:	2300      	movs	r3, #0
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	4b11      	ldr	r3, [pc, #68]	; (800d040 <prvCheckForValidListAndQueue+0x74>)
 800cffc:	4a11      	ldr	r2, [pc, #68]	; (800d044 <prvCheckForValidListAndQueue+0x78>)
 800cffe:	2110      	movs	r1, #16
 800d000:	200a      	movs	r0, #10
 800d002:	f7fd fcf7 	bl	800a9f4 <xQueueGenericCreateStatic>
 800d006:	4603      	mov	r3, r0
 800d008:	4a08      	ldr	r2, [pc, #32]	; (800d02c <prvCheckForValidListAndQueue+0x60>)
 800d00a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d00c:	4b07      	ldr	r3, [pc, #28]	; (800d02c <prvCheckForValidListAndQueue+0x60>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d005      	beq.n	800d020 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d014:	4b05      	ldr	r3, [pc, #20]	; (800d02c <prvCheckForValidListAndQueue+0x60>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	490b      	ldr	r1, [pc, #44]	; (800d048 <prvCheckForValidListAndQueue+0x7c>)
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe fc08 	bl	800b830 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d020:	f000 f970 	bl	800d304 <vPortExitCritical>
}
 800d024:	bf00      	nop
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20001db0 	.word	0x20001db0
 800d030:	20001d80 	.word	0x20001d80
 800d034:	20001d94 	.word	0x20001d94
 800d038:	20001da8 	.word	0x20001da8
 800d03c:	20001dac 	.word	0x20001dac
 800d040:	20001e5c 	.word	0x20001e5c
 800d044:	20001dbc 	.word	0x20001dbc
 800d048:	0800ee1c 	.word	0x0800ee1c

0800d04c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3b04      	subs	r3, #4
 800d05c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3b04      	subs	r3, #4
 800d06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	f023 0201 	bic.w	r2, r3, #1
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3b04      	subs	r3, #4
 800d07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d07c:	4a0c      	ldr	r2, [pc, #48]	; (800d0b0 <pxPortInitialiseStack+0x64>)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3b14      	subs	r3, #20
 800d086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3b04      	subs	r3, #4
 800d092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f06f 0202 	mvn.w	r2, #2
 800d09a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	3b20      	subs	r3, #32
 800d0a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	0800d0b5 	.word	0x0800d0b5

0800d0b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0be:	4b12      	ldr	r3, [pc, #72]	; (800d108 <prvTaskExitError+0x54>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0c6:	d00a      	beq.n	800d0de <prvTaskExitError+0x2a>
	__asm volatile
 800d0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0cc:	f383 8811 	msr	BASEPRI, r3
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	60fb      	str	r3, [r7, #12]
}
 800d0da:	bf00      	nop
 800d0dc:	e7fe      	b.n	800d0dc <prvTaskExitError+0x28>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	60bb      	str	r3, [r7, #8]
}
 800d0f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0f2:	bf00      	nop
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0fc      	beq.n	800d0f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0fa:	bf00      	nop
 800d0fc:	bf00      	nop
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	20000044 	.word	0x20000044
 800d10c:	00000000 	.word	0x00000000

0800d110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d110:	4b07      	ldr	r3, [pc, #28]	; (800d130 <pxCurrentTCBConst2>)
 800d112:	6819      	ldr	r1, [r3, #0]
 800d114:	6808      	ldr	r0, [r1, #0]
 800d116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11a:	f380 8809 	msr	PSP, r0
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f04f 0000 	mov.w	r0, #0
 800d126:	f380 8811 	msr	BASEPRI, r0
 800d12a:	4770      	bx	lr
 800d12c:	f3af 8000 	nop.w

0800d130 <pxCurrentTCBConst2>:
 800d130:	20001880 	.word	0x20001880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop

0800d138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d138:	4808      	ldr	r0, [pc, #32]	; (800d15c <prvPortStartFirstTask+0x24>)
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	6800      	ldr	r0, [r0, #0]
 800d13e:	f380 8808 	msr	MSP, r0
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8814 	msr	CONTROL, r0
 800d14a:	b662      	cpsie	i
 800d14c:	b661      	cpsie	f
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	df00      	svc	0
 800d158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d15a:	bf00      	nop
 800d15c:	e000ed08 	.word	0xe000ed08

0800d160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d166:	4b46      	ldr	r3, [pc, #280]	; (800d280 <xPortStartScheduler+0x120>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a46      	ldr	r2, [pc, #280]	; (800d284 <xPortStartScheduler+0x124>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d10a      	bne.n	800d186 <xPortStartScheduler+0x26>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	613b      	str	r3, [r7, #16]
}
 800d182:	bf00      	nop
 800d184:	e7fe      	b.n	800d184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d186:	4b3e      	ldr	r3, [pc, #248]	; (800d280 <xPortStartScheduler+0x120>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a3f      	ldr	r2, [pc, #252]	; (800d288 <xPortStartScheduler+0x128>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d10a      	bne.n	800d1a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	60fb      	str	r3, [r7, #12]
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d1a6:	4b39      	ldr	r3, [pc, #228]	; (800d28c <xPortStartScheduler+0x12c>)
 800d1a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	22ff      	movs	r2, #255	; 0xff
 800d1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	4b31      	ldr	r3, [pc, #196]	; (800d290 <xPortStartScheduler+0x130>)
 800d1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1ce:	4b31      	ldr	r3, [pc, #196]	; (800d294 <xPortStartScheduler+0x134>)
 800d1d0:	2207      	movs	r2, #7
 800d1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1d4:	e009      	b.n	800d1ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d1d6:	4b2f      	ldr	r3, [pc, #188]	; (800d294 <xPortStartScheduler+0x134>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	4a2d      	ldr	r2, [pc, #180]	; (800d294 <xPortStartScheduler+0x134>)
 800d1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1e0:	78fb      	ldrb	r3, [r7, #3]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ea:	78fb      	ldrb	r3, [r7, #3]
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1f2:	2b80      	cmp	r3, #128	; 0x80
 800d1f4:	d0ef      	beq.n	800d1d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1f6:	4b27      	ldr	r3, [pc, #156]	; (800d294 <xPortStartScheduler+0x134>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f1c3 0307 	rsb	r3, r3, #7
 800d1fe:	2b04      	cmp	r3, #4
 800d200:	d00a      	beq.n	800d218 <xPortStartScheduler+0xb8>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	60bb      	str	r3, [r7, #8]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d218:	4b1e      	ldr	r3, [pc, #120]	; (800d294 <xPortStartScheduler+0x134>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	021b      	lsls	r3, r3, #8
 800d21e:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <xPortStartScheduler+0x134>)
 800d220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <xPortStartScheduler+0x134>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d22a:	4a1a      	ldr	r2, [pc, #104]	; (800d294 <xPortStartScheduler+0x134>)
 800d22c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	b2da      	uxtb	r2, r3
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d236:	4b18      	ldr	r3, [pc, #96]	; (800d298 <xPortStartScheduler+0x138>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a17      	ldr	r2, [pc, #92]	; (800d298 <xPortStartScheduler+0x138>)
 800d23c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d242:	4b15      	ldr	r3, [pc, #84]	; (800d298 <xPortStartScheduler+0x138>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a14      	ldr	r2, [pc, #80]	; (800d298 <xPortStartScheduler+0x138>)
 800d248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d24c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d24e:	f000 f8dd 	bl	800d40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d252:	4b12      	ldr	r3, [pc, #72]	; (800d29c <xPortStartScheduler+0x13c>)
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d258:	f000 f8fc 	bl	800d454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d25c:	4b10      	ldr	r3, [pc, #64]	; (800d2a0 <xPortStartScheduler+0x140>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a0f      	ldr	r2, [pc, #60]	; (800d2a0 <xPortStartScheduler+0x140>)
 800d262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d268:	f7ff ff66 	bl	800d138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d26c:	f7fe ff4c 	bl	800c108 <vTaskSwitchContext>
	prvTaskExitError();
 800d270:	f7ff ff20 	bl	800d0b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3718      	adds	r7, #24
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	e000ed00 	.word	0xe000ed00
 800d284:	410fc271 	.word	0x410fc271
 800d288:	410fc270 	.word	0x410fc270
 800d28c:	e000e400 	.word	0xe000e400
 800d290:	20001eac 	.word	0x20001eac
 800d294:	20001eb0 	.word	0x20001eb0
 800d298:	e000ed20 	.word	0xe000ed20
 800d29c:	20000044 	.word	0x20000044
 800d2a0:	e000ef34 	.word	0xe000ef34

0800d2a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	607b      	str	r3, [r7, #4]
}
 800d2bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2be:	4b0f      	ldr	r3, [pc, #60]	; (800d2fc <vPortEnterCritical+0x58>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	4a0d      	ldr	r2, [pc, #52]	; (800d2fc <vPortEnterCritical+0x58>)
 800d2c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <vPortEnterCritical+0x58>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d10f      	bne.n	800d2f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2d0:	4b0b      	ldr	r3, [pc, #44]	; (800d300 <vPortEnterCritical+0x5c>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00a      	beq.n	800d2f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	603b      	str	r3, [r7, #0]
}
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <vPortEnterCritical+0x4a>
	}
}
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	20000044 	.word	0x20000044
 800d300:	e000ed04 	.word	0xe000ed04

0800d304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d30a:	4b12      	ldr	r3, [pc, #72]	; (800d354 <vPortExitCritical+0x50>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10a      	bne.n	800d328 <vPortExitCritical+0x24>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	607b      	str	r3, [r7, #4]
}
 800d324:	bf00      	nop
 800d326:	e7fe      	b.n	800d326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d328:	4b0a      	ldr	r3, [pc, #40]	; (800d354 <vPortExitCritical+0x50>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	4a09      	ldr	r2, [pc, #36]	; (800d354 <vPortExitCritical+0x50>)
 800d330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d332:	4b08      	ldr	r3, [pc, #32]	; (800d354 <vPortExitCritical+0x50>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d105      	bne.n	800d346 <vPortExitCritical+0x42>
 800d33a:	2300      	movs	r3, #0
 800d33c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	f383 8811 	msr	BASEPRI, r3
}
 800d344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d346:	bf00      	nop
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	20000044 	.word	0x20000044
	...

0800d360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d360:	f3ef 8009 	mrs	r0, PSP
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <pxCurrentTCBConst>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	f01e 0f10 	tst.w	lr, #16
 800d370:	bf08      	it	eq
 800d372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37a:	6010      	str	r0, [r2, #0]
 800d37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d384:	f380 8811 	msr	BASEPRI, r0
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f7fe feba 	bl	800c108 <vTaskSwitchContext>
 800d394:	f04f 0000 	mov.w	r0, #0
 800d398:	f380 8811 	msr	BASEPRI, r0
 800d39c:	bc09      	pop	{r0, r3}
 800d39e:	6819      	ldr	r1, [r3, #0]
 800d3a0:	6808      	ldr	r0, [r1, #0]
 800d3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a6:	f01e 0f10 	tst.w	lr, #16
 800d3aa:	bf08      	it	eq
 800d3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3b0:	f380 8809 	msr	PSP, r0
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	f3af 8000 	nop.w

0800d3c0 <pxCurrentTCBConst>:
 800d3c0:	20001880 	.word	0x20001880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3c4:	bf00      	nop
 800d3c6:	bf00      	nop

0800d3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	607b      	str	r3, [r7, #4]
}
 800d3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3e2:	f7fe fdd7 	bl	800bf94 <xTaskIncrementTick>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3ec:	4b06      	ldr	r3, [pc, #24]	; (800d408 <xPortSysTickHandler+0x40>)
 800d3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	f383 8811 	msr	BASEPRI, r3
}
 800d3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	e000ed04 	.word	0xe000ed04

0800d40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d40c:	b480      	push	{r7}
 800d40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d410:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <vPortSetupTimerInterrupt+0x34>)
 800d412:	2200      	movs	r2, #0
 800d414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d416:	4b0b      	ldr	r3, [pc, #44]	; (800d444 <vPortSetupTimerInterrupt+0x38>)
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d41c:	4b0a      	ldr	r3, [pc, #40]	; (800d448 <vPortSetupTimerInterrupt+0x3c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0a      	ldr	r2, [pc, #40]	; (800d44c <vPortSetupTimerInterrupt+0x40>)
 800d422:	fba2 2303 	umull	r2, r3, r2, r3
 800d426:	099b      	lsrs	r3, r3, #6
 800d428:	4a09      	ldr	r2, [pc, #36]	; (800d450 <vPortSetupTimerInterrupt+0x44>)
 800d42a:	3b01      	subs	r3, #1
 800d42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d42e:	4b04      	ldr	r3, [pc, #16]	; (800d440 <vPortSetupTimerInterrupt+0x34>)
 800d430:	2207      	movs	r2, #7
 800d432:	601a      	str	r2, [r3, #0]
}
 800d434:	bf00      	nop
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	e000e010 	.word	0xe000e010
 800d444:	e000e018 	.word	0xe000e018
 800d448:	2000001c 	.word	0x2000001c
 800d44c:	10624dd3 	.word	0x10624dd3
 800d450:	e000e014 	.word	0xe000e014

0800d454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d464 <vPortEnableVFP+0x10>
 800d458:	6801      	ldr	r1, [r0, #0]
 800d45a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d45e:	6001      	str	r1, [r0, #0]
 800d460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d462:	bf00      	nop
 800d464:	e000ed88 	.word	0xe000ed88

0800d468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d46e:	f3ef 8305 	mrs	r3, IPSR
 800d472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2b0f      	cmp	r3, #15
 800d478:	d914      	bls.n	800d4a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d47a:	4a17      	ldr	r2, [pc, #92]	; (800d4d8 <vPortValidateInterruptPriority+0x70>)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	4413      	add	r3, r2
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d484:	4b15      	ldr	r3, [pc, #84]	; (800d4dc <vPortValidateInterruptPriority+0x74>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	7afa      	ldrb	r2, [r7, #11]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d20a      	bcs.n	800d4a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	607b      	str	r3, [r7, #4]
}
 800d4a0:	bf00      	nop
 800d4a2:	e7fe      	b.n	800d4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4a4:	4b0e      	ldr	r3, [pc, #56]	; (800d4e0 <vPortValidateInterruptPriority+0x78>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d4ac:	4b0d      	ldr	r3, [pc, #52]	; (800d4e4 <vPortValidateInterruptPriority+0x7c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d90a      	bls.n	800d4ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	603b      	str	r3, [r7, #0]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <vPortValidateInterruptPriority+0x60>
	}
 800d4ca:	bf00      	nop
 800d4cc:	3714      	adds	r7, #20
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	e000e3f0 	.word	0xe000e3f0
 800d4dc:	20001eac 	.word	0x20001eac
 800d4e0:	e000ed0c 	.word	0xe000ed0c
 800d4e4:	20001eb0 	.word	0x20001eb0

0800d4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08a      	sub	sp, #40	; 0x28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4f4:	f7fe fc80 	bl	800bdf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4f8:	4b5b      	ldr	r3, [pc, #364]	; (800d668 <pvPortMalloc+0x180>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d500:	f000 f920 	bl	800d744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d504:	4b59      	ldr	r3, [pc, #356]	; (800d66c <pvPortMalloc+0x184>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4013      	ands	r3, r2
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f040 8093 	bne.w	800d638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01d      	beq.n	800d554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d518:	2208      	movs	r2, #8
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4413      	add	r3, r2
 800d51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f003 0307 	and.w	r3, r3, #7
 800d526:	2b00      	cmp	r3, #0
 800d528:	d014      	beq.n	800d554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f023 0307 	bic.w	r3, r3, #7
 800d530:	3308      	adds	r3, #8
 800d532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00a      	beq.n	800d554 <pvPortMalloc+0x6c>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	617b      	str	r3, [r7, #20]
}
 800d550:	bf00      	nop
 800d552:	e7fe      	b.n	800d552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d06e      	beq.n	800d638 <pvPortMalloc+0x150>
 800d55a:	4b45      	ldr	r3, [pc, #276]	; (800d670 <pvPortMalloc+0x188>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	429a      	cmp	r2, r3
 800d562:	d869      	bhi.n	800d638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d564:	4b43      	ldr	r3, [pc, #268]	; (800d674 <pvPortMalloc+0x18c>)
 800d566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d568:	4b42      	ldr	r3, [pc, #264]	; (800d674 <pvPortMalloc+0x18c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d56e:	e004      	b.n	800d57a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	429a      	cmp	r2, r3
 800d582:	d903      	bls.n	800d58c <pvPortMalloc+0xa4>
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1f1      	bne.n	800d570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d58c:	4b36      	ldr	r3, [pc, #216]	; (800d668 <pvPortMalloc+0x180>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d592:	429a      	cmp	r2, r3
 800d594:	d050      	beq.n	800d638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d596:	6a3b      	ldr	r3, [r7, #32]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2208      	movs	r2, #8
 800d59c:	4413      	add	r3, r2
 800d59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	2308      	movs	r3, #8
 800d5b2:	005b      	lsls	r3, r3, #1
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d91f      	bls.n	800d5f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00a      	beq.n	800d5e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ce:	f383 8811 	msr	BASEPRI, r3
 800d5d2:	f3bf 8f6f 	isb	sy
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	613b      	str	r3, [r7, #16]
}
 800d5dc:	bf00      	nop
 800d5de:	e7fe      	b.n	800d5de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	685a      	ldr	r2, [r3, #4]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	1ad2      	subs	r2, r2, r3
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5f2:	69b8      	ldr	r0, [r7, #24]
 800d5f4:	f000 f908 	bl	800d808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5f8:	4b1d      	ldr	r3, [pc, #116]	; (800d670 <pvPortMalloc+0x188>)
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	4a1b      	ldr	r2, [pc, #108]	; (800d670 <pvPortMalloc+0x188>)
 800d604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d606:	4b1a      	ldr	r3, [pc, #104]	; (800d670 <pvPortMalloc+0x188>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	4b1b      	ldr	r3, [pc, #108]	; (800d678 <pvPortMalloc+0x190>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d203      	bcs.n	800d61a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d612:	4b17      	ldr	r3, [pc, #92]	; (800d670 <pvPortMalloc+0x188>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a18      	ldr	r2, [pc, #96]	; (800d678 <pvPortMalloc+0x190>)
 800d618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	685a      	ldr	r2, [r3, #4]
 800d61e:	4b13      	ldr	r3, [pc, #76]	; (800d66c <pvPortMalloc+0x184>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	431a      	orrs	r2, r3
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	2200      	movs	r2, #0
 800d62c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d62e:	4b13      	ldr	r3, [pc, #76]	; (800d67c <pvPortMalloc+0x194>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	3301      	adds	r3, #1
 800d634:	4a11      	ldr	r2, [pc, #68]	; (800d67c <pvPortMalloc+0x194>)
 800d636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d638:	f7fe fbec 	bl	800be14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	f003 0307 	and.w	r3, r3, #7
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00a      	beq.n	800d65c <pvPortMalloc+0x174>
	__asm volatile
 800d646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	60fb      	str	r3, [r7, #12]
}
 800d658:	bf00      	nop
 800d65a:	e7fe      	b.n	800d65a <pvPortMalloc+0x172>
	return pvReturn;
 800d65c:	69fb      	ldr	r3, [r7, #28]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3728      	adds	r7, #40	; 0x28
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20005abc 	.word	0x20005abc
 800d66c:	20005ad0 	.word	0x20005ad0
 800d670:	20005ac0 	.word	0x20005ac0
 800d674:	20005ab4 	.word	0x20005ab4
 800d678:	20005ac4 	.word	0x20005ac4
 800d67c:	20005ac8 	.word	0x20005ac8

0800d680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d04d      	beq.n	800d72e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d692:	2308      	movs	r3, #8
 800d694:	425b      	negs	r3, r3
 800d696:	697a      	ldr	r2, [r7, #20]
 800d698:	4413      	add	r3, r2
 800d69a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	685a      	ldr	r2, [r3, #4]
 800d6a4:	4b24      	ldr	r3, [pc, #144]	; (800d738 <vPortFree+0xb8>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10a      	bne.n	800d6c4 <vPortFree+0x44>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	60fb      	str	r3, [r7, #12]
}
 800d6c0:	bf00      	nop
 800d6c2:	e7fe      	b.n	800d6c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00a      	beq.n	800d6e2 <vPortFree+0x62>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	60bb      	str	r3, [r7, #8]
}
 800d6de:	bf00      	nop
 800d6e0:	e7fe      	b.n	800d6e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	685a      	ldr	r2, [r3, #4]
 800d6e6:	4b14      	ldr	r3, [pc, #80]	; (800d738 <vPortFree+0xb8>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01e      	beq.n	800d72e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d11a      	bne.n	800d72e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	685a      	ldr	r2, [r3, #4]
 800d6fc:	4b0e      	ldr	r3, [pc, #56]	; (800d738 <vPortFree+0xb8>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	43db      	mvns	r3, r3
 800d702:	401a      	ands	r2, r3
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d708:	f7fe fb76 	bl	800bdf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	685a      	ldr	r2, [r3, #4]
 800d710:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <vPortFree+0xbc>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4413      	add	r3, r2
 800d716:	4a09      	ldr	r2, [pc, #36]	; (800d73c <vPortFree+0xbc>)
 800d718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d71a:	6938      	ldr	r0, [r7, #16]
 800d71c:	f000 f874 	bl	800d808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d720:	4b07      	ldr	r3, [pc, #28]	; (800d740 <vPortFree+0xc0>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3301      	adds	r3, #1
 800d726:	4a06      	ldr	r2, [pc, #24]	; (800d740 <vPortFree+0xc0>)
 800d728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d72a:	f7fe fb73 	bl	800be14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d72e:	bf00      	nop
 800d730:	3718      	adds	r7, #24
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	20005ad0 	.word	0x20005ad0
 800d73c:	20005ac0 	.word	0x20005ac0
 800d740:	20005acc 	.word	0x20005acc

0800d744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d74a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d74e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d750:	4b27      	ldr	r3, [pc, #156]	; (800d7f0 <prvHeapInit+0xac>)
 800d752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f003 0307 	and.w	r3, r3, #7
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00c      	beq.n	800d778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	3307      	adds	r3, #7
 800d762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f023 0307 	bic.w	r3, r3, #7
 800d76a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	4a1f      	ldr	r2, [pc, #124]	; (800d7f0 <prvHeapInit+0xac>)
 800d774:	4413      	add	r3, r2
 800d776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d77c:	4a1d      	ldr	r2, [pc, #116]	; (800d7f4 <prvHeapInit+0xb0>)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d782:	4b1c      	ldr	r3, [pc, #112]	; (800d7f4 <prvHeapInit+0xb0>)
 800d784:	2200      	movs	r2, #0
 800d786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	4413      	add	r3, r2
 800d78e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d790:	2208      	movs	r2, #8
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	1a9b      	subs	r3, r3, r2
 800d796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f023 0307 	bic.w	r3, r3, #7
 800d79e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4a15      	ldr	r2, [pc, #84]	; (800d7f8 <prvHeapInit+0xb4>)
 800d7a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7a6:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <prvHeapInit+0xb4>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7ae:	4b12      	ldr	r3, [pc, #72]	; (800d7f8 <prvHeapInit+0xb4>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	1ad2      	subs	r2, r2, r3
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7c4:	4b0c      	ldr	r3, [pc, #48]	; (800d7f8 <prvHeapInit+0xb4>)
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	4a0a      	ldr	r2, [pc, #40]	; (800d7fc <prvHeapInit+0xb8>)
 800d7d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	4a09      	ldr	r2, [pc, #36]	; (800d800 <prvHeapInit+0xbc>)
 800d7da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7dc:	4b09      	ldr	r3, [pc, #36]	; (800d804 <prvHeapInit+0xc0>)
 800d7de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7e2:	601a      	str	r2, [r3, #0]
}
 800d7e4:	bf00      	nop
 800d7e6:	3714      	adds	r7, #20
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	20001eb4 	.word	0x20001eb4
 800d7f4:	20005ab4 	.word	0x20005ab4
 800d7f8:	20005abc 	.word	0x20005abc
 800d7fc:	20005ac4 	.word	0x20005ac4
 800d800:	20005ac0 	.word	0x20005ac0
 800d804:	20005ad0 	.word	0x20005ad0

0800d808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d810:	4b28      	ldr	r3, [pc, #160]	; (800d8b4 <prvInsertBlockIntoFreeList+0xac>)
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	e002      	b.n	800d81c <prvInsertBlockIntoFreeList+0x14>
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	429a      	cmp	r2, r3
 800d824:	d8f7      	bhi.n	800d816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	68ba      	ldr	r2, [r7, #8]
 800d830:	4413      	add	r3, r2
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	429a      	cmp	r2, r3
 800d836:	d108      	bne.n	800d84a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	685a      	ldr	r2, [r3, #4]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	441a      	add	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	441a      	add	r2, r3
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d118      	bne.n	800d890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	429a      	cmp	r2, r3
 800d868:	d00d      	beq.n	800d886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	441a      	add	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	e008      	b.n	800d898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d886:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	e003      	b.n	800d898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d002      	beq.n	800d8a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8a6:	bf00      	nop
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop
 800d8b4:	20005ab4 	.word	0x20005ab4
 800d8b8:	20005abc 	.word	0x20005abc

0800d8bc <__errno>:
 800d8bc:	4b01      	ldr	r3, [pc, #4]	; (800d8c4 <__errno+0x8>)
 800d8be:	6818      	ldr	r0, [r3, #0]
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	20000048 	.word	0x20000048

0800d8c8 <std>:
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	b510      	push	{r4, lr}
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8d6:	6083      	str	r3, [r0, #8]
 800d8d8:	8181      	strh	r1, [r0, #12]
 800d8da:	6643      	str	r3, [r0, #100]	; 0x64
 800d8dc:	81c2      	strh	r2, [r0, #14]
 800d8de:	6183      	str	r3, [r0, #24]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	2208      	movs	r2, #8
 800d8e4:	305c      	adds	r0, #92	; 0x5c
 800d8e6:	f000 f91a 	bl	800db1e <memset>
 800d8ea:	4b05      	ldr	r3, [pc, #20]	; (800d900 <std+0x38>)
 800d8ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d8ee:	4b05      	ldr	r3, [pc, #20]	; (800d904 <std+0x3c>)
 800d8f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8f2:	4b05      	ldr	r3, [pc, #20]	; (800d908 <std+0x40>)
 800d8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8f6:	4b05      	ldr	r3, [pc, #20]	; (800d90c <std+0x44>)
 800d8f8:	6224      	str	r4, [r4, #32]
 800d8fa:	6323      	str	r3, [r4, #48]	; 0x30
 800d8fc:	bd10      	pop	{r4, pc}
 800d8fe:	bf00      	nop
 800d900:	0800ddf5 	.word	0x0800ddf5
 800d904:	0800de17 	.word	0x0800de17
 800d908:	0800de4f 	.word	0x0800de4f
 800d90c:	0800de73 	.word	0x0800de73

0800d910 <_cleanup_r>:
 800d910:	4901      	ldr	r1, [pc, #4]	; (800d918 <_cleanup_r+0x8>)
 800d912:	f000 b8af 	b.w	800da74 <_fwalk_reent>
 800d916:	bf00      	nop
 800d918:	0800e14d 	.word	0x0800e14d

0800d91c <__sfmoreglue>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	1e4a      	subs	r2, r1, #1
 800d920:	2568      	movs	r5, #104	; 0x68
 800d922:	4355      	muls	r5, r2
 800d924:	460e      	mov	r6, r1
 800d926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d92a:	f000 f901 	bl	800db30 <_malloc_r>
 800d92e:	4604      	mov	r4, r0
 800d930:	b140      	cbz	r0, 800d944 <__sfmoreglue+0x28>
 800d932:	2100      	movs	r1, #0
 800d934:	e9c0 1600 	strd	r1, r6, [r0]
 800d938:	300c      	adds	r0, #12
 800d93a:	60a0      	str	r0, [r4, #8]
 800d93c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d940:	f000 f8ed 	bl	800db1e <memset>
 800d944:	4620      	mov	r0, r4
 800d946:	bd70      	pop	{r4, r5, r6, pc}

0800d948 <__sfp_lock_acquire>:
 800d948:	4801      	ldr	r0, [pc, #4]	; (800d950 <__sfp_lock_acquire+0x8>)
 800d94a:	f000 b8d8 	b.w	800dafe <__retarget_lock_acquire_recursive>
 800d94e:	bf00      	nop
 800d950:	20007e50 	.word	0x20007e50

0800d954 <__sfp_lock_release>:
 800d954:	4801      	ldr	r0, [pc, #4]	; (800d95c <__sfp_lock_release+0x8>)
 800d956:	f000 b8d3 	b.w	800db00 <__retarget_lock_release_recursive>
 800d95a:	bf00      	nop
 800d95c:	20007e50 	.word	0x20007e50

0800d960 <__sinit_lock_acquire>:
 800d960:	4801      	ldr	r0, [pc, #4]	; (800d968 <__sinit_lock_acquire+0x8>)
 800d962:	f000 b8cc 	b.w	800dafe <__retarget_lock_acquire_recursive>
 800d966:	bf00      	nop
 800d968:	20007e4b 	.word	0x20007e4b

0800d96c <__sinit_lock_release>:
 800d96c:	4801      	ldr	r0, [pc, #4]	; (800d974 <__sinit_lock_release+0x8>)
 800d96e:	f000 b8c7 	b.w	800db00 <__retarget_lock_release_recursive>
 800d972:	bf00      	nop
 800d974:	20007e4b 	.word	0x20007e4b

0800d978 <__sinit>:
 800d978:	b510      	push	{r4, lr}
 800d97a:	4604      	mov	r4, r0
 800d97c:	f7ff fff0 	bl	800d960 <__sinit_lock_acquire>
 800d980:	69a3      	ldr	r3, [r4, #24]
 800d982:	b11b      	cbz	r3, 800d98c <__sinit+0x14>
 800d984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d988:	f7ff bff0 	b.w	800d96c <__sinit_lock_release>
 800d98c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d990:	6523      	str	r3, [r4, #80]	; 0x50
 800d992:	4b13      	ldr	r3, [pc, #76]	; (800d9e0 <__sinit+0x68>)
 800d994:	4a13      	ldr	r2, [pc, #76]	; (800d9e4 <__sinit+0x6c>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	62a2      	str	r2, [r4, #40]	; 0x28
 800d99a:	42a3      	cmp	r3, r4
 800d99c:	bf04      	itt	eq
 800d99e:	2301      	moveq	r3, #1
 800d9a0:	61a3      	streq	r3, [r4, #24]
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f000 f820 	bl	800d9e8 <__sfp>
 800d9a8:	6060      	str	r0, [r4, #4]
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f000 f81c 	bl	800d9e8 <__sfp>
 800d9b0:	60a0      	str	r0, [r4, #8]
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f000 f818 	bl	800d9e8 <__sfp>
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	60e0      	str	r0, [r4, #12]
 800d9bc:	2104      	movs	r1, #4
 800d9be:	6860      	ldr	r0, [r4, #4]
 800d9c0:	f7ff ff82 	bl	800d8c8 <std>
 800d9c4:	68a0      	ldr	r0, [r4, #8]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	2109      	movs	r1, #9
 800d9ca:	f7ff ff7d 	bl	800d8c8 <std>
 800d9ce:	68e0      	ldr	r0, [r4, #12]
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	2112      	movs	r1, #18
 800d9d4:	f7ff ff78 	bl	800d8c8 <std>
 800d9d8:	2301      	movs	r3, #1
 800d9da:	61a3      	str	r3, [r4, #24]
 800d9dc:	e7d2      	b.n	800d984 <__sinit+0xc>
 800d9de:	bf00      	nop
 800d9e0:	0800efc4 	.word	0x0800efc4
 800d9e4:	0800d911 	.word	0x0800d911

0800d9e8 <__sfp>:
 800d9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ea:	4607      	mov	r7, r0
 800d9ec:	f7ff ffac 	bl	800d948 <__sfp_lock_acquire>
 800d9f0:	4b1e      	ldr	r3, [pc, #120]	; (800da6c <__sfp+0x84>)
 800d9f2:	681e      	ldr	r6, [r3, #0]
 800d9f4:	69b3      	ldr	r3, [r6, #24]
 800d9f6:	b913      	cbnz	r3, 800d9fe <__sfp+0x16>
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f7ff ffbd 	bl	800d978 <__sinit>
 800d9fe:	3648      	adds	r6, #72	; 0x48
 800da00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da04:	3b01      	subs	r3, #1
 800da06:	d503      	bpl.n	800da10 <__sfp+0x28>
 800da08:	6833      	ldr	r3, [r6, #0]
 800da0a:	b30b      	cbz	r3, 800da50 <__sfp+0x68>
 800da0c:	6836      	ldr	r6, [r6, #0]
 800da0e:	e7f7      	b.n	800da00 <__sfp+0x18>
 800da10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da14:	b9d5      	cbnz	r5, 800da4c <__sfp+0x64>
 800da16:	4b16      	ldr	r3, [pc, #88]	; (800da70 <__sfp+0x88>)
 800da18:	60e3      	str	r3, [r4, #12]
 800da1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da1e:	6665      	str	r5, [r4, #100]	; 0x64
 800da20:	f000 f86c 	bl	800dafc <__retarget_lock_init_recursive>
 800da24:	f7ff ff96 	bl	800d954 <__sfp_lock_release>
 800da28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da30:	6025      	str	r5, [r4, #0]
 800da32:	61a5      	str	r5, [r4, #24]
 800da34:	2208      	movs	r2, #8
 800da36:	4629      	mov	r1, r5
 800da38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da3c:	f000 f86f 	bl	800db1e <memset>
 800da40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da48:	4620      	mov	r0, r4
 800da4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da4c:	3468      	adds	r4, #104	; 0x68
 800da4e:	e7d9      	b.n	800da04 <__sfp+0x1c>
 800da50:	2104      	movs	r1, #4
 800da52:	4638      	mov	r0, r7
 800da54:	f7ff ff62 	bl	800d91c <__sfmoreglue>
 800da58:	4604      	mov	r4, r0
 800da5a:	6030      	str	r0, [r6, #0]
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d1d5      	bne.n	800da0c <__sfp+0x24>
 800da60:	f7ff ff78 	bl	800d954 <__sfp_lock_release>
 800da64:	230c      	movs	r3, #12
 800da66:	603b      	str	r3, [r7, #0]
 800da68:	e7ee      	b.n	800da48 <__sfp+0x60>
 800da6a:	bf00      	nop
 800da6c:	0800efc4 	.word	0x0800efc4
 800da70:	ffff0001 	.word	0xffff0001

0800da74 <_fwalk_reent>:
 800da74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da78:	4606      	mov	r6, r0
 800da7a:	4688      	mov	r8, r1
 800da7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da80:	2700      	movs	r7, #0
 800da82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da86:	f1b9 0901 	subs.w	r9, r9, #1
 800da8a:	d505      	bpl.n	800da98 <_fwalk_reent+0x24>
 800da8c:	6824      	ldr	r4, [r4, #0]
 800da8e:	2c00      	cmp	r4, #0
 800da90:	d1f7      	bne.n	800da82 <_fwalk_reent+0xe>
 800da92:	4638      	mov	r0, r7
 800da94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da98:	89ab      	ldrh	r3, [r5, #12]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d907      	bls.n	800daae <_fwalk_reent+0x3a>
 800da9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800daa2:	3301      	adds	r3, #1
 800daa4:	d003      	beq.n	800daae <_fwalk_reent+0x3a>
 800daa6:	4629      	mov	r1, r5
 800daa8:	4630      	mov	r0, r6
 800daaa:	47c0      	blx	r8
 800daac:	4307      	orrs	r7, r0
 800daae:	3568      	adds	r5, #104	; 0x68
 800dab0:	e7e9      	b.n	800da86 <_fwalk_reent+0x12>
	...

0800dab4 <__libc_init_array>:
 800dab4:	b570      	push	{r4, r5, r6, lr}
 800dab6:	4d0d      	ldr	r5, [pc, #52]	; (800daec <__libc_init_array+0x38>)
 800dab8:	4c0d      	ldr	r4, [pc, #52]	; (800daf0 <__libc_init_array+0x3c>)
 800daba:	1b64      	subs	r4, r4, r5
 800dabc:	10a4      	asrs	r4, r4, #2
 800dabe:	2600      	movs	r6, #0
 800dac0:	42a6      	cmp	r6, r4
 800dac2:	d109      	bne.n	800dad8 <__libc_init_array+0x24>
 800dac4:	4d0b      	ldr	r5, [pc, #44]	; (800daf4 <__libc_init_array+0x40>)
 800dac6:	4c0c      	ldr	r4, [pc, #48]	; (800daf8 <__libc_init_array+0x44>)
 800dac8:	f000 ff70 	bl	800e9ac <_init>
 800dacc:	1b64      	subs	r4, r4, r5
 800dace:	10a4      	asrs	r4, r4, #2
 800dad0:	2600      	movs	r6, #0
 800dad2:	42a6      	cmp	r6, r4
 800dad4:	d105      	bne.n	800dae2 <__libc_init_array+0x2e>
 800dad6:	bd70      	pop	{r4, r5, r6, pc}
 800dad8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dadc:	4798      	blx	r3
 800dade:	3601      	adds	r6, #1
 800dae0:	e7ee      	b.n	800dac0 <__libc_init_array+0xc>
 800dae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dae6:	4798      	blx	r3
 800dae8:	3601      	adds	r6, #1
 800daea:	e7f2      	b.n	800dad2 <__libc_init_array+0x1e>
 800daec:	0800f004 	.word	0x0800f004
 800daf0:	0800f004 	.word	0x0800f004
 800daf4:	0800f004 	.word	0x0800f004
 800daf8:	0800f008 	.word	0x0800f008

0800dafc <__retarget_lock_init_recursive>:
 800dafc:	4770      	bx	lr

0800dafe <__retarget_lock_acquire_recursive>:
 800dafe:	4770      	bx	lr

0800db00 <__retarget_lock_release_recursive>:
 800db00:	4770      	bx	lr

0800db02 <memcpy>:
 800db02:	440a      	add	r2, r1
 800db04:	4291      	cmp	r1, r2
 800db06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800db0a:	d100      	bne.n	800db0e <memcpy+0xc>
 800db0c:	4770      	bx	lr
 800db0e:	b510      	push	{r4, lr}
 800db10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db18:	4291      	cmp	r1, r2
 800db1a:	d1f9      	bne.n	800db10 <memcpy+0xe>
 800db1c:	bd10      	pop	{r4, pc}

0800db1e <memset>:
 800db1e:	4402      	add	r2, r0
 800db20:	4603      	mov	r3, r0
 800db22:	4293      	cmp	r3, r2
 800db24:	d100      	bne.n	800db28 <memset+0xa>
 800db26:	4770      	bx	lr
 800db28:	f803 1b01 	strb.w	r1, [r3], #1
 800db2c:	e7f9      	b.n	800db22 <memset+0x4>
	...

0800db30 <_malloc_r>:
 800db30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db32:	1ccd      	adds	r5, r1, #3
 800db34:	f025 0503 	bic.w	r5, r5, #3
 800db38:	3508      	adds	r5, #8
 800db3a:	2d0c      	cmp	r5, #12
 800db3c:	bf38      	it	cc
 800db3e:	250c      	movcc	r5, #12
 800db40:	2d00      	cmp	r5, #0
 800db42:	4606      	mov	r6, r0
 800db44:	db01      	blt.n	800db4a <_malloc_r+0x1a>
 800db46:	42a9      	cmp	r1, r5
 800db48:	d903      	bls.n	800db52 <_malloc_r+0x22>
 800db4a:	230c      	movs	r3, #12
 800db4c:	6033      	str	r3, [r6, #0]
 800db4e:	2000      	movs	r0, #0
 800db50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db52:	f000 fbad 	bl	800e2b0 <__malloc_lock>
 800db56:	4921      	ldr	r1, [pc, #132]	; (800dbdc <_malloc_r+0xac>)
 800db58:	680a      	ldr	r2, [r1, #0]
 800db5a:	4614      	mov	r4, r2
 800db5c:	b99c      	cbnz	r4, 800db86 <_malloc_r+0x56>
 800db5e:	4f20      	ldr	r7, [pc, #128]	; (800dbe0 <_malloc_r+0xb0>)
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	b923      	cbnz	r3, 800db6e <_malloc_r+0x3e>
 800db64:	4621      	mov	r1, r4
 800db66:	4630      	mov	r0, r6
 800db68:	f000 f934 	bl	800ddd4 <_sbrk_r>
 800db6c:	6038      	str	r0, [r7, #0]
 800db6e:	4629      	mov	r1, r5
 800db70:	4630      	mov	r0, r6
 800db72:	f000 f92f 	bl	800ddd4 <_sbrk_r>
 800db76:	1c43      	adds	r3, r0, #1
 800db78:	d123      	bne.n	800dbc2 <_malloc_r+0x92>
 800db7a:	230c      	movs	r3, #12
 800db7c:	6033      	str	r3, [r6, #0]
 800db7e:	4630      	mov	r0, r6
 800db80:	f000 fb9c 	bl	800e2bc <__malloc_unlock>
 800db84:	e7e3      	b.n	800db4e <_malloc_r+0x1e>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	1b5b      	subs	r3, r3, r5
 800db8a:	d417      	bmi.n	800dbbc <_malloc_r+0x8c>
 800db8c:	2b0b      	cmp	r3, #11
 800db8e:	d903      	bls.n	800db98 <_malloc_r+0x68>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	441c      	add	r4, r3
 800db94:	6025      	str	r5, [r4, #0]
 800db96:	e004      	b.n	800dba2 <_malloc_r+0x72>
 800db98:	6863      	ldr	r3, [r4, #4]
 800db9a:	42a2      	cmp	r2, r4
 800db9c:	bf0c      	ite	eq
 800db9e:	600b      	streq	r3, [r1, #0]
 800dba0:	6053      	strne	r3, [r2, #4]
 800dba2:	4630      	mov	r0, r6
 800dba4:	f000 fb8a 	bl	800e2bc <__malloc_unlock>
 800dba8:	f104 000b 	add.w	r0, r4, #11
 800dbac:	1d23      	adds	r3, r4, #4
 800dbae:	f020 0007 	bic.w	r0, r0, #7
 800dbb2:	1ac2      	subs	r2, r0, r3
 800dbb4:	d0cc      	beq.n	800db50 <_malloc_r+0x20>
 800dbb6:	1a1b      	subs	r3, r3, r0
 800dbb8:	50a3      	str	r3, [r4, r2]
 800dbba:	e7c9      	b.n	800db50 <_malloc_r+0x20>
 800dbbc:	4622      	mov	r2, r4
 800dbbe:	6864      	ldr	r4, [r4, #4]
 800dbc0:	e7cc      	b.n	800db5c <_malloc_r+0x2c>
 800dbc2:	1cc4      	adds	r4, r0, #3
 800dbc4:	f024 0403 	bic.w	r4, r4, #3
 800dbc8:	42a0      	cmp	r0, r4
 800dbca:	d0e3      	beq.n	800db94 <_malloc_r+0x64>
 800dbcc:	1a21      	subs	r1, r4, r0
 800dbce:	4630      	mov	r0, r6
 800dbd0:	f000 f900 	bl	800ddd4 <_sbrk_r>
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d1dd      	bne.n	800db94 <_malloc_r+0x64>
 800dbd8:	e7cf      	b.n	800db7a <_malloc_r+0x4a>
 800dbda:	bf00      	nop
 800dbdc:	20005ad4 	.word	0x20005ad4
 800dbe0:	20005ad8 	.word	0x20005ad8

0800dbe4 <iprintf>:
 800dbe4:	b40f      	push	{r0, r1, r2, r3}
 800dbe6:	4b0a      	ldr	r3, [pc, #40]	; (800dc10 <iprintf+0x2c>)
 800dbe8:	b513      	push	{r0, r1, r4, lr}
 800dbea:	681c      	ldr	r4, [r3, #0]
 800dbec:	b124      	cbz	r4, 800dbf8 <iprintf+0x14>
 800dbee:	69a3      	ldr	r3, [r4, #24]
 800dbf0:	b913      	cbnz	r3, 800dbf8 <iprintf+0x14>
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f7ff fec0 	bl	800d978 <__sinit>
 800dbf8:	ab05      	add	r3, sp, #20
 800dbfa:	9a04      	ldr	r2, [sp, #16]
 800dbfc:	68a1      	ldr	r1, [r4, #8]
 800dbfe:	9301      	str	r3, [sp, #4]
 800dc00:	4620      	mov	r0, r4
 800dc02:	f000 fbdb 	bl	800e3bc <_vfiprintf_r>
 800dc06:	b002      	add	sp, #8
 800dc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc0c:	b004      	add	sp, #16
 800dc0e:	4770      	bx	lr
 800dc10:	20000048 	.word	0x20000048

0800dc14 <_puts_r>:
 800dc14:	b570      	push	{r4, r5, r6, lr}
 800dc16:	460e      	mov	r6, r1
 800dc18:	4605      	mov	r5, r0
 800dc1a:	b118      	cbz	r0, 800dc24 <_puts_r+0x10>
 800dc1c:	6983      	ldr	r3, [r0, #24]
 800dc1e:	b90b      	cbnz	r3, 800dc24 <_puts_r+0x10>
 800dc20:	f7ff feaa 	bl	800d978 <__sinit>
 800dc24:	69ab      	ldr	r3, [r5, #24]
 800dc26:	68ac      	ldr	r4, [r5, #8]
 800dc28:	b913      	cbnz	r3, 800dc30 <_puts_r+0x1c>
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	f7ff fea4 	bl	800d978 <__sinit>
 800dc30:	4b2c      	ldr	r3, [pc, #176]	; (800dce4 <_puts_r+0xd0>)
 800dc32:	429c      	cmp	r4, r3
 800dc34:	d120      	bne.n	800dc78 <_puts_r+0x64>
 800dc36:	686c      	ldr	r4, [r5, #4]
 800dc38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc3a:	07db      	lsls	r3, r3, #31
 800dc3c:	d405      	bmi.n	800dc4a <_puts_r+0x36>
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	0598      	lsls	r0, r3, #22
 800dc42:	d402      	bmi.n	800dc4a <_puts_r+0x36>
 800dc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc46:	f7ff ff5a 	bl	800dafe <__retarget_lock_acquire_recursive>
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	0719      	lsls	r1, r3, #28
 800dc4e:	d51d      	bpl.n	800dc8c <_puts_r+0x78>
 800dc50:	6923      	ldr	r3, [r4, #16]
 800dc52:	b1db      	cbz	r3, 800dc8c <_puts_r+0x78>
 800dc54:	3e01      	subs	r6, #1
 800dc56:	68a3      	ldr	r3, [r4, #8]
 800dc58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	60a3      	str	r3, [r4, #8]
 800dc60:	bb39      	cbnz	r1, 800dcb2 <_puts_r+0x9e>
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	da38      	bge.n	800dcd8 <_puts_r+0xc4>
 800dc66:	4622      	mov	r2, r4
 800dc68:	210a      	movs	r1, #10
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f000 f906 	bl	800de7c <__swbuf_r>
 800dc70:	3001      	adds	r0, #1
 800dc72:	d011      	beq.n	800dc98 <_puts_r+0x84>
 800dc74:	250a      	movs	r5, #10
 800dc76:	e011      	b.n	800dc9c <_puts_r+0x88>
 800dc78:	4b1b      	ldr	r3, [pc, #108]	; (800dce8 <_puts_r+0xd4>)
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	d101      	bne.n	800dc82 <_puts_r+0x6e>
 800dc7e:	68ac      	ldr	r4, [r5, #8]
 800dc80:	e7da      	b.n	800dc38 <_puts_r+0x24>
 800dc82:	4b1a      	ldr	r3, [pc, #104]	; (800dcec <_puts_r+0xd8>)
 800dc84:	429c      	cmp	r4, r3
 800dc86:	bf08      	it	eq
 800dc88:	68ec      	ldreq	r4, [r5, #12]
 800dc8a:	e7d5      	b.n	800dc38 <_puts_r+0x24>
 800dc8c:	4621      	mov	r1, r4
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f000 f958 	bl	800df44 <__swsetup_r>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d0dd      	beq.n	800dc54 <_puts_r+0x40>
 800dc98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dc9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc9e:	07da      	lsls	r2, r3, #31
 800dca0:	d405      	bmi.n	800dcae <_puts_r+0x9a>
 800dca2:	89a3      	ldrh	r3, [r4, #12]
 800dca4:	059b      	lsls	r3, r3, #22
 800dca6:	d402      	bmi.n	800dcae <_puts_r+0x9a>
 800dca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcaa:	f7ff ff29 	bl	800db00 <__retarget_lock_release_recursive>
 800dcae:	4628      	mov	r0, r5
 800dcb0:	bd70      	pop	{r4, r5, r6, pc}
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	da04      	bge.n	800dcc0 <_puts_r+0xac>
 800dcb6:	69a2      	ldr	r2, [r4, #24]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	dc06      	bgt.n	800dcca <_puts_r+0xb6>
 800dcbc:	290a      	cmp	r1, #10
 800dcbe:	d004      	beq.n	800dcca <_puts_r+0xb6>
 800dcc0:	6823      	ldr	r3, [r4, #0]
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	6022      	str	r2, [r4, #0]
 800dcc6:	7019      	strb	r1, [r3, #0]
 800dcc8:	e7c5      	b.n	800dc56 <_puts_r+0x42>
 800dcca:	4622      	mov	r2, r4
 800dccc:	4628      	mov	r0, r5
 800dcce:	f000 f8d5 	bl	800de7c <__swbuf_r>
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	d1bf      	bne.n	800dc56 <_puts_r+0x42>
 800dcd6:	e7df      	b.n	800dc98 <_puts_r+0x84>
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	250a      	movs	r5, #10
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	6022      	str	r2, [r4, #0]
 800dce0:	701d      	strb	r5, [r3, #0]
 800dce2:	e7db      	b.n	800dc9c <_puts_r+0x88>
 800dce4:	0800ef84 	.word	0x0800ef84
 800dce8:	0800efa4 	.word	0x0800efa4
 800dcec:	0800ef64 	.word	0x0800ef64

0800dcf0 <puts>:
 800dcf0:	4b02      	ldr	r3, [pc, #8]	; (800dcfc <puts+0xc>)
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	6818      	ldr	r0, [r3, #0]
 800dcf6:	f7ff bf8d 	b.w	800dc14 <_puts_r>
 800dcfa:	bf00      	nop
 800dcfc:	20000048 	.word	0x20000048

0800dd00 <cleanup_glue>:
 800dd00:	b538      	push	{r3, r4, r5, lr}
 800dd02:	460c      	mov	r4, r1
 800dd04:	6809      	ldr	r1, [r1, #0]
 800dd06:	4605      	mov	r5, r0
 800dd08:	b109      	cbz	r1, 800dd0e <cleanup_glue+0xe>
 800dd0a:	f7ff fff9 	bl	800dd00 <cleanup_glue>
 800dd0e:	4621      	mov	r1, r4
 800dd10:	4628      	mov	r0, r5
 800dd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd16:	f000 bad7 	b.w	800e2c8 <_free_r>
	...

0800dd1c <_reclaim_reent>:
 800dd1c:	4b2c      	ldr	r3, [pc, #176]	; (800ddd0 <_reclaim_reent+0xb4>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4283      	cmp	r3, r0
 800dd22:	b570      	push	{r4, r5, r6, lr}
 800dd24:	4604      	mov	r4, r0
 800dd26:	d051      	beq.n	800ddcc <_reclaim_reent+0xb0>
 800dd28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dd2a:	b143      	cbz	r3, 800dd3e <_reclaim_reent+0x22>
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d14a      	bne.n	800ddc8 <_reclaim_reent+0xac>
 800dd32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd34:	6819      	ldr	r1, [r3, #0]
 800dd36:	b111      	cbz	r1, 800dd3e <_reclaim_reent+0x22>
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 fac5 	bl	800e2c8 <_free_r>
 800dd3e:	6961      	ldr	r1, [r4, #20]
 800dd40:	b111      	cbz	r1, 800dd48 <_reclaim_reent+0x2c>
 800dd42:	4620      	mov	r0, r4
 800dd44:	f000 fac0 	bl	800e2c8 <_free_r>
 800dd48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dd4a:	b111      	cbz	r1, 800dd52 <_reclaim_reent+0x36>
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f000 fabb 	bl	800e2c8 <_free_r>
 800dd52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd54:	b111      	cbz	r1, 800dd5c <_reclaim_reent+0x40>
 800dd56:	4620      	mov	r0, r4
 800dd58:	f000 fab6 	bl	800e2c8 <_free_r>
 800dd5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dd5e:	b111      	cbz	r1, 800dd66 <_reclaim_reent+0x4a>
 800dd60:	4620      	mov	r0, r4
 800dd62:	f000 fab1 	bl	800e2c8 <_free_r>
 800dd66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dd68:	b111      	cbz	r1, 800dd70 <_reclaim_reent+0x54>
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f000 faac 	bl	800e2c8 <_free_r>
 800dd70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dd72:	b111      	cbz	r1, 800dd7a <_reclaim_reent+0x5e>
 800dd74:	4620      	mov	r0, r4
 800dd76:	f000 faa7 	bl	800e2c8 <_free_r>
 800dd7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dd7c:	b111      	cbz	r1, 800dd84 <_reclaim_reent+0x68>
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f000 faa2 	bl	800e2c8 <_free_r>
 800dd84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd86:	b111      	cbz	r1, 800dd8e <_reclaim_reent+0x72>
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f000 fa9d 	bl	800e2c8 <_free_r>
 800dd8e:	69a3      	ldr	r3, [r4, #24]
 800dd90:	b1e3      	cbz	r3, 800ddcc <_reclaim_reent+0xb0>
 800dd92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd94:	4620      	mov	r0, r4
 800dd96:	4798      	blx	r3
 800dd98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dd9a:	b1b9      	cbz	r1, 800ddcc <_reclaim_reent+0xb0>
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dda2:	f7ff bfad 	b.w	800dd00 <cleanup_glue>
 800dda6:	5949      	ldr	r1, [r1, r5]
 800dda8:	b941      	cbnz	r1, 800ddbc <_reclaim_reent+0xa0>
 800ddaa:	3504      	adds	r5, #4
 800ddac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddae:	2d80      	cmp	r5, #128	; 0x80
 800ddb0:	68d9      	ldr	r1, [r3, #12]
 800ddb2:	d1f8      	bne.n	800dda6 <_reclaim_reent+0x8a>
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 fa87 	bl	800e2c8 <_free_r>
 800ddba:	e7ba      	b.n	800dd32 <_reclaim_reent+0x16>
 800ddbc:	680e      	ldr	r6, [r1, #0]
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f000 fa82 	bl	800e2c8 <_free_r>
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	e7ef      	b.n	800dda8 <_reclaim_reent+0x8c>
 800ddc8:	2500      	movs	r5, #0
 800ddca:	e7ef      	b.n	800ddac <_reclaim_reent+0x90>
 800ddcc:	bd70      	pop	{r4, r5, r6, pc}
 800ddce:	bf00      	nop
 800ddd0:	20000048 	.word	0x20000048

0800ddd4 <_sbrk_r>:
 800ddd4:	b538      	push	{r3, r4, r5, lr}
 800ddd6:	4d06      	ldr	r5, [pc, #24]	; (800ddf0 <_sbrk_r+0x1c>)
 800ddd8:	2300      	movs	r3, #0
 800ddda:	4604      	mov	r4, r0
 800dddc:	4608      	mov	r0, r1
 800ddde:	602b      	str	r3, [r5, #0]
 800dde0:	f7f3 fb96 	bl	8001510 <_sbrk>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_sbrk_r+0x1a>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_sbrk_r+0x1a>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	20007e54 	.word	0x20007e54

0800ddf4 <__sread>:
 800ddf4:	b510      	push	{r4, lr}
 800ddf6:	460c      	mov	r4, r1
 800ddf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddfc:	f000 fda2 	bl	800e944 <_read_r>
 800de00:	2800      	cmp	r0, #0
 800de02:	bfab      	itete	ge
 800de04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de06:	89a3      	ldrhlt	r3, [r4, #12]
 800de08:	181b      	addge	r3, r3, r0
 800de0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de0e:	bfac      	ite	ge
 800de10:	6563      	strge	r3, [r4, #84]	; 0x54
 800de12:	81a3      	strhlt	r3, [r4, #12]
 800de14:	bd10      	pop	{r4, pc}

0800de16 <__swrite>:
 800de16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de1a:	461f      	mov	r7, r3
 800de1c:	898b      	ldrh	r3, [r1, #12]
 800de1e:	05db      	lsls	r3, r3, #23
 800de20:	4605      	mov	r5, r0
 800de22:	460c      	mov	r4, r1
 800de24:	4616      	mov	r6, r2
 800de26:	d505      	bpl.n	800de34 <__swrite+0x1e>
 800de28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de2c:	2302      	movs	r3, #2
 800de2e:	2200      	movs	r2, #0
 800de30:	f000 f9c8 	bl	800e1c4 <_lseek_r>
 800de34:	89a3      	ldrh	r3, [r4, #12]
 800de36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de3e:	81a3      	strh	r3, [r4, #12]
 800de40:	4632      	mov	r2, r6
 800de42:	463b      	mov	r3, r7
 800de44:	4628      	mov	r0, r5
 800de46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de4a:	f000 b869 	b.w	800df20 <_write_r>

0800de4e <__sseek>:
 800de4e:	b510      	push	{r4, lr}
 800de50:	460c      	mov	r4, r1
 800de52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de56:	f000 f9b5 	bl	800e1c4 <_lseek_r>
 800de5a:	1c43      	adds	r3, r0, #1
 800de5c:	89a3      	ldrh	r3, [r4, #12]
 800de5e:	bf15      	itete	ne
 800de60:	6560      	strne	r0, [r4, #84]	; 0x54
 800de62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de6a:	81a3      	strheq	r3, [r4, #12]
 800de6c:	bf18      	it	ne
 800de6e:	81a3      	strhne	r3, [r4, #12]
 800de70:	bd10      	pop	{r4, pc}

0800de72 <__sclose>:
 800de72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de76:	f000 b8d3 	b.w	800e020 <_close_r>
	...

0800de7c <__swbuf_r>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	460e      	mov	r6, r1
 800de80:	4614      	mov	r4, r2
 800de82:	4605      	mov	r5, r0
 800de84:	b118      	cbz	r0, 800de8e <__swbuf_r+0x12>
 800de86:	6983      	ldr	r3, [r0, #24]
 800de88:	b90b      	cbnz	r3, 800de8e <__swbuf_r+0x12>
 800de8a:	f7ff fd75 	bl	800d978 <__sinit>
 800de8e:	4b21      	ldr	r3, [pc, #132]	; (800df14 <__swbuf_r+0x98>)
 800de90:	429c      	cmp	r4, r3
 800de92:	d12b      	bne.n	800deec <__swbuf_r+0x70>
 800de94:	686c      	ldr	r4, [r5, #4]
 800de96:	69a3      	ldr	r3, [r4, #24]
 800de98:	60a3      	str	r3, [r4, #8]
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	071a      	lsls	r2, r3, #28
 800de9e:	d52f      	bpl.n	800df00 <__swbuf_r+0x84>
 800dea0:	6923      	ldr	r3, [r4, #16]
 800dea2:	b36b      	cbz	r3, 800df00 <__swbuf_r+0x84>
 800dea4:	6923      	ldr	r3, [r4, #16]
 800dea6:	6820      	ldr	r0, [r4, #0]
 800dea8:	1ac0      	subs	r0, r0, r3
 800deaa:	6963      	ldr	r3, [r4, #20]
 800deac:	b2f6      	uxtb	r6, r6
 800deae:	4283      	cmp	r3, r0
 800deb0:	4637      	mov	r7, r6
 800deb2:	dc04      	bgt.n	800debe <__swbuf_r+0x42>
 800deb4:	4621      	mov	r1, r4
 800deb6:	4628      	mov	r0, r5
 800deb8:	f000 f948 	bl	800e14c <_fflush_r>
 800debc:	bb30      	cbnz	r0, 800df0c <__swbuf_r+0x90>
 800debe:	68a3      	ldr	r3, [r4, #8]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	60a3      	str	r3, [r4, #8]
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	1c5a      	adds	r2, r3, #1
 800dec8:	6022      	str	r2, [r4, #0]
 800deca:	701e      	strb	r6, [r3, #0]
 800decc:	6963      	ldr	r3, [r4, #20]
 800dece:	3001      	adds	r0, #1
 800ded0:	4283      	cmp	r3, r0
 800ded2:	d004      	beq.n	800dede <__swbuf_r+0x62>
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	07db      	lsls	r3, r3, #31
 800ded8:	d506      	bpl.n	800dee8 <__swbuf_r+0x6c>
 800deda:	2e0a      	cmp	r6, #10
 800dedc:	d104      	bne.n	800dee8 <__swbuf_r+0x6c>
 800dede:	4621      	mov	r1, r4
 800dee0:	4628      	mov	r0, r5
 800dee2:	f000 f933 	bl	800e14c <_fflush_r>
 800dee6:	b988      	cbnz	r0, 800df0c <__swbuf_r+0x90>
 800dee8:	4638      	mov	r0, r7
 800deea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deec:	4b0a      	ldr	r3, [pc, #40]	; (800df18 <__swbuf_r+0x9c>)
 800deee:	429c      	cmp	r4, r3
 800def0:	d101      	bne.n	800def6 <__swbuf_r+0x7a>
 800def2:	68ac      	ldr	r4, [r5, #8]
 800def4:	e7cf      	b.n	800de96 <__swbuf_r+0x1a>
 800def6:	4b09      	ldr	r3, [pc, #36]	; (800df1c <__swbuf_r+0xa0>)
 800def8:	429c      	cmp	r4, r3
 800defa:	bf08      	it	eq
 800defc:	68ec      	ldreq	r4, [r5, #12]
 800defe:	e7ca      	b.n	800de96 <__swbuf_r+0x1a>
 800df00:	4621      	mov	r1, r4
 800df02:	4628      	mov	r0, r5
 800df04:	f000 f81e 	bl	800df44 <__swsetup_r>
 800df08:	2800      	cmp	r0, #0
 800df0a:	d0cb      	beq.n	800dea4 <__swbuf_r+0x28>
 800df0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800df10:	e7ea      	b.n	800dee8 <__swbuf_r+0x6c>
 800df12:	bf00      	nop
 800df14:	0800ef84 	.word	0x0800ef84
 800df18:	0800efa4 	.word	0x0800efa4
 800df1c:	0800ef64 	.word	0x0800ef64

0800df20 <_write_r>:
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	4d07      	ldr	r5, [pc, #28]	; (800df40 <_write_r+0x20>)
 800df24:	4604      	mov	r4, r0
 800df26:	4608      	mov	r0, r1
 800df28:	4611      	mov	r1, r2
 800df2a:	2200      	movs	r2, #0
 800df2c:	602a      	str	r2, [r5, #0]
 800df2e:	461a      	mov	r2, r3
 800df30:	f7f2 fe50 	bl	8000bd4 <_write>
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	d102      	bne.n	800df3e <_write_r+0x1e>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	b103      	cbz	r3, 800df3e <_write_r+0x1e>
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	bd38      	pop	{r3, r4, r5, pc}
 800df40:	20007e54 	.word	0x20007e54

0800df44 <__swsetup_r>:
 800df44:	4b32      	ldr	r3, [pc, #200]	; (800e010 <__swsetup_r+0xcc>)
 800df46:	b570      	push	{r4, r5, r6, lr}
 800df48:	681d      	ldr	r5, [r3, #0]
 800df4a:	4606      	mov	r6, r0
 800df4c:	460c      	mov	r4, r1
 800df4e:	b125      	cbz	r5, 800df5a <__swsetup_r+0x16>
 800df50:	69ab      	ldr	r3, [r5, #24]
 800df52:	b913      	cbnz	r3, 800df5a <__swsetup_r+0x16>
 800df54:	4628      	mov	r0, r5
 800df56:	f7ff fd0f 	bl	800d978 <__sinit>
 800df5a:	4b2e      	ldr	r3, [pc, #184]	; (800e014 <__swsetup_r+0xd0>)
 800df5c:	429c      	cmp	r4, r3
 800df5e:	d10f      	bne.n	800df80 <__swsetup_r+0x3c>
 800df60:	686c      	ldr	r4, [r5, #4]
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df68:	0719      	lsls	r1, r3, #28
 800df6a:	d42c      	bmi.n	800dfc6 <__swsetup_r+0x82>
 800df6c:	06dd      	lsls	r5, r3, #27
 800df6e:	d411      	bmi.n	800df94 <__swsetup_r+0x50>
 800df70:	2309      	movs	r3, #9
 800df72:	6033      	str	r3, [r6, #0]
 800df74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df78:	81a3      	strh	r3, [r4, #12]
 800df7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df7e:	e03e      	b.n	800dffe <__swsetup_r+0xba>
 800df80:	4b25      	ldr	r3, [pc, #148]	; (800e018 <__swsetup_r+0xd4>)
 800df82:	429c      	cmp	r4, r3
 800df84:	d101      	bne.n	800df8a <__swsetup_r+0x46>
 800df86:	68ac      	ldr	r4, [r5, #8]
 800df88:	e7eb      	b.n	800df62 <__swsetup_r+0x1e>
 800df8a:	4b24      	ldr	r3, [pc, #144]	; (800e01c <__swsetup_r+0xd8>)
 800df8c:	429c      	cmp	r4, r3
 800df8e:	bf08      	it	eq
 800df90:	68ec      	ldreq	r4, [r5, #12]
 800df92:	e7e6      	b.n	800df62 <__swsetup_r+0x1e>
 800df94:	0758      	lsls	r0, r3, #29
 800df96:	d512      	bpl.n	800dfbe <__swsetup_r+0x7a>
 800df98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df9a:	b141      	cbz	r1, 800dfae <__swsetup_r+0x6a>
 800df9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfa0:	4299      	cmp	r1, r3
 800dfa2:	d002      	beq.n	800dfaa <__swsetup_r+0x66>
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	f000 f98f 	bl	800e2c8 <_free_r>
 800dfaa:	2300      	movs	r3, #0
 800dfac:	6363      	str	r3, [r4, #52]	; 0x34
 800dfae:	89a3      	ldrh	r3, [r4, #12]
 800dfb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfb4:	81a3      	strh	r3, [r4, #12]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	6063      	str	r3, [r4, #4]
 800dfba:	6923      	ldr	r3, [r4, #16]
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	f043 0308 	orr.w	r3, r3, #8
 800dfc4:	81a3      	strh	r3, [r4, #12]
 800dfc6:	6923      	ldr	r3, [r4, #16]
 800dfc8:	b94b      	cbnz	r3, 800dfde <__swsetup_r+0x9a>
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfd4:	d003      	beq.n	800dfde <__swsetup_r+0x9a>
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	4630      	mov	r0, r6
 800dfda:	f000 f929 	bl	800e230 <__smakebuf_r>
 800dfde:	89a0      	ldrh	r0, [r4, #12]
 800dfe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfe4:	f010 0301 	ands.w	r3, r0, #1
 800dfe8:	d00a      	beq.n	800e000 <__swsetup_r+0xbc>
 800dfea:	2300      	movs	r3, #0
 800dfec:	60a3      	str	r3, [r4, #8]
 800dfee:	6963      	ldr	r3, [r4, #20]
 800dff0:	425b      	negs	r3, r3
 800dff2:	61a3      	str	r3, [r4, #24]
 800dff4:	6923      	ldr	r3, [r4, #16]
 800dff6:	b943      	cbnz	r3, 800e00a <__swsetup_r+0xc6>
 800dff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dffc:	d1ba      	bne.n	800df74 <__swsetup_r+0x30>
 800dffe:	bd70      	pop	{r4, r5, r6, pc}
 800e000:	0781      	lsls	r1, r0, #30
 800e002:	bf58      	it	pl
 800e004:	6963      	ldrpl	r3, [r4, #20]
 800e006:	60a3      	str	r3, [r4, #8]
 800e008:	e7f4      	b.n	800dff4 <__swsetup_r+0xb0>
 800e00a:	2000      	movs	r0, #0
 800e00c:	e7f7      	b.n	800dffe <__swsetup_r+0xba>
 800e00e:	bf00      	nop
 800e010:	20000048 	.word	0x20000048
 800e014:	0800ef84 	.word	0x0800ef84
 800e018:	0800efa4 	.word	0x0800efa4
 800e01c:	0800ef64 	.word	0x0800ef64

0800e020 <_close_r>:
 800e020:	b538      	push	{r3, r4, r5, lr}
 800e022:	4d06      	ldr	r5, [pc, #24]	; (800e03c <_close_r+0x1c>)
 800e024:	2300      	movs	r3, #0
 800e026:	4604      	mov	r4, r0
 800e028:	4608      	mov	r0, r1
 800e02a:	602b      	str	r3, [r5, #0]
 800e02c:	f7f3 fa3b 	bl	80014a6 <_close>
 800e030:	1c43      	adds	r3, r0, #1
 800e032:	d102      	bne.n	800e03a <_close_r+0x1a>
 800e034:	682b      	ldr	r3, [r5, #0]
 800e036:	b103      	cbz	r3, 800e03a <_close_r+0x1a>
 800e038:	6023      	str	r3, [r4, #0]
 800e03a:	bd38      	pop	{r3, r4, r5, pc}
 800e03c:	20007e54 	.word	0x20007e54

0800e040 <__sflush_r>:
 800e040:	898a      	ldrh	r2, [r1, #12]
 800e042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e046:	4605      	mov	r5, r0
 800e048:	0710      	lsls	r0, r2, #28
 800e04a:	460c      	mov	r4, r1
 800e04c:	d458      	bmi.n	800e100 <__sflush_r+0xc0>
 800e04e:	684b      	ldr	r3, [r1, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	dc05      	bgt.n	800e060 <__sflush_r+0x20>
 800e054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e056:	2b00      	cmp	r3, #0
 800e058:	dc02      	bgt.n	800e060 <__sflush_r+0x20>
 800e05a:	2000      	movs	r0, #0
 800e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e062:	2e00      	cmp	r6, #0
 800e064:	d0f9      	beq.n	800e05a <__sflush_r+0x1a>
 800e066:	2300      	movs	r3, #0
 800e068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e06c:	682f      	ldr	r7, [r5, #0]
 800e06e:	602b      	str	r3, [r5, #0]
 800e070:	d032      	beq.n	800e0d8 <__sflush_r+0x98>
 800e072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	075a      	lsls	r2, r3, #29
 800e078:	d505      	bpl.n	800e086 <__sflush_r+0x46>
 800e07a:	6863      	ldr	r3, [r4, #4]
 800e07c:	1ac0      	subs	r0, r0, r3
 800e07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e080:	b10b      	cbz	r3, 800e086 <__sflush_r+0x46>
 800e082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e084:	1ac0      	subs	r0, r0, r3
 800e086:	2300      	movs	r3, #0
 800e088:	4602      	mov	r2, r0
 800e08a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e08c:	6a21      	ldr	r1, [r4, #32]
 800e08e:	4628      	mov	r0, r5
 800e090:	47b0      	blx	r6
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	89a3      	ldrh	r3, [r4, #12]
 800e096:	d106      	bne.n	800e0a6 <__sflush_r+0x66>
 800e098:	6829      	ldr	r1, [r5, #0]
 800e09a:	291d      	cmp	r1, #29
 800e09c:	d82c      	bhi.n	800e0f8 <__sflush_r+0xb8>
 800e09e:	4a2a      	ldr	r2, [pc, #168]	; (800e148 <__sflush_r+0x108>)
 800e0a0:	40ca      	lsrs	r2, r1
 800e0a2:	07d6      	lsls	r6, r2, #31
 800e0a4:	d528      	bpl.n	800e0f8 <__sflush_r+0xb8>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	6062      	str	r2, [r4, #4]
 800e0aa:	04d9      	lsls	r1, r3, #19
 800e0ac:	6922      	ldr	r2, [r4, #16]
 800e0ae:	6022      	str	r2, [r4, #0]
 800e0b0:	d504      	bpl.n	800e0bc <__sflush_r+0x7c>
 800e0b2:	1c42      	adds	r2, r0, #1
 800e0b4:	d101      	bne.n	800e0ba <__sflush_r+0x7a>
 800e0b6:	682b      	ldr	r3, [r5, #0]
 800e0b8:	b903      	cbnz	r3, 800e0bc <__sflush_r+0x7c>
 800e0ba:	6560      	str	r0, [r4, #84]	; 0x54
 800e0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0be:	602f      	str	r7, [r5, #0]
 800e0c0:	2900      	cmp	r1, #0
 800e0c2:	d0ca      	beq.n	800e05a <__sflush_r+0x1a>
 800e0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	d002      	beq.n	800e0d2 <__sflush_r+0x92>
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	f000 f8fb 	bl	800e2c8 <_free_r>
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800e0d6:	e7c1      	b.n	800e05c <__sflush_r+0x1c>
 800e0d8:	6a21      	ldr	r1, [r4, #32]
 800e0da:	2301      	movs	r3, #1
 800e0dc:	4628      	mov	r0, r5
 800e0de:	47b0      	blx	r6
 800e0e0:	1c41      	adds	r1, r0, #1
 800e0e2:	d1c7      	bne.n	800e074 <__sflush_r+0x34>
 800e0e4:	682b      	ldr	r3, [r5, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0c4      	beq.n	800e074 <__sflush_r+0x34>
 800e0ea:	2b1d      	cmp	r3, #29
 800e0ec:	d001      	beq.n	800e0f2 <__sflush_r+0xb2>
 800e0ee:	2b16      	cmp	r3, #22
 800e0f0:	d101      	bne.n	800e0f6 <__sflush_r+0xb6>
 800e0f2:	602f      	str	r7, [r5, #0]
 800e0f4:	e7b1      	b.n	800e05a <__sflush_r+0x1a>
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0fc:	81a3      	strh	r3, [r4, #12]
 800e0fe:	e7ad      	b.n	800e05c <__sflush_r+0x1c>
 800e100:	690f      	ldr	r7, [r1, #16]
 800e102:	2f00      	cmp	r7, #0
 800e104:	d0a9      	beq.n	800e05a <__sflush_r+0x1a>
 800e106:	0793      	lsls	r3, r2, #30
 800e108:	680e      	ldr	r6, [r1, #0]
 800e10a:	bf08      	it	eq
 800e10c:	694b      	ldreq	r3, [r1, #20]
 800e10e:	600f      	str	r7, [r1, #0]
 800e110:	bf18      	it	ne
 800e112:	2300      	movne	r3, #0
 800e114:	eba6 0807 	sub.w	r8, r6, r7
 800e118:	608b      	str	r3, [r1, #8]
 800e11a:	f1b8 0f00 	cmp.w	r8, #0
 800e11e:	dd9c      	ble.n	800e05a <__sflush_r+0x1a>
 800e120:	6a21      	ldr	r1, [r4, #32]
 800e122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e124:	4643      	mov	r3, r8
 800e126:	463a      	mov	r2, r7
 800e128:	4628      	mov	r0, r5
 800e12a:	47b0      	blx	r6
 800e12c:	2800      	cmp	r0, #0
 800e12e:	dc06      	bgt.n	800e13e <__sflush_r+0xfe>
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e136:	81a3      	strh	r3, [r4, #12]
 800e138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e13c:	e78e      	b.n	800e05c <__sflush_r+0x1c>
 800e13e:	4407      	add	r7, r0
 800e140:	eba8 0800 	sub.w	r8, r8, r0
 800e144:	e7e9      	b.n	800e11a <__sflush_r+0xda>
 800e146:	bf00      	nop
 800e148:	20400001 	.word	0x20400001

0800e14c <_fflush_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	690b      	ldr	r3, [r1, #16]
 800e150:	4605      	mov	r5, r0
 800e152:	460c      	mov	r4, r1
 800e154:	b913      	cbnz	r3, 800e15c <_fflush_r+0x10>
 800e156:	2500      	movs	r5, #0
 800e158:	4628      	mov	r0, r5
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	b118      	cbz	r0, 800e166 <_fflush_r+0x1a>
 800e15e:	6983      	ldr	r3, [r0, #24]
 800e160:	b90b      	cbnz	r3, 800e166 <_fflush_r+0x1a>
 800e162:	f7ff fc09 	bl	800d978 <__sinit>
 800e166:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <_fflush_r+0x6c>)
 800e168:	429c      	cmp	r4, r3
 800e16a:	d11b      	bne.n	800e1a4 <_fflush_r+0x58>
 800e16c:	686c      	ldr	r4, [r5, #4]
 800e16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d0ef      	beq.n	800e156 <_fflush_r+0xa>
 800e176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e178:	07d0      	lsls	r0, r2, #31
 800e17a:	d404      	bmi.n	800e186 <_fflush_r+0x3a>
 800e17c:	0599      	lsls	r1, r3, #22
 800e17e:	d402      	bmi.n	800e186 <_fflush_r+0x3a>
 800e180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e182:	f7ff fcbc 	bl	800dafe <__retarget_lock_acquire_recursive>
 800e186:	4628      	mov	r0, r5
 800e188:	4621      	mov	r1, r4
 800e18a:	f7ff ff59 	bl	800e040 <__sflush_r>
 800e18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e190:	07da      	lsls	r2, r3, #31
 800e192:	4605      	mov	r5, r0
 800e194:	d4e0      	bmi.n	800e158 <_fflush_r+0xc>
 800e196:	89a3      	ldrh	r3, [r4, #12]
 800e198:	059b      	lsls	r3, r3, #22
 800e19a:	d4dd      	bmi.n	800e158 <_fflush_r+0xc>
 800e19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e19e:	f7ff fcaf 	bl	800db00 <__retarget_lock_release_recursive>
 800e1a2:	e7d9      	b.n	800e158 <_fflush_r+0xc>
 800e1a4:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <_fflush_r+0x70>)
 800e1a6:	429c      	cmp	r4, r3
 800e1a8:	d101      	bne.n	800e1ae <_fflush_r+0x62>
 800e1aa:	68ac      	ldr	r4, [r5, #8]
 800e1ac:	e7df      	b.n	800e16e <_fflush_r+0x22>
 800e1ae:	4b04      	ldr	r3, [pc, #16]	; (800e1c0 <_fflush_r+0x74>)
 800e1b0:	429c      	cmp	r4, r3
 800e1b2:	bf08      	it	eq
 800e1b4:	68ec      	ldreq	r4, [r5, #12]
 800e1b6:	e7da      	b.n	800e16e <_fflush_r+0x22>
 800e1b8:	0800ef84 	.word	0x0800ef84
 800e1bc:	0800efa4 	.word	0x0800efa4
 800e1c0:	0800ef64 	.word	0x0800ef64

0800e1c4 <_lseek_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d07      	ldr	r5, [pc, #28]	; (800e1e4 <_lseek_r+0x20>)
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	4608      	mov	r0, r1
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	602a      	str	r2, [r5, #0]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f7f3 f98e 	bl	80014f4 <_lseek>
 800e1d8:	1c43      	adds	r3, r0, #1
 800e1da:	d102      	bne.n	800e1e2 <_lseek_r+0x1e>
 800e1dc:	682b      	ldr	r3, [r5, #0]
 800e1de:	b103      	cbz	r3, 800e1e2 <_lseek_r+0x1e>
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}
 800e1e4:	20007e54 	.word	0x20007e54

0800e1e8 <__swhatbuf_r>:
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	460e      	mov	r6, r1
 800e1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1f0:	2900      	cmp	r1, #0
 800e1f2:	b096      	sub	sp, #88	; 0x58
 800e1f4:	4614      	mov	r4, r2
 800e1f6:	461d      	mov	r5, r3
 800e1f8:	da07      	bge.n	800e20a <__swhatbuf_r+0x22>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	602b      	str	r3, [r5, #0]
 800e1fe:	89b3      	ldrh	r3, [r6, #12]
 800e200:	061a      	lsls	r2, r3, #24
 800e202:	d410      	bmi.n	800e226 <__swhatbuf_r+0x3e>
 800e204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e208:	e00e      	b.n	800e228 <__swhatbuf_r+0x40>
 800e20a:	466a      	mov	r2, sp
 800e20c:	f000 fbac 	bl	800e968 <_fstat_r>
 800e210:	2800      	cmp	r0, #0
 800e212:	dbf2      	blt.n	800e1fa <__swhatbuf_r+0x12>
 800e214:	9a01      	ldr	r2, [sp, #4]
 800e216:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e21a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e21e:	425a      	negs	r2, r3
 800e220:	415a      	adcs	r2, r3
 800e222:	602a      	str	r2, [r5, #0]
 800e224:	e7ee      	b.n	800e204 <__swhatbuf_r+0x1c>
 800e226:	2340      	movs	r3, #64	; 0x40
 800e228:	2000      	movs	r0, #0
 800e22a:	6023      	str	r3, [r4, #0]
 800e22c:	b016      	add	sp, #88	; 0x58
 800e22e:	bd70      	pop	{r4, r5, r6, pc}

0800e230 <__smakebuf_r>:
 800e230:	898b      	ldrh	r3, [r1, #12]
 800e232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e234:	079d      	lsls	r5, r3, #30
 800e236:	4606      	mov	r6, r0
 800e238:	460c      	mov	r4, r1
 800e23a:	d507      	bpl.n	800e24c <__smakebuf_r+0x1c>
 800e23c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	6123      	str	r3, [r4, #16]
 800e244:	2301      	movs	r3, #1
 800e246:	6163      	str	r3, [r4, #20]
 800e248:	b002      	add	sp, #8
 800e24a:	bd70      	pop	{r4, r5, r6, pc}
 800e24c:	ab01      	add	r3, sp, #4
 800e24e:	466a      	mov	r2, sp
 800e250:	f7ff ffca 	bl	800e1e8 <__swhatbuf_r>
 800e254:	9900      	ldr	r1, [sp, #0]
 800e256:	4605      	mov	r5, r0
 800e258:	4630      	mov	r0, r6
 800e25a:	f7ff fc69 	bl	800db30 <_malloc_r>
 800e25e:	b948      	cbnz	r0, 800e274 <__smakebuf_r+0x44>
 800e260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e264:	059a      	lsls	r2, r3, #22
 800e266:	d4ef      	bmi.n	800e248 <__smakebuf_r+0x18>
 800e268:	f023 0303 	bic.w	r3, r3, #3
 800e26c:	f043 0302 	orr.w	r3, r3, #2
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	e7e3      	b.n	800e23c <__smakebuf_r+0xc>
 800e274:	4b0d      	ldr	r3, [pc, #52]	; (800e2ac <__smakebuf_r+0x7c>)
 800e276:	62b3      	str	r3, [r6, #40]	; 0x28
 800e278:	89a3      	ldrh	r3, [r4, #12]
 800e27a:	6020      	str	r0, [r4, #0]
 800e27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e280:	81a3      	strh	r3, [r4, #12]
 800e282:	9b00      	ldr	r3, [sp, #0]
 800e284:	6163      	str	r3, [r4, #20]
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	6120      	str	r0, [r4, #16]
 800e28a:	b15b      	cbz	r3, 800e2a4 <__smakebuf_r+0x74>
 800e28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e290:	4630      	mov	r0, r6
 800e292:	f000 fb7b 	bl	800e98c <_isatty_r>
 800e296:	b128      	cbz	r0, 800e2a4 <__smakebuf_r+0x74>
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	f023 0303 	bic.w	r3, r3, #3
 800e29e:	f043 0301 	orr.w	r3, r3, #1
 800e2a2:	81a3      	strh	r3, [r4, #12]
 800e2a4:	89a0      	ldrh	r0, [r4, #12]
 800e2a6:	4305      	orrs	r5, r0
 800e2a8:	81a5      	strh	r5, [r4, #12]
 800e2aa:	e7cd      	b.n	800e248 <__smakebuf_r+0x18>
 800e2ac:	0800d911 	.word	0x0800d911

0800e2b0 <__malloc_lock>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__malloc_lock+0x8>)
 800e2b2:	f7ff bc24 	b.w	800dafe <__retarget_lock_acquire_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	20007e4c 	.word	0x20007e4c

0800e2bc <__malloc_unlock>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	; (800e2c4 <__malloc_unlock+0x8>)
 800e2be:	f7ff bc1f 	b.w	800db00 <__retarget_lock_release_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	20007e4c 	.word	0x20007e4c

0800e2c8 <_free_r>:
 800e2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ca:	2900      	cmp	r1, #0
 800e2cc:	d048      	beq.n	800e360 <_free_r+0x98>
 800e2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2d2:	9001      	str	r0, [sp, #4]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f1a1 0404 	sub.w	r4, r1, #4
 800e2da:	bfb8      	it	lt
 800e2dc:	18e4      	addlt	r4, r4, r3
 800e2de:	f7ff ffe7 	bl	800e2b0 <__malloc_lock>
 800e2e2:	4a20      	ldr	r2, [pc, #128]	; (800e364 <_free_r+0x9c>)
 800e2e4:	9801      	ldr	r0, [sp, #4]
 800e2e6:	6813      	ldr	r3, [r2, #0]
 800e2e8:	4615      	mov	r5, r2
 800e2ea:	b933      	cbnz	r3, 800e2fa <_free_r+0x32>
 800e2ec:	6063      	str	r3, [r4, #4]
 800e2ee:	6014      	str	r4, [r2, #0]
 800e2f0:	b003      	add	sp, #12
 800e2f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2f6:	f7ff bfe1 	b.w	800e2bc <__malloc_unlock>
 800e2fa:	42a3      	cmp	r3, r4
 800e2fc:	d90b      	bls.n	800e316 <_free_r+0x4e>
 800e2fe:	6821      	ldr	r1, [r4, #0]
 800e300:	1862      	adds	r2, r4, r1
 800e302:	4293      	cmp	r3, r2
 800e304:	bf04      	itt	eq
 800e306:	681a      	ldreq	r2, [r3, #0]
 800e308:	685b      	ldreq	r3, [r3, #4]
 800e30a:	6063      	str	r3, [r4, #4]
 800e30c:	bf04      	itt	eq
 800e30e:	1852      	addeq	r2, r2, r1
 800e310:	6022      	streq	r2, [r4, #0]
 800e312:	602c      	str	r4, [r5, #0]
 800e314:	e7ec      	b.n	800e2f0 <_free_r+0x28>
 800e316:	461a      	mov	r2, r3
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	b10b      	cbz	r3, 800e320 <_free_r+0x58>
 800e31c:	42a3      	cmp	r3, r4
 800e31e:	d9fa      	bls.n	800e316 <_free_r+0x4e>
 800e320:	6811      	ldr	r1, [r2, #0]
 800e322:	1855      	adds	r5, r2, r1
 800e324:	42a5      	cmp	r5, r4
 800e326:	d10b      	bne.n	800e340 <_free_r+0x78>
 800e328:	6824      	ldr	r4, [r4, #0]
 800e32a:	4421      	add	r1, r4
 800e32c:	1854      	adds	r4, r2, r1
 800e32e:	42a3      	cmp	r3, r4
 800e330:	6011      	str	r1, [r2, #0]
 800e332:	d1dd      	bne.n	800e2f0 <_free_r+0x28>
 800e334:	681c      	ldr	r4, [r3, #0]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	6053      	str	r3, [r2, #4]
 800e33a:	4421      	add	r1, r4
 800e33c:	6011      	str	r1, [r2, #0]
 800e33e:	e7d7      	b.n	800e2f0 <_free_r+0x28>
 800e340:	d902      	bls.n	800e348 <_free_r+0x80>
 800e342:	230c      	movs	r3, #12
 800e344:	6003      	str	r3, [r0, #0]
 800e346:	e7d3      	b.n	800e2f0 <_free_r+0x28>
 800e348:	6825      	ldr	r5, [r4, #0]
 800e34a:	1961      	adds	r1, r4, r5
 800e34c:	428b      	cmp	r3, r1
 800e34e:	bf04      	itt	eq
 800e350:	6819      	ldreq	r1, [r3, #0]
 800e352:	685b      	ldreq	r3, [r3, #4]
 800e354:	6063      	str	r3, [r4, #4]
 800e356:	bf04      	itt	eq
 800e358:	1949      	addeq	r1, r1, r5
 800e35a:	6021      	streq	r1, [r4, #0]
 800e35c:	6054      	str	r4, [r2, #4]
 800e35e:	e7c7      	b.n	800e2f0 <_free_r+0x28>
 800e360:	b003      	add	sp, #12
 800e362:	bd30      	pop	{r4, r5, pc}
 800e364:	20005ad4 	.word	0x20005ad4

0800e368 <__sfputc_r>:
 800e368:	6893      	ldr	r3, [r2, #8]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	b410      	push	{r4}
 800e370:	6093      	str	r3, [r2, #8]
 800e372:	da08      	bge.n	800e386 <__sfputc_r+0x1e>
 800e374:	6994      	ldr	r4, [r2, #24]
 800e376:	42a3      	cmp	r3, r4
 800e378:	db01      	blt.n	800e37e <__sfputc_r+0x16>
 800e37a:	290a      	cmp	r1, #10
 800e37c:	d103      	bne.n	800e386 <__sfputc_r+0x1e>
 800e37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e382:	f7ff bd7b 	b.w	800de7c <__swbuf_r>
 800e386:	6813      	ldr	r3, [r2, #0]
 800e388:	1c58      	adds	r0, r3, #1
 800e38a:	6010      	str	r0, [r2, #0]
 800e38c:	7019      	strb	r1, [r3, #0]
 800e38e:	4608      	mov	r0, r1
 800e390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <__sfputs_r>:
 800e396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e398:	4606      	mov	r6, r0
 800e39a:	460f      	mov	r7, r1
 800e39c:	4614      	mov	r4, r2
 800e39e:	18d5      	adds	r5, r2, r3
 800e3a0:	42ac      	cmp	r4, r5
 800e3a2:	d101      	bne.n	800e3a8 <__sfputs_r+0x12>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	e007      	b.n	800e3b8 <__sfputs_r+0x22>
 800e3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ac:	463a      	mov	r2, r7
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	f7ff ffda 	bl	800e368 <__sfputc_r>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d1f3      	bne.n	800e3a0 <__sfputs_r+0xa>
 800e3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3bc <_vfiprintf_r>:
 800e3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c0:	460d      	mov	r5, r1
 800e3c2:	b09d      	sub	sp, #116	; 0x74
 800e3c4:	4614      	mov	r4, r2
 800e3c6:	4698      	mov	r8, r3
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	b118      	cbz	r0, 800e3d4 <_vfiprintf_r+0x18>
 800e3cc:	6983      	ldr	r3, [r0, #24]
 800e3ce:	b90b      	cbnz	r3, 800e3d4 <_vfiprintf_r+0x18>
 800e3d0:	f7ff fad2 	bl	800d978 <__sinit>
 800e3d4:	4b89      	ldr	r3, [pc, #548]	; (800e5fc <_vfiprintf_r+0x240>)
 800e3d6:	429d      	cmp	r5, r3
 800e3d8:	d11b      	bne.n	800e412 <_vfiprintf_r+0x56>
 800e3da:	6875      	ldr	r5, [r6, #4]
 800e3dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3de:	07d9      	lsls	r1, r3, #31
 800e3e0:	d405      	bmi.n	800e3ee <_vfiprintf_r+0x32>
 800e3e2:	89ab      	ldrh	r3, [r5, #12]
 800e3e4:	059a      	lsls	r2, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_vfiprintf_r+0x32>
 800e3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3ea:	f7ff fb88 	bl	800dafe <__retarget_lock_acquire_recursive>
 800e3ee:	89ab      	ldrh	r3, [r5, #12]
 800e3f0:	071b      	lsls	r3, r3, #28
 800e3f2:	d501      	bpl.n	800e3f8 <_vfiprintf_r+0x3c>
 800e3f4:	692b      	ldr	r3, [r5, #16]
 800e3f6:	b9eb      	cbnz	r3, 800e434 <_vfiprintf_r+0x78>
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f7ff fda2 	bl	800df44 <__swsetup_r>
 800e400:	b1c0      	cbz	r0, 800e434 <_vfiprintf_r+0x78>
 800e402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e404:	07dc      	lsls	r4, r3, #31
 800e406:	d50e      	bpl.n	800e426 <_vfiprintf_r+0x6a>
 800e408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e40c:	b01d      	add	sp, #116	; 0x74
 800e40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e412:	4b7b      	ldr	r3, [pc, #492]	; (800e600 <_vfiprintf_r+0x244>)
 800e414:	429d      	cmp	r5, r3
 800e416:	d101      	bne.n	800e41c <_vfiprintf_r+0x60>
 800e418:	68b5      	ldr	r5, [r6, #8]
 800e41a:	e7df      	b.n	800e3dc <_vfiprintf_r+0x20>
 800e41c:	4b79      	ldr	r3, [pc, #484]	; (800e604 <_vfiprintf_r+0x248>)
 800e41e:	429d      	cmp	r5, r3
 800e420:	bf08      	it	eq
 800e422:	68f5      	ldreq	r5, [r6, #12]
 800e424:	e7da      	b.n	800e3dc <_vfiprintf_r+0x20>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	0598      	lsls	r0, r3, #22
 800e42a:	d4ed      	bmi.n	800e408 <_vfiprintf_r+0x4c>
 800e42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e42e:	f7ff fb67 	bl	800db00 <__retarget_lock_release_recursive>
 800e432:	e7e9      	b.n	800e408 <_vfiprintf_r+0x4c>
 800e434:	2300      	movs	r3, #0
 800e436:	9309      	str	r3, [sp, #36]	; 0x24
 800e438:	2320      	movs	r3, #32
 800e43a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e442:	2330      	movs	r3, #48	; 0x30
 800e444:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e608 <_vfiprintf_r+0x24c>
 800e448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e44c:	f04f 0901 	mov.w	r9, #1
 800e450:	4623      	mov	r3, r4
 800e452:	469a      	mov	sl, r3
 800e454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e458:	b10a      	cbz	r2, 800e45e <_vfiprintf_r+0xa2>
 800e45a:	2a25      	cmp	r2, #37	; 0x25
 800e45c:	d1f9      	bne.n	800e452 <_vfiprintf_r+0x96>
 800e45e:	ebba 0b04 	subs.w	fp, sl, r4
 800e462:	d00b      	beq.n	800e47c <_vfiprintf_r+0xc0>
 800e464:	465b      	mov	r3, fp
 800e466:	4622      	mov	r2, r4
 800e468:	4629      	mov	r1, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ff93 	bl	800e396 <__sfputs_r>
 800e470:	3001      	adds	r0, #1
 800e472:	f000 80aa 	beq.w	800e5ca <_vfiprintf_r+0x20e>
 800e476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e478:	445a      	add	r2, fp
 800e47a:	9209      	str	r2, [sp, #36]	; 0x24
 800e47c:	f89a 3000 	ldrb.w	r3, [sl]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 80a2 	beq.w	800e5ca <_vfiprintf_r+0x20e>
 800e486:	2300      	movs	r3, #0
 800e488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e490:	f10a 0a01 	add.w	sl, sl, #1
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e49c:	931a      	str	r3, [sp, #104]	; 0x68
 800e49e:	4654      	mov	r4, sl
 800e4a0:	2205      	movs	r2, #5
 800e4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a6:	4858      	ldr	r0, [pc, #352]	; (800e608 <_vfiprintf_r+0x24c>)
 800e4a8:	f7f1 fe9a 	bl	80001e0 <memchr>
 800e4ac:	9a04      	ldr	r2, [sp, #16]
 800e4ae:	b9d8      	cbnz	r0, 800e4e8 <_vfiprintf_r+0x12c>
 800e4b0:	06d1      	lsls	r1, r2, #27
 800e4b2:	bf44      	itt	mi
 800e4b4:	2320      	movmi	r3, #32
 800e4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4ba:	0713      	lsls	r3, r2, #28
 800e4bc:	bf44      	itt	mi
 800e4be:	232b      	movmi	r3, #43	; 0x2b
 800e4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ca:	d015      	beq.n	800e4f8 <_vfiprintf_r+0x13c>
 800e4cc:	9a07      	ldr	r2, [sp, #28]
 800e4ce:	4654      	mov	r4, sl
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	f04f 0c0a 	mov.w	ip, #10
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4dc:	3b30      	subs	r3, #48	; 0x30
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d94e      	bls.n	800e580 <_vfiprintf_r+0x1c4>
 800e4e2:	b1b0      	cbz	r0, 800e512 <_vfiprintf_r+0x156>
 800e4e4:	9207      	str	r2, [sp, #28]
 800e4e6:	e014      	b.n	800e512 <_vfiprintf_r+0x156>
 800e4e8:	eba0 0308 	sub.w	r3, r0, r8
 800e4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	9304      	str	r3, [sp, #16]
 800e4f4:	46a2      	mov	sl, r4
 800e4f6:	e7d2      	b.n	800e49e <_vfiprintf_r+0xe2>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	1d19      	adds	r1, r3, #4
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	9103      	str	r1, [sp, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	bfbb      	ittet	lt
 800e504:	425b      	neglt	r3, r3
 800e506:	f042 0202 	orrlt.w	r2, r2, #2
 800e50a:	9307      	strge	r3, [sp, #28]
 800e50c:	9307      	strlt	r3, [sp, #28]
 800e50e:	bfb8      	it	lt
 800e510:	9204      	strlt	r2, [sp, #16]
 800e512:	7823      	ldrb	r3, [r4, #0]
 800e514:	2b2e      	cmp	r3, #46	; 0x2e
 800e516:	d10c      	bne.n	800e532 <_vfiprintf_r+0x176>
 800e518:	7863      	ldrb	r3, [r4, #1]
 800e51a:	2b2a      	cmp	r3, #42	; 0x2a
 800e51c:	d135      	bne.n	800e58a <_vfiprintf_r+0x1ce>
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	1d1a      	adds	r2, r3, #4
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	9203      	str	r2, [sp, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	bfb8      	it	lt
 800e52a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e52e:	3402      	adds	r4, #2
 800e530:	9305      	str	r3, [sp, #20]
 800e532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e618 <_vfiprintf_r+0x25c>
 800e536:	7821      	ldrb	r1, [r4, #0]
 800e538:	2203      	movs	r2, #3
 800e53a:	4650      	mov	r0, sl
 800e53c:	f7f1 fe50 	bl	80001e0 <memchr>
 800e540:	b140      	cbz	r0, 800e554 <_vfiprintf_r+0x198>
 800e542:	2340      	movs	r3, #64	; 0x40
 800e544:	eba0 000a 	sub.w	r0, r0, sl
 800e548:	fa03 f000 	lsl.w	r0, r3, r0
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	4303      	orrs	r3, r0
 800e550:	3401      	adds	r4, #1
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e558:	482c      	ldr	r0, [pc, #176]	; (800e60c <_vfiprintf_r+0x250>)
 800e55a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e55e:	2206      	movs	r2, #6
 800e560:	f7f1 fe3e 	bl	80001e0 <memchr>
 800e564:	2800      	cmp	r0, #0
 800e566:	d03f      	beq.n	800e5e8 <_vfiprintf_r+0x22c>
 800e568:	4b29      	ldr	r3, [pc, #164]	; (800e610 <_vfiprintf_r+0x254>)
 800e56a:	bb1b      	cbnz	r3, 800e5b4 <_vfiprintf_r+0x1f8>
 800e56c:	9b03      	ldr	r3, [sp, #12]
 800e56e:	3307      	adds	r3, #7
 800e570:	f023 0307 	bic.w	r3, r3, #7
 800e574:	3308      	adds	r3, #8
 800e576:	9303      	str	r3, [sp, #12]
 800e578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57a:	443b      	add	r3, r7
 800e57c:	9309      	str	r3, [sp, #36]	; 0x24
 800e57e:	e767      	b.n	800e450 <_vfiprintf_r+0x94>
 800e580:	fb0c 3202 	mla	r2, ip, r2, r3
 800e584:	460c      	mov	r4, r1
 800e586:	2001      	movs	r0, #1
 800e588:	e7a5      	b.n	800e4d6 <_vfiprintf_r+0x11a>
 800e58a:	2300      	movs	r3, #0
 800e58c:	3401      	adds	r4, #1
 800e58e:	9305      	str	r3, [sp, #20]
 800e590:	4619      	mov	r1, r3
 800e592:	f04f 0c0a 	mov.w	ip, #10
 800e596:	4620      	mov	r0, r4
 800e598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59c:	3a30      	subs	r2, #48	; 0x30
 800e59e:	2a09      	cmp	r2, #9
 800e5a0:	d903      	bls.n	800e5aa <_vfiprintf_r+0x1ee>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0c5      	beq.n	800e532 <_vfiprintf_r+0x176>
 800e5a6:	9105      	str	r1, [sp, #20]
 800e5a8:	e7c3      	b.n	800e532 <_vfiprintf_r+0x176>
 800e5aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e7f0      	b.n	800e596 <_vfiprintf_r+0x1da>
 800e5b4:	ab03      	add	r3, sp, #12
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4b16      	ldr	r3, [pc, #88]	; (800e614 <_vfiprintf_r+0x258>)
 800e5bc:	a904      	add	r1, sp, #16
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f3af 8000 	nop.w
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	1c78      	adds	r0, r7, #1
 800e5c8:	d1d6      	bne.n	800e578 <_vfiprintf_r+0x1bc>
 800e5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5cc:	07d9      	lsls	r1, r3, #31
 800e5ce:	d405      	bmi.n	800e5dc <_vfiprintf_r+0x220>
 800e5d0:	89ab      	ldrh	r3, [r5, #12]
 800e5d2:	059a      	lsls	r2, r3, #22
 800e5d4:	d402      	bmi.n	800e5dc <_vfiprintf_r+0x220>
 800e5d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d8:	f7ff fa92 	bl	800db00 <__retarget_lock_release_recursive>
 800e5dc:	89ab      	ldrh	r3, [r5, #12]
 800e5de:	065b      	lsls	r3, r3, #25
 800e5e0:	f53f af12 	bmi.w	800e408 <_vfiprintf_r+0x4c>
 800e5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e6:	e711      	b.n	800e40c <_vfiprintf_r+0x50>
 800e5e8:	ab03      	add	r3, sp, #12
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	462a      	mov	r2, r5
 800e5ee:	4b09      	ldr	r3, [pc, #36]	; (800e614 <_vfiprintf_r+0x258>)
 800e5f0:	a904      	add	r1, sp, #16
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f000 f880 	bl	800e6f8 <_printf_i>
 800e5f8:	e7e4      	b.n	800e5c4 <_vfiprintf_r+0x208>
 800e5fa:	bf00      	nop
 800e5fc:	0800ef84 	.word	0x0800ef84
 800e600:	0800efa4 	.word	0x0800efa4
 800e604:	0800ef64 	.word	0x0800ef64
 800e608:	0800efc8 	.word	0x0800efc8
 800e60c:	0800efd2 	.word	0x0800efd2
 800e610:	00000000 	.word	0x00000000
 800e614:	0800e397 	.word	0x0800e397
 800e618:	0800efce 	.word	0x0800efce

0800e61c <_printf_common>:
 800e61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e620:	4616      	mov	r6, r2
 800e622:	4699      	mov	r9, r3
 800e624:	688a      	ldr	r2, [r1, #8]
 800e626:	690b      	ldr	r3, [r1, #16]
 800e628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e62c:	4293      	cmp	r3, r2
 800e62e:	bfb8      	it	lt
 800e630:	4613      	movlt	r3, r2
 800e632:	6033      	str	r3, [r6, #0]
 800e634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e638:	4607      	mov	r7, r0
 800e63a:	460c      	mov	r4, r1
 800e63c:	b10a      	cbz	r2, 800e642 <_printf_common+0x26>
 800e63e:	3301      	adds	r3, #1
 800e640:	6033      	str	r3, [r6, #0]
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	0699      	lsls	r1, r3, #26
 800e646:	bf42      	ittt	mi
 800e648:	6833      	ldrmi	r3, [r6, #0]
 800e64a:	3302      	addmi	r3, #2
 800e64c:	6033      	strmi	r3, [r6, #0]
 800e64e:	6825      	ldr	r5, [r4, #0]
 800e650:	f015 0506 	ands.w	r5, r5, #6
 800e654:	d106      	bne.n	800e664 <_printf_common+0x48>
 800e656:	f104 0a19 	add.w	sl, r4, #25
 800e65a:	68e3      	ldr	r3, [r4, #12]
 800e65c:	6832      	ldr	r2, [r6, #0]
 800e65e:	1a9b      	subs	r3, r3, r2
 800e660:	42ab      	cmp	r3, r5
 800e662:	dc26      	bgt.n	800e6b2 <_printf_common+0x96>
 800e664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e668:	1e13      	subs	r3, r2, #0
 800e66a:	6822      	ldr	r2, [r4, #0]
 800e66c:	bf18      	it	ne
 800e66e:	2301      	movne	r3, #1
 800e670:	0692      	lsls	r2, r2, #26
 800e672:	d42b      	bmi.n	800e6cc <_printf_common+0xb0>
 800e674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e678:	4649      	mov	r1, r9
 800e67a:	4638      	mov	r0, r7
 800e67c:	47c0      	blx	r8
 800e67e:	3001      	adds	r0, #1
 800e680:	d01e      	beq.n	800e6c0 <_printf_common+0xa4>
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	68e5      	ldr	r5, [r4, #12]
 800e686:	6832      	ldr	r2, [r6, #0]
 800e688:	f003 0306 	and.w	r3, r3, #6
 800e68c:	2b04      	cmp	r3, #4
 800e68e:	bf08      	it	eq
 800e690:	1aad      	subeq	r5, r5, r2
 800e692:	68a3      	ldr	r3, [r4, #8]
 800e694:	6922      	ldr	r2, [r4, #16]
 800e696:	bf0c      	ite	eq
 800e698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e69c:	2500      	movne	r5, #0
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	bfc4      	itt	gt
 800e6a2:	1a9b      	subgt	r3, r3, r2
 800e6a4:	18ed      	addgt	r5, r5, r3
 800e6a6:	2600      	movs	r6, #0
 800e6a8:	341a      	adds	r4, #26
 800e6aa:	42b5      	cmp	r5, r6
 800e6ac:	d11a      	bne.n	800e6e4 <_printf_common+0xc8>
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	e008      	b.n	800e6c4 <_printf_common+0xa8>
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	4652      	mov	r2, sl
 800e6b6:	4649      	mov	r1, r9
 800e6b8:	4638      	mov	r0, r7
 800e6ba:	47c0      	blx	r8
 800e6bc:	3001      	adds	r0, #1
 800e6be:	d103      	bne.n	800e6c8 <_printf_common+0xac>
 800e6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c8:	3501      	adds	r5, #1
 800e6ca:	e7c6      	b.n	800e65a <_printf_common+0x3e>
 800e6cc:	18e1      	adds	r1, r4, r3
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	2030      	movs	r0, #48	; 0x30
 800e6d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6d6:	4422      	add	r2, r4
 800e6d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6e0:	3302      	adds	r3, #2
 800e6e2:	e7c7      	b.n	800e674 <_printf_common+0x58>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	4622      	mov	r2, r4
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	47c0      	blx	r8
 800e6ee:	3001      	adds	r0, #1
 800e6f0:	d0e6      	beq.n	800e6c0 <_printf_common+0xa4>
 800e6f2:	3601      	adds	r6, #1
 800e6f4:	e7d9      	b.n	800e6aa <_printf_common+0x8e>
	...

0800e6f8 <_printf_i>:
 800e6f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6fc:	460c      	mov	r4, r1
 800e6fe:	4691      	mov	r9, r2
 800e700:	7e27      	ldrb	r7, [r4, #24]
 800e702:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e704:	2f78      	cmp	r7, #120	; 0x78
 800e706:	4680      	mov	r8, r0
 800e708:	469a      	mov	sl, r3
 800e70a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e70e:	d807      	bhi.n	800e720 <_printf_i+0x28>
 800e710:	2f62      	cmp	r7, #98	; 0x62
 800e712:	d80a      	bhi.n	800e72a <_printf_i+0x32>
 800e714:	2f00      	cmp	r7, #0
 800e716:	f000 80d8 	beq.w	800e8ca <_printf_i+0x1d2>
 800e71a:	2f58      	cmp	r7, #88	; 0x58
 800e71c:	f000 80a3 	beq.w	800e866 <_printf_i+0x16e>
 800e720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e728:	e03a      	b.n	800e7a0 <_printf_i+0xa8>
 800e72a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e72e:	2b15      	cmp	r3, #21
 800e730:	d8f6      	bhi.n	800e720 <_printf_i+0x28>
 800e732:	a001      	add	r0, pc, #4	; (adr r0, 800e738 <_printf_i+0x40>)
 800e734:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e738:	0800e791 	.word	0x0800e791
 800e73c:	0800e7a5 	.word	0x0800e7a5
 800e740:	0800e721 	.word	0x0800e721
 800e744:	0800e721 	.word	0x0800e721
 800e748:	0800e721 	.word	0x0800e721
 800e74c:	0800e721 	.word	0x0800e721
 800e750:	0800e7a5 	.word	0x0800e7a5
 800e754:	0800e721 	.word	0x0800e721
 800e758:	0800e721 	.word	0x0800e721
 800e75c:	0800e721 	.word	0x0800e721
 800e760:	0800e721 	.word	0x0800e721
 800e764:	0800e8b1 	.word	0x0800e8b1
 800e768:	0800e7d5 	.word	0x0800e7d5
 800e76c:	0800e893 	.word	0x0800e893
 800e770:	0800e721 	.word	0x0800e721
 800e774:	0800e721 	.word	0x0800e721
 800e778:	0800e8d3 	.word	0x0800e8d3
 800e77c:	0800e721 	.word	0x0800e721
 800e780:	0800e7d5 	.word	0x0800e7d5
 800e784:	0800e721 	.word	0x0800e721
 800e788:	0800e721 	.word	0x0800e721
 800e78c:	0800e89b 	.word	0x0800e89b
 800e790:	680b      	ldr	r3, [r1, #0]
 800e792:	1d1a      	adds	r2, r3, #4
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	600a      	str	r2, [r1, #0]
 800e798:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e79c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e0a3      	b.n	800e8ec <_printf_i+0x1f4>
 800e7a4:	6825      	ldr	r5, [r4, #0]
 800e7a6:	6808      	ldr	r0, [r1, #0]
 800e7a8:	062e      	lsls	r6, r5, #24
 800e7aa:	f100 0304 	add.w	r3, r0, #4
 800e7ae:	d50a      	bpl.n	800e7c6 <_printf_i+0xce>
 800e7b0:	6805      	ldr	r5, [r0, #0]
 800e7b2:	600b      	str	r3, [r1, #0]
 800e7b4:	2d00      	cmp	r5, #0
 800e7b6:	da03      	bge.n	800e7c0 <_printf_i+0xc8>
 800e7b8:	232d      	movs	r3, #45	; 0x2d
 800e7ba:	426d      	negs	r5, r5
 800e7bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7c0:	485e      	ldr	r0, [pc, #376]	; (800e93c <_printf_i+0x244>)
 800e7c2:	230a      	movs	r3, #10
 800e7c4:	e019      	b.n	800e7fa <_printf_i+0x102>
 800e7c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e7ca:	6805      	ldr	r5, [r0, #0]
 800e7cc:	600b      	str	r3, [r1, #0]
 800e7ce:	bf18      	it	ne
 800e7d0:	b22d      	sxthne	r5, r5
 800e7d2:	e7ef      	b.n	800e7b4 <_printf_i+0xbc>
 800e7d4:	680b      	ldr	r3, [r1, #0]
 800e7d6:	6825      	ldr	r5, [r4, #0]
 800e7d8:	1d18      	adds	r0, r3, #4
 800e7da:	6008      	str	r0, [r1, #0]
 800e7dc:	0628      	lsls	r0, r5, #24
 800e7de:	d501      	bpl.n	800e7e4 <_printf_i+0xec>
 800e7e0:	681d      	ldr	r5, [r3, #0]
 800e7e2:	e002      	b.n	800e7ea <_printf_i+0xf2>
 800e7e4:	0669      	lsls	r1, r5, #25
 800e7e6:	d5fb      	bpl.n	800e7e0 <_printf_i+0xe8>
 800e7e8:	881d      	ldrh	r5, [r3, #0]
 800e7ea:	4854      	ldr	r0, [pc, #336]	; (800e93c <_printf_i+0x244>)
 800e7ec:	2f6f      	cmp	r7, #111	; 0x6f
 800e7ee:	bf0c      	ite	eq
 800e7f0:	2308      	moveq	r3, #8
 800e7f2:	230a      	movne	r3, #10
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7fa:	6866      	ldr	r6, [r4, #4]
 800e7fc:	60a6      	str	r6, [r4, #8]
 800e7fe:	2e00      	cmp	r6, #0
 800e800:	bfa2      	ittt	ge
 800e802:	6821      	ldrge	r1, [r4, #0]
 800e804:	f021 0104 	bicge.w	r1, r1, #4
 800e808:	6021      	strge	r1, [r4, #0]
 800e80a:	b90d      	cbnz	r5, 800e810 <_printf_i+0x118>
 800e80c:	2e00      	cmp	r6, #0
 800e80e:	d04d      	beq.n	800e8ac <_printf_i+0x1b4>
 800e810:	4616      	mov	r6, r2
 800e812:	fbb5 f1f3 	udiv	r1, r5, r3
 800e816:	fb03 5711 	mls	r7, r3, r1, r5
 800e81a:	5dc7      	ldrb	r7, [r0, r7]
 800e81c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e820:	462f      	mov	r7, r5
 800e822:	42bb      	cmp	r3, r7
 800e824:	460d      	mov	r5, r1
 800e826:	d9f4      	bls.n	800e812 <_printf_i+0x11a>
 800e828:	2b08      	cmp	r3, #8
 800e82a:	d10b      	bne.n	800e844 <_printf_i+0x14c>
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	07df      	lsls	r7, r3, #31
 800e830:	d508      	bpl.n	800e844 <_printf_i+0x14c>
 800e832:	6923      	ldr	r3, [r4, #16]
 800e834:	6861      	ldr	r1, [r4, #4]
 800e836:	4299      	cmp	r1, r3
 800e838:	bfde      	ittt	le
 800e83a:	2330      	movle	r3, #48	; 0x30
 800e83c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e840:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800e844:	1b92      	subs	r2, r2, r6
 800e846:	6122      	str	r2, [r4, #16]
 800e848:	f8cd a000 	str.w	sl, [sp]
 800e84c:	464b      	mov	r3, r9
 800e84e:	aa03      	add	r2, sp, #12
 800e850:	4621      	mov	r1, r4
 800e852:	4640      	mov	r0, r8
 800e854:	f7ff fee2 	bl	800e61c <_printf_common>
 800e858:	3001      	adds	r0, #1
 800e85a:	d14c      	bne.n	800e8f6 <_printf_i+0x1fe>
 800e85c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e860:	b004      	add	sp, #16
 800e862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e866:	4835      	ldr	r0, [pc, #212]	; (800e93c <_printf_i+0x244>)
 800e868:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e86c:	6823      	ldr	r3, [r4, #0]
 800e86e:	680e      	ldr	r6, [r1, #0]
 800e870:	061f      	lsls	r7, r3, #24
 800e872:	f856 5b04 	ldr.w	r5, [r6], #4
 800e876:	600e      	str	r6, [r1, #0]
 800e878:	d514      	bpl.n	800e8a4 <_printf_i+0x1ac>
 800e87a:	07d9      	lsls	r1, r3, #31
 800e87c:	bf44      	itt	mi
 800e87e:	f043 0320 	orrmi.w	r3, r3, #32
 800e882:	6023      	strmi	r3, [r4, #0]
 800e884:	b91d      	cbnz	r5, 800e88e <_printf_i+0x196>
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	f023 0320 	bic.w	r3, r3, #32
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	2310      	movs	r3, #16
 800e890:	e7b0      	b.n	800e7f4 <_printf_i+0xfc>
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	f043 0320 	orr.w	r3, r3, #32
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	2378      	movs	r3, #120	; 0x78
 800e89c:	4828      	ldr	r0, [pc, #160]	; (800e940 <_printf_i+0x248>)
 800e89e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e8a2:	e7e3      	b.n	800e86c <_printf_i+0x174>
 800e8a4:	065e      	lsls	r6, r3, #25
 800e8a6:	bf48      	it	mi
 800e8a8:	b2ad      	uxthmi	r5, r5
 800e8aa:	e7e6      	b.n	800e87a <_printf_i+0x182>
 800e8ac:	4616      	mov	r6, r2
 800e8ae:	e7bb      	b.n	800e828 <_printf_i+0x130>
 800e8b0:	680b      	ldr	r3, [r1, #0]
 800e8b2:	6826      	ldr	r6, [r4, #0]
 800e8b4:	6960      	ldr	r0, [r4, #20]
 800e8b6:	1d1d      	adds	r5, r3, #4
 800e8b8:	600d      	str	r5, [r1, #0]
 800e8ba:	0635      	lsls	r5, r6, #24
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	d501      	bpl.n	800e8c4 <_printf_i+0x1cc>
 800e8c0:	6018      	str	r0, [r3, #0]
 800e8c2:	e002      	b.n	800e8ca <_printf_i+0x1d2>
 800e8c4:	0671      	lsls	r1, r6, #25
 800e8c6:	d5fb      	bpl.n	800e8c0 <_printf_i+0x1c8>
 800e8c8:	8018      	strh	r0, [r3, #0]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6123      	str	r3, [r4, #16]
 800e8ce:	4616      	mov	r6, r2
 800e8d0:	e7ba      	b.n	800e848 <_printf_i+0x150>
 800e8d2:	680b      	ldr	r3, [r1, #0]
 800e8d4:	1d1a      	adds	r2, r3, #4
 800e8d6:	600a      	str	r2, [r1, #0]
 800e8d8:	681e      	ldr	r6, [r3, #0]
 800e8da:	6862      	ldr	r2, [r4, #4]
 800e8dc:	2100      	movs	r1, #0
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f7f1 fc7e 	bl	80001e0 <memchr>
 800e8e4:	b108      	cbz	r0, 800e8ea <_printf_i+0x1f2>
 800e8e6:	1b80      	subs	r0, r0, r6
 800e8e8:	6060      	str	r0, [r4, #4]
 800e8ea:	6863      	ldr	r3, [r4, #4]
 800e8ec:	6123      	str	r3, [r4, #16]
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8f4:	e7a8      	b.n	800e848 <_printf_i+0x150>
 800e8f6:	6923      	ldr	r3, [r4, #16]
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	4649      	mov	r1, r9
 800e8fc:	4640      	mov	r0, r8
 800e8fe:	47d0      	blx	sl
 800e900:	3001      	adds	r0, #1
 800e902:	d0ab      	beq.n	800e85c <_printf_i+0x164>
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	079b      	lsls	r3, r3, #30
 800e908:	d413      	bmi.n	800e932 <_printf_i+0x23a>
 800e90a:	68e0      	ldr	r0, [r4, #12]
 800e90c:	9b03      	ldr	r3, [sp, #12]
 800e90e:	4298      	cmp	r0, r3
 800e910:	bfb8      	it	lt
 800e912:	4618      	movlt	r0, r3
 800e914:	e7a4      	b.n	800e860 <_printf_i+0x168>
 800e916:	2301      	movs	r3, #1
 800e918:	4632      	mov	r2, r6
 800e91a:	4649      	mov	r1, r9
 800e91c:	4640      	mov	r0, r8
 800e91e:	47d0      	blx	sl
 800e920:	3001      	adds	r0, #1
 800e922:	d09b      	beq.n	800e85c <_printf_i+0x164>
 800e924:	3501      	adds	r5, #1
 800e926:	68e3      	ldr	r3, [r4, #12]
 800e928:	9903      	ldr	r1, [sp, #12]
 800e92a:	1a5b      	subs	r3, r3, r1
 800e92c:	42ab      	cmp	r3, r5
 800e92e:	dcf2      	bgt.n	800e916 <_printf_i+0x21e>
 800e930:	e7eb      	b.n	800e90a <_printf_i+0x212>
 800e932:	2500      	movs	r5, #0
 800e934:	f104 0619 	add.w	r6, r4, #25
 800e938:	e7f5      	b.n	800e926 <_printf_i+0x22e>
 800e93a:	bf00      	nop
 800e93c:	0800efd9 	.word	0x0800efd9
 800e940:	0800efea 	.word	0x0800efea

0800e944 <_read_r>:
 800e944:	b538      	push	{r3, r4, r5, lr}
 800e946:	4d07      	ldr	r5, [pc, #28]	; (800e964 <_read_r+0x20>)
 800e948:	4604      	mov	r4, r0
 800e94a:	4608      	mov	r0, r1
 800e94c:	4611      	mov	r1, r2
 800e94e:	2200      	movs	r2, #0
 800e950:	602a      	str	r2, [r5, #0]
 800e952:	461a      	mov	r2, r3
 800e954:	f7f2 fd8a 	bl	800146c <_read>
 800e958:	1c43      	adds	r3, r0, #1
 800e95a:	d102      	bne.n	800e962 <_read_r+0x1e>
 800e95c:	682b      	ldr	r3, [r5, #0]
 800e95e:	b103      	cbz	r3, 800e962 <_read_r+0x1e>
 800e960:	6023      	str	r3, [r4, #0]
 800e962:	bd38      	pop	{r3, r4, r5, pc}
 800e964:	20007e54 	.word	0x20007e54

0800e968 <_fstat_r>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	4d07      	ldr	r5, [pc, #28]	; (800e988 <_fstat_r+0x20>)
 800e96c:	2300      	movs	r3, #0
 800e96e:	4604      	mov	r4, r0
 800e970:	4608      	mov	r0, r1
 800e972:	4611      	mov	r1, r2
 800e974:	602b      	str	r3, [r5, #0]
 800e976:	f7f2 fda2 	bl	80014be <_fstat>
 800e97a:	1c43      	adds	r3, r0, #1
 800e97c:	d102      	bne.n	800e984 <_fstat_r+0x1c>
 800e97e:	682b      	ldr	r3, [r5, #0]
 800e980:	b103      	cbz	r3, 800e984 <_fstat_r+0x1c>
 800e982:	6023      	str	r3, [r4, #0]
 800e984:	bd38      	pop	{r3, r4, r5, pc}
 800e986:	bf00      	nop
 800e988:	20007e54 	.word	0x20007e54

0800e98c <_isatty_r>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	4d06      	ldr	r5, [pc, #24]	; (800e9a8 <_isatty_r+0x1c>)
 800e990:	2300      	movs	r3, #0
 800e992:	4604      	mov	r4, r0
 800e994:	4608      	mov	r0, r1
 800e996:	602b      	str	r3, [r5, #0]
 800e998:	f7f2 fda1 	bl	80014de <_isatty>
 800e99c:	1c43      	adds	r3, r0, #1
 800e99e:	d102      	bne.n	800e9a6 <_isatty_r+0x1a>
 800e9a0:	682b      	ldr	r3, [r5, #0]
 800e9a2:	b103      	cbz	r3, 800e9a6 <_isatty_r+0x1a>
 800e9a4:	6023      	str	r3, [r4, #0]
 800e9a6:	bd38      	pop	{r3, r4, r5, pc}
 800e9a8:	20007e54 	.word	0x20007e54

0800e9ac <_init>:
 800e9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ae:	bf00      	nop
 800e9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9b2:	bc08      	pop	{r3}
 800e9b4:	469e      	mov	lr, r3
 800e9b6:	4770      	bx	lr

0800e9b8 <_fini>:
 800e9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ba:	bf00      	nop
 800e9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9be:	bc08      	pop	{r3}
 800e9c0:	469e      	mov	lr, r3
 800e9c2:	4770      	bx	lr
