
FreeRTOS_Queue_Mutex_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006018  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e8  080062e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080062e8  080062e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062e8  080062e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080062f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002034  20000074  08006364  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a8  08006364  000220a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d1b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354f  00000000  00000000  00034db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00038308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  000396d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abfc  00000000  00000000  0003a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014812  00000000  00000000  0005554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a6e  00000000  00000000  00069d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001007cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a0  00000000  00000000  0010081c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006110 	.word	0x08006110

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006110 	.word	0x08006110

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000190:	f003 0301 	and.w	r3, r3, #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	d013      	beq.n	80001c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000198:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800019c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d00b      	beq.n	80001c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001a8:	e000      	b.n	80001ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80001aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d0f9      	beq.n	80001aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ba:	687a      	ldr	r2, [r7, #4]
 80001bc:	b2d2      	uxtb	r2, r2
 80001be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80001c0:	687b      	ldr	r3, [r7, #4]
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	370c      	adds	r7, #12
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <_write>:
void Start_Print_Task(void const *argument);
void Start_ON_Task(void const *argument);
void Start_OFF_Task(void const *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	60b9      	str	r1, [r7, #8]
 80001d6:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2332      	movs	r3, #50	; 0x32
 80001de:	68b9      	ldr	r1, [r7, #8]
 80001e0:	480c      	ldr	r0, [pc, #48]	; (8000214 <_write+0x48>)
 80001e2:	f002 fb1e 	bl	8002822 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]
 80001ea:	e009      	b.n	8000200 <_write+0x34>
		ITM_SendChar(*ptr++);
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	1c5a      	adds	r2, r3, #1
 80001f0:	60ba      	str	r2, [r7, #8]
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffc3 	bl	8000180 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	3301      	adds	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
 8000200:	697a      	ldr	r2, [r7, #20]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	429a      	cmp	r2, r3
 8000206:	dbf1      	blt.n	80001ec <_write+0x20>
	}
	return len;
 8000208:	687b      	ldr	r3, [r7, #4]
}
 800020a:	4618      	mov	r0, r3
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000358 	.word	0x20000358

08000218 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b09c      	sub	sp, #112	; 0x70
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800021e:	f000 fc61 	bl	8000ae4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000222:	f000 f86f 	bl	8000304 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000226:	f000 f93f 	bl	80004a8 <MX_GPIO_Init>
	MX_RTC_Init();
 800022a:	f000 f8c9 	bl	80003c0 <MX_RTC_Init>
	MX_USART1_UART_Init();
 800022e:	f000 f911 	bl	8000454 <MX_USART1_UART_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of myMutex */
	osMutexStaticDef(myMutex, &myMutexControlBlock);
 8000232:	2300      	movs	r3, #0
 8000234:	66bb      	str	r3, [r7, #104]	; 0x68
 8000236:	4b29      	ldr	r3, [pc, #164]	; (80002dc <main+0xc4>)
 8000238:	66fb      	str	r3, [r7, #108]	; 0x6c
	myMutexHandle = osMutexCreate(osMutex(myMutex));
 800023a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fcd8 	bl	8002bf4 <osMutexCreate>
 8000244:	4603      	mov	r3, r0
 8000246:	4a26      	ldr	r2, [pc, #152]	; (80002e0 <main+0xc8>)
 8000248:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue */
	osMessageQStaticDef(myQueue, 16, Zerg, myQueueBuffer, &myQueueControlBlock);
 800024a:	4b26      	ldr	r3, [pc, #152]	; (80002e4 <main+0xcc>)
 800024c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);
 8000256:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f002 fce1 	bl	8002c24 <osMessageCreate>
 8000262:	4603      	mov	r3, r0
 8000264:	4a20      	ldr	r2, [pc, #128]	; (80002e8 <main+0xd0>)
 8000266:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Print_Task */
	osThreadStaticDef(Print_Task, Start_Print_Task, osPriorityNormal, 0, 256,
 8000268:	4b20      	ldr	r3, [pc, #128]	; (80002ec <main+0xd4>)
 800026a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800026e:	461d      	mov	r5, r3
 8000270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			Print_TaskBuffer, &Print_TaskControlBlock);
	Print_TaskHandle = osThreadCreate(osThread(Print_Task), NULL);
 800027c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fc56 	bl	8002b34 <osThreadCreate>
 8000288:	4603      	mov	r3, r0
 800028a:	4a19      	ldr	r2, [pc, #100]	; (80002f0 <main+0xd8>)
 800028c:	6013      	str	r3, [r2, #0]

	/* definition and creation of my_ON_Task */
	osThreadStaticDef(my_ON_Task, Start_ON_Task, osPriorityNormal, 0, 256,
 800028e:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <main+0xdc>)
 8000290:	f107 0420 	add.w	r4, r7, #32
 8000294:	461d      	mov	r5, r3
 8000296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800029a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800029e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			my_ON_TaskBuffer, &my_ON_TaskControlBlock);
	my_ON_TaskHandle = osThreadCreate(osThread(my_ON_Task), NULL);
 80002a2:	f107 0320 	add.w	r3, r7, #32
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fc43 	bl	8002b34 <osThreadCreate>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <main+0xe0>)
 80002b2:	6013      	str	r3, [r2, #0]

	/* definition and creation of my_OFF_Task */
	osThreadStaticDef(my_OFF_Task, Start_OFF_Task, osPriorityNormal, 0, 256,
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <main+0xe4>)
 80002b6:	1d3c      	adds	r4, r7, #4
 80002b8:	461d      	mov	r5, r3
 80002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			myt_OFF_TaskBuffer, &myt_OFF_TaskControlBlock);
	my_OFF_TaskHandle = osThreadCreate(osThread(my_OFF_Task), NULL);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fc32 	bl	8002b34 <osThreadCreate>
 80002d0:	4603      	mov	r3, r0
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <main+0xe8>)
 80002d4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002d6:	f002 fc26 	bl	8002b26 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002da:	e7fe      	b.n	80002da <main+0xc2>
 80002dc:	200012b4 	.word	0x200012b4
 80002e0:	200012b0 	.word	0x200012b0
 80002e4:	0800614c 	.word	0x0800614c
 80002e8:	200011c4 	.word	0x200011c4
 80002ec:	0800615c 	.word	0x0800615c
 80002f0:	2000039c 	.word	0x2000039c
 80002f4:	08006178 	.word	0x08006178
 80002f8:	20000854 	.word	0x20000854
 80002fc:	08006194 	.word	0x08006194
 8000300:	20000d0c 	.word	0x20000d0c

08000304 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b094      	sub	sp, #80	; 0x50
 8000308:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800030a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f004 ffed 	bl	80052f2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000334:	2309      	movs	r3, #9
 8000336:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000354:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000358:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fe7a 	bl	8001058 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x6a>
		Error_Handler();
 800036a:	f000 f9bf 	bl	80006ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2302      	movs	r3, #2
 8000374:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000384:	f107 0314 	add.w	r3, r7, #20
 8000388:	2102      	movs	r1, #2
 800038a:	4618      	mov	r0, r3
 800038c:	f001 f8e6 	bl	800155c <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x96>
		Error_Handler();
 8000396:	f000 f9a9 	bl	80006ec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800039a:	2301      	movs	r3, #1
 800039c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800039e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003a2:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 faa0 	bl	80018ec <HAL_RCCEx_PeriphCLKConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xb2>
		Error_Handler();
 80003b2:	f000 f99b 	bl	80006ec <Error_Handler>
	}
}
 80003b6:	bf00      	nop
 80003b8:	3750      	adds	r7, #80	; 0x50
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2100      	movs	r1, #0
 80003ca:	460a      	mov	r2, r1
 80003cc:	801a      	strh	r2, [r3, #0]
 80003ce:	460a      	mov	r2, r1
 80003d0:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 80003d2:	2300      	movs	r3, #0
 80003d4:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80003d6:	4b1d      	ldr	r3, [pc, #116]	; (800044c <MX_RTC_Init+0x8c>)
 80003d8:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <MX_RTC_Init+0x90>)
 80003da:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <MX_RTC_Init+0x8c>)
 80003de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003e2:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80003e4:	4b19      	ldr	r3, [pc, #100]	; (800044c <MX_RTC_Init+0x8c>)
 80003e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003ea:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80003ec:	4817      	ldr	r0, [pc, #92]	; (800044c <MX_RTC_Init+0x8c>)
 80003ee:	f001 fbf3 	bl	8001bd8 <HAL_RTC_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_RTC_Init+0x3c>
		Error_Handler();
 80003f8:	f000 f978 	bl	80006ec <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x15;
 80003fc:	2315      	movs	r3, #21
 80003fe:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x30;
 8000400:	2330      	movs	r3, #48	; 0x30
 8000402:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000404:	2300      	movs	r3, #0
 8000406:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2201      	movs	r2, #1
 800040c:	4619      	mov	r1, r3
 800040e:	480f      	ldr	r0, [pc, #60]	; (800044c <MX_RTC_Init+0x8c>)
 8000410:	f001 fc78 	bl	8001d04 <HAL_RTC_SetTime>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_RTC_Init+0x5e>
		Error_Handler();
 800041a:	f000 f967 	bl	80006ec <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800041e:	2302      	movs	r3, #2
 8000420:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_APRIL;
 8000422:	2304      	movs	r3, #4
 8000424:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x11;
 8000426:	2311      	movs	r3, #17
 8000428:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x23;
 800042a:	2323      	movs	r3, #35	; 0x23
 800042c:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) {
 800042e:	463b      	mov	r3, r7
 8000430:	2201      	movs	r2, #1
 8000432:	4619      	mov	r1, r3
 8000434:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_RTC_Init+0x8c>)
 8000436:	f001 fcfd 	bl	8001e34 <HAL_RTC_SetDate>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_RTC_Init+0x84>
		Error_Handler();
 8000440:	f000 f954 	bl	80006ec <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000344 	.word	0x20000344
 8000450:	40002800 	.word	0x40002800

08000454 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800045a:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <MX_USART1_UART_Init+0x50>)
 800045c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000464:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800048c:	f002 f97c 	bl	8002788 <HAL_UART_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000496:	f000 f929 	bl	80006ec <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000358 	.word	0x20000358
 80004a4:	40013800 	.word	0x40013800

080004a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_GPIO_Init+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <MX_GPIO_Init+0x90>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_GPIO_Init+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a17      	ldr	r2, [pc, #92]	; (8000538 <MX_GPIO_Init+0x90>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_GPIO_Init+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_GPIO_Init+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a11      	ldr	r2, [pc, #68]	; (8000538 <MX_GPIO_Init+0x90>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_GPIO_Init+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <MX_GPIO_Init+0x94>)
 800050c:	f000 fd80 	bl	8001010 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000514:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2302      	movs	r3, #2
 8000520:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_GPIO_Init+0x94>)
 800052a:	f000 fbed 	bl	8000d08 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	40011000 	.word	0x40011000

08000540 <Start_Print_Task>:
 * @brief  Function implementing the Print_Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Print_Task */
void Start_Print_Task(void const *argument) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	Zerg data;
	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(myQueueHandle, &data,portMAX_DELAY) == pdTRUE) {/* portMAX_DELAY - Если очередь пустая то, Task будет ждать пока не появятся данные!  == pdTRUE - проверка на ошибки при получении!*/
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <Start_Print_Task+0x30>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f107 010c 	add.w	r1, r7, #12
 8000550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000554:	4618      	mov	r0, r3
 8000556:	f002 fec5 	bl	80032e4 <xQueueReceive>
 800055a:	4603      	mov	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	d1f3      	bne.n	8000548 <Start_Print_Task+0x8>
			printf("data_GET : %s \r\n", data.mySharedResource);
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4619      	mov	r1, r3
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <Start_Print_Task+0x34>)
 8000568:	f004 ff60 	bl	800542c <iprintf>
		if (xQueueReceive(myQueueHandle, &data,portMAX_DELAY) == pdTRUE) {/* portMAX_DELAY - Если очередь пустая то, Task будет ждать пока не появятся данные!  == pdTRUE - проверка на ошибки при получении!*/
 800056c:	e7ec      	b.n	8000548 <Start_Print_Task+0x8>
 800056e:	bf00      	nop
 8000570:	200011c4 	.word	0x200011c4
 8000574:	080061b0 	.word	0x080061b0

08000578 <Start_ON_Task>:
 * @brief Function implementing the my_ON_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_ON_Task */
void Start_ON_Task(void const *argument) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_ON_Task */
	char potetoesMsg[] = "potatoes";
 8000580:	4a23      	ldr	r2, [pc, #140]	; (8000610 <Start_ON_Task+0x98>)
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	ca07      	ldmia	r2, {r0, r1, r2}
 8000588:	c303      	stmia	r3!, {r0, r1}
 800058a:	701a      	strb	r2, [r3, #0]
	int i;
	Zerg data;
	/* Infinite loop */
	for (;;) {
// Ниже критическая зона которую прерывать нельзя!
		if (xSemaphoreTake(myMutexHandle, portMAX_DELAY) == 1) { // Берем ключ/Mutex от "шкафчика" если он свободен!
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <Start_ON_Task+0x9c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000594:	4618      	mov	r0, r3
 8000596:	f002 ff85 	bl	80034a4 <xQueueSemaphoreTake>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d132      	bne.n	8000606 <Start_ON_Task+0x8e>

			for (i = 0; i < 9; i++) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
 80005a4:	e010      	b.n	80005c8 <Start_ON_Task+0x50>
				data.mySharedResource[i] = potetoesMsg[i];
 80005a6:	f107 0218 	add.w	r2, r7, #24
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	4413      	add	r3, r2
 80005ae:	7819      	ldrb	r1, [r3, #0]
 80005b0:	f107 020c 	add.w	r2, r7, #12
 80005b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b6:	4413      	add	r3, r2
 80005b8:	460a      	mov	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f002 fb05 	bl	8002bcc <osDelay>
			for (i = 0; i < 9; i++) {
 80005c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c4:	3301      	adds	r3, #1
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	2b08      	cmp	r3, #8
 80005cc:	ddeb      	ble.n	80005a6 <Start_ON_Task+0x2e>
			}
			data.mySharedResource[i] = 0;
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]

			/************* Отправляем в очередь *******************/
			if ( xQueueSend( myQueueHandle,&data.mySharedResource, portMAX_DELAY) != pdPASS) { // Если очередь полная то, Task будет ждать пока освободится очередь!
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <Start_ON_Task+0xa0>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	f107 010c 	add.w	r1, r7, #12
 80005e2:	2300      	movs	r3, #0
 80005e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005e8:	f002 fd7e 	bl	80030e8 <xQueueGenericSend>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d002      	beq.n	80005f8 <Start_ON_Task+0x80>
				printf("Attention, the queue is full! No place for 'ON'. \n\r"); /* Failed to post the message, even after 500 ticks. */
 80005f2:	480a      	ldr	r0, [pc, #40]	; (800061c <Start_ON_Task+0xa4>)
 80005f4:	f004 ff1a 	bl	800542c <iprintf>
			}

//			printf("potetoesMsg : %s \r\n", data.mySharedResource);
			xSemaphoreGive(myMutexHandle); // Возвращаем ключ! Выход из критической зоны.
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <Start_ON_Task+0x9c>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	f002 fd71 	bl	80030e8 <xQueueGenericSend>
		}
		osDelay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f002 fae0 	bl	8002bcc <osDelay>
		if (xSemaphoreTake(myMutexHandle, portMAX_DELAY) == 1) { // Берем ключ/Mutex от "шкафчика" если он свободен!
 800060c:	e7be      	b.n	800058c <Start_ON_Task+0x14>
 800060e:	bf00      	nop
 8000610:	080061f8 	.word	0x080061f8
 8000614:	200012b0 	.word	0x200012b0
 8000618:	200011c4 	.word	0x200011c4
 800061c:	080061c4 	.word	0x080061c4

08000620 <Start_OFF_Task>:
 * @brief Function implementing the my_OFF_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_OFF_Task */
void Start_OFF_Task(void const *argument) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_OFF_Task */
	char tomatoesMsg[] = "tomatoes";
 8000628:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <Start_OFF_Task+0x98>)
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000630:	c303      	stmia	r3!, {r0, r1}
 8000632:	701a      	strb	r2, [r3, #0]
	int i;
	Zerg data;
	/* Infinite loop */
	for (;;) {
		// Ниже критическая зона которую прерывать нельзя!
		if (xSemaphoreTake(myMutexHandle, portMAX_DELAY) == 1) { // Берем ключ/Mutex от "шкафчика" если он свободен!
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <Start_OFF_Task+0x9c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800063c:	4618      	mov	r0, r3
 800063e:	f002 ff31 	bl	80034a4 <xQueueSemaphoreTake>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d132      	bne.n	80006ae <Start_OFF_Task+0x8e>
			for (i = 0; i < 9; i++) {
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	e010      	b.n	8000670 <Start_OFF_Task+0x50>
				data.mySharedResource[i] = tomatoesMsg[i];
 800064e:	f107 0218 	add.w	r2, r7, #24
 8000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000654:	4413      	add	r3, r2
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	f107 020c 	add.w	r2, r7, #12
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
				osDelay(50);
 8000664:	2032      	movs	r0, #50	; 0x32
 8000666:	f002 fab1 	bl	8002bcc <osDelay>
			for (i = 0; i < 9; i++) {
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	3301      	adds	r3, #1
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
 8000670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000672:	2b08      	cmp	r3, #8
 8000674:	ddeb      	ble.n	800064e <Start_OFF_Task+0x2e>
			}
			data.mySharedResource[i] = 0;
 8000676:	f107 020c 	add.w	r2, r7, #12
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	4413      	add	r3, r2
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]

			/************* Отправляем  в очередь *******************/
			if ( xQueueSend( myQueueHandle,&data.mySharedResource, portMAX_DELAY) != pdPASS) { // Если очередь полная то, Task будет ждать пока освободится очередь!
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <Start_OFF_Task+0xa0>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	f107 010c 	add.w	r1, r7, #12
 800068a:	2300      	movs	r3, #0
 800068c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000690:	f002 fd2a 	bl	80030e8 <xQueueGenericSend>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d002      	beq.n	80006a0 <Start_OFF_Task+0x80>
				printf("Attention, the queue is full! No place for 'ON'. \n\r"); /* Failed to post the message, even after 500 ticks. */
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <Start_OFF_Task+0xa4>)
 800069c:	f004 fec6 	bl	800542c <iprintf>
			}

//			printf("tomatoesMsg : %s\r\n", data.mySharedResource);
			xSemaphoreGive(myMutexHandle); // Возвращаем ключ! Выход из критической зоны.
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <Start_OFF_Task+0x9c>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	f002 fd1d 	bl	80030e8 <xQueueGenericSend>
		}
		osDelay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f002 fa8c 	bl	8002bcc <osDelay>
		if (xSemaphoreTake(myMutexHandle, portMAX_DELAY) == 1) { // Берем ключ/Mutex от "шкафчика" если он свободен!
 80006b4:	e7be      	b.n	8000634 <Start_OFF_Task+0x14>
 80006b6:	bf00      	nop
 80006b8:	08006204 	.word	0x08006204
 80006bc:	200012b0 	.word	0x200012b0
 80006c0:	200011c4 	.word	0x200011c4
 80006c4:	080061c4 	.word	0x080061c4

080006c8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d101      	bne.n	80006de <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80006da:	f000 fa19 	bl	8000b10 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40000800 	.word	0x40000800

080006ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_MspInit+0x68>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <HAL_MspInit+0x68>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_MspInit+0x68>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_MspInit+0x68>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a11      	ldr	r2, [pc, #68]	; (8000760 <HAL_MspInit+0x68>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x68>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	210f      	movs	r1, #15
 8000732:	f06f 0001 	mvn.w	r0, #1
 8000736:	f000 fabc 	bl	8000cb2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_MspInit+0x6c>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_MspInit+0x6c>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <HAL_RTC_MspInit+0x3c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d110      	bne.n	800079c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800077a:	f000 fc61 	bl	8001040 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_RTC_MspInit+0x40>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <HAL_RTC_MspInit+0x40>)
 8000784:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HAL_RTC_MspInit+0x40>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_RTC_MspInit+0x44>)
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40002800 	.word	0x40002800
 80007a8:	40021000 	.word	0x40021000
 80007ac:	4242043c 	.word	0x4242043c

080007b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <HAL_UART_MspInit+0x8c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d131      	bne.n	8000834 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_UART_MspInit+0x90>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000804:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <HAL_UART_MspInit+0x94>)
 8000816:	f000 fa77 	bl	8000d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_UART_MspInit+0x94>)
 8000830:	f000 fa6a 	bl	8000d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40013800 	.word	0x40013800
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800

08000848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	; 0x38
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800085e:	4b34      	ldr	r3, [pc, #208]	; (8000930 <HAL_InitTick+0xe8>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a33      	ldr	r2, [pc, #204]	; (8000930 <HAL_InitTick+0xe8>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <HAL_InitTick+0xe8>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000876:	f107 0210 	add.w	r2, r7, #16
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f000 ffe5 	bl	8001850 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000890:	f000 ffb6 	bl	8001800 <HAL_RCC_GetPCLK1Freq>
 8000894:	6378      	str	r0, [r7, #52]	; 0x34
 8000896:	e004      	b.n	80008a2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000898:	f000 ffb2 	bl	8001800 <HAL_RCC_GetPCLK1Freq>
 800089c:	4603      	mov	r3, r0
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a4:	4a23      	ldr	r2, [pc, #140]	; (8000934 <HAL_InitTick+0xec>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008b0:	4b21      	ldr	r3, [pc, #132]	; (8000938 <HAL_InitTick+0xf0>)
 80008b2:	4a22      	ldr	r2, [pc, #136]	; (800093c <HAL_InitTick+0xf4>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <HAL_InitTick+0xf0>)
 80008b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <HAL_InitTick+0xf0>)
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_InitTick+0xf0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_InitTick+0xf0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_InitTick+0xf0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008d6:	4818      	ldr	r0, [pc, #96]	; (8000938 <HAL_InitTick+0xf0>)
 80008d8:	f001 fd0c 	bl	80022f4 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d11b      	bne.n	8000922 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008ea:	4813      	ldr	r0, [pc, #76]	; (8000938 <HAL_InitTick+0xf0>)
 80008ec:	f001 fd5a 	bl	80023a4 <HAL_TIM_Base_Start_IT>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d111      	bne.n	8000922 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008fe:	201e      	movs	r0, #30
 8000900:	f000 f9f3 	bl	8000cea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b0f      	cmp	r3, #15
 8000908:	d808      	bhi.n	800091c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800090a:	2200      	movs	r2, #0
 800090c:	6879      	ldr	r1, [r7, #4]
 800090e:	201e      	movs	r0, #30
 8000910:	f000 f9cf 	bl	8000cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_InitTick+0xf8>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e002      	b.n	8000922 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000922:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000926:	4618      	mov	r0, r3
 8000928:	3738      	adds	r7, #56	; 0x38
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000
 8000934:	431bde83 	.word	0x431bde83
 8000938:	200012fc 	.word	0x200012fc
 800093c:	40000800 	.word	0x40000800
 8000940:	20000004 	.word	0x20000004

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
	...

08000970 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <TIM4_IRQHandler+0x10>)
 8000976:	f001 fd67 	bl	8002448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200012fc 	.word	0x200012fc

08000984 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e00a      	b.n	80009ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000996:	f3af 8000 	nop.w
 800099a:	4601      	mov	r1, r0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	60ba      	str	r2, [r7, #8]
 80009a2:	b2ca      	uxtb	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3301      	adds	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	dbf0      	blt.n	8000996 <_read+0x12>
  }

  return len;
 80009b4:	687b      	ldr	r3, [r7, #4]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <_close>:
  }
  return len;
}

int _close(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e4:	605a      	str	r2, [r3, #4]
  return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <_isatty>:

int _isatty(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
	...

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f004 fb1e 	bl	8005090 <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20005000 	.word	0x20005000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	20001344 	.word	0x20001344
 8000a88:	200020a8 	.word	0x200020a8

08000a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	; (8000adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000abe:	f7ff ffe5 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f004 fbe1 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac6:	f7ff fba7 	bl	8000218 <main>
  bx lr
 8000aca:	4770      	bx	lr
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ad4:	080062f0 	.word	0x080062f0
  ldr r2, =_sbss
 8000ad8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000adc:	200020a8 	.word	0x200020a8

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_Init+0x28>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_Init+0x28>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f8d1 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f7ff fea4 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fdfa 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_IncTick+0x20>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20001348 	.word	0x20001348

08000b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20001348 	.word	0x20001348

08000b48 <__NVIC_SetPriorityGrouping>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4906      	ldr	r1, [pc, #24]	; (8000be0 <__NVIC_EnableIRQ+0x34>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff4f 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff64 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ffb2 	bl	8000c38 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff81 	bl	8000be4 <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff57 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b08b      	sub	sp, #44	; 0x2c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e169      	b.n	8000ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8158 	bne.w	8000fea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a9a      	ldr	r2, [pc, #616]	; (8000fa8 <HAL_GPIO_Init+0x2a0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d05e      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d44:	4a98      	ldr	r2, [pc, #608]	; (8000fa8 <HAL_GPIO_Init+0x2a0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d875      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d4a:	4a98      	ldr	r2, [pc, #608]	; (8000fac <HAL_GPIO_Init+0x2a4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d058      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d50:	4a96      	ldr	r2, [pc, #600]	; (8000fac <HAL_GPIO_Init+0x2a4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d86f      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d56:	4a96      	ldr	r2, [pc, #600]	; (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d052      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d5c:	4a94      	ldr	r2, [pc, #592]	; (8000fb0 <HAL_GPIO_Init+0x2a8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d869      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d62:	4a94      	ldr	r2, [pc, #592]	; (8000fb4 <HAL_GPIO_Init+0x2ac>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d04c      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d68:	4a92      	ldr	r2, [pc, #584]	; (8000fb4 <HAL_GPIO_Init+0x2ac>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d863      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d6e:	4a92      	ldr	r2, [pc, #584]	; (8000fb8 <HAL_GPIO_Init+0x2b0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d046      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
 8000d74:	4a90      	ldr	r2, [pc, #576]	; (8000fb8 <HAL_GPIO_Init+0x2b0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d85d      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d82a      	bhi.n	8000dd4 <HAL_GPIO_Init+0xcc>
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d859      	bhi.n	8000e36 <HAL_GPIO_Init+0x12e>
 8000d82:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <HAL_GPIO_Init+0x80>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000e03 	.word	0x08000e03
 8000d8c:	08000ddd 	.word	0x08000ddd
 8000d90:	08000def 	.word	0x08000def
 8000d94:	08000e31 	.word	0x08000e31
 8000d98:	08000e37 	.word	0x08000e37
 8000d9c:	08000e37 	.word	0x08000e37
 8000da0:	08000e37 	.word	0x08000e37
 8000da4:	08000e37 	.word	0x08000e37
 8000da8:	08000e37 	.word	0x08000e37
 8000dac:	08000e37 	.word	0x08000e37
 8000db0:	08000e37 	.word	0x08000e37
 8000db4:	08000e37 	.word	0x08000e37
 8000db8:	08000e37 	.word	0x08000e37
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e37 	.word	0x08000e37
 8000dc4:	08000e37 	.word	0x08000e37
 8000dc8:	08000e37 	.word	0x08000e37
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000df9 	.word	0x08000df9
 8000dd4:	4a79      	ldr	r2, [pc, #484]	; (8000fbc <HAL_GPIO_Init+0x2b4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d013      	beq.n	8000e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dda:	e02c      	b.n	8000e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e029      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	e024      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	3308      	adds	r3, #8
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e01f      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	e01a      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e013      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	611a      	str	r2, [r3, #16]
          break;
 8000e22:	e009      	b.n	8000e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e24:	2308      	movs	r3, #8
 8000e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	615a      	str	r2, [r3, #20]
          break;
 8000e2e:	e003      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x130>
          break;
 8000e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2bff      	cmp	r3, #255	; 0xff
 8000e3c:	d801      	bhi.n	8000e42 <HAL_GPIO_Init+0x13a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	e001      	b.n	8000e46 <HAL_GPIO_Init+0x13e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3304      	adds	r3, #4
 8000e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d802      	bhi.n	8000e54 <HAL_GPIO_Init+0x14c>
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x152>
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	3b08      	subs	r3, #8
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	210f      	movs	r1, #15
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	6a39      	ldr	r1, [r7, #32]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	431a      	orrs	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80b1 	beq.w	8000fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e88:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <HAL_GPIO_Init+0x2b8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	; (8000fc0 <HAL_GPIO_Init+0x2b8>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <HAL_GPIO_Init+0x2b8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea0:	4a48      	ldr	r2, [pc, #288]	; (8000fc4 <HAL_GPIO_Init+0x2bc>)
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <HAL_GPIO_Init+0x2c0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d013      	beq.n	8000ef4 <HAL_GPIO_Init+0x1ec>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a3f      	ldr	r2, [pc, #252]	; (8000fcc <HAL_GPIO_Init+0x2c4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d00d      	beq.n	8000ef0 <HAL_GPIO_Init+0x1e8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a3e      	ldr	r2, [pc, #248]	; (8000fd0 <HAL_GPIO_Init+0x2c8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d007      	beq.n	8000eec <HAL_GPIO_Init+0x1e4>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <HAL_GPIO_Init+0x2cc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d101      	bne.n	8000ee8 <HAL_GPIO_Init+0x1e0>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e006      	b.n	8000ef6 <HAL_GPIO_Init+0x1ee>
 8000ee8:	2304      	movs	r3, #4
 8000eea:	e004      	b.n	8000ef6 <HAL_GPIO_Init+0x1ee>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e002      	b.n	8000ef6 <HAL_GPIO_Init+0x1ee>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <HAL_GPIO_Init+0x1ee>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef8:	f002 0203 	and.w	r2, r2, #3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4093      	lsls	r3, r2
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f06:	492f      	ldr	r1, [pc, #188]	; (8000fc4 <HAL_GPIO_Init+0x2bc>)
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	492c      	ldr	r1, [pc, #176]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4928      	ldr	r1, [pc, #160]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	4922      	ldr	r1, [pc, #136]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	604b      	str	r3, [r1, #4]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	491e      	ldr	r1, [pc, #120]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	4918      	ldr	r1, [pc, #96]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	608b      	str	r3, [r1, #8]
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4914      	ldr	r1, [pc, #80]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d021      	beq.n	8000fdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60cb      	str	r3, [r1, #12]
 8000fa4:	e021      	b.n	8000fea <HAL_GPIO_Init+0x2e2>
 8000fa6:	bf00      	nop
 8000fa8:	10320000 	.word	0x10320000
 8000fac:	10310000 	.word	0x10310000
 8000fb0:	10220000 	.word	0x10220000
 8000fb4:	10210000 	.word	0x10210000
 8000fb8:	10120000 	.word	0x10120000
 8000fbc:	10110000 	.word	0x10110000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	40011400 	.word	0x40011400
 8000fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_GPIO_Init+0x304>)
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4909      	ldr	r1, [pc, #36]	; (800100c <HAL_GPIO_Init+0x304>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	3301      	adds	r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f47f ae8e 	bne.w	8000d1c <HAL_GPIO_Init+0x14>
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	372c      	adds	r7, #44	; 0x2c
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800102c:	e003      	b.n	8001036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	041a      	lsls	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	611a      	str	r2, [r3, #16]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	420e0020 	.word	0x420e0020

08001058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e272      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8087 	beq.w	8001186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001078:	4b92      	ldr	r3, [pc, #584]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b04      	cmp	r3, #4
 8001082:	d00c      	beq.n	800109e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001084:	4b8f      	ldr	r3, [pc, #572]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
 8001090:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109e:	4b89      	ldr	r3, [pc, #548]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06c      	beq.n	8001184 <HAL_RCC_OscConfig+0x12c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d168      	bne.n	8001184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e24c      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x76>
 80010c0:	4b80      	ldr	r3, [pc, #512]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a7f      	ldr	r2, [pc, #508]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e02e      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x98>
 80010d6:	4b7b      	ldr	r3, [pc, #492]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7a      	ldr	r2, [pc, #488]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b78      	ldr	r3, [pc, #480]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a77      	ldr	r2, [pc, #476]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0xbc>
 80010fa:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a71      	ldr	r2, [pc, #452]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6e      	ldr	r2, [pc, #440]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xd4>
 8001114:	4b6b      	ldr	r3, [pc, #428]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6a      	ldr	r2, [pc, #424]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a67      	ldr	r2, [pc, #412]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fcfe 	bl	8000b34 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fcfa 	bl	8000b34 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e200      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xe4>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fcea 	bl	8000b34 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fce6 	bl	8000b34 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1ec      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x10c>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001192:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
 80011aa:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1c0      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4939      	ldr	r1, [pc, #228]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e03a      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc9f 	bl	8000b34 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc9b 	bl	8000b34 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1a1      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4927      	ldr	r1, [pc, #156]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fc7e 	bl	8000b34 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fc7a 	bl	8000b34 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e180      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d03a      	beq.n	80012dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d019      	beq.n	80012a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001274:	f7ff fc5e 	bl	8000b34 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fc5a 	bl	8000b34 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e160      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_RCC_OscConfig+0x26c>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 fb08 	bl	80018b0 <RCC_Delay>
 80012a0:	e01c      	b.n	80012dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc44 	bl	8000b34 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ae:	e00f      	b.n	80012d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc40 	bl	8000b34 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d908      	bls.n	80012d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e146      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	42420000 	.word	0x42420000
 80012cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b92      	ldr	r3, [pc, #584]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e9      	bne.n	80012b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a6 	beq.w	8001436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b8b      	ldr	r3, [pc, #556]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10d      	bne.n	8001316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b88      	ldr	r3, [pc, #544]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a87      	ldr	r2, [pc, #540]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b85      	ldr	r3, [pc, #532]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b82      	ldr	r3, [pc, #520]	; (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b7f      	ldr	r3, [pc, #508]	; (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7e      	ldr	r2, [pc, #504]	; (8001520 <HAL_RCC_OscConfig+0x4c8>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132e:	f7ff fc01 	bl	8000b34 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001336:	f7ff fbfd 	bl	8000b34 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e103      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b75      	ldr	r3, [pc, #468]	; (8001520 <HAL_RCC_OscConfig+0x4c8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x312>
 800135c:	4b6f      	ldr	r3, [pc, #444]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a6e      	ldr	r2, [pc, #440]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e02d      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x334>
 8001372:	4b6a      	ldr	r3, [pc, #424]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a69      	ldr	r2, [pc, #420]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	4b67      	ldr	r3, [pc, #412]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a66      	ldr	r2, [pc, #408]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f023 0304 	bic.w	r3, r3, #4
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	e01c      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x356>
 8001394:	4b61      	ldr	r3, [pc, #388]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a60      	ldr	r2, [pc, #384]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	4b5e      	ldr	r3, [pc, #376]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a5d      	ldr	r2, [pc, #372]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e00b      	b.n	80013c6 <HAL_RCC_OscConfig+0x36e>
 80013ae:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a5a      	ldr	r2, [pc, #360]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a57      	ldr	r2, [pc, #348]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d015      	beq.n	80013fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fbb1 	bl	8000b34 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff fbad 	bl	8000b34 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0b1      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	4b4b      	ldr	r3, [pc, #300]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0ee      	beq.n	80013d6 <HAL_RCC_OscConfig+0x37e>
 80013f8:	e014      	b.n	8001424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb9b 	bl	8000b34 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fb97 	bl	8000b34 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e09b      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ee      	bne.n	8001402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d105      	bne.n	8001436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8087 	beq.w	800154e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d061      	beq.n	8001510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d146      	bne.n	80014e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <HAL_RCC_OscConfig+0x4cc>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fb6b 	bl	8000b34 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff fb67 	bl	8000b34 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e06d      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4921      	ldr	r1, [pc, #132]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a19      	ldr	r1, [r3, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	430b      	orrs	r3, r1
 80014ae:	491b      	ldr	r1, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x4cc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb3b 	bl	8000b34 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fb37 	bl	8000b34 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e03d      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x46a>
 80014e0:	e035      	b.n	800154e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_OscConfig+0x4cc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb24 	bl	8000b34 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fb20 	bl	8000b34 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e026      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_OscConfig+0x4c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x498>
 800150e:	e01e      	b.n	800154e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d107      	bne.n	8001528 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e019      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
 800151c:	40021000 	.word	0x40021000
 8001520:	40007000 	.word	0x40007000
 8001524:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x500>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	429a      	cmp	r2, r3
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0d0      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d910      	bls.n	80015a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 0207 	bic.w	r2, r3, #7
 8001586:	4965      	ldr	r1, [pc, #404]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0b8      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b8:	4b59      	ldr	r3, [pc, #356]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4a52      	ldr	r2, [pc, #328]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	4b50      	ldr	r3, [pc, #320]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	494d      	ldr	r1, [pc, #308]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d040      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d115      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e07f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e073      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e06b      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4936      	ldr	r1, [pc, #216]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fa72 	bl	8000b34 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff fa6e 	bl	8000b34 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e053      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d210      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 0207 	bic.w	r2, r3, #7
 8001692:	4922      	ldr	r1, [pc, #136]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e032      	b.n	8001712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4916      	ldr	r1, [pc, #88]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	490e      	ldr	r1, [pc, #56]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ea:	f000 f821 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	490a      	ldr	r1, [pc, #40]	; (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1cc>)
 8001704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_ClockConfig+0x1d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f89c 	bl	8000848 <HAL_InitTick>

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40022000 	.word	0x40022000
 8001720:	40021000 	.word	0x40021000
 8001724:	08006238 	.word	0x08006238
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001730:	b490      	push	{r4, r7}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_RCC_GetSysClockFreq+0xac>)
 8001738:	1d3c      	adds	r4, r7, #4
 800173a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001740:	f240 2301 	movw	r3, #513	; 0x201
 8001744:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b04      	cmp	r3, #4
 8001768:	d002      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x40>
 800176a:	2b08      	cmp	r3, #8
 800176c:	d003      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x46>
 800176e:	e02b      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001772:	623b      	str	r3, [r7, #32]
      break;
 8001774:	e02b      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3328      	adds	r3, #40	; 0x28
 8001780:	443b      	add	r3, r7
 8001782:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001786:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d012      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	0c5b      	lsrs	r3, r3, #17
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	3328      	adds	r3, #40	; 0x28
 800179e:	443b      	add	r3, r7
 80017a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017aa:	fb03 f202 	mul.w	r2, r3, r2
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	e004      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	623b      	str	r3, [r7, #32]
      break;
 80017c6:	e002      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017ca:	623b      	str	r3, [r7, #32]
      break;
 80017cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ce:	6a3b      	ldr	r3, [r7, #32]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc90      	pop	{r4, r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	08006210 	.word	0x08006210
 80017e0:	40021000 	.word	0x40021000
 80017e4:	007a1200 	.word	0x007a1200
 80017e8:	003d0900 	.word	0x003d0900

080017ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_RCC_GetHCLKFreq+0x10>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000000 	.word	0x20000000

08001800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001804:	f7ff fff2 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	4903      	ldr	r1, [pc, #12]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	08006248 	.word	0x08006248

08001828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800182c:	f7ff ffde 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	0adb      	lsrs	r3, r3, #11
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4903      	ldr	r1, [pc, #12]	; (800184c <HAL_RCC_GetPCLK2Freq+0x24>)
 800183e:	5ccb      	ldrb	r3, [r1, r3]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000
 800184c:	08006248 	.word	0x08006248

08001850 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	220f      	movs	r2, #15
 800185e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_RCC_GetClockConfig+0x58>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_RCC_GetClockConfig+0x58>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_GetClockConfig+0x58>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_RCC_GetClockConfig+0x58>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0207 	and.w	r2, r3, #7
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40022000 	.word	0x40022000

080018b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <RCC_Delay+0x34>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <RCC_Delay+0x38>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0a5b      	lsrs	r3, r3, #9
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018cc:	bf00      	nop
  }
  while (Delay --);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	60fa      	str	r2, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f9      	bne.n	80018cc <RCC_Delay+0x1c>
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000000 	.word	0x20000000
 80018e8:	10624dd3 	.word	0x10624dd3

080018ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d07d      	beq.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190c:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10d      	bne.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	4a4b      	ldr	r2, [pc, #300]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	61d3      	str	r3, [r2, #28]
 8001924:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001930:	2301      	movs	r3, #1
 8001932:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d118      	bne.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194c:	f7ff f8f2 	bl	8000b34 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	e008      	b.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001954:	f7ff f8ee 	bl	8000b34 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e06d      	b.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d02e      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d027      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001990:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019a0:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019a6:	4a29      	ldr	r2, [pc, #164]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d014      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff f8bd 	bl	8000b34 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff f8b9 	bl	8000b34 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e036      	b.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ee      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4917      	ldr	r1, [pc, #92]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	490b      	ldr	r1, [pc, #44]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	4904      	ldr	r1, [pc, #16]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40007000 	.word	0x40007000
 8001a54:	42420440 	.word	0x42420440

08001a58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b08d      	sub	sp, #52	; 0x34
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a60:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001a62:	f107 040c 	add.w	r4, r7, #12
 8001a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a6c:	f240 2301 	movw	r3, #513	; 0x201
 8001a70:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	2300      	movs	r3, #0
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b10      	cmp	r3, #16
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	f200 808e 	bhi.w	8001bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d049      	beq.n	8001b2e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d079      	beq.n	8001b94 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001aa0:	e086      	b.n	8001bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001aa2:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001aa8:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d07f      	beq.n	8001bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	0c9b      	lsrs	r3, r3, #18
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	3330      	adds	r3, #48	; 0x30
 8001abe:	443b      	add	r3, r7
 8001ac0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ac4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d017      	beq.n	8001b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad0:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c5b      	lsrs	r3, r3, #17
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	3330      	adds	r3, #48	; 0x30
 8001adc:	443b      	add	r3, r7
 8001ade:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001aee:	4a37      	ldr	r2, [pc, #220]	; (8001bcc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afe:	e004      	b.n	8001b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b04:	fb02 f303 	mul.w	r3, r2, r3
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b16:	d102      	bne.n	8001b1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b1c:	e04a      	b.n	8001bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b2c:	e042      	b.n	8001bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3e:	d108      	bne.n	8001b52 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b50:	e01f      	b.n	8001b92 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001b6a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b70:	e00f      	b.n	8001b92 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d016      	beq.n	8001bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8001b8a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b90:	e012      	b.n	8001bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001b92:	e011      	b.n	8001bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001b94:	f7ff fe48 	bl	8001828 <HAL_RCC_GetPCLK2Freq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0b9b      	lsrs	r3, r3, #14
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001bae:	e004      	b.n	8001bba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001bb0:	bf00      	nop
 8001bb2:	e002      	b.n	8001bba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001bb4:	bf00      	nop
 8001bb6:	e000      	b.n	8001bba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001bb8:	bf00      	nop
    }
  }
  return (frequency);
 8001bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3734      	adds	r7, #52	; 0x34
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	08006220 	.word	0x08006220
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	007a1200 	.word	0x007a1200
 8001bd0:	003d0900 	.word	0x003d0900
 8001bd4:	aaaaaaab 	.word	0xaaaaaaab

08001bd8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e084      	b.n	8001cf8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7c5b      	ldrb	r3, [r3, #17]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fdb2 	bl	8000768 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f9c8 	bl	8001fa0 <HAL_RTC_WaitForSynchro>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e06b      	b.n	8001cf8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fa81 	bl	8002128 <RTC_EnterInitMode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e060      	b.n	8001cf8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0207 	bic.w	r2, r2, #7
 8001c44:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <HAL_RTC_Init+0x128>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_RTC_Init+0x128>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001c5a:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <HAL_RTC_Init+0x128>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	4926      	ldr	r1, [pc, #152]	; (8001d00 <HAL_RTC_Init+0x128>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c74:	d003      	beq.n	8001c7e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e00e      	b.n	8001c9c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7ff feea 	bl	8001a58 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c84:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d104      	bne.n	8001c96 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e030      	b.n	8001cf8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 010f 	bic.w	r1, r3, #15
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	0c1a      	lsrs	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	b291      	uxth	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fa55 	bl	8002178 <RTC_ExitInitMode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00c      	b.n	8001cf8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
  }
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40006c00 	.word	0x40006c00

08001d04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_RTC_SetTime+0x20>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e080      	b.n	8001e2a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	7c1b      	ldrb	r3, [r3, #16]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_RTC_SetTime+0x30>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e07a      	b.n	8001e2a <HAL_RTC_SetTime+0x126>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d113      	bne.n	8001d6e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d50:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	785b      	ldrb	r3, [r3, #1]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	1a5b      	subs	r3, r3, r1
 8001d60:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d62:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d68:	4413      	add	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e01e      	b.n	8001dac <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fa28 	bl	80021c8 <RTC_Bcd2ToByte>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d80:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fa1d 	bl	80021c8 <RTC_Bcd2ToByte>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	4613      	mov	r3, r2
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d9a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fa11 	bl	80021c8 <RTC_Bcd2ToByte>
 8001da6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001da8:	4423      	add	r3, r4
 8001daa:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001dac:	6979      	ldr	r1, [r7, #20]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f953 	bl	800205a <RTC_WriteTimeCounter>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e02f      	b.n	8001e2a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0205 	bic.w	r2, r2, #5
 8001dd8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f964 	bl	80020a8 <RTC_ReadAlarmCounter>
 8001de0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de8:	d018      	beq.n	8001e1c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d214      	bcs.n	8001e1c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001df8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dfc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001dfe:	6939      	ldr	r1, [r7, #16]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f96a 	bl	80020da <RTC_WriteAlarmCounter>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e006      	b.n	8001e2a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}
	...

08001e34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_RTC_SetDate+0x24>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e097      	b.n	8001f8c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	7c1b      	ldrb	r3, [r3, #16]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_RTC_SetDate+0x34>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e091      	b.n	8001f8c <HAL_RTC_SetDate+0x158>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2202      	movs	r2, #2
 8001e72:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	78da      	ldrb	r2, [r3, #3]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	785a      	ldrb	r2, [r3, #1]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	789a      	ldrb	r2, [r3, #2]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	739a      	strb	r2, [r3, #14]
 8001e92:	e01a      	b.n	8001eca <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f995 	bl	80021c8 <RTC_Bcd2ToByte>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f98c 	bl	80021c8 <RTC_Bcd2ToByte>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	789b      	ldrb	r3, [r3, #2]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f983 	bl	80021c8 <RTC_Bcd2ToByte>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	7bdb      	ldrb	r3, [r3, #15]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	7b59      	ldrb	r1, [r3, #13]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	7b9b      	ldrb	r3, [r3, #14]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f000 f993 	bl	8002204 <RTC_WeekDayNum>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	7b1a      	ldrb	r2, [r3, #12]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f883 	bl	8001ffa <RTC_ReadTimeCounter>
 8001ef4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <HAL_RTC_SetDate+0x160>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0adb      	lsrs	r3, r3, #11
 8001f00:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b18      	cmp	r3, #24
 8001f06:	d93a      	bls.n	8001f7e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <HAL_RTC_SetDate+0x164>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <HAL_RTC_SetDate+0x168>)
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001f1e:	69f9      	ldr	r1, [r7, #28]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f89a 	bl	800205a <RTC_WriteTimeCounter>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e027      	b.n	8001f8c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f8b3 	bl	80020a8 <RTC_ReadAlarmCounter>
 8001f42:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4a:	d018      	beq.n	8001f7e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d214      	bcs.n	8001f7e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001f5a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f5e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001f60:	69b9      	ldr	r1, [r7, #24]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f8b9 	bl	80020da <RTC_WriteAlarmCounter>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2204      	movs	r2, #4
 8001f72:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e006      	b.n	8001f8c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	91a2b3c5 	.word	0x91a2b3c5
 8001f98:	aaaaaaab 	.word	0xaaaaaaab
 8001f9c:	00015180 	.word	0x00015180

08001fa0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01d      	b.n	8001ff2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0208 	bic.w	r2, r2, #8
 8001fc4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001fc6:	f7fe fdb5 	bl	8000b34 <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fce:	f7fe fdb1 	bl	8000b34 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e007      	b.n	8001ff2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b087      	sub	sp, #28
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	827b      	strh	r3, [r7, #18]
 8002006:	2300      	movs	r3, #0
 8002008:	823b      	strh	r3, [r7, #16]
 800200a:	2300      	movs	r3, #0
 800200c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800202a:	8a7a      	ldrh	r2, [r7, #18]
 800202c:	8a3b      	ldrh	r3, [r7, #16]
 800202e:	429a      	cmp	r2, r3
 8002030:	d008      	beq.n	8002044 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002032:	8a3b      	ldrh	r3, [r7, #16]
 8002034:	041a      	lsls	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	b29b      	uxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e004      	b.n	800204e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002044:	8a7b      	ldrh	r3, [r7, #18]
 8002046:	041a      	lsls	r2, r3, #16
 8002048:	89fb      	ldrh	r3, [r7, #14]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800204e:	697b      	ldr	r3, [r7, #20]
}
 8002050:	4618      	mov	r0, r3
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f85d 	bl	8002128 <RTC_EnterInitMode>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e011      	b.n	800209e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	0c12      	lsrs	r2, r2, #16
 8002082:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b292      	uxth	r2, r2
 800208c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f872 	bl	8002178 <RTC_ExitInitMode>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	81fb      	strh	r3, [r7, #14]
 80020b4:	2300      	movs	r3, #0
 80020b6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80020c8:	89fb      	ldrh	r3, [r7, #14]
 80020ca:	041a      	lsls	r2, r3, #16
 80020cc:	89bb      	ldrh	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f81d 	bl	8002128 <RTC_EnterInitMode>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e011      	b.n	800211e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	0c12      	lsrs	r2, r2, #16
 8002102:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	b292      	uxth	r2, r2
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f832 	bl	8002178 <RTC_ExitInitMode>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002134:	f7fe fcfe 	bl	8000b34 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800213a:	e009      	b.n	8002150 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800213c:	f7fe fcfa 	bl	8000b34 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214a:	d901      	bls.n	8002150 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e00f      	b.n	8002170 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0ee      	beq.n	800213c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0210 	orr.w	r2, r2, #16
 800216c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0210 	bic.w	r2, r2, #16
 8002192:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002194:	f7fe fcce 	bl	8000b34 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800219a:	e009      	b.n	80021b0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800219c:	f7fe fcca 	bl	8000b34 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021aa:	d901      	bls.n	80021b0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e007      	b.n	80021c0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ee      	beq.n	800219c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
	...

08002204 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
 8002210:	4613      	mov	r3, r2
 8002212:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002222:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d82d      	bhi.n	8002286 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	4a2c      	ldr	r2, [pc, #176]	; (80022e8 <RTC_WeekDayNum+0xe4>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	085a      	lsrs	r2, r3, #1
 800223e:	78bb      	ldrb	r3, [r7, #2]
 8002240:	441a      	add	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	441a      	add	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	441a      	add	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3b01      	subs	r3, #1
 8002252:	4926      	ldr	r1, [pc, #152]	; (80022ec <RTC_WeekDayNum+0xe8>)
 8002254:	fba1 1303 	umull	r1, r3, r1, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	1ad2      	subs	r2, r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3b01      	subs	r3, #1
 8002260:	4922      	ldr	r1, [pc, #136]	; (80022ec <RTC_WeekDayNum+0xe8>)
 8002262:	fba1 1303 	umull	r1, r3, r1, r3
 8002266:	09db      	lsrs	r3, r3, #7
 8002268:	4413      	add	r3, r2
 800226a:	1d1a      	adds	r2, r3, #4
 800226c:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <RTC_WeekDayNum+0xec>)
 800226e:	fba3 1302 	umull	r1, r3, r3, r2
 8002272:	1ad1      	subs	r1, r2, r3
 8002274:	0849      	lsrs	r1, r1, #1
 8002276:	440b      	add	r3, r1
 8002278:	0899      	lsrs	r1, r3, #2
 800227a:	460b      	mov	r3, r1
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a5b      	subs	r3, r3, r1
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e029      	b.n	80022da <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <RTC_WeekDayNum+0xe4>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	085a      	lsrs	r2, r3, #1
 800229a:	78bb      	ldrb	r3, [r7, #2]
 800229c:	441a      	add	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	441a      	add	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4910      	ldr	r1, [pc, #64]	; (80022ec <RTC_WeekDayNum+0xe8>)
 80022ac:	fba1 1303 	umull	r1, r3, r1, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	1ad2      	subs	r2, r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	490d      	ldr	r1, [pc, #52]	; (80022ec <RTC_WeekDayNum+0xe8>)
 80022b8:	fba1 1303 	umull	r1, r3, r1, r3
 80022bc:	09db      	lsrs	r3, r3, #7
 80022be:	4413      	add	r3, r2
 80022c0:	1c9a      	adds	r2, r3, #2
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <RTC_WeekDayNum+0xec>)
 80022c4:	fba3 1302 	umull	r1, r3, r3, r2
 80022c8:	1ad1      	subs	r1, r2, r3
 80022ca:	0849      	lsrs	r1, r1, #1
 80022cc:	440b      	add	r3, r1
 80022ce:	0899      	lsrs	r1, r3, #2
 80022d0:	460b      	mov	r3, r1
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	1a5b      	subs	r3, r3, r1
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	b2db      	uxtb	r3, r3
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	38e38e39 	.word	0x38e38e39
 80022ec:	51eb851f 	.word	0x51eb851f
 80022f0:	24924925 	.word	0x24924925

080022f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e041      	b.n	800238a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f839 	bl	8002392 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f000 f9b4 	bl	80026a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d001      	beq.n	80023bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e03a      	b.n	8002432 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_TIM_Base_Start_IT+0x98>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00e      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x58>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e6:	d009      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x58>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <HAL_TIM_Base_Start_IT+0x9c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d004      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x58>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <HAL_TIM_Base_Start_IT+0xa0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d111      	bne.n	8002420 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b06      	cmp	r3, #6
 800240c:	d010      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241e:	e007      	b.n	8002430 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40000400 	.word	0x40000400
 8002444:	40000800 	.word	0x40000800

08002448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b02      	cmp	r3, #2
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b02      	cmp	r3, #2
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0202 	mvn.w	r2, #2
 8002474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8ed 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f8e0 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f8ef 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0204 	mvn.w	r2, #4
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8c3 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8b6 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8c5 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b08      	cmp	r3, #8
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b08      	cmp	r3, #8
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0208 	mvn.w	r2, #8
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2204      	movs	r2, #4
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f899 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f88c 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f89b 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b10      	cmp	r3, #16
 8002558:	d122      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b10      	cmp	r3, #16
 8002566:	d11b      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0210 	mvn.w	r2, #16
 8002570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2208      	movs	r2, #8
 8002576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f86f 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f862 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f871 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10e      	bne.n	80025cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0201 	mvn.w	r2, #1
 80025c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe f87e 	bl	80006c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d6:	2b80      	cmp	r3, #128	; 0x80
 80025d8:	d10e      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e4:	2b80      	cmp	r3, #128	; 0x80
 80025e6:	d107      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8bf 	bl	8002776 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d10e      	bne.n	8002624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d107      	bne.n	8002624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800261c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f835 	bl	800268e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b20      	cmp	r3, #32
 8002630:	d10e      	bne.n	8002650 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d107      	bne.n	8002650 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0220 	mvn.w	r2, #32
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f88a 	bl	8002764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a29      	ldr	r2, [pc, #164]	; (8002758 <TIM_Base_SetConfig+0xb8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00b      	beq.n	80026d0 <TIM_Base_SetConfig+0x30>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d007      	beq.n	80026d0 <TIM_Base_SetConfig+0x30>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a26      	ldr	r2, [pc, #152]	; (800275c <TIM_Base_SetConfig+0xbc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d003      	beq.n	80026d0 <TIM_Base_SetConfig+0x30>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a25      	ldr	r2, [pc, #148]	; (8002760 <TIM_Base_SetConfig+0xc0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d108      	bne.n	80026e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <TIM_Base_SetConfig+0xb8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_Base_SetConfig+0x62>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0x62>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <TIM_Base_SetConfig+0xbc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0x62>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <TIM_Base_SetConfig+0xc0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <TIM_Base_SetConfig+0xb8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	615a      	str	r2, [r3, #20]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40000400 	.word	0x40000400
 8002760:	40000800 	.word	0x40000800

08002764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e03f      	b.n	800281a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fd fffe 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2224      	movs	r2, #36	; 0x24
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f905 	bl	80029dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b08a      	sub	sp, #40	; 0x28
 8002826:	af02      	add	r7, sp, #8
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b20      	cmp	r3, #32
 8002840:	d17c      	bne.n	800293c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_UART_Transmit+0x2c>
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e075      	b.n	800293e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_UART_Transmit+0x3e>
 800285c:	2302      	movs	r3, #2
 800285e:	e06e      	b.n	800293e <HAL_UART_Transmit+0x11c>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2221      	movs	r2, #33	; 0x21
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002876:	f7fe f95d 	bl	8000b34 <HAL_GetTick>
 800287a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	88fa      	ldrh	r2, [r7, #6]
 8002886:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002890:	d108      	bne.n	80028a4 <HAL_UART_Transmit+0x82>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	e003      	b.n	80028ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028b4:	e02a      	b.n	800290c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f840 	bl	8002946 <UART_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e036      	b.n	800293e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	3302      	adds	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	e007      	b.n	80028fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3301      	adds	r3, #1
 80028fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1cf      	bne.n	80028b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	2140      	movs	r1, #64	; 0x40
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f810 	bl	8002946 <UART_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e006      	b.n	800293e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002956:	e02c      	b.n	80029b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295e:	d028      	beq.n	80029b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x30>
 8002966:	f7fe f8e5 	bl	8000b34 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	429a      	cmp	r2, r3
 8002974:	d21d      	bcs.n	80029b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002984:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e00f      	b.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4013      	ands	r3, r2
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d0c3      	beq.n	8002958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a16:	f023 030c 	bic.w	r3, r3, #12
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2c      	ldr	r2, [pc, #176]	; (8002af0 <UART_SetConfig+0x114>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d103      	bne.n	8002a4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a44:	f7fe fef0 	bl	8001828 <HAL_RCC_GetPCLK2Freq>
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	e002      	b.n	8002a52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f7fe fed8 	bl	8001800 <HAL_RCC_GetPCLK1Freq>
 8002a50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	441a      	add	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <UART_SetConfig+0x118>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	0119      	lsls	r1, r3, #4
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009a      	lsls	r2, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <UART_SetConfig+0x118>)
 8002a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2064      	movs	r0, #100	; 0x64
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	3332      	adds	r3, #50	; 0x32
 8002a9c:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <UART_SetConfig+0x118>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa8:	4419      	add	r1, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <UART_SetConfig+0x118>)
 8002ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2064      	movs	r0, #100	; 0x64
 8002aca:	fb00 f303 	mul.w	r3, r0, r3
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	3332      	adds	r3, #50	; 0x32
 8002ad4:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <UART_SetConfig+0x118>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	440a      	add	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013800 	.word	0x40013800
 8002af4:	51eb851f 	.word	0x51eb851f

08002af8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b0a:	2b84      	cmp	r3, #132	; 0x84
 8002b0c:	d005      	beq.n	8002b1a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	3303      	adds	r3, #3
 8002b18:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b2a:	f001 f8c3 	bl	8003cb4 <vTaskStartScheduler>
  
  return osOK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d020      	beq.n	8002b88 <osThreadCreate+0x54>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01c      	beq.n	8002b88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685c      	ldr	r4, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681d      	ldr	r5, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691e      	ldr	r6, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ffc9 	bl	8002af8 <makeFreeRtosPriority>
 8002b66:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b70:	9202      	str	r2, [sp, #8]
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	9100      	str	r1, [sp, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	4632      	mov	r2, r6
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f000 fec4 	bl	800390a <xTaskCreateStatic>
 8002b82:	4603      	mov	r3, r0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e01c      	b.n	8002bc2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685c      	ldr	r4, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b94:	b29e      	uxth	r6, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ffab 	bl	8002af8 <makeFreeRtosPriority>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	9200      	str	r2, [sp, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4632      	mov	r2, r6
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f000 ff05 	bl	80039c2 <xTaskCreate>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d001      	beq.n	8002bc2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bcc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <osDelay+0x16>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	e000      	b.n	8002be4 <osDelay+0x18>
 8002be2:	2301      	movs	r3, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 f831 	bl	8003c4c <vTaskDelay>
  
  return osOK;
 8002bea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f000 fa50 	bl	80030b0 <xQueueCreateMutexStatic>
 8002c10:	4603      	mov	r3, r0
 8002c12:	e003      	b.n	8002c1c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002c14:	2001      	movs	r0, #1
 8002c16:	f000 fa33 	bl	8003080 <xQueueCreateMutex>
 8002c1a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d011      	beq.n	8002c5a <osMessageCreate+0x36>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2400      	movs	r4, #0
 8002c50:	9400      	str	r4, [sp, #0]
 8002c52:	f000 f927 	bl	8002ea4 <xQueueGenericCreateStatic>
 8002c56:	4603      	mov	r3, r0
 8002c58:	e008      	b.n	8002c6c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	4619      	mov	r1, r3
 8002c66:	f000 f994 	bl	8002f92 <xQueueGenericCreate>
 8002c6a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd90      	pop	{r4, r7, pc}

08002c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f103 0208 	add.w	r2, r3, #8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f103 0208 	add.w	r2, r3, #8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f103 0208 	add.w	r2, r3, #8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d26:	d103      	bne.n	8002d30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e00c      	b.n	8002d4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3308      	adds	r3, #8
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e002      	b.n	8002d3e <vListInsert+0x2e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d2f6      	bcs.n	8002d38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6892      	ldr	r2, [r2, #8]
 8002d96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6852      	ldr	r2, [r2, #4]
 8002da0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d103      	bne.n	8002db4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
	...

08002dd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dfe:	f001 fead 	bl	8004b5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	441a      	add	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d114      	bne.n	8002e7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01a      	beq.n	8002e92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3310      	adds	r3, #16
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 f97f 	bl	8004164 <xTaskRemoveFromEventList>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d012      	beq.n	8002e92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <xQueueGenericReset+0xcc>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	e009      	b.n	8002e92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3310      	adds	r3, #16
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fef6 	bl	8002c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3324      	adds	r3, #36	; 0x24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fef1 	bl	8002c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e92:	f001 fe93 	bl	8004bbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	e000ed04 	.word	0xe000ed04

08002ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08e      	sub	sp, #56	; 0x38
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <xQueueGenericCreateStatic+0x52>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <xQueueGenericCreateStatic+0x56>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueGenericCreateStatic+0x58>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	623b      	str	r3, [r7, #32]
}
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <xQueueGenericCreateStatic+0x7e>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <xQueueGenericCreateStatic+0x82>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <xQueueGenericCreateStatic+0x84>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	61fb      	str	r3, [r7, #28]
}
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f42:	2348      	movs	r3, #72	; 0x48
 8002f44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b48      	cmp	r3, #72	; 0x48
 8002f4a:	d00a      	beq.n	8002f62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	61bb      	str	r3, [r7, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f74:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f843 	bl	800300e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3730      	adds	r7, #48	; 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08a      	sub	sp, #40	; 0x28
 8002f96:	af02      	add	r7, sp, #8
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <xQueueGenericCreate+0x2a>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	613b      	str	r3, [r7, #16]
}
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e004      	b.n	8002fd2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3348      	adds	r3, #72	; 0x48
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 fe82 	bl	8004ce0 <pvPortMalloc>
 8002fdc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00f      	beq.n	8003004 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	3348      	adds	r3, #72	; 0x48
 8002fe8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff2:	79fa      	ldrb	r2, [r7, #7]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f805 	bl	800300e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003004:	69bb      	ldr	r3, [r7, #24]
	}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e002      	b.n	8003030 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800303c:	2101      	movs	r1, #1
 800303e:	69b8      	ldr	r0, [r7, #24]
 8003040:	f7ff fec8 	bl	8002dd4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800306c:	2300      	movs	r3, #0
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f838 	bl	80030e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800308a:	2301      	movs	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	461a      	mov	r2, r3
 8003096:	6939      	ldr	r1, [r7, #16]
 8003098:	6978      	ldr	r0, [r7, #20]
 800309a:	f7ff ff7a 	bl	8002f92 <xQueueGenericCreate>
 800309e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff ffd3 	bl	800304c <prvInitialiseMutex>

		return pxNewQueue;
 80030a6:	68fb      	ldr	r3, [r7, #12]
	}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	4603      	mov	r3, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80030bc:	2301      	movs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	6939      	ldr	r1, [r7, #16]
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff fee8 	bl	8002ea4 <xQueueGenericCreateStatic>
 80030d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7ff ffb8 	bl	800304c <prvInitialiseMutex>

		return pxNewQueue;
 80030dc:	68fb      	ldr	r3, [r7, #12]
	}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	; 0x38
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xQueueGenericSend+0x32>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <xQueueGenericSend+0x40>
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <xQueueGenericSend+0x44>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <xQueueGenericSend+0x46>
 800312c:	2300      	movs	r3, #0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <xQueueGenericSend+0x60>
	__asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d103      	bne.n	8003156 <xQueueGenericSend+0x6e>
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <xQueueGenericSend+0x72>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <xQueueGenericSend+0x74>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <xQueueGenericSend+0x8e>
	__asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	623b      	str	r3, [r7, #32]
}
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003176:	f001 f9b9 	bl	80044ec <xTaskGetSchedulerState>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <xQueueGenericSend+0x9e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <xQueueGenericSend+0xa2>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <xQueueGenericSend+0xa4>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	61fb      	str	r3, [r7, #28]
}
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031a6:	f001 fcd9 	bl	8004b5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <xQueueGenericSend+0xd4>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d129      	bne.n	8003210 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c2:	f000 fa92 	bl	80036ea <prvCopyDataToQueue>
 80031c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	3324      	adds	r3, #36	; 0x24
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 ffc5 	bl	8004164 <xTaskRemoveFromEventList>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031e0:	4b3f      	ldr	r3, [pc, #252]	; (80032e0 <xQueueGenericSend+0x1f8>)
 80031e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	e00a      	b.n	8003208 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80031f8:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <xQueueGenericSend+0x1f8>)
 80031fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003208:	f001 fcd8 	bl	8004bbc <vPortExitCritical>
				return pdPASS;
 800320c:	2301      	movs	r3, #1
 800320e:	e063      	b.n	80032d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003216:	f001 fcd1 	bl	8004bbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800321a:	2300      	movs	r3, #0
 800321c:	e05c      	b.n	80032d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fffd 	bl	8004228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800322e:	2301      	movs	r3, #1
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003232:	f001 fcc3 	bl	8004bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003236:	f000 fda7 	bl	8003d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800323a:	f001 fc8f 	bl	8004b5c <vPortEnterCritical>
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003244:	b25b      	sxtb	r3, r3
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800324a:	d103      	bne.n	8003254 <xQueueGenericSend+0x16c>
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800325a:	b25b      	sxtb	r3, r3
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003260:	d103      	bne.n	800326a <xQueueGenericSend+0x182>
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800326a:	f001 fca7 	bl	8004bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800326e:	1d3a      	adds	r2, r7, #4
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 ffec 	bl	8004254 <xTaskCheckForTimeOut>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d124      	bne.n	80032cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003284:	f000 fb29 	bl	80038da <prvIsQueueFull>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	3310      	adds	r3, #16
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 ff40 	bl	800411c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800329c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800329e:	f000 fab4 	bl	800380a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032a2:	f000 fd7f 	bl	8003da4 <xTaskResumeAll>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f47f af7c 	bne.w	80031a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <xQueueGenericSend+0x1f8>)
 80032b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	e772      	b.n	80031a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032c2:	f000 faa2 	bl	800380a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032c6:	f000 fd6d 	bl	8003da4 <xTaskResumeAll>
 80032ca:	e76c      	b.n	80031a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ce:	f000 fa9c 	bl	800380a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032d2:	f000 fd67 	bl	8003da4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032d6:	2300      	movs	r3, #0
		}
	}
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3738      	adds	r7, #56	; 0x38
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08c      	sub	sp, #48	; 0x30
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <xQueueReceive+0x30>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	623b      	str	r3, [r7, #32]
}
 8003310:	bf00      	nop
 8003312:	e7fe      	b.n	8003312 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <xQueueReceive+0x3e>
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <xQueueReceive+0x42>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <xQueueReceive+0x44>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xQueueReceive+0x5e>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	61fb      	str	r3, [r7, #28]
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003342:	f001 f8d3 	bl	80044ec <xTaskGetSchedulerState>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <xQueueReceive+0x6e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <xQueueReceive+0x72>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <xQueueReceive+0x74>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <xQueueReceive+0x8e>
	__asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	61bb      	str	r3, [r7, #24]
}
 800336e:	bf00      	nop
 8003370:	e7fe      	b.n	8003370 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003372:	f001 fbf3 	bl	8004b5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01f      	beq.n	80033c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003386:	f000 fa1a 	bl	80037be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00f      	beq.n	80033ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	3310      	adds	r3, #16
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fee0 	bl	8004164 <xTaskRemoveFromEventList>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <xQueueReceive+0x1bc>)
 80033ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033ba:	f001 fbff 	bl	8004bbc <vPortExitCritical>
				return pdPASS;
 80033be:	2301      	movs	r3, #1
 80033c0:	e069      	b.n	8003496 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033c8:	f001 fbf8 	bl	8004bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e062      	b.n	8003496 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033d6:	f107 0310 	add.w	r3, r7, #16
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 ff24 	bl	8004228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033e4:	f001 fbea 	bl	8004bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033e8:	f000 fcce 	bl	8003d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033ec:	f001 fbb6 	bl	8004b5c <vPortEnterCritical>
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033f6:	b25b      	sxtb	r3, r3
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033fc:	d103      	bne.n	8003406 <xQueueReceive+0x122>
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800340c:	b25b      	sxtb	r3, r3
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003412:	d103      	bne.n	800341c <xQueueReceive+0x138>
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800341c:	f001 fbce 	bl	8004bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003420:	1d3a      	adds	r2, r7, #4
 8003422:	f107 0310 	add.w	r3, r7, #16
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f000 ff13 	bl	8004254 <xTaskCheckForTimeOut>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d123      	bne.n	800347c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003436:	f000 fa3a 	bl	80038ae <prvIsQueueEmpty>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d017      	beq.n	8003470 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	3324      	adds	r3, #36	; 0x24
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fe67 	bl	800411c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800344e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003450:	f000 f9db 	bl	800380a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003454:	f000 fca6 	bl	8003da4 <xTaskResumeAll>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d189      	bne.n	8003372 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <xQueueReceive+0x1bc>)
 8003460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	e780      	b.n	8003372 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003472:	f000 f9ca 	bl	800380a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003476:	f000 fc95 	bl	8003da4 <xTaskResumeAll>
 800347a:	e77a      	b.n	8003372 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800347c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347e:	f000 f9c4 	bl	800380a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003482:	f000 fc8f 	bl	8003da4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003488:	f000 fa11 	bl	80038ae <prvIsQueueEmpty>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	f43f af6f 	beq.w	8003372 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003494:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003496:	4618      	mov	r0, r3
 8003498:	3730      	adds	r7, #48	; 0x30
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08e      	sub	sp, #56	; 0x38
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	623b      	str	r3, [r7, #32]
}
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	61fb      	str	r3, [r7, #28]
}
 80034f0:	bf00      	nop
 80034f2:	e7fe      	b.n	80034f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034f4:	f000 fffa 	bl	80044ec <xTaskGetSchedulerState>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <xQueueSemaphoreTake+0x60>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <xQueueSemaphoreTake+0x64>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <xQueueSemaphoreTake+0x66>
 8003508:	2300      	movs	r3, #0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	61bb      	str	r3, [r7, #24]
}
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003524:	f001 fb1a 	bl	8004b5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d024      	beq.n	800357e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	1e5a      	subs	r2, r3, #1
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003544:	f001 f99c 	bl	8004880 <pvTaskIncrementMutexHeldCount>
 8003548:	4602      	mov	r2, r0
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00f      	beq.n	8003576 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	3310      	adds	r3, #16
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fe02 	bl	8004164 <xTaskRemoveFromEventList>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003566:	4b54      	ldr	r3, [pc, #336]	; (80036b8 <xQueueSemaphoreTake+0x214>)
 8003568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003576:	f001 fb21 	bl	8004bbc <vPortExitCritical>
				return pdPASS;
 800357a:	2301      	movs	r3, #1
 800357c:	e097      	b.n	80036ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	617b      	str	r3, [r7, #20]
}
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80035a0:	f001 fb0c 	bl	8004bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e082      	b.n	80036ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fe38 	bl	8004228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035bc:	f001 fafe 	bl	8004bbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c0:	f000 fbe2 	bl	8003d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035c4:	f001 faca 	bl	8004b5c <vPortEnterCritical>
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d4:	d103      	bne.n	80035de <xQueueSemaphoreTake+0x13a>
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ea:	d103      	bne.n	80035f4 <xQueueSemaphoreTake+0x150>
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f4:	f001 fae2 	bl	8004bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035f8:	463a      	mov	r2, r7
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fe27 	bl	8004254 <xTaskCheckForTimeOut>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d132      	bne.n	8003672 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800360c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800360e:	f000 f94e 	bl	80038ae <prvIsQueueEmpty>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d026      	beq.n	8003666 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003620:	f001 fa9c 	bl	8004b5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 ff7d 	bl	8004528 <xTaskPriorityInherit>
 800362e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003630:	f001 fac4 	bl	8004bbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	3324      	adds	r3, #36	; 0x24
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fd6d 	bl	800411c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003644:	f000 f8e1 	bl	800380a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003648:	f000 fbac 	bl	8003da4 <xTaskResumeAll>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	f47f af68 	bne.w	8003524 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <xQueueSemaphoreTake+0x214>)
 8003656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	e75e      	b.n	8003524 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003668:	f000 f8cf 	bl	800380a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800366c:	f000 fb9a 	bl	8003da4 <xTaskResumeAll>
 8003670:	e758      	b.n	8003524 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003672:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003674:	f000 f8c9 	bl	800380a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003678:	f000 fb94 	bl	8003da4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800367c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800367e:	f000 f916 	bl	80038ae <prvIsQueueEmpty>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	f43f af4d 	beq.w	8003524 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003690:	f001 fa64 	bl	8004b5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003696:	f000 f811 	bl	80036bc <prvGetDisinheritPriorityAfterTimeout>
 800369a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f84c 	bl	8004740 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80036a8:	f001 fa88 	bl	8004bbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3738      	adds	r7, #56	; 0x38
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d006      	beq.n	80036da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1c3 0307 	rsb	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e001      	b.n	80036de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036de:	68fb      	ldr	r3, [r7, #12]
	}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d14d      	bne.n	80037ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 ff8d 	bl	8004634 <xTaskPriorityDisinherit>
 800371a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	e043      	b.n	80037ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d119      	bne.n	800375e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6898      	ldr	r0, [r3, #8]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	461a      	mov	r2, r3
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	f001 fdce 	bl	80052d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	441a      	add	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d32b      	bcc.n	80037ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	e026      	b.n	80037ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68d8      	ldr	r0, [r3, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	461a      	mov	r2, r3
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	f001 fdb4 	bl	80052d6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	425b      	negs	r3, r3
 8003778:	441a      	add	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d207      	bcs.n	800379a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	425b      	negs	r3, r3
 8003794:	441a      	add	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d105      	bne.n	80037ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037b4:	697b      	ldr	r3, [r7, #20]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d018      	beq.n	8003802 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d303      	bcc.n	80037f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68d9      	ldr	r1, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	461a      	mov	r2, r3
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f001 fd6a 	bl	80052d6 <memcpy>
	}
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003812:	f001 f9a3 	bl	8004b5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800381e:	e011      	b.n	8003844 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3324      	adds	r3, #36	; 0x24
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fc99 	bl	8004164 <xTaskRemoveFromEventList>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003838:	f000 fd6e 	bl	8004318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	3b01      	subs	r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	dce9      	bgt.n	8003820 <prvUnlockQueue+0x16>
 800384c:	e000      	b.n	8003850 <prvUnlockQueue+0x46>
					break;
 800384e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	22ff      	movs	r2, #255	; 0xff
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003858:	f001 f9b0 	bl	8004bbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800385c:	f001 f97e 	bl	8004b5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003866:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003868:	e011      	b.n	800388e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d012      	beq.n	8003898 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3310      	adds	r3, #16
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fc74 	bl	8004164 <xTaskRemoveFromEventList>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003882:	f000 fd49 	bl	8004318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003886:	7bbb      	ldrb	r3, [r7, #14]
 8003888:	3b01      	subs	r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800388e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003892:	2b00      	cmp	r3, #0
 8003894:	dce9      	bgt.n	800386a <prvUnlockQueue+0x60>
 8003896:	e000      	b.n	800389a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003898:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038a2:	f001 f98b 	bl	8004bbc <vPortExitCritical>
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b6:	f001 f951 	bl	8004b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e001      	b.n	80038cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038cc:	f001 f976 	bl	8004bbc <vPortExitCritical>

	return xReturn;
 80038d0:	68fb      	ldr	r3, [r7, #12]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e2:	f001 f93b 	bl	8004b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d102      	bne.n	80038f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e001      	b.n	80038fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038fc:	f001 f95e 	bl	8004bbc <vPortExitCritical>

	return xReturn;
 8003900:	68fb      	ldr	r3, [r7, #12]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08e      	sub	sp, #56	; 0x38
 800390e:	af04      	add	r7, sp, #16
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <xTaskCreateStatic+0x2a>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	623b      	str	r3, [r7, #32]
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xTaskCreateStatic+0x46>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	61fb      	str	r3, [r7, #28]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003950:	23b4      	movs	r3, #180	; 0xb4
 8003952:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2bb4      	cmp	r3, #180	; 0xb4
 8003958:	d00a      	beq.n	8003970 <xTaskCreateStatic+0x66>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	61bb      	str	r3, [r7, #24]
}
 800396c:	bf00      	nop
 800396e:	e7fe      	b.n	800396e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01e      	beq.n	80039b4 <xTaskCreateStatic+0xaa>
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01b      	beq.n	80039b4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003984:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	2202      	movs	r2, #2
 800398a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800398e:	2300      	movs	r3, #0
 8003990:	9303      	str	r3, [sp, #12]
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	9302      	str	r3, [sp, #8]
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f850 	bl	8003a4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ae:	f000 f8e3 	bl	8003b78 <prvAddNewTaskToReadyList>
 80039b2:	e001      	b.n	80039b8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039b8:	697b      	ldr	r3, [r7, #20]
	}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3728      	adds	r7, #40	; 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b08c      	sub	sp, #48	; 0x30
 80039c6:	af04      	add	r7, sp, #16
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 f982 	bl	8004ce0 <pvPortMalloc>
 80039dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039e4:	20b4      	movs	r0, #180	; 0xb4
 80039e6:	f001 f97b 	bl	8004ce0 <pvPortMalloc>
 80039ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
 80039f8:	e005      	b.n	8003a06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f001 fa34 	bl	8004e68 <vPortFree>
 8003a00:	e001      	b.n	8003a06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9303      	str	r3, [sp, #12]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	9302      	str	r3, [sp, #8]
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f80e 	bl	8003a4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a30:	69f8      	ldr	r0, [r7, #28]
 8003a32:	f000 f8a1 	bl	8003b78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e002      	b.n	8003a42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a42:	69bb      	ldr	r3, [r7, #24]
	}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a64:	3b01      	subs	r3, #1
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f023 0307 	bic.w	r3, r3, #7
 8003a72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	617b      	str	r3, [r7, #20]
}
 8003a90:	bf00      	nop
 8003a92:	e7fe      	b.n	8003a92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	e012      	b.n	8003ac0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	7819      	ldrb	r1, [r3, #0]
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3334      	adds	r3, #52	; 0x34
 8003aaa:	460a      	mov	r2, r1
 8003aac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d006      	beq.n	8003ac8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b0f      	cmp	r3, #15
 8003ac4:	d9e9      	bls.n	8003a9a <prvInitialiseNewTask+0x4e>
 8003ac6:	e000      	b.n	8003aca <prvInitialiseNewTask+0x7e>
		{
			break;
 8003ac8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d901      	bls.n	8003adc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad8:	2306      	movs	r3, #6
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	2200      	movs	r2, #0
 8003aec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff f8dd 	bl	8002cb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	3318      	adds	r3, #24
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff f8d8 	bl	8002cb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	f1c3 0207 	rsb	r2, r3, #7
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	334c      	adds	r3, #76	; 0x4c
 8003b2c:	2260      	movs	r2, #96	; 0x60
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fbde 	bl	80052f2 <memset>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <prvInitialiseNewTask+0x120>)
 8003b3a:	651a      	str	r2, [r3, #80]	; 0x50
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <prvInitialiseNewTask+0x124>)
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <prvInitialiseNewTask+0x128>)
 8003b46:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	69b8      	ldr	r0, [r7, #24]
 8003b4e:	f000 ff11 	bl	8004974 <pxPortInitialiseStack>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b64:	bf00      	nop
 8003b66:	3720      	adds	r7, #32
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08006270 	.word	0x08006270
 8003b70:	08006290 	.word	0x08006290
 8003b74:	08006250 	.word	0x08006250

08003b78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b80:	f000 ffec 	bl	8004b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <prvAddNewTaskToReadyList+0xb8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	4a29      	ldr	r2, [pc, #164]	; (8003c30 <prvAddNewTaskToReadyList+0xb8>)
 8003b8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b8e:	4b29      	ldr	r3, [pc, #164]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b96:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <prvAddNewTaskToReadyList+0xb8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d110      	bne.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ba4:	f000 fbdc 	bl	8004360 <prvInitialiseTaskLists>
 8003ba8:	e00d      	b.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <prvAddNewTaskToReadyList+0xc0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d802      	bhi.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <prvAddNewTaskToReadyList+0xc4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <prvAddNewTaskToReadyList+0xc4>)
 8003bce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <prvAddNewTaskToReadyList+0xcc>)
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f7ff f866 	bl	8002cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bfe:	f000 ffdd 	bl	8004bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <prvAddNewTaskToReadyList+0xc0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00e      	beq.n	8003c28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d207      	bcs.n	8003c28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <prvAddNewTaskToReadyList+0xd0>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	2000144c 	.word	0x2000144c
 8003c34:	2000134c 	.word	0x2000134c
 8003c38:	20001458 	.word	0x20001458
 8003c3c:	20001468 	.word	0x20001468
 8003c40:	20001454 	.word	0x20001454
 8003c44:	20001350 	.word	0x20001350
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <vTaskDelay+0x60>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <vTaskDelay+0x30>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	60bb      	str	r3, [r7, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c7c:	f000 f884 	bl	8003d88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c80:	2100      	movs	r1, #0
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fe10 	bl	80048a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c88:	f000 f88c 	bl	8003da4 <xTaskResumeAll>
 8003c8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d107      	bne.n	8003ca4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <vTaskDelay+0x64>)
 8003c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20001474 	.word	0x20001474
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cc2:	463a      	mov	r2, r7
 8003cc4:	1d39      	adds	r1, r7, #4
 8003cc6:	f107 0308 	add.w	r3, r7, #8
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fa40 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	9202      	str	r2, [sp, #8]
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	460a      	mov	r2, r1
 8003ce2:	4921      	ldr	r1, [pc, #132]	; (8003d68 <vTaskStartScheduler+0xb4>)
 8003ce4:	4821      	ldr	r0, [pc, #132]	; (8003d6c <vTaskStartScheduler+0xb8>)
 8003ce6:	f7ff fe10 	bl	800390a <xTaskCreateStatic>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4a20      	ldr	r2, [pc, #128]	; (8003d70 <vTaskStartScheduler+0xbc>)
 8003cee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <vTaskStartScheduler+0xbc>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e001      	b.n	8003d02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d11b      	bne.n	8003d40 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	613b      	str	r3, [r7, #16]
}
 8003d1a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d1c:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <vTaskStartScheduler+0xc0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	334c      	adds	r3, #76	; 0x4c
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <vTaskStartScheduler+0xc4>)
 8003d24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d26:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <vTaskStartScheduler+0xc8>)
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <vTaskStartScheduler+0xcc>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <vTaskStartScheduler+0xd0>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d3a:	f000 fe9d 	bl	8004a78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d3e:	e00e      	b.n	8003d5e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d46:	d10a      	bne.n	8003d5e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	60fb      	str	r3, [r7, #12]
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <vTaskStartScheduler+0xa8>
}
 8003d5e:	bf00      	nop
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	08006230 	.word	0x08006230
 8003d6c:	08004331 	.word	0x08004331
 8003d70:	20001470 	.word	0x20001470
 8003d74:	2000134c 	.word	0x2000134c
 8003d78:	20000010 	.word	0x20000010
 8003d7c:	2000146c 	.word	0x2000146c
 8003d80:	20001458 	.word	0x20001458
 8003d84:	20001450 	.word	0x20001450

08003d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <vTaskSuspendAll+0x18>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <vTaskSuspendAll+0x18>)
 8003d94:	6013      	str	r3, [r2, #0]
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20001474 	.word	0x20001474

08003da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003db2:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <xTaskResumeAll+0x114>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	603b      	str	r3, [r7, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	e7fe      	b.n	8003dce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dd0:	f000 fec4 	bl	8004b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dd4:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <xTaskResumeAll+0x114>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4a37      	ldr	r2, [pc, #220]	; (8003eb8 <xTaskResumeAll+0x114>)
 8003ddc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <xTaskResumeAll+0x114>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d161      	bne.n	8003eaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003de6:	4b35      	ldr	r3, [pc, #212]	; (8003ebc <xTaskResumeAll+0x118>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d05d      	beq.n	8003eaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dee:	e02e      	b.n	8003e4e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003df0:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <xTaskResumeAll+0x11c>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3318      	adds	r3, #24
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe ffbf 	bl	8002d80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe ffba 	bl	8002d80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <xTaskResumeAll+0x120>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <xTaskResumeAll+0x120>)
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <xTaskResumeAll+0x124>)
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3304      	adds	r3, #4
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f7fe ff48 	bl	8002cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3e:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <xTaskResumeAll+0x128>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d302      	bcc.n	8003e4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <xTaskResumeAll+0x12c>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <xTaskResumeAll+0x11c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1cc      	bne.n	8003df0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e5c:	f000 fb22 	bl	80044a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e60:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <xTaskResumeAll+0x130>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e6c:	f000 f836 	bl	8003edc <xTaskIncrementTick>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <xTaskResumeAll+0x12c>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f1      	bne.n	8003e6c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e88:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <xTaskResumeAll+0x130>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <xTaskResumeAll+0x12c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <xTaskResumeAll+0x134>)
 8003e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eaa:	f000 fe87 	bl	8004bbc <vPortExitCritical>

	return xAlreadyYielded;
 8003eae:	68bb      	ldr	r3, [r7, #8]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20001474 	.word	0x20001474
 8003ebc:	2000144c 	.word	0x2000144c
 8003ec0:	2000140c 	.word	0x2000140c
 8003ec4:	20001454 	.word	0x20001454
 8003ec8:	20001350 	.word	0x20001350
 8003ecc:	2000134c 	.word	0x2000134c
 8003ed0:	20001460 	.word	0x20001460
 8003ed4:	2000145c 	.word	0x2000145c
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b51      	ldr	r3, [pc, #324]	; (800402c <xTaskIncrementTick+0x150>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 808d 	bne.w	800400a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ef0:	4b4f      	ldr	r3, [pc, #316]	; (8004030 <xTaskIncrementTick+0x154>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <xTaskIncrementTick+0x154>)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d120      	bne.n	8003f46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f04:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <xTaskIncrementTick+0x158>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	603b      	str	r3, [r7, #0]
}
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <xTaskIncrementTick+0x46>
 8003f24:	4b43      	ldr	r3, [pc, #268]	; (8004034 <xTaskIncrementTick+0x158>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	4b43      	ldr	r3, [pc, #268]	; (8004038 <xTaskIncrementTick+0x15c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a41      	ldr	r2, [pc, #260]	; (8004034 <xTaskIncrementTick+0x158>)
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4a41      	ldr	r2, [pc, #260]	; (8004038 <xTaskIncrementTick+0x15c>)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b40      	ldr	r3, [pc, #256]	; (800403c <xTaskIncrementTick+0x160>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	4a3f      	ldr	r2, [pc, #252]	; (800403c <xTaskIncrementTick+0x160>)
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	f000 faaf 	bl	80044a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f46:	4b3e      	ldr	r3, [pc, #248]	; (8004040 <xTaskIncrementTick+0x164>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d34d      	bcc.n	8003fec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f50:	4b38      	ldr	r3, [pc, #224]	; (8004034 <xTaskIncrementTick+0x158>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <xTaskIncrementTick+0x82>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <xTaskIncrementTick+0x84>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f64:	4b36      	ldr	r3, [pc, #216]	; (8004040 <xTaskIncrementTick+0x164>)
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f6a:	601a      	str	r2, [r3, #0]
					break;
 8003f6c:	e03e      	b.n	8003fec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <xTaskIncrementTick+0x158>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d203      	bcs.n	8003f8e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f86:	4a2e      	ldr	r2, [pc, #184]	; (8004040 <xTaskIncrementTick+0x164>)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6013      	str	r3, [r2, #0]
						break;
 8003f8c:	e02e      	b.n	8003fec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fef4 	bl	8002d80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe feeb 	bl	8002d80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	2201      	movs	r2, #1
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <xTaskIncrementTick+0x168>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	4a22      	ldr	r2, [pc, #136]	; (8004044 <xTaskIncrementTick+0x168>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <xTaskIncrementTick+0x16c>)
 8003fca:	441a      	add	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7fe fe79 	bl	8002cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <xTaskIncrementTick+0x170>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3b4      	bcc.n	8003f50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fea:	e7b1      	b.n	8003f50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <xTaskIncrementTick+0x170>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	4915      	ldr	r1, [pc, #84]	; (8004048 <xTaskIncrementTick+0x16c>)
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d907      	bls.n	8004014 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e004      	b.n	8004014 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800400a:	4b11      	ldr	r3, [pc, #68]	; (8004050 <xTaskIncrementTick+0x174>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3301      	adds	r3, #1
 8004010:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <xTaskIncrementTick+0x174>)
 8004012:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <xTaskIncrementTick+0x178>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800401c:	2301      	movs	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004020:	697b      	ldr	r3, [r7, #20]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20001474 	.word	0x20001474
 8004030:	20001450 	.word	0x20001450
 8004034:	20001404 	.word	0x20001404
 8004038:	20001408 	.word	0x20001408
 800403c:	20001464 	.word	0x20001464
 8004040:	2000146c 	.word	0x2000146c
 8004044:	20001454 	.word	0x20001454
 8004048:	20001350 	.word	0x20001350
 800404c:	2000134c 	.word	0x2000134c
 8004050:	2000145c 	.word	0x2000145c
 8004054:	20001460 	.word	0x20001460

08004058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800405e:	4b29      	ldr	r3, [pc, #164]	; (8004104 <vTaskSwitchContext+0xac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <vTaskSwitchContext+0xb0>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800406c:	e044      	b.n	80040f8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <vTaskSwitchContext+0xb0>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <vTaskSwitchContext+0xb4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	fab3 f383 	clz	r3, r3
 8004080:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	f1c3 031f 	rsb	r3, r3, #31
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	4921      	ldr	r1, [pc, #132]	; (8004110 <vTaskSwitchContext+0xb8>)
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	607b      	str	r3, [r7, #4]
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <vTaskSwitchContext+0x5a>
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4a14      	ldr	r2, [pc, #80]	; (8004110 <vTaskSwitchContext+0xb8>)
 80040c0:	4413      	add	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3308      	adds	r3, #8
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d104      	bne.n	80040e4 <vTaskSwitchContext+0x8c>
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	605a      	str	r2, [r3, #4]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <vTaskSwitchContext+0xbc>)
 80040ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <vTaskSwitchContext+0xbc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	334c      	adds	r3, #76	; 0x4c
 80040f4:	4a08      	ldr	r2, [pc, #32]	; (8004118 <vTaskSwitchContext+0xc0>)
 80040f6:	6013      	str	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20001474 	.word	0x20001474
 8004108:	20001460 	.word	0x20001460
 800410c:	20001454 	.word	0x20001454
 8004110:	20001350 	.word	0x20001350
 8004114:	2000134c 	.word	0x2000134c
 8004118:	20000010 	.word	0x20000010

0800411c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <vTaskPlaceOnEventList+0x44>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3318      	adds	r3, #24
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fe fde0 	bl	8002d10 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004150:	2101      	movs	r1, #1
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f000 fba8 	bl	80048a8 <prvAddCurrentTaskToDelayedList>
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000134c 	.word	0x2000134c

08004164 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	60fb      	str	r3, [r7, #12]
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	3318      	adds	r3, #24
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fdf3 	bl	8002d80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <xTaskRemoveFromEventList+0xac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d11c      	bne.n	80041dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fdea 	bl	8002d80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	2201      	movs	r2, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <xTaskRemoveFromEventList+0xb0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	4a16      	ldr	r2, [pc, #88]	; (8004214 <xTaskRemoveFromEventList+0xb0>)
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4a13      	ldr	r2, [pc, #76]	; (8004218 <xTaskRemoveFromEventList+0xb4>)
 80041cc:	441a      	add	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fe fd78 	bl	8002cca <vListInsertEnd>
 80041da:	e005      	b.n	80041e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	3318      	adds	r3, #24
 80041e0:	4619      	mov	r1, r3
 80041e2:	480e      	ldr	r0, [pc, #56]	; (800421c <xTaskRemoveFromEventList+0xb8>)
 80041e4:	f7fe fd71 	bl	8002cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <xTaskRemoveFromEventList+0xbc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d905      	bls.n	8004202 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041f6:	2301      	movs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <xTaskRemoveFromEventList+0xc0>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e001      	b.n	8004206 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004206:	697b      	ldr	r3, [r7, #20]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20001474 	.word	0x20001474
 8004214:	20001454 	.word	0x20001454
 8004218:	20001350 	.word	0x20001350
 800421c:	2000140c 	.word	0x2000140c
 8004220:	2000134c 	.word	0x2000134c
 8004224:	20001460 	.word	0x20001460

08004228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <vTaskInternalSetTimeOutState+0x24>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <vTaskInternalSetTimeOutState+0x28>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	605a      	str	r2, [r3, #4]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20001464 	.word	0x20001464
 8004250:	20001450 	.word	0x20001450

08004254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	613b      	str	r3, [r7, #16]
}
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004296:	f000 fc61 	bl	8004b5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <xTaskCheckForTimeOut+0xbc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b2:	d102      	bne.n	80042ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	e023      	b.n	8004302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <xTaskCheckForTimeOut+0xc0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d007      	beq.n	80042d6 <xTaskCheckForTimeOut+0x82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e015      	b.n	8004302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d20b      	bcs.n	80042f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1ad2      	subs	r2, r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff9b 	bl	8004228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e004      	b.n	8004302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042fe:	2301      	movs	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004302:	f000 fc5b 	bl	8004bbc <vPortExitCritical>

	return xReturn;
 8004306:	69fb      	ldr	r3, [r7, #28]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20001450 	.word	0x20001450
 8004314:	20001464 	.word	0x20001464

08004318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <vTaskMissedYield+0x14>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20001460 	.word	0x20001460

08004330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004338:	f000 f852 	bl	80043e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <prvIdleTask+0x28>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d9f9      	bls.n	8004338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <prvIdleTask+0x2c>)
 8004346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004354:	e7f0      	b.n	8004338 <prvIdleTask+0x8>
 8004356:	bf00      	nop
 8004358:	20001350 	.word	0x20001350
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	e00c      	b.n	8004386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <prvInitialiseTaskLists+0x60>)
 8004378:	4413      	add	r3, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fc7a 	bl	8002c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3301      	adds	r3, #1
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b06      	cmp	r3, #6
 800438a:	d9ef      	bls.n	800436c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800438c:	480d      	ldr	r0, [pc, #52]	; (80043c4 <prvInitialiseTaskLists+0x64>)
 800438e:	f7fe fc71 	bl	8002c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004392:	480d      	ldr	r0, [pc, #52]	; (80043c8 <prvInitialiseTaskLists+0x68>)
 8004394:	f7fe fc6e 	bl	8002c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004398:	480c      	ldr	r0, [pc, #48]	; (80043cc <prvInitialiseTaskLists+0x6c>)
 800439a:	f7fe fc6b 	bl	8002c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800439e:	480c      	ldr	r0, [pc, #48]	; (80043d0 <prvInitialiseTaskLists+0x70>)
 80043a0:	f7fe fc68 	bl	8002c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043a4:	480b      	ldr	r0, [pc, #44]	; (80043d4 <prvInitialiseTaskLists+0x74>)
 80043a6:	f7fe fc65 	bl	8002c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <prvInitialiseTaskLists+0x78>)
 80043ac:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <prvInitialiseTaskLists+0x64>)
 80043ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvInitialiseTaskLists+0x7c>)
 80043b2:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <prvInitialiseTaskLists+0x68>)
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20001350 	.word	0x20001350
 80043c4:	200013dc 	.word	0x200013dc
 80043c8:	200013f0 	.word	0x200013f0
 80043cc:	2000140c 	.word	0x2000140c
 80043d0:	20001420 	.word	0x20001420
 80043d4:	20001438 	.word	0x20001438
 80043d8:	20001404 	.word	0x20001404
 80043dc:	20001408 	.word	0x20001408

080043e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e6:	e019      	b.n	800441c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043e8:	f000 fbb8 	bl	8004b5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <prvCheckTasksWaitingTermination+0x50>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe fcc1 	bl	8002d80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <prvCheckTasksWaitingTermination+0x54>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3b01      	subs	r3, #1
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <prvCheckTasksWaitingTermination+0x54>)
 8004406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <prvCheckTasksWaitingTermination+0x58>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3b01      	subs	r3, #1
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <prvCheckTasksWaitingTermination+0x58>)
 8004410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004412:	f000 fbd3 	bl	8004bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f810 	bl	800443c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <prvCheckTasksWaitingTermination+0x58>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e1      	bne.n	80043e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20001420 	.word	0x20001420
 8004434:	2000144c 	.word	0x2000144c
 8004438:	20001434 	.word	0x20001434

0800443c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	334c      	adds	r3, #76	; 0x4c
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f815 	bl	8005478 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d108      	bne.n	800446a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fd03 	bl	8004e68 <vPortFree>
				vPortFree( pxTCB );
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fd00 	bl	8004e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004468:	e018      	b.n	800449c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d103      	bne.n	800447c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fcf7 	bl	8004e68 <vPortFree>
	}
 800447a:	e00f      	b.n	800449c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004482:	2b02      	cmp	r3, #2
 8004484:	d00a      	beq.n	800449c <prvDeleteTCB+0x60>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60fb      	str	r3, [r7, #12]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <prvDeleteTCB+0x5e>
	}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <prvResetNextTaskUnblockTime+0x40>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <prvResetNextTaskUnblockTime+0x14>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <prvResetNextTaskUnblockTime+0x16>
 80044b8:	2300      	movs	r3, #0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <prvResetNextTaskUnblockTime+0x44>)
 80044c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044c6:	e008      	b.n	80044da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <prvResetNextTaskUnblockTime+0x40>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <prvResetNextTaskUnblockTime+0x44>)
 80044d8:	6013      	str	r3, [r2, #0]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	20001404 	.word	0x20001404
 80044e8:	2000146c 	.word	0x2000146c

080044ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <xTaskGetSchedulerState+0x34>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044fa:	2301      	movs	r3, #1
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e008      	b.n	8004512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <xTaskGetSchedulerState+0x38>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004508:	2302      	movs	r3, #2
 800450a:	607b      	str	r3, [r7, #4]
 800450c:	e001      	b.n	8004512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004512:	687b      	ldr	r3, [r7, #4]
	}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20001458 	.word	0x20001458
 8004524:	20001474 	.word	0x20001474

08004528 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d06e      	beq.n	800461c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b39      	ldr	r3, [pc, #228]	; (8004628 <xTaskPriorityInherit+0x100>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d25e      	bcs.n	800460a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db06      	blt.n	8004562 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004554:	4b34      	ldr	r3, [pc, #208]	; (8004628 <xTaskPriorityInherit+0x100>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f1c3 0207 	rsb	r2, r3, #7
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6959      	ldr	r1, [r3, #20]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4a2e      	ldr	r2, [pc, #184]	; (800462c <xTaskPriorityInherit+0x104>)
 8004574:	4413      	add	r3, r2
 8004576:	4299      	cmp	r1, r3
 8004578:	d101      	bne.n	800457e <xTaskPriorityInherit+0x56>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <xTaskPriorityInherit+0x58>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03a      	beq.n	80045fa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	3304      	adds	r3, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fbf9 	bl	8002d80 <uxListRemove>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d115      	bne.n	80045c0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	4924      	ldr	r1, [pc, #144]	; (800462c <xTaskPriorityInherit+0x104>)
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <xTaskPriorityInherit+0x98>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	2201      	movs	r2, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43da      	mvns	r2, r3
 80045b6:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <xTaskPriorityInherit+0x108>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4013      	ands	r3, r2
 80045bc:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <xTaskPriorityInherit+0x108>)
 80045be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <xTaskPriorityInherit+0x100>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	2201      	movs	r2, #1
 80045d0:	409a      	lsls	r2, r3
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <xTaskPriorityInherit+0x108>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	4a15      	ldr	r2, [pc, #84]	; (8004630 <xTaskPriorityInherit+0x108>)
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4a10      	ldr	r2, [pc, #64]	; (800462c <xTaskPriorityInherit+0x104>)
 80045ea:	441a      	add	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f7fe fb69 	bl	8002cca <vListInsertEnd>
 80045f8:	e004      	b.n	8004604 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <xTaskPriorityInherit+0x100>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e008      	b.n	800461c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <xTaskPriorityInherit+0x100>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	429a      	cmp	r2, r3
 8004616:	d201      	bcs.n	800461c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800461c:	68fb      	ldr	r3, [r7, #12]
	}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	2000134c 	.word	0x2000134c
 800462c:	20001350 	.word	0x20001350
 8004630:	20001454 	.word	0x20001454

08004634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d06e      	beq.n	8004728 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800464a:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <xTaskPriorityDisinherit+0x100>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	429a      	cmp	r2, r3
 8004652:	d00a      	beq.n	800466a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	60fb      	str	r3, [r7, #12]
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60bb      	str	r3, [r7, #8]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	429a      	cmp	r2, r3
 800469c:	d044      	beq.n	8004728 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d140      	bne.n	8004728 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fb68 	bl	8002d80 <uxListRemove>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d115      	bne.n	80046e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	491f      	ldr	r1, [pc, #124]	; (8004738 <xTaskPriorityDisinherit+0x104>)
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <xTaskPriorityDisinherit+0xae>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	2201      	movs	r2, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <xTaskPriorityDisinherit+0x108>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4013      	ands	r3, r2
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <xTaskPriorityDisinherit+0x108>)
 80046e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	f1c3 0207 	rsb	r2, r3, #7
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	2201      	movs	r2, #1
 80046fc:	409a      	lsls	r2, r3
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <xTaskPriorityDisinherit+0x108>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	4a0d      	ldr	r2, [pc, #52]	; (800473c <xTaskPriorityDisinherit+0x108>)
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4a08      	ldr	r2, [pc, #32]	; (8004738 <xTaskPriorityDisinherit+0x104>)
 8004716:	441a      	add	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f7fe fad3 	bl	8002cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004728:	697b      	ldr	r3, [r7, #20]
	}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	2000134c 	.word	0x2000134c
 8004738:	20001350 	.word	0x20001350
 800473c:	20001454 	.word	0x20001454

08004740 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800474e:	2301      	movs	r3, #1
 8004750:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8088 	beq.w	800486a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	60fb      	str	r3, [r7, #12]
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d902      	bls.n	8004788 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	e002      	b.n	800478e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	429a      	cmp	r2, r3
 8004796:	d068      	beq.n	800486a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d163      	bne.n	800486a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80047a2:	4b34      	ldr	r3, [pc, #208]	; (8004874 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d10a      	bne.n	80047c2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60bb      	str	r3, [r7, #8]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	db04      	blt.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f1c3 0207 	rsb	r2, r3, #7
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6959      	ldr	r1, [r3, #20]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4a22      	ldr	r2, [pc, #136]	; (8004878 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80047f0:	4413      	add	r3, r2
 80047f2:	4299      	cmp	r1, r3
 80047f4:	d101      	bne.n	80047fa <vTaskPriorityDisinheritAfterTimeout+0xba>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d034      	beq.n	800486a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fabb 	bl	8002d80 <uxListRemove>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d115      	bne.n	800483c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4918      	ldr	r1, [pc, #96]	; (8004878 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	2201      	movs	r2, #1
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43da      	mvns	r2, r3
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4013      	ands	r3, r2
 8004838:	4a10      	ldr	r2, [pc, #64]	; (800487c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800483a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	2201      	movs	r2, #1
 8004842:	409a      	lsls	r2, r3
 8004844:	4b0d      	ldr	r3, [pc, #52]	; (800487c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4313      	orrs	r3, r2
 800484a:	4a0c      	ldr	r2, [pc, #48]	; (800487c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800485c:	441a      	add	r2, r3
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	3304      	adds	r3, #4
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f7fe fa30 	bl	8002cca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800486a:	bf00      	nop
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	2000134c 	.word	0x2000134c
 8004878:	20001350 	.word	0x20001350
 800487c:	20001454 	.word	0x20001454

08004880 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004892:	3201      	adds	r2, #1
 8004894:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004896:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004898:	681b      	ldr	r3, [r3, #0]
	}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000134c 	.word	0x2000134c

080048a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <prvAddCurrentTaskToDelayedList+0xb0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b8:	4b28      	ldr	r3, [pc, #160]	; (800495c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3304      	adds	r3, #4
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe fa5e 	bl	8002d80 <uxListRemove>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	2201      	movs	r2, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43da      	mvns	r2, r3
 80048d8:	4b21      	ldr	r3, [pc, #132]	; (8004960 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4013      	ands	r3, r2
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e8:	d10a      	bne.n	8004900 <prvAddCurrentTaskToDelayedList+0x58>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	481a      	ldr	r0, [pc, #104]	; (8004964 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048fa:	f7fe f9e6 	bl	8002cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048fe:	e026      	b.n	800494e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4413      	add	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004908:	4b14      	ldr	r3, [pc, #80]	; (800495c <prvAddCurrentTaskToDelayedList+0xb4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	429a      	cmp	r2, r3
 8004916:	d209      	bcs.n	800492c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <prvAddCurrentTaskToDelayedList+0xc0>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <prvAddCurrentTaskToDelayedList+0xb4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3304      	adds	r3, #4
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f7fe f9f3 	bl	8002d10 <vListInsert>
}
 800492a:	e010      	b.n	800494e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <prvAddCurrentTaskToDelayedList+0xc4>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7fe f9e9 	bl	8002d10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d202      	bcs.n	800494e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <prvAddCurrentTaskToDelayedList+0xc8>)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6013      	str	r3, [r2, #0]
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20001450 	.word	0x20001450
 800495c:	2000134c 	.word	0x2000134c
 8004960:	20001454 	.word	0x20001454
 8004964:	20001438 	.word	0x20001438
 8004968:	20001408 	.word	0x20001408
 800496c:	20001404 	.word	0x20001404
 8004970:	2000146c 	.word	0x2000146c

08004974 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3b04      	subs	r3, #4
 8004984:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800498c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3b04      	subs	r3, #4
 8004992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3b04      	subs	r3, #4
 80049a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <pxPortInitialiseStack+0x54>)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3b14      	subs	r3, #20
 80049ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b20      	subs	r3, #32
 80049ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049bc:	68fb      	ldr	r3, [r7, #12]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	080049cd 	.word	0x080049cd

080049cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <prvTaskExitError+0x54>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049de:	d00a      	beq.n	80049f6 <prvTaskExitError+0x2a>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60fb      	str	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <prvTaskExitError+0x28>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60bb      	str	r3, [r7, #8]
}
 8004a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a0a:	bf00      	nop
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0fc      	beq.n	8004a0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000000c 	.word	0x2000000c
	...

08004a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <pxCurrentTCBConst2>)
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	6808      	ldr	r0, [r1, #0]
 8004a36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a3a:	f380 8809 	msr	PSP, r0
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8811 	msr	BASEPRI, r0
 8004a4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a4e:	4770      	bx	lr

08004a50 <pxCurrentTCBConst2>:
 8004a50:	2000134c 	.word	0x2000134c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop

08004a58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a58:	4806      	ldr	r0, [pc, #24]	; (8004a74 <prvPortStartFirstTask+0x1c>)
 8004a5a:	6800      	ldr	r0, [r0, #0]
 8004a5c:	6800      	ldr	r0, [r0, #0]
 8004a5e:	f380 8808 	msr	MSP, r0
 8004a62:	b662      	cpsie	i
 8004a64:	b661      	cpsie	f
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	df00      	svc	0
 8004a70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a72:	bf00      	nop
 8004a74:	e000ed08 	.word	0xe000ed08

08004a78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a7e:	4b32      	ldr	r3, [pc, #200]	; (8004b48 <xPortStartScheduler+0xd0>)
 8004a80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	22ff      	movs	r2, #255	; 0xff
 8004a8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <xPortStartScheduler+0xd4>)
 8004aa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004aa6:	4b2a      	ldr	r3, [pc, #168]	; (8004b50 <xPortStartScheduler+0xd8>)
 8004aa8:	2207      	movs	r2, #7
 8004aaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aac:	e009      	b.n	8004ac2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <xPortStartScheduler+0xd8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <xPortStartScheduler+0xd8>)
 8004ab6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b80      	cmp	r3, #128	; 0x80
 8004acc:	d0ef      	beq.n	8004aae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <xPortStartScheduler+0xd8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1c3 0307 	rsb	r3, r3, #7
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d00a      	beq.n	8004af0 <xPortStartScheduler+0x78>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	60bb      	str	r3, [r7, #8]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <xPortStartScheduler+0xd8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	4a16      	ldr	r2, [pc, #88]	; (8004b50 <xPortStartScheduler+0xd8>)
 8004af8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <xPortStartScheduler+0xd8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b02:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <xPortStartScheduler+0xd8>)
 8004b04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <xPortStartScheduler+0xdc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <xPortStartScheduler+0xdc>)
 8004b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <xPortStartScheduler+0xdc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a0d      	ldr	r2, [pc, #52]	; (8004b54 <xPortStartScheduler+0xdc>)
 8004b20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b26:	f000 f8b9 	bl	8004c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <xPortStartScheduler+0xe0>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b30:	f7ff ff92 	bl	8004a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b34:	f7ff fa90 	bl	8004058 <vTaskSwitchContext>
	prvTaskExitError();
 8004b38:	f7ff ff48 	bl	80049cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000e400 	.word	0xe000e400
 8004b4c:	20001478 	.word	0x20001478
 8004b50:	2000147c 	.word	0x2000147c
 8004b54:	e000ed20 	.word	0xe000ed20
 8004b58:	2000000c 	.word	0x2000000c

08004b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	607b      	str	r3, [r7, #4]
}
 8004b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <vPortEnterCritical+0x58>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	4a0d      	ldr	r2, [pc, #52]	; (8004bb4 <vPortEnterCritical+0x58>)
 8004b7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <vPortEnterCritical+0x58>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10f      	bne.n	8004ba8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <vPortEnterCritical+0x5c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	603b      	str	r3, [r7, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <vPortEnterCritical+0x4a>
	}
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	2000000c 	.word	0x2000000c
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <vPortExitCritical+0x4c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <vPortExitCritical+0x24>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	607b      	str	r3, [r7, #4]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <vPortExitCritical+0x4c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <vPortExitCritical+0x4c>)
 8004be8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bea:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <vPortExitCritical+0x4c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d105      	bne.n	8004bfe <vPortExitCritical+0x42>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bfc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	2000000c 	.word	0x2000000c
 8004c0c:	00000000 	.word	0x00000000

08004c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c10:	f3ef 8009 	mrs	r0, PSP
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <pxCurrentTCBConst>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c20:	6010      	str	r0, [r2, #0]
 8004c22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c2a:	f380 8811 	msr	BASEPRI, r0
 8004c2e:	f7ff fa13 	bl	8004058 <vTaskSwitchContext>
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	6808      	ldr	r0, [r1, #0]
 8004c42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c46:	f380 8809 	msr	PSP, r0
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	4770      	bx	lr

08004c50 <pxCurrentTCBConst>:
 8004c50:	2000134c 	.word	0x2000134c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop

08004c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	607b      	str	r3, [r7, #4]
}
 8004c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c72:	f7ff f933 	bl	8003edc <xTaskIncrementTick>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <SysTick_Handler+0x40>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	2300      	movs	r3, #0
 8004c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f383 8811 	msr	BASEPRI, r3
}
 8004c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <vPortSetupTimerInterrupt+0x30>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <vPortSetupTimerInterrupt+0x34>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <vPortSetupTimerInterrupt+0x38>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <vPortSetupTimerInterrupt+0x3c>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	4a08      	ldr	r2, [pc, #32]	; (8004cdc <vPortSetupTimerInterrupt+0x40>)
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cbe:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <vPortSetupTimerInterrupt+0x30>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	e000e010 	.word	0xe000e010
 8004cd0:	e000e018 	.word	0xe000e018
 8004cd4:	20000000 	.word	0x20000000
 8004cd8:	10624dd3 	.word	0x10624dd3
 8004cdc:	e000e014 	.word	0xe000e014

08004ce0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	; 0x28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cec:	f7ff f84c 	bl	8003d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cf0:	4b58      	ldr	r3, [pc, #352]	; (8004e54 <pvPortMalloc+0x174>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cf8:	f000 f910 	bl	8004f1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cfc:	4b56      	ldr	r3, [pc, #344]	; (8004e58 <pvPortMalloc+0x178>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f040 808e 	bne.w	8004e26 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01d      	beq.n	8004d4c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d10:	2208      	movs	r2, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4413      	add	r3, r2
 8004d16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d014      	beq.n	8004d4c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f023 0307 	bic.w	r3, r3, #7
 8004d28:	3308      	adds	r3, #8
 8004d2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <pvPortMalloc+0x6c>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	617b      	str	r3, [r7, #20]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d069      	beq.n	8004e26 <pvPortMalloc+0x146>
 8004d52:	4b42      	ldr	r3, [pc, #264]	; (8004e5c <pvPortMalloc+0x17c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d864      	bhi.n	8004e26 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d5c:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <pvPortMalloc+0x180>)
 8004d5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d60:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <pvPortMalloc+0x180>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d66:	e004      	b.n	8004d72 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d903      	bls.n	8004d84 <pvPortMalloc+0xa4>
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f1      	bne.n	8004d68 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d84:	4b33      	ldr	r3, [pc, #204]	; (8004e54 <pvPortMalloc+0x174>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d04b      	beq.n	8004e26 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2208      	movs	r2, #8
 8004d94:	4413      	add	r3, r2
 8004d96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	2308      	movs	r3, #8
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d91f      	bls.n	8004df0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <pvPortMalloc+0xf8>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	613b      	str	r3, [r7, #16]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dea:	69b8      	ldr	r0, [r7, #24]
 8004dec:	f000 f8f8 	bl	8004fe0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004df0:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <pvPortMalloc+0x17c>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <pvPortMalloc+0x17c>)
 8004dfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dfe:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <pvPortMalloc+0x17c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b18      	ldr	r3, [pc, #96]	; (8004e64 <pvPortMalloc+0x184>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d203      	bcs.n	8004e12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <pvPortMalloc+0x17c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <pvPortMalloc+0x184>)
 8004e10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <pvPortMalloc+0x178>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e26:	f7fe ffbd 	bl	8003da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <pvPortMalloc+0x16a>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <pvPortMalloc+0x168>
	return pvReturn;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3728      	adds	r7, #40	; 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20002088 	.word	0x20002088
 8004e58:	20002094 	.word	0x20002094
 8004e5c:	2000208c 	.word	0x2000208c
 8004e60:	20002080 	.word	0x20002080
 8004e64:	20002090 	.word	0x20002090

08004e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d048      	beq.n	8004f0c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4413      	add	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <vPortFree+0xac>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <vPortFree+0x44>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60fb      	str	r3, [r7, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <vPortFree+0x62>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	60bb      	str	r3, [r7, #8]
}
 8004ec6:	bf00      	nop
 8004ec8:	e7fe      	b.n	8004ec8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <vPortFree+0xac>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d019      	beq.n	8004f0c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d115      	bne.n	8004f0c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <vPortFree+0xac>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	401a      	ands	r2, r3
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ef0:	f7fe ff4a 	bl	8003d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <vPortFree+0xb0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4413      	add	r3, r2
 8004efe:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <vPortFree+0xb0>)
 8004f00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f02:	6938      	ldr	r0, [r7, #16]
 8004f04:	f000 f86c 	bl	8004fe0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f08:	f7fe ff4c 	bl	8003da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20002094 	.word	0x20002094
 8004f18:	2000208c 	.word	0x2000208c

08004f1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f28:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <prvHeapInit+0xac>)
 8004f2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3307      	adds	r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0307 	bic.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <prvHeapInit+0xac>)
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <prvHeapInit+0xb0>)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <prvHeapInit+0xb0>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4413      	add	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f68:	2208      	movs	r2, #8
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <prvHeapInit+0xb4>)
 8004f7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f7e:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <prvHeapInit+0xb4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f86:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <prvHeapInit+0xb4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <prvHeapInit+0xb4>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <prvHeapInit+0xb8>)
 8004faa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <prvHeapInit+0xbc>)
 8004fb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <prvHeapInit+0xc0>)
 8004fb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fba:	601a      	str	r2, [r3, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20001480 	.word	0x20001480
 8004fcc:	20002080 	.word	0x20002080
 8004fd0:	20002088 	.word	0x20002088
 8004fd4:	20002090 	.word	0x20002090
 8004fd8:	2000208c 	.word	0x2000208c
 8004fdc:	20002094 	.word	0x20002094

08004fe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fe8:	4b27      	ldr	r3, [pc, #156]	; (8005088 <prvInsertBlockIntoFreeList+0xa8>)
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e002      	b.n	8004ff4 <prvInsertBlockIntoFreeList+0x14>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d8f7      	bhi.n	8004fee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	4413      	add	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d108      	bne.n	8005022 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	441a      	add	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d118      	bne.n	8005068 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <prvInsertBlockIntoFreeList+0xac>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d00d      	beq.n	800505e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	441a      	add	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e008      	b.n	8005070 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800505e:	4b0b      	ldr	r3, [pc, #44]	; (800508c <prvInsertBlockIntoFreeList+0xac>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e003      	b.n	8005070 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d002      	beq.n	800507e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr
 8005088:	20002080 	.word	0x20002080
 800508c:	20002088 	.word	0x20002088

08005090 <__errno>:
 8005090:	4b01      	ldr	r3, [pc, #4]	; (8005098 <__errno+0x8>)
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20000010 	.word	0x20000010

0800509c <std>:
 800509c:	2300      	movs	r3, #0
 800509e:	b510      	push	{r4, lr}
 80050a0:	4604      	mov	r4, r0
 80050a2:	e9c0 3300 	strd	r3, r3, [r0]
 80050a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050aa:	6083      	str	r3, [r0, #8]
 80050ac:	8181      	strh	r1, [r0, #12]
 80050ae:	6643      	str	r3, [r0, #100]	; 0x64
 80050b0:	81c2      	strh	r2, [r0, #14]
 80050b2:	6183      	str	r3, [r0, #24]
 80050b4:	4619      	mov	r1, r3
 80050b6:	2208      	movs	r2, #8
 80050b8:	305c      	adds	r0, #92	; 0x5c
 80050ba:	f000 f91a 	bl	80052f2 <memset>
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <std+0x38>)
 80050c0:	6224      	str	r4, [r4, #32]
 80050c2:	6263      	str	r3, [r4, #36]	; 0x24
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <std+0x3c>)
 80050c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <std+0x40>)
 80050ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050cc:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <std+0x44>)
 80050ce:	6323      	str	r3, [r4, #48]	; 0x30
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	bf00      	nop
 80050d4:	08005551 	.word	0x08005551
 80050d8:	08005573 	.word	0x08005573
 80050dc:	080055ab 	.word	0x080055ab
 80050e0:	080055cf 	.word	0x080055cf

080050e4 <_cleanup_r>:
 80050e4:	4901      	ldr	r1, [pc, #4]	; (80050ec <_cleanup_r+0x8>)
 80050e6:	f000 b8af 	b.w	8005248 <_fwalk_reent>
 80050ea:	bf00      	nop
 80050ec:	08005721 	.word	0x08005721

080050f0 <__sfmoreglue>:
 80050f0:	2268      	movs	r2, #104	; 0x68
 80050f2:	b570      	push	{r4, r5, r6, lr}
 80050f4:	1e4d      	subs	r5, r1, #1
 80050f6:	4355      	muls	r5, r2
 80050f8:	460e      	mov	r6, r1
 80050fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050fe:	f000 f921 	bl	8005344 <_malloc_r>
 8005102:	4604      	mov	r4, r0
 8005104:	b140      	cbz	r0, 8005118 <__sfmoreglue+0x28>
 8005106:	2100      	movs	r1, #0
 8005108:	e9c0 1600 	strd	r1, r6, [r0]
 800510c:	300c      	adds	r0, #12
 800510e:	60a0      	str	r0, [r4, #8]
 8005110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005114:	f000 f8ed 	bl	80052f2 <memset>
 8005118:	4620      	mov	r0, r4
 800511a:	bd70      	pop	{r4, r5, r6, pc}

0800511c <__sfp_lock_acquire>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__sfp_lock_acquire+0x8>)
 800511e:	f000 b8d8 	b.w	80052d2 <__retarget_lock_acquire_recursive>
 8005122:	bf00      	nop
 8005124:	20002099 	.word	0x20002099

08005128 <__sfp_lock_release>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__sfp_lock_release+0x8>)
 800512a:	f000 b8d3 	b.w	80052d4 <__retarget_lock_release_recursive>
 800512e:	bf00      	nop
 8005130:	20002099 	.word	0x20002099

08005134 <__sinit_lock_acquire>:
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <__sinit_lock_acquire+0x8>)
 8005136:	f000 b8cc 	b.w	80052d2 <__retarget_lock_acquire_recursive>
 800513a:	bf00      	nop
 800513c:	2000209a 	.word	0x2000209a

08005140 <__sinit_lock_release>:
 8005140:	4801      	ldr	r0, [pc, #4]	; (8005148 <__sinit_lock_release+0x8>)
 8005142:	f000 b8c7 	b.w	80052d4 <__retarget_lock_release_recursive>
 8005146:	bf00      	nop
 8005148:	2000209a 	.word	0x2000209a

0800514c <__sinit>:
 800514c:	b510      	push	{r4, lr}
 800514e:	4604      	mov	r4, r0
 8005150:	f7ff fff0 	bl	8005134 <__sinit_lock_acquire>
 8005154:	69a3      	ldr	r3, [r4, #24]
 8005156:	b11b      	cbz	r3, 8005160 <__sinit+0x14>
 8005158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800515c:	f7ff bff0 	b.w	8005140 <__sinit_lock_release>
 8005160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005164:	6523      	str	r3, [r4, #80]	; 0x50
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <__sinit+0x68>)
 8005168:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <__sinit+0x6c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	62a2      	str	r2, [r4, #40]	; 0x28
 800516e:	42a3      	cmp	r3, r4
 8005170:	bf08      	it	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	4620      	mov	r0, r4
 8005176:	bf08      	it	eq
 8005178:	61a3      	streq	r3, [r4, #24]
 800517a:	f000 f81f 	bl	80051bc <__sfp>
 800517e:	6060      	str	r0, [r4, #4]
 8005180:	4620      	mov	r0, r4
 8005182:	f000 f81b 	bl	80051bc <__sfp>
 8005186:	60a0      	str	r0, [r4, #8]
 8005188:	4620      	mov	r0, r4
 800518a:	f000 f817 	bl	80051bc <__sfp>
 800518e:	2200      	movs	r2, #0
 8005190:	2104      	movs	r1, #4
 8005192:	60e0      	str	r0, [r4, #12]
 8005194:	6860      	ldr	r0, [r4, #4]
 8005196:	f7ff ff81 	bl	800509c <std>
 800519a:	2201      	movs	r2, #1
 800519c:	2109      	movs	r1, #9
 800519e:	68a0      	ldr	r0, [r4, #8]
 80051a0:	f7ff ff7c 	bl	800509c <std>
 80051a4:	2202      	movs	r2, #2
 80051a6:	2112      	movs	r1, #18
 80051a8:	68e0      	ldr	r0, [r4, #12]
 80051aa:	f7ff ff77 	bl	800509c <std>
 80051ae:	2301      	movs	r3, #1
 80051b0:	61a3      	str	r3, [r4, #24]
 80051b2:	e7d1      	b.n	8005158 <__sinit+0xc>
 80051b4:	080062b0 	.word	0x080062b0
 80051b8:	080050e5 	.word	0x080050e5

080051bc <__sfp>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	4607      	mov	r7, r0
 80051c0:	f7ff ffac 	bl	800511c <__sfp_lock_acquire>
 80051c4:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <__sfp+0x84>)
 80051c6:	681e      	ldr	r6, [r3, #0]
 80051c8:	69b3      	ldr	r3, [r6, #24]
 80051ca:	b913      	cbnz	r3, 80051d2 <__sfp+0x16>
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7ff ffbd 	bl	800514c <__sinit>
 80051d2:	3648      	adds	r6, #72	; 0x48
 80051d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051d8:	3b01      	subs	r3, #1
 80051da:	d503      	bpl.n	80051e4 <__sfp+0x28>
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	b30b      	cbz	r3, 8005224 <__sfp+0x68>
 80051e0:	6836      	ldr	r6, [r6, #0]
 80051e2:	e7f7      	b.n	80051d4 <__sfp+0x18>
 80051e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051e8:	b9d5      	cbnz	r5, 8005220 <__sfp+0x64>
 80051ea:	4b16      	ldr	r3, [pc, #88]	; (8005244 <__sfp+0x88>)
 80051ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051f0:	60e3      	str	r3, [r4, #12]
 80051f2:	6665      	str	r5, [r4, #100]	; 0x64
 80051f4:	f000 f86c 	bl	80052d0 <__retarget_lock_init_recursive>
 80051f8:	f7ff ff96 	bl	8005128 <__sfp_lock_release>
 80051fc:	2208      	movs	r2, #8
 80051fe:	4629      	mov	r1, r5
 8005200:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005204:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005208:	6025      	str	r5, [r4, #0]
 800520a:	61a5      	str	r5, [r4, #24]
 800520c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005210:	f000 f86f 	bl	80052f2 <memset>
 8005214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800521c:	4620      	mov	r0, r4
 800521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005220:	3468      	adds	r4, #104	; 0x68
 8005222:	e7d9      	b.n	80051d8 <__sfp+0x1c>
 8005224:	2104      	movs	r1, #4
 8005226:	4638      	mov	r0, r7
 8005228:	f7ff ff62 	bl	80050f0 <__sfmoreglue>
 800522c:	4604      	mov	r4, r0
 800522e:	6030      	str	r0, [r6, #0]
 8005230:	2800      	cmp	r0, #0
 8005232:	d1d5      	bne.n	80051e0 <__sfp+0x24>
 8005234:	f7ff ff78 	bl	8005128 <__sfp_lock_release>
 8005238:	230c      	movs	r3, #12
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	e7ee      	b.n	800521c <__sfp+0x60>
 800523e:	bf00      	nop
 8005240:	080062b0 	.word	0x080062b0
 8005244:	ffff0001 	.word	0xffff0001

08005248 <_fwalk_reent>:
 8005248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800524c:	4606      	mov	r6, r0
 800524e:	4688      	mov	r8, r1
 8005250:	2700      	movs	r7, #0
 8005252:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800525a:	f1b9 0901 	subs.w	r9, r9, #1
 800525e:	d505      	bpl.n	800526c <_fwalk_reent+0x24>
 8005260:	6824      	ldr	r4, [r4, #0]
 8005262:	2c00      	cmp	r4, #0
 8005264:	d1f7      	bne.n	8005256 <_fwalk_reent+0xe>
 8005266:	4638      	mov	r0, r7
 8005268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526c:	89ab      	ldrh	r3, [r5, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d907      	bls.n	8005282 <_fwalk_reent+0x3a>
 8005272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005276:	3301      	adds	r3, #1
 8005278:	d003      	beq.n	8005282 <_fwalk_reent+0x3a>
 800527a:	4629      	mov	r1, r5
 800527c:	4630      	mov	r0, r6
 800527e:	47c0      	blx	r8
 8005280:	4307      	orrs	r7, r0
 8005282:	3568      	adds	r5, #104	; 0x68
 8005284:	e7e9      	b.n	800525a <_fwalk_reent+0x12>
	...

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	2600      	movs	r6, #0
 800528c:	4d0c      	ldr	r5, [pc, #48]	; (80052c0 <__libc_init_array+0x38>)
 800528e:	4c0d      	ldr	r4, [pc, #52]	; (80052c4 <__libc_init_array+0x3c>)
 8005290:	1b64      	subs	r4, r4, r5
 8005292:	10a4      	asrs	r4, r4, #2
 8005294:	42a6      	cmp	r6, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	f000 ff3a 	bl	8006110 <_init>
 800529c:	2600      	movs	r6, #0
 800529e:	4d0a      	ldr	r5, [pc, #40]	; (80052c8 <__libc_init_array+0x40>)
 80052a0:	4c0a      	ldr	r4, [pc, #40]	; (80052cc <__libc_init_array+0x44>)
 80052a2:	1b64      	subs	r4, r4, r5
 80052a4:	10a4      	asrs	r4, r4, #2
 80052a6:	42a6      	cmp	r6, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b0:	4798      	blx	r3
 80052b2:	3601      	adds	r6, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ba:	4798      	blx	r3
 80052bc:	3601      	adds	r6, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	080062e8 	.word	0x080062e8
 80052c4:	080062e8 	.word	0x080062e8
 80052c8:	080062e8 	.word	0x080062e8
 80052cc:	080062ec 	.word	0x080062ec

080052d0 <__retarget_lock_init_recursive>:
 80052d0:	4770      	bx	lr

080052d2 <__retarget_lock_acquire_recursive>:
 80052d2:	4770      	bx	lr

080052d4 <__retarget_lock_release_recursive>:
 80052d4:	4770      	bx	lr

080052d6 <memcpy>:
 80052d6:	440a      	add	r2, r1
 80052d8:	4291      	cmp	r1, r2
 80052da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80052de:	d100      	bne.n	80052e2 <memcpy+0xc>
 80052e0:	4770      	bx	lr
 80052e2:	b510      	push	{r4, lr}
 80052e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e8:	4291      	cmp	r1, r2
 80052ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ee:	d1f9      	bne.n	80052e4 <memcpy+0xe>
 80052f0:	bd10      	pop	{r4, pc}

080052f2 <memset>:
 80052f2:	4603      	mov	r3, r0
 80052f4:	4402      	add	r2, r0
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d100      	bne.n	80052fc <memset+0xa>
 80052fa:	4770      	bx	lr
 80052fc:	f803 1b01 	strb.w	r1, [r3], #1
 8005300:	e7f9      	b.n	80052f6 <memset+0x4>
	...

08005304 <sbrk_aligned>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	4e0e      	ldr	r6, [pc, #56]	; (8005340 <sbrk_aligned+0x3c>)
 8005308:	460c      	mov	r4, r1
 800530a:	6831      	ldr	r1, [r6, #0]
 800530c:	4605      	mov	r5, r0
 800530e:	b911      	cbnz	r1, 8005316 <sbrk_aligned+0x12>
 8005310:	f000 f90e 	bl	8005530 <_sbrk_r>
 8005314:	6030      	str	r0, [r6, #0]
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f000 f909 	bl	8005530 <_sbrk_r>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	d00a      	beq.n	8005338 <sbrk_aligned+0x34>
 8005322:	1cc4      	adds	r4, r0, #3
 8005324:	f024 0403 	bic.w	r4, r4, #3
 8005328:	42a0      	cmp	r0, r4
 800532a:	d007      	beq.n	800533c <sbrk_aligned+0x38>
 800532c:	1a21      	subs	r1, r4, r0
 800532e:	4628      	mov	r0, r5
 8005330:	f000 f8fe 	bl	8005530 <_sbrk_r>
 8005334:	3001      	adds	r0, #1
 8005336:	d101      	bne.n	800533c <sbrk_aligned+0x38>
 8005338:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800533c:	4620      	mov	r0, r4
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	200020a0 	.word	0x200020a0

08005344 <_malloc_r>:
 8005344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005348:	1ccd      	adds	r5, r1, #3
 800534a:	f025 0503 	bic.w	r5, r5, #3
 800534e:	3508      	adds	r5, #8
 8005350:	2d0c      	cmp	r5, #12
 8005352:	bf38      	it	cc
 8005354:	250c      	movcc	r5, #12
 8005356:	2d00      	cmp	r5, #0
 8005358:	4607      	mov	r7, r0
 800535a:	db01      	blt.n	8005360 <_malloc_r+0x1c>
 800535c:	42a9      	cmp	r1, r5
 800535e:	d905      	bls.n	800536c <_malloc_r+0x28>
 8005360:	230c      	movs	r3, #12
 8005362:	2600      	movs	r6, #0
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	4630      	mov	r0, r6
 8005368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800536c:	4e2e      	ldr	r6, [pc, #184]	; (8005428 <_malloc_r+0xe4>)
 800536e:	f000 fa25 	bl	80057bc <__malloc_lock>
 8005372:	6833      	ldr	r3, [r6, #0]
 8005374:	461c      	mov	r4, r3
 8005376:	bb34      	cbnz	r4, 80053c6 <_malloc_r+0x82>
 8005378:	4629      	mov	r1, r5
 800537a:	4638      	mov	r0, r7
 800537c:	f7ff ffc2 	bl	8005304 <sbrk_aligned>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	4604      	mov	r4, r0
 8005384:	d14d      	bne.n	8005422 <_malloc_r+0xde>
 8005386:	6834      	ldr	r4, [r6, #0]
 8005388:	4626      	mov	r6, r4
 800538a:	2e00      	cmp	r6, #0
 800538c:	d140      	bne.n	8005410 <_malloc_r+0xcc>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	4631      	mov	r1, r6
 8005392:	4638      	mov	r0, r7
 8005394:	eb04 0803 	add.w	r8, r4, r3
 8005398:	f000 f8ca 	bl	8005530 <_sbrk_r>
 800539c:	4580      	cmp	r8, r0
 800539e:	d13a      	bne.n	8005416 <_malloc_r+0xd2>
 80053a0:	6821      	ldr	r1, [r4, #0]
 80053a2:	3503      	adds	r5, #3
 80053a4:	1a6d      	subs	r5, r5, r1
 80053a6:	f025 0503 	bic.w	r5, r5, #3
 80053aa:	3508      	adds	r5, #8
 80053ac:	2d0c      	cmp	r5, #12
 80053ae:	bf38      	it	cc
 80053b0:	250c      	movcc	r5, #12
 80053b2:	4638      	mov	r0, r7
 80053b4:	4629      	mov	r1, r5
 80053b6:	f7ff ffa5 	bl	8005304 <sbrk_aligned>
 80053ba:	3001      	adds	r0, #1
 80053bc:	d02b      	beq.n	8005416 <_malloc_r+0xd2>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	442b      	add	r3, r5
 80053c2:	6023      	str	r3, [r4, #0]
 80053c4:	e00e      	b.n	80053e4 <_malloc_r+0xa0>
 80053c6:	6822      	ldr	r2, [r4, #0]
 80053c8:	1b52      	subs	r2, r2, r5
 80053ca:	d41e      	bmi.n	800540a <_malloc_r+0xc6>
 80053cc:	2a0b      	cmp	r2, #11
 80053ce:	d916      	bls.n	80053fe <_malloc_r+0xba>
 80053d0:	1961      	adds	r1, r4, r5
 80053d2:	42a3      	cmp	r3, r4
 80053d4:	6025      	str	r5, [r4, #0]
 80053d6:	bf18      	it	ne
 80053d8:	6059      	strne	r1, [r3, #4]
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	bf08      	it	eq
 80053de:	6031      	streq	r1, [r6, #0]
 80053e0:	5162      	str	r2, [r4, r5]
 80053e2:	604b      	str	r3, [r1, #4]
 80053e4:	4638      	mov	r0, r7
 80053e6:	f104 060b 	add.w	r6, r4, #11
 80053ea:	f000 f9ed 	bl	80057c8 <__malloc_unlock>
 80053ee:	f026 0607 	bic.w	r6, r6, #7
 80053f2:	1d23      	adds	r3, r4, #4
 80053f4:	1af2      	subs	r2, r6, r3
 80053f6:	d0b6      	beq.n	8005366 <_malloc_r+0x22>
 80053f8:	1b9b      	subs	r3, r3, r6
 80053fa:	50a3      	str	r3, [r4, r2]
 80053fc:	e7b3      	b.n	8005366 <_malloc_r+0x22>
 80053fe:	6862      	ldr	r2, [r4, #4]
 8005400:	42a3      	cmp	r3, r4
 8005402:	bf0c      	ite	eq
 8005404:	6032      	streq	r2, [r6, #0]
 8005406:	605a      	strne	r2, [r3, #4]
 8005408:	e7ec      	b.n	80053e4 <_malloc_r+0xa0>
 800540a:	4623      	mov	r3, r4
 800540c:	6864      	ldr	r4, [r4, #4]
 800540e:	e7b2      	b.n	8005376 <_malloc_r+0x32>
 8005410:	4634      	mov	r4, r6
 8005412:	6876      	ldr	r6, [r6, #4]
 8005414:	e7b9      	b.n	800538a <_malloc_r+0x46>
 8005416:	230c      	movs	r3, #12
 8005418:	4638      	mov	r0, r7
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	f000 f9d4 	bl	80057c8 <__malloc_unlock>
 8005420:	e7a1      	b.n	8005366 <_malloc_r+0x22>
 8005422:	6025      	str	r5, [r4, #0]
 8005424:	e7de      	b.n	80053e4 <_malloc_r+0xa0>
 8005426:	bf00      	nop
 8005428:	2000209c 	.word	0x2000209c

0800542c <iprintf>:
 800542c:	b40f      	push	{r0, r1, r2, r3}
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <iprintf+0x2c>)
 8005430:	b513      	push	{r0, r1, r4, lr}
 8005432:	681c      	ldr	r4, [r3, #0]
 8005434:	b124      	cbz	r4, 8005440 <iprintf+0x14>
 8005436:	69a3      	ldr	r3, [r4, #24]
 8005438:	b913      	cbnz	r3, 8005440 <iprintf+0x14>
 800543a:	4620      	mov	r0, r4
 800543c:	f7ff fe86 	bl	800514c <__sinit>
 8005440:	ab05      	add	r3, sp, #20
 8005442:	4620      	mov	r0, r4
 8005444:	9a04      	ldr	r2, [sp, #16]
 8005446:	68a1      	ldr	r1, [r4, #8]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	f000 fa33 	bl	80058b4 <_vfiprintf_r>
 800544e:	b002      	add	sp, #8
 8005450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005454:	b004      	add	sp, #16
 8005456:	4770      	bx	lr
 8005458:	20000010 	.word	0x20000010

0800545c <cleanup_glue>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	460c      	mov	r4, r1
 8005460:	6809      	ldr	r1, [r1, #0]
 8005462:	4605      	mov	r5, r0
 8005464:	b109      	cbz	r1, 800546a <cleanup_glue+0xe>
 8005466:	f7ff fff9 	bl	800545c <cleanup_glue>
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005472:	f000 b9af 	b.w	80057d4 <_free_r>
	...

08005478 <_reclaim_reent>:
 8005478:	4b2c      	ldr	r3, [pc, #176]	; (800552c <_reclaim_reent+0xb4>)
 800547a:	b570      	push	{r4, r5, r6, lr}
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4604      	mov	r4, r0
 8005480:	4283      	cmp	r3, r0
 8005482:	d051      	beq.n	8005528 <_reclaim_reent+0xb0>
 8005484:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005486:	b143      	cbz	r3, 800549a <_reclaim_reent+0x22>
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d14a      	bne.n	8005524 <_reclaim_reent+0xac>
 800548e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	b111      	cbz	r1, 800549a <_reclaim_reent+0x22>
 8005494:	4620      	mov	r0, r4
 8005496:	f000 f99d 	bl	80057d4 <_free_r>
 800549a:	6961      	ldr	r1, [r4, #20]
 800549c:	b111      	cbz	r1, 80054a4 <_reclaim_reent+0x2c>
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 f998 	bl	80057d4 <_free_r>
 80054a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054a6:	b111      	cbz	r1, 80054ae <_reclaim_reent+0x36>
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f993 	bl	80057d4 <_free_r>
 80054ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054b0:	b111      	cbz	r1, 80054b8 <_reclaim_reent+0x40>
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f98e 	bl	80057d4 <_free_r>
 80054b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80054ba:	b111      	cbz	r1, 80054c2 <_reclaim_reent+0x4a>
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f989 	bl	80057d4 <_free_r>
 80054c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054c4:	b111      	cbz	r1, 80054cc <_reclaim_reent+0x54>
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 f984 	bl	80057d4 <_free_r>
 80054cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054ce:	b111      	cbz	r1, 80054d6 <_reclaim_reent+0x5e>
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 f97f 	bl	80057d4 <_free_r>
 80054d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80054d8:	b111      	cbz	r1, 80054e0 <_reclaim_reent+0x68>
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f97a 	bl	80057d4 <_free_r>
 80054e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054e2:	b111      	cbz	r1, 80054ea <_reclaim_reent+0x72>
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 f975 	bl	80057d4 <_free_r>
 80054ea:	69a3      	ldr	r3, [r4, #24]
 80054ec:	b1e3      	cbz	r3, 8005528 <_reclaim_reent+0xb0>
 80054ee:	4620      	mov	r0, r4
 80054f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054f2:	4798      	blx	r3
 80054f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054f6:	b1b9      	cbz	r1, 8005528 <_reclaim_reent+0xb0>
 80054f8:	4620      	mov	r0, r4
 80054fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054fe:	f7ff bfad 	b.w	800545c <cleanup_glue>
 8005502:	5949      	ldr	r1, [r1, r5]
 8005504:	b941      	cbnz	r1, 8005518 <_reclaim_reent+0xa0>
 8005506:	3504      	adds	r5, #4
 8005508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800550a:	2d80      	cmp	r5, #128	; 0x80
 800550c:	68d9      	ldr	r1, [r3, #12]
 800550e:	d1f8      	bne.n	8005502 <_reclaim_reent+0x8a>
 8005510:	4620      	mov	r0, r4
 8005512:	f000 f95f 	bl	80057d4 <_free_r>
 8005516:	e7ba      	b.n	800548e <_reclaim_reent+0x16>
 8005518:	680e      	ldr	r6, [r1, #0]
 800551a:	4620      	mov	r0, r4
 800551c:	f000 f95a 	bl	80057d4 <_free_r>
 8005520:	4631      	mov	r1, r6
 8005522:	e7ef      	b.n	8005504 <_reclaim_reent+0x8c>
 8005524:	2500      	movs	r5, #0
 8005526:	e7ef      	b.n	8005508 <_reclaim_reent+0x90>
 8005528:	bd70      	pop	{r4, r5, r6, pc}
 800552a:	bf00      	nop
 800552c:	20000010 	.word	0x20000010

08005530 <_sbrk_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	2300      	movs	r3, #0
 8005534:	4d05      	ldr	r5, [pc, #20]	; (800554c <_sbrk_r+0x1c>)
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	f7fb fa70 	bl	8000a20 <_sbrk>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_sbrk_r+0x1a>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_sbrk_r+0x1a>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	200020a4 	.word	0x200020a4

08005550 <__sread>:
 8005550:	b510      	push	{r4, lr}
 8005552:	460c      	mov	r4, r1
 8005554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005558:	f000 fc72 	bl	8005e40 <_read_r>
 800555c:	2800      	cmp	r0, #0
 800555e:	bfab      	itete	ge
 8005560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005562:	89a3      	ldrhlt	r3, [r4, #12]
 8005564:	181b      	addge	r3, r3, r0
 8005566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800556a:	bfac      	ite	ge
 800556c:	6563      	strge	r3, [r4, #84]	; 0x54
 800556e:	81a3      	strhlt	r3, [r4, #12]
 8005570:	bd10      	pop	{r4, pc}

08005572 <__swrite>:
 8005572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005576:	461f      	mov	r7, r3
 8005578:	898b      	ldrh	r3, [r1, #12]
 800557a:	4605      	mov	r5, r0
 800557c:	05db      	lsls	r3, r3, #23
 800557e:	460c      	mov	r4, r1
 8005580:	4616      	mov	r6, r2
 8005582:	d505      	bpl.n	8005590 <__swrite+0x1e>
 8005584:	2302      	movs	r3, #2
 8005586:	2200      	movs	r2, #0
 8005588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558c:	f000 f904 	bl	8005798 <_lseek_r>
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	4632      	mov	r2, r6
 8005594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	4628      	mov	r0, r5
 800559c:	463b      	mov	r3, r7
 800559e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a6:	f000 b817 	b.w	80055d8 <_write_r>

080055aa <__sseek>:
 80055aa:	b510      	push	{r4, lr}
 80055ac:	460c      	mov	r4, r1
 80055ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b2:	f000 f8f1 	bl	8005798 <_lseek_r>
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	bf15      	itete	ne
 80055bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80055be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055c6:	81a3      	strheq	r3, [r4, #12]
 80055c8:	bf18      	it	ne
 80055ca:	81a3      	strhne	r3, [r4, #12]
 80055cc:	bd10      	pop	{r4, pc}

080055ce <__sclose>:
 80055ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d2:	f000 b813 	b.w	80055fc <_close_r>
	...

080055d8 <_write_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	2200      	movs	r2, #0
 80055e2:	4d05      	ldr	r5, [pc, #20]	; (80055f8 <_write_r+0x20>)
 80055e4:	602a      	str	r2, [r5, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f7fa fdf0 	bl	80001cc <_write>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_write_r+0x1e>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_write_r+0x1e>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	200020a4 	.word	0x200020a4

080055fc <_close_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	2300      	movs	r3, #0
 8005600:	4d05      	ldr	r5, [pc, #20]	; (8005618 <_close_r+0x1c>)
 8005602:	4604      	mov	r4, r0
 8005604:	4608      	mov	r0, r1
 8005606:	602b      	str	r3, [r5, #0]
 8005608:	f7fb f9d9 	bl	80009be <_close>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_close_r+0x1a>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_close_r+0x1a>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	200020a4 	.word	0x200020a4

0800561c <__sflush_r>:
 800561c:	898a      	ldrh	r2, [r1, #12]
 800561e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005620:	4605      	mov	r5, r0
 8005622:	0710      	lsls	r0, r2, #28
 8005624:	460c      	mov	r4, r1
 8005626:	d457      	bmi.n	80056d8 <__sflush_r+0xbc>
 8005628:	684b      	ldr	r3, [r1, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	dc04      	bgt.n	8005638 <__sflush_r+0x1c>
 800562e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	dc01      	bgt.n	8005638 <__sflush_r+0x1c>
 8005634:	2000      	movs	r0, #0
 8005636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563a:	2e00      	cmp	r6, #0
 800563c:	d0fa      	beq.n	8005634 <__sflush_r+0x18>
 800563e:	2300      	movs	r3, #0
 8005640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005644:	682f      	ldr	r7, [r5, #0]
 8005646:	602b      	str	r3, [r5, #0]
 8005648:	d032      	beq.n	80056b0 <__sflush_r+0x94>
 800564a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	075a      	lsls	r2, r3, #29
 8005650:	d505      	bpl.n	800565e <__sflush_r+0x42>
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	1ac0      	subs	r0, r0, r3
 8005656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005658:	b10b      	cbz	r3, 800565e <__sflush_r+0x42>
 800565a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800565c:	1ac0      	subs	r0, r0, r3
 800565e:	2300      	movs	r3, #0
 8005660:	4602      	mov	r2, r0
 8005662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005664:	4628      	mov	r0, r5
 8005666:	6a21      	ldr	r1, [r4, #32]
 8005668:	47b0      	blx	r6
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	d106      	bne.n	800567e <__sflush_r+0x62>
 8005670:	6829      	ldr	r1, [r5, #0]
 8005672:	291d      	cmp	r1, #29
 8005674:	d82c      	bhi.n	80056d0 <__sflush_r+0xb4>
 8005676:	4a29      	ldr	r2, [pc, #164]	; (800571c <__sflush_r+0x100>)
 8005678:	40ca      	lsrs	r2, r1
 800567a:	07d6      	lsls	r6, r2, #31
 800567c:	d528      	bpl.n	80056d0 <__sflush_r+0xb4>
 800567e:	2200      	movs	r2, #0
 8005680:	6062      	str	r2, [r4, #4]
 8005682:	6922      	ldr	r2, [r4, #16]
 8005684:	04d9      	lsls	r1, r3, #19
 8005686:	6022      	str	r2, [r4, #0]
 8005688:	d504      	bpl.n	8005694 <__sflush_r+0x78>
 800568a:	1c42      	adds	r2, r0, #1
 800568c:	d101      	bne.n	8005692 <__sflush_r+0x76>
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	b903      	cbnz	r3, 8005694 <__sflush_r+0x78>
 8005692:	6560      	str	r0, [r4, #84]	; 0x54
 8005694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005696:	602f      	str	r7, [r5, #0]
 8005698:	2900      	cmp	r1, #0
 800569a:	d0cb      	beq.n	8005634 <__sflush_r+0x18>
 800569c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d002      	beq.n	80056aa <__sflush_r+0x8e>
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 f895 	bl	80057d4 <_free_r>
 80056aa:	2000      	movs	r0, #0
 80056ac:	6360      	str	r0, [r4, #52]	; 0x34
 80056ae:	e7c2      	b.n	8005636 <__sflush_r+0x1a>
 80056b0:	6a21      	ldr	r1, [r4, #32]
 80056b2:	2301      	movs	r3, #1
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b0      	blx	r6
 80056b8:	1c41      	adds	r1, r0, #1
 80056ba:	d1c7      	bne.n	800564c <__sflush_r+0x30>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0c4      	beq.n	800564c <__sflush_r+0x30>
 80056c2:	2b1d      	cmp	r3, #29
 80056c4:	d001      	beq.n	80056ca <__sflush_r+0xae>
 80056c6:	2b16      	cmp	r3, #22
 80056c8:	d101      	bne.n	80056ce <__sflush_r+0xb2>
 80056ca:	602f      	str	r7, [r5, #0]
 80056cc:	e7b2      	b.n	8005634 <__sflush_r+0x18>
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	e7ae      	b.n	8005636 <__sflush_r+0x1a>
 80056d8:	690f      	ldr	r7, [r1, #16]
 80056da:	2f00      	cmp	r7, #0
 80056dc:	d0aa      	beq.n	8005634 <__sflush_r+0x18>
 80056de:	0793      	lsls	r3, r2, #30
 80056e0:	bf18      	it	ne
 80056e2:	2300      	movne	r3, #0
 80056e4:	680e      	ldr	r6, [r1, #0]
 80056e6:	bf08      	it	eq
 80056e8:	694b      	ldreq	r3, [r1, #20]
 80056ea:	1bf6      	subs	r6, r6, r7
 80056ec:	600f      	str	r7, [r1, #0]
 80056ee:	608b      	str	r3, [r1, #8]
 80056f0:	2e00      	cmp	r6, #0
 80056f2:	dd9f      	ble.n	8005634 <__sflush_r+0x18>
 80056f4:	4633      	mov	r3, r6
 80056f6:	463a      	mov	r2, r7
 80056f8:	4628      	mov	r0, r5
 80056fa:	6a21      	ldr	r1, [r4, #32]
 80056fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005700:	47e0      	blx	ip
 8005702:	2800      	cmp	r0, #0
 8005704:	dc06      	bgt.n	8005714 <__sflush_r+0xf8>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800570c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005710:	81a3      	strh	r3, [r4, #12]
 8005712:	e790      	b.n	8005636 <__sflush_r+0x1a>
 8005714:	4407      	add	r7, r0
 8005716:	1a36      	subs	r6, r6, r0
 8005718:	e7ea      	b.n	80056f0 <__sflush_r+0xd4>
 800571a:	bf00      	nop
 800571c:	20400001 	.word	0x20400001

08005720 <_fflush_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	690b      	ldr	r3, [r1, #16]
 8005724:	4605      	mov	r5, r0
 8005726:	460c      	mov	r4, r1
 8005728:	b913      	cbnz	r3, 8005730 <_fflush_r+0x10>
 800572a:	2500      	movs	r5, #0
 800572c:	4628      	mov	r0, r5
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	b118      	cbz	r0, 800573a <_fflush_r+0x1a>
 8005732:	6983      	ldr	r3, [r0, #24]
 8005734:	b90b      	cbnz	r3, 800573a <_fflush_r+0x1a>
 8005736:	f7ff fd09 	bl	800514c <__sinit>
 800573a:	4b14      	ldr	r3, [pc, #80]	; (800578c <_fflush_r+0x6c>)
 800573c:	429c      	cmp	r4, r3
 800573e:	d11b      	bne.n	8005778 <_fflush_r+0x58>
 8005740:	686c      	ldr	r4, [r5, #4]
 8005742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0ef      	beq.n	800572a <_fflush_r+0xa>
 800574a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800574c:	07d0      	lsls	r0, r2, #31
 800574e:	d404      	bmi.n	800575a <_fflush_r+0x3a>
 8005750:	0599      	lsls	r1, r3, #22
 8005752:	d402      	bmi.n	800575a <_fflush_r+0x3a>
 8005754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005756:	f7ff fdbc 	bl	80052d2 <__retarget_lock_acquire_recursive>
 800575a:	4628      	mov	r0, r5
 800575c:	4621      	mov	r1, r4
 800575e:	f7ff ff5d 	bl	800561c <__sflush_r>
 8005762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005764:	4605      	mov	r5, r0
 8005766:	07da      	lsls	r2, r3, #31
 8005768:	d4e0      	bmi.n	800572c <_fflush_r+0xc>
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	059b      	lsls	r3, r3, #22
 800576e:	d4dd      	bmi.n	800572c <_fflush_r+0xc>
 8005770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005772:	f7ff fdaf 	bl	80052d4 <__retarget_lock_release_recursive>
 8005776:	e7d9      	b.n	800572c <_fflush_r+0xc>
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <_fflush_r+0x70>)
 800577a:	429c      	cmp	r4, r3
 800577c:	d101      	bne.n	8005782 <_fflush_r+0x62>
 800577e:	68ac      	ldr	r4, [r5, #8]
 8005780:	e7df      	b.n	8005742 <_fflush_r+0x22>
 8005782:	4b04      	ldr	r3, [pc, #16]	; (8005794 <_fflush_r+0x74>)
 8005784:	429c      	cmp	r4, r3
 8005786:	bf08      	it	eq
 8005788:	68ec      	ldreq	r4, [r5, #12]
 800578a:	e7da      	b.n	8005742 <_fflush_r+0x22>
 800578c:	08006270 	.word	0x08006270
 8005790:	08006290 	.word	0x08006290
 8005794:	08006250 	.word	0x08006250

08005798 <_lseek_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	2200      	movs	r2, #0
 80057a2:	4d05      	ldr	r5, [pc, #20]	; (80057b8 <_lseek_r+0x20>)
 80057a4:	602a      	str	r2, [r5, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f7fb f92d 	bl	8000a06 <_lseek>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_lseek_r+0x1e>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_lseek_r+0x1e>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200020a4 	.word	0x200020a4

080057bc <__malloc_lock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__malloc_lock+0x8>)
 80057be:	f7ff bd88 	b.w	80052d2 <__retarget_lock_acquire_recursive>
 80057c2:	bf00      	nop
 80057c4:	20002098 	.word	0x20002098

080057c8 <__malloc_unlock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <__malloc_unlock+0x8>)
 80057ca:	f7ff bd83 	b.w	80052d4 <__retarget_lock_release_recursive>
 80057ce:	bf00      	nop
 80057d0:	20002098 	.word	0x20002098

080057d4 <_free_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4605      	mov	r5, r0
 80057d8:	2900      	cmp	r1, #0
 80057da:	d040      	beq.n	800585e <_free_r+0x8a>
 80057dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057e0:	1f0c      	subs	r4, r1, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bfb8      	it	lt
 80057e6:	18e4      	addlt	r4, r4, r3
 80057e8:	f7ff ffe8 	bl	80057bc <__malloc_lock>
 80057ec:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <_free_r+0x8c>)
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	b933      	cbnz	r3, 8005800 <_free_r+0x2c>
 80057f2:	6063      	str	r3, [r4, #4]
 80057f4:	6014      	str	r4, [r2, #0]
 80057f6:	4628      	mov	r0, r5
 80057f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057fc:	f7ff bfe4 	b.w	80057c8 <__malloc_unlock>
 8005800:	42a3      	cmp	r3, r4
 8005802:	d908      	bls.n	8005816 <_free_r+0x42>
 8005804:	6820      	ldr	r0, [r4, #0]
 8005806:	1821      	adds	r1, r4, r0
 8005808:	428b      	cmp	r3, r1
 800580a:	bf01      	itttt	eq
 800580c:	6819      	ldreq	r1, [r3, #0]
 800580e:	685b      	ldreq	r3, [r3, #4]
 8005810:	1809      	addeq	r1, r1, r0
 8005812:	6021      	streq	r1, [r4, #0]
 8005814:	e7ed      	b.n	80057f2 <_free_r+0x1e>
 8005816:	461a      	mov	r2, r3
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	b10b      	cbz	r3, 8005820 <_free_r+0x4c>
 800581c:	42a3      	cmp	r3, r4
 800581e:	d9fa      	bls.n	8005816 <_free_r+0x42>
 8005820:	6811      	ldr	r1, [r2, #0]
 8005822:	1850      	adds	r0, r2, r1
 8005824:	42a0      	cmp	r0, r4
 8005826:	d10b      	bne.n	8005840 <_free_r+0x6c>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	4401      	add	r1, r0
 800582c:	1850      	adds	r0, r2, r1
 800582e:	4283      	cmp	r3, r0
 8005830:	6011      	str	r1, [r2, #0]
 8005832:	d1e0      	bne.n	80057f6 <_free_r+0x22>
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4401      	add	r1, r0
 800583a:	6011      	str	r1, [r2, #0]
 800583c:	6053      	str	r3, [r2, #4]
 800583e:	e7da      	b.n	80057f6 <_free_r+0x22>
 8005840:	d902      	bls.n	8005848 <_free_r+0x74>
 8005842:	230c      	movs	r3, #12
 8005844:	602b      	str	r3, [r5, #0]
 8005846:	e7d6      	b.n	80057f6 <_free_r+0x22>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	1821      	adds	r1, r4, r0
 800584c:	428b      	cmp	r3, r1
 800584e:	bf01      	itttt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	1809      	addeq	r1, r1, r0
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	6054      	str	r4, [r2, #4]
 800585c:	e7cb      	b.n	80057f6 <_free_r+0x22>
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	2000209c 	.word	0x2000209c

08005864 <__sfputc_r>:
 8005864:	6893      	ldr	r3, [r2, #8]
 8005866:	b410      	push	{r4}
 8005868:	3b01      	subs	r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	6093      	str	r3, [r2, #8]
 800586e:	da07      	bge.n	8005880 <__sfputc_r+0x1c>
 8005870:	6994      	ldr	r4, [r2, #24]
 8005872:	42a3      	cmp	r3, r4
 8005874:	db01      	blt.n	800587a <__sfputc_r+0x16>
 8005876:	290a      	cmp	r1, #10
 8005878:	d102      	bne.n	8005880 <__sfputc_r+0x1c>
 800587a:	bc10      	pop	{r4}
 800587c:	f000 baf2 	b.w	8005e64 <__swbuf_r>
 8005880:	6813      	ldr	r3, [r2, #0]
 8005882:	1c58      	adds	r0, r3, #1
 8005884:	6010      	str	r0, [r2, #0]
 8005886:	7019      	strb	r1, [r3, #0]
 8005888:	4608      	mov	r0, r1
 800588a:	bc10      	pop	{r4}
 800588c:	4770      	bx	lr

0800588e <__sfputs_r>:
 800588e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005890:	4606      	mov	r6, r0
 8005892:	460f      	mov	r7, r1
 8005894:	4614      	mov	r4, r2
 8005896:	18d5      	adds	r5, r2, r3
 8005898:	42ac      	cmp	r4, r5
 800589a:	d101      	bne.n	80058a0 <__sfputs_r+0x12>
 800589c:	2000      	movs	r0, #0
 800589e:	e007      	b.n	80058b0 <__sfputs_r+0x22>
 80058a0:	463a      	mov	r2, r7
 80058a2:	4630      	mov	r0, r6
 80058a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a8:	f7ff ffdc 	bl	8005864 <__sfputc_r>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d1f3      	bne.n	8005898 <__sfputs_r+0xa>
 80058b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058b4 <_vfiprintf_r>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	460d      	mov	r5, r1
 80058ba:	4614      	mov	r4, r2
 80058bc:	4698      	mov	r8, r3
 80058be:	4606      	mov	r6, r0
 80058c0:	b09d      	sub	sp, #116	; 0x74
 80058c2:	b118      	cbz	r0, 80058cc <_vfiprintf_r+0x18>
 80058c4:	6983      	ldr	r3, [r0, #24]
 80058c6:	b90b      	cbnz	r3, 80058cc <_vfiprintf_r+0x18>
 80058c8:	f7ff fc40 	bl	800514c <__sinit>
 80058cc:	4b89      	ldr	r3, [pc, #548]	; (8005af4 <_vfiprintf_r+0x240>)
 80058ce:	429d      	cmp	r5, r3
 80058d0:	d11b      	bne.n	800590a <_vfiprintf_r+0x56>
 80058d2:	6875      	ldr	r5, [r6, #4]
 80058d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058d6:	07d9      	lsls	r1, r3, #31
 80058d8:	d405      	bmi.n	80058e6 <_vfiprintf_r+0x32>
 80058da:	89ab      	ldrh	r3, [r5, #12]
 80058dc:	059a      	lsls	r2, r3, #22
 80058de:	d402      	bmi.n	80058e6 <_vfiprintf_r+0x32>
 80058e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058e2:	f7ff fcf6 	bl	80052d2 <__retarget_lock_acquire_recursive>
 80058e6:	89ab      	ldrh	r3, [r5, #12]
 80058e8:	071b      	lsls	r3, r3, #28
 80058ea:	d501      	bpl.n	80058f0 <_vfiprintf_r+0x3c>
 80058ec:	692b      	ldr	r3, [r5, #16]
 80058ee:	b9eb      	cbnz	r3, 800592c <_vfiprintf_r+0x78>
 80058f0:	4629      	mov	r1, r5
 80058f2:	4630      	mov	r0, r6
 80058f4:	f000 fb08 	bl	8005f08 <__swsetup_r>
 80058f8:	b1c0      	cbz	r0, 800592c <_vfiprintf_r+0x78>
 80058fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058fc:	07dc      	lsls	r4, r3, #31
 80058fe:	d50e      	bpl.n	800591e <_vfiprintf_r+0x6a>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005904:	b01d      	add	sp, #116	; 0x74
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590a:	4b7b      	ldr	r3, [pc, #492]	; (8005af8 <_vfiprintf_r+0x244>)
 800590c:	429d      	cmp	r5, r3
 800590e:	d101      	bne.n	8005914 <_vfiprintf_r+0x60>
 8005910:	68b5      	ldr	r5, [r6, #8]
 8005912:	e7df      	b.n	80058d4 <_vfiprintf_r+0x20>
 8005914:	4b79      	ldr	r3, [pc, #484]	; (8005afc <_vfiprintf_r+0x248>)
 8005916:	429d      	cmp	r5, r3
 8005918:	bf08      	it	eq
 800591a:	68f5      	ldreq	r5, [r6, #12]
 800591c:	e7da      	b.n	80058d4 <_vfiprintf_r+0x20>
 800591e:	89ab      	ldrh	r3, [r5, #12]
 8005920:	0598      	lsls	r0, r3, #22
 8005922:	d4ed      	bmi.n	8005900 <_vfiprintf_r+0x4c>
 8005924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005926:	f7ff fcd5 	bl	80052d4 <__retarget_lock_release_recursive>
 800592a:	e7e9      	b.n	8005900 <_vfiprintf_r+0x4c>
 800592c:	2300      	movs	r3, #0
 800592e:	9309      	str	r3, [sp, #36]	; 0x24
 8005930:	2320      	movs	r3, #32
 8005932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005936:	2330      	movs	r3, #48	; 0x30
 8005938:	f04f 0901 	mov.w	r9, #1
 800593c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005940:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005b00 <_vfiprintf_r+0x24c>
 8005944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005948:	4623      	mov	r3, r4
 800594a:	469a      	mov	sl, r3
 800594c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005950:	b10a      	cbz	r2, 8005956 <_vfiprintf_r+0xa2>
 8005952:	2a25      	cmp	r2, #37	; 0x25
 8005954:	d1f9      	bne.n	800594a <_vfiprintf_r+0x96>
 8005956:	ebba 0b04 	subs.w	fp, sl, r4
 800595a:	d00b      	beq.n	8005974 <_vfiprintf_r+0xc0>
 800595c:	465b      	mov	r3, fp
 800595e:	4622      	mov	r2, r4
 8005960:	4629      	mov	r1, r5
 8005962:	4630      	mov	r0, r6
 8005964:	f7ff ff93 	bl	800588e <__sfputs_r>
 8005968:	3001      	adds	r0, #1
 800596a:	f000 80aa 	beq.w	8005ac2 <_vfiprintf_r+0x20e>
 800596e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005970:	445a      	add	r2, fp
 8005972:	9209      	str	r2, [sp, #36]	; 0x24
 8005974:	f89a 3000 	ldrb.w	r3, [sl]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80a2 	beq.w	8005ac2 <_vfiprintf_r+0x20e>
 800597e:	2300      	movs	r3, #0
 8005980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005988:	f10a 0a01 	add.w	sl, sl, #1
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	9307      	str	r3, [sp, #28]
 8005990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005994:	931a      	str	r3, [sp, #104]	; 0x68
 8005996:	4654      	mov	r4, sl
 8005998:	2205      	movs	r2, #5
 800599a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800599e:	4858      	ldr	r0, [pc, #352]	; (8005b00 <_vfiprintf_r+0x24c>)
 80059a0:	f000 fb86 	bl	80060b0 <memchr>
 80059a4:	9a04      	ldr	r2, [sp, #16]
 80059a6:	b9d8      	cbnz	r0, 80059e0 <_vfiprintf_r+0x12c>
 80059a8:	06d1      	lsls	r1, r2, #27
 80059aa:	bf44      	itt	mi
 80059ac:	2320      	movmi	r3, #32
 80059ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059b2:	0713      	lsls	r3, r2, #28
 80059b4:	bf44      	itt	mi
 80059b6:	232b      	movmi	r3, #43	; 0x2b
 80059b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059bc:	f89a 3000 	ldrb.w	r3, [sl]
 80059c0:	2b2a      	cmp	r3, #42	; 0x2a
 80059c2:	d015      	beq.n	80059f0 <_vfiprintf_r+0x13c>
 80059c4:	4654      	mov	r4, sl
 80059c6:	2000      	movs	r0, #0
 80059c8:	f04f 0c0a 	mov.w	ip, #10
 80059cc:	9a07      	ldr	r2, [sp, #28]
 80059ce:	4621      	mov	r1, r4
 80059d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059d4:	3b30      	subs	r3, #48	; 0x30
 80059d6:	2b09      	cmp	r3, #9
 80059d8:	d94e      	bls.n	8005a78 <_vfiprintf_r+0x1c4>
 80059da:	b1b0      	cbz	r0, 8005a0a <_vfiprintf_r+0x156>
 80059dc:	9207      	str	r2, [sp, #28]
 80059de:	e014      	b.n	8005a0a <_vfiprintf_r+0x156>
 80059e0:	eba0 0308 	sub.w	r3, r0, r8
 80059e4:	fa09 f303 	lsl.w	r3, r9, r3
 80059e8:	4313      	orrs	r3, r2
 80059ea:	46a2      	mov	sl, r4
 80059ec:	9304      	str	r3, [sp, #16]
 80059ee:	e7d2      	b.n	8005996 <_vfiprintf_r+0xe2>
 80059f0:	9b03      	ldr	r3, [sp, #12]
 80059f2:	1d19      	adds	r1, r3, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	9103      	str	r1, [sp, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bfbb      	ittet	lt
 80059fc:	425b      	neglt	r3, r3
 80059fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005a02:	9307      	strge	r3, [sp, #28]
 8005a04:	9307      	strlt	r3, [sp, #28]
 8005a06:	bfb8      	it	lt
 8005a08:	9204      	strlt	r2, [sp, #16]
 8005a0a:	7823      	ldrb	r3, [r4, #0]
 8005a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a0e:	d10c      	bne.n	8005a2a <_vfiprintf_r+0x176>
 8005a10:	7863      	ldrb	r3, [r4, #1]
 8005a12:	2b2a      	cmp	r3, #42	; 0x2a
 8005a14:	d135      	bne.n	8005a82 <_vfiprintf_r+0x1ce>
 8005a16:	9b03      	ldr	r3, [sp, #12]
 8005a18:	3402      	adds	r4, #2
 8005a1a:	1d1a      	adds	r2, r3, #4
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	9203      	str	r2, [sp, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bfb8      	it	lt
 8005a24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a28:	9305      	str	r3, [sp, #20]
 8005a2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005b04 <_vfiprintf_r+0x250>
 8005a2e:	2203      	movs	r2, #3
 8005a30:	4650      	mov	r0, sl
 8005a32:	7821      	ldrb	r1, [r4, #0]
 8005a34:	f000 fb3c 	bl	80060b0 <memchr>
 8005a38:	b140      	cbz	r0, 8005a4c <_vfiprintf_r+0x198>
 8005a3a:	2340      	movs	r3, #64	; 0x40
 8005a3c:	eba0 000a 	sub.w	r0, r0, sl
 8005a40:	fa03 f000 	lsl.w	r0, r3, r0
 8005a44:	9b04      	ldr	r3, [sp, #16]
 8005a46:	3401      	adds	r4, #1
 8005a48:	4303      	orrs	r3, r0
 8005a4a:	9304      	str	r3, [sp, #16]
 8005a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a50:	2206      	movs	r2, #6
 8005a52:	482d      	ldr	r0, [pc, #180]	; (8005b08 <_vfiprintf_r+0x254>)
 8005a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a58:	f000 fb2a 	bl	80060b0 <memchr>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d03f      	beq.n	8005ae0 <_vfiprintf_r+0x22c>
 8005a60:	4b2a      	ldr	r3, [pc, #168]	; (8005b0c <_vfiprintf_r+0x258>)
 8005a62:	bb1b      	cbnz	r3, 8005aac <_vfiprintf_r+0x1f8>
 8005a64:	9b03      	ldr	r3, [sp, #12]
 8005a66:	3307      	adds	r3, #7
 8005a68:	f023 0307 	bic.w	r3, r3, #7
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	9303      	str	r3, [sp, #12]
 8005a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a72:	443b      	add	r3, r7
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	e767      	b.n	8005948 <_vfiprintf_r+0x94>
 8005a78:	460c      	mov	r4, r1
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a80:	e7a5      	b.n	80059ce <_vfiprintf_r+0x11a>
 8005a82:	2300      	movs	r3, #0
 8005a84:	f04f 0c0a 	mov.w	ip, #10
 8005a88:	4619      	mov	r1, r3
 8005a8a:	3401      	adds	r4, #1
 8005a8c:	9305      	str	r3, [sp, #20]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a94:	3a30      	subs	r2, #48	; 0x30
 8005a96:	2a09      	cmp	r2, #9
 8005a98:	d903      	bls.n	8005aa2 <_vfiprintf_r+0x1ee>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0c5      	beq.n	8005a2a <_vfiprintf_r+0x176>
 8005a9e:	9105      	str	r1, [sp, #20]
 8005aa0:	e7c3      	b.n	8005a2a <_vfiprintf_r+0x176>
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aaa:	e7f0      	b.n	8005a8e <_vfiprintf_r+0x1da>
 8005aac:	ab03      	add	r3, sp, #12
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <_vfiprintf_r+0x25c>)
 8005ab6:	a904      	add	r1, sp, #16
 8005ab8:	f3af 8000 	nop.w
 8005abc:	4607      	mov	r7, r0
 8005abe:	1c78      	adds	r0, r7, #1
 8005ac0:	d1d6      	bne.n	8005a70 <_vfiprintf_r+0x1bc>
 8005ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ac4:	07d9      	lsls	r1, r3, #31
 8005ac6:	d405      	bmi.n	8005ad4 <_vfiprintf_r+0x220>
 8005ac8:	89ab      	ldrh	r3, [r5, #12]
 8005aca:	059a      	lsls	r2, r3, #22
 8005acc:	d402      	bmi.n	8005ad4 <_vfiprintf_r+0x220>
 8005ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ad0:	f7ff fc00 	bl	80052d4 <__retarget_lock_release_recursive>
 8005ad4:	89ab      	ldrh	r3, [r5, #12]
 8005ad6:	065b      	lsls	r3, r3, #25
 8005ad8:	f53f af12 	bmi.w	8005900 <_vfiprintf_r+0x4c>
 8005adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ade:	e711      	b.n	8005904 <_vfiprintf_r+0x50>
 8005ae0:	ab03      	add	r3, sp, #12
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <_vfiprintf_r+0x25c>)
 8005aea:	a904      	add	r1, sp, #16
 8005aec:	f000 f882 	bl	8005bf4 <_printf_i>
 8005af0:	e7e4      	b.n	8005abc <_vfiprintf_r+0x208>
 8005af2:	bf00      	nop
 8005af4:	08006270 	.word	0x08006270
 8005af8:	08006290 	.word	0x08006290
 8005afc:	08006250 	.word	0x08006250
 8005b00:	080062b4 	.word	0x080062b4
 8005b04:	080062ba 	.word	0x080062ba
 8005b08:	080062be 	.word	0x080062be
 8005b0c:	00000000 	.word	0x00000000
 8005b10:	0800588f 	.word	0x0800588f

08005b14 <_printf_common>:
 8005b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	4616      	mov	r6, r2
 8005b1a:	4699      	mov	r9, r3
 8005b1c:	688a      	ldr	r2, [r1, #8]
 8005b1e:	690b      	ldr	r3, [r1, #16]
 8005b20:	4607      	mov	r7, r0
 8005b22:	4293      	cmp	r3, r2
 8005b24:	bfb8      	it	lt
 8005b26:	4613      	movlt	r3, r2
 8005b28:	6033      	str	r3, [r6, #0]
 8005b2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b2e:	460c      	mov	r4, r1
 8005b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b34:	b10a      	cbz	r2, 8005b3a <_printf_common+0x26>
 8005b36:	3301      	adds	r3, #1
 8005b38:	6033      	str	r3, [r6, #0]
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	0699      	lsls	r1, r3, #26
 8005b3e:	bf42      	ittt	mi
 8005b40:	6833      	ldrmi	r3, [r6, #0]
 8005b42:	3302      	addmi	r3, #2
 8005b44:	6033      	strmi	r3, [r6, #0]
 8005b46:	6825      	ldr	r5, [r4, #0]
 8005b48:	f015 0506 	ands.w	r5, r5, #6
 8005b4c:	d106      	bne.n	8005b5c <_printf_common+0x48>
 8005b4e:	f104 0a19 	add.w	sl, r4, #25
 8005b52:	68e3      	ldr	r3, [r4, #12]
 8005b54:	6832      	ldr	r2, [r6, #0]
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	42ab      	cmp	r3, r5
 8005b5a:	dc28      	bgt.n	8005bae <_printf_common+0x9a>
 8005b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b60:	1e13      	subs	r3, r2, #0
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	bf18      	it	ne
 8005b66:	2301      	movne	r3, #1
 8005b68:	0692      	lsls	r2, r2, #26
 8005b6a:	d42d      	bmi.n	8005bc8 <_printf_common+0xb4>
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	4638      	mov	r0, r7
 8005b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b74:	47c0      	blx	r8
 8005b76:	3001      	adds	r0, #1
 8005b78:	d020      	beq.n	8005bbc <_printf_common+0xa8>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	68e5      	ldr	r5, [r4, #12]
 8005b7e:	f003 0306 	and.w	r3, r3, #6
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	bf18      	it	ne
 8005b86:	2500      	movne	r5, #0
 8005b88:	6832      	ldr	r2, [r6, #0]
 8005b8a:	f04f 0600 	mov.w	r6, #0
 8005b8e:	68a3      	ldr	r3, [r4, #8]
 8005b90:	bf08      	it	eq
 8005b92:	1aad      	subeq	r5, r5, r2
 8005b94:	6922      	ldr	r2, [r4, #16]
 8005b96:	bf08      	it	eq
 8005b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bfc4      	itt	gt
 8005ba0:	1a9b      	subgt	r3, r3, r2
 8005ba2:	18ed      	addgt	r5, r5, r3
 8005ba4:	341a      	adds	r4, #26
 8005ba6:	42b5      	cmp	r5, r6
 8005ba8:	d11a      	bne.n	8005be0 <_printf_common+0xcc>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e008      	b.n	8005bc0 <_printf_common+0xac>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	47c0      	blx	r8
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d103      	bne.n	8005bc4 <_printf_common+0xb0>
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	e7c4      	b.n	8005b52 <_printf_common+0x3e>
 8005bc8:	2030      	movs	r0, #48	; 0x30
 8005bca:	18e1      	adds	r1, r4, r3
 8005bcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bd6:	4422      	add	r2, r4
 8005bd8:	3302      	adds	r3, #2
 8005bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bde:	e7c5      	b.n	8005b6c <_printf_common+0x58>
 8005be0:	2301      	movs	r3, #1
 8005be2:	4622      	mov	r2, r4
 8005be4:	4649      	mov	r1, r9
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c0      	blx	r8
 8005bea:	3001      	adds	r0, #1
 8005bec:	d0e6      	beq.n	8005bbc <_printf_common+0xa8>
 8005bee:	3601      	adds	r6, #1
 8005bf0:	e7d9      	b.n	8005ba6 <_printf_common+0x92>
	...

08005bf4 <_printf_i>:
 8005bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	7e0f      	ldrb	r7, [r1, #24]
 8005bfa:	4691      	mov	r9, r2
 8005bfc:	2f78      	cmp	r7, #120	; 0x78
 8005bfe:	4680      	mov	r8, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	469a      	mov	sl, r3
 8005c04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c0a:	d807      	bhi.n	8005c1c <_printf_i+0x28>
 8005c0c:	2f62      	cmp	r7, #98	; 0x62
 8005c0e:	d80a      	bhi.n	8005c26 <_printf_i+0x32>
 8005c10:	2f00      	cmp	r7, #0
 8005c12:	f000 80d9 	beq.w	8005dc8 <_printf_i+0x1d4>
 8005c16:	2f58      	cmp	r7, #88	; 0x58
 8005c18:	f000 80a4 	beq.w	8005d64 <_printf_i+0x170>
 8005c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c24:	e03a      	b.n	8005c9c <_printf_i+0xa8>
 8005c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c2a:	2b15      	cmp	r3, #21
 8005c2c:	d8f6      	bhi.n	8005c1c <_printf_i+0x28>
 8005c2e:	a101      	add	r1, pc, #4	; (adr r1, 8005c34 <_printf_i+0x40>)
 8005c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	08005ca1 	.word	0x08005ca1
 8005c3c:	08005c1d 	.word	0x08005c1d
 8005c40:	08005c1d 	.word	0x08005c1d
 8005c44:	08005c1d 	.word	0x08005c1d
 8005c48:	08005c1d 	.word	0x08005c1d
 8005c4c:	08005ca1 	.word	0x08005ca1
 8005c50:	08005c1d 	.word	0x08005c1d
 8005c54:	08005c1d 	.word	0x08005c1d
 8005c58:	08005c1d 	.word	0x08005c1d
 8005c5c:	08005c1d 	.word	0x08005c1d
 8005c60:	08005daf 	.word	0x08005daf
 8005c64:	08005cd1 	.word	0x08005cd1
 8005c68:	08005d91 	.word	0x08005d91
 8005c6c:	08005c1d 	.word	0x08005c1d
 8005c70:	08005c1d 	.word	0x08005c1d
 8005c74:	08005dd1 	.word	0x08005dd1
 8005c78:	08005c1d 	.word	0x08005c1d
 8005c7c:	08005cd1 	.word	0x08005cd1
 8005c80:	08005c1d 	.word	0x08005c1d
 8005c84:	08005c1d 	.word	0x08005c1d
 8005c88:	08005d99 	.word	0x08005d99
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	602a      	str	r2, [r5, #0]
 8005c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0a4      	b.n	8005dea <_printf_i+0x1f6>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	6829      	ldr	r1, [r5, #0]
 8005ca4:	0606      	lsls	r6, r0, #24
 8005ca6:	f101 0304 	add.w	r3, r1, #4
 8005caa:	d50a      	bpl.n	8005cc2 <_printf_i+0xce>
 8005cac:	680e      	ldr	r6, [r1, #0]
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	2e00      	cmp	r6, #0
 8005cb2:	da03      	bge.n	8005cbc <_printf_i+0xc8>
 8005cb4:	232d      	movs	r3, #45	; 0x2d
 8005cb6:	4276      	negs	r6, r6
 8005cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cbc:	230a      	movs	r3, #10
 8005cbe:	485e      	ldr	r0, [pc, #376]	; (8005e38 <_printf_i+0x244>)
 8005cc0:	e019      	b.n	8005cf6 <_printf_i+0x102>
 8005cc2:	680e      	ldr	r6, [r1, #0]
 8005cc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	bf18      	it	ne
 8005ccc:	b236      	sxthne	r6, r6
 8005cce:	e7ef      	b.n	8005cb0 <_printf_i+0xbc>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	1d19      	adds	r1, r3, #4
 8005cd6:	6029      	str	r1, [r5, #0]
 8005cd8:	0601      	lsls	r1, r0, #24
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0xec>
 8005cdc:	681e      	ldr	r6, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0xf2>
 8005ce0:	0646      	lsls	r6, r0, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0xe8>
 8005ce4:	881e      	ldrh	r6, [r3, #0]
 8005ce6:	2f6f      	cmp	r7, #111	; 0x6f
 8005ce8:	bf0c      	ite	eq
 8005cea:	2308      	moveq	r3, #8
 8005cec:	230a      	movne	r3, #10
 8005cee:	4852      	ldr	r0, [pc, #328]	; (8005e38 <_printf_i+0x244>)
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cf6:	6865      	ldr	r5, [r4, #4]
 8005cf8:	2d00      	cmp	r5, #0
 8005cfa:	bfa8      	it	ge
 8005cfc:	6821      	ldrge	r1, [r4, #0]
 8005cfe:	60a5      	str	r5, [r4, #8]
 8005d00:	bfa4      	itt	ge
 8005d02:	f021 0104 	bicge.w	r1, r1, #4
 8005d06:	6021      	strge	r1, [r4, #0]
 8005d08:	b90e      	cbnz	r6, 8005d0e <_printf_i+0x11a>
 8005d0a:	2d00      	cmp	r5, #0
 8005d0c:	d04d      	beq.n	8005daa <_printf_i+0x1b6>
 8005d0e:	4615      	mov	r5, r2
 8005d10:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d14:	fb03 6711 	mls	r7, r3, r1, r6
 8005d18:	5dc7      	ldrb	r7, [r0, r7]
 8005d1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d1e:	4637      	mov	r7, r6
 8005d20:	42bb      	cmp	r3, r7
 8005d22:	460e      	mov	r6, r1
 8005d24:	d9f4      	bls.n	8005d10 <_printf_i+0x11c>
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d10b      	bne.n	8005d42 <_printf_i+0x14e>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	07de      	lsls	r6, r3, #31
 8005d2e:	d508      	bpl.n	8005d42 <_printf_i+0x14e>
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	6861      	ldr	r1, [r4, #4]
 8005d34:	4299      	cmp	r1, r3
 8005d36:	bfde      	ittt	le
 8005d38:	2330      	movle	r3, #48	; 0x30
 8005d3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d42:	1b52      	subs	r2, r2, r5
 8005d44:	6122      	str	r2, [r4, #16]
 8005d46:	464b      	mov	r3, r9
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f8cd a000 	str.w	sl, [sp]
 8005d50:	aa03      	add	r2, sp, #12
 8005d52:	f7ff fedf 	bl	8005b14 <_printf_common>
 8005d56:	3001      	adds	r0, #1
 8005d58:	d14c      	bne.n	8005df4 <_printf_i+0x200>
 8005d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d5e:	b004      	add	sp, #16
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	4834      	ldr	r0, [pc, #208]	; (8005e38 <_printf_i+0x244>)
 8005d66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d6a:	6829      	ldr	r1, [r5, #0]
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d72:	6029      	str	r1, [r5, #0]
 8005d74:	061d      	lsls	r5, r3, #24
 8005d76:	d514      	bpl.n	8005da2 <_printf_i+0x1ae>
 8005d78:	07df      	lsls	r7, r3, #31
 8005d7a:	bf44      	itt	mi
 8005d7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d80:	6023      	strmi	r3, [r4, #0]
 8005d82:	b91e      	cbnz	r6, 8005d8c <_printf_i+0x198>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	f023 0320 	bic.w	r3, r3, #32
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	e7af      	b.n	8005cf0 <_printf_i+0xfc>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	f043 0320 	orr.w	r3, r3, #32
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	2378      	movs	r3, #120	; 0x78
 8005d9a:	4828      	ldr	r0, [pc, #160]	; (8005e3c <_printf_i+0x248>)
 8005d9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005da0:	e7e3      	b.n	8005d6a <_printf_i+0x176>
 8005da2:	0659      	lsls	r1, r3, #25
 8005da4:	bf48      	it	mi
 8005da6:	b2b6      	uxthmi	r6, r6
 8005da8:	e7e6      	b.n	8005d78 <_printf_i+0x184>
 8005daa:	4615      	mov	r5, r2
 8005dac:	e7bb      	b.n	8005d26 <_printf_i+0x132>
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	6826      	ldr	r6, [r4, #0]
 8005db2:	1d18      	adds	r0, r3, #4
 8005db4:	6961      	ldr	r1, [r4, #20]
 8005db6:	6028      	str	r0, [r5, #0]
 8005db8:	0635      	lsls	r5, r6, #24
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	d501      	bpl.n	8005dc2 <_printf_i+0x1ce>
 8005dbe:	6019      	str	r1, [r3, #0]
 8005dc0:	e002      	b.n	8005dc8 <_printf_i+0x1d4>
 8005dc2:	0670      	lsls	r0, r6, #25
 8005dc4:	d5fb      	bpl.n	8005dbe <_printf_i+0x1ca>
 8005dc6:	8019      	strh	r1, [r3, #0]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4615      	mov	r5, r2
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	e7ba      	b.n	8005d46 <_printf_i+0x152>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	1d1a      	adds	r2, r3, #4
 8005dd6:	602a      	str	r2, [r5, #0]
 8005dd8:	681d      	ldr	r5, [r3, #0]
 8005dda:	6862      	ldr	r2, [r4, #4]
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 f967 	bl	80060b0 <memchr>
 8005de2:	b108      	cbz	r0, 8005de8 <_printf_i+0x1f4>
 8005de4:	1b40      	subs	r0, r0, r5
 8005de6:	6060      	str	r0, [r4, #4]
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	6123      	str	r3, [r4, #16]
 8005dec:	2300      	movs	r3, #0
 8005dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df2:	e7a8      	b.n	8005d46 <_printf_i+0x152>
 8005df4:	462a      	mov	r2, r5
 8005df6:	4649      	mov	r1, r9
 8005df8:	4640      	mov	r0, r8
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	47d0      	blx	sl
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d0ab      	beq.n	8005d5a <_printf_i+0x166>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	079b      	lsls	r3, r3, #30
 8005e06:	d413      	bmi.n	8005e30 <_printf_i+0x23c>
 8005e08:	68e0      	ldr	r0, [r4, #12]
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	4298      	cmp	r0, r3
 8005e0e:	bfb8      	it	lt
 8005e10:	4618      	movlt	r0, r3
 8005e12:	e7a4      	b.n	8005d5e <_printf_i+0x16a>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4632      	mov	r2, r6
 8005e18:	4649      	mov	r1, r9
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	47d0      	blx	sl
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d09b      	beq.n	8005d5a <_printf_i+0x166>
 8005e22:	3501      	adds	r5, #1
 8005e24:	68e3      	ldr	r3, [r4, #12]
 8005e26:	9903      	ldr	r1, [sp, #12]
 8005e28:	1a5b      	subs	r3, r3, r1
 8005e2a:	42ab      	cmp	r3, r5
 8005e2c:	dcf2      	bgt.n	8005e14 <_printf_i+0x220>
 8005e2e:	e7eb      	b.n	8005e08 <_printf_i+0x214>
 8005e30:	2500      	movs	r5, #0
 8005e32:	f104 0619 	add.w	r6, r4, #25
 8005e36:	e7f5      	b.n	8005e24 <_printf_i+0x230>
 8005e38:	080062c5 	.word	0x080062c5
 8005e3c:	080062d6 	.word	0x080062d6

08005e40 <_read_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4604      	mov	r4, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4d05      	ldr	r5, [pc, #20]	; (8005e60 <_read_r+0x20>)
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fa fd98 	bl	8000984 <_read>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_read_r+0x1e>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_read_r+0x1e>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	200020a4 	.word	0x200020a4

08005e64 <__swbuf_r>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	460e      	mov	r6, r1
 8005e68:	4614      	mov	r4, r2
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	b118      	cbz	r0, 8005e76 <__swbuf_r+0x12>
 8005e6e:	6983      	ldr	r3, [r0, #24]
 8005e70:	b90b      	cbnz	r3, 8005e76 <__swbuf_r+0x12>
 8005e72:	f7ff f96b 	bl	800514c <__sinit>
 8005e76:	4b21      	ldr	r3, [pc, #132]	; (8005efc <__swbuf_r+0x98>)
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	d12b      	bne.n	8005ed4 <__swbuf_r+0x70>
 8005e7c:	686c      	ldr	r4, [r5, #4]
 8005e7e:	69a3      	ldr	r3, [r4, #24]
 8005e80:	60a3      	str	r3, [r4, #8]
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	071a      	lsls	r2, r3, #28
 8005e86:	d52f      	bpl.n	8005ee8 <__swbuf_r+0x84>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	b36b      	cbz	r3, 8005ee8 <__swbuf_r+0x84>
 8005e8c:	6923      	ldr	r3, [r4, #16]
 8005e8e:	6820      	ldr	r0, [r4, #0]
 8005e90:	b2f6      	uxtb	r6, r6
 8005e92:	1ac0      	subs	r0, r0, r3
 8005e94:	6963      	ldr	r3, [r4, #20]
 8005e96:	4637      	mov	r7, r6
 8005e98:	4283      	cmp	r3, r0
 8005e9a:	dc04      	bgt.n	8005ea6 <__swbuf_r+0x42>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7ff fc3e 	bl	8005720 <_fflush_r>
 8005ea4:	bb30      	cbnz	r0, 8005ef4 <__swbuf_r+0x90>
 8005ea6:	68a3      	ldr	r3, [r4, #8]
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	60a3      	str	r3, [r4, #8]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	701e      	strb	r6, [r3, #0]
 8005eb6:	6963      	ldr	r3, [r4, #20]
 8005eb8:	4283      	cmp	r3, r0
 8005eba:	d004      	beq.n	8005ec6 <__swbuf_r+0x62>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	07db      	lsls	r3, r3, #31
 8005ec0:	d506      	bpl.n	8005ed0 <__swbuf_r+0x6c>
 8005ec2:	2e0a      	cmp	r6, #10
 8005ec4:	d104      	bne.n	8005ed0 <__swbuf_r+0x6c>
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f7ff fc29 	bl	8005720 <_fflush_r>
 8005ece:	b988      	cbnz	r0, 8005ef4 <__swbuf_r+0x90>
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <__swbuf_r+0x9c>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	d101      	bne.n	8005ede <__swbuf_r+0x7a>
 8005eda:	68ac      	ldr	r4, [r5, #8]
 8005edc:	e7cf      	b.n	8005e7e <__swbuf_r+0x1a>
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <__swbuf_r+0xa0>)
 8005ee0:	429c      	cmp	r4, r3
 8005ee2:	bf08      	it	eq
 8005ee4:	68ec      	ldreq	r4, [r5, #12]
 8005ee6:	e7ca      	b.n	8005e7e <__swbuf_r+0x1a>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f80c 	bl	8005f08 <__swsetup_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d0cb      	beq.n	8005e8c <__swbuf_r+0x28>
 8005ef4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ef8:	e7ea      	b.n	8005ed0 <__swbuf_r+0x6c>
 8005efa:	bf00      	nop
 8005efc:	08006270 	.word	0x08006270
 8005f00:	08006290 	.word	0x08006290
 8005f04:	08006250 	.word	0x08006250

08005f08 <__swsetup_r>:
 8005f08:	4b32      	ldr	r3, [pc, #200]	; (8005fd4 <__swsetup_r+0xcc>)
 8005f0a:	b570      	push	{r4, r5, r6, lr}
 8005f0c:	681d      	ldr	r5, [r3, #0]
 8005f0e:	4606      	mov	r6, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	b125      	cbz	r5, 8005f1e <__swsetup_r+0x16>
 8005f14:	69ab      	ldr	r3, [r5, #24]
 8005f16:	b913      	cbnz	r3, 8005f1e <__swsetup_r+0x16>
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f7ff f917 	bl	800514c <__sinit>
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <__swsetup_r+0xd0>)
 8005f20:	429c      	cmp	r4, r3
 8005f22:	d10f      	bne.n	8005f44 <__swsetup_r+0x3c>
 8005f24:	686c      	ldr	r4, [r5, #4]
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f2c:	0719      	lsls	r1, r3, #28
 8005f2e:	d42c      	bmi.n	8005f8a <__swsetup_r+0x82>
 8005f30:	06dd      	lsls	r5, r3, #27
 8005f32:	d411      	bmi.n	8005f58 <__swsetup_r+0x50>
 8005f34:	2309      	movs	r3, #9
 8005f36:	6033      	str	r3, [r6, #0]
 8005f38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	e03e      	b.n	8005fc2 <__swsetup_r+0xba>
 8005f44:	4b25      	ldr	r3, [pc, #148]	; (8005fdc <__swsetup_r+0xd4>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	d101      	bne.n	8005f4e <__swsetup_r+0x46>
 8005f4a:	68ac      	ldr	r4, [r5, #8]
 8005f4c:	e7eb      	b.n	8005f26 <__swsetup_r+0x1e>
 8005f4e:	4b24      	ldr	r3, [pc, #144]	; (8005fe0 <__swsetup_r+0xd8>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	bf08      	it	eq
 8005f54:	68ec      	ldreq	r4, [r5, #12]
 8005f56:	e7e6      	b.n	8005f26 <__swsetup_r+0x1e>
 8005f58:	0758      	lsls	r0, r3, #29
 8005f5a:	d512      	bpl.n	8005f82 <__swsetup_r+0x7a>
 8005f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f5e:	b141      	cbz	r1, 8005f72 <__swsetup_r+0x6a>
 8005f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f64:	4299      	cmp	r1, r3
 8005f66:	d002      	beq.n	8005f6e <__swsetup_r+0x66>
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff fc33 	bl	80057d4 <_free_r>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	6363      	str	r3, [r4, #52]	; 0x34
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6063      	str	r3, [r4, #4]
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f043 0308 	orr.w	r3, r3, #8
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	b94b      	cbnz	r3, 8005fa2 <__swsetup_r+0x9a>
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f98:	d003      	beq.n	8005fa2 <__swsetup_r+0x9a>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f847 	bl	8006030 <__smakebuf_r>
 8005fa2:	89a0      	ldrh	r0, [r4, #12]
 8005fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fa8:	f010 0301 	ands.w	r3, r0, #1
 8005fac:	d00a      	beq.n	8005fc4 <__swsetup_r+0xbc>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60a3      	str	r3, [r4, #8]
 8005fb2:	6963      	ldr	r3, [r4, #20]
 8005fb4:	425b      	negs	r3, r3
 8005fb6:	61a3      	str	r3, [r4, #24]
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	b943      	cbnz	r3, 8005fce <__swsetup_r+0xc6>
 8005fbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fc0:	d1ba      	bne.n	8005f38 <__swsetup_r+0x30>
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	0781      	lsls	r1, r0, #30
 8005fc6:	bf58      	it	pl
 8005fc8:	6963      	ldrpl	r3, [r4, #20]
 8005fca:	60a3      	str	r3, [r4, #8]
 8005fcc:	e7f4      	b.n	8005fb8 <__swsetup_r+0xb0>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e7f7      	b.n	8005fc2 <__swsetup_r+0xba>
 8005fd2:	bf00      	nop
 8005fd4:	20000010 	.word	0x20000010
 8005fd8:	08006270 	.word	0x08006270
 8005fdc:	08006290 	.word	0x08006290
 8005fe0:	08006250 	.word	0x08006250

08005fe4 <__swhatbuf_r>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	460e      	mov	r6, r1
 8005fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fec:	4614      	mov	r4, r2
 8005fee:	2900      	cmp	r1, #0
 8005ff0:	461d      	mov	r5, r3
 8005ff2:	b096      	sub	sp, #88	; 0x58
 8005ff4:	da08      	bge.n	8006008 <__swhatbuf_r+0x24>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	061a      	lsls	r2, r3, #24
 8006000:	d410      	bmi.n	8006024 <__swhatbuf_r+0x40>
 8006002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006006:	e00e      	b.n	8006026 <__swhatbuf_r+0x42>
 8006008:	466a      	mov	r2, sp
 800600a:	f000 f85f 	bl	80060cc <_fstat_r>
 800600e:	2800      	cmp	r0, #0
 8006010:	dbf1      	blt.n	8005ff6 <__swhatbuf_r+0x12>
 8006012:	9a01      	ldr	r2, [sp, #4]
 8006014:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006018:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800601c:	425a      	negs	r2, r3
 800601e:	415a      	adcs	r2, r3
 8006020:	602a      	str	r2, [r5, #0]
 8006022:	e7ee      	b.n	8006002 <__swhatbuf_r+0x1e>
 8006024:	2340      	movs	r3, #64	; 0x40
 8006026:	2000      	movs	r0, #0
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	b016      	add	sp, #88	; 0x58
 800602c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006030 <__smakebuf_r>:
 8006030:	898b      	ldrh	r3, [r1, #12]
 8006032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006034:	079d      	lsls	r5, r3, #30
 8006036:	4606      	mov	r6, r0
 8006038:	460c      	mov	r4, r1
 800603a:	d507      	bpl.n	800604c <__smakebuf_r+0x1c>
 800603c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	6123      	str	r3, [r4, #16]
 8006044:	2301      	movs	r3, #1
 8006046:	6163      	str	r3, [r4, #20]
 8006048:	b002      	add	sp, #8
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	466a      	mov	r2, sp
 800604e:	ab01      	add	r3, sp, #4
 8006050:	f7ff ffc8 	bl	8005fe4 <__swhatbuf_r>
 8006054:	9900      	ldr	r1, [sp, #0]
 8006056:	4605      	mov	r5, r0
 8006058:	4630      	mov	r0, r6
 800605a:	f7ff f973 	bl	8005344 <_malloc_r>
 800605e:	b948      	cbnz	r0, 8006074 <__smakebuf_r+0x44>
 8006060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006064:	059a      	lsls	r2, r3, #22
 8006066:	d4ef      	bmi.n	8006048 <__smakebuf_r+0x18>
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	f043 0302 	orr.w	r3, r3, #2
 8006070:	81a3      	strh	r3, [r4, #12]
 8006072:	e7e3      	b.n	800603c <__smakebuf_r+0xc>
 8006074:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <__smakebuf_r+0x7c>)
 8006076:	62b3      	str	r3, [r6, #40]	; 0x28
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	6020      	str	r0, [r4, #0]
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	81a3      	strh	r3, [r4, #12]
 8006082:	9b00      	ldr	r3, [sp, #0]
 8006084:	6120      	str	r0, [r4, #16]
 8006086:	6163      	str	r3, [r4, #20]
 8006088:	9b01      	ldr	r3, [sp, #4]
 800608a:	b15b      	cbz	r3, 80060a4 <__smakebuf_r+0x74>
 800608c:	4630      	mov	r0, r6
 800608e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006092:	f000 f82d 	bl	80060f0 <_isatty_r>
 8006096:	b128      	cbz	r0, 80060a4 <__smakebuf_r+0x74>
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	89a0      	ldrh	r0, [r4, #12]
 80060a6:	4305      	orrs	r5, r0
 80060a8:	81a5      	strh	r5, [r4, #12]
 80060aa:	e7cd      	b.n	8006048 <__smakebuf_r+0x18>
 80060ac:	080050e5 	.word	0x080050e5

080060b0 <memchr>:
 80060b0:	4603      	mov	r3, r0
 80060b2:	b510      	push	{r4, lr}
 80060b4:	b2c9      	uxtb	r1, r1
 80060b6:	4402      	add	r2, r0
 80060b8:	4293      	cmp	r3, r2
 80060ba:	4618      	mov	r0, r3
 80060bc:	d101      	bne.n	80060c2 <memchr+0x12>
 80060be:	2000      	movs	r0, #0
 80060c0:	e003      	b.n	80060ca <memchr+0x1a>
 80060c2:	7804      	ldrb	r4, [r0, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	428c      	cmp	r4, r1
 80060c8:	d1f6      	bne.n	80060b8 <memchr+0x8>
 80060ca:	bd10      	pop	{r4, pc}

080060cc <_fstat_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	2300      	movs	r3, #0
 80060d0:	4d06      	ldr	r5, [pc, #24]	; (80060ec <_fstat_r+0x20>)
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	4611      	mov	r1, r2
 80060d8:	602b      	str	r3, [r5, #0]
 80060da:	f7fa fc7b 	bl	80009d4 <_fstat>
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	d102      	bne.n	80060e8 <_fstat_r+0x1c>
 80060e2:	682b      	ldr	r3, [r5, #0]
 80060e4:	b103      	cbz	r3, 80060e8 <_fstat_r+0x1c>
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
 80060ea:	bf00      	nop
 80060ec:	200020a4 	.word	0x200020a4

080060f0 <_isatty_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	2300      	movs	r3, #0
 80060f4:	4d05      	ldr	r5, [pc, #20]	; (800610c <_isatty_r+0x1c>)
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	f7fa fc79 	bl	80009f2 <_isatty>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_isatty_r+0x1a>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_isatty_r+0x1a>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	200020a4 	.word	0x200020a4

08006110 <_init>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	bf00      	nop
 8006114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006116:	bc08      	pop	{r3}
 8006118:	469e      	mov	lr, r3
 800611a:	4770      	bx	lr

0800611c <_fini>:
 800611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611e:	bf00      	nop
 8006120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006122:	bc08      	pop	{r3}
 8006124:	469e      	mov	lr, r3
 8006126:	4770      	bx	lr
