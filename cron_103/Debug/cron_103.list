
cron_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000626c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ac  080067ac  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b4  080067b4  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b4  080067b4  000167b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  080067bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000268  08006a24  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08006a24  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5f9  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d9  00000000  00000000  0002d88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0002fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00030bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195a6  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f67b  00000000  00000000  0004af26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e69c  00000000  00000000  0005a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8c3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb0  00000000  00000000  000e8c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000268 	.word	0x20000268
 8000128:	00000000 	.word	0x00000000
 800012c:	08006360 	.word	0x08006360

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000026c 	.word	0x2000026c
 8000148:	08006360 	.word	0x08006360

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_ldivmod>:
 8000170:	b97b      	cbnz	r3, 8000192 <__aeabi_ldivmod+0x22>
 8000172:	b972      	cbnz	r2, 8000192 <__aeabi_ldivmod+0x22>
 8000174:	2900      	cmp	r1, #0
 8000176:	bfbe      	ittt	lt
 8000178:	2000      	movlt	r0, #0
 800017a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800017e:	e006      	blt.n	800018e <__aeabi_ldivmod+0x1e>
 8000180:	bf08      	it	eq
 8000182:	2800      	cmpeq	r0, #0
 8000184:	bf1c      	itt	ne
 8000186:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800018a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018e:	f000 b9a9 	b.w	80004e4 <__aeabi_idiv0>
 8000192:	f1ad 0c08 	sub.w	ip, sp, #8
 8000196:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019a:	2900      	cmp	r1, #0
 800019c:	db09      	blt.n	80001b2 <__aeabi_ldivmod+0x42>
 800019e:	2b00      	cmp	r3, #0
 80001a0:	db1a      	blt.n	80001d8 <__aeabi_ldivmod+0x68>
 80001a2:	f000 f835 	bl	8000210 <__udivmoddi4>
 80001a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ae:	b004      	add	sp, #16
 80001b0:	4770      	bx	lr
 80001b2:	4240      	negs	r0, r0
 80001b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db1b      	blt.n	80001f4 <__aeabi_ldivmod+0x84>
 80001bc:	f000 f828 	bl	8000210 <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4240      	negs	r0, r0
 80001cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	4770      	bx	lr
 80001d8:	4252      	negs	r2, r2
 80001da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001de:	f000 f817 	bl	8000210 <__udivmoddi4>
 80001e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ea:	b004      	add	sp, #16
 80001ec:	4240      	negs	r0, r0
 80001ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f2:	4770      	bx	lr
 80001f4:	4252      	negs	r2, r2
 80001f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fa:	f000 f809 	bl	8000210 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4252      	negs	r2, r2
 800020a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14d      	bne.n	80002bc <__udivmoddi4+0xac>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d968      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b152      	cbz	r2, 8000242 <__udivmoddi4+0x32>
 800022c:	fa01 f302 	lsl.w	r3, r1, r2
 8000230:	f1c2 0120 	rsb	r1, r2, #32
 8000234:	fa20 f101 	lsr.w	r1, r0, r1
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	ea41 0803 	orr.w	r8, r1, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000246:	fbb8 f7f1 	udiv	r7, r8, r1
 800024a:	fa1f fe8c 	uxth.w	lr, ip
 800024e:	fb01 8817 	mls	r8, r1, r7, r8
 8000252:	fb07 f00e 	mul.w	r0, r7, lr
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	4298      	cmp	r0, r3
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x66>
 8000260:	eb1c 0303 	adds.w	r3, ip, r3
 8000264:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000268:	f080 811e 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026c:	4298      	cmp	r0, r3
 800026e:	f240 811b 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000272:	3f02      	subs	r7, #2
 8000274:	4463      	add	r3, ip
 8000276:	1a1b      	subs	r3, r3, r0
 8000278:	fbb3 f0f1 	udiv	r0, r3, r1
 800027c:	fb01 3310 	mls	r3, r1, r0, r3
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	b2a4      	uxth	r4, r4
 8000286:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028a:	45a6      	cmp	lr, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8109 	bcs.w	80004ac <__udivmoddi4+0x29c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8106 	bls.w	80004ac <__udivmoddi4+0x29c>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	2100      	movs	r1, #0
 80002a6:	eba4 040e 	sub.w	r4, r4, lr
 80002aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa8>
 80002b0:	2300      	movs	r3, #0
 80002b2:	40d4      	lsrs	r4, r2
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	f000 80ee 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c6:	2100      	movs	r1, #0
 80002c8:	e9c6 0500 	strd	r0, r5, [r6]
 80002cc:	4608      	mov	r0, r1
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fc 	bhi.w	80004dc <__udivmoddi4+0x2cc>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0303 	sbc.w	r3, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e2      	beq.n	80002b8 <__udivmoddi4+0xa8>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7df      	b.n	80002b8 <__udivmoddi4+0xa8>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8091 	bne.w	8000428 <__udivmoddi4+0x218>
 8000306:	eba1 000c 	sub.w	r0, r1, ip
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000310:	fa1f fe8c 	uxth.w	lr, ip
 8000314:	fbb0 f3f7 	udiv	r3, r0, r7
 8000318:	fb07 0013 	mls	r0, r7, r3, r0
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	42a8      	cmp	r0, r5
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0505 	adds.w	r5, ip, r5
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	42a8      	cmp	r0, r5
 8000336:	f200 80ce 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 800033a:	4643      	mov	r3, r8
 800033c:	1a2d      	subs	r5, r5, r0
 800033e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000342:	fb07 5510 	mls	r5, r7, r0, r5
 8000346:	fb0e fe00 	mul.w	lr, lr, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80b6 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 8000364:	4628      	mov	r0, r5
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79e      	b.n	80002ae <__udivmoddi4+0x9e>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fbba f8f9 	udiv	r8, sl, r9
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000392:	408d      	lsls	r5, r1
 8000394:	fa1f fe8c 	uxth.w	lr, ip
 8000398:	431d      	orrs	r5, r3
 800039a:	fa00 f301 	lsl.w	r3, r0, r1
 800039e:	fb08 f00e 	mul.w	r0, r8, lr
 80003a2:	0c2c      	lsrs	r4, r5, #16
 80003a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003a8:	42a0      	cmp	r0, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	42a0      	cmp	r0, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1a24      	subs	r4, r4, r0
 80003ca:	fbb4 f0f9 	udiv	r0, r4, r9
 80003ce:	fb09 4410 	mls	r4, r9, r0, r4
 80003d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9502 	umull	r9, r5, r0, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2d0>
 800040c:	ebb3 0208 	subs.w	r2, r3, r8
 8000410:	eb64 040e 	sbc.w	r4, r4, lr
 8000414:	fa22 f301 	lsr.w	r3, r2, r1
 8000418:	fa04 f707 	lsl.w	r7, r4, r7
 800041c:	431f      	orrs	r7, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	2100      	movs	r1, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa8>
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	f1c2 0120 	rsb	r1, r2, #32
 8000430:	fa25 f301 	lsr.w	r3, r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa20 f101 	lsr.w	r1, r0, r1
 800043c:	4095      	lsls	r5, r2
 800043e:	430d      	orrs	r5, r1
 8000440:	fbb3 f1f7 	udiv	r1, r3, r7
 8000444:	fb07 3311 	mls	r3, r7, r1, r3
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	0c28      	lsrs	r0, r5, #16
 800044e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000452:	fb01 f30e 	mul.w	r3, r1, lr
 8000456:	4283      	cmp	r3, r0
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0000 	adds.w	r0, ip, r0
 8000462:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	4283      	cmp	r3, r0
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3902      	subs	r1, #2
 800046e:	4460      	add	r0, ip
 8000470:	1ac0      	subs	r0, r0, r3
 8000472:	fbb0 f3f7 	udiv	r3, r0, r7
 8000476:	fb07 0013 	mls	r0, r7, r3, r0
 800047a:	b2ad      	uxth	r5, r5
 800047c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000480:	fb03 f00e 	mul.w	r0, r3, lr
 8000484:	42a8      	cmp	r0, r5
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0505 	adds.w	r5, ip, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	42a8      	cmp	r0, r5
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	1a28      	subs	r0, r5, r0
 800049c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e707      	b.n	80002b8 <__udivmoddi4+0xa8>
 80004a8:	462f      	mov	r7, r5
 80004aa:	e6e4      	b.n	8000276 <__udivmoddi4+0x66>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f9      	b.n	80002a4 <__udivmoddi4+0x94>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4643      	mov	r3, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4628      	mov	r0, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4641      	mov	r1, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	4464      	add	r4, ip
 80004d2:	3802      	subs	r0, #2
 80004d4:	e747      	b.n	8000366 <__udivmoddi4+0x156>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4465      	add	r5, ip
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x12c>
 80004dc:	4608      	mov	r0, r1
 80004de:	e706      	b.n	80002ee <__udivmoddi4+0xde>
 80004e0:	4631      	mov	r1, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa8>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <prv_parse_num>:
 *                      as function will only add new value to existing one
 * \param[out]      out_num: Pointer to output number
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_parse_num(const char* token, size_t max_len, size_t* index, size_t* out_num) {
 80004e8:	b480      	push	{r7}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	603b      	str	r3, [r7, #0]
    size_t cnt = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]

    ASSERT_TOKEN_VALID(CHAR_IS_NUM(*token));
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b2f      	cmp	r3, #47	; 0x2f
 8000500:	d903      	bls.n	800050a <prv_parse_num+0x22>
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b39      	cmp	r3, #57	; 0x39
 8000508:	d901      	bls.n	800050e <prv_parse_num+0x26>
 800050a:	2303      	movs	r3, #3
 800050c:	e02c      	b.n	8000568 <prv_parse_num+0x80>

    /* Parse number in decimal format */
    *out_num = 0;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
    while (max_len > 0 && CHAR_IS_NUM(token[cnt])) {
 8000514:	e012      	b.n	800053c <prv_parse_num+0x54>
        *out_num = (*out_num) * 10 + CHAR_TO_NUM(token[cnt]);
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4613      	mov	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4413      	add	r3, r2
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	4619      	mov	r1, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	4413      	add	r3, r2
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	440b      	add	r3, r1
 800052e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	601a      	str	r2, [r3, #0]
        ++cnt;
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
    while (max_len > 0 && CHAR_IS_NUM(token[cnt])) {
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d00b      	beq.n	800055a <prv_parse_num+0x72>
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	4413      	add	r3, r2
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b2f      	cmp	r3, #47	; 0x2f
 800054c:	d905      	bls.n	800055a <prv_parse_num+0x72>
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	4413      	add	r3, r2
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b39      	cmp	r3, #57	; 0x39
 8000558:	d9dd      	bls.n	8000516 <prv_parse_num+0x2e>
    }
    *index += cnt;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	441a      	add	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
    return lwdtcOK;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <prv_get_next_token>:
 * \brief           Get start of next token from a list
 * \param[in,out]   parser: Parser structure with all input data
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_get_next_token(prv_cron_parser_ctx_t* parser) {
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
    const char* s = parser->cron_str;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
    size_t len = parser->cron_str_len;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	60bb      	str	r3, [r7, #8]

    /* Remove all leading spaces from the string */
    for (; len > 0 && s != NULL && *s == ' ' && *s != '\0'; ++s, --len) {}
 8000586:	e005      	b.n	8000594 <prv_get_next_token+0x22>
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	3b01      	subs	r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00a      	beq.n	80005b0 <prv_get_next_token+0x3e>
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d007      	beq.n	80005b0 <prv_get_next_token+0x3e>
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b20      	cmp	r3, #32
 80005a6:	d103      	bne.n	80005b0 <prv_get_next_token+0x3e>
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1eb      	bne.n	8000588 <prv_get_next_token+0x16>
    if (len == 0 || s == NULL || *s == '\0') {
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d006      	beq.n	80005c4 <prv_get_next_token+0x52>
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d003      	beq.n	80005c4 <prv_get_next_token+0x52>
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d101      	bne.n	80005c8 <prv_get_next_token+0x56>
        return lwdtcERRTOKEN;
 80005c4:	2303      	movs	r3, #3
 80005c6:	e025      	b.n	8000614 <prv_get_next_token+0xa2>
    }
    parser->new_token = s; /* Set start of the token */
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	60da      	str	r2, [r3, #12]

    /* Search for the end of token */
    for (; len > 0 && s != NULL && *s != ' ' && *s != '\0'; ++s, --len) {
 80005ce:	e005      	b.n	80005dc <prv_get_next_token+0x6a>
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	3b01      	subs	r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d00a      	beq.n	80005f8 <prv_get_next_token+0x86>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d007      	beq.n	80005f8 <prv_get_next_token+0x86>
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b20      	cmp	r3, #32
 80005ee:	d003      	beq.n	80005f8 <prv_get_next_token+0x86>
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1eb      	bne.n	80005d0 <prv_get_next_token+0x5e>
        ;
    }
    parser->new_token_len = s - parser->new_token; /* Get token length */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	461a      	mov	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	611a      	str	r2, [r3, #16]

    parser->cron_str = s;       /* Set position where next token is about to start (with leading spaces) */
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	605a      	str	r2, [r3, #4]
    parser->cron_str_len = len; /* Set remaining length of the input string */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	609a      	str	r2, [r3, #8]
    return lwdtcOK;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <prv_get_and_parse_next_token>:
 * \param[in]       val_min: Minimum allowed value user can input
 * \param[in]       val_max: Maximum allowed value user can input
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_get_and_parse_next_token(prv_cron_parser_ctx_t* parser, uint8_t* bit_map, size_t val_min, size_t val_max) {
 800061e:	b580      	push	{r7, lr}
 8000620:	b08c      	sub	sp, #48	; 0x30
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
 800062a:	603b      	str	r3, [r7, #0]
    size_t i = 0, bit_start_pos, bit_end_pos, bit_step;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
    uint8_t is_range, is_opposite;

    /* Get next token from string */
    ASSERT_ACTION(prv_get_next_token(parser) == lwdtcOK);
 8000630:	68f8      	ldr	r0, [r7, #12]
 8000632:	f7ff ff9e 	bl	8000572 <prv_get_next_token>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <prv_get_and_parse_next_token+0x22>
 800063c:	2301      	movs	r3, #1
 800063e:	e139      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
     * Process token string in a while loop
     *
     * Use do-while loop to seamlessly process comma separations
     */
    do {
        bit_start_pos = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
        bit_end_pos = SIZE_MAX;
 8000644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000648:	617b      	str	r3, [r7, #20]
        bit_step = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	613b      	str	r3, [r7, #16]
        is_range = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        is_opposite = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        ASSERT_ACTION(i < parser->new_token_len); /* Check token length */
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	691a      	ldr	r2, [r3, #16]
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	429a      	cmp	r2, r3
 8000662:	d801      	bhi.n	8000668 <prv_get_and_parse_next_token+0x4a>
 8000664:	2301      	movs	r3, #1
 8000666:	e125      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
         *          step defined by number
         *          (space between * and / is used to be able to keep it as C comment for this example)
         */

        /* Find start character first */
        if (parser->new_token[i] == '*') {
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b2a      	cmp	r3, #42	; 0x2a
 8000674:	d107      	bne.n	8000686 <prv_get_and_parse_next_token+0x68>
            i++;
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3301      	adds	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
             * Star represents any value between minimum and maximum
             * for specific date & time field.
             *
             * Set start and end positions accordingly
             */
            bit_start_pos = val_min;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	61bb      	str	r3, [r7, #24]
            bit_end_pos = val_max;
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e014      	b.n	80006b0 <prv_get_and_parse_next_token+0x92>
             * eventually can even set maximum boundary later (when range is used)
             *
             * Since we don't know yet what is following after the number,
             * parse the number and set start and end bits to the same value
             */
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_start_pos)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	68da      	ldr	r2, [r3, #12]
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	18d0      	adds	r0, r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	691a      	ldr	r2, [r3, #16]
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	1ad1      	subs	r1, r2, r3
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	f107 021c 	add.w	r2, r7, #28
 800069e:	f7ff ff23 	bl	80004e8 <prv_parse_num>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <prv_get_and_parse_next_token+0x8e>
 80006a8:	2303      	movs	r3, #3
 80006aa:	e103      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
                               == lwdtcOK);
            bit_end_pos = bit_start_pos;
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	617b      	str	r3, [r7, #20]
         * Character "-" defines range between min and max
         *
         * At this moment, step is still "1", indicating
         * every value between min and max is to be set
         */
        if (i < parser->new_token_len && parser->new_token[i] == '-') {
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d939      	bls.n	800072e <prv_get_and_parse_next_token+0x110>
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	68da      	ldr	r2, [r3, #12]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b2d      	cmp	r3, #45	; 0x2d
 80006c6:	d132      	bne.n	800072e <prv_get_and_parse_next_token+0x110>
            ++i;
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	3301      	adds	r3, #1
 80006cc:	61fb      	str	r3, [r7, #28]

            /* Parse second part of range */
            ASSERT_ACTION(i < parser->new_token_len);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	691a      	ldr	r2, [r3, #16]
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d801      	bhi.n	80006dc <prv_get_and_parse_next_token+0xbe>
 80006d8:	2301      	movs	r3, #1
 80006da:	e0eb      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_end_pos)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	68da      	ldr	r2, [r3, #12]
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	18d0      	adds	r0, r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	691a      	ldr	r2, [r3, #16]
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	1ad1      	subs	r1, r2, r3
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	f107 021c 	add.w	r2, r7, #28
 80006f4:	f7ff fef8 	bl	80004e8 <prv_parse_num>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <prv_get_and_parse_next_token+0xe4>
 80006fe:	2303      	movs	r3, #3
 8000700:	e0d8      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
                               == lwdtcOK);

            /* Stop bit must be always higher or equal than start bit */
            if (bit_start_pos > bit_end_pos) {
 8000702:	69ba      	ldr	r2, [r7, #24]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	429a      	cmp	r2, r3
 8000708:	d908      	bls.n	800071c <prv_get_and_parse_next_token+0xfe>
                size_t tmp = bit_end_pos;
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	623b      	str	r3, [r7, #32]

                /* Change start and stop values */
                bit_end_pos = bit_start_pos;
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	617b      	str	r3, [r7, #20]
                bit_start_pos = tmp;
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	61bb      	str	r3, [r7, #24]
                /* Mark it as opposite direction */
                is_opposite = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
            ASSERT_TOKEN_VALID(bit_end_pos >= bit_start_pos);
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	429a      	cmp	r2, r3
 8000722:	d201      	bcs.n	8000728 <prv_get_and_parse_next_token+0x10a>
 8000724:	2303      	movs	r3, #3
 8000726:	e0c5      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
            is_range = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
         *
         * A step_bit must be calculated according to input value and
         * end_position must be set to maximum, but only when range is not used,
         * indicating we want to use full range of available value
         */
        if (i < parser->new_token_len && parser->new_token[i] == '/') {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	691a      	ldr	r2, [r3, #16]
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	429a      	cmp	r2, r3
 8000736:	d923      	bls.n	8000780 <prv_get_and_parse_next_token+0x162>
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	68da      	ldr	r2, [r3, #12]
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b2f      	cmp	r3, #47	; 0x2f
 8000744:	d11c      	bne.n	8000780 <prv_get_and_parse_next_token+0x162>
            ++i;
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3301      	adds	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_step)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	18d0      	adds	r0, r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	691a      	ldr	r2, [r3, #16]
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	1ad1      	subs	r1, r2, r3
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	f107 021c 	add.w	r2, r7, #28
 8000764:	f7ff fec0 	bl	80004e8 <prv_parse_num>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <prv_get_and_parse_next_token+0x154>
 800076e:	2303      	movs	r3, #3
 8000770:	e0a0      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
             * If user did not specify range (min-max) values,
             * then all bits to the end of value are valid.
             *
             * Indicate this by setting end position as being maximum
             */
            if (!is_range) {
 8000772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <prv_get_and_parse_next_token+0x162>
                bit_end_pos = SIZE_MAX;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077e:	617b      	str	r3, [r7, #20]
            }
        }

        /* Verify valid user inputs, to make sure min value is lower than max one */
        if (bit_start_pos < val_min) {
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	d901      	bls.n	800078c <prv_get_and_parse_next_token+0x16e>
            LWDTC_DEBUG("bit_start_pos & is less than minimum: %d/%d\r\n", (int)bit_start_pos, (int)val_min);
            return lwdtcERRTOKEN;
 8000788:	2303      	movs	r3, #3
 800078a:	e093      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
        }
        if (bit_end_pos > val_max) {
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d207      	bcs.n	80007a4 <prv_get_and_parse_next_token+0x186>
            /* Full value indicates complete range, perform manual strip */
            if (bit_end_pos != (size_t)-1) {
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800079a:	d001      	beq.n	80007a0 <prv_get_and_parse_next_token+0x182>
                LWDTC_DEBUG("bit_end_pos is greater than maximum: %d/%d\r\n", (int)bit_end_pos, (int)val_max);
                return lwdtcERRTOKEN;
 800079c:	2303      	movs	r3, #3
 800079e:	e089      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
            }
            bit_end_pos = val_max;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	617b      	str	r3, [r7, #20]
        }

        LWDTC_DEBUG("bit_start_pos: %u, bit_end_pos: %u, bit_step: %u, is_opposite: %u\r\n", (unsigned)bit_start_pos,
                    (unsigned)bit_end_pos, (unsigned)bit_step, (unsigned)is_opposite);

        if (is_opposite) {
 80007a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d048      	beq.n	800083e <prv_get_and_parse_next_token+0x220>
            size_t bit;

            /* Set bits in map from stop to the end value and from beginning to start value */
            for (bit = bit_end_pos; bit <= val_max; bit += bit_step) {
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b0:	e018      	b.n	80007e4 <prv_get_and_parse_next_token+0x1c6>
                BIT_SET(bit_map, bit);
 80007b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c0:	f003 0307 	and.w	r3, r3, #7
 80007c4:	2101      	movs	r1, #1
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b259      	sxtb	r1, r3
 80007d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	b2ca      	uxtb	r2, r1
 80007da:	701a      	strb	r2, [r3, #0]
            for (bit = bit_end_pos; bit <= val_max; bit += bit_step) {
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007e0:	4413      	add	r3, r2
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80007e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d9e2      	bls.n	80007b2 <prv_get_and_parse_next_token+0x194>
            }
            /* We start at the multiplier of bit_step value */
            for (bit = bit % bit_step + val_min; bit <= bit_start_pos; bit += bit_step) {
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80007f4:	fb01 f202 	mul.w	r2, r1, r2
 80007f8:	1a9b      	subs	r3, r3, r2
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000800:	e018      	b.n	8000834 <prv_get_and_parse_next_token+0x216>
                BIT_SET(bit_map, bit);
 8000802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b25a      	sxtb	r2, r3
 800080e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000810:	f003 0307 	and.w	r3, r3, #7
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	b25b      	sxtb	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b259      	sxtb	r1, r3
 8000820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000822:	08db      	lsrs	r3, r3, #3
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	b2ca      	uxtb	r2, r1
 800082a:	701a      	strb	r2, [r3, #0]
            for (bit = bit % bit_step + val_min; bit <= bit_start_pos; bit += bit_step) {
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000830:	4413      	add	r3, r2
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000838:	429a      	cmp	r2, r3
 800083a:	d9e2      	bls.n	8000802 <prv_get_and_parse_next_token+0x1e4>
 800083c:	e01f      	b.n	800087e <prv_get_and_parse_next_token+0x260>
            }
        } else {
            /* Set bits in map from start to end */
            for (size_t bit = bit_start_pos; bit <= bit_end_pos; bit += bit_step) {
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
 8000842:	e018      	b.n	8000876 <prv_get_and_parse_next_token+0x258>
                BIT_SET(bit_map, bit);
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	08db      	lsrs	r3, r3, #3
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b25a      	sxtb	r2, r3
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	2101      	movs	r1, #1
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	b25b      	sxtb	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b259      	sxtb	r1, r3
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	4413      	add	r3, r2
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
            for (size_t bit = bit_start_pos; bit <= bit_end_pos; bit += bit_step) {
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000872:	4413      	add	r3, r2
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800087a:	429a      	cmp	r2, r3
 800087c:	d9e2      	bls.n	8000844 <prv_get_and_parse_next_token+0x226>
            }
        }

        /* If we are not at the end, character must be comma */
        if (i == parser->new_token_len) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	429a      	cmp	r2, r3
 8000886:	d013      	beq.n	80008b0 <prv_get_and_parse_next_token+0x292>
            break;
        } else if (parser->new_token[i] != ',') {
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	68da      	ldr	r2, [r3, #12]
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	4413      	add	r3, r2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b2c      	cmp	r3, #44	; 0x2c
 8000894:	d001      	beq.n	800089a <prv_get_and_parse_next_token+0x27c>
            return lwdtcERRTOKEN;
 8000896:	2303      	movs	r3, #3
 8000898:	e00c      	b.n	80008b4 <prv_get_and_parse_next_token+0x296>
        }
    } while (parser->new_token[i++] == ','); /* Could be replaced by (1) */
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	68da      	ldr	r2, [r3, #12]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	1c59      	adds	r1, r3, #1
 80008a2:	61f9      	str	r1, [r7, #28]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b2c      	cmp	r3, #44	; 0x2c
 80008aa:	f43f aec9 	beq.w	8000640 <prv_get_and_parse_next_token+0x22>
 80008ae:	e000      	b.n	80008b2 <prv_get_and_parse_next_token+0x294>
            break;
 80008b0:	bf00      	nop
    return lwdtcOK;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3730      	adds	r7, #48	; 0x30
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <lwdtc_cron_parse_with_len>:
 * \param[in]       cron_str_len: Length of input cron string,
 *                      not counting potential `NULL` termination character
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_parse_with_len(lwdtc_cron_ctx_t* ctx, const char* cron_str, size_t cron_str_len) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
    prv_cron_parser_ctx_t parser = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
    lwdtcr_t res;

    ASSERT_PARAM(ctx != NULL && cron_str != NULL && cron_str_len > 0);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d005      	beq.n	80008ea <lwdtc_cron_parse_with_len+0x2e>
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <lwdtc_cron_parse_with_len+0x2e>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d101      	bne.n	80008ee <lwdtc_cron_parse_with_len+0x32>
 80008ea:	2302      	movs	r3, #2
 80008ec:	e090      	b.n	8000a10 <lwdtc_cron_parse_with_len+0x154>
    memset(ctx, 0x00, sizeof(*ctx)); /* Reset structure */
 80008ee:	222c      	movs	r2, #44	; 0x2c
 80008f0:	2100      	movs	r1, #0
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f003 f9be 	bl	8003c74 <memset>

    /* Setup parser */
    parser.ctx = ctx;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	613b      	str	r3, [r7, #16]
    parser.cron_str = cron_str;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	617b      	str	r3, [r7, #20]
    parser.cron_str_len = cron_str_len;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	61bb      	str	r3, [r7, #24]
    if ((res = (func_call)) != lwdtcOK) {                                                                              \
        return res;                                                                                                    \
    }

    /* Parse seconds field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->sec, LWDTC_SEC_MIN, LWDTC_SEC_MAX));
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	1d19      	adds	r1, r3, #4
 8000908:	f107 0010 	add.w	r0, r7, #16
 800090c:	233b      	movs	r3, #59	; 0x3b
 800090e:	2200      	movs	r2, #0
 8000910:	f7ff fe85 	bl	800061e <prv_get_and_parse_next_token>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800091a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <lwdtc_cron_parse_with_len+0x6c>
 8000922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000926:	e073      	b.n	8000a10 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Seconds token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse minutes field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->min, LWDTC_MIN_MIN, LWDTC_MIN_MAX));
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f103 010c 	add.w	r1, r3, #12
 800092e:	f107 0010 	add.w	r0, r7, #16
 8000932:	233b      	movs	r3, #59	; 0x3b
 8000934:	2200      	movs	r2, #0
 8000936:	f7ff fe72 	bl	800061e <prv_get_and_parse_next_token>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <lwdtc_cron_parse_with_len+0x92>
 8000948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800094c:	e060      	b.n	8000a10 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Minutes token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse hours field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->hour, LWDTC_HOUR_MIN, LWDTC_HOUR_MAX));
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f103 0114 	add.w	r1, r3, #20
 8000954:	f107 0010 	add.w	r0, r7, #16
 8000958:	2317      	movs	r3, #23
 800095a:	2200      	movs	r2, #0
 800095c:	f7ff fe5f 	bl	800061e <prv_get_and_parse_next_token>
 8000960:	4603      	mov	r3, r0
 8000962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <lwdtc_cron_parse_with_len+0xb8>
 800096e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000972:	e04d      	b.n	8000a10 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Hours token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse day in month field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->mday, LWDTC_MDAY_MIN, LWDTC_MDAY_MAX));
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f103 0117 	add.w	r1, r3, #23
 800097a:	f107 0010 	add.w	r0, r7, #16
 800097e:	231f      	movs	r3, #31
 8000980:	2201      	movs	r2, #1
 8000982:	f7ff fe4c 	bl	800061e <prv_get_and_parse_next_token>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800098c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <lwdtc_cron_parse_with_len+0xde>
 8000994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000998:	e03a      	b.n	8000a10 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Mday token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse month field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->mon, LWDTC_MON_MIN, LWDTC_MON_MAX));
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f103 011b 	add.w	r1, r3, #27
 80009a0:	f107 0010 	add.w	r0, r7, #16
 80009a4:	230c      	movs	r3, #12
 80009a6:	2201      	movs	r2, #1
 80009a8:	f7ff fe39 	bl	800061e <prv_get_and_parse_next_token>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <lwdtc_cron_parse_with_len+0x104>
 80009ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009be:	e027      	b.n	8000a10 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Month token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse day in a week field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->wday, LWDTC_WDAY_MIN, LWDTC_WDAY_MAX));
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f103 011d 	add.w	r1, r3, #29
 80009c6:	f107 0010 	add.w	r0, r7, #16
 80009ca:	2306      	movs	r3, #6
 80009cc:	2200      	movs	r2, #0
 80009ce:	f7ff fe26 	bl	800061e <prv_get_and_parse_next_token>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <lwdtc_cron_parse_with_len+0x12a>
 80009e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e4:	e014      	b.n	8000a10 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Weekday token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse year field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->year, LWDTC_YEAR_MIN, LWDTC_YEAR_MAX));
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f103 011e 	add.w	r1, r3, #30
 80009ec:	f107 0010 	add.w	r0, r7, #16
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	2200      	movs	r2, #0
 80009f4:	f7ff fe13 	bl	800061e <prv_get_and_parse_next_token>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <lwdtc_cron_parse_with_len+0x150>
 8000a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a0a:	e001      	b.n	8000a10 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Year token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);
    return res;
 8000a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <lwdtc_cron_parse_multi>:
 *                      Used only if function doesn't return \ref lwdtcOK,
 *                      otherwise pointer doesn't get modified
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_parse_multi(lwdtc_cron_ctx_t* cron_ctx, struct dcCron dcCrontxt[], size_t ctx_len, size_t* fail_index) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
    lwdtcr_t res = lwdtcERR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	77fb      	strb	r3, [r7, #31]
    int x = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]

    ASSERT_PARAM(cron_ctx != NULL && ctx_len > 0);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <lwdtc_cron_parse_multi+0x22>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d101      	bne.n	8000a3e <lwdtc_cron_parse_multi+0x26>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e038      	b.n	8000ab0 <lwdtc_cron_parse_multi+0x98>
//

    /* Parse all input strings, each to its own cron context structure */
    for (size_t i = 0; i < ctx_len; ++i) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	e02e      	b.n	8000aa2 <lwdtc_cron_parse_multi+0x8a>
    	x = strlen(dcCrontxt[i].cron);
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4413      	add	r3, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fb79 	bl	800014c <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	617b      	str	r3, [r7, #20]
        if ((res = lwdtc_cron_parse_with_len(&cron_ctx[i], dcCrontxt[i].cron, x)) != lwdtcOK) {
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	222c      	movs	r2, #44	; 0x2c
 8000a62:	fb02 f303 	mul.w	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	18d0      	adds	r0, r2, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	461a      	mov	r2, r3
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f7ff ff1c 	bl	80008bc <lwdtc_cron_parse_with_len>
 8000a84:	4603      	mov	r3, r0
 8000a86:	77fb      	strb	r3, [r7, #31]
 8000a88:	7ffb      	ldrb	r3, [r7, #31]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <lwdtc_cron_parse_multi+0x84>
            if (fail_index != NULL) {
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00b      	beq.n	8000aac <lwdtc_cron_parse_multi+0x94>
                *fail_index = i;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	601a      	str	r2, [r3, #0]
            }
            break;
 8000a9a:	e007      	b.n	8000aac <lwdtc_cron_parse_multi+0x94>
    for (size_t i = 0; i < ctx_len; ++i) {
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d3cc      	bcc.n	8000a44 <lwdtc_cron_parse_multi+0x2c>
 8000aaa:	e000      	b.n	8000aae <lwdtc_cron_parse_multi+0x96>
            break;
 8000aac:	bf00      	nop
        }
    }
    return res;
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <lwdtc_cron_is_valid_for_time>:
 *                      and does not perform additional check
 * \param[in]       cron_ctx: Cron context object with valid structure
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_is_valid_for_time(const struct tm* tm_time, const lwdtc_cron_ctx_t* cron_ctx, int *idtask) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
    lwdtcr_t res = lwdtcOK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	75fb      	strb	r3, [r7, #23]
    int i = *idtask;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	613b      	str	r3, [r7, #16]

    ASSERT_PARAM(tm_time != NULL && cron_ctx != NULL);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <lwdtc_cron_is_valid_for_time+0x22>
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <lwdtc_cron_is_valid_for_time+0x26>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e09f      	b.n	8000c1e <lwdtc_cron_is_valid_for_time+0x166>
     * - When particular day in month occurs
     * - or when particular day in week occurs, effectively becoming OR operation.
     *
     * Our cron is a valid when bitwise AND-ed between all fields is a pass
     */
    if (!BIT_IS_SET(cron_ctx[i].sec, tm_time->tm_sec) || !BIT_IS_SET(cron_ctx[i].min, tm_time->tm_min)
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	222c      	movs	r2, #44	; 0x2c
 8000ae2:	fb02 f303 	mul.w	r3, r2, r3
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	441a      	add	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	10db      	asrs	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	791b      	ldrb	r3, [r3, #4]
 8000af4:	461a      	mov	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	fa42 f303 	asr.w	r3, r2, r3
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 8086 	beq.w	8000c18 <lwdtc_cron_is_valid_for_time+0x160>
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	222c      	movs	r2, #44	; 0x2c
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	441a      	add	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	10db      	asrs	r3, r3, #3
 8000b1e:	4413      	add	r3, r2
 8000b20:	7b1b      	ldrb	r3, [r3, #12]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	fa42 f303 	asr.w	r3, r2, r3
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d06f      	beq.n	8000c18 <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].hour, tm_time->tm_hour) || !BIT_IS_SET(cron_ctx[i].mday, tm_time->tm_mday)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	222c      	movs	r2, #44	; 0x2c
 8000b3c:	fb02 f303 	mul.w	r3, r2, r3
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	441a      	add	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	10db      	asrs	r3, r3, #3
 8000b4a:	4413      	add	r3, r2
 8000b4c:	7d1b      	ldrb	r3, [r3, #20]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	fa42 f303 	asr.w	r3, r2, r3
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d059      	beq.n	8000c18 <lwdtc_cron_is_valid_for_time+0x160>
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	222c      	movs	r2, #44	; 0x2c
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	441a      	add	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	10db      	asrs	r3, r3, #3
 8000b76:	4413      	add	r3, r2
 8000b78:	7ddb      	ldrb	r3, [r3, #23]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	f003 0307 	and.w	r3, r3, #7
 8000b84:	fa42 f303 	asr.w	r3, r2, r3
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d043      	beq.n	8000c18 <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].mon, tm_time->tm_mon) || !BIT_IS_SET(cron_ctx[i].wday, tm_time->tm_wday)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	222c      	movs	r2, #44	; 0x2c
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	441a      	add	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	10db      	asrs	r3, r3, #3
 8000ba2:	4413      	add	r3, r2
 8000ba4:	7edb      	ldrb	r3, [r3, #27]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	fa42 f303 	asr.w	r3, r2, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d02d      	beq.n	8000c18 <lwdtc_cron_is_valid_for_time+0x160>
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	222c      	movs	r2, #44	; 0x2c
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	441a      	add	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	10db      	asrs	r3, r3, #3
 8000bce:	4413      	add	r3, r2
 8000bd0:	7f5b      	ldrb	r3, [r3, #29]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	fa42 f303 	asr.w	r3, r2, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d017      	beq.n	8000c18 <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].year, (tm_time->tm_year - 100))) {
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	222c      	movs	r2, #44	; 0x2c
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	441a      	add	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	3b64      	subs	r3, #100	; 0x64
 8000bfa:	10db      	asrs	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	7f9b      	ldrb	r3, [r3, #30]
 8000c00:	461a      	mov	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	3b64      	subs	r3, #100	; 0x64
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	fa42 f303 	asr.w	r3, r2, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <lwdtc_cron_is_valid_for_time+0x164>
        res = lwdtcERR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	75fb      	strb	r3, [r7, #23]
    }
    return res;
 8000c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	371c      	adds	r7, #28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d013      	beq.n	8000c68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00b      	beq.n	8000c68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c50:	e000      	b.n	8000c54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f9      	beq.n	8000c52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	2332      	movs	r3, #50	; 0x32
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <_write+0x48>)
 8000c8a:	f002 fd3e 	bl	800370a <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e009      	b.n	8000ca8 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffc3 	bl	8000c28 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf1      	blt.n	8000c94 <_write+0x20>
	}
	return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200002b0 	.word	0x200002b0

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f000 fc2b 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f8b3 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 f983 	bl	8000fd8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000cd2:	f000 f90d 	bl	8000ef0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000cd6:	f000 f955 	bl	8000f84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("Hello world! \r\n");
 8000cda:	4847      	ldr	r0, [pc, #284]	; (8000df8 <main+0x138>)
 8000cdc:	f003 fba6 	bl	800442c <puts>
	static lwdtc_cron_ctx_t cron_ctxs[MAXSIZE];

	/* Define context for CRON, used to parse data to */
	size_t fail_index;

	printf("Count task %d\r\n", LWDTC_ARRAYSIZE(dcCrontxt));
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	4846      	ldr	r0, [pc, #280]	; (8000dfc <main+0x13c>)
 8000ce4:	f003 fb1c 	bl	8004320 <iprintf>
	/* Parse all cron strings */
	if (lwdtc_cron_parse_multi(cron_ctxs, dcCrontxt, MAXSIZE, &fail_index)
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	220a      	movs	r2, #10
 8000cee:	4944      	ldr	r1, [pc, #272]	; (8000e00 <main+0x140>)
 8000cf0:	4844      	ldr	r0, [pc, #272]	; (8000e04 <main+0x144>)
 8000cf2:	f7ff fe91 	bl	8000a18 <lwdtc_cron_parse_multi>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d004      	beq.n	8000d06 <main+0x46>
			!= lwdtcOK) {
		printf("Failed to parse cron at index %d\r\n", (int) fail_index);
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4841      	ldr	r0, [pc, #260]	; (8000e08 <main+0x148>)
 8000d02:	f003 fb0d 	bl	8004320 <iprintf>
	}
	printf("CRONs parsed and ready to go\r\n");
 8000d06:	4841      	ldr	r0, [pc, #260]	; (8000e0c <main+0x14c>)
 8000d08:	f003 fb90 	bl	800442c <puts>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4940      	ldr	r1, [pc, #256]	; (8000e10 <main+0x150>)
 8000d10:	4840      	ldr	r0, [pc, #256]	; (8000e14 <main+0x154>)
 8000d12:	f001 fdad 	bl	8002870 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d16:	2200      	movs	r2, #0
 8000d18:	493f      	ldr	r1, [pc, #252]	; (8000e18 <main+0x158>)
 8000d1a:	483e      	ldr	r0, [pc, #248]	; (8000e14 <main+0x154>)
 8000d1c:	f001 ff36 	bl	8002b8c <HAL_RTC_GetDate>

		stm.tm_year = sDate.Year + 100; //RTC_Year rang 0-99,but tm_year since 1900
 8000d20:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <main+0x158>)
 8000d22:	78db      	ldrb	r3, [r3, #3]
 8000d24:	3364      	adds	r3, #100	; 0x64
 8000d26:	617b      	str	r3, [r7, #20]
		stm.tm_mon = sDate.Month - 1; //RTC_Month rang 1-12,but tm_mon rang 0-11
 8000d28:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <main+0x158>)
 8000d2a:	785b      	ldrb	r3, [r3, #1]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
		stm.tm_mday = sDate.Date; //RTC_Date rang 1-31 and tm_mday rang 1-31
 8000d30:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <main+0x158>)
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	60fb      	str	r3, [r7, #12]
		stm.tm_hour = sTime.Hours;   //RTC_Hours rang 0-23 and tm_hour rang 0-23
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <main+0x150>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	60bb      	str	r3, [r7, #8]
		stm.tm_min = sTime.Minutes; //RTC_Minutes rang 0-59 and tm_min rang 0-59
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <main+0x150>)
 8000d3e:	785b      	ldrb	r3, [r3, #1]
 8000d40:	607b      	str	r3, [r7, #4]
		stm.tm_sec = sTime.Seconds;
 8000d42:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <main+0x150>)
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	603b      	str	r3, [r7, #0]
		cronetime = mktime(&stm);
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 f872 	bl	8003e34 <mktime>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4931      	ldr	r1, [pc, #196]	; (8000e1c <main+0x15c>)
 8000d56:	e9c1 2300 	strd	r2, r3, [r1]

		if (cronetime != cronetime_old) {
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <main+0x15c>)
 8000d5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <main+0x160>)
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	4299      	cmp	r1, r3
 8000d68:	bf08      	it	eq
 8000d6a:	4290      	cmpeq	r0, r2
 8000d6c:	d0ce      	beq.n	8000d0c <main+0x4c>
			cronetime_old = cronetime;
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <main+0x15c>)
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	492a      	ldr	r1, [pc, #168]	; (8000e20 <main+0x160>)
 8000d76:	e9c1 2300 	strd	r2, r3, [r1]
			timez = localtime(&cronetime);
 8000d7a:	4828      	ldr	r0, [pc, #160]	; (8000e1c <main+0x15c>)
 8000d7c:	f002 fe5a 	bl	8003a34 <localtime>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a28      	ldr	r2, [pc, #160]	; (8000e24 <main+0x164>)
 8000d84:	6013      	str	r3, [r2, #0]
			;
			i = 0;
 8000d86:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <main+0x168>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]

			/* Check if CRON should execute */
			while (i < LWDTC_ARRAYSIZE(cron_ctxs)) {
 8000d8c:	e02f      	b.n	8000dee <main+0x12e>
				if (lwdtc_cron_is_valid_for_time(timez, cron_ctxs, &i)
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <main+0x164>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <main+0x168>)
 8000d94:	491b      	ldr	r1, [pc, #108]	; (8000e04 <main+0x144>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fe8e 	bl	8000ab8 <lwdtc_cron_is_valid_for_time>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d120      	bne.n	8000de4 <main+0x124>
						== lwdtcOK) {
					printf("Executing CRON task %s ACTIVE %s ID %d \r\n",
							dcCrontxt[i].cron, dcCrontxt[i].activ, i);
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <main+0x168>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <main+0x140>)
 8000db0:	1899      	adds	r1, r3, r2
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <main+0x168>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	3310      	adds	r3, #16
 8000dc0:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <main+0x140>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	1d1a      	adds	r2, r3, #4
					printf("Executing CRON task %s ACTIVE %s ID %d \r\n",
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <main+0x168>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4818      	ldr	r0, [pc, #96]	; (8000e2c <main+0x16c>)
 8000dcc:	f003 faa8 	bl	8004320 <iprintf>
					if(i==0){
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <main+0x168>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <main+0x124>
					//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
					GPIOC->ODR ^= GPIO_PIN_13; // toggle PA1
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <main+0x170>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <main+0x170>)
 8000dde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000de2:	60d3      	str	r3, [r2, #12]
					}
				}
				i++;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <main+0x168>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <main+0x168>)
 8000dec:	6013      	str	r3, [r2, #0]
			while (i < LWDTC_ARRAYSIZE(cron_ctxs)) {
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <main+0x168>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b09      	cmp	r3, #9
 8000df4:	d9cb      	bls.n	8000d8e <main+0xce>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000df6:	e789      	b.n	8000d0c <main+0x4c>
 8000df8:	08006378 	.word	0x08006378
 8000dfc:	08006388 	.word	0x08006388
 8000e00:	20000000 	.word	0x20000000
 8000e04:	200002fc 	.word	0x200002fc
 8000e08:	08006398 	.word	0x08006398
 8000e0c:	080063bc 	.word	0x080063bc
 8000e10:	200002f4 	.word	0x200002f4
 8000e14:	2000029c 	.word	0x2000029c
 8000e18:	200002f8 	.word	0x200002f8
 8000e1c:	20000288 	.word	0x20000288
 8000e20:	20000290 	.word	0x20000290
 8000e24:	20000284 	.word	0x20000284
 8000e28:	20000298 	.word	0x20000298
 8000e2c:	080063dc 	.word	0x080063dc
 8000e30:	40011000 	.word	0x40011000

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	2228      	movs	r2, #40	; 0x28
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 ff16 	bl	8003c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e64:	2309      	movs	r3, #9
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	2301      	movs	r3, #1
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e76:	2301      	movs	r3, #1
 8000e78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e84:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fe00 	bl	8001a94 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e9a:	f000 f907 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 f86c 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ec6:	f000 f8f1 	bl	80010ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 fa26 	bl	8002328 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ee2:	f000 f8e3 	bl	80010ac <Error_Handler>
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3750      	adds	r7, #80	; 0x50
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2100      	movs	r1, #0
 8000efa:	460a      	mov	r2, r1
 8000efc:	801a      	strh	r2, [r3, #0]
 8000efe:	460a      	mov	r2, r1
 8000f00:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_RTC_Init+0x8c>)
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <MX_RTC_Init+0x90>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_RTC_Init+0x8c>)
 8000f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f12:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_RTC_Init+0x8c>)
 8000f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <MX_RTC_Init+0x8c>)
 8000f1e:	f001 fb79 	bl	8002614 <HAL_RTC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000f28:	f000 f8c0 	bl	80010ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8000f2c:	2313      	movs	r3, #19
 8000f2e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x5;
 8000f30:	2305      	movs	r3, #5
 8000f32:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480f      	ldr	r0, [pc, #60]	; (8000f7c <MX_RTC_Init+0x8c>)
 8000f40:	f001 fbfe 	bl	8002740 <HAL_RTC_SetTime>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000f4a:	f000 f8af 	bl	80010ac <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000f4e:	2306      	movs	r3, #6
 8000f50:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 8000f52:	2304      	movs	r3, #4
 8000f54:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 8000f5a:	2323      	movs	r3, #35	; 0x23
 8000f5c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_RTC_Init+0x8c>)
 8000f66:	f001 fd5b 	bl	8002a20 <HAL_RTC_SetDate>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000f70:	f000 f89c 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000029c 	.word	0x2000029c
 8000f80:	40002800 	.word	0x40002800

08000f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <MX_USART1_UART_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	f002 fb58 	bl	8003670 <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f871 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200002b0 	.word	0x200002b0
 8000fd4:	40013800 	.word	0x40013800

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_GPIO_Init+0xa8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a23      	ldr	r2, [pc, #140]	; (8001080 <MX_GPIO_Init+0xa8>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_GPIO_Init+0xa8>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <MX_GPIO_Init+0xa8>)
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0320 	and.w	r3, r3, #32
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_GPIO_Init+0xa8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a17      	ldr	r2, [pc, #92]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_GPIO_Init+0xa8>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a11      	ldr	r2, [pc, #68]	; (8001080 <MX_GPIO_Init+0xa8>)
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_GPIO_Init+0xa8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_GPIO_Init+0xac>)
 8001054:	f000 fcfa 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2302      	movs	r3, #2
 8001068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4619      	mov	r1, r3
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_GPIO_Init+0xac>)
 8001072:	f000 fb67 	bl	8001744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	40011000 	.word	0x40011000

08001088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109a:	f000 fa57 	bl	800154c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40000800 	.word	0x40000800

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_MspInit+0x5c>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_MspInit+0x5c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_MspInit+0x5c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_MspInit+0x5c>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_MspInit+0x5c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_MspInit+0x5c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_MspInit+0x60>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_MspInit+0x60>)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000

0800111c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <HAL_RTC_MspInit+0x4c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d118      	bne.n	8001160 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800112e:	f000 fca5 	bl	8001a7c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_RTC_MspInit+0x50>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_RTC_MspInit+0x50>)
 8001138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_RTC_MspInit+0x50>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_RTC_MspInit+0x54>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2029      	movs	r0, #41	; 0x29
 8001156:	f000 faca 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800115a:	2029      	movs	r0, #41	; 0x29
 800115c:	f000 fae3 	bl	8001726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40002800 	.word	0x40002800
 800116c:	40021000 	.word	0x40021000
 8001170:	4242043c 	.word	0x4242043c

08001174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_UART_MspInit+0x8c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d131      	bne.n	80011f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_UART_MspInit+0x90>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <HAL_UART_MspInit+0x90>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_UART_MspInit+0x90>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x90>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_UART_MspInit+0x90>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_UART_MspInit+0x90>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_UART_MspInit+0x94>)
 80011da:	f000 fab3 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_UART_MspInit+0x94>)
 80011f4:	f000 faa6 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40013800 	.word	0x40013800
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_InitTick+0xe8>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <HAL_InitTick+0xe8>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <HAL_InitTick+0xe8>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800123a:	f107 0210 	add.w	r2, r7, #16
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f001 f821 	bl	800228c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001254:	f000 fff2 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8001258:	6378      	str	r0, [r7, #52]	; 0x34
 800125a:	e004      	b.n	8001266 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800125c:	f000 ffee 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8001260:	4603      	mov	r3, r0
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001268:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <HAL_InitTick+0xec>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0c9b      	lsrs	r3, r3, #18
 8001270:	3b01      	subs	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_InitTick+0xf0>)
 8001276:	4a22      	ldr	r2, [pc, #136]	; (8001300 <HAL_InitTick+0xf4>)
 8001278:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_InitTick+0xf0>)
 800127c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001280:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_InitTick+0xf0>)
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_InitTick+0xf0>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_InitTick+0xf0>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_InitTick+0xf0>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800129a:	4818      	ldr	r0, [pc, #96]	; (80012fc <HAL_InitTick+0xf0>)
 800129c:	f001 ff9e 	bl	80031dc <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d11b      	bne.n	80012e6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80012ae:	4813      	ldr	r0, [pc, #76]	; (80012fc <HAL_InitTick+0xf0>)
 80012b0:	f001 ffec 	bl	800328c <HAL_TIM_Base_Start_IT>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d111      	bne.n	80012e6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012c2:	201e      	movs	r0, #30
 80012c4:	f000 fa2f 	bl	8001726 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	d808      	bhi.n	80012e0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80012ce:	2200      	movs	r2, #0
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	201e      	movs	r0, #30
 80012d4:	f000 fa0b 	bl	80016ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_InitTick+0xf8>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e002      	b.n	80012e6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3738      	adds	r7, #56	; 0x38
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	431bde83 	.word	0x431bde83
 80012fc:	200004b4 	.word	0x200004b4
 8001300:	40000800 	.word	0x40000800
 8001304:	20000198 	.word	0x20000198

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
	...

08001358 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM4_IRQHandler+0x10>)
 800135e:	f001 ffe7 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200004b4 	.word	0x200004b4

0800136c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <RTC_Alarm_IRQHandler+0x10>)
 8001372:	f001 fc5f 	bl	8002c34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000029c 	.word	0x2000029c

08001380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return 1;
 8001384:	2301      	movs	r3, #1
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <_kill>:

int _kill(int pid, int sig)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001398:	f002 fb22 	bl	80039e0 <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	2216      	movs	r2, #22
 80013a0:	601a      	str	r2, [r3, #0]
  return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_exit>:

void _exit (int status)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffe7 	bl	800138e <_kill>
  while (1) {}    /* Make sure we hang here */
 80013c0:	e7fe      	b.n	80013c0 <_exit+0x12>

080013c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e00a      	b.n	80013ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d4:	f3af 8000 	nop.w
 80013d8:	4601      	mov	r1, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	60ba      	str	r2, [r7, #8]
 80013e0:	b2ca      	uxtb	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf0      	blt.n	80013d4 <_read+0x12>
  }

  return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001422:	605a      	str	r2, [r3, #4]
  return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <_isatty>:

int _isatty(int file)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f002 faa8 	bl	80039e0 <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20005000 	.word	0x20005000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	20000500 	.word	0x20000500
 80014c4:	20000540 	.word	0x20000540

080014c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	; (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fa:	f7ff ffe5 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f002 fa75 	bl	80039ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff fbdd 	bl	8000cc0 <main>
  bx lr
 8001506:	4770      	bx	lr
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8001510:	080067bc 	.word	0x080067bc
  ldr r2, =_sbss
 8001514:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8001518:	20000540 	.word	0x20000540

0800151c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x28>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f8d1 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	200f      	movs	r0, #15
 8001538:	f7ff fe68 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fdbc 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x1c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x20>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_IncTick+0x20>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	2000019c 	.word	0x2000019c
 800156c:	20000504 	.word	0x20000504

08001570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <HAL_GetTick+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000504 	.word	0x20000504

08001584 <__NVIC_SetPriorityGrouping>:
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4906      	ldr	r1, [pc, #24]	; (800161c <__NVIC_EnableIRQ+0x34>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff4f 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff64 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ffb2 	bl	8001674 <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff81 	bl	8001620 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff57 	bl	80015e8 <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001756:	e169      	b.n	8001a2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001758:	2201      	movs	r2, #1
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	429a      	cmp	r2, r3
 8001772:	f040 8158 	bne.w	8001a26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a9a      	ldr	r2, [pc, #616]	; (80019e4 <HAL_GPIO_Init+0x2a0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d05e      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 8001780:	4a98      	ldr	r2, [pc, #608]	; (80019e4 <HAL_GPIO_Init+0x2a0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d875      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 8001786:	4a98      	ldr	r2, [pc, #608]	; (80019e8 <HAL_GPIO_Init+0x2a4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d058      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 800178c:	4a96      	ldr	r2, [pc, #600]	; (80019e8 <HAL_GPIO_Init+0x2a4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d86f      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 8001792:	4a96      	ldr	r2, [pc, #600]	; (80019ec <HAL_GPIO_Init+0x2a8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d052      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 8001798:	4a94      	ldr	r2, [pc, #592]	; (80019ec <HAL_GPIO_Init+0x2a8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d869      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 800179e:	4a94      	ldr	r2, [pc, #592]	; (80019f0 <HAL_GPIO_Init+0x2ac>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d04c      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 80017a4:	4a92      	ldr	r2, [pc, #584]	; (80019f0 <HAL_GPIO_Init+0x2ac>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d863      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 80017aa:	4a92      	ldr	r2, [pc, #584]	; (80019f4 <HAL_GPIO_Init+0x2b0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d046      	beq.n	800183e <HAL_GPIO_Init+0xfa>
 80017b0:	4a90      	ldr	r2, [pc, #576]	; (80019f4 <HAL_GPIO_Init+0x2b0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d85d      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d82a      	bhi.n	8001810 <HAL_GPIO_Init+0xcc>
 80017ba:	2b12      	cmp	r3, #18
 80017bc:	d859      	bhi.n	8001872 <HAL_GPIO_Init+0x12e>
 80017be:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <HAL_GPIO_Init+0x80>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	0800183f 	.word	0x0800183f
 80017c8:	08001819 	.word	0x08001819
 80017cc:	0800182b 	.word	0x0800182b
 80017d0:	0800186d 	.word	0x0800186d
 80017d4:	08001873 	.word	0x08001873
 80017d8:	08001873 	.word	0x08001873
 80017dc:	08001873 	.word	0x08001873
 80017e0:	08001873 	.word	0x08001873
 80017e4:	08001873 	.word	0x08001873
 80017e8:	08001873 	.word	0x08001873
 80017ec:	08001873 	.word	0x08001873
 80017f0:	08001873 	.word	0x08001873
 80017f4:	08001873 	.word	0x08001873
 80017f8:	08001873 	.word	0x08001873
 80017fc:	08001873 	.word	0x08001873
 8001800:	08001873 	.word	0x08001873
 8001804:	08001873 	.word	0x08001873
 8001808:	08001821 	.word	0x08001821
 800180c:	08001835 	.word	0x08001835
 8001810:	4a79      	ldr	r2, [pc, #484]	; (80019f8 <HAL_GPIO_Init+0x2b4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001816:	e02c      	b.n	8001872 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e029      	b.n	8001874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	3304      	adds	r3, #4
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e024      	b.n	8001874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	3308      	adds	r3, #8
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e01f      	b.n	8001874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	330c      	adds	r3, #12
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e01a      	b.n	8001874 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001846:	2304      	movs	r3, #4
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e013      	b.n	8001874 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001854:	2308      	movs	r3, #8
 8001856:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	611a      	str	r2, [r3, #16]
          break;
 800185e:	e009      	b.n	8001874 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001860:	2308      	movs	r3, #8
 8001862:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	615a      	str	r2, [r3, #20]
          break;
 800186a:	e003      	b.n	8001874 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
          break;
 8001870:	e000      	b.n	8001874 <HAL_GPIO_Init+0x130>
          break;
 8001872:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	d801      	bhi.n	800187e <HAL_GPIO_Init+0x13a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	e001      	b.n	8001882 <HAL_GPIO_Init+0x13e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3304      	adds	r3, #4
 8001882:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d802      	bhi.n	8001890 <HAL_GPIO_Init+0x14c>
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	e002      	b.n	8001896 <HAL_GPIO_Init+0x152>
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	3b08      	subs	r3, #8
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	210f      	movs	r1, #15
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	6a39      	ldr	r1, [r7, #32]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80b1 	beq.w	8001a26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c4:	4b4d      	ldr	r3, [pc, #308]	; (80019fc <HAL_GPIO_Init+0x2b8>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_GPIO_Init+0x2b8>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <HAL_GPIO_Init+0x2b8>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018dc:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <HAL_GPIO_Init+0x2bc>)
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a40      	ldr	r2, [pc, #256]	; (8001a04 <HAL_GPIO_Init+0x2c0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_GPIO_Init+0x1ec>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a3f      	ldr	r2, [pc, #252]	; (8001a08 <HAL_GPIO_Init+0x2c4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00d      	beq.n	800192c <HAL_GPIO_Init+0x1e8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a3e      	ldr	r2, [pc, #248]	; (8001a0c <HAL_GPIO_Init+0x2c8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d007      	beq.n	8001928 <HAL_GPIO_Init+0x1e4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a3d      	ldr	r2, [pc, #244]	; (8001a10 <HAL_GPIO_Init+0x2cc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_GPIO_Init+0x1e0>
 8001920:	2303      	movs	r3, #3
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 8001924:	2304      	movs	r3, #4
 8001926:	e004      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 8001928:	2302      	movs	r3, #2
 800192a:	e002      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 8001930:	2300      	movs	r3, #0
 8001932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001934:	f002 0203 	and.w	r2, r2, #3
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	4093      	lsls	r3, r2
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001942:	492f      	ldr	r1, [pc, #188]	; (8001a00 <HAL_GPIO_Init+0x2bc>)
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	492c      	ldr	r1, [pc, #176]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	4928      	ldr	r1, [pc, #160]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 8001974:	4013      	ands	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4922      	ldr	r1, [pc, #136]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	491e      	ldr	r1, [pc, #120]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 800199c:	4013      	ands	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	4918      	ldr	r1, [pc, #96]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4914      	ldr	r1, [pc, #80]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d021      	beq.n	8001a18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_GPIO_Init+0x2d0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
 80019e0:	e021      	b.n	8001a26 <HAL_GPIO_Init+0x2e2>
 80019e2:	bf00      	nop
 80019e4:	10320000 	.word	0x10320000
 80019e8:	10310000 	.word	0x10310000
 80019ec:	10220000 	.word	0x10220000
 80019f0:	10210000 	.word	0x10210000
 80019f4:	10120000 	.word	0x10120000
 80019f8:	10110000 	.word	0x10110000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	40010800 	.word	0x40010800
 8001a08:	40010c00 	.word	0x40010c00
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40011400 	.word	0x40011400
 8001a14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_GPIO_Init+0x304>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4909      	ldr	r1, [pc, #36]	; (8001a48 <HAL_GPIO_Init+0x304>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	3301      	adds	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f47f ae8e 	bne.w	8001758 <HAL_GPIO_Init+0x14>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	372c      	adds	r7, #44	; 0x2c
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	611a      	str	r2, [r3, #16]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	420e0020 	.word	0x420e0020

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e272      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8087 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab4:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d00c      	beq.n	8001ada <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac0:	4b8f      	ldr	r3, [pc, #572]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d112      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5e>
 8001acc:	4b8c      	ldr	r3, [pc, #560]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d10b      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d06c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x12c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d168      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e24c      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x76>
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a7f      	ldr	r2, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x98>
 8001b12:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7a      	ldr	r2, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e01d      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0xbc>
 8001b36:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a71      	ldr	r2, [pc, #452]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b50:	4b6b      	ldr	r3, [pc, #428]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6a      	ldr	r2, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a67      	ldr	r2, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fcfe 	bl	8001570 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fcfa 	bl	8001570 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e200      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0xe4>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fcea 	bl	8001570 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fce6 	bl	8001570 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1ec      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x10c>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bce:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bda:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d11c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x18c>
 8001be6:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1c0      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4939      	ldr	r1, [pc, #228]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	e03a      	b.n	8001c96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fc9f 	bl	8001570 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff fc9b 	bl	8001570 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1a1      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4927      	ldr	r1, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
 8001c68:	e015      	b.n	8001c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fc7e 	bl	8001570 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff fc7a 	bl	8001570 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e180      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d03a      	beq.n	8001d18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d019      	beq.n	8001cde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7ff fc5e 	bl	8001570 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc5a 	bl	8001570 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e160      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f000 fb08 	bl	80022ec <RCC_Delay>
 8001cdc:	e01c      	b.n	8001d18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fc44 	bl	8001570 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cea:	e00f      	b.n	8001d0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fc40 	bl	8001570 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d908      	bls.n	8001d0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e146      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	42420000 	.word	0x42420000
 8001d08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e9      	bne.n	8001cec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a6 	beq.w	8001e72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a87      	ldr	r2, [pc, #540]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b85      	ldr	r3, [pc, #532]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <HAL_RCC_OscConfig+0x4c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	; (8001f5c <HAL_RCC_OscConfig+0x4c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	; (8001f5c <HAL_RCC_OscConfig+0x4c8>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fc01 	bl	8001570 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fbfd 	bl	8001570 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e103      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x4c8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x312>
 8001d98:	4b6f      	ldr	r3, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a6e      	ldr	r2, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e02d      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x334>
 8001dae:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	e01c      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x356>
 8001dd0:	4b61      	ldr	r3, [pc, #388]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a60      	ldr	r2, [pc, #384]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a5d      	ldr	r2, [pc, #372]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001dea:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fbb1 	bl	8001570 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fbad 	bl	8001570 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0b1      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ee      	beq.n	8001e12 <HAL_RCC_OscConfig+0x37e>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fb9b 	bl	8001570 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fb97 	bl	8001570 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e09b      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8087 	beq.w	8001f8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d061      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d146      	bne.n	8001f1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff fb6b 	bl	8001570 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff fb67 	bl	8001570 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e06d      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4921      	ldr	r1, [pc, #132]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a19      	ldr	r1, [r3, #32]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	491b      	ldr	r1, [pc, #108]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fb3b 	bl	8001570 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff fb37 	bl	8001570 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e03d      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x46a>
 8001f1c:	e035      	b.n	8001f8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_RCC_OscConfig+0x4cc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fb24 	bl	8001570 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff fb20 	bl	8001570 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e026      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x498>
 8001f4a:	e01e      	b.n	8001f8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e019      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x500>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0d0      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b67      	ldr	r3, [pc, #412]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4965      	ldr	r1, [pc, #404]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b63      	ldr	r3, [pc, #396]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0b8      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a58      	ldr	r2, [pc, #352]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ffe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800200c:	4b53      	ldr	r3, [pc, #332]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a52      	ldr	r2, [pc, #328]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002016:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b50      	ldr	r3, [pc, #320]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	494d      	ldr	r1, [pc, #308]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d040      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d115      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e07f      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e073      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e06b      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4936      	ldr	r1, [pc, #216]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002088:	f7ff fa72 	bl	8001570 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7ff fa6e 	bl	8001570 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e053      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d210      	bcs.n	80020e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4922      	ldr	r1, [pc, #136]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e032      	b.n	800214e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4916      	ldr	r1, [pc, #88]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	490e      	ldr	r1, [pc, #56]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002126:	f000 f821 	bl	800216c <HAL_RCC_GetSysClockFreq>
 800212a:	4602      	mov	r2, r0
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	490a      	ldr	r1, [pc, #40]	; (8002160 <HAL_RCC_ClockConfig+0x1c8>)
 8002138:	5ccb      	ldrb	r3, [r1, r3]
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <HAL_RCC_ClockConfig+0x1cc>)
 8002140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x1d0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f860 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40022000 	.word	0x40022000
 800215c:	40021000 	.word	0x40021000
 8002160:	08006434 	.word	0x08006434
 8002164:	20000194 	.word	0x20000194
 8002168:	20000198 	.word	0x20000198

0800216c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	b490      	push	{r4, r7}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_RCC_GetSysClockFreq+0xac>)
 8002174:	1d3c      	adds	r4, r7, #4
 8002176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800217c:	f240 2301 	movw	r3, #513	; 0x201
 8002180:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x40>
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x46>
 80021aa:	e02b      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ae:	623b      	str	r3, [r7, #32]
      break;
 80021b0:	e02b      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	0c9b      	lsrs	r3, r3, #18
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3328      	adds	r3, #40	; 0x28
 80021bc:	443b      	add	r3, r7
 80021be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	0c5b      	lsrs	r3, r3, #17
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	3328      	adds	r3, #40	; 0x28
 80021da:	443b      	add	r3, r7
 80021dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021e6:	fb03 f202 	mul.w	r2, r3, r2
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e004      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	623b      	str	r3, [r7, #32]
      break;
 8002202:	e002      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002206:	623b      	str	r3, [r7, #32]
      break;
 8002208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220a:	6a3b      	ldr	r3, [r7, #32]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bc90      	pop	{r4, r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	08006408 	.word	0x08006408
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	003d0900 	.word	0x003d0900

08002228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <HAL_RCC_GetHCLKFreq+0x10>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000194 	.word	0x20000194

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff2 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	08006444 	.word	0x08006444

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffde 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0adb      	lsrs	r3, r3, #11
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	08006444 	.word	0x08006444

0800228c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	220f      	movs	r2, #15
 800229a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_GetClockConfig+0x58>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_RCC_GetClockConfig+0x58>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_GetClockConfig+0x58>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_RCC_GetClockConfig+0x58>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	08db      	lsrs	r3, r3, #3
 80022c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0207 	and.w	r2, r3, #7
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40022000 	.word	0x40022000

080022ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <RCC_Delay+0x34>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <RCC_Delay+0x38>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0a5b      	lsrs	r3, r3, #9
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002308:	bf00      	nop
  }
  while (Delay --);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e5a      	subs	r2, r3, #1
 800230e:	60fa      	str	r2, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f9      	bne.n	8002308 <RCC_Delay+0x1c>
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20000194 	.word	0x20000194
 8002324:	10624dd3 	.word	0x10624dd3

08002328 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d07d      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002348:	4b4f      	ldr	r3, [pc, #316]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10d      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	4a4b      	ldr	r2, [pc, #300]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235e:	61d3      	str	r3, [r2, #28]
 8002360:	4b49      	ldr	r3, [pc, #292]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236c:	2301      	movs	r3, #1
 800236e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d118      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a42      	ldr	r2, [pc, #264]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002388:	f7ff f8f2 	bl	8001570 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	e008      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7ff f8ee 	bl	8001570 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e06d      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02e      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d027      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023cc:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023dc:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d014      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff f8bd 	bl	8001570 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7ff f8b9 	bl	8001570 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e036      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4917      	ldr	r1, [pc, #92]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242a:	4313      	orrs	r3, r2
 800242c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	4a13      	ldr	r2, [pc, #76]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	490b      	ldr	r1, [pc, #44]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
 8002490:	42420440 	.word	0x42420440

08002494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b08d      	sub	sp, #52	; 0x34
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800249c:	4b58      	ldr	r3, [pc, #352]	; (8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800249e:	f107 040c 	add.w	r4, r7, #12
 80024a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024a8:	f240 2301 	movw	r3, #513	; 0x201
 80024ac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	2300      	movs	r3, #0
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	f200 808e 	bhi.w	80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d049      	beq.n	800256a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d079      	beq.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80024dc:	e086      	b.n	80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024e4:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d07f      	beq.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	0c9b      	lsrs	r3, r3, #18
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	3330      	adds	r3, #48	; 0x30
 80024fa:	443b      	add	r3, r7
 80024fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002500:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800250c:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	0c5b      	lsrs	r3, r3, #17
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	3330      	adds	r3, #48	; 0x30
 8002518:	443b      	add	r3, r7
 800251a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800252a:	4a37      	ldr	r2, [pc, #220]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253a:	e004      	b.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	4a33      	ldr	r2, [pc, #204]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002540:	fb02 f303 	mul.w	r3, r2, r3
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002552:	d102      	bne.n	800255a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002558:	e04a      	b.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4a2c      	ldr	r2, [pc, #176]	; (8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002568:	e042      	b.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257a:	d108      	bne.n	800258e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
 800258c:	e01f      	b.n	80025ce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d109      	bne.n	80025ae <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80025a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ac:	e00f      	b.n	80025ce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b8:	d11c      	bne.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80025c6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025cc:	e012      	b.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80025ce:	e011      	b.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025d0:	f7ff fe48 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0b9b      	lsrs	r3, r3, #14
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	3301      	adds	r3, #1
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025ea:	e004      	b.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80025ec:	bf00      	nop
 80025ee:	e002      	b.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80025f0:	bf00      	nop
 80025f2:	e000      	b.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80025f4:	bf00      	nop
    }
  }
  return (frequency);
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3734      	adds	r7, #52	; 0x34
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}
 8002600:	08006418 	.word	0x08006418
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200
 800260c:	003d0900 	.word	0x003d0900
 8002610:	aaaaaaab 	.word	0xaaaaaaab

08002614 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e084      	b.n	8002734 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7c5b      	ldrb	r3, [r3, #17]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fd6e 	bl	800111c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fb27 	bl	8002c9a <HAL_RTC_WaitForSynchro>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2204      	movs	r2, #4
 8002656:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e06b      	b.n	8002734 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fbe0 	bl	8002e22 <RTC_EnterInitMode>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d004      	beq.n	8002672 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2204      	movs	r2, #4
 800266c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e060      	b.n	8002734 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0207 	bic.w	r2, r2, #7
 8002680:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RTC_Init+0x128>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a2b      	ldr	r2, [pc, #172]	; (800273c <HAL_RTC_Init+0x128>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RTC_Init+0x128>)
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4926      	ldr	r1, [pc, #152]	; (800273c <HAL_RTC_Init+0x128>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b0:	d003      	beq.n	80026ba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e00e      	b.n	80026d8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f7ff feea 	bl	8002494 <HAL_RCCEx_GetPeriphCLKFreq>
 80026c0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e030      	b.n	8002734 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 010f 	bic.w	r1, r3, #15
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	0c1a      	lsrs	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	b291      	uxth	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	430b      	orrs	r3, r1
 8002702:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fbb4 	bl	8002e72 <RTC_ExitInitMode>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2204      	movs	r2, #4
 8002714:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00c      	b.n	8002734 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40006c00 	.word	0x40006c00

08002740 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_RTC_SetTime+0x20>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e080      	b.n	8002866 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	7c1b      	ldrb	r3, [r3, #16]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_RTC_SetTime+0x30>
 800276c:	2302      	movs	r3, #2
 800276e:	e07a      	b.n	8002866 <HAL_RTC_SetTime+0x126>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2202      	movs	r2, #2
 800277a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800278c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	4619      	mov	r1, r3
 8002796:	460b      	mov	r3, r1
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a5b      	subs	r3, r3, r1
 800279c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800279e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80027a4:	4413      	add	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e01e      	b.n	80027e8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fba4 	bl	8002efc <RTC_Bcd2ToByte>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027bc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fb99 	bl	8002efc <RTC_Bcd2ToByte>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027d6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fb8d 	bl	8002efc <RTC_Bcd2ToByte>
 80027e2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027e4:	4423      	add	r3, r4
 80027e6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80027e8:	6979      	ldr	r1, [r7, #20]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fab2 	bl	8002d54 <RTC_WriteTimeCounter>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2204      	movs	r2, #4
 80027fa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e02f      	b.n	8002866 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0205 	bic.w	r2, r2, #5
 8002814:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fac3 	bl	8002da2 <RTC_ReadAlarmCounter>
 800281c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002824:	d018      	beq.n	8002858 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	429a      	cmp	r2, r3
 800282c:	d214      	bcs.n	8002858 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002834:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002838:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800283a:	6939      	ldr	r1, [r7, #16]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fac9 	bl	8002dd4 <RTC_WriteAlarmCounter>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2204      	movs	r2, #4
 800284c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e006      	b.n	8002866 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
	...

08002870 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_RTC_GetTime+0x28>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b5      	b.n	8002a08 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0ac      	b.n	8002a08 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fa20 	bl	8002cf4 <RTC_ReadTimeCounter>
 80028b4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_RTC_GetTime+0x1a0>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0adb      	lsrs	r3, r3, #11
 80028c0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <HAL_RTC_GetTime+0x1a0>)
 80028c6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ca:	0adb      	lsrs	r3, r3, #11
 80028cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	4a4f      	ldr	r2, [pc, #316]	; (8002a14 <HAL_RTC_GetTime+0x1a4>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <HAL_RTC_GetTime+0x1a0>)
 80028e8:	fba2 1203 	umull	r1, r2, r2, r3
 80028ec:	0ad2      	lsrs	r2, r2, #11
 80028ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028f2:	fb01 f202 	mul.w	r2, r1, r2
 80028f6:	1a9a      	subs	r2, r3, r2
 80028f8:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RTC_GetTime+0x1a4>)
 80028fa:	fba3 1302 	umull	r1, r3, r3, r2
 80028fe:	0959      	lsrs	r1, r3, #5
 8002900:	460b      	mov	r3, r1
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a5b      	subs	r3, r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	1ad1      	subs	r1, r2, r3
 800290a:	b2ca      	uxtb	r2, r1
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	2b17      	cmp	r3, #23
 8002914:	d955      	bls.n	80029c2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4a3f      	ldr	r2, [pc, #252]	; (8002a18 <HAL_RTC_GetTime+0x1a8>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002922:	6939      	ldr	r1, [r7, #16]
 8002924:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <HAL_RTC_GetTime+0x1a8>)
 8002926:	fba3 2301 	umull	r2, r3, r3, r1
 800292a:	091a      	lsrs	r2, r3, #4
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1aca      	subs	r2, r1, r3
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fa30 	bl	8002da2 <RTC_ReadAlarmCounter>
 8002942:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294a:	d008      	beq.n	800295e <HAL_RTC_GetTime+0xee>
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d904      	bls.n	800295e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	e002      	b.n	8002964 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002962:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4a2d      	ldr	r2, [pc, #180]	; (8002a1c <HAL_RTC_GetTime+0x1ac>)
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f9ed 	bl	8002d54 <RTC_WriteTimeCounter>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e041      	b.n	8002a08 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298a:	d00c      	beq.n	80029a6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4413      	add	r3, r2
 8002992:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002994:	69f9      	ldr	r1, [r7, #28]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa1c 	bl	8002dd4 <RTC_WriteAlarmCounter>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e030      	b.n	8002a08 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80029a6:	69f9      	ldr	r1, [r7, #28]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fa13 	bl	8002dd4 <RTC_WriteAlarmCounter>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e027      	b.n	8002a08 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fabb 	bl	8002f36 <RTC_DateUpdate>
 80029c0:	e003      	b.n	80029ca <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01a      	beq.n	8002a06 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fa74 	bl	8002ec2 <RTC_ByteToBcd2>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	785b      	ldrb	r3, [r3, #1]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa6b 	bl	8002ec2 <RTC_ByteToBcd2>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fa62 	bl	8002ec2 <RTC_ByteToBcd2>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	91a2b3c5 	.word	0x91a2b3c5
 8002a14:	88888889 	.word	0x88888889
 8002a18:	aaaaaaab 	.word	0xaaaaaaab
 8002a1c:	00015180 	.word	0x00015180

08002a20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_RTC_SetDate+0x24>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e097      	b.n	8002b78 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	7c1b      	ldrb	r3, [r3, #16]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_RTC_SetDate+0x34>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e091      	b.n	8002b78 <HAL_RTC_SetDate+0x158>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	78da      	ldrb	r2, [r3, #3]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	785a      	ldrb	r2, [r3, #1]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	789a      	ldrb	r2, [r3, #2]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	739a      	strb	r2, [r3, #14]
 8002a7e:	e01a      	b.n	8002ab6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	78db      	ldrb	r3, [r3, #3]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fa39 	bl	8002efc <RTC_Bcd2ToByte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fa30 	bl	8002efc <RTC_Bcd2ToByte>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fa27 	bl	8002efc <RTC_Bcd2ToByte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	7bdb      	ldrb	r3, [r3, #15]
 8002aba:	4618      	mov	r0, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	7b59      	ldrb	r1, [r3, #13]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	7b9b      	ldrb	r3, [r3, #14]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f000 fb11 	bl	80030ec <RTC_WeekDayNum>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	7b1a      	ldrb	r2, [r3, #12]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f90a 	bl	8002cf4 <RTC_ReadTimeCounter>
 8002ae0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_RTC_SetDate+0x160>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0adb      	lsrs	r3, r3, #11
 8002aec:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b18      	cmp	r3, #24
 8002af2:	d93a      	bls.n	8002b6a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <HAL_RTC_SetDate+0x164>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_RTC_SetDate+0x168>)
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002b0a:	69f9      	ldr	r1, [r7, #28]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f921 	bl	8002d54 <RTC_WriteTimeCounter>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e027      	b.n	8002b78 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f93a 	bl	8002da2 <RTC_ReadAlarmCounter>
 8002b2e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b36:	d018      	beq.n	8002b6a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d214      	bcs.n	8002b6a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002b46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b4a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f940 	bl	8002dd4 <RTC_WriteAlarmCounter>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e006      	b.n	8002b78 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	91a2b3c5 	.word	0x91a2b3c5
 8002b84:	aaaaaaab 	.word	0xaaaaaaab
 8002b88:	00015180 	.word	0x00015180

08002b8c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	460a      	mov	r2, r1
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	460a      	mov	r2, r1
 8002ba4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_RTC_GetDate+0x26>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e03a      	b.n	8002c2c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff fe56 	bl	8002870 <HAL_RTC_GetTime>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e02e      	b.n	8002c2c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	7b1a      	ldrb	r2, [r3, #12]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	7bda      	ldrb	r2, [r3, #15]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	7b5a      	ldrb	r2, [r3, #13]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	7b9a      	ldrb	r2, [r3, #14]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01a      	beq.n	8002c2a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	78db      	ldrb	r3, [r3, #3]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f962 	bl	8002ec2 <RTC_ByteToBcd2>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f959 	bl	8002ec2 <RTC_ByteToBcd2>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f950 	bl	8002ec2 <RTC_ByteToBcd2>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d011      	beq.n	8002c6e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f815 	bl	8002c88 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0202 	bic.w	r2, r2, #2
 8002c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002c70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c74:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	745a      	strb	r2, [r3, #17]
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40010400 	.word	0x40010400

08002c88 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e01d      	b.n	8002cec <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0208 	bic.w	r2, r2, #8
 8002cbe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002cc0:	f7fe fc56 	bl	8001570 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002cc6:	e009      	b.n	8002cdc <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002cc8:	f7fe fc52 	bl	8001570 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd6:	d901      	bls.n	8002cdc <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e007      	b.n	8002cec <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ee      	beq.n	8002cc8 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	827b      	strh	r3, [r7, #18]
 8002d00:	2300      	movs	r3, #0
 8002d02:	823b      	strh	r3, [r7, #16]
 8002d04:	2300      	movs	r3, #0
 8002d06:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002d24:	8a7a      	ldrh	r2, [r7, #18]
 8002d26:	8a3b      	ldrh	r3, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d008      	beq.n	8002d3e <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002d2c:	8a3b      	ldrh	r3, [r7, #16]
 8002d2e:	041a      	lsls	r2, r3, #16
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e004      	b.n	8002d48 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002d3e:	8a7b      	ldrh	r3, [r7, #18]
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002d48:	697b      	ldr	r3, [r7, #20]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f85d 	bl	8002e22 <RTC_EnterInitMode>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e011      	b.n	8002d98 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	0c12      	lsrs	r2, r2, #16
 8002d7c:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	b292      	uxth	r2, r2
 8002d86:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f872 	bl	8002e72 <RTC_ExitInitMode>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	81fb      	strh	r3, [r7, #14]
 8002dae:	2300      	movs	r3, #0
 8002db0:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002dc2:	89fb      	ldrh	r3, [r7, #14]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	89bb      	ldrh	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f81d 	bl	8002e22 <RTC_EnterInitMode>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e011      	b.n	8002e18 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	0c12      	lsrs	r2, r2, #16
 8002dfc:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	b292      	uxth	r2, r2
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f832 	bl	8002e72 <RTC_ExitInitMode>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002e2e:	f7fe fb9f 	bl	8001570 <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e34:	e009      	b.n	8002e4a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e36:	f7fe fb9b 	bl	8001570 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e44:	d901      	bls.n	8002e4a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e00f      	b.n	8002e6a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0210 	orr.w	r2, r2, #16
 8002e66:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0210 	bic.w	r2, r2, #16
 8002e8c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002e8e:	f7fe fb6f 	bl	8001570 <HAL_GetTick>
 8002e92:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e94:	e009      	b.n	8002eaa <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e96:	f7fe fb6b 	bl	8001570 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea4:	d901      	bls.n	8002eaa <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e007      	b.n	8002eba <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ee      	beq.n	8002e96 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002ed0:	e005      	b.n	8002ede <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	3b0a      	subs	r3, #10
 8002edc:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	2b09      	cmp	r3, #9
 8002ee2:	d8f6      	bhi.n	8002ed2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b2db      	uxtb	r3, r3
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	b2db      	uxtb	r3, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7bdb      	ldrb	r3, [r3, #15]
 8002f54:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7b5b      	ldrb	r3, [r3, #13]
 8002f5a:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7b9b      	ldrb	r3, [r3, #14]
 8002f60:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	e06f      	b.n	8003048 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d011      	beq.n	8002f92 <RTC_DateUpdate+0x5c>
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d00e      	beq.n	8002f92 <RTC_DateUpdate+0x5c>
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d00b      	beq.n	8002f92 <RTC_DateUpdate+0x5c>
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b07      	cmp	r3, #7
 8002f7e:	d008      	beq.n	8002f92 <RTC_DateUpdate+0x5c>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d005      	beq.n	8002f92 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b0a      	cmp	r3, #10
 8002f8a:	d002      	beq.n	8002f92 <RTC_DateUpdate+0x5c>
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d117      	bne.n	8002fc2 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b1e      	cmp	r3, #30
 8002f96:	d803      	bhi.n	8002fa0 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002f9e:	e050      	b.n	8003042 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d005      	beq.n	8002fb2 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002fac:	2301      	movs	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002fb0:	e047      	b.n	8003042 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
          year++;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002fc0:	e03f      	b.n	8003042 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d008      	beq.n	8002fda <RTC_DateUpdate+0xa4>
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d005      	beq.n	8002fda <RTC_DateUpdate+0xa4>
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	d002      	beq.n	8002fda <RTC_DateUpdate+0xa4>
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b0b      	cmp	r3, #11
 8002fd8:	d10c      	bne.n	8002ff4 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b1d      	cmp	r3, #29
 8002fde:	d803      	bhi.n	8002fe8 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002fe6:	e02c      	b.n	8003042 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	3301      	adds	r3, #1
 8002fec:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ff2:	e026      	b.n	8003042 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d123      	bne.n	8003042 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b1b      	cmp	r3, #27
 8002ffe:	d803      	bhi.n	8003008 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3301      	adds	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e01c      	b.n	8003042 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b1c      	cmp	r3, #28
 800300c:	d111      	bne.n	8003032 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f838 	bl	8003088 <RTC_IsLeapYear>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <RTC_DateUpdate+0xf0>
        {
          day++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3301      	adds	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e00d      	b.n	8003042 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3301      	adds	r3, #1
 800302a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800302c:	2301      	movs	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e007      	b.n	8003042 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b1d      	cmp	r3, #29
 8003036:	d104      	bne.n	8003042 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	3301      	adds	r3, #1
 800303c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800303e:	2301      	movs	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3301      	adds	r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d38b      	bcc.n	8002f68 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	4619      	mov	r1, r3
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f000 f83a 	bl	80030ec <RTC_WeekDayNum>
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	731a      	strb	r2, [r3, #12]
}
 8003080:	bf00      	nop
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	e01d      	b.n	80030de <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	4a10      	ldr	r2, [pc, #64]	; (80030e8 <RTC_IsLeapYear+0x60>)
 80030a6:	fba2 1203 	umull	r1, r2, r2, r3
 80030aa:	0952      	lsrs	r2, r2, #5
 80030ac:	2164      	movs	r1, #100	; 0x64
 80030ae:	fb01 f202 	mul.w	r2, r1, r2
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00f      	b.n	80030de <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <RTC_IsLeapYear+0x60>)
 80030c2:	fba2 1203 	umull	r1, r2, r2, r3
 80030c6:	09d2      	lsrs	r2, r2, #7
 80030c8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80030cc:	fb01 f202 	mul.w	r2, r1, r2
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80030dc:	2300      	movs	r3, #0
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	51eb851f 	.word	0x51eb851f

080030ec <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	4613      	mov	r3, r2
 80030fa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800310a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d82d      	bhi.n	800316e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <RTC_WeekDayNum+0xe4>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	085a      	lsrs	r2, r3, #1
 8003126:	78bb      	ldrb	r3, [r7, #2]
 8003128:	441a      	add	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	441a      	add	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	3b01      	subs	r3, #1
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3b01      	subs	r3, #1
 800313a:	4926      	ldr	r1, [pc, #152]	; (80031d4 <RTC_WeekDayNum+0xe8>)
 800313c:	fba1 1303 	umull	r1, r3, r1, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	1ad2      	subs	r2, r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3b01      	subs	r3, #1
 8003148:	4922      	ldr	r1, [pc, #136]	; (80031d4 <RTC_WeekDayNum+0xe8>)
 800314a:	fba1 1303 	umull	r1, r3, r1, r3
 800314e:	09db      	lsrs	r3, r3, #7
 8003150:	4413      	add	r3, r2
 8003152:	1d1a      	adds	r2, r3, #4
 8003154:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <RTC_WeekDayNum+0xec>)
 8003156:	fba3 1302 	umull	r1, r3, r3, r2
 800315a:	1ad1      	subs	r1, r2, r3
 800315c:	0849      	lsrs	r1, r1, #1
 800315e:	440b      	add	r3, r1
 8003160:	0899      	lsrs	r1, r3, #2
 8003162:	460b      	mov	r3, r1
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	1a5b      	subs	r3, r3, r1
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e029      	b.n	80031c2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <RTC_WeekDayNum+0xe4>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	085a      	lsrs	r2, r3, #1
 8003182:	78bb      	ldrb	r3, [r7, #2]
 8003184:	441a      	add	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	441a      	add	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	441a      	add	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4910      	ldr	r1, [pc, #64]	; (80031d4 <RTC_WeekDayNum+0xe8>)
 8003194:	fba1 1303 	umull	r1, r3, r1, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	1ad2      	subs	r2, r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	490d      	ldr	r1, [pc, #52]	; (80031d4 <RTC_WeekDayNum+0xe8>)
 80031a0:	fba1 1303 	umull	r1, r3, r1, r3
 80031a4:	09db      	lsrs	r3, r3, #7
 80031a6:	4413      	add	r3, r2
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <RTC_WeekDayNum+0xec>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	1ad1      	subs	r1, r2, r3
 80031b2:	0849      	lsrs	r1, r1, #1
 80031b4:	440b      	add	r3, r1
 80031b6:	0899      	lsrs	r1, r3, #2
 80031b8:	460b      	mov	r3, r1
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a5b      	subs	r3, r3, r1
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	b2db      	uxtb	r3, r3
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	38e38e39 	.word	0x38e38e39
 80031d4:	51eb851f 	.word	0x51eb851f
 80031d8:	24924925 	.word	0x24924925

080031dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e041      	b.n	8003272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f839 	bl	800327a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 f9b4 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e03a      	b.n	800331a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_TIM_Base_Start_IT+0x98>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d009      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_TIM_Base_Start_IT+0x9c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x58>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <HAL_TIM_Base_Start_IT+0xa0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d111      	bne.n	8003308 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d010      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003306:	e007      	b.n	8003318 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800

08003330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8ed 	bl	8003552 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8e0 	bl	8003540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8ef 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0204 	mvn.w	r2, #4
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8c3 	bl	8003552 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8b6 	bl	8003540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f8c5 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d122      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d11b      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0208 	mvn.w	r2, #8
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f899 	bl	8003552 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f88c 	bl	8003540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f89b 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b10      	cmp	r3, #16
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0210 	mvn.w	r2, #16
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2208      	movs	r2, #8
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f86f 	bl	8003552 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f862 	bl	8003540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f871 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0201 	mvn.w	r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fdea 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b80      	cmp	r3, #128	; 0x80
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8bf 	bl	800365e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f835 	bl	8003576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b20      	cmp	r3, #32
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b20      	cmp	r3, #32
 8003526:	d107      	bne.n	8003538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0220 	mvn.w	r2, #32
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f88a 	bl	800364c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a29      	ldr	r2, [pc, #164]	; (8003640 <TIM_Base_SetConfig+0xb8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00b      	beq.n	80035b8 <TIM_Base_SetConfig+0x30>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d007      	beq.n	80035b8 <TIM_Base_SetConfig+0x30>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a26      	ldr	r2, [pc, #152]	; (8003644 <TIM_Base_SetConfig+0xbc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_Base_SetConfig+0x30>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a25      	ldr	r2, [pc, #148]	; (8003648 <TIM_Base_SetConfig+0xc0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d108      	bne.n	80035ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <TIM_Base_SetConfig+0xb8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00b      	beq.n	80035ea <TIM_Base_SetConfig+0x62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d8:	d007      	beq.n	80035ea <TIM_Base_SetConfig+0x62>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a19      	ldr	r2, [pc, #100]	; (8003644 <TIM_Base_SetConfig+0xbc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_Base_SetConfig+0x62>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a18      	ldr	r2, [pc, #96]	; (8003648 <TIM_Base_SetConfig+0xc0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d108      	bne.n	80035fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <TIM_Base_SetConfig+0xb8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d103      	bne.n	8003630 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	615a      	str	r2, [r3, #20]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800

0800364c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e03f      	b.n	8003702 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd fd6c 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f905 	bl	80038c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b08a      	sub	sp, #40	; 0x28
 800370e:	af02      	add	r7, sp, #8
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b20      	cmp	r3, #32
 8003728:	d17c      	bne.n	8003824 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_Transmit+0x2c>
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e075      	b.n	8003826 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_UART_Transmit+0x3e>
 8003744:	2302      	movs	r3, #2
 8003746:	e06e      	b.n	8003826 <HAL_UART_Transmit+0x11c>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2221      	movs	r2, #33	; 0x21
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800375e:	f7fd ff07 	bl	8001570 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003778:	d108      	bne.n	800378c <HAL_UART_Transmit+0x82>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e003      	b.n	8003794 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800379c:	e02a      	b.n	80037f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f840 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e036      	b.n	8003826 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	3302      	adds	r3, #2
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e007      	b.n	80037e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1cf      	bne.n	800379e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2200      	movs	r2, #0
 8003806:	2140      	movs	r1, #64	; 0x40
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f810 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e006      	b.n	8003826 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383e:	e02c      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003846:	d028      	beq.n	800389a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0x30>
 800384e:	f7fd fe8f 	bl	8001570 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	429a      	cmp	r2, r3
 800385c:	d21d      	bcs.n	800389a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800386c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e00f      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d0c3      	beq.n	8003840 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038fe:	f023 030c 	bic.w	r3, r3, #12
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	430b      	orrs	r3, r1
 800390a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <UART_SetConfig+0x114>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d103      	bne.n	8003934 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800392c:	f7fe fc9a 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	e002      	b.n	800393a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7fe fc82 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003938:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009a      	lsls	r2, r3, #2
 8003944:	441a      	add	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	4a22      	ldr	r2, [pc, #136]	; (80039dc <UART_SetConfig+0x118>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	0119      	lsls	r1, r3, #4
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	009a      	lsls	r2, r3, #2
 8003964:	441a      	add	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <UART_SetConfig+0x118>)
 8003972:	fba3 0302 	umull	r0, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2064      	movs	r0, #100	; 0x64
 800397a:	fb00 f303 	mul.w	r3, r0, r3
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	3332      	adds	r3, #50	; 0x32
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <UART_SetConfig+0x118>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003990:	4419      	add	r1, r3
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009a      	lsls	r2, r3, #2
 800399c:	441a      	add	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <UART_SetConfig+0x118>)
 80039aa:	fba3 0302 	umull	r0, r3, r3, r2
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2064      	movs	r0, #100	; 0x64
 80039b2:	fb00 f303 	mul.w	r3, r0, r3
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	3332      	adds	r3, #50	; 0x32
 80039bc:	4a07      	ldr	r2, [pc, #28]	; (80039dc <UART_SetConfig+0x118>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	f003 020f 	and.w	r2, r3, #15
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	440a      	add	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40013800 	.word	0x40013800
 80039dc:	51eb851f 	.word	0x51eb851f

080039e0 <__errno>:
 80039e0:	4b01      	ldr	r3, [pc, #4]	; (80039e8 <__errno+0x8>)
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	200001a0 	.word	0x200001a0

080039ec <__libc_init_array>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	2600      	movs	r6, #0
 80039f0:	4d0c      	ldr	r5, [pc, #48]	; (8003a24 <__libc_init_array+0x38>)
 80039f2:	4c0d      	ldr	r4, [pc, #52]	; (8003a28 <__libc_init_array+0x3c>)
 80039f4:	1b64      	subs	r4, r4, r5
 80039f6:	10a4      	asrs	r4, r4, #2
 80039f8:	42a6      	cmp	r6, r4
 80039fa:	d109      	bne.n	8003a10 <__libc_init_array+0x24>
 80039fc:	f002 fcb0 	bl	8006360 <_init>
 8003a00:	2600      	movs	r6, #0
 8003a02:	4d0a      	ldr	r5, [pc, #40]	; (8003a2c <__libc_init_array+0x40>)
 8003a04:	4c0a      	ldr	r4, [pc, #40]	; (8003a30 <__libc_init_array+0x44>)
 8003a06:	1b64      	subs	r4, r4, r5
 8003a08:	10a4      	asrs	r4, r4, #2
 8003a0a:	42a6      	cmp	r6, r4
 8003a0c:	d105      	bne.n	8003a1a <__libc_init_array+0x2e>
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a14:	4798      	blx	r3
 8003a16:	3601      	adds	r6, #1
 8003a18:	e7ee      	b.n	80039f8 <__libc_init_array+0xc>
 8003a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1e:	4798      	blx	r3
 8003a20:	3601      	adds	r6, #1
 8003a22:	e7f2      	b.n	8003a0a <__libc_init_array+0x1e>
 8003a24:	080067b4 	.word	0x080067b4
 8003a28:	080067b4 	.word	0x080067b4
 8003a2c:	080067b4 	.word	0x080067b4
 8003a30:	080067b8 	.word	0x080067b8

08003a34 <localtime>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <localtime+0x30>)
 8003a38:	4604      	mov	r4, r0
 8003a3a:	681d      	ldr	r5, [r3, #0]
 8003a3c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003a3e:	b953      	cbnz	r3, 8003a56 <localtime+0x22>
 8003a40:	2024      	movs	r0, #36	; 0x24
 8003a42:	f000 f907 	bl	8003c54 <malloc>
 8003a46:	4602      	mov	r2, r0
 8003a48:	63e8      	str	r0, [r5, #60]	; 0x3c
 8003a4a:	b920      	cbnz	r0, 8003a56 <localtime+0x22>
 8003a4c:	2132      	movs	r1, #50	; 0x32
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <localtime+0x34>)
 8003a50:	4806      	ldr	r0, [pc, #24]	; (8003a6c <localtime+0x38>)
 8003a52:	f001 f801 	bl	8004a58 <__assert_func>
 8003a56:	4620      	mov	r0, r4
 8003a58:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a5e:	f000 b807 	b.w	8003a70 <localtime_r>
 8003a62:	bf00      	nop
 8003a64:	200001a0 	.word	0x200001a0
 8003a68:	08006450 	.word	0x08006450
 8003a6c:	08006467 	.word	0x08006467

08003a70 <localtime_r>:
 8003a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a74:	460c      	mov	r4, r1
 8003a76:	4680      	mov	r8, r0
 8003a78:	f001 fa2a 	bl	8004ed0 <__gettzinfo>
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	4605      	mov	r5, r0
 8003a80:	4640      	mov	r0, r8
 8003a82:	f001 fa29 	bl	8004ed8 <gmtime_r>
 8003a86:	6943      	ldr	r3, [r0, #20]
 8003a88:	4604      	mov	r4, r0
 8003a8a:	0799      	lsls	r1, r3, #30
 8003a8c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8003a90:	d105      	bne.n	8003a9e <localtime_r+0x2e>
 8003a92:	2264      	movs	r2, #100	; 0x64
 8003a94:	fb97 f3f2 	sdiv	r3, r7, r2
 8003a98:	fb02 7313 	mls	r3, r2, r3, r7
 8003a9c:	bb73      	cbnz	r3, 8003afc <localtime_r+0x8c>
 8003a9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003aa2:	fb97 f6f3 	sdiv	r6, r7, r3
 8003aa6:	fb03 7616 	mls	r6, r3, r6, r7
 8003aaa:	fab6 f386 	clz	r3, r6
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2230      	movs	r2, #48	; 0x30
 8003ab2:	4e66      	ldr	r6, [pc, #408]	; (8003c4c <localtime_r+0x1dc>)
 8003ab4:	fb02 6603 	mla	r6, r2, r3, r6
 8003ab8:	f000 fd7a 	bl	80045b0 <__tz_lock>
 8003abc:	f000 fd84 	bl	80045c8 <_tzset_unlocked>
 8003ac0:	4b63      	ldr	r3, [pc, #396]	; (8003c50 <localtime_r+0x1e0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	b34b      	cbz	r3, 8003b1a <localtime_r+0xaa>
 8003ac6:	686b      	ldr	r3, [r5, #4]
 8003ac8:	42bb      	cmp	r3, r7
 8003aca:	d119      	bne.n	8003b00 <localtime_r+0x90>
 8003acc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003ad0:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8003ad4:	682f      	ldr	r7, [r5, #0]
 8003ad6:	b9df      	cbnz	r7, 8003b10 <localtime_r+0xa0>
 8003ad8:	4282      	cmp	r2, r0
 8003ada:	eb73 0101 	sbcs.w	r1, r3, r1
 8003ade:	da23      	bge.n	8003b28 <localtime_r+0xb8>
 8003ae0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8003ae4:	4282      	cmp	r2, r0
 8003ae6:	eb73 0701 	sbcs.w	r7, r3, r1
 8003aea:	bfb4      	ite	lt
 8003aec:	2701      	movlt	r7, #1
 8003aee:	2700      	movge	r7, #0
 8003af0:	4282      	cmp	r2, r0
 8003af2:	418b      	sbcs	r3, r1
 8003af4:	6227      	str	r7, [r4, #32]
 8003af6:	db19      	blt.n	8003b2c <localtime_r+0xbc>
 8003af8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003afa:	e018      	b.n	8003b2e <localtime_r+0xbe>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e7d7      	b.n	8003ab0 <localtime_r+0x40>
 8003b00:	4638      	mov	r0, r7
 8003b02:	f000 fcab 	bl	800445c <__tzcalc_limits>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d1e0      	bne.n	8003acc <localtime_r+0x5c>
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b0e:	e004      	b.n	8003b1a <localtime_r+0xaa>
 8003b10:	4282      	cmp	r2, r0
 8003b12:	eb73 0101 	sbcs.w	r1, r3, r1
 8003b16:	da02      	bge.n	8003b1e <localtime_r+0xae>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6223      	str	r3, [r4, #32]
 8003b1c:	e7ec      	b.n	8003af8 <localtime_r+0x88>
 8003b1e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8003b22:	4282      	cmp	r2, r0
 8003b24:	418b      	sbcs	r3, r1
 8003b26:	daf7      	bge.n	8003b18 <localtime_r+0xa8>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	6223      	str	r3, [r4, #32]
 8003b2c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003b2e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003b32:	fb93 f5f2 	sdiv	r5, r3, r2
 8003b36:	203c      	movs	r0, #60	; 0x3c
 8003b38:	fb02 3315 	mls	r3, r2, r5, r3
 8003b3c:	fb93 f2f0 	sdiv	r2, r3, r0
 8003b40:	fb00 3012 	mls	r0, r0, r2, r3
 8003b44:	6861      	ldr	r1, [r4, #4]
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	1a89      	subs	r1, r1, r2
 8003b4a:	68a2      	ldr	r2, [r4, #8]
 8003b4c:	1a1b      	subs	r3, r3, r0
 8003b4e:	1b52      	subs	r2, r2, r5
 8003b50:	2b3b      	cmp	r3, #59	; 0x3b
 8003b52:	6023      	str	r3, [r4, #0]
 8003b54:	6061      	str	r1, [r4, #4]
 8003b56:	60a2      	str	r2, [r4, #8]
 8003b58:	dd34      	ble.n	8003bc4 <localtime_r+0x154>
 8003b5a:	3101      	adds	r1, #1
 8003b5c:	6061      	str	r1, [r4, #4]
 8003b5e:	3b3c      	subs	r3, #60	; 0x3c
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	6863      	ldr	r3, [r4, #4]
 8003b64:	2b3b      	cmp	r3, #59	; 0x3b
 8003b66:	dd33      	ble.n	8003bd0 <localtime_r+0x160>
 8003b68:	3201      	adds	r2, #1
 8003b6a:	60a2      	str	r2, [r4, #8]
 8003b6c:	3b3c      	subs	r3, #60	; 0x3c
 8003b6e:	6063      	str	r3, [r4, #4]
 8003b70:	68a3      	ldr	r3, [r4, #8]
 8003b72:	2b17      	cmp	r3, #23
 8003b74:	dd32      	ble.n	8003bdc <localtime_r+0x16c>
 8003b76:	69e2      	ldr	r2, [r4, #28]
 8003b78:	3b18      	subs	r3, #24
 8003b7a:	3201      	adds	r2, #1
 8003b7c:	61e2      	str	r2, [r4, #28]
 8003b7e:	69a2      	ldr	r2, [r4, #24]
 8003b80:	60a3      	str	r3, [r4, #8]
 8003b82:	3201      	adds	r2, #1
 8003b84:	2a06      	cmp	r2, #6
 8003b86:	bfc8      	it	gt
 8003b88:	2200      	movgt	r2, #0
 8003b8a:	61a2      	str	r2, [r4, #24]
 8003b8c:	68e2      	ldr	r2, [r4, #12]
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	3201      	adds	r2, #1
 8003b92:	60e2      	str	r2, [r4, #12]
 8003b94:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003b98:	428a      	cmp	r2, r1
 8003b9a:	dd0e      	ble.n	8003bba <localtime_r+0x14a>
 8003b9c:	2b0b      	cmp	r3, #11
 8003b9e:	eba2 0201 	sub.w	r2, r2, r1
 8003ba2:	60e2      	str	r2, [r4, #12]
 8003ba4:	f103 0201 	add.w	r2, r3, #1
 8003ba8:	bf05      	ittet	eq
 8003baa:	2200      	moveq	r2, #0
 8003bac:	6963      	ldreq	r3, [r4, #20]
 8003bae:	6122      	strne	r2, [r4, #16]
 8003bb0:	3301      	addeq	r3, #1
 8003bb2:	bf02      	ittt	eq
 8003bb4:	6122      	streq	r2, [r4, #16]
 8003bb6:	6163      	streq	r3, [r4, #20]
 8003bb8:	61e2      	streq	r2, [r4, #28]
 8003bba:	f000 fcff 	bl	80045bc <__tz_unlock>
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	dacc      	bge.n	8003b62 <localtime_r+0xf2>
 8003bc8:	3901      	subs	r1, #1
 8003bca:	6061      	str	r1, [r4, #4]
 8003bcc:	333c      	adds	r3, #60	; 0x3c
 8003bce:	e7c7      	b.n	8003b60 <localtime_r+0xf0>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	dacd      	bge.n	8003b70 <localtime_r+0x100>
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	60a2      	str	r2, [r4, #8]
 8003bd8:	333c      	adds	r3, #60	; 0x3c
 8003bda:	e7c8      	b.n	8003b6e <localtime_r+0xfe>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	daec      	bge.n	8003bba <localtime_r+0x14a>
 8003be0:	69e2      	ldr	r2, [r4, #28]
 8003be2:	3318      	adds	r3, #24
 8003be4:	3a01      	subs	r2, #1
 8003be6:	61e2      	str	r2, [r4, #28]
 8003be8:	69a2      	ldr	r2, [r4, #24]
 8003bea:	60a3      	str	r3, [r4, #8]
 8003bec:	3a01      	subs	r2, #1
 8003bee:	bf48      	it	mi
 8003bf0:	2206      	movmi	r2, #6
 8003bf2:	61a2      	str	r2, [r4, #24]
 8003bf4:	68e2      	ldr	r2, [r4, #12]
 8003bf6:	3a01      	subs	r2, #1
 8003bf8:	60e2      	str	r2, [r4, #12]
 8003bfa:	2a00      	cmp	r2, #0
 8003bfc:	d1dd      	bne.n	8003bba <localtime_r+0x14a>
 8003bfe:	6923      	ldr	r3, [r4, #16]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	d405      	bmi.n	8003c10 <localtime_r+0x1a0>
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	6923      	ldr	r3, [r4, #16]
 8003c08:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003c0c:	60e3      	str	r3, [r4, #12]
 8003c0e:	e7d4      	b.n	8003bba <localtime_r+0x14a>
 8003c10:	230b      	movs	r3, #11
 8003c12:	6123      	str	r3, [r4, #16]
 8003c14:	6963      	ldr	r3, [r4, #20]
 8003c16:	1e5a      	subs	r2, r3, #1
 8003c18:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8003c1c:	6162      	str	r2, [r4, #20]
 8003c1e:	079a      	lsls	r2, r3, #30
 8003c20:	d105      	bne.n	8003c2e <localtime_r+0x1be>
 8003c22:	2164      	movs	r1, #100	; 0x64
 8003c24:	fb93 f2f1 	sdiv	r2, r3, r1
 8003c28:	fb01 3212 	mls	r2, r1, r2, r3
 8003c2c:	b962      	cbnz	r2, 8003c48 <localtime_r+0x1d8>
 8003c2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003c32:	fb93 f1f2 	sdiv	r1, r3, r2
 8003c36:	fb02 3311 	mls	r3, r2, r1, r3
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003c44:	61e3      	str	r3, [r4, #28]
 8003c46:	e7de      	b.n	8003c06 <localtime_r+0x196>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e7f9      	b.n	8003c40 <localtime_r+0x1d0>
 8003c4c:	08006524 	.word	0x08006524
 8003c50:	2000052c 	.word	0x2000052c

08003c54 <malloc>:
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <malloc+0xc>)
 8003c56:	4601      	mov	r1, r0
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	f000 baed 	b.w	8004238 <_malloc_r>
 8003c5e:	bf00      	nop
 8003c60:	200001a0 	.word	0x200001a0

08003c64 <free>:
 8003c64:	4b02      	ldr	r3, [pc, #8]	; (8003c70 <free+0xc>)
 8003c66:	4601      	mov	r1, r0
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f000 ba7d 	b.w	8004168 <_free_r>
 8003c6e:	bf00      	nop
 8003c70:	200001a0 	.word	0x200001a0

08003c74 <memset>:
 8003c74:	4603      	mov	r3, r0
 8003c76:	4402      	add	r2, r0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d100      	bne.n	8003c7e <memset+0xa>
 8003c7c:	4770      	bx	lr
 8003c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c82:	e7f9      	b.n	8003c78 <memset+0x4>

08003c84 <validate_structure>:
 8003c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c86:	6801      	ldr	r1, [r0, #0]
 8003c88:	4604      	mov	r4, r0
 8003c8a:	293b      	cmp	r1, #59	; 0x3b
 8003c8c:	d911      	bls.n	8003cb2 <validate_structure+0x2e>
 8003c8e:	223c      	movs	r2, #60	; 0x3c
 8003c90:	4668      	mov	r0, sp
 8003c92:	f000 feff 	bl	8004a94 <div>
 8003c96:	9a01      	ldr	r2, [sp, #4]
 8003c98:	6863      	ldr	r3, [r4, #4]
 8003c9a:	9900      	ldr	r1, [sp, #0]
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	440b      	add	r3, r1
 8003ca0:	6063      	str	r3, [r4, #4]
 8003ca2:	bfbb      	ittet	lt
 8003ca4:	323c      	addlt	r2, #60	; 0x3c
 8003ca6:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8003caa:	6022      	strge	r2, [r4, #0]
 8003cac:	6022      	strlt	r2, [r4, #0]
 8003cae:	bfb8      	it	lt
 8003cb0:	6063      	strlt	r3, [r4, #4]
 8003cb2:	6861      	ldr	r1, [r4, #4]
 8003cb4:	293b      	cmp	r1, #59	; 0x3b
 8003cb6:	d911      	bls.n	8003cdc <validate_structure+0x58>
 8003cb8:	223c      	movs	r2, #60	; 0x3c
 8003cba:	4668      	mov	r0, sp
 8003cbc:	f000 feea 	bl	8004a94 <div>
 8003cc0:	9a01      	ldr	r2, [sp, #4]
 8003cc2:	68a3      	ldr	r3, [r4, #8]
 8003cc4:	9900      	ldr	r1, [sp, #0]
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	440b      	add	r3, r1
 8003cca:	60a3      	str	r3, [r4, #8]
 8003ccc:	bfbb      	ittet	lt
 8003cce:	323c      	addlt	r2, #60	; 0x3c
 8003cd0:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8003cd4:	6062      	strge	r2, [r4, #4]
 8003cd6:	6062      	strlt	r2, [r4, #4]
 8003cd8:	bfb8      	it	lt
 8003cda:	60a3      	strlt	r3, [r4, #8]
 8003cdc:	68a1      	ldr	r1, [r4, #8]
 8003cde:	2917      	cmp	r1, #23
 8003ce0:	d911      	bls.n	8003d06 <validate_structure+0x82>
 8003ce2:	2218      	movs	r2, #24
 8003ce4:	4668      	mov	r0, sp
 8003ce6:	f000 fed5 	bl	8004a94 <div>
 8003cea:	9a01      	ldr	r2, [sp, #4]
 8003cec:	68e3      	ldr	r3, [r4, #12]
 8003cee:	9900      	ldr	r1, [sp, #0]
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	440b      	add	r3, r1
 8003cf4:	60e3      	str	r3, [r4, #12]
 8003cf6:	bfbb      	ittet	lt
 8003cf8:	3218      	addlt	r2, #24
 8003cfa:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8003cfe:	60a2      	strge	r2, [r4, #8]
 8003d00:	60a2      	strlt	r2, [r4, #8]
 8003d02:	bfb8      	it	lt
 8003d04:	60e3      	strlt	r3, [r4, #12]
 8003d06:	6921      	ldr	r1, [r4, #16]
 8003d08:	290b      	cmp	r1, #11
 8003d0a:	d911      	bls.n	8003d30 <validate_structure+0xac>
 8003d0c:	220c      	movs	r2, #12
 8003d0e:	4668      	mov	r0, sp
 8003d10:	f000 fec0 	bl	8004a94 <div>
 8003d14:	9a01      	ldr	r2, [sp, #4]
 8003d16:	6963      	ldr	r3, [r4, #20]
 8003d18:	9900      	ldr	r1, [sp, #0]
 8003d1a:	2a00      	cmp	r2, #0
 8003d1c:	440b      	add	r3, r1
 8003d1e:	6163      	str	r3, [r4, #20]
 8003d20:	bfbb      	ittet	lt
 8003d22:	320c      	addlt	r2, #12
 8003d24:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8003d28:	6122      	strge	r2, [r4, #16]
 8003d2a:	6122      	strlt	r2, [r4, #16]
 8003d2c:	bfb8      	it	lt
 8003d2e:	6163      	strlt	r3, [r4, #20]
 8003d30:	6963      	ldr	r3, [r4, #20]
 8003d32:	0798      	lsls	r0, r3, #30
 8003d34:	d120      	bne.n	8003d78 <validate_structure+0xf4>
 8003d36:	2164      	movs	r1, #100	; 0x64
 8003d38:	fb93 f2f1 	sdiv	r2, r3, r1
 8003d3c:	fb01 3212 	mls	r2, r1, r2, r3
 8003d40:	b9e2      	cbnz	r2, 8003d7c <validate_structure+0xf8>
 8003d42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003d46:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8003d4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8003d4e:	fb02 3311 	mls	r3, r2, r1, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bf14      	ite	ne
 8003d56:	231c      	movne	r3, #28
 8003d58:	231d      	moveq	r3, #29
 8003d5a:	68e2      	ldr	r2, [r4, #12]
 8003d5c:	2a00      	cmp	r2, #0
 8003d5e:	dc0f      	bgt.n	8003d80 <validate_structure+0xfc>
 8003d60:	260b      	movs	r6, #11
 8003d62:	2064      	movs	r0, #100	; 0x64
 8003d64:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8003d68:	4f31      	ldr	r7, [pc, #196]	; (8003e30 <validate_structure+0x1ac>)
 8003d6a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8003d6e:	f1bc 0f00 	cmp.w	ip, #0
 8003d72:	dd31      	ble.n	8003dd8 <validate_structure+0x154>
 8003d74:	b003      	add	sp, #12
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d78:	231c      	movs	r3, #28
 8003d7a:	e7ee      	b.n	8003d5a <validate_structure+0xd6>
 8003d7c:	231d      	movs	r3, #29
 8003d7e:	e7ec      	b.n	8003d5a <validate_structure+0xd6>
 8003d80:	2700      	movs	r7, #0
 8003d82:	2064      	movs	r0, #100	; 0x64
 8003d84:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8003d88:	4e29      	ldr	r6, [pc, #164]	; (8003e30 <validate_structure+0x1ac>)
 8003d8a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8003d8e:	2a01      	cmp	r2, #1
 8003d90:	bf0c      	ite	eq
 8003d92:	469c      	moveq	ip, r3
 8003d94:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8003d98:	4561      	cmp	r1, ip
 8003d9a:	ddeb      	ble.n	8003d74 <validate_structure+0xf0>
 8003d9c:	3201      	adds	r2, #1
 8003d9e:	eba1 010c 	sub.w	r1, r1, ip
 8003da2:	2a0c      	cmp	r2, #12
 8003da4:	60e1      	str	r1, [r4, #12]
 8003da6:	6122      	str	r2, [r4, #16]
 8003da8:	d1ef      	bne.n	8003d8a <validate_structure+0x106>
 8003daa:	6963      	ldr	r3, [r4, #20]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	0791      	lsls	r1, r2, #30
 8003db0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8003db4:	d137      	bne.n	8003e26 <validate_structure+0x1a2>
 8003db6:	fb92 f1f0 	sdiv	r1, r2, r0
 8003dba:	fb00 2211 	mls	r2, r0, r1, r2
 8003dbe:	2a00      	cmp	r2, #0
 8003dc0:	d133      	bne.n	8003e2a <validate_structure+0x1a6>
 8003dc2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8003dc6:	fb93 f2f5 	sdiv	r2, r3, r5
 8003dca:	fb05 3312 	mls	r3, r5, r2, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	231c      	movne	r3, #28
 8003dd4:	231d      	moveq	r3, #29
 8003dd6:	e7d8      	b.n	8003d8a <validate_structure+0x106>
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	3901      	subs	r1, #1
 8003ddc:	6121      	str	r1, [r4, #16]
 8003dde:	3101      	adds	r1, #1
 8003de0:	d114      	bne.n	8003e0c <validate_structure+0x188>
 8003de2:	6963      	ldr	r3, [r4, #20]
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	0791      	lsls	r1, r2, #30
 8003de8:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8003dec:	d117      	bne.n	8003e1e <validate_structure+0x19a>
 8003dee:	fb92 f1f0 	sdiv	r1, r2, r0
 8003df2:	fb00 2211 	mls	r2, r0, r1, r2
 8003df6:	b9a2      	cbnz	r2, 8003e22 <validate_structure+0x19e>
 8003df8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8003dfc:	fb93 f2f5 	sdiv	r2, r3, r5
 8003e00:	fb05 3312 	mls	r3, r5, r2, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	231c      	movne	r3, #28
 8003e0a:	231d      	moveq	r3, #29
 8003e0c:	6922      	ldr	r2, [r4, #16]
 8003e0e:	2a01      	cmp	r2, #1
 8003e10:	bf0c      	ite	eq
 8003e12:	461a      	moveq	r2, r3
 8003e14:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8003e18:	4462      	add	r2, ip
 8003e1a:	60e2      	str	r2, [r4, #12]
 8003e1c:	e7a5      	b.n	8003d6a <validate_structure+0xe6>
 8003e1e:	231c      	movs	r3, #28
 8003e20:	e7f4      	b.n	8003e0c <validate_structure+0x188>
 8003e22:	231d      	movs	r3, #29
 8003e24:	e7f2      	b.n	8003e0c <validate_structure+0x188>
 8003e26:	231c      	movs	r3, #28
 8003e28:	e7af      	b.n	8003d8a <validate_structure+0x106>
 8003e2a:	231d      	movs	r3, #29
 8003e2c:	e7ad      	b.n	8003d8a <validate_structure+0x106>
 8003e2e:	bf00      	nop
 8003e30:	080064c4 	.word	0x080064c4

08003e34 <mktime>:
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	4607      	mov	r7, r0
 8003e3c:	f001 f848 	bl	8004ed0 <__gettzinfo>
 8003e40:	4681      	mov	r9, r0
 8003e42:	4638      	mov	r0, r7
 8003e44:	f7ff ff1e 	bl	8003c84 <validate_structure>
 8003e48:	e9d7 4000 	ldrd	r4, r0, [r7]
 8003e4c:	233c      	movs	r3, #60	; 0x3c
 8003e4e:	fb03 4400 	mla	r4, r3, r0, r4
 8003e52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003e56:	68b8      	ldr	r0, [r7, #8]
 8003e58:	4abc      	ldr	r2, [pc, #752]	; (800414c <mktime+0x318>)
 8003e5a:	fb03 4400 	mla	r4, r3, r0, r4
 8003e5e:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8003e62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e66:	3d01      	subs	r5, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	697e      	ldr	r6, [r7, #20]
 8003e6c:	4415      	add	r5, r2
 8003e6e:	dd11      	ble.n	8003e94 <mktime+0x60>
 8003e70:	07b1      	lsls	r1, r6, #30
 8003e72:	d10f      	bne.n	8003e94 <mktime+0x60>
 8003e74:	2264      	movs	r2, #100	; 0x64
 8003e76:	fb96 f3f2 	sdiv	r3, r6, r2
 8003e7a:	fb02 6313 	mls	r3, r2, r3, r6
 8003e7e:	b943      	cbnz	r3, 8003e92 <mktime+0x5e>
 8003e80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003e84:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8003e88:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e8c:	fb02 3311 	mls	r3, r2, r1, r3
 8003e90:	b903      	cbnz	r3, 8003e94 <mktime+0x60>
 8003e92:	3501      	adds	r5, #1
 8003e94:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003e98:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	61fd      	str	r5, [r7, #28]
 8003ea2:	f200 815c 	bhi.w	800415e <mktime+0x32a>
 8003ea6:	2e46      	cmp	r6, #70	; 0x46
 8003ea8:	dd71      	ble.n	8003f8e <mktime+0x15a>
 8003eaa:	2346      	movs	r3, #70	; 0x46
 8003eac:	f240 1c6d 	movw	ip, #365	; 0x16d
 8003eb0:	2164      	movs	r1, #100	; 0x64
 8003eb2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003eb6:	079a      	lsls	r2, r3, #30
 8003eb8:	d163      	bne.n	8003f82 <mktime+0x14e>
 8003eba:	fb93 f2f1 	sdiv	r2, r3, r1
 8003ebe:	fb01 3212 	mls	r2, r1, r2, r3
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	d160      	bne.n	8003f88 <mktime+0x154>
 8003ec6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8003eca:	fb92 fef0 	sdiv	lr, r2, r0
 8003ece:	fb00 221e 	mls	r2, r0, lr, r2
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	4662      	movne	r2, ip
 8003ed8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8003edc:	3301      	adds	r3, #1
 8003ede:	429e      	cmp	r6, r3
 8003ee0:	4415      	add	r5, r2
 8003ee2:	d1e8      	bne.n	8003eb6 <mktime+0x82>
 8003ee4:	4b9a      	ldr	r3, [pc, #616]	; (8004150 <mktime+0x31c>)
 8003ee6:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8003eea:	fbc5 4803 	smlal	r4, r8, r5, r3
 8003eee:	f000 fb5f 	bl	80045b0 <__tz_lock>
 8003ef2:	f000 fb69 	bl	80045c8 <_tzset_unlocked>
 8003ef6:	4b97      	ldr	r3, [pc, #604]	; (8004154 <mktime+0x320>)
 8003ef8:	f8d3 b000 	ldr.w	fp, [r3]
 8003efc:	f1bb 0f00 	cmp.w	fp, #0
 8003f00:	d039      	beq.n	8003f76 <mktime+0x142>
 8003f02:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8003f06:	6978      	ldr	r0, [r7, #20]
 8003f08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003f0c:	f1bb 0f01 	cmp.w	fp, #1
 8003f10:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8003f14:	46da      	mov	sl, fp
 8003f16:	bfa8      	it	ge
 8003f18:	f04f 0a01 	movge.w	sl, #1
 8003f1c:	4283      	cmp	r3, r0
 8003f1e:	d178      	bne.n	8004012 <mktime+0x1de>
 8003f20:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8003f24:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8003f28:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8003f2c:	1a5b      	subs	r3, r3, r1
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8003f34:	9303      	str	r3, [sp, #12]
 8003f36:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8003f3a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8003f3e:	ebb3 0c02 	subs.w	ip, r3, r2
 8003f42:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8003f46:	4564      	cmp	r4, ip
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	eb78 0300 	sbcs.w	r3, r8, r0
 8003f4e:	da66      	bge.n	800401e <mktime+0x1ea>
 8003f50:	f8d9 3000 	ldr.w	r3, [r9]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d06f      	beq.n	8004038 <mktime+0x204>
 8003f58:	9b02      	ldr	r3, [sp, #8]
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	eb78 0303 	sbcs.w	r3, r8, r3
 8003f62:	db03      	blt.n	8003f6c <mktime+0x138>
 8003f64:	4564      	cmp	r4, ip
 8003f66:	eb78 0300 	sbcs.w	r3, r8, r0
 8003f6a:	db6b      	blt.n	8004044 <mktime+0x210>
 8003f6c:	f1bb 0f00 	cmp.w	fp, #0
 8003f70:	f04f 0b00 	mov.w	fp, #0
 8003f74:	da6b      	bge.n	800404e <mktime+0x21a>
 8003f76:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8003f7a:	190c      	adds	r4, r1, r4
 8003f7c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8003f80:	e0a9      	b.n	80040d6 <mktime+0x2a2>
 8003f82:	f240 126d 	movw	r2, #365	; 0x16d
 8003f86:	e7a9      	b.n	8003edc <mktime+0xa8>
 8003f88:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8003f8c:	e7a6      	b.n	8003edc <mktime+0xa8>
 8003f8e:	d0a9      	beq.n	8003ee4 <mktime+0xb0>
 8003f90:	2345      	movs	r3, #69	; 0x45
 8003f92:	f240 1c6d 	movw	ip, #365	; 0x16d
 8003f96:	2164      	movs	r1, #100	; 0x64
 8003f98:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003f9c:	e012      	b.n	8003fc4 <mktime+0x190>
 8003f9e:	bb62      	cbnz	r2, 8003ffa <mktime+0x1c6>
 8003fa0:	fb93 f2f1 	sdiv	r2, r3, r1
 8003fa4:	fb01 3212 	mls	r2, r1, r2, r3
 8003fa8:	bb52      	cbnz	r2, 8004000 <mktime+0x1cc>
 8003faa:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8003fae:	fb92 fef0 	sdiv	lr, r2, r0
 8003fb2:	fb00 221e 	mls	r2, r0, lr, r2
 8003fb6:	2a00      	cmp	r2, #0
 8003fb8:	bf14      	ite	ne
 8003fba:	4662      	movne	r2, ip
 8003fbc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8003fc0:	1aad      	subs	r5, r5, r2
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	429e      	cmp	r6, r3
 8003fc6:	f003 0203 	and.w	r2, r3, #3
 8003fca:	dbe8      	blt.n	8003f9e <mktime+0x16a>
 8003fcc:	b9da      	cbnz	r2, 8004006 <mktime+0x1d2>
 8003fce:	2264      	movs	r2, #100	; 0x64
 8003fd0:	fb96 f3f2 	sdiv	r3, r6, r2
 8003fd4:	fb02 6313 	mls	r3, r2, r3, r6
 8003fd8:	b9c3      	cbnz	r3, 800400c <mktime+0x1d8>
 8003fda:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003fde:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8003fe2:	fb93 f1f2 	sdiv	r1, r3, r2
 8003fe6:	fb02 3311 	mls	r3, r2, r1, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f240 136d 	movw	r3, #365	; 0x16d
 8003ff0:	bf08      	it	eq
 8003ff2:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8003ff6:	1aed      	subs	r5, r5, r3
 8003ff8:	e774      	b.n	8003ee4 <mktime+0xb0>
 8003ffa:	f240 126d 	movw	r2, #365	; 0x16d
 8003ffe:	e7df      	b.n	8003fc0 <mktime+0x18c>
 8004000:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004004:	e7dc      	b.n	8003fc0 <mktime+0x18c>
 8004006:	f240 136d 	movw	r3, #365	; 0x16d
 800400a:	e7f4      	b.n	8003ff6 <mktime+0x1c2>
 800400c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8004010:	e7f1      	b.n	8003ff6 <mktime+0x1c2>
 8004012:	f000 fa23 	bl	800445c <__tzcalc_limits>
 8004016:	2800      	cmp	r0, #0
 8004018:	d182      	bne.n	8003f20 <mktime+0xec>
 800401a:	46d3      	mov	fp, sl
 800401c:	e050      	b.n	80040c0 <mktime+0x28c>
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	1a5b      	subs	r3, r3, r1
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8004028:	eb6e 0e03 	sbc.w	lr, lr, r3
 800402c:	9b01      	ldr	r3, [sp, #4]
 800402e:	429c      	cmp	r4, r3
 8004030:	eb78 030e 	sbcs.w	r3, r8, lr
 8004034:	dbf1      	blt.n	800401a <mktime+0x1e6>
 8004036:	e78b      	b.n	8003f50 <mktime+0x11c>
 8004038:	9b02      	ldr	r3, [sp, #8]
 800403a:	429c      	cmp	r4, r3
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	eb78 0303 	sbcs.w	r3, r8, r3
 8004042:	db8f      	blt.n	8003f64 <mktime+0x130>
 8004044:	f1bb 0f00 	cmp.w	fp, #0
 8004048:	db3e      	blt.n	80040c8 <mktime+0x294>
 800404a:	f04f 0b01 	mov.w	fp, #1
 800404e:	ea8a 0a0b 	eor.w	sl, sl, fp
 8004052:	f1ba 0f01 	cmp.w	sl, #1
 8004056:	d133      	bne.n	80040c0 <mktime+0x28c>
 8004058:	f1bb 0f00 	cmp.w	fp, #0
 800405c:	d04e      	beq.n	80040fc <mktime+0x2c8>
 800405e:	1a52      	subs	r2, r2, r1
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	1914      	adds	r4, r2, r4
 8004064:	4413      	add	r3, r2
 8004066:	4638      	mov	r0, r7
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800406e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8004072:	f7ff fe07 	bl	8003c84 <validate_structure>
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	ebb2 020a 	subs.w	r2, r2, sl
 800407c:	d020      	beq.n	80040c0 <mktime+0x28c>
 800407e:	2a01      	cmp	r2, #1
 8004080:	dc3e      	bgt.n	8004100 <mktime+0x2cc>
 8004082:	1c90      	adds	r0, r2, #2
 8004084:	bfd8      	it	le
 8004086:	2201      	movle	r2, #1
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4415      	add	r5, r2
 800408c:	18d3      	adds	r3, r2, r3
 800408e:	d540      	bpl.n	8004112 <mktime+0x2de>
 8004090:	1e73      	subs	r3, r6, #1
 8004092:	0799      	lsls	r1, r3, #30
 8004094:	d137      	bne.n	8004106 <mktime+0x2d2>
 8004096:	2264      	movs	r2, #100	; 0x64
 8004098:	fb93 f1f2 	sdiv	r1, r3, r2
 800409c:	fb02 3311 	mls	r3, r2, r1, r3
 80040a0:	bba3      	cbnz	r3, 800410c <mktime+0x2d8>
 80040a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80040a6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80040aa:	fb96 f2f3 	sdiv	r2, r6, r3
 80040ae:	fb03 6612 	mls	r6, r3, r2, r6
 80040b2:	2e00      	cmp	r6, #0
 80040b4:	f240 136d 	movw	r3, #365	; 0x16d
 80040b8:	bf18      	it	ne
 80040ba:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	f1bb 0f01 	cmp.w	fp, #1
 80040c4:	f47f af57 	bne.w	8003f76 <mktime+0x142>
 80040c8:	f04f 0b01 	mov.w	fp, #1
 80040cc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80040d0:	190c      	adds	r4, r1, r4
 80040d2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80040d6:	f000 fa71 	bl	80045bc <__tz_unlock>
 80040da:	2307      	movs	r3, #7
 80040dc:	3504      	adds	r5, #4
 80040de:	fb95 f3f3 	sdiv	r3, r5, r3
 80040e2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80040e6:	1aed      	subs	r5, r5, r3
 80040e8:	bf48      	it	mi
 80040ea:	3507      	addmi	r5, #7
 80040ec:	f8c7 b020 	str.w	fp, [r7, #32]
 80040f0:	61bd      	str	r5, [r7, #24]
 80040f2:	4620      	mov	r0, r4
 80040f4:	4641      	mov	r1, r8
 80040f6:	b005      	add	sp, #20
 80040f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fc:	1a8a      	subs	r2, r1, r2
 80040fe:	e7af      	b.n	8004060 <mktime+0x22c>
 8004100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004104:	e7c0      	b.n	8004088 <mktime+0x254>
 8004106:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800410a:	e7d8      	b.n	80040be <mktime+0x28a>
 800410c:	f240 136d 	movw	r3, #365	; 0x16d
 8004110:	e7d5      	b.n	80040be <mktime+0x28a>
 8004112:	07b2      	lsls	r2, r6, #30
 8004114:	d117      	bne.n	8004146 <mktime+0x312>
 8004116:	2164      	movs	r1, #100	; 0x64
 8004118:	fb96 f2f1 	sdiv	r2, r6, r1
 800411c:	fb01 6212 	mls	r2, r1, r2, r6
 8004120:	b9d2      	cbnz	r2, 8004158 <mktime+0x324>
 8004122:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004126:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800412a:	fb96 f1f2 	sdiv	r1, r6, r2
 800412e:	fb02 6611 	mls	r6, r2, r1, r6
 8004132:	2e00      	cmp	r6, #0
 8004134:	f240 126d 	movw	r2, #365	; 0x16d
 8004138:	bf08      	it	eq
 800413a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800413e:	4293      	cmp	r3, r2
 8004140:	bfa8      	it	ge
 8004142:	1a9b      	subge	r3, r3, r2
 8004144:	e7bb      	b.n	80040be <mktime+0x28a>
 8004146:	f240 126d 	movw	r2, #365	; 0x16d
 800414a:	e7f8      	b.n	800413e <mktime+0x30a>
 800414c:	080064f4 	.word	0x080064f4
 8004150:	00015180 	.word	0x00015180
 8004154:	2000052c 	.word	0x2000052c
 8004158:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800415c:	e7ef      	b.n	800413e <mktime+0x30a>
 800415e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004162:	46a0      	mov	r8, r4
 8004164:	e7c5      	b.n	80040f2 <mktime+0x2be>
 8004166:	bf00      	nop

08004168 <_free_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4605      	mov	r5, r0
 800416c:	2900      	cmp	r1, #0
 800416e:	d040      	beq.n	80041f2 <_free_r+0x8a>
 8004170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004174:	1f0c      	subs	r4, r1, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	bfb8      	it	lt
 800417a:	18e4      	addlt	r4, r4, r3
 800417c:	f000 ffc4 	bl	8005108 <__malloc_lock>
 8004180:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <_free_r+0x8c>)
 8004182:	6813      	ldr	r3, [r2, #0]
 8004184:	b933      	cbnz	r3, 8004194 <_free_r+0x2c>
 8004186:	6063      	str	r3, [r4, #4]
 8004188:	6014      	str	r4, [r2, #0]
 800418a:	4628      	mov	r0, r5
 800418c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004190:	f000 bfc0 	b.w	8005114 <__malloc_unlock>
 8004194:	42a3      	cmp	r3, r4
 8004196:	d908      	bls.n	80041aa <_free_r+0x42>
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	1821      	adds	r1, r4, r0
 800419c:	428b      	cmp	r3, r1
 800419e:	bf01      	itttt	eq
 80041a0:	6819      	ldreq	r1, [r3, #0]
 80041a2:	685b      	ldreq	r3, [r3, #4]
 80041a4:	1809      	addeq	r1, r1, r0
 80041a6:	6021      	streq	r1, [r4, #0]
 80041a8:	e7ed      	b.n	8004186 <_free_r+0x1e>
 80041aa:	461a      	mov	r2, r3
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	b10b      	cbz	r3, 80041b4 <_free_r+0x4c>
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	d9fa      	bls.n	80041aa <_free_r+0x42>
 80041b4:	6811      	ldr	r1, [r2, #0]
 80041b6:	1850      	adds	r0, r2, r1
 80041b8:	42a0      	cmp	r0, r4
 80041ba:	d10b      	bne.n	80041d4 <_free_r+0x6c>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	4401      	add	r1, r0
 80041c0:	1850      	adds	r0, r2, r1
 80041c2:	4283      	cmp	r3, r0
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	d1e0      	bne.n	800418a <_free_r+0x22>
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4401      	add	r1, r0
 80041ce:	6011      	str	r1, [r2, #0]
 80041d0:	6053      	str	r3, [r2, #4]
 80041d2:	e7da      	b.n	800418a <_free_r+0x22>
 80041d4:	d902      	bls.n	80041dc <_free_r+0x74>
 80041d6:	230c      	movs	r3, #12
 80041d8:	602b      	str	r3, [r5, #0]
 80041da:	e7d6      	b.n	800418a <_free_r+0x22>
 80041dc:	6820      	ldr	r0, [r4, #0]
 80041de:	1821      	adds	r1, r4, r0
 80041e0:	428b      	cmp	r3, r1
 80041e2:	bf01      	itttt	eq
 80041e4:	6819      	ldreq	r1, [r3, #0]
 80041e6:	685b      	ldreq	r3, [r3, #4]
 80041e8:	1809      	addeq	r1, r1, r0
 80041ea:	6021      	streq	r1, [r4, #0]
 80041ec:	6063      	str	r3, [r4, #4]
 80041ee:	6054      	str	r4, [r2, #4]
 80041f0:	e7cb      	b.n	800418a <_free_r+0x22>
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
 80041f4:	20000508 	.word	0x20000508

080041f8 <sbrk_aligned>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4e0e      	ldr	r6, [pc, #56]	; (8004234 <sbrk_aligned+0x3c>)
 80041fc:	460c      	mov	r4, r1
 80041fe:	6831      	ldr	r1, [r6, #0]
 8004200:	4605      	mov	r5, r0
 8004202:	b911      	cbnz	r1, 800420a <sbrk_aligned+0x12>
 8004204:	f000 f91a 	bl	800443c <_sbrk_r>
 8004208:	6030      	str	r0, [r6, #0]
 800420a:	4621      	mov	r1, r4
 800420c:	4628      	mov	r0, r5
 800420e:	f000 f915 	bl	800443c <_sbrk_r>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	d00a      	beq.n	800422c <sbrk_aligned+0x34>
 8004216:	1cc4      	adds	r4, r0, #3
 8004218:	f024 0403 	bic.w	r4, r4, #3
 800421c:	42a0      	cmp	r0, r4
 800421e:	d007      	beq.n	8004230 <sbrk_aligned+0x38>
 8004220:	1a21      	subs	r1, r4, r0
 8004222:	4628      	mov	r0, r5
 8004224:	f000 f90a 	bl	800443c <_sbrk_r>
 8004228:	3001      	adds	r0, #1
 800422a:	d101      	bne.n	8004230 <sbrk_aligned+0x38>
 800422c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004230:	4620      	mov	r0, r4
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	2000050c 	.word	0x2000050c

08004238 <_malloc_r>:
 8004238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800423c:	1ccd      	adds	r5, r1, #3
 800423e:	f025 0503 	bic.w	r5, r5, #3
 8004242:	3508      	adds	r5, #8
 8004244:	2d0c      	cmp	r5, #12
 8004246:	bf38      	it	cc
 8004248:	250c      	movcc	r5, #12
 800424a:	2d00      	cmp	r5, #0
 800424c:	4607      	mov	r7, r0
 800424e:	db01      	blt.n	8004254 <_malloc_r+0x1c>
 8004250:	42a9      	cmp	r1, r5
 8004252:	d905      	bls.n	8004260 <_malloc_r+0x28>
 8004254:	230c      	movs	r3, #12
 8004256:	2600      	movs	r6, #0
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	4630      	mov	r0, r6
 800425c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004260:	4e2e      	ldr	r6, [pc, #184]	; (800431c <_malloc_r+0xe4>)
 8004262:	f000 ff51 	bl	8005108 <__malloc_lock>
 8004266:	6833      	ldr	r3, [r6, #0]
 8004268:	461c      	mov	r4, r3
 800426a:	bb34      	cbnz	r4, 80042ba <_malloc_r+0x82>
 800426c:	4629      	mov	r1, r5
 800426e:	4638      	mov	r0, r7
 8004270:	f7ff ffc2 	bl	80041f8 <sbrk_aligned>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	4604      	mov	r4, r0
 8004278:	d14d      	bne.n	8004316 <_malloc_r+0xde>
 800427a:	6834      	ldr	r4, [r6, #0]
 800427c:	4626      	mov	r6, r4
 800427e:	2e00      	cmp	r6, #0
 8004280:	d140      	bne.n	8004304 <_malloc_r+0xcc>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	4631      	mov	r1, r6
 8004286:	4638      	mov	r0, r7
 8004288:	eb04 0803 	add.w	r8, r4, r3
 800428c:	f000 f8d6 	bl	800443c <_sbrk_r>
 8004290:	4580      	cmp	r8, r0
 8004292:	d13a      	bne.n	800430a <_malloc_r+0xd2>
 8004294:	6821      	ldr	r1, [r4, #0]
 8004296:	3503      	adds	r5, #3
 8004298:	1a6d      	subs	r5, r5, r1
 800429a:	f025 0503 	bic.w	r5, r5, #3
 800429e:	3508      	adds	r5, #8
 80042a0:	2d0c      	cmp	r5, #12
 80042a2:	bf38      	it	cc
 80042a4:	250c      	movcc	r5, #12
 80042a6:	4638      	mov	r0, r7
 80042a8:	4629      	mov	r1, r5
 80042aa:	f7ff ffa5 	bl	80041f8 <sbrk_aligned>
 80042ae:	3001      	adds	r0, #1
 80042b0:	d02b      	beq.n	800430a <_malloc_r+0xd2>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	442b      	add	r3, r5
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	e00e      	b.n	80042d8 <_malloc_r+0xa0>
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	1b52      	subs	r2, r2, r5
 80042be:	d41e      	bmi.n	80042fe <_malloc_r+0xc6>
 80042c0:	2a0b      	cmp	r2, #11
 80042c2:	d916      	bls.n	80042f2 <_malloc_r+0xba>
 80042c4:	1961      	adds	r1, r4, r5
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	6025      	str	r5, [r4, #0]
 80042ca:	bf18      	it	ne
 80042cc:	6059      	strne	r1, [r3, #4]
 80042ce:	6863      	ldr	r3, [r4, #4]
 80042d0:	bf08      	it	eq
 80042d2:	6031      	streq	r1, [r6, #0]
 80042d4:	5162      	str	r2, [r4, r5]
 80042d6:	604b      	str	r3, [r1, #4]
 80042d8:	4638      	mov	r0, r7
 80042da:	f104 060b 	add.w	r6, r4, #11
 80042de:	f000 ff19 	bl	8005114 <__malloc_unlock>
 80042e2:	f026 0607 	bic.w	r6, r6, #7
 80042e6:	1d23      	adds	r3, r4, #4
 80042e8:	1af2      	subs	r2, r6, r3
 80042ea:	d0b6      	beq.n	800425a <_malloc_r+0x22>
 80042ec:	1b9b      	subs	r3, r3, r6
 80042ee:	50a3      	str	r3, [r4, r2]
 80042f0:	e7b3      	b.n	800425a <_malloc_r+0x22>
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	bf0c      	ite	eq
 80042f8:	6032      	streq	r2, [r6, #0]
 80042fa:	605a      	strne	r2, [r3, #4]
 80042fc:	e7ec      	b.n	80042d8 <_malloc_r+0xa0>
 80042fe:	4623      	mov	r3, r4
 8004300:	6864      	ldr	r4, [r4, #4]
 8004302:	e7b2      	b.n	800426a <_malloc_r+0x32>
 8004304:	4634      	mov	r4, r6
 8004306:	6876      	ldr	r6, [r6, #4]
 8004308:	e7b9      	b.n	800427e <_malloc_r+0x46>
 800430a:	230c      	movs	r3, #12
 800430c:	4638      	mov	r0, r7
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	f000 ff00 	bl	8005114 <__malloc_unlock>
 8004314:	e7a1      	b.n	800425a <_malloc_r+0x22>
 8004316:	6025      	str	r5, [r4, #0]
 8004318:	e7de      	b.n	80042d8 <_malloc_r+0xa0>
 800431a:	bf00      	nop
 800431c:	20000508 	.word	0x20000508

08004320 <iprintf>:
 8004320:	b40f      	push	{r0, r1, r2, r3}
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <iprintf+0x2c>)
 8004324:	b513      	push	{r0, r1, r4, lr}
 8004326:	681c      	ldr	r4, [r3, #0]
 8004328:	b124      	cbz	r4, 8004334 <iprintf+0x14>
 800432a:	69a3      	ldr	r3, [r4, #24]
 800432c:	b913      	cbnz	r3, 8004334 <iprintf+0x14>
 800432e:	4620      	mov	r0, r4
 8004330:	f000 fcda 	bl	8004ce8 <__sinit>
 8004334:	ab05      	add	r3, sp, #20
 8004336:	4620      	mov	r0, r4
 8004338:	9a04      	ldr	r2, [sp, #16]
 800433a:	68a1      	ldr	r1, [r4, #8]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	f000 ff17 	bl	8005170 <_vfiprintf_r>
 8004342:	b002      	add	sp, #8
 8004344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004348:	b004      	add	sp, #16
 800434a:	4770      	bx	lr
 800434c:	200001a0 	.word	0x200001a0

08004350 <_puts_r>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	460e      	mov	r6, r1
 8004354:	4605      	mov	r5, r0
 8004356:	b118      	cbz	r0, 8004360 <_puts_r+0x10>
 8004358:	6983      	ldr	r3, [r0, #24]
 800435a:	b90b      	cbnz	r3, 8004360 <_puts_r+0x10>
 800435c:	f000 fcc4 	bl	8004ce8 <__sinit>
 8004360:	69ab      	ldr	r3, [r5, #24]
 8004362:	68ac      	ldr	r4, [r5, #8]
 8004364:	b913      	cbnz	r3, 800436c <_puts_r+0x1c>
 8004366:	4628      	mov	r0, r5
 8004368:	f000 fcbe 	bl	8004ce8 <__sinit>
 800436c:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <_puts_r+0xd0>)
 800436e:	429c      	cmp	r4, r3
 8004370:	d120      	bne.n	80043b4 <_puts_r+0x64>
 8004372:	686c      	ldr	r4, [r5, #4]
 8004374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004376:	07db      	lsls	r3, r3, #31
 8004378:	d405      	bmi.n	8004386 <_puts_r+0x36>
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	0598      	lsls	r0, r3, #22
 800437e:	d402      	bmi.n	8004386 <_puts_r+0x36>
 8004380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004382:	f000 fe59 	bl	8005038 <__retarget_lock_acquire_recursive>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	0719      	lsls	r1, r3, #28
 800438a:	d51d      	bpl.n	80043c8 <_puts_r+0x78>
 800438c:	6923      	ldr	r3, [r4, #16]
 800438e:	b1db      	cbz	r3, 80043c8 <_puts_r+0x78>
 8004390:	3e01      	subs	r6, #1
 8004392:	68a3      	ldr	r3, [r4, #8]
 8004394:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004398:	3b01      	subs	r3, #1
 800439a:	60a3      	str	r3, [r4, #8]
 800439c:	bb39      	cbnz	r1, 80043ee <_puts_r+0x9e>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da38      	bge.n	8004414 <_puts_r+0xc4>
 80043a2:	4622      	mov	r2, r4
 80043a4:	210a      	movs	r1, #10
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 fa96 	bl	80048d8 <__swbuf_r>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d011      	beq.n	80043d4 <_puts_r+0x84>
 80043b0:	250a      	movs	r5, #10
 80043b2:	e011      	b.n	80043d8 <_puts_r+0x88>
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <_puts_r+0xd4>)
 80043b6:	429c      	cmp	r4, r3
 80043b8:	d101      	bne.n	80043be <_puts_r+0x6e>
 80043ba:	68ac      	ldr	r4, [r5, #8]
 80043bc:	e7da      	b.n	8004374 <_puts_r+0x24>
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <_puts_r+0xd8>)
 80043c0:	429c      	cmp	r4, r3
 80043c2:	bf08      	it	eq
 80043c4:	68ec      	ldreq	r4, [r5, #12]
 80043c6:	e7d5      	b.n	8004374 <_puts_r+0x24>
 80043c8:	4621      	mov	r1, r4
 80043ca:	4628      	mov	r0, r5
 80043cc:	f000 fad6 	bl	800497c <__swsetup_r>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d0dd      	beq.n	8004390 <_puts_r+0x40>
 80043d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80043d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043da:	07da      	lsls	r2, r3, #31
 80043dc:	d405      	bmi.n	80043ea <_puts_r+0x9a>
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	059b      	lsls	r3, r3, #22
 80043e2:	d402      	bmi.n	80043ea <_puts_r+0x9a>
 80043e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e6:	f000 fe29 	bl	800503c <__retarget_lock_release_recursive>
 80043ea:	4628      	mov	r0, r5
 80043ec:	bd70      	pop	{r4, r5, r6, pc}
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da04      	bge.n	80043fc <_puts_r+0xac>
 80043f2:	69a2      	ldr	r2, [r4, #24]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	dc06      	bgt.n	8004406 <_puts_r+0xb6>
 80043f8:	290a      	cmp	r1, #10
 80043fa:	d004      	beq.n	8004406 <_puts_r+0xb6>
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	6022      	str	r2, [r4, #0]
 8004402:	7019      	strb	r1, [r3, #0]
 8004404:	e7c5      	b.n	8004392 <_puts_r+0x42>
 8004406:	4622      	mov	r2, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f000 fa65 	bl	80048d8 <__swbuf_r>
 800440e:	3001      	adds	r0, #1
 8004410:	d1bf      	bne.n	8004392 <_puts_r+0x42>
 8004412:	e7df      	b.n	80043d4 <_puts_r+0x84>
 8004414:	250a      	movs	r5, #10
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	6022      	str	r2, [r4, #0]
 800441c:	701d      	strb	r5, [r3, #0]
 800441e:	e7db      	b.n	80043d8 <_puts_r+0x88>
 8004420:	0800661c 	.word	0x0800661c
 8004424:	0800663c 	.word	0x0800663c
 8004428:	080065fc 	.word	0x080065fc

0800442c <puts>:
 800442c:	4b02      	ldr	r3, [pc, #8]	; (8004438 <puts+0xc>)
 800442e:	4601      	mov	r1, r0
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	f7ff bf8d 	b.w	8004350 <_puts_r>
 8004436:	bf00      	nop
 8004438:	200001a0 	.word	0x200001a0

0800443c <_sbrk_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	2300      	movs	r3, #0
 8004440:	4d05      	ldr	r5, [pc, #20]	; (8004458 <_sbrk_r+0x1c>)
 8004442:	4604      	mov	r4, r0
 8004444:	4608      	mov	r0, r1
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	f7fd f808 	bl	800145c <_sbrk>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_sbrk_r+0x1a>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_sbrk_r+0x1a>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	2000053c 	.word	0x2000053c

0800445c <__tzcalc_limits>:
 800445c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	4605      	mov	r5, r0
 8004462:	f000 fd35 	bl	8004ed0 <__gettzinfo>
 8004466:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800446a:	429d      	cmp	r5, r3
 800446c:	f340 809a 	ble.w	80045a4 <__tzcalc_limits+0x148>
 8004470:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8004474:	18ac      	adds	r4, r5, r2
 8004476:	f240 126d 	movw	r2, #365	; 0x16d
 800447a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	fb02 4403 	mla	r4, r2, r3, r4
 8004484:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8004488:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800448c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004490:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8004494:	441c      	add	r4, r3
 8004496:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800449a:	186a      	adds	r2, r5, r1
 800449c:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a0:	fb95 fcf3 	sdiv	ip, r5, r3
 80044a4:	4414      	add	r4, r2
 80044a6:	2264      	movs	r2, #100	; 0x64
 80044a8:	fb03 5c1c 	mls	ip, r3, ip, r5
 80044ac:	fb95 f7f2 	sdiv	r7, r5, r2
 80044b0:	fabc f68c 	clz	r6, ip
 80044b4:	4601      	mov	r1, r0
 80044b6:	fb02 5717 	mls	r7, r2, r7, r5
 80044ba:	6045      	str	r5, [r0, #4]
 80044bc:	0976      	lsrs	r6, r6, #5
 80044be:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80044c2:	f005 0203 	and.w	r2, r5, #3
 80044c6:	7a0d      	ldrb	r5, [r1, #8]
 80044c8:	694b      	ldr	r3, [r1, #20]
 80044ca:	2d4a      	cmp	r5, #74	; 0x4a
 80044cc:	d12d      	bne.n	800452a <__tzcalc_limits+0xce>
 80044ce:	eb04 0e03 	add.w	lr, r4, r3
 80044d2:	b902      	cbnz	r2, 80044d6 <__tzcalc_limits+0x7a>
 80044d4:	b917      	cbnz	r7, 80044dc <__tzcalc_limits+0x80>
 80044d6:	f1bc 0f00 	cmp.w	ip, #0
 80044da:	d124      	bne.n	8004526 <__tzcalc_limits+0xca>
 80044dc:	2b3b      	cmp	r3, #59	; 0x3b
 80044de:	bfd4      	ite	le
 80044e0:	2300      	movle	r3, #0
 80044e2:	2301      	movgt	r3, #1
 80044e4:	4473      	add	r3, lr
 80044e6:	3b01      	subs	r3, #1
 80044e8:	698d      	ldr	r5, [r1, #24]
 80044ea:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80045a8 <__tzcalc_limits+0x14c>
 80044ee:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80044f2:	fbc3 5e08 	smlal	r5, lr, r3, r8
 80044f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80044f8:	18ed      	adds	r5, r5, r3
 80044fa:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80044fe:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8004502:	3128      	adds	r1, #40	; 0x28
 8004504:	458b      	cmp	fp, r1
 8004506:	d1de      	bne.n	80044c6 <__tzcalc_limits+0x6a>
 8004508:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800450c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8004510:	428c      	cmp	r4, r1
 8004512:	eb72 0303 	sbcs.w	r3, r2, r3
 8004516:	bfb4      	ite	lt
 8004518:	2301      	movlt	r3, #1
 800451a:	2300      	movge	r3, #0
 800451c:	6003      	str	r3, [r0, #0]
 800451e:	2001      	movs	r0, #1
 8004520:	b003      	add	sp, #12
 8004522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004526:	2300      	movs	r3, #0
 8004528:	e7dc      	b.n	80044e4 <__tzcalc_limits+0x88>
 800452a:	2d44      	cmp	r5, #68	; 0x44
 800452c:	d101      	bne.n	8004532 <__tzcalc_limits+0xd6>
 800452e:	4423      	add	r3, r4
 8004530:	e7da      	b.n	80044e8 <__tzcalc_limits+0x8c>
 8004532:	bb8a      	cbnz	r2, 8004598 <__tzcalc_limits+0x13c>
 8004534:	2f00      	cmp	r7, #0
 8004536:	bf0c      	ite	eq
 8004538:	4635      	moveq	r5, r6
 800453a:	2501      	movne	r5, #1
 800453c:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8004540:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8004544:	f04f 0800 	mov.w	r8, #0
 8004548:	f8cd e004 	str.w	lr, [sp, #4]
 800454c:	46a6      	mov	lr, r4
 800454e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80045ac <__tzcalc_limits+0x150>
 8004552:	fb0a 9505 	mla	r5, sl, r5, r9
 8004556:	3d04      	subs	r5, #4
 8004558:	f8dd a004 	ldr.w	sl, [sp, #4]
 800455c:	f108 0801 	add.w	r8, r8, #1
 8004560:	45c2      	cmp	sl, r8
 8004562:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8004566:	dc19      	bgt.n	800459c <__tzcalc_limits+0x140>
 8004568:	f04f 0807 	mov.w	r8, #7
 800456c:	f10e 0504 	add.w	r5, lr, #4
 8004570:	fb95 f8f8 	sdiv	r8, r5, r8
 8004574:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8004578:	eba5 0808 	sub.w	r8, r5, r8
 800457c:	ebb3 0808 	subs.w	r8, r3, r8
 8004580:	690b      	ldr	r3, [r1, #16]
 8004582:	bf48      	it	mi
 8004584:	f108 0807 	addmi.w	r8, r8, #7
 8004588:	3b01      	subs	r3, #1
 800458a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800458e:	4443      	add	r3, r8
 8004590:	454b      	cmp	r3, r9
 8004592:	da05      	bge.n	80045a0 <__tzcalc_limits+0x144>
 8004594:	4473      	add	r3, lr
 8004596:	e7a7      	b.n	80044e8 <__tzcalc_limits+0x8c>
 8004598:	4635      	mov	r5, r6
 800459a:	e7cf      	b.n	800453c <__tzcalc_limits+0xe0>
 800459c:	44ce      	add	lr, r9
 800459e:	e7db      	b.n	8004558 <__tzcalc_limits+0xfc>
 80045a0:	3b07      	subs	r3, #7
 80045a2:	e7f5      	b.n	8004590 <__tzcalc_limits+0x134>
 80045a4:	2000      	movs	r0, #0
 80045a6:	e7bb      	b.n	8004520 <__tzcalc_limits+0xc4>
 80045a8:	00015180 	.word	0x00015180
 80045ac:	08006524 	.word	0x08006524

080045b0 <__tz_lock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__tz_lock+0x8>)
 80045b2:	f000 bd40 	b.w	8005036 <__retarget_lock_acquire>
 80045b6:	bf00      	nop
 80045b8:	20000538 	.word	0x20000538

080045bc <__tz_unlock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__tz_unlock+0x8>)
 80045be:	f000 bd3c 	b.w	800503a <__retarget_lock_release>
 80045c2:	bf00      	nop
 80045c4:	20000538 	.word	0x20000538

080045c8 <_tzset_unlocked>:
 80045c8:	4b01      	ldr	r3, [pc, #4]	; (80045d0 <_tzset_unlocked+0x8>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	f000 b802 	b.w	80045d4 <_tzset_unlocked_r>
 80045d0:	200001a0 	.word	0x200001a0

080045d4 <_tzset_unlocked_r>:
 80045d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d8:	b08d      	sub	sp, #52	; 0x34
 80045da:	4607      	mov	r7, r0
 80045dc:	f000 fc78 	bl	8004ed0 <__gettzinfo>
 80045e0:	49b1      	ldr	r1, [pc, #708]	; (80048a8 <_tzset_unlocked_r+0x2d4>)
 80045e2:	4605      	mov	r5, r0
 80045e4:	4638      	mov	r0, r7
 80045e6:	f000 fc6b 	bl	8004ec0 <_getenv_r>
 80045ea:	4eb0      	ldr	r6, [pc, #704]	; (80048ac <_tzset_unlocked_r+0x2d8>)
 80045ec:	4604      	mov	r4, r0
 80045ee:	b970      	cbnz	r0, 800460e <_tzset_unlocked_r+0x3a>
 80045f0:	4baf      	ldr	r3, [pc, #700]	; (80048b0 <_tzset_unlocked_r+0x2dc>)
 80045f2:	4ab0      	ldr	r2, [pc, #704]	; (80048b4 <_tzset_unlocked_r+0x2e0>)
 80045f4:	6018      	str	r0, [r3, #0]
 80045f6:	4bb0      	ldr	r3, [pc, #704]	; (80048b8 <_tzset_unlocked_r+0x2e4>)
 80045f8:	6018      	str	r0, [r3, #0]
 80045fa:	4bb0      	ldr	r3, [pc, #704]	; (80048bc <_tzset_unlocked_r+0x2e8>)
 80045fc:	6830      	ldr	r0, [r6, #0]
 80045fe:	e9c3 2200 	strd	r2, r2, [r3]
 8004602:	f7ff fb2f 	bl	8003c64 <free>
 8004606:	6034      	str	r4, [r6, #0]
 8004608:	b00d      	add	sp, #52	; 0x34
 800460a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460e:	6831      	ldr	r1, [r6, #0]
 8004610:	2900      	cmp	r1, #0
 8004612:	d162      	bne.n	80046da <_tzset_unlocked_r+0x106>
 8004614:	6830      	ldr	r0, [r6, #0]
 8004616:	f7ff fb25 	bl	8003c64 <free>
 800461a:	4620      	mov	r0, r4
 800461c:	f7fb fd96 	bl	800014c <strlen>
 8004620:	1c41      	adds	r1, r0, #1
 8004622:	4638      	mov	r0, r7
 8004624:	f7ff fe08 	bl	8004238 <_malloc_r>
 8004628:	6030      	str	r0, [r6, #0]
 800462a:	2800      	cmp	r0, #0
 800462c:	d15a      	bne.n	80046e4 <_tzset_unlocked_r+0x110>
 800462e:	7823      	ldrb	r3, [r4, #0]
 8004630:	ae0a      	add	r6, sp, #40	; 0x28
 8004632:	2b3a      	cmp	r3, #58	; 0x3a
 8004634:	bf08      	it	eq
 8004636:	3401      	addeq	r4, #1
 8004638:	4633      	mov	r3, r6
 800463a:	4620      	mov	r0, r4
 800463c:	4aa0      	ldr	r2, [pc, #640]	; (80048c0 <_tzset_unlocked_r+0x2ec>)
 800463e:	49a1      	ldr	r1, [pc, #644]	; (80048c4 <_tzset_unlocked_r+0x2f0>)
 8004640:	f001 f85c 	bl	80056fc <siscanf>
 8004644:	2800      	cmp	r0, #0
 8004646:	dddf      	ble.n	8004608 <_tzset_unlocked_r+0x34>
 8004648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800464a:	18e7      	adds	r7, r4, r3
 800464c:	5ce3      	ldrb	r3, [r4, r3]
 800464e:	2b2d      	cmp	r3, #45	; 0x2d
 8004650:	d14c      	bne.n	80046ec <_tzset_unlocked_r+0x118>
 8004652:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004656:	3701      	adds	r7, #1
 8004658:	2400      	movs	r4, #0
 800465a:	f10d 0a20 	add.w	sl, sp, #32
 800465e:	f10d 0b1e 	add.w	fp, sp, #30
 8004662:	4633      	mov	r3, r6
 8004664:	4638      	mov	r0, r7
 8004666:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800466a:	4997      	ldr	r1, [pc, #604]	; (80048c8 <_tzset_unlocked_r+0x2f4>)
 800466c:	9603      	str	r6, [sp, #12]
 800466e:	f8cd b000 	str.w	fp, [sp]
 8004672:	aa07      	add	r2, sp, #28
 8004674:	f8ad 401e 	strh.w	r4, [sp, #30]
 8004678:	f8ad 4020 	strh.w	r4, [sp, #32]
 800467c:	f001 f83e 	bl	80056fc <siscanf>
 8004680:	42a0      	cmp	r0, r4
 8004682:	ddc1      	ble.n	8004608 <_tzset_unlocked_r+0x34>
 8004684:	213c      	movs	r1, #60	; 0x3c
 8004686:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800468a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800468e:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80048cc <_tzset_unlocked_r+0x2f8>
 8004692:	fb01 3302 	mla	r3, r1, r2, r3
 8004696:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800469a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800469e:	fb01 3302 	mla	r3, r1, r2, r3
 80046a2:	fb08 f303 	mul.w	r3, r8, r3
 80046a6:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80048bc <_tzset_unlocked_r+0x2e8>
 80046aa:	62ab      	str	r3, [r5, #40]	; 0x28
 80046ac:	4b84      	ldr	r3, [pc, #528]	; (80048c0 <_tzset_unlocked_r+0x2ec>)
 80046ae:	464a      	mov	r2, r9
 80046b0:	f8c8 3000 	str.w	r3, [r8]
 80046b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b6:	4983      	ldr	r1, [pc, #524]	; (80048c4 <_tzset_unlocked_r+0x2f0>)
 80046b8:	441f      	add	r7, r3
 80046ba:	4638      	mov	r0, r7
 80046bc:	4633      	mov	r3, r6
 80046be:	f001 f81d 	bl	80056fc <siscanf>
 80046c2:	42a0      	cmp	r0, r4
 80046c4:	dc18      	bgt.n	80046f8 <_tzset_unlocked_r+0x124>
 80046c6:	f8d8 3000 	ldr.w	r3, [r8]
 80046ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80046cc:	f8c8 3004 	str.w	r3, [r8, #4]
 80046d0:	4b77      	ldr	r3, [pc, #476]	; (80048b0 <_tzset_unlocked_r+0x2dc>)
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	4b78      	ldr	r3, [pc, #480]	; (80048b8 <_tzset_unlocked_r+0x2e4>)
 80046d6:	601c      	str	r4, [r3, #0]
 80046d8:	e796      	b.n	8004608 <_tzset_unlocked_r+0x34>
 80046da:	f7fb fd3f 	bl	800015c <strcmp>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d198      	bne.n	8004614 <_tzset_unlocked_r+0x40>
 80046e2:	e791      	b.n	8004608 <_tzset_unlocked_r+0x34>
 80046e4:	4621      	mov	r1, r4
 80046e6:	f001 f878 	bl	80057da <strcpy>
 80046ea:	e7a0      	b.n	800462e <_tzset_unlocked_r+0x5a>
 80046ec:	2b2b      	cmp	r3, #43	; 0x2b
 80046ee:	f04f 0801 	mov.w	r8, #1
 80046f2:	bf08      	it	eq
 80046f4:	3701      	addeq	r7, #1
 80046f6:	e7af      	b.n	8004658 <_tzset_unlocked_r+0x84>
 80046f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046fa:	f8c8 9004 	str.w	r9, [r8, #4]
 80046fe:	18fc      	adds	r4, r7, r3
 8004700:	5cfb      	ldrb	r3, [r7, r3]
 8004702:	2b2d      	cmp	r3, #45	; 0x2d
 8004704:	f040 808c 	bne.w	8004820 <_tzset_unlocked_r+0x24c>
 8004708:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800470c:	3401      	adds	r4, #1
 800470e:	2300      	movs	r3, #0
 8004710:	4620      	mov	r0, r4
 8004712:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004716:	f8ad 301e 	strh.w	r3, [sp, #30]
 800471a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800471e:	930a      	str	r3, [sp, #40]	; 0x28
 8004720:	e9cd a602 	strd	sl, r6, [sp, #8]
 8004724:	4633      	mov	r3, r6
 8004726:	e9cd b600 	strd	fp, r6, [sp]
 800472a:	4967      	ldr	r1, [pc, #412]	; (80048c8 <_tzset_unlocked_r+0x2f4>)
 800472c:	aa07      	add	r2, sp, #28
 800472e:	f000 ffe5 	bl	80056fc <siscanf>
 8004732:	2800      	cmp	r0, #0
 8004734:	dc7a      	bgt.n	800482c <_tzset_unlocked_r+0x258>
 8004736:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004738:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800473c:	462f      	mov	r7, r5
 800473e:	f04f 0900 	mov.w	r9, #0
 8004742:	652b      	str	r3, [r5, #80]	; 0x50
 8004744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004746:	441c      	add	r4, r3
 8004748:	7823      	ldrb	r3, [r4, #0]
 800474a:	2b2c      	cmp	r3, #44	; 0x2c
 800474c:	bf08      	it	eq
 800474e:	3401      	addeq	r4, #1
 8004750:	f894 8000 	ldrb.w	r8, [r4]
 8004754:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8004758:	d17a      	bne.n	8004850 <_tzset_unlocked_r+0x27c>
 800475a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800475e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8004762:	ab09      	add	r3, sp, #36	; 0x24
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	4620      	mov	r0, r4
 8004768:	4633      	mov	r3, r6
 800476a:	4959      	ldr	r1, [pc, #356]	; (80048d0 <_tzset_unlocked_r+0x2fc>)
 800476c:	9603      	str	r6, [sp, #12]
 800476e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8004772:	f000 ffc3 	bl	80056fc <siscanf>
 8004776:	2803      	cmp	r0, #3
 8004778:	f47f af46 	bne.w	8004608 <_tzset_unlocked_r+0x34>
 800477c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8004780:	1e4b      	subs	r3, r1, #1
 8004782:	2b0b      	cmp	r3, #11
 8004784:	f63f af40 	bhi.w	8004608 <_tzset_unlocked_r+0x34>
 8004788:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800478c:	1e53      	subs	r3, r2, #1
 800478e:	2b04      	cmp	r3, #4
 8004790:	f63f af3a 	bhi.w	8004608 <_tzset_unlocked_r+0x34>
 8004794:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8004798:	2b06      	cmp	r3, #6
 800479a:	f63f af35 	bhi.w	8004608 <_tzset_unlocked_r+0x34>
 800479e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80047a2:	f887 8008 	strb.w	r8, [r7, #8]
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047aa:	eb04 0803 	add.w	r8, r4, r3
 80047ae:	2302      	movs	r3, #2
 80047b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80047ba:	f8ad 3020 	strh.w	r3, [sp, #32]
 80047be:	930a      	str	r3, [sp, #40]	; 0x28
 80047c0:	f898 3000 	ldrb.w	r3, [r8]
 80047c4:	2b2f      	cmp	r3, #47	; 0x2f
 80047c6:	d109      	bne.n	80047dc <_tzset_unlocked_r+0x208>
 80047c8:	4633      	mov	r3, r6
 80047ca:	4640      	mov	r0, r8
 80047cc:	e9cd a602 	strd	sl, r6, [sp, #8]
 80047d0:	e9cd b600 	strd	fp, r6, [sp]
 80047d4:	493f      	ldr	r1, [pc, #252]	; (80048d4 <_tzset_unlocked_r+0x300>)
 80047d6:	aa07      	add	r2, sp, #28
 80047d8:	f000 ff90 	bl	80056fc <siscanf>
 80047dc:	213c      	movs	r1, #60	; 0x3c
 80047de:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80047e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80047e6:	3728      	adds	r7, #40	; 0x28
 80047e8:	fb01 3302 	mla	r3, r1, r2, r3
 80047ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80047f0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80047f4:	fb01 3302 	mla	r3, r1, r2, r3
 80047f8:	f847 3c10 	str.w	r3, [r7, #-16]
 80047fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80047fe:	4444      	add	r4, r8
 8004800:	f1b9 0f00 	cmp.w	r9, #0
 8004804:	d021      	beq.n	800484a <_tzset_unlocked_r+0x276>
 8004806:	6868      	ldr	r0, [r5, #4]
 8004808:	f7ff fe28 	bl	800445c <__tzcalc_limits>
 800480c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800480e:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <_tzset_unlocked_r+0x2dc>)
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	bf18      	it	ne
 8004818:	2301      	movne	r3, #1
 800481a:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <_tzset_unlocked_r+0x2e4>)
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e6f3      	b.n	8004608 <_tzset_unlocked_r+0x34>
 8004820:	2b2b      	cmp	r3, #43	; 0x2b
 8004822:	f04f 0701 	mov.w	r7, #1
 8004826:	bf08      	it	eq
 8004828:	3401      	addeq	r4, #1
 800482a:	e770      	b.n	800470e <_tzset_unlocked_r+0x13a>
 800482c:	213c      	movs	r1, #60	; 0x3c
 800482e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004832:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004836:	fb01 3302 	mla	r3, r1, r2, r3
 800483a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800483e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004842:	fb01 3302 	mla	r3, r1, r2, r3
 8004846:	437b      	muls	r3, r7
 8004848:	e778      	b.n	800473c <_tzset_unlocked_r+0x168>
 800484a:	f04f 0901 	mov.w	r9, #1
 800484e:	e77b      	b.n	8004748 <_tzset_unlocked_r+0x174>
 8004850:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8004854:	bf0a      	itet	eq
 8004856:	4643      	moveq	r3, r8
 8004858:	2344      	movne	r3, #68	; 0x44
 800485a:	3401      	addeq	r4, #1
 800485c:	220a      	movs	r2, #10
 800485e:	4620      	mov	r0, r4
 8004860:	a90b      	add	r1, sp, #44	; 0x2c
 8004862:	9305      	str	r3, [sp, #20]
 8004864:	f001 f84a 	bl	80058fc <strtoul>
 8004868:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800486c:	9b05      	ldr	r3, [sp, #20]
 800486e:	45a0      	cmp	r8, r4
 8004870:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8004874:	d114      	bne.n	80048a0 <_tzset_unlocked_r+0x2cc>
 8004876:	234d      	movs	r3, #77	; 0x4d
 8004878:	f1b9 0f00 	cmp.w	r9, #0
 800487c:	d107      	bne.n	800488e <_tzset_unlocked_r+0x2ba>
 800487e:	2103      	movs	r1, #3
 8004880:	722b      	strb	r3, [r5, #8]
 8004882:	2302      	movs	r3, #2
 8004884:	f8c5 9014 	str.w	r9, [r5, #20]
 8004888:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800488c:	e78f      	b.n	80047ae <_tzset_unlocked_r+0x1da>
 800488e:	220b      	movs	r2, #11
 8004890:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8004894:	2301      	movs	r3, #1
 8004896:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800489a:	2300      	movs	r3, #0
 800489c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800489e:	e786      	b.n	80047ae <_tzset_unlocked_r+0x1da>
 80048a0:	b280      	uxth	r0, r0
 80048a2:	723b      	strb	r3, [r7, #8]
 80048a4:	6178      	str	r0, [r7, #20]
 80048a6:	e782      	b.n	80047ae <_tzset_unlocked_r+0x1da>
 80048a8:	08006584 	.word	0x08006584
 80048ac:	20000528 	.word	0x20000528
 80048b0:	20000530 	.word	0x20000530
 80048b4:	08006587 	.word	0x08006587
 80048b8:	2000052c 	.word	0x2000052c
 80048bc:	20000204 	.word	0x20000204
 80048c0:	2000051b 	.word	0x2000051b
 80048c4:	0800658b 	.word	0x0800658b
 80048c8:	080065ae 	.word	0x080065ae
 80048cc:	20000510 	.word	0x20000510
 80048d0:	0800659a 	.word	0x0800659a
 80048d4:	080065ad 	.word	0x080065ad

080048d8 <__swbuf_r>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	460e      	mov	r6, r1
 80048dc:	4614      	mov	r4, r2
 80048de:	4605      	mov	r5, r0
 80048e0:	b118      	cbz	r0, 80048ea <__swbuf_r+0x12>
 80048e2:	6983      	ldr	r3, [r0, #24]
 80048e4:	b90b      	cbnz	r3, 80048ea <__swbuf_r+0x12>
 80048e6:	f000 f9ff 	bl	8004ce8 <__sinit>
 80048ea:	4b21      	ldr	r3, [pc, #132]	; (8004970 <__swbuf_r+0x98>)
 80048ec:	429c      	cmp	r4, r3
 80048ee:	d12b      	bne.n	8004948 <__swbuf_r+0x70>
 80048f0:	686c      	ldr	r4, [r5, #4]
 80048f2:	69a3      	ldr	r3, [r4, #24]
 80048f4:	60a3      	str	r3, [r4, #8]
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	071a      	lsls	r2, r3, #28
 80048fa:	d52f      	bpl.n	800495c <__swbuf_r+0x84>
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	b36b      	cbz	r3, 800495c <__swbuf_r+0x84>
 8004900:	6923      	ldr	r3, [r4, #16]
 8004902:	6820      	ldr	r0, [r4, #0]
 8004904:	b2f6      	uxtb	r6, r6
 8004906:	1ac0      	subs	r0, r0, r3
 8004908:	6963      	ldr	r3, [r4, #20]
 800490a:	4637      	mov	r7, r6
 800490c:	4283      	cmp	r3, r0
 800490e:	dc04      	bgt.n	800491a <__swbuf_r+0x42>
 8004910:	4621      	mov	r1, r4
 8004912:	4628      	mov	r0, r5
 8004914:	f000 f954 	bl	8004bc0 <_fflush_r>
 8004918:	bb30      	cbnz	r0, 8004968 <__swbuf_r+0x90>
 800491a:	68a3      	ldr	r3, [r4, #8]
 800491c:	3001      	adds	r0, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	60a3      	str	r3, [r4, #8]
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	6022      	str	r2, [r4, #0]
 8004928:	701e      	strb	r6, [r3, #0]
 800492a:	6963      	ldr	r3, [r4, #20]
 800492c:	4283      	cmp	r3, r0
 800492e:	d004      	beq.n	800493a <__swbuf_r+0x62>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	07db      	lsls	r3, r3, #31
 8004934:	d506      	bpl.n	8004944 <__swbuf_r+0x6c>
 8004936:	2e0a      	cmp	r6, #10
 8004938:	d104      	bne.n	8004944 <__swbuf_r+0x6c>
 800493a:	4621      	mov	r1, r4
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f93f 	bl	8004bc0 <_fflush_r>
 8004942:	b988      	cbnz	r0, 8004968 <__swbuf_r+0x90>
 8004944:	4638      	mov	r0, r7
 8004946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <__swbuf_r+0x9c>)
 800494a:	429c      	cmp	r4, r3
 800494c:	d101      	bne.n	8004952 <__swbuf_r+0x7a>
 800494e:	68ac      	ldr	r4, [r5, #8]
 8004950:	e7cf      	b.n	80048f2 <__swbuf_r+0x1a>
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <__swbuf_r+0xa0>)
 8004954:	429c      	cmp	r4, r3
 8004956:	bf08      	it	eq
 8004958:	68ec      	ldreq	r4, [r5, #12]
 800495a:	e7ca      	b.n	80048f2 <__swbuf_r+0x1a>
 800495c:	4621      	mov	r1, r4
 800495e:	4628      	mov	r0, r5
 8004960:	f000 f80c 	bl	800497c <__swsetup_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	d0cb      	beq.n	8004900 <__swbuf_r+0x28>
 8004968:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800496c:	e7ea      	b.n	8004944 <__swbuf_r+0x6c>
 800496e:	bf00      	nop
 8004970:	0800661c 	.word	0x0800661c
 8004974:	0800663c 	.word	0x0800663c
 8004978:	080065fc 	.word	0x080065fc

0800497c <__swsetup_r>:
 800497c:	4b32      	ldr	r3, [pc, #200]	; (8004a48 <__swsetup_r+0xcc>)
 800497e:	b570      	push	{r4, r5, r6, lr}
 8004980:	681d      	ldr	r5, [r3, #0]
 8004982:	4606      	mov	r6, r0
 8004984:	460c      	mov	r4, r1
 8004986:	b125      	cbz	r5, 8004992 <__swsetup_r+0x16>
 8004988:	69ab      	ldr	r3, [r5, #24]
 800498a:	b913      	cbnz	r3, 8004992 <__swsetup_r+0x16>
 800498c:	4628      	mov	r0, r5
 800498e:	f000 f9ab 	bl	8004ce8 <__sinit>
 8004992:	4b2e      	ldr	r3, [pc, #184]	; (8004a4c <__swsetup_r+0xd0>)
 8004994:	429c      	cmp	r4, r3
 8004996:	d10f      	bne.n	80049b8 <__swsetup_r+0x3c>
 8004998:	686c      	ldr	r4, [r5, #4]
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049a0:	0719      	lsls	r1, r3, #28
 80049a2:	d42c      	bmi.n	80049fe <__swsetup_r+0x82>
 80049a4:	06dd      	lsls	r5, r3, #27
 80049a6:	d411      	bmi.n	80049cc <__swsetup_r+0x50>
 80049a8:	2309      	movs	r3, #9
 80049aa:	6033      	str	r3, [r6, #0]
 80049ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	e03e      	b.n	8004a36 <__swsetup_r+0xba>
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <__swsetup_r+0xd4>)
 80049ba:	429c      	cmp	r4, r3
 80049bc:	d101      	bne.n	80049c2 <__swsetup_r+0x46>
 80049be:	68ac      	ldr	r4, [r5, #8]
 80049c0:	e7eb      	b.n	800499a <__swsetup_r+0x1e>
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <__swsetup_r+0xd8>)
 80049c4:	429c      	cmp	r4, r3
 80049c6:	bf08      	it	eq
 80049c8:	68ec      	ldreq	r4, [r5, #12]
 80049ca:	e7e6      	b.n	800499a <__swsetup_r+0x1e>
 80049cc:	0758      	lsls	r0, r3, #29
 80049ce:	d512      	bpl.n	80049f6 <__swsetup_r+0x7a>
 80049d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049d2:	b141      	cbz	r1, 80049e6 <__swsetup_r+0x6a>
 80049d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049d8:	4299      	cmp	r1, r3
 80049da:	d002      	beq.n	80049e2 <__swsetup_r+0x66>
 80049dc:	4630      	mov	r0, r6
 80049de:	f7ff fbc3 	bl	8004168 <_free_r>
 80049e2:	2300      	movs	r3, #0
 80049e4:	6363      	str	r3, [r4, #52]	; 0x34
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	2300      	movs	r3, #0
 80049f0:	6063      	str	r3, [r4, #4]
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f043 0308 	orr.w	r3, r3, #8
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	b94b      	cbnz	r3, 8004a16 <__swsetup_r+0x9a>
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0c:	d003      	beq.n	8004a16 <__swsetup_r+0x9a>
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4630      	mov	r0, r6
 8004a12:	f000 fb39 	bl	8005088 <__smakebuf_r>
 8004a16:	89a0      	ldrh	r0, [r4, #12]
 8004a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a1c:	f010 0301 	ands.w	r3, r0, #1
 8004a20:	d00a      	beq.n	8004a38 <__swsetup_r+0xbc>
 8004a22:	2300      	movs	r3, #0
 8004a24:	60a3      	str	r3, [r4, #8]
 8004a26:	6963      	ldr	r3, [r4, #20]
 8004a28:	425b      	negs	r3, r3
 8004a2a:	61a3      	str	r3, [r4, #24]
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	b943      	cbnz	r3, 8004a42 <__swsetup_r+0xc6>
 8004a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a34:	d1ba      	bne.n	80049ac <__swsetup_r+0x30>
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	0781      	lsls	r1, r0, #30
 8004a3a:	bf58      	it	pl
 8004a3c:	6963      	ldrpl	r3, [r4, #20]
 8004a3e:	60a3      	str	r3, [r4, #8]
 8004a40:	e7f4      	b.n	8004a2c <__swsetup_r+0xb0>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e7f7      	b.n	8004a36 <__swsetup_r+0xba>
 8004a46:	bf00      	nop
 8004a48:	200001a0 	.word	0x200001a0
 8004a4c:	0800661c 	.word	0x0800661c
 8004a50:	0800663c 	.word	0x0800663c
 8004a54:	080065fc 	.word	0x080065fc

08004a58 <__assert_func>:
 8004a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a5a:	4614      	mov	r4, r2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <__assert_func+0x2c>)
 8004a60:	4605      	mov	r5, r0
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68d8      	ldr	r0, [r3, #12]
 8004a66:	b14c      	cbz	r4, 8004a7c <__assert_func+0x24>
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <__assert_func+0x30>)
 8004a6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a6e:	9100      	str	r1, [sp, #0]
 8004a70:	462b      	mov	r3, r5
 8004a72:	4906      	ldr	r1, [pc, #24]	; (8004a8c <__assert_func+0x34>)
 8004a74:	f000 f9b6 	bl	8004de4 <fiprintf>
 8004a78:	f000 ff5c 	bl	8005934 <abort>
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <__assert_func+0x38>)
 8004a7e:	461c      	mov	r4, r3
 8004a80:	e7f3      	b.n	8004a6a <__assert_func+0x12>
 8004a82:	bf00      	nop
 8004a84:	200001a0 	.word	0x200001a0
 8004a88:	080065c0 	.word	0x080065c0
 8004a8c:	080065cd 	.word	0x080065cd
 8004a90:	080065fb 	.word	0x080065fb

08004a94 <div>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	fb91 f4f2 	sdiv	r4, r1, r2
 8004a9a:	2900      	cmp	r1, #0
 8004a9c:	fb02 1314 	mls	r3, r2, r4, r1
 8004aa0:	db06      	blt.n	8004ab0 <div+0x1c>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da01      	bge.n	8004aaa <div+0x16>
 8004aa6:	3401      	adds	r4, #1
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	e9c0 4300 	strd	r4, r3, [r0]
 8004aae:	bd10      	pop	{r4, pc}
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bfc4      	itt	gt
 8004ab4:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8004ab8:	189b      	addgt	r3, r3, r2
 8004aba:	e7f6      	b.n	8004aaa <div+0x16>

08004abc <__sflush_r>:
 8004abc:	898a      	ldrh	r2, [r1, #12]
 8004abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	0710      	lsls	r0, r2, #28
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	d457      	bmi.n	8004b78 <__sflush_r+0xbc>
 8004ac8:	684b      	ldr	r3, [r1, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dc04      	bgt.n	8004ad8 <__sflush_r+0x1c>
 8004ace:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	dc01      	bgt.n	8004ad8 <__sflush_r+0x1c>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	d0fa      	beq.n	8004ad4 <__sflush_r+0x18>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ae4:	682f      	ldr	r7, [r5, #0]
 8004ae6:	602b      	str	r3, [r5, #0]
 8004ae8:	d032      	beq.n	8004b50 <__sflush_r+0x94>
 8004aea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	075a      	lsls	r2, r3, #29
 8004af0:	d505      	bpl.n	8004afe <__sflush_r+0x42>
 8004af2:	6863      	ldr	r3, [r4, #4]
 8004af4:	1ac0      	subs	r0, r0, r3
 8004af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af8:	b10b      	cbz	r3, 8004afe <__sflush_r+0x42>
 8004afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004afc:	1ac0      	subs	r0, r0, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	4602      	mov	r2, r0
 8004b02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b04:	4628      	mov	r0, r5
 8004b06:	6a21      	ldr	r1, [r4, #32]
 8004b08:	47b0      	blx	r6
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	d106      	bne.n	8004b1e <__sflush_r+0x62>
 8004b10:	6829      	ldr	r1, [r5, #0]
 8004b12:	291d      	cmp	r1, #29
 8004b14:	d82c      	bhi.n	8004b70 <__sflush_r+0xb4>
 8004b16:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <__sflush_r+0x100>)
 8004b18:	40ca      	lsrs	r2, r1
 8004b1a:	07d6      	lsls	r6, r2, #31
 8004b1c:	d528      	bpl.n	8004b70 <__sflush_r+0xb4>
 8004b1e:	2200      	movs	r2, #0
 8004b20:	6062      	str	r2, [r4, #4]
 8004b22:	6922      	ldr	r2, [r4, #16]
 8004b24:	04d9      	lsls	r1, r3, #19
 8004b26:	6022      	str	r2, [r4, #0]
 8004b28:	d504      	bpl.n	8004b34 <__sflush_r+0x78>
 8004b2a:	1c42      	adds	r2, r0, #1
 8004b2c:	d101      	bne.n	8004b32 <__sflush_r+0x76>
 8004b2e:	682b      	ldr	r3, [r5, #0]
 8004b30:	b903      	cbnz	r3, 8004b34 <__sflush_r+0x78>
 8004b32:	6560      	str	r0, [r4, #84]	; 0x54
 8004b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b36:	602f      	str	r7, [r5, #0]
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	d0cb      	beq.n	8004ad4 <__sflush_r+0x18>
 8004b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b40:	4299      	cmp	r1, r3
 8004b42:	d002      	beq.n	8004b4a <__sflush_r+0x8e>
 8004b44:	4628      	mov	r0, r5
 8004b46:	f7ff fb0f 	bl	8004168 <_free_r>
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8004b4e:	e7c2      	b.n	8004ad6 <__sflush_r+0x1a>
 8004b50:	6a21      	ldr	r1, [r4, #32]
 8004b52:	2301      	movs	r3, #1
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b0      	blx	r6
 8004b58:	1c41      	adds	r1, r0, #1
 8004b5a:	d1c7      	bne.n	8004aec <__sflush_r+0x30>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0c4      	beq.n	8004aec <__sflush_r+0x30>
 8004b62:	2b1d      	cmp	r3, #29
 8004b64:	d001      	beq.n	8004b6a <__sflush_r+0xae>
 8004b66:	2b16      	cmp	r3, #22
 8004b68:	d101      	bne.n	8004b6e <__sflush_r+0xb2>
 8004b6a:	602f      	str	r7, [r5, #0]
 8004b6c:	e7b2      	b.n	8004ad4 <__sflush_r+0x18>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	e7ae      	b.n	8004ad6 <__sflush_r+0x1a>
 8004b78:	690f      	ldr	r7, [r1, #16]
 8004b7a:	2f00      	cmp	r7, #0
 8004b7c:	d0aa      	beq.n	8004ad4 <__sflush_r+0x18>
 8004b7e:	0793      	lsls	r3, r2, #30
 8004b80:	bf18      	it	ne
 8004b82:	2300      	movne	r3, #0
 8004b84:	680e      	ldr	r6, [r1, #0]
 8004b86:	bf08      	it	eq
 8004b88:	694b      	ldreq	r3, [r1, #20]
 8004b8a:	1bf6      	subs	r6, r6, r7
 8004b8c:	600f      	str	r7, [r1, #0]
 8004b8e:	608b      	str	r3, [r1, #8]
 8004b90:	2e00      	cmp	r6, #0
 8004b92:	dd9f      	ble.n	8004ad4 <__sflush_r+0x18>
 8004b94:	4633      	mov	r3, r6
 8004b96:	463a      	mov	r2, r7
 8004b98:	4628      	mov	r0, r5
 8004b9a:	6a21      	ldr	r1, [r4, #32]
 8004b9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ba0:	47e0      	blx	ip
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	dc06      	bgt.n	8004bb4 <__sflush_r+0xf8>
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	e790      	b.n	8004ad6 <__sflush_r+0x1a>
 8004bb4:	4407      	add	r7, r0
 8004bb6:	1a36      	subs	r6, r6, r0
 8004bb8:	e7ea      	b.n	8004b90 <__sflush_r+0xd4>
 8004bba:	bf00      	nop
 8004bbc:	20400001 	.word	0x20400001

08004bc0 <_fflush_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	690b      	ldr	r3, [r1, #16]
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_fflush_r+0x10>
 8004bca:	2500      	movs	r5, #0
 8004bcc:	4628      	mov	r0, r5
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	b118      	cbz	r0, 8004bda <_fflush_r+0x1a>
 8004bd2:	6983      	ldr	r3, [r0, #24]
 8004bd4:	b90b      	cbnz	r3, 8004bda <_fflush_r+0x1a>
 8004bd6:	f000 f887 	bl	8004ce8 <__sinit>
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <_fflush_r+0x6c>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	d11b      	bne.n	8004c18 <_fflush_r+0x58>
 8004be0:	686c      	ldr	r4, [r5, #4]
 8004be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ef      	beq.n	8004bca <_fflush_r+0xa>
 8004bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bec:	07d0      	lsls	r0, r2, #31
 8004bee:	d404      	bmi.n	8004bfa <_fflush_r+0x3a>
 8004bf0:	0599      	lsls	r1, r3, #22
 8004bf2:	d402      	bmi.n	8004bfa <_fflush_r+0x3a>
 8004bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf6:	f000 fa1f 	bl	8005038 <__retarget_lock_acquire_recursive>
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f7ff ff5d 	bl	8004abc <__sflush_r>
 8004c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c04:	4605      	mov	r5, r0
 8004c06:	07da      	lsls	r2, r3, #31
 8004c08:	d4e0      	bmi.n	8004bcc <_fflush_r+0xc>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	059b      	lsls	r3, r3, #22
 8004c0e:	d4dd      	bmi.n	8004bcc <_fflush_r+0xc>
 8004c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c12:	f000 fa13 	bl	800503c <__retarget_lock_release_recursive>
 8004c16:	e7d9      	b.n	8004bcc <_fflush_r+0xc>
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <_fflush_r+0x70>)
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	d101      	bne.n	8004c22 <_fflush_r+0x62>
 8004c1e:	68ac      	ldr	r4, [r5, #8]
 8004c20:	e7df      	b.n	8004be2 <_fflush_r+0x22>
 8004c22:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <_fflush_r+0x74>)
 8004c24:	429c      	cmp	r4, r3
 8004c26:	bf08      	it	eq
 8004c28:	68ec      	ldreq	r4, [r5, #12]
 8004c2a:	e7da      	b.n	8004be2 <_fflush_r+0x22>
 8004c2c:	0800661c 	.word	0x0800661c
 8004c30:	0800663c 	.word	0x0800663c
 8004c34:	080065fc 	.word	0x080065fc

08004c38 <std>:
 8004c38:	2300      	movs	r3, #0
 8004c3a:	b510      	push	{r4, lr}
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c46:	6083      	str	r3, [r0, #8]
 8004c48:	8181      	strh	r1, [r0, #12]
 8004c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c4c:	81c2      	strh	r2, [r0, #14]
 8004c4e:	6183      	str	r3, [r0, #24]
 8004c50:	4619      	mov	r1, r3
 8004c52:	2208      	movs	r2, #8
 8004c54:	305c      	adds	r0, #92	; 0x5c
 8004c56:	f7ff f80d 	bl	8003c74 <memset>
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <std+0x38>)
 8004c5c:	6224      	str	r4, [r4, #32]
 8004c5e:	6263      	str	r3, [r4, #36]	; 0x24
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <std+0x3c>)
 8004c62:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <std+0x40>)
 8004c66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <std+0x44>)
 8004c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c6c:	bd10      	pop	{r4, pc}
 8004c6e:	bf00      	nop
 8004c70:	08005751 	.word	0x08005751
 8004c74:	08005777 	.word	0x08005777
 8004c78:	080057af 	.word	0x080057af
 8004c7c:	080057d3 	.word	0x080057d3

08004c80 <_cleanup_r>:
 8004c80:	4901      	ldr	r1, [pc, #4]	; (8004c88 <_cleanup_r+0x8>)
 8004c82:	f000 b8c1 	b.w	8004e08 <_fwalk_reent>
 8004c86:	bf00      	nop
 8004c88:	08004bc1 	.word	0x08004bc1

08004c8c <__sfmoreglue>:
 8004c8c:	2268      	movs	r2, #104	; 0x68
 8004c8e:	b570      	push	{r4, r5, r6, lr}
 8004c90:	1e4d      	subs	r5, r1, #1
 8004c92:	4355      	muls	r5, r2
 8004c94:	460e      	mov	r6, r1
 8004c96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c9a:	f7ff facd 	bl	8004238 <_malloc_r>
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	b140      	cbz	r0, 8004cb4 <__sfmoreglue+0x28>
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ca8:	300c      	adds	r0, #12
 8004caa:	60a0      	str	r0, [r4, #8]
 8004cac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cb0:	f7fe ffe0 	bl	8003c74 <memset>
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}

08004cb8 <__sfp_lock_acquire>:
 8004cb8:	4801      	ldr	r0, [pc, #4]	; (8004cc0 <__sfp_lock_acquire+0x8>)
 8004cba:	f000 b9bd 	b.w	8005038 <__retarget_lock_acquire_recursive>
 8004cbe:	bf00      	nop
 8004cc0:	20000536 	.word	0x20000536

08004cc4 <__sfp_lock_release>:
 8004cc4:	4801      	ldr	r0, [pc, #4]	; (8004ccc <__sfp_lock_release+0x8>)
 8004cc6:	f000 b9b9 	b.w	800503c <__retarget_lock_release_recursive>
 8004cca:	bf00      	nop
 8004ccc:	20000536 	.word	0x20000536

08004cd0 <__sinit_lock_acquire>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__sinit_lock_acquire+0x8>)
 8004cd2:	f000 b9b1 	b.w	8005038 <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000537 	.word	0x20000537

08004cdc <__sinit_lock_release>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__sinit_lock_release+0x8>)
 8004cde:	f000 b9ad 	b.w	800503c <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	20000537 	.word	0x20000537

08004ce8 <__sinit>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	f7ff fff0 	bl	8004cd0 <__sinit_lock_acquire>
 8004cf0:	69a3      	ldr	r3, [r4, #24]
 8004cf2:	b11b      	cbz	r3, 8004cfc <__sinit+0x14>
 8004cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf8:	f7ff bff0 	b.w	8004cdc <__sinit_lock_release>
 8004cfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d00:	6523      	str	r3, [r4, #80]	; 0x50
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <__sinit+0x68>)
 8004d04:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <__sinit+0x6c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	bf08      	it	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	4620      	mov	r0, r4
 8004d12:	bf08      	it	eq
 8004d14:	61a3      	streq	r3, [r4, #24]
 8004d16:	f000 f81f 	bl	8004d58 <__sfp>
 8004d1a:	6060      	str	r0, [r4, #4]
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f81b 	bl	8004d58 <__sfp>
 8004d22:	60a0      	str	r0, [r4, #8]
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 f817 	bl	8004d58 <__sfp>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	60e0      	str	r0, [r4, #12]
 8004d30:	6860      	ldr	r0, [r4, #4]
 8004d32:	f7ff ff81 	bl	8004c38 <std>
 8004d36:	2201      	movs	r2, #1
 8004d38:	2109      	movs	r1, #9
 8004d3a:	68a0      	ldr	r0, [r4, #8]
 8004d3c:	f7ff ff7c 	bl	8004c38 <std>
 8004d40:	2202      	movs	r2, #2
 8004d42:	2112      	movs	r1, #18
 8004d44:	68e0      	ldr	r0, [r4, #12]
 8004d46:	f7ff ff77 	bl	8004c38 <std>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61a3      	str	r3, [r4, #24]
 8004d4e:	e7d1      	b.n	8004cf4 <__sinit+0xc>
 8004d50:	0800644c 	.word	0x0800644c
 8004d54:	08004c81 	.word	0x08004c81

08004d58 <__sfp>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	4607      	mov	r7, r0
 8004d5c:	f7ff ffac 	bl	8004cb8 <__sfp_lock_acquire>
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <__sfp+0x84>)
 8004d62:	681e      	ldr	r6, [r3, #0]
 8004d64:	69b3      	ldr	r3, [r6, #24]
 8004d66:	b913      	cbnz	r3, 8004d6e <__sfp+0x16>
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f7ff ffbd 	bl	8004ce8 <__sinit>
 8004d6e:	3648      	adds	r6, #72	; 0x48
 8004d70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	d503      	bpl.n	8004d80 <__sfp+0x28>
 8004d78:	6833      	ldr	r3, [r6, #0]
 8004d7a:	b30b      	cbz	r3, 8004dc0 <__sfp+0x68>
 8004d7c:	6836      	ldr	r6, [r6, #0]
 8004d7e:	e7f7      	b.n	8004d70 <__sfp+0x18>
 8004d80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d84:	b9d5      	cbnz	r5, 8004dbc <__sfp+0x64>
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <__sfp+0x88>)
 8004d88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d8c:	60e3      	str	r3, [r4, #12]
 8004d8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d90:	f000 f950 	bl	8005034 <__retarget_lock_init_recursive>
 8004d94:	f7ff ff96 	bl	8004cc4 <__sfp_lock_release>
 8004d98:	2208      	movs	r2, #8
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004da4:	6025      	str	r5, [r4, #0]
 8004da6:	61a5      	str	r5, [r4, #24]
 8004da8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004dac:	f7fe ff62 	bl	8003c74 <memset>
 8004db0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004db4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004db8:	4620      	mov	r0, r4
 8004dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dbc:	3468      	adds	r4, #104	; 0x68
 8004dbe:	e7d9      	b.n	8004d74 <__sfp+0x1c>
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f7ff ff62 	bl	8004c8c <__sfmoreglue>
 8004dc8:	4604      	mov	r4, r0
 8004dca:	6030      	str	r0, [r6, #0]
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d1d5      	bne.n	8004d7c <__sfp+0x24>
 8004dd0:	f7ff ff78 	bl	8004cc4 <__sfp_lock_release>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	e7ee      	b.n	8004db8 <__sfp+0x60>
 8004dda:	bf00      	nop
 8004ddc:	0800644c 	.word	0x0800644c
 8004de0:	ffff0001 	.word	0xffff0001

08004de4 <fiprintf>:
 8004de4:	b40e      	push	{r1, r2, r3}
 8004de6:	b503      	push	{r0, r1, lr}
 8004de8:	4601      	mov	r1, r0
 8004dea:	ab03      	add	r3, sp, #12
 8004dec:	4805      	ldr	r0, [pc, #20]	; (8004e04 <fiprintf+0x20>)
 8004dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004df2:	6800      	ldr	r0, [r0, #0]
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	f000 f9bb 	bl	8005170 <_vfiprintf_r>
 8004dfa:	b002      	add	sp, #8
 8004dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e00:	b003      	add	sp, #12
 8004e02:	4770      	bx	lr
 8004e04:	200001a0 	.word	0x200001a0

08004e08 <_fwalk_reent>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	4688      	mov	r8, r1
 8004e10:	2700      	movs	r7, #0
 8004e12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e1a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e1e:	d505      	bpl.n	8004e2c <_fwalk_reent+0x24>
 8004e20:	6824      	ldr	r4, [r4, #0]
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d1f7      	bne.n	8004e16 <_fwalk_reent+0xe>
 8004e26:	4638      	mov	r0, r7
 8004e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e2c:	89ab      	ldrh	r3, [r5, #12]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d907      	bls.n	8004e42 <_fwalk_reent+0x3a>
 8004e32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e36:	3301      	adds	r3, #1
 8004e38:	d003      	beq.n	8004e42 <_fwalk_reent+0x3a>
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	47c0      	blx	r8
 8004e40:	4307      	orrs	r7, r0
 8004e42:	3568      	adds	r5, #104	; 0x68
 8004e44:	e7e9      	b.n	8004e1a <_fwalk_reent+0x12>
	...

08004e48 <_findenv_r>:
 8004e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8004ebc <_findenv_r+0x74>
 8004e50:	4607      	mov	r7, r0
 8004e52:	4689      	mov	r9, r1
 8004e54:	4616      	mov	r6, r2
 8004e56:	f000 fd85 	bl	8005964 <__env_lock>
 8004e5a:	f8da 4000 	ldr.w	r4, [sl]
 8004e5e:	b134      	cbz	r4, 8004e6e <_findenv_r+0x26>
 8004e60:	464b      	mov	r3, r9
 8004e62:	4698      	mov	r8, r3
 8004e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e68:	b13a      	cbz	r2, 8004e7a <_findenv_r+0x32>
 8004e6a:	2a3d      	cmp	r2, #61	; 0x3d
 8004e6c:	d1f9      	bne.n	8004e62 <_findenv_r+0x1a>
 8004e6e:	4638      	mov	r0, r7
 8004e70:	f000 fd7e 	bl	8005970 <__env_unlock>
 8004e74:	2000      	movs	r0, #0
 8004e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7a:	eba8 0809 	sub.w	r8, r8, r9
 8004e7e:	46a3      	mov	fp, r4
 8004e80:	f854 0b04 	ldr.w	r0, [r4], #4
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d0f2      	beq.n	8004e6e <_findenv_r+0x26>
 8004e88:	4642      	mov	r2, r8
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	f000 fcad 	bl	80057ea <strncmp>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d1f4      	bne.n	8004e7e <_findenv_r+0x36>
 8004e94:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004e98:	eb03 0508 	add.w	r5, r3, r8
 8004e9c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8004ea0:	2b3d      	cmp	r3, #61	; 0x3d
 8004ea2:	d1ec      	bne.n	8004e7e <_findenv_r+0x36>
 8004ea4:	f8da 3000 	ldr.w	r3, [sl]
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	ebab 0303 	sub.w	r3, fp, r3
 8004eae:	109b      	asrs	r3, r3, #2
 8004eb0:	6033      	str	r3, [r6, #0]
 8004eb2:	f000 fd5d 	bl	8005970 <__env_unlock>
 8004eb6:	1c68      	adds	r0, r5, #1
 8004eb8:	e7dd      	b.n	8004e76 <_findenv_r+0x2e>
 8004eba:	bf00      	nop
 8004ebc:	20000190 	.word	0x20000190

08004ec0 <_getenv_r>:
 8004ec0:	b507      	push	{r0, r1, r2, lr}
 8004ec2:	aa01      	add	r2, sp, #4
 8004ec4:	f7ff ffc0 	bl	8004e48 <_findenv_r>
 8004ec8:	b003      	add	sp, #12
 8004eca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004ed0 <__gettzinfo>:
 8004ed0:	4800      	ldr	r0, [pc, #0]	; (8004ed4 <__gettzinfo+0x4>)
 8004ed2:	4770      	bx	lr
 8004ed4:	20000210 	.word	0x20000210

08004ed8 <gmtime_r>:
 8004ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004edc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	4a4e      	ldr	r2, [pc, #312]	; (8005024 <gmtime_r+0x14c>)
 8004eea:	f7fb f941 	bl	8000170 <__aeabi_ldivmod>
 8004eee:	4639      	mov	r1, r7
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	4a4b      	ldr	r2, [pc, #300]	; (8005024 <gmtime_r+0x14c>)
 8004ef8:	f7fb f93a 	bl	8000170 <__aeabi_ldivmod>
 8004efc:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	bfbc      	itt	lt
 8004f04:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8004f08:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8004f0c:	fbb2 f1f0 	udiv	r1, r2, r0
 8004f10:	fb00 2211 	mls	r2, r0, r1, r2
 8004f14:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8004f18:	60a1      	str	r1, [r4, #8]
 8004f1a:	fbb2 f1f0 	udiv	r1, r2, r0
 8004f1e:	fb00 2211 	mls	r2, r0, r1, r2
 8004f22:	6061      	str	r1, [r4, #4]
 8004f24:	f04f 0107 	mov.w	r1, #7
 8004f28:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 8004f2c:	bfac      	ite	ge
 8004f2e:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8004f32:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8004f36:	6022      	str	r2, [r4, #0]
 8004f38:	1cda      	adds	r2, r3, #3
 8004f3a:	fb92 f1f1 	sdiv	r1, r2, r1
 8004f3e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004f42:	1a52      	subs	r2, r2, r1
 8004f44:	bf48      	it	mi
 8004f46:	3207      	addmi	r2, #7
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	4d37      	ldr	r5, [pc, #220]	; (8005028 <gmtime_r+0x150>)
 8004f4c:	61a2      	str	r2, [r4, #24]
 8004f4e:	bfbd      	ittte	lt
 8004f50:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8004f54:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8004f58:	fb92 f5f5 	sdivlt	r5, r2, r5
 8004f5c:	fb93 f5f5 	sdivge	r5, r3, r5
 8004f60:	4832      	ldr	r0, [pc, #200]	; (800502c <gmtime_r+0x154>)
 8004f62:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8004f66:	fb00 3005 	mla	r0, r0, r5, r3
 8004f6a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8004f6e:	fbb0 f2f2 	udiv	r2, r0, r2
 8004f72:	fbb0 f1f3 	udiv	r1, r0, r3
 8004f76:	4402      	add	r2, r0
 8004f78:	1a52      	subs	r2, r2, r1
 8004f7a:	492d      	ldr	r1, [pc, #180]	; (8005030 <gmtime_r+0x158>)
 8004f7c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8004f80:	fbb0 f1f1 	udiv	r1, r0, r1
 8004f84:	1a52      	subs	r2, r2, r1
 8004f86:	fbb2 f1fc 	udiv	r1, r2, ip
 8004f8a:	2764      	movs	r7, #100	; 0x64
 8004f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f90:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f94:	2299      	movs	r2, #153	; 0x99
 8004f96:	1af3      	subs	r3, r6, r3
 8004f98:	4403      	add	r3, r0
 8004f9a:	fb0c 3311 	mls	r3, ip, r1, r3
 8004f9e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8004fa2:	f10e 0e02 	add.w	lr, lr, #2
 8004fa6:	fbbe f0f2 	udiv	r0, lr, r2
 8004faa:	f04f 0805 	mov.w	r8, #5
 8004fae:	4342      	muls	r2, r0
 8004fb0:	3202      	adds	r2, #2
 8004fb2:	fbb2 f2f8 	udiv	r2, r2, r8
 8004fb6:	f103 0c01 	add.w	ip, r3, #1
 8004fba:	ebac 0c02 	sub.w	ip, ip, r2
 8004fbe:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8004fc2:	4596      	cmp	lr, r2
 8004fc4:	bf94      	ite	ls
 8004fc6:	2202      	movls	r2, #2
 8004fc8:	f06f 0209 	mvnhi.w	r2, #9
 8004fcc:	4410      	add	r0, r2
 8004fce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004fd2:	fb02 1505 	mla	r5, r2, r5, r1
 8004fd6:	2801      	cmp	r0, #1
 8004fd8:	bf98      	it	ls
 8004fda:	3501      	addls	r5, #1
 8004fdc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8004fe0:	d30d      	bcc.n	8004ffe <gmtime_r+0x126>
 8004fe2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004fe6:	61e3      	str	r3, [r4, #28]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8004fee:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8004ff2:	f8c4 c00c 	str.w	ip, [r4, #12]
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	6223      	str	r3, [r4, #32]
 8004ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ffe:	078a      	lsls	r2, r1, #30
 8005000:	d102      	bne.n	8005008 <gmtime_r+0x130>
 8005002:	fb07 1616 	mls	r6, r7, r6, r1
 8005006:	b95e      	cbnz	r6, 8005020 <gmtime_r+0x148>
 8005008:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800500c:	fbb1 f6f2 	udiv	r6, r1, r2
 8005010:	fb02 1216 	mls	r2, r2, r6, r1
 8005014:	fab2 f282 	clz	r2, r2
 8005018:	0952      	lsrs	r2, r2, #5
 800501a:	333b      	adds	r3, #59	; 0x3b
 800501c:	4413      	add	r3, r2
 800501e:	e7e2      	b.n	8004fe6 <gmtime_r+0x10e>
 8005020:	2201      	movs	r2, #1
 8005022:	e7fa      	b.n	800501a <gmtime_r+0x142>
 8005024:	00015180 	.word	0x00015180
 8005028:	00023ab1 	.word	0x00023ab1
 800502c:	fffdc54f 	.word	0xfffdc54f
 8005030:	00023ab0 	.word	0x00023ab0

08005034 <__retarget_lock_init_recursive>:
 8005034:	4770      	bx	lr

08005036 <__retarget_lock_acquire>:
 8005036:	4770      	bx	lr

08005038 <__retarget_lock_acquire_recursive>:
 8005038:	4770      	bx	lr

0800503a <__retarget_lock_release>:
 800503a:	4770      	bx	lr

0800503c <__retarget_lock_release_recursive>:
 800503c:	4770      	bx	lr

0800503e <__swhatbuf_r>:
 800503e:	b570      	push	{r4, r5, r6, lr}
 8005040:	460e      	mov	r6, r1
 8005042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005046:	4614      	mov	r4, r2
 8005048:	2900      	cmp	r1, #0
 800504a:	461d      	mov	r5, r3
 800504c:	b096      	sub	sp, #88	; 0x58
 800504e:	da08      	bge.n	8005062 <__swhatbuf_r+0x24>
 8005050:	2200      	movs	r2, #0
 8005052:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005056:	602a      	str	r2, [r5, #0]
 8005058:	061a      	lsls	r2, r3, #24
 800505a:	d410      	bmi.n	800507e <__swhatbuf_r+0x40>
 800505c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005060:	e00e      	b.n	8005080 <__swhatbuf_r+0x42>
 8005062:	466a      	mov	r2, sp
 8005064:	f000 fc8a 	bl	800597c <_fstat_r>
 8005068:	2800      	cmp	r0, #0
 800506a:	dbf1      	blt.n	8005050 <__swhatbuf_r+0x12>
 800506c:	9a01      	ldr	r2, [sp, #4]
 800506e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005072:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005076:	425a      	negs	r2, r3
 8005078:	415a      	adcs	r2, r3
 800507a:	602a      	str	r2, [r5, #0]
 800507c:	e7ee      	b.n	800505c <__swhatbuf_r+0x1e>
 800507e:	2340      	movs	r3, #64	; 0x40
 8005080:	2000      	movs	r0, #0
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	b016      	add	sp, #88	; 0x58
 8005086:	bd70      	pop	{r4, r5, r6, pc}

08005088 <__smakebuf_r>:
 8005088:	898b      	ldrh	r3, [r1, #12]
 800508a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800508c:	079d      	lsls	r5, r3, #30
 800508e:	4606      	mov	r6, r0
 8005090:	460c      	mov	r4, r1
 8005092:	d507      	bpl.n	80050a4 <__smakebuf_r+0x1c>
 8005094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	2301      	movs	r3, #1
 800509e:	6163      	str	r3, [r4, #20]
 80050a0:	b002      	add	sp, #8
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	466a      	mov	r2, sp
 80050a6:	ab01      	add	r3, sp, #4
 80050a8:	f7ff ffc9 	bl	800503e <__swhatbuf_r>
 80050ac:	9900      	ldr	r1, [sp, #0]
 80050ae:	4605      	mov	r5, r0
 80050b0:	4630      	mov	r0, r6
 80050b2:	f7ff f8c1 	bl	8004238 <_malloc_r>
 80050b6:	b948      	cbnz	r0, 80050cc <__smakebuf_r+0x44>
 80050b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050bc:	059a      	lsls	r2, r3, #22
 80050be:	d4ef      	bmi.n	80050a0 <__smakebuf_r+0x18>
 80050c0:	f023 0303 	bic.w	r3, r3, #3
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	e7e3      	b.n	8005094 <__smakebuf_r+0xc>
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <__smakebuf_r+0x7c>)
 80050ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	6020      	str	r0, [r4, #0]
 80050d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	9b00      	ldr	r3, [sp, #0]
 80050dc:	6120      	str	r0, [r4, #16]
 80050de:	6163      	str	r3, [r4, #20]
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	b15b      	cbz	r3, 80050fc <__smakebuf_r+0x74>
 80050e4:	4630      	mov	r0, r6
 80050e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ea:	f000 fc59 	bl	80059a0 <_isatty_r>
 80050ee:	b128      	cbz	r0, 80050fc <__smakebuf_r+0x74>
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	89a0      	ldrh	r0, [r4, #12]
 80050fe:	4305      	orrs	r5, r0
 8005100:	81a5      	strh	r5, [r4, #12]
 8005102:	e7cd      	b.n	80050a0 <__smakebuf_r+0x18>
 8005104:	08004c81 	.word	0x08004c81

08005108 <__malloc_lock>:
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <__malloc_lock+0x8>)
 800510a:	f7ff bf95 	b.w	8005038 <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	20000535 	.word	0x20000535

08005114 <__malloc_unlock>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__malloc_unlock+0x8>)
 8005116:	f7ff bf91 	b.w	800503c <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	20000535 	.word	0x20000535

08005120 <__sfputc_r>:
 8005120:	6893      	ldr	r3, [r2, #8]
 8005122:	b410      	push	{r4}
 8005124:	3b01      	subs	r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	6093      	str	r3, [r2, #8]
 800512a:	da07      	bge.n	800513c <__sfputc_r+0x1c>
 800512c:	6994      	ldr	r4, [r2, #24]
 800512e:	42a3      	cmp	r3, r4
 8005130:	db01      	blt.n	8005136 <__sfputc_r+0x16>
 8005132:	290a      	cmp	r1, #10
 8005134:	d102      	bne.n	800513c <__sfputc_r+0x1c>
 8005136:	bc10      	pop	{r4}
 8005138:	f7ff bbce 	b.w	80048d8 <__swbuf_r>
 800513c:	6813      	ldr	r3, [r2, #0]
 800513e:	1c58      	adds	r0, r3, #1
 8005140:	6010      	str	r0, [r2, #0]
 8005142:	7019      	strb	r1, [r3, #0]
 8005144:	4608      	mov	r0, r1
 8005146:	bc10      	pop	{r4}
 8005148:	4770      	bx	lr

0800514a <__sfputs_r>:
 800514a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514c:	4606      	mov	r6, r0
 800514e:	460f      	mov	r7, r1
 8005150:	4614      	mov	r4, r2
 8005152:	18d5      	adds	r5, r2, r3
 8005154:	42ac      	cmp	r4, r5
 8005156:	d101      	bne.n	800515c <__sfputs_r+0x12>
 8005158:	2000      	movs	r0, #0
 800515a:	e007      	b.n	800516c <__sfputs_r+0x22>
 800515c:	463a      	mov	r2, r7
 800515e:	4630      	mov	r0, r6
 8005160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005164:	f7ff ffdc 	bl	8005120 <__sfputc_r>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d1f3      	bne.n	8005154 <__sfputs_r+0xa>
 800516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005170 <_vfiprintf_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	460d      	mov	r5, r1
 8005176:	4614      	mov	r4, r2
 8005178:	4698      	mov	r8, r3
 800517a:	4606      	mov	r6, r0
 800517c:	b09d      	sub	sp, #116	; 0x74
 800517e:	b118      	cbz	r0, 8005188 <_vfiprintf_r+0x18>
 8005180:	6983      	ldr	r3, [r0, #24]
 8005182:	b90b      	cbnz	r3, 8005188 <_vfiprintf_r+0x18>
 8005184:	f7ff fdb0 	bl	8004ce8 <__sinit>
 8005188:	4b89      	ldr	r3, [pc, #548]	; (80053b0 <_vfiprintf_r+0x240>)
 800518a:	429d      	cmp	r5, r3
 800518c:	d11b      	bne.n	80051c6 <_vfiprintf_r+0x56>
 800518e:	6875      	ldr	r5, [r6, #4]
 8005190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d405      	bmi.n	80051a2 <_vfiprintf_r+0x32>
 8005196:	89ab      	ldrh	r3, [r5, #12]
 8005198:	059a      	lsls	r2, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_vfiprintf_r+0x32>
 800519c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800519e:	f7ff ff4b 	bl	8005038 <__retarget_lock_acquire_recursive>
 80051a2:	89ab      	ldrh	r3, [r5, #12]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	d501      	bpl.n	80051ac <_vfiprintf_r+0x3c>
 80051a8:	692b      	ldr	r3, [r5, #16]
 80051aa:	b9eb      	cbnz	r3, 80051e8 <_vfiprintf_r+0x78>
 80051ac:	4629      	mov	r1, r5
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff fbe4 	bl	800497c <__swsetup_r>
 80051b4:	b1c0      	cbz	r0, 80051e8 <_vfiprintf_r+0x78>
 80051b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051b8:	07dc      	lsls	r4, r3, #31
 80051ba:	d50e      	bpl.n	80051da <_vfiprintf_r+0x6a>
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c0:	b01d      	add	sp, #116	; 0x74
 80051c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c6:	4b7b      	ldr	r3, [pc, #492]	; (80053b4 <_vfiprintf_r+0x244>)
 80051c8:	429d      	cmp	r5, r3
 80051ca:	d101      	bne.n	80051d0 <_vfiprintf_r+0x60>
 80051cc:	68b5      	ldr	r5, [r6, #8]
 80051ce:	e7df      	b.n	8005190 <_vfiprintf_r+0x20>
 80051d0:	4b79      	ldr	r3, [pc, #484]	; (80053b8 <_vfiprintf_r+0x248>)
 80051d2:	429d      	cmp	r5, r3
 80051d4:	bf08      	it	eq
 80051d6:	68f5      	ldreq	r5, [r6, #12]
 80051d8:	e7da      	b.n	8005190 <_vfiprintf_r+0x20>
 80051da:	89ab      	ldrh	r3, [r5, #12]
 80051dc:	0598      	lsls	r0, r3, #22
 80051de:	d4ed      	bmi.n	80051bc <_vfiprintf_r+0x4c>
 80051e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051e2:	f7ff ff2b 	bl	800503c <__retarget_lock_release_recursive>
 80051e6:	e7e9      	b.n	80051bc <_vfiprintf_r+0x4c>
 80051e8:	2300      	movs	r3, #0
 80051ea:	9309      	str	r3, [sp, #36]	; 0x24
 80051ec:	2320      	movs	r3, #32
 80051ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051f2:	2330      	movs	r3, #48	; 0x30
 80051f4:	f04f 0901 	mov.w	r9, #1
 80051f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80051fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80053bc <_vfiprintf_r+0x24c>
 8005200:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005204:	4623      	mov	r3, r4
 8005206:	469a      	mov	sl, r3
 8005208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800520c:	b10a      	cbz	r2, 8005212 <_vfiprintf_r+0xa2>
 800520e:	2a25      	cmp	r2, #37	; 0x25
 8005210:	d1f9      	bne.n	8005206 <_vfiprintf_r+0x96>
 8005212:	ebba 0b04 	subs.w	fp, sl, r4
 8005216:	d00b      	beq.n	8005230 <_vfiprintf_r+0xc0>
 8005218:	465b      	mov	r3, fp
 800521a:	4622      	mov	r2, r4
 800521c:	4629      	mov	r1, r5
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ff93 	bl	800514a <__sfputs_r>
 8005224:	3001      	adds	r0, #1
 8005226:	f000 80aa 	beq.w	800537e <_vfiprintf_r+0x20e>
 800522a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800522c:	445a      	add	r2, fp
 800522e:	9209      	str	r2, [sp, #36]	; 0x24
 8005230:	f89a 3000 	ldrb.w	r3, [sl]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80a2 	beq.w	800537e <_vfiprintf_r+0x20e>
 800523a:	2300      	movs	r3, #0
 800523c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005244:	f10a 0a01 	add.w	sl, sl, #1
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	9307      	str	r3, [sp, #28]
 800524c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005250:	931a      	str	r3, [sp, #104]	; 0x68
 8005252:	4654      	mov	r4, sl
 8005254:	2205      	movs	r2, #5
 8005256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800525a:	4858      	ldr	r0, [pc, #352]	; (80053bc <_vfiprintf_r+0x24c>)
 800525c:	f000 fbc2 	bl	80059e4 <memchr>
 8005260:	9a04      	ldr	r2, [sp, #16]
 8005262:	b9d8      	cbnz	r0, 800529c <_vfiprintf_r+0x12c>
 8005264:	06d1      	lsls	r1, r2, #27
 8005266:	bf44      	itt	mi
 8005268:	2320      	movmi	r3, #32
 800526a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526e:	0713      	lsls	r3, r2, #28
 8005270:	bf44      	itt	mi
 8005272:	232b      	movmi	r3, #43	; 0x2b
 8005274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005278:	f89a 3000 	ldrb.w	r3, [sl]
 800527c:	2b2a      	cmp	r3, #42	; 0x2a
 800527e:	d015      	beq.n	80052ac <_vfiprintf_r+0x13c>
 8005280:	4654      	mov	r4, sl
 8005282:	2000      	movs	r0, #0
 8005284:	f04f 0c0a 	mov.w	ip, #10
 8005288:	9a07      	ldr	r2, [sp, #28]
 800528a:	4621      	mov	r1, r4
 800528c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005290:	3b30      	subs	r3, #48	; 0x30
 8005292:	2b09      	cmp	r3, #9
 8005294:	d94e      	bls.n	8005334 <_vfiprintf_r+0x1c4>
 8005296:	b1b0      	cbz	r0, 80052c6 <_vfiprintf_r+0x156>
 8005298:	9207      	str	r2, [sp, #28]
 800529a:	e014      	b.n	80052c6 <_vfiprintf_r+0x156>
 800529c:	eba0 0308 	sub.w	r3, r0, r8
 80052a0:	fa09 f303 	lsl.w	r3, r9, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	46a2      	mov	sl, r4
 80052a8:	9304      	str	r3, [sp, #16]
 80052aa:	e7d2      	b.n	8005252 <_vfiprintf_r+0xe2>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	1d19      	adds	r1, r3, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	9103      	str	r1, [sp, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bfbb      	ittet	lt
 80052b8:	425b      	neglt	r3, r3
 80052ba:	f042 0202 	orrlt.w	r2, r2, #2
 80052be:	9307      	strge	r3, [sp, #28]
 80052c0:	9307      	strlt	r3, [sp, #28]
 80052c2:	bfb8      	it	lt
 80052c4:	9204      	strlt	r2, [sp, #16]
 80052c6:	7823      	ldrb	r3, [r4, #0]
 80052c8:	2b2e      	cmp	r3, #46	; 0x2e
 80052ca:	d10c      	bne.n	80052e6 <_vfiprintf_r+0x176>
 80052cc:	7863      	ldrb	r3, [r4, #1]
 80052ce:	2b2a      	cmp	r3, #42	; 0x2a
 80052d0:	d135      	bne.n	800533e <_vfiprintf_r+0x1ce>
 80052d2:	9b03      	ldr	r3, [sp, #12]
 80052d4:	3402      	adds	r4, #2
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	9203      	str	r2, [sp, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bfb8      	it	lt
 80052e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052e4:	9305      	str	r3, [sp, #20]
 80052e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80053c0 <_vfiprintf_r+0x250>
 80052ea:	2203      	movs	r2, #3
 80052ec:	4650      	mov	r0, sl
 80052ee:	7821      	ldrb	r1, [r4, #0]
 80052f0:	f000 fb78 	bl	80059e4 <memchr>
 80052f4:	b140      	cbz	r0, 8005308 <_vfiprintf_r+0x198>
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	eba0 000a 	sub.w	r0, r0, sl
 80052fc:	fa03 f000 	lsl.w	r0, r3, r0
 8005300:	9b04      	ldr	r3, [sp, #16]
 8005302:	3401      	adds	r4, #1
 8005304:	4303      	orrs	r3, r0
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530c:	2206      	movs	r2, #6
 800530e:	482d      	ldr	r0, [pc, #180]	; (80053c4 <_vfiprintf_r+0x254>)
 8005310:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005314:	f000 fb66 	bl	80059e4 <memchr>
 8005318:	2800      	cmp	r0, #0
 800531a:	d03f      	beq.n	800539c <_vfiprintf_r+0x22c>
 800531c:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <_vfiprintf_r+0x258>)
 800531e:	bb1b      	cbnz	r3, 8005368 <_vfiprintf_r+0x1f8>
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	3307      	adds	r3, #7
 8005324:	f023 0307 	bic.w	r3, r3, #7
 8005328:	3308      	adds	r3, #8
 800532a:	9303      	str	r3, [sp, #12]
 800532c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532e:	443b      	add	r3, r7
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
 8005332:	e767      	b.n	8005204 <_vfiprintf_r+0x94>
 8005334:	460c      	mov	r4, r1
 8005336:	2001      	movs	r0, #1
 8005338:	fb0c 3202 	mla	r2, ip, r2, r3
 800533c:	e7a5      	b.n	800528a <_vfiprintf_r+0x11a>
 800533e:	2300      	movs	r3, #0
 8005340:	f04f 0c0a 	mov.w	ip, #10
 8005344:	4619      	mov	r1, r3
 8005346:	3401      	adds	r4, #1
 8005348:	9305      	str	r3, [sp, #20]
 800534a:	4620      	mov	r0, r4
 800534c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005350:	3a30      	subs	r2, #48	; 0x30
 8005352:	2a09      	cmp	r2, #9
 8005354:	d903      	bls.n	800535e <_vfiprintf_r+0x1ee>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0c5      	beq.n	80052e6 <_vfiprintf_r+0x176>
 800535a:	9105      	str	r1, [sp, #20]
 800535c:	e7c3      	b.n	80052e6 <_vfiprintf_r+0x176>
 800535e:	4604      	mov	r4, r0
 8005360:	2301      	movs	r3, #1
 8005362:	fb0c 2101 	mla	r1, ip, r1, r2
 8005366:	e7f0      	b.n	800534a <_vfiprintf_r+0x1da>
 8005368:	ab03      	add	r3, sp, #12
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	462a      	mov	r2, r5
 800536e:	4630      	mov	r0, r6
 8005370:	4b16      	ldr	r3, [pc, #88]	; (80053cc <_vfiprintf_r+0x25c>)
 8005372:	a904      	add	r1, sp, #16
 8005374:	f3af 8000 	nop.w
 8005378:	4607      	mov	r7, r0
 800537a:	1c78      	adds	r0, r7, #1
 800537c:	d1d6      	bne.n	800532c <_vfiprintf_r+0x1bc>
 800537e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005380:	07d9      	lsls	r1, r3, #31
 8005382:	d405      	bmi.n	8005390 <_vfiprintf_r+0x220>
 8005384:	89ab      	ldrh	r3, [r5, #12]
 8005386:	059a      	lsls	r2, r3, #22
 8005388:	d402      	bmi.n	8005390 <_vfiprintf_r+0x220>
 800538a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800538c:	f7ff fe56 	bl	800503c <__retarget_lock_release_recursive>
 8005390:	89ab      	ldrh	r3, [r5, #12]
 8005392:	065b      	lsls	r3, r3, #25
 8005394:	f53f af12 	bmi.w	80051bc <_vfiprintf_r+0x4c>
 8005398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800539a:	e711      	b.n	80051c0 <_vfiprintf_r+0x50>
 800539c:	ab03      	add	r3, sp, #12
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	462a      	mov	r2, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <_vfiprintf_r+0x25c>)
 80053a6:	a904      	add	r1, sp, #16
 80053a8:	f000 f882 	bl	80054b0 <_printf_i>
 80053ac:	e7e4      	b.n	8005378 <_vfiprintf_r+0x208>
 80053ae:	bf00      	nop
 80053b0:	0800661c 	.word	0x0800661c
 80053b4:	0800663c 	.word	0x0800663c
 80053b8:	080065fc 	.word	0x080065fc
 80053bc:	0800665c 	.word	0x0800665c
 80053c0:	08006662 	.word	0x08006662
 80053c4:	08006666 	.word	0x08006666
 80053c8:	00000000 	.word	0x00000000
 80053cc:	0800514b 	.word	0x0800514b

080053d0 <_printf_common>:
 80053d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	4616      	mov	r6, r2
 80053d6:	4699      	mov	r9, r3
 80053d8:	688a      	ldr	r2, [r1, #8]
 80053da:	690b      	ldr	r3, [r1, #16]
 80053dc:	4607      	mov	r7, r0
 80053de:	4293      	cmp	r3, r2
 80053e0:	bfb8      	it	lt
 80053e2:	4613      	movlt	r3, r2
 80053e4:	6033      	str	r3, [r6, #0]
 80053e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053ea:	460c      	mov	r4, r1
 80053ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f0:	b10a      	cbz	r2, 80053f6 <_printf_common+0x26>
 80053f2:	3301      	adds	r3, #1
 80053f4:	6033      	str	r3, [r6, #0]
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	0699      	lsls	r1, r3, #26
 80053fa:	bf42      	ittt	mi
 80053fc:	6833      	ldrmi	r3, [r6, #0]
 80053fe:	3302      	addmi	r3, #2
 8005400:	6033      	strmi	r3, [r6, #0]
 8005402:	6825      	ldr	r5, [r4, #0]
 8005404:	f015 0506 	ands.w	r5, r5, #6
 8005408:	d106      	bne.n	8005418 <_printf_common+0x48>
 800540a:	f104 0a19 	add.w	sl, r4, #25
 800540e:	68e3      	ldr	r3, [r4, #12]
 8005410:	6832      	ldr	r2, [r6, #0]
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	42ab      	cmp	r3, r5
 8005416:	dc28      	bgt.n	800546a <_printf_common+0x9a>
 8005418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800541c:	1e13      	subs	r3, r2, #0
 800541e:	6822      	ldr	r2, [r4, #0]
 8005420:	bf18      	it	ne
 8005422:	2301      	movne	r3, #1
 8005424:	0692      	lsls	r2, r2, #26
 8005426:	d42d      	bmi.n	8005484 <_printf_common+0xb4>
 8005428:	4649      	mov	r1, r9
 800542a:	4638      	mov	r0, r7
 800542c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005430:	47c0      	blx	r8
 8005432:	3001      	adds	r0, #1
 8005434:	d020      	beq.n	8005478 <_printf_common+0xa8>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	68e5      	ldr	r5, [r4, #12]
 800543a:	f003 0306 	and.w	r3, r3, #6
 800543e:	2b04      	cmp	r3, #4
 8005440:	bf18      	it	ne
 8005442:	2500      	movne	r5, #0
 8005444:	6832      	ldr	r2, [r6, #0]
 8005446:	f04f 0600 	mov.w	r6, #0
 800544a:	68a3      	ldr	r3, [r4, #8]
 800544c:	bf08      	it	eq
 800544e:	1aad      	subeq	r5, r5, r2
 8005450:	6922      	ldr	r2, [r4, #16]
 8005452:	bf08      	it	eq
 8005454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005458:	4293      	cmp	r3, r2
 800545a:	bfc4      	itt	gt
 800545c:	1a9b      	subgt	r3, r3, r2
 800545e:	18ed      	addgt	r5, r5, r3
 8005460:	341a      	adds	r4, #26
 8005462:	42b5      	cmp	r5, r6
 8005464:	d11a      	bne.n	800549c <_printf_common+0xcc>
 8005466:	2000      	movs	r0, #0
 8005468:	e008      	b.n	800547c <_printf_common+0xac>
 800546a:	2301      	movs	r3, #1
 800546c:	4652      	mov	r2, sl
 800546e:	4649      	mov	r1, r9
 8005470:	4638      	mov	r0, r7
 8005472:	47c0      	blx	r8
 8005474:	3001      	adds	r0, #1
 8005476:	d103      	bne.n	8005480 <_printf_common+0xb0>
 8005478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005480:	3501      	adds	r5, #1
 8005482:	e7c4      	b.n	800540e <_printf_common+0x3e>
 8005484:	2030      	movs	r0, #48	; 0x30
 8005486:	18e1      	adds	r1, r4, r3
 8005488:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005492:	4422      	add	r2, r4
 8005494:	3302      	adds	r3, #2
 8005496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800549a:	e7c5      	b.n	8005428 <_printf_common+0x58>
 800549c:	2301      	movs	r3, #1
 800549e:	4622      	mov	r2, r4
 80054a0:	4649      	mov	r1, r9
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c0      	blx	r8
 80054a6:	3001      	adds	r0, #1
 80054a8:	d0e6      	beq.n	8005478 <_printf_common+0xa8>
 80054aa:	3601      	adds	r6, #1
 80054ac:	e7d9      	b.n	8005462 <_printf_common+0x92>
	...

080054b0 <_printf_i>:
 80054b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	7e0f      	ldrb	r7, [r1, #24]
 80054b6:	4691      	mov	r9, r2
 80054b8:	2f78      	cmp	r7, #120	; 0x78
 80054ba:	4680      	mov	r8, r0
 80054bc:	460c      	mov	r4, r1
 80054be:	469a      	mov	sl, r3
 80054c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054c6:	d807      	bhi.n	80054d8 <_printf_i+0x28>
 80054c8:	2f62      	cmp	r7, #98	; 0x62
 80054ca:	d80a      	bhi.n	80054e2 <_printf_i+0x32>
 80054cc:	2f00      	cmp	r7, #0
 80054ce:	f000 80d9 	beq.w	8005684 <_printf_i+0x1d4>
 80054d2:	2f58      	cmp	r7, #88	; 0x58
 80054d4:	f000 80a4 	beq.w	8005620 <_printf_i+0x170>
 80054d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054e0:	e03a      	b.n	8005558 <_printf_i+0xa8>
 80054e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054e6:	2b15      	cmp	r3, #21
 80054e8:	d8f6      	bhi.n	80054d8 <_printf_i+0x28>
 80054ea:	a101      	add	r1, pc, #4	; (adr r1, 80054f0 <_printf_i+0x40>)
 80054ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054f0:	08005549 	.word	0x08005549
 80054f4:	0800555d 	.word	0x0800555d
 80054f8:	080054d9 	.word	0x080054d9
 80054fc:	080054d9 	.word	0x080054d9
 8005500:	080054d9 	.word	0x080054d9
 8005504:	080054d9 	.word	0x080054d9
 8005508:	0800555d 	.word	0x0800555d
 800550c:	080054d9 	.word	0x080054d9
 8005510:	080054d9 	.word	0x080054d9
 8005514:	080054d9 	.word	0x080054d9
 8005518:	080054d9 	.word	0x080054d9
 800551c:	0800566b 	.word	0x0800566b
 8005520:	0800558d 	.word	0x0800558d
 8005524:	0800564d 	.word	0x0800564d
 8005528:	080054d9 	.word	0x080054d9
 800552c:	080054d9 	.word	0x080054d9
 8005530:	0800568d 	.word	0x0800568d
 8005534:	080054d9 	.word	0x080054d9
 8005538:	0800558d 	.word	0x0800558d
 800553c:	080054d9 	.word	0x080054d9
 8005540:	080054d9 	.word	0x080054d9
 8005544:	08005655 	.word	0x08005655
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	1d1a      	adds	r2, r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	602a      	str	r2, [r5, #0]
 8005550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005558:	2301      	movs	r3, #1
 800555a:	e0a4      	b.n	80056a6 <_printf_i+0x1f6>
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	6829      	ldr	r1, [r5, #0]
 8005560:	0606      	lsls	r6, r0, #24
 8005562:	f101 0304 	add.w	r3, r1, #4
 8005566:	d50a      	bpl.n	800557e <_printf_i+0xce>
 8005568:	680e      	ldr	r6, [r1, #0]
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	2e00      	cmp	r6, #0
 800556e:	da03      	bge.n	8005578 <_printf_i+0xc8>
 8005570:	232d      	movs	r3, #45	; 0x2d
 8005572:	4276      	negs	r6, r6
 8005574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005578:	230a      	movs	r3, #10
 800557a:	485e      	ldr	r0, [pc, #376]	; (80056f4 <_printf_i+0x244>)
 800557c:	e019      	b.n	80055b2 <_printf_i+0x102>
 800557e:	680e      	ldr	r6, [r1, #0]
 8005580:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	bf18      	it	ne
 8005588:	b236      	sxthne	r6, r6
 800558a:	e7ef      	b.n	800556c <_printf_i+0xbc>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	6820      	ldr	r0, [r4, #0]
 8005590:	1d19      	adds	r1, r3, #4
 8005592:	6029      	str	r1, [r5, #0]
 8005594:	0601      	lsls	r1, r0, #24
 8005596:	d501      	bpl.n	800559c <_printf_i+0xec>
 8005598:	681e      	ldr	r6, [r3, #0]
 800559a:	e002      	b.n	80055a2 <_printf_i+0xf2>
 800559c:	0646      	lsls	r6, r0, #25
 800559e:	d5fb      	bpl.n	8005598 <_printf_i+0xe8>
 80055a0:	881e      	ldrh	r6, [r3, #0]
 80055a2:	2f6f      	cmp	r7, #111	; 0x6f
 80055a4:	bf0c      	ite	eq
 80055a6:	2308      	moveq	r3, #8
 80055a8:	230a      	movne	r3, #10
 80055aa:	4852      	ldr	r0, [pc, #328]	; (80056f4 <_printf_i+0x244>)
 80055ac:	2100      	movs	r1, #0
 80055ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055b2:	6865      	ldr	r5, [r4, #4]
 80055b4:	2d00      	cmp	r5, #0
 80055b6:	bfa8      	it	ge
 80055b8:	6821      	ldrge	r1, [r4, #0]
 80055ba:	60a5      	str	r5, [r4, #8]
 80055bc:	bfa4      	itt	ge
 80055be:	f021 0104 	bicge.w	r1, r1, #4
 80055c2:	6021      	strge	r1, [r4, #0]
 80055c4:	b90e      	cbnz	r6, 80055ca <_printf_i+0x11a>
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	d04d      	beq.n	8005666 <_printf_i+0x1b6>
 80055ca:	4615      	mov	r5, r2
 80055cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80055d0:	fb03 6711 	mls	r7, r3, r1, r6
 80055d4:	5dc7      	ldrb	r7, [r0, r7]
 80055d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055da:	4637      	mov	r7, r6
 80055dc:	42bb      	cmp	r3, r7
 80055de:	460e      	mov	r6, r1
 80055e0:	d9f4      	bls.n	80055cc <_printf_i+0x11c>
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d10b      	bne.n	80055fe <_printf_i+0x14e>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	07de      	lsls	r6, r3, #31
 80055ea:	d508      	bpl.n	80055fe <_printf_i+0x14e>
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	6861      	ldr	r1, [r4, #4]
 80055f0:	4299      	cmp	r1, r3
 80055f2:	bfde      	ittt	le
 80055f4:	2330      	movle	r3, #48	; 0x30
 80055f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80055fe:	1b52      	subs	r2, r2, r5
 8005600:	6122      	str	r2, [r4, #16]
 8005602:	464b      	mov	r3, r9
 8005604:	4621      	mov	r1, r4
 8005606:	4640      	mov	r0, r8
 8005608:	f8cd a000 	str.w	sl, [sp]
 800560c:	aa03      	add	r2, sp, #12
 800560e:	f7ff fedf 	bl	80053d0 <_printf_common>
 8005612:	3001      	adds	r0, #1
 8005614:	d14c      	bne.n	80056b0 <_printf_i+0x200>
 8005616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800561a:	b004      	add	sp, #16
 800561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005620:	4834      	ldr	r0, [pc, #208]	; (80056f4 <_printf_i+0x244>)
 8005622:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005626:	6829      	ldr	r1, [r5, #0]
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	f851 6b04 	ldr.w	r6, [r1], #4
 800562e:	6029      	str	r1, [r5, #0]
 8005630:	061d      	lsls	r5, r3, #24
 8005632:	d514      	bpl.n	800565e <_printf_i+0x1ae>
 8005634:	07df      	lsls	r7, r3, #31
 8005636:	bf44      	itt	mi
 8005638:	f043 0320 	orrmi.w	r3, r3, #32
 800563c:	6023      	strmi	r3, [r4, #0]
 800563e:	b91e      	cbnz	r6, 8005648 <_printf_i+0x198>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	f023 0320 	bic.w	r3, r3, #32
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	2310      	movs	r3, #16
 800564a:	e7af      	b.n	80055ac <_printf_i+0xfc>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	f043 0320 	orr.w	r3, r3, #32
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	2378      	movs	r3, #120	; 0x78
 8005656:	4828      	ldr	r0, [pc, #160]	; (80056f8 <_printf_i+0x248>)
 8005658:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800565c:	e7e3      	b.n	8005626 <_printf_i+0x176>
 800565e:	0659      	lsls	r1, r3, #25
 8005660:	bf48      	it	mi
 8005662:	b2b6      	uxthmi	r6, r6
 8005664:	e7e6      	b.n	8005634 <_printf_i+0x184>
 8005666:	4615      	mov	r5, r2
 8005668:	e7bb      	b.n	80055e2 <_printf_i+0x132>
 800566a:	682b      	ldr	r3, [r5, #0]
 800566c:	6826      	ldr	r6, [r4, #0]
 800566e:	1d18      	adds	r0, r3, #4
 8005670:	6961      	ldr	r1, [r4, #20]
 8005672:	6028      	str	r0, [r5, #0]
 8005674:	0635      	lsls	r5, r6, #24
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	d501      	bpl.n	800567e <_printf_i+0x1ce>
 800567a:	6019      	str	r1, [r3, #0]
 800567c:	e002      	b.n	8005684 <_printf_i+0x1d4>
 800567e:	0670      	lsls	r0, r6, #25
 8005680:	d5fb      	bpl.n	800567a <_printf_i+0x1ca>
 8005682:	8019      	strh	r1, [r3, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	4615      	mov	r5, r2
 8005688:	6123      	str	r3, [r4, #16]
 800568a:	e7ba      	b.n	8005602 <_printf_i+0x152>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	2100      	movs	r1, #0
 8005690:	1d1a      	adds	r2, r3, #4
 8005692:	602a      	str	r2, [r5, #0]
 8005694:	681d      	ldr	r5, [r3, #0]
 8005696:	6862      	ldr	r2, [r4, #4]
 8005698:	4628      	mov	r0, r5
 800569a:	f000 f9a3 	bl	80059e4 <memchr>
 800569e:	b108      	cbz	r0, 80056a4 <_printf_i+0x1f4>
 80056a0:	1b40      	subs	r0, r0, r5
 80056a2:	6060      	str	r0, [r4, #4]
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	6123      	str	r3, [r4, #16]
 80056a8:	2300      	movs	r3, #0
 80056aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ae:	e7a8      	b.n	8005602 <_printf_i+0x152>
 80056b0:	462a      	mov	r2, r5
 80056b2:	4649      	mov	r1, r9
 80056b4:	4640      	mov	r0, r8
 80056b6:	6923      	ldr	r3, [r4, #16]
 80056b8:	47d0      	blx	sl
 80056ba:	3001      	adds	r0, #1
 80056bc:	d0ab      	beq.n	8005616 <_printf_i+0x166>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	079b      	lsls	r3, r3, #30
 80056c2:	d413      	bmi.n	80056ec <_printf_i+0x23c>
 80056c4:	68e0      	ldr	r0, [r4, #12]
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	4298      	cmp	r0, r3
 80056ca:	bfb8      	it	lt
 80056cc:	4618      	movlt	r0, r3
 80056ce:	e7a4      	b.n	800561a <_printf_i+0x16a>
 80056d0:	2301      	movs	r3, #1
 80056d2:	4632      	mov	r2, r6
 80056d4:	4649      	mov	r1, r9
 80056d6:	4640      	mov	r0, r8
 80056d8:	47d0      	blx	sl
 80056da:	3001      	adds	r0, #1
 80056dc:	d09b      	beq.n	8005616 <_printf_i+0x166>
 80056de:	3501      	adds	r5, #1
 80056e0:	68e3      	ldr	r3, [r4, #12]
 80056e2:	9903      	ldr	r1, [sp, #12]
 80056e4:	1a5b      	subs	r3, r3, r1
 80056e6:	42ab      	cmp	r3, r5
 80056e8:	dcf2      	bgt.n	80056d0 <_printf_i+0x220>
 80056ea:	e7eb      	b.n	80056c4 <_printf_i+0x214>
 80056ec:	2500      	movs	r5, #0
 80056ee:	f104 0619 	add.w	r6, r4, #25
 80056f2:	e7f5      	b.n	80056e0 <_printf_i+0x230>
 80056f4:	0800666d 	.word	0x0800666d
 80056f8:	0800667e 	.word	0x0800667e

080056fc <siscanf>:
 80056fc:	b40e      	push	{r1, r2, r3}
 80056fe:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005702:	b530      	push	{r4, r5, lr}
 8005704:	b09c      	sub	sp, #112	; 0x70
 8005706:	ac1f      	add	r4, sp, #124	; 0x7c
 8005708:	f854 5b04 	ldr.w	r5, [r4], #4
 800570c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005710:	9002      	str	r0, [sp, #8]
 8005712:	9006      	str	r0, [sp, #24]
 8005714:	f7fa fd1a 	bl	800014c <strlen>
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <siscanf+0x4c>)
 800571a:	9003      	str	r0, [sp, #12]
 800571c:	930b      	str	r3, [sp, #44]	; 0x2c
 800571e:	2300      	movs	r3, #0
 8005720:	930f      	str	r3, [sp, #60]	; 0x3c
 8005722:	9314      	str	r3, [sp, #80]	; 0x50
 8005724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005728:	9007      	str	r0, [sp, #28]
 800572a:	4808      	ldr	r0, [pc, #32]	; (800574c <siscanf+0x50>)
 800572c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005730:	462a      	mov	r2, r5
 8005732:	4623      	mov	r3, r4
 8005734:	a902      	add	r1, sp, #8
 8005736:	6800      	ldr	r0, [r0, #0]
 8005738:	9401      	str	r4, [sp, #4]
 800573a:	f000 f9f9 	bl	8005b30 <__ssvfiscanf_r>
 800573e:	b01c      	add	sp, #112	; 0x70
 8005740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005744:	b003      	add	sp, #12
 8005746:	4770      	bx	lr
 8005748:	08005773 	.word	0x08005773
 800574c:	200001a0 	.word	0x200001a0

08005750 <__sread>:
 8005750:	b510      	push	{r4, lr}
 8005752:	460c      	mov	r4, r1
 8005754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005758:	f000 fcb6 	bl	80060c8 <_read_r>
 800575c:	2800      	cmp	r0, #0
 800575e:	bfab      	itete	ge
 8005760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005762:	89a3      	ldrhlt	r3, [r4, #12]
 8005764:	181b      	addge	r3, r3, r0
 8005766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800576a:	bfac      	ite	ge
 800576c:	6563      	strge	r3, [r4, #84]	; 0x54
 800576e:	81a3      	strhlt	r3, [r4, #12]
 8005770:	bd10      	pop	{r4, pc}

08005772 <__seofread>:
 8005772:	2000      	movs	r0, #0
 8005774:	4770      	bx	lr

08005776 <__swrite>:
 8005776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577a:	461f      	mov	r7, r3
 800577c:	898b      	ldrh	r3, [r1, #12]
 800577e:	4605      	mov	r5, r0
 8005780:	05db      	lsls	r3, r3, #23
 8005782:	460c      	mov	r4, r1
 8005784:	4616      	mov	r6, r2
 8005786:	d505      	bpl.n	8005794 <__swrite+0x1e>
 8005788:	2302      	movs	r3, #2
 800578a:	2200      	movs	r2, #0
 800578c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005790:	f000 f916 	bl	80059c0 <_lseek_r>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	4632      	mov	r2, r6
 8005798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800579c:	81a3      	strh	r3, [r4, #12]
 800579e:	4628      	mov	r0, r5
 80057a0:	463b      	mov	r3, r7
 80057a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057aa:	f000 b8b1 	b.w	8005910 <_write_r>

080057ae <__sseek>:
 80057ae:	b510      	push	{r4, lr}
 80057b0:	460c      	mov	r4, r1
 80057b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b6:	f000 f903 	bl	80059c0 <_lseek_r>
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	bf15      	itete	ne
 80057c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ca:	81a3      	strheq	r3, [r4, #12]
 80057cc:	bf18      	it	ne
 80057ce:	81a3      	strhne	r3, [r4, #12]
 80057d0:	bd10      	pop	{r4, pc}

080057d2 <__sclose>:
 80057d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d6:	f000 b8b5 	b.w	8005944 <_close_r>

080057da <strcpy>:
 80057da:	4603      	mov	r3, r0
 80057dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057e0:	f803 2b01 	strb.w	r2, [r3], #1
 80057e4:	2a00      	cmp	r2, #0
 80057e6:	d1f9      	bne.n	80057dc <strcpy+0x2>
 80057e8:	4770      	bx	lr

080057ea <strncmp>:
 80057ea:	4603      	mov	r3, r0
 80057ec:	b510      	push	{r4, lr}
 80057ee:	b172      	cbz	r2, 800580e <strncmp+0x24>
 80057f0:	3901      	subs	r1, #1
 80057f2:	1884      	adds	r4, r0, r2
 80057f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80057f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80057fc:	4290      	cmp	r0, r2
 80057fe:	d101      	bne.n	8005804 <strncmp+0x1a>
 8005800:	42a3      	cmp	r3, r4
 8005802:	d101      	bne.n	8005808 <strncmp+0x1e>
 8005804:	1a80      	subs	r0, r0, r2
 8005806:	bd10      	pop	{r4, pc}
 8005808:	2800      	cmp	r0, #0
 800580a:	d1f3      	bne.n	80057f4 <strncmp+0xa>
 800580c:	e7fa      	b.n	8005804 <strncmp+0x1a>
 800580e:	4610      	mov	r0, r2
 8005810:	e7f9      	b.n	8005806 <strncmp+0x1c>
	...

08005814 <_strtoul_l.constprop.0>:
 8005814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005818:	4686      	mov	lr, r0
 800581a:	460d      	mov	r5, r1
 800581c:	4f35      	ldr	r7, [pc, #212]	; (80058f4 <_strtoul_l.constprop.0+0xe0>)
 800581e:	4628      	mov	r0, r5
 8005820:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005824:	5de6      	ldrb	r6, [r4, r7]
 8005826:	f016 0608 	ands.w	r6, r6, #8
 800582a:	d1f8      	bne.n	800581e <_strtoul_l.constprop.0+0xa>
 800582c:	2c2d      	cmp	r4, #45	; 0x2d
 800582e:	d12f      	bne.n	8005890 <_strtoul_l.constprop.0+0x7c>
 8005830:	2601      	movs	r6, #1
 8005832:	782c      	ldrb	r4, [r5, #0]
 8005834:	1c85      	adds	r5, r0, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d057      	beq.n	80058ea <_strtoul_l.constprop.0+0xd6>
 800583a:	2b10      	cmp	r3, #16
 800583c:	d109      	bne.n	8005852 <_strtoul_l.constprop.0+0x3e>
 800583e:	2c30      	cmp	r4, #48	; 0x30
 8005840:	d107      	bne.n	8005852 <_strtoul_l.constprop.0+0x3e>
 8005842:	7828      	ldrb	r0, [r5, #0]
 8005844:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005848:	2858      	cmp	r0, #88	; 0x58
 800584a:	d149      	bne.n	80058e0 <_strtoul_l.constprop.0+0xcc>
 800584c:	2310      	movs	r3, #16
 800584e:	786c      	ldrb	r4, [r5, #1]
 8005850:	3502      	adds	r5, #2
 8005852:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005856:	fbb8 f8f3 	udiv	r8, r8, r3
 800585a:	2700      	movs	r7, #0
 800585c:	fb03 f908 	mul.w	r9, r3, r8
 8005860:	4638      	mov	r0, r7
 8005862:	ea6f 0909 	mvn.w	r9, r9
 8005866:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800586a:	f1bc 0f09 	cmp.w	ip, #9
 800586e:	d814      	bhi.n	800589a <_strtoul_l.constprop.0+0x86>
 8005870:	4664      	mov	r4, ip
 8005872:	42a3      	cmp	r3, r4
 8005874:	dd22      	ble.n	80058bc <_strtoul_l.constprop.0+0xa8>
 8005876:	2f00      	cmp	r7, #0
 8005878:	db1d      	blt.n	80058b6 <_strtoul_l.constprop.0+0xa2>
 800587a:	4580      	cmp	r8, r0
 800587c:	d31b      	bcc.n	80058b6 <_strtoul_l.constprop.0+0xa2>
 800587e:	d101      	bne.n	8005884 <_strtoul_l.constprop.0+0x70>
 8005880:	45a1      	cmp	r9, r4
 8005882:	db18      	blt.n	80058b6 <_strtoul_l.constprop.0+0xa2>
 8005884:	2701      	movs	r7, #1
 8005886:	fb00 4003 	mla	r0, r0, r3, r4
 800588a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800588e:	e7ea      	b.n	8005866 <_strtoul_l.constprop.0+0x52>
 8005890:	2c2b      	cmp	r4, #43	; 0x2b
 8005892:	bf04      	itt	eq
 8005894:	782c      	ldrbeq	r4, [r5, #0]
 8005896:	1c85      	addeq	r5, r0, #2
 8005898:	e7cd      	b.n	8005836 <_strtoul_l.constprop.0+0x22>
 800589a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800589e:	f1bc 0f19 	cmp.w	ip, #25
 80058a2:	d801      	bhi.n	80058a8 <_strtoul_l.constprop.0+0x94>
 80058a4:	3c37      	subs	r4, #55	; 0x37
 80058a6:	e7e4      	b.n	8005872 <_strtoul_l.constprop.0+0x5e>
 80058a8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80058ac:	f1bc 0f19 	cmp.w	ip, #25
 80058b0:	d804      	bhi.n	80058bc <_strtoul_l.constprop.0+0xa8>
 80058b2:	3c57      	subs	r4, #87	; 0x57
 80058b4:	e7dd      	b.n	8005872 <_strtoul_l.constprop.0+0x5e>
 80058b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058ba:	e7e6      	b.n	800588a <_strtoul_l.constprop.0+0x76>
 80058bc:	2f00      	cmp	r7, #0
 80058be:	da07      	bge.n	80058d0 <_strtoul_l.constprop.0+0xbc>
 80058c0:	2322      	movs	r3, #34	; 0x22
 80058c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c6:	f8ce 3000 	str.w	r3, [lr]
 80058ca:	b932      	cbnz	r2, 80058da <_strtoul_l.constprop.0+0xc6>
 80058cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058d0:	b106      	cbz	r6, 80058d4 <_strtoul_l.constprop.0+0xc0>
 80058d2:	4240      	negs	r0, r0
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	d0f9      	beq.n	80058cc <_strtoul_l.constprop.0+0xb8>
 80058d8:	b107      	cbz	r7, 80058dc <_strtoul_l.constprop.0+0xc8>
 80058da:	1e69      	subs	r1, r5, #1
 80058dc:	6011      	str	r1, [r2, #0]
 80058de:	e7f5      	b.n	80058cc <_strtoul_l.constprop.0+0xb8>
 80058e0:	2430      	movs	r4, #48	; 0x30
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1b5      	bne.n	8005852 <_strtoul_l.constprop.0+0x3e>
 80058e6:	2308      	movs	r3, #8
 80058e8:	e7b3      	b.n	8005852 <_strtoul_l.constprop.0+0x3e>
 80058ea:	2c30      	cmp	r4, #48	; 0x30
 80058ec:	d0a9      	beq.n	8005842 <_strtoul_l.constprop.0+0x2e>
 80058ee:	230a      	movs	r3, #10
 80058f0:	e7af      	b.n	8005852 <_strtoul_l.constprop.0+0x3e>
 80058f2:	bf00      	nop
 80058f4:	08006690 	.word	0x08006690

080058f8 <_strtoul_r>:
 80058f8:	f7ff bf8c 	b.w	8005814 <_strtoul_l.constprop.0>

080058fc <strtoul>:
 80058fc:	4613      	mov	r3, r2
 80058fe:	460a      	mov	r2, r1
 8005900:	4601      	mov	r1, r0
 8005902:	4802      	ldr	r0, [pc, #8]	; (800590c <strtoul+0x10>)
 8005904:	6800      	ldr	r0, [r0, #0]
 8005906:	f7ff bf85 	b.w	8005814 <_strtoul_l.constprop.0>
 800590a:	bf00      	nop
 800590c:	200001a0 	.word	0x200001a0

08005910 <_write_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	2200      	movs	r2, #0
 800591a:	4d05      	ldr	r5, [pc, #20]	; (8005930 <_write_r+0x20>)
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fb f9a8 	bl	8000c74 <_write>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_write_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_write_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	2000053c 	.word	0x2000053c

08005934 <abort>:
 8005934:	2006      	movs	r0, #6
 8005936:	b508      	push	{r3, lr}
 8005938:	f000 fc38 	bl	80061ac <raise>
 800593c:	2001      	movs	r0, #1
 800593e:	f7fb fd36 	bl	80013ae <_exit>
	...

08005944 <_close_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	2300      	movs	r3, #0
 8005948:	4d05      	ldr	r5, [pc, #20]	; (8005960 <_close_r+0x1c>)
 800594a:	4604      	mov	r4, r0
 800594c:	4608      	mov	r0, r1
 800594e:	602b      	str	r3, [r5, #0]
 8005950:	f7fb fd54 	bl	80013fc <_close>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d102      	bne.n	800595e <_close_r+0x1a>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	b103      	cbz	r3, 800595e <_close_r+0x1a>
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	2000053c 	.word	0x2000053c

08005964 <__env_lock>:
 8005964:	4801      	ldr	r0, [pc, #4]	; (800596c <__env_lock+0x8>)
 8005966:	f7ff bb67 	b.w	8005038 <__retarget_lock_acquire_recursive>
 800596a:	bf00      	nop
 800596c:	20000534 	.word	0x20000534

08005970 <__env_unlock>:
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__env_unlock+0x8>)
 8005972:	f7ff bb63 	b.w	800503c <__retarget_lock_release_recursive>
 8005976:	bf00      	nop
 8005978:	20000534 	.word	0x20000534

0800597c <_fstat_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	2300      	movs	r3, #0
 8005980:	4d06      	ldr	r5, [pc, #24]	; (800599c <_fstat_r+0x20>)
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	4611      	mov	r1, r2
 8005988:	602b      	str	r3, [r5, #0]
 800598a:	f7fb fd42 	bl	8001412 <_fstat>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	d102      	bne.n	8005998 <_fstat_r+0x1c>
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	b103      	cbz	r3, 8005998 <_fstat_r+0x1c>
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	bd38      	pop	{r3, r4, r5, pc}
 800599a:	bf00      	nop
 800599c:	2000053c 	.word	0x2000053c

080059a0 <_isatty_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	2300      	movs	r3, #0
 80059a4:	4d05      	ldr	r5, [pc, #20]	; (80059bc <_isatty_r+0x1c>)
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	f7fb fd40 	bl	8001430 <_isatty>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_isatty_r+0x1a>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_isatty_r+0x1a>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	2000053c 	.word	0x2000053c

080059c0 <_lseek_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	2200      	movs	r2, #0
 80059ca:	4d05      	ldr	r5, [pc, #20]	; (80059e0 <_lseek_r+0x20>)
 80059cc:	602a      	str	r2, [r5, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f7fb fd38 	bl	8001444 <_lseek>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_lseek_r+0x1e>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_lseek_r+0x1e>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	2000053c 	.word	0x2000053c

080059e4 <memchr>:
 80059e4:	4603      	mov	r3, r0
 80059e6:	b510      	push	{r4, lr}
 80059e8:	b2c9      	uxtb	r1, r1
 80059ea:	4402      	add	r2, r0
 80059ec:	4293      	cmp	r3, r2
 80059ee:	4618      	mov	r0, r3
 80059f0:	d101      	bne.n	80059f6 <memchr+0x12>
 80059f2:	2000      	movs	r0, #0
 80059f4:	e003      	b.n	80059fe <memchr+0x1a>
 80059f6:	7804      	ldrb	r4, [r0, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	428c      	cmp	r4, r1
 80059fc:	d1f6      	bne.n	80059ec <memchr+0x8>
 80059fe:	bd10      	pop	{r4, pc}

08005a00 <memcpy>:
 8005a00:	440a      	add	r2, r1
 8005a02:	4291      	cmp	r1, r2
 8005a04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a08:	d100      	bne.n	8005a0c <memcpy+0xc>
 8005a0a:	4770      	bx	lr
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a12:	4291      	cmp	r1, r2
 8005a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a18:	d1f9      	bne.n	8005a0e <memcpy+0xe>
 8005a1a:	bd10      	pop	{r4, pc}

08005a1c <_realloc_r>:
 8005a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a20:	4680      	mov	r8, r0
 8005a22:	4614      	mov	r4, r2
 8005a24:	460e      	mov	r6, r1
 8005a26:	b921      	cbnz	r1, 8005a32 <_realloc_r+0x16>
 8005a28:	4611      	mov	r1, r2
 8005a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2e:	f7fe bc03 	b.w	8004238 <_malloc_r>
 8005a32:	b92a      	cbnz	r2, 8005a40 <_realloc_r+0x24>
 8005a34:	f7fe fb98 	bl	8004168 <_free_r>
 8005a38:	4625      	mov	r5, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a40:	f000 fc86 	bl	8006350 <_malloc_usable_size_r>
 8005a44:	4284      	cmp	r4, r0
 8005a46:	4607      	mov	r7, r0
 8005a48:	d802      	bhi.n	8005a50 <_realloc_r+0x34>
 8005a4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a4e:	d812      	bhi.n	8005a76 <_realloc_r+0x5a>
 8005a50:	4621      	mov	r1, r4
 8005a52:	4640      	mov	r0, r8
 8005a54:	f7fe fbf0 	bl	8004238 <_malloc_r>
 8005a58:	4605      	mov	r5, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d0ed      	beq.n	8005a3a <_realloc_r+0x1e>
 8005a5e:	42bc      	cmp	r4, r7
 8005a60:	4622      	mov	r2, r4
 8005a62:	4631      	mov	r1, r6
 8005a64:	bf28      	it	cs
 8005a66:	463a      	movcs	r2, r7
 8005a68:	f7ff ffca 	bl	8005a00 <memcpy>
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4640      	mov	r0, r8
 8005a70:	f7fe fb7a 	bl	8004168 <_free_r>
 8005a74:	e7e1      	b.n	8005a3a <_realloc_r+0x1e>
 8005a76:	4635      	mov	r5, r6
 8005a78:	e7df      	b.n	8005a3a <_realloc_r+0x1e>

08005a7a <_sungetc_r>:
 8005a7a:	b538      	push	{r3, r4, r5, lr}
 8005a7c:	1c4b      	adds	r3, r1, #1
 8005a7e:	4614      	mov	r4, r2
 8005a80:	d103      	bne.n	8005a8a <_sungetc_r+0x10>
 8005a82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005a86:	4628      	mov	r0, r5
 8005a88:	bd38      	pop	{r3, r4, r5, pc}
 8005a8a:	8993      	ldrh	r3, [r2, #12]
 8005a8c:	b2cd      	uxtb	r5, r1
 8005a8e:	f023 0320 	bic.w	r3, r3, #32
 8005a92:	8193      	strh	r3, [r2, #12]
 8005a94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a96:	6852      	ldr	r2, [r2, #4]
 8005a98:	b18b      	cbz	r3, 8005abe <_sungetc_r+0x44>
 8005a9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	dd08      	ble.n	8005ab2 <_sungetc_r+0x38>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	1e5a      	subs	r2, r3, #1
 8005aa4:	6022      	str	r2, [r4, #0]
 8005aa6:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005aaa:	6863      	ldr	r3, [r4, #4]
 8005aac:	3301      	adds	r3, #1
 8005aae:	6063      	str	r3, [r4, #4]
 8005ab0:	e7e9      	b.n	8005a86 <_sungetc_r+0xc>
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	f000 fc14 	bl	80062e0 <__submore>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d0f1      	beq.n	8005aa0 <_sungetc_r+0x26>
 8005abc:	e7e1      	b.n	8005a82 <_sungetc_r+0x8>
 8005abe:	6921      	ldr	r1, [r4, #16]
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	b151      	cbz	r1, 8005ada <_sungetc_r+0x60>
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	d208      	bcs.n	8005ada <_sungetc_r+0x60>
 8005ac8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005acc:	42a9      	cmp	r1, r5
 8005ace:	d104      	bne.n	8005ada <_sungetc_r+0x60>
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	3201      	adds	r2, #1
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	6062      	str	r2, [r4, #4]
 8005ad8:	e7d5      	b.n	8005a86 <_sungetc_r+0xc>
 8005ada:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005ade:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	63a3      	str	r3, [r4, #56]	; 0x38
 8005ae8:	4623      	mov	r3, r4
 8005aea:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005aee:	6023      	str	r3, [r4, #0]
 8005af0:	2301      	movs	r3, #1
 8005af2:	e7dc      	b.n	8005aae <_sungetc_r+0x34>

08005af4 <__ssrefill_r>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	460c      	mov	r4, r1
 8005af8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005afa:	b169      	cbz	r1, 8005b18 <__ssrefill_r+0x24>
 8005afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b00:	4299      	cmp	r1, r3
 8005b02:	d001      	beq.n	8005b08 <__ssrefill_r+0x14>
 8005b04:	f7fe fb30 	bl	8004168 <_free_r>
 8005b08:	2000      	movs	r0, #0
 8005b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8005b0e:	6063      	str	r3, [r4, #4]
 8005b10:	b113      	cbz	r3, 8005b18 <__ssrefill_r+0x24>
 8005b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	bd10      	pop	{r4, pc}
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	2300      	movs	r3, #0
 8005b22:	6063      	str	r3, [r4, #4]
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	f043 0320 	orr.w	r3, r3, #32
 8005b2a:	81a3      	strh	r3, [r4, #12]
 8005b2c:	e7f3      	b.n	8005b16 <__ssrefill_r+0x22>
	...

08005b30 <__ssvfiscanf_r>:
 8005b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b34:	460c      	mov	r4, r1
 8005b36:	2100      	movs	r1, #0
 8005b38:	4606      	mov	r6, r0
 8005b3a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005b3e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005b42:	49a7      	ldr	r1, [pc, #668]	; (8005de0 <__ssvfiscanf_r+0x2b0>)
 8005b44:	f10d 0804 	add.w	r8, sp, #4
 8005b48:	91a0      	str	r1, [sp, #640]	; 0x280
 8005b4a:	49a6      	ldr	r1, [pc, #664]	; (8005de4 <__ssvfiscanf_r+0x2b4>)
 8005b4c:	4fa6      	ldr	r7, [pc, #664]	; (8005de8 <__ssvfiscanf_r+0x2b8>)
 8005b4e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8005dec <__ssvfiscanf_r+0x2bc>
 8005b52:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005b56:	91a1      	str	r1, [sp, #644]	; 0x284
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	7813      	ldrb	r3, [r2, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 815c 	beq.w	8005e1a <__ssvfiscanf_r+0x2ea>
 8005b62:	5dd9      	ldrb	r1, [r3, r7]
 8005b64:	1c55      	adds	r5, r2, #1
 8005b66:	f011 0108 	ands.w	r1, r1, #8
 8005b6a:	d019      	beq.n	8005ba0 <__ssvfiscanf_r+0x70>
 8005b6c:	6863      	ldr	r3, [r4, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dd0f      	ble.n	8005b92 <__ssvfiscanf_r+0x62>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	5cba      	ldrb	r2, [r7, r2]
 8005b78:	0712      	lsls	r2, r2, #28
 8005b7a:	d401      	bmi.n	8005b80 <__ssvfiscanf_r+0x50>
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	e7ec      	b.n	8005b5a <__ssvfiscanf_r+0x2a>
 8005b80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b82:	3301      	adds	r3, #1
 8005b84:	3201      	adds	r2, #1
 8005b86:	9245      	str	r2, [sp, #276]	; 0x114
 8005b88:	6862      	ldr	r2, [r4, #4]
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	3a01      	subs	r2, #1
 8005b8e:	6062      	str	r2, [r4, #4]
 8005b90:	e7ec      	b.n	8005b6c <__ssvfiscanf_r+0x3c>
 8005b92:	4621      	mov	r1, r4
 8005b94:	4630      	mov	r0, r6
 8005b96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b98:	4798      	blx	r3
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d0e9      	beq.n	8005b72 <__ssvfiscanf_r+0x42>
 8005b9e:	e7ed      	b.n	8005b7c <__ssvfiscanf_r+0x4c>
 8005ba0:	2b25      	cmp	r3, #37	; 0x25
 8005ba2:	d012      	beq.n	8005bca <__ssvfiscanf_r+0x9a>
 8005ba4:	469a      	mov	sl, r3
 8005ba6:	6863      	ldr	r3, [r4, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f340 8094 	ble.w	8005cd6 <__ssvfiscanf_r+0x1a6>
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	7813      	ldrb	r3, [r2, #0]
 8005bb2:	4553      	cmp	r3, sl
 8005bb4:	f040 8131 	bne.w	8005e1a <__ssvfiscanf_r+0x2ea>
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	3201      	adds	r2, #1
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005bc2:	6022      	str	r2, [r4, #0]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	9345      	str	r3, [sp, #276]	; 0x114
 8005bc8:	e7d8      	b.n	8005b7c <__ssvfiscanf_r+0x4c>
 8005bca:	9141      	str	r1, [sp, #260]	; 0x104
 8005bcc:	9143      	str	r1, [sp, #268]	; 0x10c
 8005bce:	7853      	ldrb	r3, [r2, #1]
 8005bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd2:	bf04      	itt	eq
 8005bd4:	2310      	moveq	r3, #16
 8005bd6:	1c95      	addeq	r5, r2, #2
 8005bd8:	f04f 020a 	mov.w	r2, #10
 8005bdc:	bf08      	it	eq
 8005bde:	9341      	streq	r3, [sp, #260]	; 0x104
 8005be0:	46aa      	mov	sl, r5
 8005be2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005be6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005bea:	2b09      	cmp	r3, #9
 8005bec:	d91d      	bls.n	8005c2a <__ssvfiscanf_r+0xfa>
 8005bee:	2203      	movs	r2, #3
 8005bf0:	487e      	ldr	r0, [pc, #504]	; (8005dec <__ssvfiscanf_r+0x2bc>)
 8005bf2:	f7ff fef7 	bl	80059e4 <memchr>
 8005bf6:	b140      	cbz	r0, 8005c0a <__ssvfiscanf_r+0xda>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4655      	mov	r5, sl
 8005bfc:	eba0 0009 	sub.w	r0, r0, r9
 8005c00:	fa03 f000 	lsl.w	r0, r3, r0
 8005c04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c06:	4318      	orrs	r0, r3
 8005c08:	9041      	str	r0, [sp, #260]	; 0x104
 8005c0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c0e:	2b78      	cmp	r3, #120	; 0x78
 8005c10:	d806      	bhi.n	8005c20 <__ssvfiscanf_r+0xf0>
 8005c12:	2b57      	cmp	r3, #87	; 0x57
 8005c14:	d810      	bhi.n	8005c38 <__ssvfiscanf_r+0x108>
 8005c16:	2b25      	cmp	r3, #37	; 0x25
 8005c18:	d0c4      	beq.n	8005ba4 <__ssvfiscanf_r+0x74>
 8005c1a:	d857      	bhi.n	8005ccc <__ssvfiscanf_r+0x19c>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d065      	beq.n	8005cec <__ssvfiscanf_r+0x1bc>
 8005c20:	2303      	movs	r3, #3
 8005c22:	9347      	str	r3, [sp, #284]	; 0x11c
 8005c24:	230a      	movs	r3, #10
 8005c26:	9342      	str	r3, [sp, #264]	; 0x108
 8005c28:	e072      	b.n	8005d10 <__ssvfiscanf_r+0x1e0>
 8005c2a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005c2c:	4655      	mov	r5, sl
 8005c2e:	fb02 1103 	mla	r1, r2, r3, r1
 8005c32:	3930      	subs	r1, #48	; 0x30
 8005c34:	9143      	str	r1, [sp, #268]	; 0x10c
 8005c36:	e7d3      	b.n	8005be0 <__ssvfiscanf_r+0xb0>
 8005c38:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005c3c:	2a20      	cmp	r2, #32
 8005c3e:	d8ef      	bhi.n	8005c20 <__ssvfiscanf_r+0xf0>
 8005c40:	a101      	add	r1, pc, #4	; (adr r1, 8005c48 <__ssvfiscanf_r+0x118>)
 8005c42:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005cfb 	.word	0x08005cfb
 8005c4c:	08005c21 	.word	0x08005c21
 8005c50:	08005c21 	.word	0x08005c21
 8005c54:	08005d59 	.word	0x08005d59
 8005c58:	08005c21 	.word	0x08005c21
 8005c5c:	08005c21 	.word	0x08005c21
 8005c60:	08005c21 	.word	0x08005c21
 8005c64:	08005c21 	.word	0x08005c21
 8005c68:	08005c21 	.word	0x08005c21
 8005c6c:	08005c21 	.word	0x08005c21
 8005c70:	08005c21 	.word	0x08005c21
 8005c74:	08005d6f 	.word	0x08005d6f
 8005c78:	08005d45 	.word	0x08005d45
 8005c7c:	08005cd3 	.word	0x08005cd3
 8005c80:	08005cd3 	.word	0x08005cd3
 8005c84:	08005cd3 	.word	0x08005cd3
 8005c88:	08005c21 	.word	0x08005c21
 8005c8c:	08005d49 	.word	0x08005d49
 8005c90:	08005c21 	.word	0x08005c21
 8005c94:	08005c21 	.word	0x08005c21
 8005c98:	08005c21 	.word	0x08005c21
 8005c9c:	08005c21 	.word	0x08005c21
 8005ca0:	08005d7f 	.word	0x08005d7f
 8005ca4:	08005d51 	.word	0x08005d51
 8005ca8:	08005cf3 	.word	0x08005cf3
 8005cac:	08005c21 	.word	0x08005c21
 8005cb0:	08005c21 	.word	0x08005c21
 8005cb4:	08005d7b 	.word	0x08005d7b
 8005cb8:	08005c21 	.word	0x08005c21
 8005cbc:	08005d45 	.word	0x08005d45
 8005cc0:	08005c21 	.word	0x08005c21
 8005cc4:	08005c21 	.word	0x08005c21
 8005cc8:	08005cfb 	.word	0x08005cfb
 8005ccc:	3b45      	subs	r3, #69	; 0x45
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d8a6      	bhi.n	8005c20 <__ssvfiscanf_r+0xf0>
 8005cd2:	2305      	movs	r3, #5
 8005cd4:	e01b      	b.n	8005d0e <__ssvfiscanf_r+0x1de>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4630      	mov	r0, r6
 8005cda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005cdc:	4798      	blx	r3
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f43f af65 	beq.w	8005bae <__ssvfiscanf_r+0x7e>
 8005ce4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f040 808d 	bne.w	8005e06 <__ssvfiscanf_r+0x2d6>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf0:	e08f      	b.n	8005e12 <__ssvfiscanf_r+0x2e2>
 8005cf2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005cf4:	f042 0220 	orr.w	r2, r2, #32
 8005cf8:	9241      	str	r2, [sp, #260]	; 0x104
 8005cfa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d00:	9241      	str	r2, [sp, #260]	; 0x104
 8005d02:	2210      	movs	r2, #16
 8005d04:	2b6f      	cmp	r3, #111	; 0x6f
 8005d06:	bf34      	ite	cc
 8005d08:	2303      	movcc	r3, #3
 8005d0a:	2304      	movcs	r3, #4
 8005d0c:	9242      	str	r2, [sp, #264]	; 0x108
 8005d0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005d10:	6863      	ldr	r3, [r4, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	dd42      	ble.n	8005d9c <__ssvfiscanf_r+0x26c>
 8005d16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d18:	0659      	lsls	r1, r3, #25
 8005d1a:	d404      	bmi.n	8005d26 <__ssvfiscanf_r+0x1f6>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	5cba      	ldrb	r2, [r7, r2]
 8005d22:	0712      	lsls	r2, r2, #28
 8005d24:	d441      	bmi.n	8005daa <__ssvfiscanf_r+0x27a>
 8005d26:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	dc50      	bgt.n	8005dce <__ssvfiscanf_r+0x29e>
 8005d2c:	466b      	mov	r3, sp
 8005d2e:	4622      	mov	r2, r4
 8005d30:	4630      	mov	r0, r6
 8005d32:	a941      	add	r1, sp, #260	; 0x104
 8005d34:	f000 f876 	bl	8005e24 <_scanf_chars>
 8005d38:	2801      	cmp	r0, #1
 8005d3a:	d06e      	beq.n	8005e1a <__ssvfiscanf_r+0x2ea>
 8005d3c:	2802      	cmp	r0, #2
 8005d3e:	f47f af1d 	bne.w	8005b7c <__ssvfiscanf_r+0x4c>
 8005d42:	e7cf      	b.n	8005ce4 <__ssvfiscanf_r+0x1b4>
 8005d44:	220a      	movs	r2, #10
 8005d46:	e7dd      	b.n	8005d04 <__ssvfiscanf_r+0x1d4>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9342      	str	r3, [sp, #264]	; 0x108
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e7de      	b.n	8005d0e <__ssvfiscanf_r+0x1de>
 8005d50:	2308      	movs	r3, #8
 8005d52:	9342      	str	r3, [sp, #264]	; 0x108
 8005d54:	2304      	movs	r3, #4
 8005d56:	e7da      	b.n	8005d0e <__ssvfiscanf_r+0x1de>
 8005d58:	4629      	mov	r1, r5
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f000 f9c6 	bl	80060ec <__sccl>
 8005d60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d62:	4605      	mov	r5, r0
 8005d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d68:	9341      	str	r3, [sp, #260]	; 0x104
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7cf      	b.n	8005d0e <__ssvfiscanf_r+0x1de>
 8005d6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d74:	9341      	str	r3, [sp, #260]	; 0x104
 8005d76:	2300      	movs	r3, #0
 8005d78:	e7c9      	b.n	8005d0e <__ssvfiscanf_r+0x1de>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e7c7      	b.n	8005d0e <__ssvfiscanf_r+0x1de>
 8005d7e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005d80:	06c3      	lsls	r3, r0, #27
 8005d82:	f53f aefb 	bmi.w	8005b7c <__ssvfiscanf_r+0x4c>
 8005d86:	9b00      	ldr	r3, [sp, #0]
 8005d88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d8a:	1d19      	adds	r1, r3, #4
 8005d8c:	9100      	str	r1, [sp, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f010 0f01 	tst.w	r0, #1
 8005d94:	bf14      	ite	ne
 8005d96:	801a      	strhne	r2, [r3, #0]
 8005d98:	601a      	streq	r2, [r3, #0]
 8005d9a:	e6ef      	b.n	8005b7c <__ssvfiscanf_r+0x4c>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4630      	mov	r0, r6
 8005da0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005da2:	4798      	blx	r3
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d0b6      	beq.n	8005d16 <__ssvfiscanf_r+0x1e6>
 8005da8:	e79c      	b.n	8005ce4 <__ssvfiscanf_r+0x1b4>
 8005daa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005dac:	3201      	adds	r2, #1
 8005dae:	9245      	str	r2, [sp, #276]	; 0x114
 8005db0:	6862      	ldr	r2, [r4, #4]
 8005db2:	3a01      	subs	r2, #1
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	6062      	str	r2, [r4, #4]
 8005db8:	dd02      	ble.n	8005dc0 <__ssvfiscanf_r+0x290>
 8005dba:	3301      	adds	r3, #1
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	e7ad      	b.n	8005d1c <__ssvfiscanf_r+0x1ec>
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005dc6:	4798      	blx	r3
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d0a7      	beq.n	8005d1c <__ssvfiscanf_r+0x1ec>
 8005dcc:	e78a      	b.n	8005ce4 <__ssvfiscanf_r+0x1b4>
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	dc0e      	bgt.n	8005df0 <__ssvfiscanf_r+0x2c0>
 8005dd2:	466b      	mov	r3, sp
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	a941      	add	r1, sp, #260	; 0x104
 8005dda:	f000 f87d 	bl	8005ed8 <_scanf_i>
 8005dde:	e7ab      	b.n	8005d38 <__ssvfiscanf_r+0x208>
 8005de0:	08005a7b 	.word	0x08005a7b
 8005de4:	08005af5 	.word	0x08005af5
 8005de8:	08006690 	.word	0x08006690
 8005dec:	08006662 	.word	0x08006662
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <__ssvfiscanf_r+0x2f0>)
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f43f aec2 	beq.w	8005b7c <__ssvfiscanf_r+0x4c>
 8005df8:	466b      	mov	r3, sp
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	a941      	add	r1, sp, #260	; 0x104
 8005e00:	f3af 8000 	nop.w
 8005e04:	e798      	b.n	8005d38 <__ssvfiscanf_r+0x208>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e0c:	bf18      	it	ne
 8005e0e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005e12:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005e1c:	e7f9      	b.n	8005e12 <__ssvfiscanf_r+0x2e2>
 8005e1e:	bf00      	nop
 8005e20:	00000000 	.word	0x00000000

08005e24 <_scanf_chars>:
 8005e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e28:	4615      	mov	r5, r2
 8005e2a:	688a      	ldr	r2, [r1, #8]
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	b932      	cbnz	r2, 8005e40 <_scanf_chars+0x1c>
 8005e32:	698a      	ldr	r2, [r1, #24]
 8005e34:	2a00      	cmp	r2, #0
 8005e36:	bf0c      	ite	eq
 8005e38:	2201      	moveq	r2, #1
 8005e3a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8005e3e:	608a      	str	r2, [r1, #8]
 8005e40:	2700      	movs	r7, #0
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005ed4 <_scanf_chars+0xb0>
 8005e48:	06d1      	lsls	r1, r2, #27
 8005e4a:	bf5f      	itttt	pl
 8005e4c:	681a      	ldrpl	r2, [r3, #0]
 8005e4e:	1d11      	addpl	r1, r2, #4
 8005e50:	6019      	strpl	r1, [r3, #0]
 8005e52:	6816      	ldrpl	r6, [r2, #0]
 8005e54:	69a0      	ldr	r0, [r4, #24]
 8005e56:	b188      	cbz	r0, 8005e7c <_scanf_chars+0x58>
 8005e58:	2801      	cmp	r0, #1
 8005e5a:	d107      	bne.n	8005e6c <_scanf_chars+0x48>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	781a      	ldrb	r2, [r3, #0]
 8005e60:	6963      	ldr	r3, [r4, #20]
 8005e62:	5c9b      	ldrb	r3, [r3, r2]
 8005e64:	b953      	cbnz	r3, 8005e7c <_scanf_chars+0x58>
 8005e66:	2f00      	cmp	r7, #0
 8005e68:	d031      	beq.n	8005ece <_scanf_chars+0xaa>
 8005e6a:	e022      	b.n	8005eb2 <_scanf_chars+0x8e>
 8005e6c:	2802      	cmp	r0, #2
 8005e6e:	d120      	bne.n	8005eb2 <_scanf_chars+0x8e>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005e78:	071b      	lsls	r3, r3, #28
 8005e7a:	d41a      	bmi.n	8005eb2 <_scanf_chars+0x8e>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	3701      	adds	r7, #1
 8005e80:	06da      	lsls	r2, r3, #27
 8005e82:	bf5e      	ittt	pl
 8005e84:	682b      	ldrpl	r3, [r5, #0]
 8005e86:	781b      	ldrbpl	r3, [r3, #0]
 8005e88:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005e8c:	682a      	ldr	r2, [r5, #0]
 8005e8e:	686b      	ldr	r3, [r5, #4]
 8005e90:	3201      	adds	r2, #1
 8005e92:	602a      	str	r2, [r5, #0]
 8005e94:	68a2      	ldr	r2, [r4, #8]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	3a01      	subs	r2, #1
 8005e9a:	606b      	str	r3, [r5, #4]
 8005e9c:	60a2      	str	r2, [r4, #8]
 8005e9e:	b142      	cbz	r2, 8005eb2 <_scanf_chars+0x8e>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dcd7      	bgt.n	8005e54 <_scanf_chars+0x30>
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005eac:	4798      	blx	r3
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d0d0      	beq.n	8005e54 <_scanf_chars+0x30>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f013 0310 	ands.w	r3, r3, #16
 8005eb8:	d105      	bne.n	8005ec6 <_scanf_chars+0xa2>
 8005eba:	68e2      	ldr	r2, [r4, #12]
 8005ebc:	3201      	adds	r2, #1
 8005ebe:	60e2      	str	r2, [r4, #12]
 8005ec0:	69a2      	ldr	r2, [r4, #24]
 8005ec2:	b102      	cbz	r2, 8005ec6 <_scanf_chars+0xa2>
 8005ec4:	7033      	strb	r3, [r6, #0]
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	443b      	add	r3, r7
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed2:	bf00      	nop
 8005ed4:	08006690 	.word	0x08006690

08005ed8 <_scanf_i>:
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	460c      	mov	r4, r1
 8005ede:	4698      	mov	r8, r3
 8005ee0:	4b75      	ldr	r3, [pc, #468]	; (80060b8 <_scanf_i+0x1e0>)
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	4616      	mov	r6, r2
 8005ee8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005eec:	ab03      	add	r3, sp, #12
 8005eee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ef2:	4b72      	ldr	r3, [pc, #456]	; (80060bc <_scanf_i+0x1e4>)
 8005ef4:	69a1      	ldr	r1, [r4, #24]
 8005ef6:	4a72      	ldr	r2, [pc, #456]	; (80060c0 <_scanf_i+0x1e8>)
 8005ef8:	4627      	mov	r7, r4
 8005efa:	2903      	cmp	r1, #3
 8005efc:	bf18      	it	ne
 8005efe:	461a      	movne	r2, r3
 8005f00:	68a3      	ldr	r3, [r4, #8]
 8005f02:	9201      	str	r2, [sp, #4]
 8005f04:	1e5a      	subs	r2, r3, #1
 8005f06:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f0a:	bf81      	itttt	hi
 8005f0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f10:	eb03 0905 	addhi.w	r9, r3, r5
 8005f14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f18:	60a3      	strhi	r3, [r4, #8]
 8005f1a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005f1e:	bf98      	it	ls
 8005f20:	f04f 0900 	movls.w	r9, #0
 8005f24:	463d      	mov	r5, r7
 8005f26:	f04f 0b00 	mov.w	fp, #0
 8005f2a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	6831      	ldr	r1, [r6, #0]
 8005f32:	ab03      	add	r3, sp, #12
 8005f34:	2202      	movs	r2, #2
 8005f36:	7809      	ldrb	r1, [r1, #0]
 8005f38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005f3c:	f7ff fd52 	bl	80059e4 <memchr>
 8005f40:	b328      	cbz	r0, 8005f8e <_scanf_i+0xb6>
 8005f42:	f1bb 0f01 	cmp.w	fp, #1
 8005f46:	d159      	bne.n	8005ffc <_scanf_i+0x124>
 8005f48:	6862      	ldr	r2, [r4, #4]
 8005f4a:	b92a      	cbnz	r2, 8005f58 <_scanf_i+0x80>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f56:	6022      	str	r2, [r4, #0]
 8005f58:	6822      	ldr	r2, [r4, #0]
 8005f5a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005f5e:	6022      	str	r2, [r4, #0]
 8005f60:	68a2      	ldr	r2, [r4, #8]
 8005f62:	1e51      	subs	r1, r2, #1
 8005f64:	60a1      	str	r1, [r4, #8]
 8005f66:	b192      	cbz	r2, 8005f8e <_scanf_i+0xb6>
 8005f68:	6832      	ldr	r2, [r6, #0]
 8005f6a:	1c51      	adds	r1, r2, #1
 8005f6c:	6031      	str	r1, [r6, #0]
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	f805 2b01 	strb.w	r2, [r5], #1
 8005f74:	6872      	ldr	r2, [r6, #4]
 8005f76:	3a01      	subs	r2, #1
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	6072      	str	r2, [r6, #4]
 8005f7c:	dc07      	bgt.n	8005f8e <_scanf_i+0xb6>
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4650      	mov	r0, sl
 8005f82:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005f86:	4790      	blx	r2
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f040 8085 	bne.w	8006098 <_scanf_i+0x1c0>
 8005f8e:	f10b 0b01 	add.w	fp, fp, #1
 8005f92:	f1bb 0f03 	cmp.w	fp, #3
 8005f96:	d1cb      	bne.n	8005f30 <_scanf_i+0x58>
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	b90b      	cbnz	r3, 8005fa0 <_scanf_i+0xc8>
 8005f9c:	230a      	movs	r3, #10
 8005f9e:	6063      	str	r3, [r4, #4]
 8005fa0:	6863      	ldr	r3, [r4, #4]
 8005fa2:	4948      	ldr	r1, [pc, #288]	; (80060c4 <_scanf_i+0x1ec>)
 8005fa4:	6960      	ldr	r0, [r4, #20]
 8005fa6:	1ac9      	subs	r1, r1, r3
 8005fa8:	f000 f8a0 	bl	80060ec <__sccl>
 8005fac:	f04f 0b00 	mov.w	fp, #0
 8005fb0:	68a3      	ldr	r3, [r4, #8]
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d03d      	beq.n	8006034 <_scanf_i+0x15c>
 8005fb8:	6831      	ldr	r1, [r6, #0]
 8005fba:	6960      	ldr	r0, [r4, #20]
 8005fbc:	f891 c000 	ldrb.w	ip, [r1]
 8005fc0:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d035      	beq.n	8006034 <_scanf_i+0x15c>
 8005fc8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005fcc:	d124      	bne.n	8006018 <_scanf_i+0x140>
 8005fce:	0510      	lsls	r0, r2, #20
 8005fd0:	d522      	bpl.n	8006018 <_scanf_i+0x140>
 8005fd2:	f10b 0b01 	add.w	fp, fp, #1
 8005fd6:	f1b9 0f00 	cmp.w	r9, #0
 8005fda:	d003      	beq.n	8005fe4 <_scanf_i+0x10c>
 8005fdc:	3301      	adds	r3, #1
 8005fde:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005fe2:	60a3      	str	r3, [r4, #8]
 8005fe4:	6873      	ldr	r3, [r6, #4]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	6073      	str	r3, [r6, #4]
 8005fec:	dd1b      	ble.n	8006026 <_scanf_i+0x14e>
 8005fee:	6833      	ldr	r3, [r6, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	6033      	str	r3, [r6, #0]
 8005ff4:	68a3      	ldr	r3, [r4, #8]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	60a3      	str	r3, [r4, #8]
 8005ffa:	e7d9      	b.n	8005fb0 <_scanf_i+0xd8>
 8005ffc:	f1bb 0f02 	cmp.w	fp, #2
 8006000:	d1ae      	bne.n	8005f60 <_scanf_i+0x88>
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006008:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800600c:	d1bf      	bne.n	8005f8e <_scanf_i+0xb6>
 800600e:	2310      	movs	r3, #16
 8006010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006014:	6063      	str	r3, [r4, #4]
 8006016:	e7a2      	b.n	8005f5e <_scanf_i+0x86>
 8006018:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800601c:	6022      	str	r2, [r4, #0]
 800601e:	780b      	ldrb	r3, [r1, #0]
 8006020:	f805 3b01 	strb.w	r3, [r5], #1
 8006024:	e7de      	b.n	8005fe4 <_scanf_i+0x10c>
 8006026:	4631      	mov	r1, r6
 8006028:	4650      	mov	r0, sl
 800602a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800602e:	4798      	blx	r3
 8006030:	2800      	cmp	r0, #0
 8006032:	d0df      	beq.n	8005ff4 <_scanf_i+0x11c>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	05db      	lsls	r3, r3, #23
 8006038:	d50d      	bpl.n	8006056 <_scanf_i+0x17e>
 800603a:	42bd      	cmp	r5, r7
 800603c:	d909      	bls.n	8006052 <_scanf_i+0x17a>
 800603e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006042:	4632      	mov	r2, r6
 8006044:	4650      	mov	r0, sl
 8006046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800604a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800604e:	4798      	blx	r3
 8006050:	464d      	mov	r5, r9
 8006052:	42bd      	cmp	r5, r7
 8006054:	d02d      	beq.n	80060b2 <_scanf_i+0x1da>
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	f012 0210 	ands.w	r2, r2, #16
 800605c:	d113      	bne.n	8006086 <_scanf_i+0x1ae>
 800605e:	702a      	strb	r2, [r5, #0]
 8006060:	4639      	mov	r1, r7
 8006062:	6863      	ldr	r3, [r4, #4]
 8006064:	4650      	mov	r0, sl
 8006066:	9e01      	ldr	r6, [sp, #4]
 8006068:	47b0      	blx	r6
 800606a:	6821      	ldr	r1, [r4, #0]
 800606c:	f8d8 3000 	ldr.w	r3, [r8]
 8006070:	f011 0f20 	tst.w	r1, #32
 8006074:	d013      	beq.n	800609e <_scanf_i+0x1c6>
 8006076:	1d1a      	adds	r2, r3, #4
 8006078:	f8c8 2000 	str.w	r2, [r8]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6018      	str	r0, [r3, #0]
 8006080:	68e3      	ldr	r3, [r4, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60e3      	str	r3, [r4, #12]
 8006086:	2000      	movs	r0, #0
 8006088:	1bed      	subs	r5, r5, r7
 800608a:	44ab      	add	fp, r5
 800608c:	6925      	ldr	r5, [r4, #16]
 800608e:	445d      	add	r5, fp
 8006090:	6125      	str	r5, [r4, #16]
 8006092:	b007      	add	sp, #28
 8006094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006098:	f04f 0b00 	mov.w	fp, #0
 800609c:	e7ca      	b.n	8006034 <_scanf_i+0x15c>
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	f8c8 2000 	str.w	r2, [r8]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f011 0f01 	tst.w	r1, #1
 80060aa:	bf14      	ite	ne
 80060ac:	8018      	strhne	r0, [r3, #0]
 80060ae:	6018      	streq	r0, [r3, #0]
 80060b0:	e7e6      	b.n	8006080 <_scanf_i+0x1a8>
 80060b2:	2001      	movs	r0, #1
 80060b4:	e7ed      	b.n	8006092 <_scanf_i+0x1ba>
 80060b6:	bf00      	nop
 80060b8:	08006428 	.word	0x08006428
 80060bc:	080058f9 	.word	0x080058f9
 80060c0:	080062dd 	.word	0x080062dd
 80060c4:	080067a9 	.word	0x080067a9

080060c8 <_read_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	4611      	mov	r1, r2
 80060d0:	2200      	movs	r2, #0
 80060d2:	4d05      	ldr	r5, [pc, #20]	; (80060e8 <_read_r+0x20>)
 80060d4:	602a      	str	r2, [r5, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f7fb f973 	bl	80013c2 <_read>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_read_r+0x1e>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_read_r+0x1e>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	2000053c 	.word	0x2000053c

080060ec <__sccl>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	780b      	ldrb	r3, [r1, #0]
 80060f0:	4604      	mov	r4, r0
 80060f2:	2b5e      	cmp	r3, #94	; 0x5e
 80060f4:	bf13      	iteet	ne
 80060f6:	2200      	movne	r2, #0
 80060f8:	2201      	moveq	r2, #1
 80060fa:	784b      	ldrbeq	r3, [r1, #1]
 80060fc:	1c48      	addne	r0, r1, #1
 80060fe:	bf08      	it	eq
 8006100:	1c88      	addeq	r0, r1, #2
 8006102:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006106:	1e61      	subs	r1, r4, #1
 8006108:	f801 2f01 	strb.w	r2, [r1, #1]!
 800610c:	42a9      	cmp	r1, r5
 800610e:	d1fb      	bne.n	8006108 <__sccl+0x1c>
 8006110:	b90b      	cbnz	r3, 8006116 <__sccl+0x2a>
 8006112:	3801      	subs	r0, #1
 8006114:	bd70      	pop	{r4, r5, r6, pc}
 8006116:	f082 0201 	eor.w	r2, r2, #1
 800611a:	4605      	mov	r5, r0
 800611c:	54e2      	strb	r2, [r4, r3]
 800611e:	4628      	mov	r0, r5
 8006120:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006124:	292d      	cmp	r1, #45	; 0x2d
 8006126:	d006      	beq.n	8006136 <__sccl+0x4a>
 8006128:	295d      	cmp	r1, #93	; 0x5d
 800612a:	d0f3      	beq.n	8006114 <__sccl+0x28>
 800612c:	b909      	cbnz	r1, 8006132 <__sccl+0x46>
 800612e:	4628      	mov	r0, r5
 8006130:	e7f0      	b.n	8006114 <__sccl+0x28>
 8006132:	460b      	mov	r3, r1
 8006134:	e7f1      	b.n	800611a <__sccl+0x2e>
 8006136:	786e      	ldrb	r6, [r5, #1]
 8006138:	2e5d      	cmp	r6, #93	; 0x5d
 800613a:	d0fa      	beq.n	8006132 <__sccl+0x46>
 800613c:	42b3      	cmp	r3, r6
 800613e:	dcf8      	bgt.n	8006132 <__sccl+0x46>
 8006140:	4619      	mov	r1, r3
 8006142:	3502      	adds	r5, #2
 8006144:	3101      	adds	r1, #1
 8006146:	428e      	cmp	r6, r1
 8006148:	5462      	strb	r2, [r4, r1]
 800614a:	dcfb      	bgt.n	8006144 <__sccl+0x58>
 800614c:	1af1      	subs	r1, r6, r3
 800614e:	3901      	subs	r1, #1
 8006150:	42b3      	cmp	r3, r6
 8006152:	bfa8      	it	ge
 8006154:	2100      	movge	r1, #0
 8006156:	1c58      	adds	r0, r3, #1
 8006158:	1843      	adds	r3, r0, r1
 800615a:	e7e0      	b.n	800611e <__sccl+0x32>

0800615c <_raise_r>:
 800615c:	291f      	cmp	r1, #31
 800615e:	b538      	push	{r3, r4, r5, lr}
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
 8006164:	d904      	bls.n	8006170 <_raise_r+0x14>
 8006166:	2316      	movs	r3, #22
 8006168:	6003      	str	r3, [r0, #0]
 800616a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006172:	b112      	cbz	r2, 800617a <_raise_r+0x1e>
 8006174:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006178:	b94b      	cbnz	r3, 800618e <_raise_r+0x32>
 800617a:	4620      	mov	r0, r4
 800617c:	f000 f830 	bl	80061e0 <_getpid_r>
 8006180:	462a      	mov	r2, r5
 8006182:	4601      	mov	r1, r0
 8006184:	4620      	mov	r0, r4
 8006186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800618a:	f000 b817 	b.w	80061bc <_kill_r>
 800618e:	2b01      	cmp	r3, #1
 8006190:	d00a      	beq.n	80061a8 <_raise_r+0x4c>
 8006192:	1c59      	adds	r1, r3, #1
 8006194:	d103      	bne.n	800619e <_raise_r+0x42>
 8006196:	2316      	movs	r3, #22
 8006198:	6003      	str	r3, [r0, #0]
 800619a:	2001      	movs	r0, #1
 800619c:	e7e7      	b.n	800616e <_raise_r+0x12>
 800619e:	2400      	movs	r4, #0
 80061a0:	4628      	mov	r0, r5
 80061a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061a6:	4798      	blx	r3
 80061a8:	2000      	movs	r0, #0
 80061aa:	e7e0      	b.n	800616e <_raise_r+0x12>

080061ac <raise>:
 80061ac:	4b02      	ldr	r3, [pc, #8]	; (80061b8 <raise+0xc>)
 80061ae:	4601      	mov	r1, r0
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	f7ff bfd3 	b.w	800615c <_raise_r>
 80061b6:	bf00      	nop
 80061b8:	200001a0 	.word	0x200001a0

080061bc <_kill_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	2300      	movs	r3, #0
 80061c0:	4d06      	ldr	r5, [pc, #24]	; (80061dc <_kill_r+0x20>)
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	f7fb f8e0 	bl	800138e <_kill>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d102      	bne.n	80061d8 <_kill_r+0x1c>
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	b103      	cbz	r3, 80061d8 <_kill_r+0x1c>
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	bd38      	pop	{r3, r4, r5, pc}
 80061da:	bf00      	nop
 80061dc:	2000053c 	.word	0x2000053c

080061e0 <_getpid_r>:
 80061e0:	f7fb b8ce 	b.w	8001380 <_getpid>

080061e4 <_strtol_l.constprop.0>:
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ea:	4680      	mov	r8, r0
 80061ec:	d001      	beq.n	80061f2 <_strtol_l.constprop.0+0xe>
 80061ee:	2b24      	cmp	r3, #36	; 0x24
 80061f0:	d906      	bls.n	8006200 <_strtol_l.constprop.0+0x1c>
 80061f2:	f7fd fbf5 	bl	80039e0 <__errno>
 80061f6:	2316      	movs	r3, #22
 80061f8:	6003      	str	r3, [r0, #0]
 80061fa:	2000      	movs	r0, #0
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	460d      	mov	r5, r1
 8006202:	4f35      	ldr	r7, [pc, #212]	; (80062d8 <_strtol_l.constprop.0+0xf4>)
 8006204:	4628      	mov	r0, r5
 8006206:	f815 4b01 	ldrb.w	r4, [r5], #1
 800620a:	5de6      	ldrb	r6, [r4, r7]
 800620c:	f016 0608 	ands.w	r6, r6, #8
 8006210:	d1f8      	bne.n	8006204 <_strtol_l.constprop.0+0x20>
 8006212:	2c2d      	cmp	r4, #45	; 0x2d
 8006214:	d12f      	bne.n	8006276 <_strtol_l.constprop.0+0x92>
 8006216:	2601      	movs	r6, #1
 8006218:	782c      	ldrb	r4, [r5, #0]
 800621a:	1c85      	adds	r5, r0, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d057      	beq.n	80062d0 <_strtol_l.constprop.0+0xec>
 8006220:	2b10      	cmp	r3, #16
 8006222:	d109      	bne.n	8006238 <_strtol_l.constprop.0+0x54>
 8006224:	2c30      	cmp	r4, #48	; 0x30
 8006226:	d107      	bne.n	8006238 <_strtol_l.constprop.0+0x54>
 8006228:	7828      	ldrb	r0, [r5, #0]
 800622a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800622e:	2858      	cmp	r0, #88	; 0x58
 8006230:	d149      	bne.n	80062c6 <_strtol_l.constprop.0+0xe2>
 8006232:	2310      	movs	r3, #16
 8006234:	786c      	ldrb	r4, [r5, #1]
 8006236:	3502      	adds	r5, #2
 8006238:	2700      	movs	r7, #0
 800623a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800623e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006242:	fbbe f9f3 	udiv	r9, lr, r3
 8006246:	4638      	mov	r0, r7
 8006248:	fb03 ea19 	mls	sl, r3, r9, lr
 800624c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006250:	f1bc 0f09 	cmp.w	ip, #9
 8006254:	d814      	bhi.n	8006280 <_strtol_l.constprop.0+0x9c>
 8006256:	4664      	mov	r4, ip
 8006258:	42a3      	cmp	r3, r4
 800625a:	dd22      	ble.n	80062a2 <_strtol_l.constprop.0+0xbe>
 800625c:	2f00      	cmp	r7, #0
 800625e:	db1d      	blt.n	800629c <_strtol_l.constprop.0+0xb8>
 8006260:	4581      	cmp	r9, r0
 8006262:	d31b      	bcc.n	800629c <_strtol_l.constprop.0+0xb8>
 8006264:	d101      	bne.n	800626a <_strtol_l.constprop.0+0x86>
 8006266:	45a2      	cmp	sl, r4
 8006268:	db18      	blt.n	800629c <_strtol_l.constprop.0+0xb8>
 800626a:	2701      	movs	r7, #1
 800626c:	fb00 4003 	mla	r0, r0, r3, r4
 8006270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006274:	e7ea      	b.n	800624c <_strtol_l.constprop.0+0x68>
 8006276:	2c2b      	cmp	r4, #43	; 0x2b
 8006278:	bf04      	itt	eq
 800627a:	782c      	ldrbeq	r4, [r5, #0]
 800627c:	1c85      	addeq	r5, r0, #2
 800627e:	e7cd      	b.n	800621c <_strtol_l.constprop.0+0x38>
 8006280:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006284:	f1bc 0f19 	cmp.w	ip, #25
 8006288:	d801      	bhi.n	800628e <_strtol_l.constprop.0+0xaa>
 800628a:	3c37      	subs	r4, #55	; 0x37
 800628c:	e7e4      	b.n	8006258 <_strtol_l.constprop.0+0x74>
 800628e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006292:	f1bc 0f19 	cmp.w	ip, #25
 8006296:	d804      	bhi.n	80062a2 <_strtol_l.constprop.0+0xbe>
 8006298:	3c57      	subs	r4, #87	; 0x57
 800629a:	e7dd      	b.n	8006258 <_strtol_l.constprop.0+0x74>
 800629c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80062a0:	e7e6      	b.n	8006270 <_strtol_l.constprop.0+0x8c>
 80062a2:	2f00      	cmp	r7, #0
 80062a4:	da07      	bge.n	80062b6 <_strtol_l.constprop.0+0xd2>
 80062a6:	2322      	movs	r3, #34	; 0x22
 80062a8:	4670      	mov	r0, lr
 80062aa:	f8c8 3000 	str.w	r3, [r8]
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d0a4      	beq.n	80061fc <_strtol_l.constprop.0+0x18>
 80062b2:	1e69      	subs	r1, r5, #1
 80062b4:	e005      	b.n	80062c2 <_strtol_l.constprop.0+0xde>
 80062b6:	b106      	cbz	r6, 80062ba <_strtol_l.constprop.0+0xd6>
 80062b8:	4240      	negs	r0, r0
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	d09e      	beq.n	80061fc <_strtol_l.constprop.0+0x18>
 80062be:	2f00      	cmp	r7, #0
 80062c0:	d1f7      	bne.n	80062b2 <_strtol_l.constprop.0+0xce>
 80062c2:	6011      	str	r1, [r2, #0]
 80062c4:	e79a      	b.n	80061fc <_strtol_l.constprop.0+0x18>
 80062c6:	2430      	movs	r4, #48	; 0x30
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1b5      	bne.n	8006238 <_strtol_l.constprop.0+0x54>
 80062cc:	2308      	movs	r3, #8
 80062ce:	e7b3      	b.n	8006238 <_strtol_l.constprop.0+0x54>
 80062d0:	2c30      	cmp	r4, #48	; 0x30
 80062d2:	d0a9      	beq.n	8006228 <_strtol_l.constprop.0+0x44>
 80062d4:	230a      	movs	r3, #10
 80062d6:	e7af      	b.n	8006238 <_strtol_l.constprop.0+0x54>
 80062d8:	08006690 	.word	0x08006690

080062dc <_strtol_r>:
 80062dc:	f7ff bf82 	b.w	80061e4 <_strtol_l.constprop.0>

080062e0 <__submore>:
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	460c      	mov	r4, r1
 80062e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80062e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062ec:	4299      	cmp	r1, r3
 80062ee:	d11b      	bne.n	8006328 <__submore+0x48>
 80062f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062f4:	f7fd ffa0 	bl	8004238 <_malloc_r>
 80062f8:	b918      	cbnz	r0, 8006302 <__submore+0x22>
 80062fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006306:	63a3      	str	r3, [r4, #56]	; 0x38
 8006308:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800630c:	6360      	str	r0, [r4, #52]	; 0x34
 800630e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006312:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006316:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800631a:	7043      	strb	r3, [r0, #1]
 800631c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006320:	7003      	strb	r3, [r0, #0]
 8006322:	6020      	str	r0, [r4, #0]
 8006324:	2000      	movs	r0, #0
 8006326:	e7ea      	b.n	80062fe <__submore+0x1e>
 8006328:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800632a:	0077      	lsls	r7, r6, #1
 800632c:	463a      	mov	r2, r7
 800632e:	f7ff fb75 	bl	8005a1c <_realloc_r>
 8006332:	4605      	mov	r5, r0
 8006334:	2800      	cmp	r0, #0
 8006336:	d0e0      	beq.n	80062fa <__submore+0x1a>
 8006338:	eb00 0806 	add.w	r8, r0, r6
 800633c:	4601      	mov	r1, r0
 800633e:	4632      	mov	r2, r6
 8006340:	4640      	mov	r0, r8
 8006342:	f7ff fb5d 	bl	8005a00 <memcpy>
 8006346:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800634a:	f8c4 8000 	str.w	r8, [r4]
 800634e:	e7e9      	b.n	8006324 <__submore+0x44>

08006350 <_malloc_usable_size_r>:
 8006350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006354:	1f18      	subs	r0, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfbc      	itt	lt
 800635a:	580b      	ldrlt	r3, [r1, r0]
 800635c:	18c0      	addlt	r0, r0, r3
 800635e:	4770      	bx	lr

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
